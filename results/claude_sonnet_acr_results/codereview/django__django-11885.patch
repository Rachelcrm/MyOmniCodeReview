{
  "patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex ae82d26340..b9e00ce6b0 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -262,6 +262,41 @@ class Collector:\n             for obj in instances:\n                 yield model, obj\n \n+    def _combine_fast_deletes(self):\n+        \"\"\"\n+        Combine fast delete querysets by model to reduce database roundtrips.\n+        Returns a list of combined querysets, one per model.\n+        \"\"\"\n+        if not self.fast_deletes:\n+            return []\n+        \n+        # Group querysets by model\n+        grouped_querysets = {}\n+        for qs in self.fast_deletes:\n+            model = qs.model\n+            if model not in grouped_querysets:\n+                grouped_querysets[model] = []\n+            grouped_querysets[model].append(qs)\n+        \n+        # Combine querysets for each model\n+        combined_querysets = []\n+        for model, querysets in grouped_querysets.items():\n+            if len(querysets) == 1:\n+                # No need to combine if there's only one queryset\n+                combined_querysets.append(querysets[0])\n+            else:\n+                # Combine multiple querysets using OR\n+                combined_q = Q()\n+                for qs in querysets:\n+                    # Extract the WHERE condition from each queryset\n+                    combined_q |= Q(pk__in=qs.values_list('pk', flat=True))\n+                \n+                # Create a new queryset with the combined condition\n+                combined_qs = model._base_manager.using(self.using).filter(combined_q)\n+                combined_querysets.append(combined_qs)\n+        \n+        return combined_querysets\n+\n     def sort(self):\n         sorted_models = []\n         concrete_models = set()\n@@ -310,7 +345,8 @@ class Collector:\n                     )\n \n             # fast deletes\n-            for qs in self.fast_deletes:\n+            combined_fast_deletes = self._combine_fast_deletes()\n+            for qs in combined_fast_deletes:\n                 count = qs._raw_delete(using=self.using)\n                 deleted_counter[qs.model._meta.label] += count\n \n"
}