{
  "patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 118bfced89..e76fae26c9 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1299,6 +1299,34 @@ def _format_value(value):\n \n def _format_float(value):\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n+    # First try Python's default string representation\n+    default_str = str(value)\n+    \n+    # Check if the default representation is suitable:\n+    # 1. Fits within 20 characters\n+    # 2. Contains decimal point or scientific notation (to be recognized as float)\n+    # 3. Is a valid representation\n+    if (len(default_str) <= 20 and \n+        (\".\" in default_str or \"E\" in default_str.upper()) and\n+        default_str not in (\"inf\", \"-inf\", \"nan\")):\n+        value_str = default_str\n+        \n+        # Normalize scientific notation if present\n+        if \"E\" in value_str:\n+            # On some Windows builds of Python (and possibly other platforms?) the\n+            # exponent is zero-padded out to, it seems, three digits.  Normalize\n+            # the format to pad only to two digits.\n+            significand, exponent = value_str.split(\"E\")\n+            if exponent[0] in (\"+\", \"-\"):\n+                sign = exponent[0]\n+                exponent = exponent[1:]\n+            else:\n+                sign = \"\"\n+            value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n+        \n+        return value_str\n+    \n+    # Fall back to the original formatting logic\n     value_str = f\"{value:.16G}\"\n     if \".\" not in value_str and \"E\" not in value_str:\n         value_str += \".0\"\n"
}