{
  "patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 75b0646512..c170f171e1 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -378,6 +378,9 @@ class BaseFormSet(RenderableFormMixin):\n             self._non_form_errors.append(error)\n \n         for i, form in enumerate(self.forms):\n+            # Skip processing extra forms when in edit_only mode\n+            if getattr(self, 'edit_only', False) and i >= self.initial_form_count():\n+                continue\n             # Empty forms are unchanged forms beyond those with initial data.\n             if not form.has_changed() and i >= self.initial_form_count():\n                 empty_forms_count += 1\n@@ -478,7 +481,7 @@ class BaseFormSet(RenderableFormMixin):\n def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n                     can_delete=False, max_num=None, validate_max=False,\n                     min_num=None, validate_min=False, absolute_max=None,\n-                    can_delete_extra=True, renderer=None):\n+                    can_delete_extra=True, renderer=None, edit_only=False):\n     \"\"\"Return a FormSet for the given form class.\"\"\"\n     if min_num is None:\n         min_num = DEFAULT_MIN_NUM\n@@ -505,6 +508,7 @@ def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n         'validate_min': validate_min,\n         'validate_max': validate_max,\n         'renderer': renderer or get_default_renderer(),\n+        'edit_only': edit_only,\n     }\n     return type(form.__name__ + 'FormSet', (formset,), attrs)\n \ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..ca9a64a978 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -576,6 +576,7 @@ class BaseModelFormSet(BaseFormSet):\n                  queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.edit_only = kwargs.pop('edit_only', getattr(self, 'edit_only', False))\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n@@ -813,6 +814,8 @@ class BaseModelFormSet(BaseFormSet):\n \n     def save_new_objects(self, commit=True):\n         self.new_objects = []\n+        if self.edit_only:\n+            return self.new_objects\n         for form in self.extra_forms:\n             if not form.has_changed():\n                 continue\n@@ -875,7 +878,8 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         edit_only=False):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -894,7 +898,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              renderer=renderer, edit_only=edit_only)\n     FormSet.model = model\n     return FormSet\n \n"
}