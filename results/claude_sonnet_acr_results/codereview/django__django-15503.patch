{
  "patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fdca700c9d..b2aca55ef4 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -193,13 +193,12 @@ class HasKeyLookup(PostgresOperatorLookup):\n                 *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)\n             else:\n                 rhs_key_transforms = [key]\n-            rhs_params.append(\n-                \"%s%s\"\n-                % (\n-                    lhs_json_path,\n-                    compile_json_path(rhs_key_transforms, include_root=False),\n-                )\n-            )\n+            # For has_key lookups, always treat keys as object keys, not array indices\n+            # This fixes the issue with numeric string keys like '1111'\n+            json_path_parts = []\n+            for key_transform in rhs_key_transforms:\n+                json_path_parts.append(\".%s\" % json.dumps(key_transform)[1:-1])\n+            rhs_params.append(\"%s%s\" % (lhs_json_path, \"\".join(json_path_parts)))\n         # Add condition for each key.\n         if self.logical_operator:\n             sql = \"(%s)\" % self.logical_operator.join([sql] * len(rhs_params))\n@@ -227,9 +226,37 @@ class HasKeyLookup(PostgresOperatorLookup):\n         return super().as_postgresql(compiler, connection)\n \n     def as_sqlite(self, compiler, connection):\n-        return self.as_sql(\n-            compiler, connection, template=\"JSON_TYPE(%s, %%s) IS NOT NULL\"\n-        )\n+        # Process JSON path from the left-hand side.\n+        if isinstance(self.lhs, KeyTransform):\n+            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(\n+                compiler, connection\n+            )\n+            lhs_json_path = compile_json_path(lhs_key_transforms)\n+        else:\n+            lhs, lhs_params = self.process_lhs(compiler, connection)\n+            lhs_json_path = \"$\"\n+        sql = \"JSON_TYPE(%s, %%s) IS NOT NULL\" % lhs\n+        # Process JSON path from the right-hand side.\n+        rhs = self.rhs\n+        rhs_params = []\n+        if not isinstance(rhs, (list, tuple)):\n+            rhs = [rhs]\n+        for key in rhs:\n+            if isinstance(key, KeyTransform):\n+                *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)\n+            else:\n+                rhs_key_transforms = [key]\n+            # For SQLite has_key lookups, always treat keys as object keys\n+            # This fixes the issue with numeric string keys like '1111'\n+            import json\n+            json_path_parts = []\n+            for key_transform in rhs_key_transforms:\n+                json_path_parts.append(\".%s\" % json.dumps(key_transform)[1:-1])\n+            rhs_params.append(\"%s%s\" % (lhs_json_path, \"\".join(json_path_parts)))\n+        # Add condition for each key.\n+        if self.logical_operator:\n+            sql = \"(%s)\" % self.logical_operator.join([sql] * len(rhs_params))\n+        return sql, tuple(lhs_params) + tuple(rhs_params)\n \n \n class HasKey(HasKeyLookup):\n"
}