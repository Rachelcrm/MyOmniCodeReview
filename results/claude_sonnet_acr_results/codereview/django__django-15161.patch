{
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..f1d643a646 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -608,6 +608,13 @@ class F(Combinable):\n     def __hash__(self):\n         return hash(self.name)\n \n+    def deconstruct(self):\n+        return (\n+            'django.db.models.F',\n+            (self.name,),\n+            {}\n+        )\n+\n \n class ResolvedOuterRef(F):\n     \"\"\"\n@@ -650,6 +657,13 @@ class OuterRef(F):\n     def relabeled_clone(self, relabels):\n         return self\n \n+    def deconstruct(self):\n+        return (\n+            'django.db.models.OuterRef',\n+            (self.name,),\n+            {}\n+        )\n+\n \n class Func(SQLiteNumericMixin, Expression):\n     \"\"\"An SQL function call.\"\"\"\n@@ -672,6 +686,19 @@ class Func(SQLiteNumericMixin, Expression):\n         self.source_expressions = self._parse_expressions(*expressions)\n         self.extra = extra\n \n+    def deconstruct(self):\n+        args = tuple(self.source_expressions)\n+        kwargs = {}\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self.output_field\n+        if self.extra:\n+            kwargs.update(self.extra)\n+        return (\n+            'django.db.models.Func',\n+            args,\n+            kwargs\n+        )\n+\n     def __repr__(self):\n         args = self.arg_joiner.join(str(arg) for arg in self.source_expressions)\n         extra = {**self.extra, **self._get_repr_options()}\n@@ -749,6 +776,16 @@ class Value(SQLiteNumericMixin, Expression):\n         super().__init__(output_field=output_field)\n         self.value = value\n \n+    def deconstruct(self):\n+        kwargs = {}\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (\n+            'django.db.models.Value',\n+            (self.value,),\n+            kwargs\n+        )\n+\n     def __repr__(self):\n         return f'{self.__class__.__name__}({self.value!r})'\n \n@@ -963,6 +1000,13 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         super().__init__(output_field=output_field)\n         self.expression = expression\n \n+    def deconstruct(self):\n+        return (\n+            'django.db.models.ExpressionWrapper',\n+            (self.expression, self.output_field),\n+            {}\n+        )\n+\n     def set_source_expressions(self, exprs):\n         self.expression = exprs[0]\n \n@@ -1007,6 +1051,24 @@ class When(Expression):\n         self.condition = condition\n         self.result = self._parse_expressions(then)[0]\n \n+    def deconstruct(self):\n+        kwargs = {}\n+        # Reconstruct the original arguments\n+        if hasattr(self, '_constructor_args'):\n+            # If we stored the original constructor args, use them\n+            return (\n+                'django.db.models.When',\n+                self._constructor_args[0],\n+                self._constructor_args[1]\n+            )\n+        else:\n+            # Fallback: reconstruct from current state\n+            return (\n+                'django.db.models.When',\n+                (),\n+                {'condition': self.condition, 'then': self.result}\n+            )\n+\n     def __str__(self):\n         return \"WHEN %r THEN %r\" % (self.condition, self.result)\n \n@@ -1075,6 +1137,21 @@ class Case(SQLiteNumericMixin, Expression):\n         self.default = self._parse_expressions(default)[0]\n         self.extra = extra\n \n+    def deconstruct(self):\n+        args = tuple(self.cases)\n+        kwargs = {}\n+        if self.default is not None:\n+            kwargs['default'] = self.default\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self.output_field\n+        if self.extra:\n+            kwargs.update(self.extra)\n+        return (\n+            'django.db.models.Case',\n+            args,\n+            kwargs\n+        )\n+\n     def __str__(self):\n         return \"CASE %s, ELSE %r\" % (', '.join(str(c) for c in self.cases), self.default)\n \n@@ -1148,6 +1225,20 @@ class Subquery(BaseExpression, Combinable):\n         self.extra = extra\n         super().__init__(output_field)\n \n+    def deconstruct(self):\n+        # For subqueries, we need to store the original queryset\n+        # This is complex because we need to reconstruct the queryset\n+        kwargs = {}\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self.output_field\n+        if self.extra:\n+            kwargs.update(self.extra)\n+        return (\n+            'django.db.models.Subquery',\n+            (self.query,),\n+            kwargs\n+        )\n+\n     def get_source_expressions(self):\n         return [self.query]\n \n"
}