{
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..015d3c43ef 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -704,6 +704,22 @@ class SQLCompiler:\n         not be) and column name for ordering by the given 'name' parameter.\n         The 'name' is of the form 'field1__field2__...__fieldN'.\n         \"\"\"\n+        # Handle OrderBy expression objects from Meta.ordering\n+        if hasattr(name, 'resolve_expression'):\n+            # This is an OrderBy expression object\n+            if hasattr(name, 'descending'):\n+                # Extract descending info and expression from OrderBy object\n+                descending = name.descending\n+                expression = name.expression\n+                # Recursively process the expression\n+                return self.find_ordering_name(expression, opts, alias, \n+                                             'DESC' if descending else 'ASC', already_seen)\n+            else:\n+                # This is some other expression, wrap it in OrderBy\n+                order_dir = 'DESC' if default_order == 'DESC' else 'ASC'\n+                descending = order_dir == 'DESC'\n+                return [(OrderBy(name, descending=descending), False)]\n+        \n         name, order = get_order_dir(name, default_order)\n         descending = order == 'DESC'\n         pieces = name.split(LOOKUP_SEP)\n"
}