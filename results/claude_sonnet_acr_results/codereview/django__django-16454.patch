{
  "patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex abc6f79a15..50c1e7fda9 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -71,6 +71,33 @@ class CommandParser(ArgumentParser):\n         else:\n             raise CommandError(\"Error: %s\" % message)\n \n+    def add_subparsers(self, **kwargs):\n+        # Get the subparser action from the parent class\n+        subparsers_action = super().add_subparsers(**kwargs)\n+        \n+        # Store the original add_parser method\n+        original_add_parser = subparsers_action.add_parser\n+        \n+        # Create a wrapper that uses CommandParser instead of ArgumentParser\n+        def add_parser_wrapper(*args, **parser_kwargs):\n+            # Set the parser_class to CommandParser if not already specified\n+            if 'parser_class' not in parser_kwargs:\n+                parser_kwargs['parser_class'] = CommandParser\n+            \n+            # If using CommandParser, pass through our custom parameters\n+            if parser_kwargs.get('parser_class') is CommandParser:\n+                if 'missing_args_message' not in parser_kwargs:\n+                    parser_kwargs['missing_args_message'] = self.missing_args_message\n+                if 'called_from_command_line' not in parser_kwargs:\n+                    parser_kwargs['called_from_command_line'] = self.called_from_command_line\n+            \n+            return original_add_parser(*args, **parser_kwargs)\n+        \n+        # Replace the add_parser method with our wrapper\n+        subparsers_action.add_parser = add_parser_wrapper\n+        \n+        return subparsers_action\n+\n \n def handle_default_options(options):\n     \"\"\"\n"
}