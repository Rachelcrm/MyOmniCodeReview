{
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex f02199d97c..9c8b5e89a5 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1411,14 +1411,31 @@ class SQLInsertCompiler(SQLCompiler):\n                 cursor.execute(sql, params)\n             if not self.returning_fields:\n                 return []\n+            \n+            # Get the raw results from the database\n             if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:\n-                return self.connection.ops.fetch_returned_insert_rows(cursor)\n-            if self.connection.features.can_return_columns_from_insert:\n+                results = self.connection.ops.fetch_returned_insert_rows(cursor)\n+            elif self.connection.features.can_return_columns_from_insert:\n                 assert len(self.query.objs) == 1\n-                return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]\n-            return [(self.connection.ops.last_insert_id(\n-                cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column\n-            ),)]\n+                results = [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]\n+            else:\n+                results = [(self.connection.ops.last_insert_id(\n+                    cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column\n+                ),)]\n+            \n+            # Apply database converters to the returned values\n+            if self.returning_fields and results:\n+                converted_results = []\n+                for row in results:\n+                    converted_row = []\n+                    for field, value in zip(self.returning_fields, row):\n+                        if hasattr(field, 'from_db_value'):\n+                            value = field.from_db_value(value, None, self.connection)\n+                        converted_row.append(value)\n+                    converted_results.append(tuple(converted_row))\n+                return converted_results\n+            \n+            return results\n \n \n class SQLDeleteCompiler(SQLCompiler):\n"
}