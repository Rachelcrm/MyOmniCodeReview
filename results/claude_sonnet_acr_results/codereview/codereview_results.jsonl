{"instance_id": "astropy__astropy-12907", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..45bea36085 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -242,7 +242,7 @@ def _cstack(left, right):\n         cright = _coord_matrix(right, 'right', noutp)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n \n     return np.hstack([cleft, cright])\n \n"}, "success": true, "processing_time": 178.62594485282898, "attempts": 1, "error": null}
{"instance_id": "astropy__astropy-13236", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/astropy/table/table.py b/astropy/table/table.py\nindex 5afe2127a3..15058b104a 100644\n--- a/astropy/table/table.py\n+++ b/astropy/table/table.py\n@@ -1239,12 +1239,14 @@ class Table:\n                                 f'{fully_qualified_name} '\n                                 'did not return a valid mixin column')\n \n-        # Structured ndarray gets viewed as a mixin unless already a valid\n-        # mixin class\n+        # Issue a FutureWarning for structured arrays and let them be processed as regular columns\n         if (not isinstance(data, Column) and not data_is_mixin\n                 and isinstance(data, np.ndarray) and len(data.dtype) > 1):\n-            data = data.view(NdarrayMixin)\n-            data_is_mixin = True\n+            import warnings\n+            warnings.warn(\"Structured numpy arrays will be automatically converted to regular \"\n+                         \"Column objects in astropy 5.2. To avoid this warning, explicitly \"\n+                         \"wrap the array with Column() before adding to the table.\",\n+                         FutureWarning, stacklevel=4)\n \n         # Get the final column name using precedence.  Some objects may not\n         # have an info attribute. Also avoid creating info as a side effect.\n"}, "success": true, "processing_time": 107.19463872909546, "attempts": 1, "error": null}
{"instance_id": "astropy__astropy-13453", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 266cf229cc..c9782eb17d 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -423,21 +423,31 @@ class HTML(core.BaseReader):\n                         # requires that the weakref info._parent be maintained.\n                         new_cols = []\n \n-                        for col, col_escaped in zip(cols, cols_escaped):\n+                        # Get formatted string values for all columns using self.data.str_vals()\n+                        formatted_str_vals = list(self.data.str_vals())\n+                        \n+                        for col_idx, (col, col_escaped) in enumerate(zip(cols, cols_escaped)):\n                             if len(col.shape) > 1 and self.html['multicol']:\n                                 span = col.shape[1]\n                                 for i in range(span):\n                                     # Split up multicolumns into separate columns\n                                     new_col = Column([el[i] for el in col])\n-\n-                                    new_col_iter_str_vals = self.fill_values(\n-                                        col, new_col.info.iter_str_vals())\n+                                    \n+                                    # For multicolumn, we need to extract the i-th element from each formatted value\n+                                    multicol_str_vals = []\n+                                    for formatted_val in formatted_str_vals[col_idx]:\n+                                        if hasattr(formatted_val, '__getitem__') and len(formatted_val) > i:\n+                                            multicol_str_vals.append(str(formatted_val[i]))\n+                                        else:\n+                                            # Fallback to original formatting if formatted value doesn't support indexing\n+                                            multicol_str_vals.append(str(new_col[len(multicol_str_vals)]))\n+                                    \n+                                    new_col_iter_str_vals = self.fill_values(col, iter(multicol_str_vals))\n                                     col_str_iters.append(new_col_iter_str_vals)\n                                     new_cols_escaped.append(col_escaped)\n                                     new_cols.append(new_col)\n                             else:\n-\n-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n+                                col_iter_str_vals = self.fill_values(col, iter(formatted_str_vals[col_idx]))\n                                 col_str_iters.append(col_iter_str_vals)\n \n                                 new_cols_escaped.append(col_escaped)\n"}, "success": true, "processing_time": 177.0429298877716, "attempts": 1, "error": null}
{"instance_id": "astropy__astropy-14508", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 118bfced89..e76fae26c9 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1299,6 +1299,34 @@ def _format_value(value):\n \n def _format_float(value):\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n+    # First try Python's default string representation\n+    default_str = str(value)\n+    \n+    # Check if the default representation is suitable:\n+    # 1. Fits within 20 characters\n+    # 2. Contains decimal point or scientific notation (to be recognized as float)\n+    # 3. Is a valid representation\n+    if (len(default_str) <= 20 and \n+        (\".\" in default_str or \"E\" in default_str.upper()) and\n+        default_str not in (\"inf\", \"-inf\", \"nan\")):\n+        value_str = default_str\n+        \n+        # Normalize scientific notation if present\n+        if \"E\" in value_str:\n+            # On some Windows builds of Python (and possibly other platforms?) the\n+            # exponent is zero-padded out to, it seems, three digits.  Normalize\n+            # the format to pad only to two digits.\n+            significand, exponent = value_str.split(\"E\")\n+            if exponent[0] in (\"+\", \"-\"):\n+                sign = exponent[0]\n+                exponent = exponent[1:]\n+            else:\n+                sign = \"\"\n+            value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n+        \n+        return value_str\n+    \n+    # Fall back to the original formatting logic\n     value_str = f\"{value:.16G}\"\n     if \".\" not in value_str and \"E\" not in value_str:\n         value_str += \".0\"\n"}, "success": true, "processing_time": 182.68328976631165, "attempts": 1, "error": null}
{"instance_id": "astropy__astropy-7166", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d18..a9e382d55d 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -536,6 +536,23 @@ class InheritDocstrings(type):\n                     if super_method is not None:\n                         val.__doc__ = super_method.__doc__\n                         break\n+            elif (isinstance(val, property) and\n+                  is_public_member(key) and\n+                  val.__doc__ is None):\n+                for base in cls.__mro__[1:]:\n+                    super_property = getattr(base, key, None)\n+                    if (super_property is not None and\n+                        isinstance(super_property, property) and\n+                        super_property.__doc__ is not None):\n+                        # Create a new property with the inherited docstring\n+                        new_property = property(\n+                            val.fget,\n+                            val.fset,\n+                            val.fdel,\n+                            super_property.__doc__\n+                        )\n+                        setattr(cls, key, new_property)\n+                        break\n \n         super().__init__(name, bases, dct)\n \n"}, "success": true, "processing_time": 216.35626530647278, "attempts": 1, "error": null}
{"instance_id": "django__django-11099", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..1304f20a60 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n"}, "success": true, "processing_time": 80.56306171417236, "attempts": 1, "error": null}
{"instance_id": "django__django-11141", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 8c308621d2..d075fcc5df 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -84,11 +84,6 @@ class MigrationLoader:\n                     continue\n                 raise\n             else:\n-                # Empty directories are namespaces.\n-                # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n-                    self.unmigrated_apps.add(app_config.label)\n-                    continue\n                 # Module is not a package (e.g. migrations.py).\n                 if not hasattr(module, '__path__'):\n                     self.unmigrated_apps.add(app_config.label)\n"}, "success": true, "processing_time": 109.4187958240509, "attempts": 1, "error": null}
{"instance_id": "django__django-11149", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 880a2cc17b..46ad3ad415 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2115,27 +2115,48 @@ class InlineModelAdmin(BaseModelAdmin):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have the change permission for the related model in order to\n+            # be able to add relationships with the intermediate model.\n+            opts = self.opts\n+            # The model was auto-created as intermediary for a many-to-many\n+            # relationship; find the target model.\n+            for field in opts.fields:\n+                if field.remote_field and field.remote_field.model != self.parent_model:\n+                    opts = field.remote_field.model._meta\n+                    break\n+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n         return super().has_add_permission(request)\n \n     def has_change_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have the change permission for the related model in order to\n+            # be able to change relationships with the intermediate model.\n+            opts = self.opts\n+            # The model was auto-created as intermediary for a many-to-many\n+            # relationship; find the target model.\n+            for field in opts.fields:\n+                if field.remote_field and field.remote_field.model != self.parent_model:\n+                    opts = field.remote_field.model._meta\n+                    break\n+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n         return super().has_change_permission(request)\n \n     def has_delete_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have the change permission for the related model in order to\n+            # be able to delete relationships with the intermediate model.\n+            opts = self.opts\n+            # The model was auto-created as intermediary for a many-to-many\n+            # relationship; find the target model.\n+            for field in opts.fields:\n+                if field.remote_field and field.remote_field.model != self.parent_model:\n+                    opts = field.remote_field.model._meta\n+                    break\n+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n         return super().has_delete_permission(request, obj)\n \n     def has_view_permission(self, request, obj=None):\n"}, "success": true, "processing_time": 208.7339746952057, "attempts": 1, "error": null}
{"instance_id": "django__django-11163", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex d157c291ef..5edbbd376f 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -83,7 +83,7 @@ def model_to_dict(instance, fields=None, exclude=None):\n     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):\n         if not getattr(f, 'editable', False):\n             continue\n-        if fields and f.name not in fields:\n+        if fields is not None and f.name not in fields:\n             continue\n         if exclude and f.name in exclude:\n             continue\n"}, "success": true, "processing_time": 199.36731505393982, "attempts": 1, "error": null}
{"instance_id": "django__django-11179", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9..86cb5e22d3 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -272,12 +272,15 @@ class Collector:\n         deleted_counter = Counter()\n \n         # Optimize for the case with a single obj and no dependencies\n-        if len(self.data) == 1 and len(instances) == 1:\n-            instance = list(instances)[0]\n-            if self.can_fast_delete(instance):\n-                with transaction.mark_for_rollback_on_error():\n-                    count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n-                return count, {model._meta.label: count}\n+        if len(self.data) == 1:\n+            model, instances = next(iter(self.data.items()))\n+            if len(instances) == 1:\n+                instance = list(instances)[0]\n+                if self.can_fast_delete(instance):\n+                    with transaction.mark_for_rollback_on_error():\n+                        count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                    setattr(instance, model._meta.pk.attname, None)\n+                    return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n"}, "success": true, "processing_time": 143.82948446273804, "attempts": 1, "error": null}
{"instance_id": "django__django-11206", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 88b35fc435..af4a2cdaed 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -31,6 +31,14 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n         # scientific notation to avoid high memory usage in {:f}'.format().\n         _, digits, exponent = number.as_tuple()\n         if abs(exponent) + len(digits) > 200:\n+            # If decimal_pos is specified and the number is effectively zero\n+            # at that precision, return zero with appropriate decimal places\n+            if decimal_pos is not None and abs(number) < Decimal(10) ** (-decimal_pos):\n+                sign = '-' if number < 0 else ''\n+                int_part = '0'\n+                dec_part = '0' * decimal_pos\n+                dec_part = dec_part and decimal_sep + dec_part\n+                return sign + int_part + dec_part\n             number = '{:e}'.format(number)\n             coefficient, exponent = number.split('e')\n             # Format the coefficient.\n"}, "success": true, "processing_time": 256.83492827415466, "attempts": 1, "error": null}
{"instance_id": "django__django-11211", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex ed98ecb48c..0bdd021447 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -202,7 +202,9 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id,\n                                               using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n+                from django.db import connections\n+                connection = connections[obj._state.db]\n+                return (model._meta.pk.get_db_prep_value(getattr(obj, self.fk_field), connection),\n                         model)\n \n         return (\n"}, "success": true, "processing_time": 1163.0211868286133, "attempts": 1, "error": null}
{"instance_id": "django__django-11239", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex cf4df76882..3b89a68f7d 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -30,6 +30,17 @@ class DatabaseClient(BaseDatabaseClient):\n         subprocess_env = os.environ.copy()\n         if passwd:\n             subprocess_env['PGPASSWORD'] = str(passwd)\n+        \n+        # Handle SSL parameters from OPTIONS\n+        options = conn_params.get('options', {})\n+        if 'sslmode' in options:\n+            subprocess_env['PGSSLMODE'] = str(options['sslmode'])\n+        if 'sslrootcert' in options:\n+            subprocess_env['PGSSLROOTCERT'] = str(options['sslrootcert'])\n+        if 'sslcert' in options:\n+            subprocess_env['PGSSLCERT'] = str(options['sslcert'])\n+        if 'sslkey' in options:\n+            subprocess_env['PGSSLKEY'] = str(options['sslkey'])\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n"}, "success": true, "processing_time": 218.74545097351074, "attempts": 1, "error": null}
{"instance_id": "django__django-11265", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex d69c24419b..ba8b8278e0 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1666,6 +1666,7 @@ class Query(BaseExpression):\n             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         # Generate the inner query.\n         query = Query(self.model)\n+        query._filtered_relations = self._filtered_relations.copy()\n         query.add_filter(filter_expr)\n         query.clear_ordering(True)\n         # Try to have as simple as possible subquery -> trim leading joins from\n"}, "success": true, "processing_time": 221.04259824752808, "attempts": 1, "error": null}
{"instance_id": "django__django-11276", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex 9c519978f5..4ee706278e 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -1,5 +1,6 @@\n \"\"\"HTML utilities suitable for global use.\"\"\"\n \n+import html\n import json\n import re\n from html.parser import HTMLParser\n@@ -24,15 +25,6 @@ word_split_re = re.compile(r'''([\\s<>\"']+)''')\n simple_url_re = re.compile(r'^https?://\\[?\\w', re.IGNORECASE)\n simple_url_2_re = re.compile(r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)\n \n-_html_escapes = {\n-    ord('&'): '&amp;',\n-    ord('<'): '&lt;',\n-    ord('>'): '&gt;',\n-    ord('\"'): '&quot;',\n-    ord(\"'\"): '&#39;',\n-}\n-\n-\n @keep_lazy(str, SafeString)\n def escape(text):\n     \"\"\"\n@@ -43,7 +35,7 @@ def escape(text):\n     This may result in double-escaping. If this is a concern, use\n     conditional_escape() instead.\n     \"\"\"\n-    return mark_safe(str(text).translate(_html_escapes))\n+    return mark_safe(html.escape(str(text), quote=True))\n \n \n _js_escapes = {\n"}, "success": true, "processing_time": 178.9907295703888, "attempts": 1, "error": null}
{"instance_id": "django__django-11333", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 247e3680c0..b5ff45de8c 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -64,10 +64,14 @@ class ResolverMatch:\n \n \n @functools.lru_cache(maxsize=None)\n+@lru_cache(maxsize=None)\n+def _get_resolver(urlconf):\n+    return URLResolver(RegexPattern(r'^/'), urlconf)\n+\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n-    return URLResolver(RegexPattern(r'^/'), urlconf)\n+    return _get_resolver(urlconf)\n \n \n @functools.lru_cache(maxsize=None)\n"}, "success": true, "processing_time": 121.89956593513489, "attempts": 1, "error": null}
{"instance_id": "django__django-11400", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..0b9bce1cf3 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -198,6 +198,8 @@ class RelatedFieldListFilter(FieldListFilter):\n         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n+        if not ordering:\n+            ordering = field.remote_field.model._meta.ordering\n         return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n@@ -419,4 +421,10 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n     def field_choices(self, field, request, model_admin):\n         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+        ordering = ()\n+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+        if related_admin is not None:\n+            ordering = related_admin.get_ordering(request)\n+        if not ordering:\n+            ordering = field.remote_field.model._meta.ordering\n+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n"}, "success": true, "processing_time": 168.3055555820465, "attempts": 1, "error": null}
{"instance_id": "django__django-11433", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd376f..ec05906a7f 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -49,7 +49,8 @@ def construct_instance(form, instance, fields=None, exclude=None):\n         # Leave defaults for fields that aren't in POST data, except for\n         # checkbox inputs because they don't appear in POST data if not checked.\n         if (f.has_default() and\n-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n+                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and\n+                cleaned_data[f.name] in form[f.name].field.empty_values):\n             continue\n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\n"}, "success": true, "processing_time": 593.8231692314148, "attempts": 1, "error": null}
{"instance_id": "django__django-11451", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py\nindex f4b1722757..1c1cec8b33 100644\n--- a/django/contrib/auth/backends.py\n+++ b/django/contrib/auth/backends.py\n@@ -39,6 +39,8 @@ class ModelBackend(BaseBackend):\n     def authenticate(self, request, username=None, password=None, **kwargs):\n         if username is None:\n             username = kwargs.get(UserModel.USERNAME_FIELD)\n+        if username is None or password is None:\n+            return None\n         try:\n             user = UserModel._default_manager.get_by_natural_key(username)\n         except UserModel.DoesNotExist:\n"}, "success": true, "processing_time": 129.26644778251648, "attempts": 1, "error": null}
{"instance_id": "django__django-11477", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "Looking at the issue, the problem is in the `_reverse_with_prefix` method where the logic for checking if kwargs match the URL pattern parameters is too restrictive. The current code on line 620:\n\n```python\nif set(kwargs).symmetric_difference(params).difference(defaults):\n    continue\n```\n\nThis check fails when optional parameters with defaults are missing from kwargs. The `symmetric_difference` operation finds parameters that are in one set but not the other, and then `difference(defaults)` removes those that have defaults. However, this logic is flawed because it doesn't properly handle the case where optional parameters are simply omitted from kwargs.\n\nLet me analyze what should happen:\n1. If there are extra kwargs not in params → should fail\n2. If there are required parameters (params without defaults) missing from kwargs → should fail  \n3. If there are optional parameters (params with defaults) missing from kwargs → should succeed\n\nThe current logic incorrectly treats missing optional parameters as a failure case.\n\nHere's the fix:\n\n```\n<file>django/urls/resolvers.py</file>\n<original>\n                else:\n                    if set(kwargs).symmetric_difference(params).difference(defaults):\n                        continue\n                    if any(kwargs.get(k, v) != v for k, v in defaults.items()):\n                        continue\n                    candidate_subs = kwargs</original>\n<patched>\n                else:\n                    # Check for extra kwargs not in params\n                    extra_kwargs = set(kwargs) - set(params)\n                    if extra_kwargs:\n                        continue\n                    # Check for required params (those without defaults) missing from kwargs\n                    required_params = set(params) - set(defaults.keys())\n                    missing_required = required_params - set(kwargs)\n                    if missing_required:\n                        continue\n                    if any(kwargs.get(k, v) != v for k, v in defaults.items()):\n                        continue\n                    candidate_subs = kwargs</patched>\n```\n\nThis change:\n\n1. First checks if there are any extra kwargs that aren't in the URL pattern parameters - if so, skip this pattern\n2. Then identifies required parameters (those that don't have defaults) and checks if any are missing from kwargs - if so, skip this pattern  \n3. Keeps the existing check for default value validation\n4. Uses the same `candidate_subs = kwargs` assignment\n\nThis approach allows URL reversal to succeed when optional parameters with defaults are omitted from kwargs, while still properly validating that all required parameters are provided and no extra parameters are passed."}, "success": true, "processing_time": 579.3419568538666, "attempts": 1, "error": null}
{"instance_id": "django__django-11490", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..9b7d0f8527 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -424,8 +424,8 @@ class SQLCompiler:\n             try:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n-                # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n+                # the query on all combined queries.\n+                if self.query.values_select:\n                     compiler.query.set_values((\n                         *self.query.extra_select,\n                         *self.query.values_select,\n"}, "success": true, "processing_time": 224.74606084823608, "attempts": 1, "error": null}
{"instance_id": "django__django-11532", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py\nindex d18dfe4667..694df8381c 100644\n--- a/django/core/mail/utils.py\n+++ b/django/core/mail/utils.py\n@@ -13,7 +13,13 @@ class CachedDnsName:\n \n     def get_fqdn(self):\n         if not hasattr(self, '_fqdn'):\n-            self._fqdn = socket.getfqdn()\n+            hostname = socket.getfqdn()\n+            try:\n+                # Convert hostname to punycode to ensure ASCII compatibility\n+                self._fqdn = hostname.encode('idna').decode('ascii')\n+            except UnicodeError:\n+                # If hostname is already ASCII or encoding fails, use original\n+                self._fqdn = hostname\n         return self._fqdn\n \n \n"}, "success": true, "processing_time": 200.66507935523987, "attempts": 1, "error": null}
{"instance_id": "django__django-11551", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex f82c20c2f1..9fd77b5d41 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -720,33 +720,33 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             return []\n         elif hasattr(obj, item):\n             return []\n-        elif hasattr(obj.model, item):\n+        else:\n             try:\n                 field = obj.model._meta.get_field(item)\n             except FieldDoesNotExist:\n-                return []\n-            else:\n-                if isinstance(field, models.ManyToManyField):\n+                try:\n+                    field = getattr(obj.model, item)\n+                except AttributeError:\n                     return [\n                         checks.Error(\n-                            \"The value of '%s' must not be a ManyToManyField.\" % label,\n+                            \"The value of '%s' refers to '%s', which is not a callable, \"\n+                            \"an attribute of '%s', or an attribute or method on '%s.%s'.\" % (\n+                                label, item, obj.__class__.__name__,\n+                                obj.model._meta.app_label, obj.model._meta.object_name,\n+                            ),\n                             obj=obj.__class__,\n-                            id='admin.E109',\n+                            id='admin.E108',\n                         )\n                     ]\n-                return []\n-        else:\n-            return [\n-                checks.Error(\n-                    \"The value of '%s' refers to '%s', which is not a callable, \"\n-                    \"an attribute of '%s', or an attribute or method on '%s.%s'.\" % (\n-                        label, item, obj.__class__.__name__,\n-                        obj.model._meta.app_label, obj.model._meta.object_name,\n-                    ),\n-                    obj=obj.__class__,\n-                    id='admin.E108',\n-                )\n-            ]\n+            if isinstance(field, models.ManyToManyField):\n+                return [\n+                    checks.Error(\n+                        \"The value of '%s' must not be a ManyToManyField.\" % label,\n+                        obj=obj.__class__,\n+                        id='admin.E109',\n+                    )\n+                ]\n+            return []\n \n     def _check_list_display_links(self, obj):\n         \"\"\" Check that list_display_links is a unique subset of list_display.\n"}, "success": true, "processing_time": 209.60207772254944, "attempts": 1, "error": null}
{"instance_id": "django__django-11555", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..015d3c43ef 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -704,6 +704,22 @@ class SQLCompiler:\n         not be) and column name for ordering by the given 'name' parameter.\n         The 'name' is of the form 'field1__field2__...__fieldN'.\n         \"\"\"\n+        # Handle OrderBy expression objects from Meta.ordering\n+        if hasattr(name, 'resolve_expression'):\n+            # This is an OrderBy expression object\n+            if hasattr(name, 'descending'):\n+                # Extract descending info and expression from OrderBy object\n+                descending = name.descending\n+                expression = name.expression\n+                # Recursively process the expression\n+                return self.find_ordering_name(expression, opts, alias, \n+                                             'DESC' if descending else 'ASC', already_seen)\n+            else:\n+                # This is some other expression, wrap it in OrderBy\n+                order_dir = 'DESC' if default_order == 'DESC' else 'ASC'\n+                descending = order_dir == 'DESC'\n+                return [(OrderBy(name, descending=descending), False)]\n+        \n         name, order = get_order_dir(name, default_order)\n         descending = order == 'DESC'\n         pieces = name.split(LOOKUP_SEP)\n"}, "success": true, "processing_time": 263.54228138923645, "attempts": 1, "error": null}
{"instance_id": "django__django-11603", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex da4ff928aa..8b10829eb8 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -99,6 +99,7 @@ class Aggregate(Func):\n class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):\n     function = 'AVG'\n     name = 'Avg'\n+    allow_distinct = True\n \n \n class Count(Aggregate):\n@@ -142,6 +143,7 @@ class StdDev(NumericOutputFieldMixin, Aggregate):\n class Sum(FixDurationInputMixin, Aggregate):\n     function = 'SUM'\n     name = 'Sum'\n+    allow_distinct = True\n \n \n class Variance(NumericOutputFieldMixin, Aggregate):\n"}, "success": true, "processing_time": 94.32833909988403, "attempts": 1, "error": null}
{"instance_id": "django__django-11728", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..66f10a5b9d 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -180,6 +180,11 @@ def replace_named_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        else:\n+            # If we reach the end of the pattern without balanced brackets,\n+            # the named group extends to the end of the pattern.\n+            if unmatched_open_brackets > 0:\n+                group_pattern_and_name.append((pattern[start:], group_name))\n \n     # Replace the string for named capture groups with their group names.\n     for group_pattern, group_name in group_pattern_and_name:\n@@ -212,6 +217,11 @@ def replace_unnamed_groups(pattern):\n             elif val == ')' and prev_char != '\\\\':\n                 unmatched_open_brackets -= 1\n             prev_char = val\n+        else:\n+            # If we reach the end of the pattern without balanced brackets,\n+            # the unnamed group extends to the end of the pattern.\n+            if unmatched_open_brackets > 0:\n+                group_indices.append((start, len(pattern)))\n \n     # Remove unnamed group matches inside other unnamed capture groups.\n     group_start_end_indices = []\n"}, "success": true, "processing_time": 252.41053915023804, "attempts": 1, "error": null}
{"instance_id": "django__django-11734", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 35f3c5e1ea..becd0bcaef 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1046,7 +1046,12 @@ class Query(BaseExpression):\n         return sql, params\n \n     def resolve_lookup_value(self, value, can_reuse, allow_joins, simple_col):\n+        from django.db.models.expressions import OuterRef\n         if hasattr(value, 'resolve_expression'):\n+            # Don't resolve OuterRef expressions in subqueries - they should be\n+            # resolved in the outer query context\n+            if isinstance(value, OuterRef) and self.subquery:\n+                return value\n             kwargs = {'reuse': can_reuse, 'allow_joins': allow_joins}\n             if isinstance(value, F):\n                 kwargs['simple_col'] = simple_col\n@@ -1057,7 +1062,10 @@ class Query(BaseExpression):\n             resolved_values = []\n             for sub_value in value:\n                 if hasattr(sub_value, 'resolve_expression'):\n-                    if isinstance(sub_value, F):\n+                    # Don't resolve OuterRef expressions in subqueries\n+                    if isinstance(sub_value, OuterRef) and self.subquery:\n+                        resolved_values.append(sub_value)\n+                    elif isinstance(sub_value, F):\n                         resolved_values.append(sub_value.resolve_expression(\n                             self, reuse=can_reuse, allow_joins=allow_joins,\n                             simple_col=simple_col,\n"}, "success": true, "processing_time": 247.89285898208618, "attempts": 1, "error": null}
{"instance_id": "django__django-11740", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 0dc1c77c53..f06e868e11 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -963,6 +963,15 @@ class MigrationAutodetector:\n                             preserve_default = False\n                     else:\n                         field = new_field\n+                    # Check if the field is becoming a relation field and add dependencies\n+                    dependencies = []\n+                    old_is_relation = hasattr(old_field, \"remote_field\") and old_field.remote_field\n+                    new_is_relation = hasattr(new_field, \"remote_field\") and new_field.remote_field and new_field.remote_field.model\n+                    \n+                    if not old_is_relation and new_is_relation:\n+                        # Field is becoming a relation field, add dependencies\n+                        dependencies.extend(self._get_dependencies_for_foreign_key(new_field))\n+                    \n                     self.add_operation(\n                         app_label,\n                         operations.AlterField(\n@@ -970,7 +979,8 @@ class MigrationAutodetector:\n                             name=field_name,\n                             field=field,\n                             preserve_default=preserve_default,\n-                        )\n+                        ),\n+                        dependencies=dependencies,\n                     )\n                 else:\n                     # We cannot alter between m2m and concrete fields\n"}, "success": true, "processing_time": 151.26339840888977, "attempts": 1, "error": null}
{"instance_id": "django__django-11749", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 5f2e64761e..34ddfeed26 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -136,6 +136,13 @@ def call_command(command_name, *args, **options):\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n         for opt in parser_actions if opt.required and opt.dest in options\n     ]\n+    \n+    # Also include arguments from required mutually exclusive groups\n+    for group in parser._mutually_exclusive_groups:\n+        if group.required:\n+            for action in group._group_actions:\n+                if action.dest in options and action.option_strings:\n+                    parse_args.append('{}={}'.format(min(action.option_strings), arg_options[action.dest]))\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     # Raise an error if any unknown options were passed.\n"}, "success": true, "processing_time": 501.8788104057312, "attempts": 1, "error": null}
{"instance_id": "django__django-11790", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..192b9a6387 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -192,6 +192,7 @@ class AuthenticationForm(forms.Form):\n         # Set the max length and label for the \"username\" field.\n         self.username_field = UserModel._meta.get_field(UserModel.USERNAME_FIELD)\n         self.fields['username'].max_length = self.username_field.max_length or 254\n+        self.fields['username'].widget.attrs['maxlength'] = str(self.username_field.max_length or 254)\n         if self.fields['username'].label is None:\n             self.fields['username'].label = capfirst(self.username_field.verbose_name)\n \n"}, "success": true, "processing_time": 394.61290526390076, "attempts": 1, "error": null}
{"instance_id": "django__django-11815", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd379..2884b61896 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,9 +120,9 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n-        imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        name_string, name_imports = serializer_factory(self.value.name).serialize()\n+        imports = {'import %s' % module, *name_imports}\n+        return \"%s.%s[%s]\" % (module, enum_class.__name__, name_string), imports\n \n \n class FloatSerializer(BaseSimpleSerializer):\n"}, "success": true, "processing_time": 235.45042443275452, "attempts": 1, "error": null}
{"instance_id": "django__django-11848", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..741c4a1e98 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,17 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n+            # RFC 7231 compliant two-digit year handling\n+            current_year = datetime.datetime.now().year\n+            current_century = (current_year // 100) * 100\n+            candidate_year = current_century + year\n+            \n+            # If the candidate year is more than 50 years in the future,\n+            # interpret it as being in the previous century\n+            if candidate_year - current_year > 50:\n+                year = candidate_year - 100\n             else:\n-                year += 1900\n+                year = candidate_year\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n"}, "success": true, "processing_time": 97.40686964988708, "attempts": 1, "error": null}
{"instance_id": "django__django-11885", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex ae82d26340..b9e00ce6b0 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -262,6 +262,41 @@ class Collector:\n             for obj in instances:\n                 yield model, obj\n \n+    def _combine_fast_deletes(self):\n+        \"\"\"\n+        Combine fast delete querysets by model to reduce database roundtrips.\n+        Returns a list of combined querysets, one per model.\n+        \"\"\"\n+        if not self.fast_deletes:\n+            return []\n+        \n+        # Group querysets by model\n+        grouped_querysets = {}\n+        for qs in self.fast_deletes:\n+            model = qs.model\n+            if model not in grouped_querysets:\n+                grouped_querysets[model] = []\n+            grouped_querysets[model].append(qs)\n+        \n+        # Combine querysets for each model\n+        combined_querysets = []\n+        for model, querysets in grouped_querysets.items():\n+            if len(querysets) == 1:\n+                # No need to combine if there's only one queryset\n+                combined_querysets.append(querysets[0])\n+            else:\n+                # Combine multiple querysets using OR\n+                combined_q = Q()\n+                for qs in querysets:\n+                    # Extract the WHERE condition from each queryset\n+                    combined_q |= Q(pk__in=qs.values_list('pk', flat=True))\n+                \n+                # Create a new queryset with the combined condition\n+                combined_qs = model._base_manager.using(self.using).filter(combined_q)\n+                combined_querysets.append(combined_qs)\n+        \n+        return combined_querysets\n+\n     def sort(self):\n         sorted_models = []\n         concrete_models = set()\n@@ -310,7 +345,8 @@ class Collector:\n                     )\n \n             # fast deletes\n-            for qs in self.fast_deletes:\n+            combined_fast_deletes = self._combine_fast_deletes()\n+            for qs in combined_fast_deletes:\n                 count = qs._raw_delete(using=self.using)\n                 deleted_counter[qs.model._meta.label] += count\n \n"}, "success": true, "processing_time": 234.10348463058472, "attempts": 1, "error": null}
{"instance_id": "django__django-11964", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex bbe362a6ab..1e94ce79b4 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -65,7 +65,9 @@ class Choices(enum.Enum, metaclass=ChoicesMeta):\n \n class IntegerChoices(int, Choices):\n     \"\"\"Class for creating enumerated integer choices.\"\"\"\n-    pass\n+    \n+    def __str__(self):\n+        return str(self.value)\n \n \n class TextChoices(str, Choices):\n@@ -73,3 +75,6 @@ class TextChoices(str, Choices):\n \n     def _generate_next_value_(name, start, count, last_values):\n         return name\n+    \n+    def __str__(self):\n+        return self.value\n"}, "success": true, "processing_time": 198.65550446510315, "attempts": 1, "error": null}
{"instance_id": "django__django-11999", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex ee45bb941e..8d5e4c5788 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -763,8 +763,10 @@ class Field(RegisterLookupMixin):\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n         if self.choices is not None:\n-            setattr(cls, 'get_%s_display' % self.name,\n-                    partialmethod(cls._get_FIELD_display, field=self))\n+            # Don't override user-defined get_*_display methods\n+            if not getattr(cls, 'get_%s_display' % self.name, None):\n+                setattr(cls, 'get_%s_display' % self.name,\n+                        partialmethod(cls._get_FIELD_display, field=self))\n \n     def get_filter_kwargs_for_object(self, obj):\n         \"\"\"\n"}, "success": true, "processing_time": 290.6533851623535, "attempts": 1, "error": null}
{"instance_id": "django__django-12125", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..b1ebba2277 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -267,9 +267,9 @@ class TypeSerializer(BaseSerializer):\n         if hasattr(self.value, \"__module__\"):\n             module = self.value.__module__\n             if module == builtins.__name__:\n-                return self.value.__name__, set()\n+                return getattr(self.value, '__qualname__', self.value.__name__), set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                return \"%s.%s\" % (module, getattr(self.value, '__qualname__', self.value.__name__)), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n"}, "success": true, "processing_time": 282.95009326934814, "attempts": 1, "error": null}
{"instance_id": "django__django-12143", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "Looking at the issue, the problem is in the `_get_edited_object_pks` method where a regex pattern is constructed using string formatting without escaping the `prefix` parameter. If the prefix contains regex special characters, they will be interpreted as regex metacharacters instead of literal characters, which can cause data loss or incorrect matching.\n\nThe issue is on line 1634 where:\n```python\npk_pattern = re.compile(r'{}-\\d+-{}$'.format(prefix, self.model._meta.pk.name))\n```\n\nThe `prefix` parameter should be escaped using `re.escape()` to ensure any regex special characters are treated as literal characters.\n\nLet me examine the code and create the fix:\n\n```\n<file>django/contrib/admin/options.py</file>\n<original>    def _get_edited_object_pks(self, request, prefix):\n        \"\"\"Return POST data values of list_editable primary keys.\"\"\"\n        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(prefix, self.model._meta.pk.name))\n        return [value for key, value in request.POST.items() if pk_pattern.match(key)]</original>\n<patched>    def _get_edited_object_pks(self, request, prefix):\n        \"\"\"Return POST data values of list_editable primary keys.\"\"\"\n        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(re.escape(prefix), self.model._meta.pk.name))\n        return [value for key, value in request.POST.items() if pk_pattern.match(key)]</patched>\n```\n\nThe fix is straightforward - I'm wrapping the `prefix` parameter with `re.escape()` to ensure that any regex special characters in the prefix are properly escaped and treated as literal characters rather than regex metacharacters. This prevents potential data loss when formset prefixes contain regex special characters like `.`, `*`, `+`, `?`, `^`, `$`, `[`, `]`, `{`, `}`, `(`, `)`, `|`, `\\`, etc.\n\nThe `self.model._meta.pk.name` doesn't need escaping as it follows Python identifier naming rules and shouldn't contain regex special characters."}, "success": true, "processing_time": 534.6456677913666, "attempts": 1, "error": null}
{"instance_id": "django__django-12155", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 4c0e7e2a56..aeec9fae5c 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -34,7 +34,7 @@ def trim_docstring(docstring):\n         return ''\n     # Convert tabs to spaces and split into lines\n     lines = docstring.expandtabs().splitlines()\n-    indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())\n+    indent = min(len(line) - len(line.lstrip()) for line in lines[1:] if line.lstrip())\n     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]\n     return \"\\n\".join(trimmed).strip()\n \n"}, "success": true, "processing_time": 235.15815663337708, "attempts": 1, "error": null}
{"instance_id": "django__django-12193", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 6fe220bea7..ddd052be8d 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -524,6 +524,8 @@ class CheckboxInput(Input):\n         if self.check_test(value):\n             if attrs is None:\n                 attrs = {}\n+            else:\n+                attrs = attrs.copy()\n             attrs['checked'] = True\n         return super().get_context(name, value, attrs)\n \n"}, "success": true, "processing_time": 116.76570463180542, "attempts": 1, "error": null}
{"instance_id": "django__django-12209", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e3b14a41a0..5e2fe2b268 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -840,6 +840,7 @@ class Model(metaclass=ModelBase):\n                        if f.name in update_fields or f.attname in update_fields]\n \n         pk_val = self._get_pk_val(meta)\n+        pk_explicitly_set = pk_val is not None\n         if pk_val is None:\n             pk_val = meta.pk.get_pk_value_on_save(self)\n             setattr(self, meta.pk.attname, pk_val)\n@@ -847,10 +848,12 @@ class Model(metaclass=ModelBase):\n         if not pk_set and (force_update or update_fields):\n             raise ValueError(\"Cannot force an update in save() with no primary key.\")\n         updated = False\n-        # Skip an UPDATE when adding an instance and primary key has a default.\n+        # Skip an UPDATE when adding an instance and primary key has a default\n+        # but no explicit pk value was provided.\n         if (\n             not force_insert and\n             self._state.adding and\n+            not pk_explicitly_set and\n             self._meta.pk.default and\n             self._meta.pk.default is not NOT_PROVIDED\n         ):\n"}, "success": true, "processing_time": 190.62831568717957, "attempts": 1, "error": null}
{"instance_id": "django__django-12262", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/template/library.py b/django/template/library.py\nindex 20bc86dac8..2f74556268 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -261,7 +261,7 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n         if kwarg:\n             # The kwarg was successfully extracted\n             param, value = kwarg.popitem()\n-            if param not in params and param not in unhandled_kwargs and varkw is None:\n+            if param not in params and param not in kwonly and varkw is None:\n                 # An unexpected keyword argument was supplied\n                 raise TemplateSyntaxError(\n                     \"'%s' received unexpected keyword argument '%s'\" %\n"}, "success": true, "processing_time": 194.00695824623108, "attempts": 1, "error": null}
{"instance_id": "django__django-12273", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 844c01e95e..8af9711210 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -807,6 +807,11 @@ class Model(metaclass=ModelBase):\n             if (field and getattr(self, parent._meta.pk.attname) is None and\n                     getattr(self, field.attname) is not None):\n                 setattr(self, parent._meta.pk.attname, getattr(self, field.attname))\n+            # If the child's PK is None, ensure the parent link field is also None\n+            # so that a new parent record gets created\n+            if field and self._get_pk_val() is None:\n+                setattr(self, field.attname, None)\n+                setattr(self, parent._meta.pk.attname, None)\n             parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)\n             updated = self._save_table(\n                 cls=parent, using=using, update_fields=update_fields,\n"}, "success": true, "processing_time": 250.07282996177673, "attempts": 1, "error": null}
{"instance_id": "django__django-12276", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 338d54d72f..c54199f9f0 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -388,6 +388,8 @@ class FileInput(Input):\n         return name not in files\n \n \n+\n+\n FILE_INPUT_CONTRADICTION = object()\n \n \n"}, "success": true, "processing_time": 118.13286280632019, "attempts": 1, "error": null}
{"instance_id": "django__django-12304", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..ac818cdf28 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -61,6 +61,8 @@ class ChoicesMeta(enum.EnumMeta):\n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     \"\"\"Class for creating enumerated choices.\"\"\"\n \n+    do_not_call_in_templates = True\n+\n     def __str__(self):\n         \"\"\"\n         Use value when cast to str, so that Choices set as model instance\n"}, "success": true, "processing_time": 220.50463795661926, "attempts": 1, "error": null}
{"instance_id": "django__django-12308", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..8f9bcb3e8a 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -379,6 +379,7 @@ def help_text_for_field(name, model):\n \n def display_for_field(value, field, empty_value_display):\n     from django.contrib.admin.templatetags.admin_list import _boolean_icon\n+    from django.db.models.fields.json import JSONField\n \n     if getattr(field, 'flatchoices', None):\n         return dict(field.flatchoices).get(value, empty_value_display)\n@@ -386,6 +387,8 @@ def display_for_field(value, field, empty_value_display):\n     # general null test.\n     elif isinstance(field, models.BooleanField):\n         return _boolean_icon(value)\n+    elif isinstance(field, JSONField):\n+        return field.prepare_value(value)\n     elif value is None:\n         return empty_value_display\n     elif isinstance(field, models.DateTimeField):\n"}, "success": true, "processing_time": 235.64374947547913, "attempts": 1, "error": null}
{"instance_id": "django__django-12325", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 8ea6c05ef9..a8a7a6376b 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -200,9 +200,9 @@ class ModelBase(type):\n             # Skip concrete parent classes.\n             if base != new_class and not base._meta.abstract:\n                 continue\n-            # Locate OneToOneField instances.\n+            # Locate OneToOneField instances with parent_link=True.\n             for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n+                if isinstance(field, OneToOneField) and field.remote_field.parent_link:\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n \ndiff --git a/django/db/models/options.py b/django/db/models/options.py\nindex a375f6ba1d..e90edb2a23 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -251,10 +251,6 @@ class Options:\n                     field = already_created[0]\n                 field.primary_key = True\n                 self.setup_pk(field)\n-                if not field.remote_field.parent_link:\n-                    raise ImproperlyConfigured(\n-                        'Add parent_link=True to %s.' % field,\n-                    )\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n                 model.add_to_class('id', auto)\n"}, "success": true, "processing_time": 260.3341257572174, "attempts": 1, "error": null}
{"instance_id": "django__django-12406", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex f269d9e17f..b7169244b5 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -979,6 +979,7 @@ class ForeignKey(ForeignObject):\n             'form_class': forms.ModelChoiceField,\n             'queryset': self.remote_field.model._default_manager.using(using),\n             'to_field_name': self.remote_field.field_name,\n+            'blank': self.blank,\n             **kwargs,\n         })\n \ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex dafc11f995..ded74905f2 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1184,7 +1184,7 @@ class ModelChoiceField(ChoiceField):\n     def __init__(self, queryset, *, empty_label=\"---------\",\n                  required=True, widget=None, label=None, initial=None,\n                  help_text='', to_field_name=None, limit_choices_to=None,\n-                 **kwargs):\n+                 blank=True, **kwargs):\n         if required and (initial is not None):\n             self.empty_label = None\n         else:\n@@ -1196,6 +1196,11 @@ class ModelChoiceField(ChoiceField):\n             self, required=required, widget=widget, label=label,\n             initial=initial, help_text=help_text, **kwargs\n         )\n+        \n+        # If blank=False and widget is RadioSelect, don't show empty label\n+        if not blank and isinstance(self.widget, RadioSelect):\n+            self.empty_label = None\n+            \n         self.queryset = queryset\n         self.limit_choices_to = limit_choices_to   # limit the queryset later.\n         self.to_field_name = to_field_name\n"}, "success": true, "processing_time": 201.56581091880798, "attempts": 1, "error": null}
{"instance_id": "django__django-12663", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex d32c891284..fc75c412d7 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -71,7 +71,12 @@ class Lookup:\n         if hasattr(self.rhs, 'resolve_expression'):\n             return self.rhs\n         if self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):\n-            return self.lhs.output_field.get_prep_value(self.rhs)\n+            from django.utils.functional import SimpleLazyObject\n+            rhs = self.rhs\n+            if isinstance(rhs, SimpleLazyObject):\n+                # Force evaluation of the lazy object by accessing it\n+                rhs = rhs._wrapped if hasattr(rhs, '_wrapped') and rhs._wrapped is not SimpleLazyObject.empty else rhs.__class__.__wrapped__(rhs)\n+            return self.lhs.output_field.get_prep_value(rhs)\n         return self.rhs\n \n     def get_db_prep_lookup(self, value, connection):\n"}, "success": true, "processing_time": 292.03279542922974, "attempts": 1, "error": null}
{"instance_id": "django__django-12713", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 69a5fbf389..db7df891e3 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -249,16 +249,17 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             return None\n         db = kwargs.get('using')\n \n-        autocomplete_fields = self.get_autocomplete_fields(request)\n-        if db_field.name in autocomplete_fields:\n-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in self.raw_id_fields:\n-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n-            kwargs['widget'] = widgets.FilteredSelectMultiple(\n-                db_field.verbose_name,\n-                db_field.name in self.filter_vertical\n-            )\n+        if 'widget' not in kwargs:\n+            autocomplete_fields = self.get_autocomplete_fields(request)\n+            if db_field.name in autocomplete_fields:\n+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n+            elif db_field.name in self.raw_id_fields:\n+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n+                kwargs['widget'] = widgets.FilteredSelectMultiple(\n+                    db_field.verbose_name,\n+                    db_field.name in self.filter_vertical\n+                )\n \n         if 'queryset' not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n"}, "success": true, "processing_time": 324.09688425064087, "attempts": 1, "error": null}
{"instance_id": "django__django-12741", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 70ac07ae09..f07580c18b 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -400,9 +400,9 @@ class BaseDatabaseOperations:\n         \"\"\"\n         raise NotImplementedError('subclasses of BaseDatabaseOperations must provide a sql_flush() method')\n \n-    def execute_sql_flush(self, using, sql_list):\n+    def execute_sql_flush(self, sql_list):\n         \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n-        with transaction.atomic(using=using, savepoint=self.connection.features.can_rollback_ddl):\n+        with transaction.atomic(using=self.connection.alias, savepoint=self.connection.features.can_rollback_ddl):\n             with self.connection.cursor() as cursor:\n                 for sql in sql_list:\n                     cursor.execute(sql)\n"}, "success": true, "processing_time": 162.27198481559753, "attempts": 1, "error": null}
{"instance_id": "django__django-12754", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 30616c0172..c75d65354b 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -571,6 +571,22 @@ class MigrationAutodetector:\n                     None,\n                     True\n                 ))\n+            \n+            # Check for field name conflicts with base classes\n+            # If a field is being removed from a base class and the new model\n+            # has a field with the same name, we need to ensure the RemoveField\n+            # operation happens before the CreateModel operation\n+            removed_field_keys = self.old_field_keys - self.new_field_keys\n+            for base in model_state.bases:\n+                if isinstance(base, str) and \".\" in base:\n+                    base_app_label, base_name = base.split(\".\", 1)\n+                    # Check if any field in the new model conflicts with fields\n+                    # being removed from this base class\n+                    for field_name in model_state.fields:\n+                        if (base_app_label, base_name, field_name) in removed_field_keys:\n+                            # Add dependency to ensure RemoveField happens first\n+                            dependencies.append((base_app_label, base_name, field_name, False))\n+            \n             # Generate creation operation\n             self.add_operation(\n                 app_label,\n"}, "success": true, "processing_time": 295.24561381340027, "attempts": 1, "error": null}
{"instance_id": "django__django-12774", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0db04..9e0528f477 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -690,7 +690,16 @@ class QuerySet:\n         assert not self.query.is_sliced, \\\n             \"Cannot use 'limit' or 'offset' with in_bulk\"\n         if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:\n-            raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n+            # Check if field is unique through a UniqueConstraint\n+            is_unique_constraint = False\n+            for constraint in self.model._meta.constraints:\n+                if (hasattr(constraint, 'fields') and \n+                    len(constraint.fields) == 1 and \n+                    constraint.fields[0] == field_name):\n+                    is_unique_constraint = True\n+                    break\n+            if not is_unique_constraint:\n+                raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n         if id_list is not None:\n             if not id_list:\n                 return {}\n"}, "success": true, "processing_time": 250.90721726417542, "attempts": 1, "error": null}
{"instance_id": "django__django-12858", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 6c9e9d3707..124db6eed0 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1747,7 +1747,7 @@ class Model(metaclass=ModelBase):\n                     else:\n                         _cls = None\n                 except (FieldDoesNotExist, AttributeError):\n-                    if fld is None or fld.get_transform(part) is None:\n+                    if fld is None or (fld.get_transform(part) is None and fld.get_lookup(part) is None):\n                         errors.append(\n                             checks.Error(\n                                 \"'ordering' refers to the nonexistent field, \"\n"}, "success": true, "processing_time": 247.8290078639984, "attempts": 1, "error": null}
{"instance_id": "django__django-12965", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 29e33c075f..48a5346881 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1407,7 +1407,21 @@ class SQLInsertCompiler(SQLCompiler):\n class SQLDeleteCompiler(SQLCompiler):\n     @cached_property\n     def single_alias(self):\n-        return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1\n+        # Check if this is a simple delete operation on a single table without joins\n+        # If there are no joins and only the base table is involved, use simple DELETE syntax\n+        if not self.query.alias_map:\n+            return True\n+        \n+        # Count tables that are actually used (have positive refcount)\n+        used_aliases = sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map)\n+        \n+        # For a single table delete, we should have exactly one used alias\n+        # and it should be the base table with no joins\n+        if used_aliases == 1:\n+            # Additional check: ensure there are no joins\n+            return len(self.query.alias_map) == 1\n+        \n+        return False\n \n     def _as_sql(self, query):\n         result = [\n"}, "success": true, "processing_time": 910.0472984313965, "attempts": 1, "error": null}
{"instance_id": "django__django-13012", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex c1a76584f0..aface75cff 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -863,6 +863,9 @@ class ExpressionWrapper(Expression):\n     def get_source_expressions(self):\n         return [self.expression]\n \n+    def get_group_by_cols(self, alias=None):\n+        return self.expression.get_group_by_cols(alias)\n+\n     def as_sql(self, compiler, connection):\n         return self.expression.as_sql(compiler, connection)\n \n"}, "success": true, "processing_time": 533.4928753376007, "attempts": 1, "error": null}
{"instance_id": "django__django-13023", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0fd69059ee..693eee36a7 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1501,7 +1501,7 @@ class DecimalField(Field):\n             return self.context.create_decimal_from_float(value)\n         try:\n             return decimal.Decimal(value)\n-        except decimal.InvalidOperation:\n+        except (decimal.InvalidOperation, TypeError):\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n                 code='invalid',\n"}, "success": true, "processing_time": 95.64488124847412, "attempts": 1, "error": null}
{"instance_id": "django__django-13028", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..a924d41aee 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,7 +1124,8 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+        # Skip filterable check for Django model instances (they have _meta attribute)\n+        if not hasattr(expression, '_meta') and not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n"}, "success": true, "processing_time": 214.14238786697388, "attempts": 1, "error": null}
{"instance_id": "django__django-13033", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..6ddb3b72ce 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -727,7 +727,10 @@ class SQLCompiler:\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n+        # Also skip if we're ordering by the foreign key's _id attribute directly.\n+        field_attname = getattr(field, 'attname', None)\n+        is_ordering_by_fk_id = field_attname and name.endswith('__' + field_attname)\n+        if field.is_relation and opts.ordering and field_attname != name and name != 'pk' and not is_ordering_by_fk_id:\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n"}, "success": true, "processing_time": 236.52481031417847, "attempts": 1, "error": null}
{"instance_id": "django__django-13089", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\nindex 33c79c5a14..4e0db824f7 100644\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -267,9 +267,11 @@ class DatabaseCache(BaseDatabaseCache):\n                 cursor.execute(\n                     connection.ops.cache_key_culling_sql() % table,\n                     [cull_num])\n-                cursor.execute(\"DELETE FROM %s \"\n-                               \"WHERE cache_key < %%s\" % table,\n-                               [cursor.fetchone()[0]])\n+                cutoff_key = cursor.fetchone()\n+                if cutoff_key is not None:\n+                    cursor.execute(\"DELETE FROM %s \"\n+                                   \"WHERE cache_key < %%s\" % table,\n+                                   [cutoff_key[0]])\n \n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\n"}, "success": true, "processing_time": 105.26630735397339, "attempts": 1, "error": null}
{"instance_id": "django__django-13109", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex d517d7269b..c2aea9c730 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -914,7 +914,7 @@ class ForeignKey(ForeignObject):\n             return\n \n         using = router.db_for_read(self.remote_field.model, instance=model_instance)\n-        qs = self.remote_field.model._default_manager.using(using).filter(\n+        qs = self.remote_field.model._base_manager.using(using).filter(\n             **{self.remote_field.field_name: value}\n         )\n         qs = qs.complex_filter(self.get_limit_choices_to())\n"}, "success": true, "processing_time": 330.70163202285767, "attempts": 1, "error": null}
{"instance_id": "django__django-13112", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/operations/utils.py b/django/db/migrations/operations/utils.py\nindex 6e2bacd549..facfd9fc60 100644\n--- a/django/db/migrations/operations/utils.py\n+++ b/django/db/migrations/operations/utils.py\n@@ -19,7 +19,8 @@ def resolve_relation(model, app_label=None, model_name=None):\n                 )\n             return app_label, model_name\n         if '.' in model:\n-            return tuple(model.lower().split('.', 1))\n+            app_label, model_name = model.split('.', 1)\n+            return app_label, model_name.lower()\n         if app_label is None:\n             raise TypeError(\n                 'app_label must be provided to resolve unscoped model '\n"}, "success": true, "processing_time": 247.06987261772156, "attempts": 1, "error": null}
{"instance_id": "django__django-13121", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex af8cfd86b5..1c50959009 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -1,3 +1,4 @@\n+import datetime\n import uuid\n \n from django.conf import settings\n@@ -298,6 +299,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n                 converters.append(self.convert_datetimefield_value)\n         elif internal_type == 'UUIDField':\n             converters.append(self.convert_uuidfield_value)\n+        elif internal_type == 'DurationField':\n+            converters.append(self.convert_durationfield_value)\n         return converters\n \n     def convert_booleanfield_value(self, value, expression, connection):\n@@ -315,6 +318,12 @@ class DatabaseOperations(BaseDatabaseOperations):\n             value = uuid.UUID(value)\n         return value\n \n+    def convert_durationfield_value(self, value, expression, connection):\n+        if value is not None:\n+            # MySQL stores duration as microseconds\n+            return datetime.timedelta(microseconds=int(value))\n+        return value\n+\n     def binary_placeholder_sql(self, value):\n         return '_binary %s' if value is not None and not hasattr(value, 'as_sql') else '%s'\n \ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex 9510b5edd9..a7a3e3b994 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -273,6 +273,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n             converters.append(self.get_decimalfield_converter(expression))\n         elif internal_type == 'UUIDField':\n             converters.append(self.convert_uuidfield_value)\n+        elif internal_type == 'DurationField':\n+            converters.append(self.convert_durationfield_value)\n         elif internal_type in ('NullBooleanField', 'BooleanField'):\n             converters.append(self.convert_booleanfield_value)\n         return converters\n@@ -321,6 +323,12 @@ class DatabaseOperations(BaseDatabaseOperations):\n     def convert_booleanfield_value(self, value, expression, connection):\n         return bool(value) if value in (1, 0) else value\n \n+    def convert_durationfield_value(self, value, expression, connection):\n+        if value is not None:\n+            # SQLite stores duration as microseconds\n+            return datetime.timedelta(microseconds=int(value))\n+        return value\n+\n     def bulk_insert_sql(self, fields, placeholder_rows):\n         return \" UNION ALL \".join(\n             \"SELECT %s\" % \", \".join(row)\n"}, "success": true, "processing_time": 306.7528591156006, "attempts": 1, "error": null}
{"instance_id": "django__django-13128", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d913658291..69af66c972 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -151,6 +151,144 @@ class Combinable:\n \n \n @deconstructible\n+class CombinedExpression(BaseExpression):\n+    \"\"\"\n+    Expression that combines two expressions with a connector (e.g., +, -, *, /).\n+    \"\"\"\n+    \n+    def __init__(self, lhs, connector, rhs, output_field=None):\n+        super().__init__(output_field)\n+        self.connector = connector\n+        self.lhs = lhs\n+        self.rhs = rhs\n+\n+    def __repr__(self):\n+        return \"<%s: %s>\" % (self.__class__.__name__, self)\n+\n+    def __str__(self):\n+        return \"%s %s %s\" % (self.lhs, self.connector, self.rhs)\n+\n+    def get_source_expressions(self):\n+        return [self.lhs, self.rhs]\n+\n+    def set_source_expressions(self, exprs):\n+        self.lhs, self.rhs = exprs\n+\n+    def as_sql(self, compiler, connection):\n+        try:\n+            lhs_output = self.lhs.output_field\n+        except FieldError:\n+            lhs_output = None\n+        try:\n+            rhs_output = self.rhs.output_field\n+        except FieldError:\n+            rhs_output = None\n+        if (not connection.features.has_native_duration_field and\n+                ((lhs_output and lhs_output.get_internal_type() == 'DurationField') or\n+                 (rhs_output and rhs_output.get_internal_type() == 'DurationField'))):\n+            return connection.ops.combine_duration_expression(self.connector, self.as_sql(compiler, connection))\n+        return connection.ops.combine_expression(self.connector, self.as_sql(compiler, connection))\n+\n+    def _resolve_output_field(self):\n+        from django.db import models\n+        \n+        # Get the output fields of the operands\n+        try:\n+            lhs_field = self.lhs.output_field\n+        except FieldError:\n+            lhs_field = None\n+        try:\n+            rhs_field = self.rhs.output_field\n+        except FieldError:\n+            rhs_field = None\n+            \n+        if lhs_field is None or rhs_field is None:\n+            return super()._resolve_output_field()\n+            \n+        # Handle temporal arithmetic\n+        if self.connector == '-':\n+            # DateTimeField - DateTimeField = DurationField\n+            if isinstance(lhs_field, models.DateTimeField) and isinstance(rhs_field, models.DateTimeField):\n+                return models.DurationField()\n+            # DateTimeField - DurationField = DateTimeField\n+            elif isinstance(lhs_field, models.DateTimeField) and isinstance(rhs_field, models.DurationField):\n+                return models.DateTimeField()\n+        elif self.connector == '+':\n+            # DateTimeField + DurationField = DateTimeField\n+            if isinstance(lhs_field, models.DateTimeField) and isinstance(rhs_field, models.DurationField):\n+                return models.DateTimeField()\n+            # DurationField + DateTimeField = DateTimeField\n+            elif isinstance(lhs_field, models.DurationField) and isinstance(rhs_field, models.DateTimeField):\n+                return models.DateTimeField()\n+                \n+        # Fall back to parent behavior for non-temporal operations\n+        return super()._resolve_output_field()\n+\n+\n+class CombinedExpression(BaseExpression):\n+    \"\"\"\n+    Expression that combines two expressions with a connector (e.g., +, -, *, /).\n+    \"\"\"\n+    \n+    def __init__(self, lhs, connector, rhs, output_field=None):\n+        super().__init__(output_field)\n+        self.connector = connector\n+        self.lhs = lhs\n+        self.rhs = rhs\n+\n+    def __repr__(self):\n+        return \"<%s: %s>\" % (self.__class__.__name__, self)\n+\n+    def __str__(self):\n+        return \"%s %s %s\" % (self.lhs, self.connector, self.rhs)\n+\n+    def get_source_expressions(self):\n+        return [self.lhs, self.rhs]\n+\n+    def set_source_expressions(self, exprs):\n+        self.lhs, self.rhs = exprs\n+\n+    def as_sql(self, compiler, connection):\n+        lhs_sql, lhs_params = compiler.compile(self.lhs)\n+        rhs_sql, rhs_params = compiler.compile(self.rhs)\n+        return '(%s %s %s)' % (lhs_sql, self.connector, rhs_sql), lhs_params + rhs_params\n+\n+    def _resolve_output_field(self):\n+        from django.db import models\n+        \n+        # Get the output fields of the operands\n+        try:\n+            lhs_field = self.lhs.output_field\n+        except FieldError:\n+            lhs_field = None\n+        try:\n+            rhs_field = self.rhs.output_field\n+        except FieldError:\n+            rhs_field = None\n+            \n+        if lhs_field is None or rhs_field is None:\n+            return super()._resolve_output_field()\n+            \n+        # Handle temporal arithmetic\n+        if self.connector == '-':\n+            # DateTimeField - DateTimeField = DurationField\n+            if isinstance(lhs_field, models.DateTimeField) and isinstance(rhs_field, models.DateTimeField):\n+                return models.DurationField()\n+            # DateTimeField - DurationField = DateTimeField\n+            elif isinstance(lhs_field, models.DateTimeField) and isinstance(rhs_field, models.DurationField):\n+                return models.DateTimeField()\n+        elif self.connector == '+':\n+            # DateTimeField + DurationField = DateTimeField\n+            if isinstance(lhs_field, models.DateTimeField) and isinstance(rhs_field, models.DurationField):\n+                return models.DateTimeField()\n+            # DurationField + DateTimeField = DateTimeField\n+            elif isinstance(lhs_field, models.DurationField) and isinstance(rhs_field, models.DateTimeField):\n+                return models.DateTimeField()\n+                \n+        # Fall back to parent behavior for non-temporal operations\n+        return super()._resolve_output_field()\n+\n+\n class BaseExpression:\n     \"\"\"Base class for all query expressions.\"\"\"\n \n@@ -298,9 +436,30 @@ class BaseExpression:\n         If all sources are None, then an error is raised higher up the stack in\n         the output_field property.\n         \"\"\"\n+        from django.db import models\n+        \n         sources_iter = (source for source in self.get_source_fields() if source is not None)\n-        for output_field in sources_iter:\n-            for source in sources_iter:\n+        sources = list(sources_iter)\n+        \n+        if not sources:\n+            return None\n+            \n+        # Check if all sources are the same type\n+        first_field = sources[0]\n+        if all(isinstance(field, first_field.__class__) for field in sources):\n+            return first_field\n+            \n+        # Check for valid temporal arithmetic combinations\n+        if len(sources) == 2:\n+            field1, field2 = sources\n+            # Allow DateTimeField with DurationField combinations\n+            if (isinstance(field1, models.DateTimeField) and isinstance(field2, models.DurationField)) or \\\n+               (isinstance(field1, models.DurationField) and isinstance(field2, models.DateTimeField)):\n+                return None  # Let the specific expression class handle this\n+        \n+        # If we get here, we have mixed types that aren't valid temporal combinations\n+        for output_field in sources:\n+            for source in sources:\n                 if not isinstance(output_field, source.__class__):\n                     raise FieldError(\n                         'Expression contains mixed types: %s, %s. You must '\n@@ -309,7 +468,7 @@ class BaseExpression:\n                             source.__class__.__name__,\n                         )\n                     )\n-            return output_field\n+        return sources[0]\n \n     @staticmethod\n     def _convert_value_noop(value, expression, connection):\n@@ -415,6 +574,24 @@ class BaseExpression:\n \n     def __hash__(self):\n         return hash(self.identity)\n+    \n+    def __add__(self, other):\n+        return CombinedExpression(self, '+', other)\n+    \n+    def __sub__(self, other):\n+        return CombinedExpression(self, '-', other)\n+    \n+    def __mul__(self, other):\n+        return CombinedExpression(self, '*', other)\n+    \n+    def __truediv__(self, other):\n+        return CombinedExpression(self, '/', other)\n+    \n+    def __mod__(self, other):\n+        return CombinedExpression(self, '%%', other)\n+    \n+    def __pow__(self, other):\n+        return CombinedExpression(self, '^', other)\n \n \n class Expression(BaseExpression, Combinable):\n"}, "success": true, "processing_time": 492.132568359375, "attempts": 1, "error": null}
{"instance_id": "django__django-13158", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c913267476..2da0d195a6 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -328,6 +328,7 @@ class Query(BaseExpression):\n             obj.subq_aliases = self.subq_aliases.copy()\n         obj.used_aliases = self.used_aliases.copy()\n         obj._filtered_relations = self._filtered_relations.copy()\n+        obj.combined_queries = self.combined_queries\n         # Clear the cached_property\n         try:\n             del obj.base_table\n"}, "success": true, "processing_time": 250.54039001464844, "attempts": 1, "error": null}
{"instance_id": "django__django-13195", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex e00bcacefb..42ea3158c7 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -210,13 +210,20 @@ class HttpResponseBase:\n         value = signing.get_cookie_signer(salt=key + salt).sign(value)\n         return self.set_cookie(key, value, **kwargs)\n \n-    def delete_cookie(self, key, path='/', domain=None):\n+    def delete_cookie(self, key, path='/', domain=None, samesite=None, secure=None, httponly=None):\n         # Most browsers ignore the Set-Cookie header if the cookie name starts\n         # with __Host- or __Secure- and the cookie doesn't use the secure flag.\n-        secure = key.startswith(('__Secure-', '__Host-'))\n+        if secure is None:\n+            secure = key.startswith(('__Secure-', '__Host-'))\n+        \n+        # When samesite='none', secure must be True for browser compliance\n+        if samesite and samesite.lower() == 'none':\n+            secure = True\n+            \n         self.set_cookie(\n             key, max_age=0, path=path, domain=domain, secure=secure,\n             expires='Thu, 01 Jan 1970 00:00:00 GMT',\n+            samesite=samesite, httponly=httponly,\n         )\n \n     # Common methods used by subclasses\n"}, "success": true, "processing_time": 179.74723052978516, "attempts": 1, "error": null}
{"instance_id": "django__django-13212", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 84b4f31ec7..26568f6614 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -48,7 +48,7 @@ class RegexValidator:\n         regex_matches = self.regex.search(str(value))\n         invalid_input = regex_matches if self.inverse_match else not regex_matches\n         if invalid_input:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n     def __eq__(self, other):\n         return (\n@@ -100,11 +100,11 @@ class URLValidator(RegexValidator):\n \n     def __call__(self, value):\n         if not isinstance(value, str):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # Then check full URL\n         try:\n@@ -115,7 +115,7 @@ class URLValidator(RegexValidator):\n                 try:\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n                 except ValueError:  # for example, \"Invalid IPv6 URL\"\n-                    raise ValidationError(self.message, code=self.code)\n+                    raise ValidationError(self.message, code=self.code, params={'value': value})\n                 try:\n                     netloc = punycode(netloc)  # IDN -> ACE\n                 except UnicodeError:  # invalid domain part\n@@ -132,14 +132,14 @@ class URLValidator(RegexValidator):\n                 try:\n                     validate_ipv6_address(potential_ip)\n                 except ValidationError:\n-                    raise ValidationError(self.message, code=self.code)\n+                    raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n         if len(urlsplit(value).netloc) > 253:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n integer_validator = RegexValidator(\n@@ -208,12 +208,12 @@ class EmailValidator:\n \n     def __call__(self, value):\n         if not value or '@' not in value:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         user_part, domain_part = value.rsplit('@', 1)\n \n         if not self.user_regex.match(user_part):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         if (domain_part not in self.domain_allowlist and\n                 not self.validate_domain_part(domain_part)):\n@@ -225,7 +225,7 @@ class EmailValidator:\n             else:\n                 if self.validate_domain_part(domain_part):\n                     return\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n     def validate_domain_part(self, domain_part):\n         if self.domain_regex.match(domain_part):\n"}, "success": true, "processing_time": 198.65858387947083, "attempts": 1, "error": null}
{"instance_id": "django__django-13279", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex b5453160a5..acfd3ef78a 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -108,6 +108,9 @@ class SessionBase:\n \n     def encode(self, session_dict):\n         \"Return the given session dictionary serialized and encoded as a string.\"\n+        # Use legacy encoding when DEFAULT_HASHING_ALGORITHM is 'sha1' for backward compatibility\n+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', None) == 'sha1':\n+            return self._legacy_encode(session_dict)\n         return signing.dumps(\n             session_dict, salt=self.key_salt, serializer=self.serializer,\n             compress=True,\n@@ -121,6 +124,13 @@ class SessionBase:\n         except Exception:\n             return self._legacy_decode(session_data)\n \n+    def _legacy_encode(self, session_dict):\n+        # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n+        serialized = self.serializer().dumps(session_dict)\n+        hash = self._hash(serialized)\n+        combined = hash.encode() + b':' + serialized\n+        return base64.b64encode(combined).decode('ascii')\n+\n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n         encoded_data = base64.b64decode(session_data.encode('ascii'))\n"}, "success": true, "processing_time": 117.32326626777649, "attempts": 1, "error": null}
{"instance_id": "django__django-13297", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/views/generic/base.py b/django/views/generic/base.py\nindex ea5baca08d..45cd2e9b36 100644\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -168,17 +168,25 @@ class TemplateView(TemplateResponseMixin, ContextMixin, View):\n def _wrap_url_kwargs_with_deprecation_warning(url_kwargs):\n     context_kwargs = {}\n     for key, value in url_kwargs.items():\n-        # Bind into function closure.\n-        @SimpleLazyObject\n-        def access_value(key=key, value=value):\n-            warnings.warn(\n-                'TemplateView passing URL kwargs to the context is '\n-                'deprecated. Reference %s in your template through '\n-                'view.kwargs instead.' % key,\n-                RemovedInDjango40Warning, stacklevel=2,\n-            )\n-            return value\n-        context_kwargs[key] = access_value\n+        # Create a class that properly handles the lazy evaluation\n+        class DeprecatedValue:\n+            def __init__(self, key, value):\n+                self.key = key\n+                self.value = value\n+                self._warned = False\n+            \n+            def __call__(self):\n+                if not self._warned:\n+                    warnings.warn(\n+                        'TemplateView passing URL kwargs to the context is '\n+                        'deprecated. Reference %s in your template through '\n+                        'view.kwargs instead.' % self.key,\n+                        RemovedInDjango40Warning, stacklevel=2,\n+                    )\n+                    self._warned = True\n+                return self.value\n+        \n+        context_kwargs[key] = SimpleLazyObject(DeprecatedValue(key, value))\n     return context_kwargs\n \n \n"}, "success": true, "processing_time": 238.5490448474884, "attempts": 1, "error": null}
{"instance_id": "django__django-13315", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5d115458a1..9054809b94 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1154,7 +1154,7 @@ class ModelChoiceIterator:\n     def __iter__(self):\n         if self.field.empty_label is not None:\n             yield (\"\", self.field.empty_label)\n-        queryset = self.queryset\n+        queryset = self.queryset.distinct()\n         # Can't use iterator() when queryset uses prefetch_related()\n         if not queryset._prefetch_related_lookups:\n             queryset = queryset.iterator()\n"}, "success": true, "processing_time": 190.27194929122925, "attempts": 1, "error": null}
{"instance_id": "django__django-13343", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex e10a5bb6d9..1b7f1eca81 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -227,6 +227,8 @@ class FileField(Field):\n     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):\n         self._primary_key_set_explicitly = 'primary_key' in kwargs\n \n+        # Store the original storage parameter for deconstruction\n+        self._storage_callable = storage\n         self.storage = storage or default_storage\n         if callable(self.storage):\n             self.storage = self.storage()\n@@ -279,7 +281,12 @@ class FileField(Field):\n             del kwargs[\"max_length\"]\n         kwargs['upload_to'] = self.upload_to\n         if self.storage is not default_storage:\n-            kwargs['storage'] = self.storage\n+            # If the original storage was callable, return the callable\n+            # Otherwise, return the storage instance as before\n+            if callable(self._storage_callable):\n+                kwargs['storage'] = self._storage_callable\n+            else:\n+                kwargs['storage'] = self.storage\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\n"}, "success": true, "processing_time": 124.2544596195221, "attempts": 1, "error": null}
{"instance_id": "django__django-13344", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/deprecation.py b/django/utils/deprecation.py\nindex b2c681b33c..9b2b7b79f5 100644\n--- a/django/utils/deprecation.py\n+++ b/django/utils/deprecation.py\n@@ -130,7 +130,8 @@ class MiddlewareMixin:\n                 self.process_request,\n                 thread_sensitive=True,\n             )(request)\n-        response = response or await self.get_response(request)\n+        if response is None:\n+            response = await self.get_response(request)\n         if hasattr(self, 'process_response'):\n             response = await sync_to_async(\n                 self.process_response,\n"}, "success": true, "processing_time": 639.9961547851562, "attempts": 1, "error": null}
{"instance_id": "django__django-13346", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fafc1beee8..6655046eda 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -479,6 +479,28 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual\n     pass\n \n \n+class KeyTransformIn(lookups.In):\n+    def process_rhs(self, compiler, connection):\n+        if isinstance(self.rhs, KeyTransform):\n+            return super(lookups.In, self).process_rhs(compiler, connection)\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if connection.vendor == 'oracle':\n+            func = []\n+            for value in rhs_params:\n+                value = json.loads(value)\n+                function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'\n+                func.append(\"%s('%s', '$.value')\" % (\n+                    function,\n+                    json.dumps({'value': value}),\n+                ))\n+            rhs = rhs % tuple(func)\n+            rhs_params = []\n+        elif connection.vendor == 'sqlite':\n+            func = [\"JSON_EXTRACT(%s, '$')\" if value != 'null' else '%s' for value in rhs_params]\n+            rhs = rhs % tuple(func)\n+        return rhs, rhs_params\n+\n+\n KeyTransform.register_lookup(KeyTransformExact)\n KeyTransform.register_lookup(KeyTransformIExact)\n KeyTransform.register_lookup(KeyTransformIsNull)\n@@ -494,6 +516,7 @@ KeyTransform.register_lookup(KeyTransformLt)\n KeyTransform.register_lookup(KeyTransformLte)\n KeyTransform.register_lookup(KeyTransformGt)\n KeyTransform.register_lookup(KeyTransformGte)\n+KeyTransform.register_lookup(KeyTransformIn)\n \n \n class KeyTransformFactory:\n"}, "success": true, "processing_time": 276.8261806964874, "attempts": 1, "error": null}
{"instance_id": "django__django-13363", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex b6594b043b..6828980733 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -292,7 +292,7 @@ class TruncDate(TruncBase):\n     def as_sql(self, compiler, connection):\n         # Cast to date rather than truncate to date.\n         lhs, lhs_params = compiler.compile(self.lhs)\n-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n+        tzname = self.get_tzname()\n         sql = connection.ops.datetime_cast_date_sql(lhs, tzname)\n         return sql, lhs_params\n \n@@ -305,7 +305,7 @@ class TruncTime(TruncBase):\n     def as_sql(self, compiler, connection):\n         # Cast to time rather than truncate to time.\n         lhs, lhs_params = compiler.compile(self.lhs)\n-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n+        tzname = self.get_tzname()\n         sql = connection.ops.datetime_cast_time_sql(lhs, tzname)\n         return sql, lhs_params\n \n"}, "success": true, "processing_time": 198.51974368095398, "attempts": 1, "error": null}
{"instance_id": "django__django-13401", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 28374272f4..7030d79344 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -516,17 +516,31 @@ class Field(RegisterLookupMixin):\n     def __eq__(self, other):\n         # Needed for @total_ordering\n         if isinstance(other, Field):\n-            return self.creation_counter == other.creation_counter\n+            return (self.creation_counter == other.creation_counter and\n+                    getattr(self, 'model', None) == getattr(other, 'model', None))\n         return NotImplemented\n \n     def __lt__(self, other):\n         # This is needed because bisect does not take a comparison function.\n         if isinstance(other, Field):\n-            return self.creation_counter < other.creation_counter\n+            if self.creation_counter != other.creation_counter:\n+                return self.creation_counter < other.creation_counter\n+            # If creation counters are equal, compare by model to ensure consistent ordering\n+            self_model = getattr(self, 'model', None)\n+            other_model = getattr(other, 'model', None)\n+            if self_model is None and other_model is None:\n+                return False\n+            elif self_model is None:\n+                return True\n+            elif other_model is None:\n+                return False\n+            else:\n+                # Compare models by their string representation for consistent ordering\n+                return str(self_model) < str(other_model)\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash(self.creation_counter)\n+        return hash((self.creation_counter, getattr(self, 'model', None)))\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n"}, "success": true, "processing_time": 180.2760248184204, "attempts": 1, "error": null}
{"instance_id": "django__django-13410", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/files/locks.py b/django/core/files/locks.py\nindex c46b00b905..4938347ea7 100644\n--- a/django/core/files/locks.py\n+++ b/django/core/files/locks.py\n@@ -107,9 +107,15 @@ else:\n             return True\n     else:\n         def lock(f, flags):\n-            ret = fcntl.flock(_fd(f), flags)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), flags)\n+                return True\n+            except OSError:\n+                return False\n \n         def unlock(f):\n-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), fcntl.LOCK_UN)\n+                return True\n+            except OSError:\n+                return False\n"}, "success": true, "processing_time": 127.98036026954651, "attempts": 1, "error": null}
{"instance_id": "django__django-13417", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 85cd8311a7..6f5ca6a37d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1225,6 +1225,9 @@ class QuerySet:\n         if self.query.extra_order_by or self.query.order_by:\n             return True\n         elif self.query.default_ordering and self.query.get_meta().ordering:\n+            # Default ordering is ignored when GROUP BY is present\n+            if self.query.group_by:\n+                return False\n             return True\n         else:\n             return False\n"}, "success": true, "processing_time": 356.8245053291321, "attempts": 1, "error": null}
{"instance_id": "django__django-13512", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 9de2c60b35..8ba0013871 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1258,7 +1258,7 @@ class JSONField(CharField):\n     def prepare_value(self, value):\n         if isinstance(value, InvalidJSONInput):\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def has_changed(self, initial, data):\n         if super().has_changed(initial, data):\n@@ -1266,6 +1266,6 @@ class JSONField(CharField):\n         # For purposes of seeing whether something has changed, True isn't the\n         # same as 1 and the order of keys doesn't matter.\n         return (\n-            json.dumps(initial, sort_keys=True, cls=self.encoder) !=\n-            json.dumps(self.to_python(data), sort_keys=True, cls=self.encoder)\n+            json.dumps(initial, sort_keys=True, cls=self.encoder, ensure_ascii=False) !=\n+            json.dumps(self.to_python(data), sort_keys=True, cls=self.encoder, ensure_ascii=False)\n         )\n"}, "success": true, "processing_time": 93.30422759056091, "attempts": 1, "error": null}
{"instance_id": "django__django-13513", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7a89f7bd15..83c6bf7396 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -446,7 +446,7 @@ class ExceptionReporter:\n                 post_context = []\n             frames.append({\n                 'exc_cause': explicit_or_implicit_cause(exc_value),\n-                'exc_cause_explicit': getattr(exc_value, '__cause__', True),\n+                'exc_cause_explicit': getattr(exc_value, '__cause__', None) is not None,\n                 'tb': tb,\n                 'type': 'django' if module_name.startswith('django.') else 'user',\n                 'filename': filename,\n"}, "success": true, "processing_time": 454.321475982666, "attempts": 1, "error": null}
{"instance_id": "django__django-13516", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex e6cbf8c64f..14c0355dd8 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -150,6 +150,10 @@ class OutputWrapper(TextIOBase):\n         style_func = style_func or self.style_func\n         self._out.write(style_func(msg))\n \n+    def flush(self):\n+        if hasattr(self._out, 'flush'):\n+            self._out.flush()\n+\n \n class BaseCommand:\n     \"\"\"\n"}, "success": true, "processing_time": 233.6252281665802, "attempts": 1, "error": null}
{"instance_id": "django__django-13551", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\nindex 93e2d71af2..41473dc652 100644\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -85,6 +85,7 @@ class PasswordResetTokenGenerator:\n            same password is chosen, due to password salting).\n         2. The last_login field will usually be updated very shortly after\n            a password reset.\n+        3. The email field will change if the user updates their email address.\n         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually\n         invalidates the token.\n \n@@ -94,7 +95,9 @@ class PasswordResetTokenGenerator:\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        email_field_name = user.get_email_field_name()\n+        email = getattr(user, email_field_name, '')\n+        return str(user.pk) + user.password + str(login_timestamp) + str(email) + str(timestamp)\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n"}, "success": true, "processing_time": 103.82403349876404, "attempts": 1, "error": null}
{"instance_id": "django__django-13568", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py\nindex 65fc266f7e..7239ff1f15 100644\n--- a/django/contrib/auth/checks.py\n+++ b/django/contrib/auth/checks.py\n@@ -52,7 +52,18 @@ def check_user_model(app_configs=None, **kwargs):\n         )\n \n     # Check that the username field is unique\n-    if not cls._meta.get_field(cls.USERNAME_FIELD).unique:\n+    username_field_unique = cls._meta.get_field(cls.USERNAME_FIELD).unique\n+    \n+    # If not unique via field attribute, check if covered by UniqueConstraint\n+    if not username_field_unique:\n+        for constraint in cls._meta.constraints:\n+            if (isinstance(constraint, UniqueConstraint) and \n+                len(constraint.fields) == 1 and \n+                constraint.fields[0] == cls.USERNAME_FIELD):\n+                username_field_unique = True\n+                break\n+    \n+    if not username_field_unique:\n         if (settings.AUTHENTICATION_BACKENDS ==\n                 ['django.contrib.auth.backends.ModelBackend']):\n             errors.append(\n"}, "success": true, "processing_time": 253.67168188095093, "attempts": 1, "error": null}
{"instance_id": "django__django-13590", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "Looking at the issue, the problem is in the `resolve_lookup_value` method in `django/db/models/sql/query.py`. When it encounters a namedtuple, it tries to reconstruct it using `type(value)(generator)`, but namedtuples expect individual arguments, not an iterable.\n\nThe issue occurs at lines 1080-1083 where the code uses:\n```python\nreturn type(value)(\n    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n    for sub_value in value\n)\n```\n\nFor namedtuples, this fails because namedtuple constructors don't accept iterators directly. They need either individual arguments or to use the `_make()` class method.\n\nThe solution is to detect if the value is a namedtuple (by checking for the `_fields` attribute) and handle it specially using the `_make()` method, while preserving the existing behavior for regular tuples and lists.\n\n```\n<file>django/db/models/sql/query.py</file>\n<original>\n    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            return type(value)(\n                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                for sub_value in value\n            )\n        return value\n</original>\n<patched>\n    def resolve_lookup_value(self, value, can_reuse, allow_joins):\n        if hasattr(value, 'resolve_expression'):\n            value = value.resolve_expression(\n                self, reuse=can_reuse, allow_joins=allow_joins,\n            )\n        elif isinstance(value, (list, tuple)):\n            # The items of the iterable may be expressions and therefore need\n            # to be resolved independently.\n            resolved_values = [\n                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                for sub_value in value\n            ]\n            # Check if this is a namedtuple by looking for the _fields attribute\n            if hasattr(value, '_fields'):\n                # Use _make() for namedtuples since they can't be constructed from iterators\n                return type(value)._make(resolved_values)\n            else:\n                # Regular tuple or list\n                return type(value)(resolved_values)\n        return value\n</patched>\n```\n\nThis patch:\n\n1. **Detects namedtuples** by checking for the `_fields` attribute, which is present on all namedtuples but not on regular tuples or lists.\n\n2. **Resolves sub-values first** into a list to avoid consuming the generator multiple times.\n\n3. **Uses `_make()` for namedtuples** which is the proper way to construct a namedtuple from an iterable.\n\n4. **Preserves existing behavior** for regular tuples and lists by using `type(value)(resolved_values)`.\n\n5. **Maintains functionality** by ensuring all sub-values are still resolved through the recursive call to `resolve_lookup_value`.\n\nThis solution addresses the core issue where namedtuple constructors cannot accept iterators directly, while maintaining backward compatibility for all other tuple and list types."}, "success": true, "processing_time": 562.9560792446136, "attempts": 1, "error": null}
{"instance_id": "django__django-13658", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 1ba093e51f..e411e86348 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -344,7 +344,7 @@ class ManagementUtility:\n         # Preprocess options to extract --settings and --pythonpath.\n         # These options could affect the commands that are available, so they\n         # must be processed early.\n-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n+        parser = CommandParser(prog=self.prog_name, usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n         parser.add_argument('--settings')\n         parser.add_argument('--pythonpath')\n         parser.add_argument('args', nargs='*')  # catch-all\n"}, "success": true, "processing_time": 105.33459877967834, "attempts": 1, "error": null}
{"instance_id": "django__django-13670", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex afd36d79e0..526414363b 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -326,7 +326,7 @@ class DateFormat(TimeFormat):\n \n     def y(self):\n         \"Year, 2 digits; e.g. '99'\"\n-        return str(self.data.year)[2:]\n+        return '%02d' % (self.data.year % 100)\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n"}, "success": true, "processing_time": 201.60044384002686, "attempts": 1, "error": null}
{"instance_id": "django__django-13741", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b9eb33329f..5be2b7c985 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -56,16 +56,9 @@ class ReadOnlyPasswordHashField(forms.Field):\n \n     def __init__(self, *args, **kwargs):\n         kwargs.setdefault(\"required\", False)\n+        kwargs.setdefault(\"disabled\", True)\n         super().__init__(*args, **kwargs)\n \n-    def bound_data(self, data, initial):\n-        # Always return initial because the widget doesn't\n-        # render an input field.\n-        return initial\n-\n-    def has_changed(self, initial, data):\n-        return False\n-\n \n class UsernameField(forms.CharField):\n     def to_python(self, value):\n@@ -163,11 +156,7 @@ class UserChangeForm(forms.ModelForm):\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related('content_type')\n \n-    def clean_password(self):\n-        # Regardless of what the user provides, return the initial value.\n-        # This is done here, rather than on the field, because the\n-        # field does not have access to the initial value\n-        return self.initial.get('password')\n+\n \n \n class AuthenticationForm(forms.Form):\n"}, "success": true, "processing_time": 134.15785312652588, "attempts": 1, "error": null}
{"instance_id": "django__django-13786", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex dddf7c679c..5f79febc2f 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -137,11 +137,19 @@ class CreateModel(ModelOperation):\n                 ),\n             ]\n         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n+            # Start with a copy of current options\n+            options = self.options.copy()\n+            # Remove any options that are in ALTER_OPTION_KEYS but not in operation.options\n+            for key in operation.ALTER_OPTION_KEYS:\n+                if key not in operation.options and key in options:\n+                    del options[key]\n+            # Update with the new options from the operation\n+            options.update(operation.options)\n             return [\n                 CreateModel(\n                     self.name,\n                     fields=self.fields,\n-                    options={**self.options, **operation.options},\n+                    options=options,\n                     bases=self.bases,\n                     managers=self.managers,\n                 ),\n"}, "success": true, "processing_time": 101.88305640220642, "attempts": 1, "error": null}
{"instance_id": "django__django-13794", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 6d38f932f9..5c8a0c233f 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -176,6 +176,12 @@ def lazy(func, *resultclasses):\n                 return str(self) % rhs\n             return self.__cast() % rhs\n \n+        def __add__(self, other):\n+            return self.__cast() + other\n+\n+        def __radd__(self, other):\n+            return other + self.__cast()\n+\n         def __deepcopy__(self, memo):\n             # Instances of this class are effectively immutable. It's just a\n             # collection of functions. So we don't need to do anything\n"}, "success": true, "processing_time": 106.44521403312683, "attempts": 1, "error": null}
{"instance_id": "django__django-13807", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "Looking at the issue, the problem is that SQLite's `PRAGMA foreign_key_check` and `PRAGMA foreign_key_list` statements fail when table names are SQL keywords because the table names are not properly quoted. The issue occurs in the SQLite backend's `check_constraints` method.\n\nLet me examine the code context to find the SQLite-specific implementation. From the issue description, the problem is in `django/db/backends/sqlite3/base.py` at line 327 in the `check_constraints` function, but I don't see that file in the provided locations. However, I can see that the other database backends (MySQL, Oracle, PostgreSQL) have their own `check_constraints` implementations.\n\nLooking at the issue more carefully, it mentions that the problem is specifically with SQLite and the PRAGMA statements not quoting table names properly. The error occurs in:\n- `PRAGMA foreign_key_check(%s)` \n- `PRAGMA foreign_key_list(%s)`\n\nSince I don't see the SQLite backend file in the provided locations, I need to look for where this might be implemented. Based on the error traceback and the intended behavior descriptions, it seems like the issue is that table names need to be quoted using `self.ops.quote_name()` when used in SQL statements.\n\nHowever, looking at the provided locations, I notice that the intended behavior descriptions for locations #1, #2, and #3 all mention the same line numbers (330, 336, 341-343) which suggests these are referring to the SQLite implementation that's not shown in the provided code.\n\nSince the issue specifically mentions SQLite and the error occurs in `django/db/backends/sqlite3/base.py`, and the provided locations don't include this file, I need to infer what the SQLite implementation looks like based on the error message and the intended behavior.\n\nBased on the error message and the pattern from other database backends, the SQLite `check_constraints` method likely looks similar to the MySQL implementation but uses PRAGMA statements instead of SELECT statements.\n\nLet me create a patch for the SQLite backend based on the error description:\n\n```\n<file>django/db/backends/sqlite3/base.py</file>\n<original>\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Check each table name in `table_names` for rows with invalid foreign\n        key references. This method is intended to be used in conjunction with\n        `disable_constraint_checking()` and `enable_constraint_checking()`, to\n        determine if rows with invalid references were entered while constraint\n        checks were off.\n        \"\"\"\n        with self.cursor() as cursor:\n            if table_names is None:\n                violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n            else:\n                violations = chain.from_iterable(\n                    cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()\n                    for table_name in table_names\n                )\n            for table_name, rowid, referenced_table_name, foreign_key_index in violations:\n                foreign_key = cursor.execute(\n                    'PRAGMA foreign_key_list(%s)' % table_name\n                ).fetchall()[foreign_key_index]\n                column_name, referenced_column_name = foreign_key[3:5]\n                primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)\n                primary_key_value, bad_value = cursor.execute(\n                    'SELECT %s, %s FROM %s WHERE rowid = %%s' % (\n                        primary_key_column_name, column_name, table_name,\n                    ),\n                    (rowid,)\n                ).fetchone()\n                raise IntegrityError(\n                    \"The row in table '%s' with primary key '%s' has an invalid \"\n                    \"foreign key: %s.%s contains a value '%s' that does not \"\n                    \"have a corresponding value in %s.%s.\"\n                    % (\n                        table_name, primary_key_value, table_name, column_name,\n                        bad_value, referenced_table_name, referenced_column_name,\n                    )\n                )\n</original>\n<patched>\n    def check_constraints(self, table_names=None):\n        \"\"\"\n        Check each table name in `table_names` for rows with invalid foreign\n        key references. This method is intended to be used in conjunction with\n        `disable_constraint_checking()` and `enable_constraint_checking()`, to\n        determine if rows with invalid references were entered while constraint\n        checks were off.\n        \"\"\"\n        with self.cursor() as cursor:\n            if table_names is None:\n                violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n            else:\n                violations = chain.from_iterable(\n                    cursor.execute('PRAGMA foreign_key_check(%s)' % self.ops.quote_name(table_name)).fetchall()\n                    for table_name in table_names\n                )\n            for table_name, rowid, referenced_table_name, foreign_key_index in violations:\n                foreign_key = cursor.execute(\n                    'PRAGMA foreign_key_list(%s)' % self.ops.quote_name(table_name)\n                ).fetchall()[foreign_key_index]\n                column_name, referenced_column_name = foreign_key[3:5]\n                primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)\n                primary_key_value, bad_value = cursor.execute(\n                    'SELECT %s, %s FROM %s WHERE rowid = %%s' % (\n                        self.ops.quote_name(primary_key_column_name), self.ops.quote_name(column_name), self.ops.quote_name(table_name),\n                    ),\n                    (rowid,)\n                ).fetchone()\n                raise IntegrityError(\n                    \"The row in table '%s' with primary key '%s' has an invalid \"\n                    \"foreign key: %s.%s contains a value '%s' that does not \"\n                    \"have a corresponding value in %s.%s.\"\n                    % (\n                        table_name, primary_key_value, table_name, column_name,\n                        bad_value, referenced_table_name, referenced_column_name,\n                    )\n                )\n</patched>\n```\n\nThe key changes in this patch are:\n\n1. **Line with `PRAGMA foreign_key_check(%s)`**: Changed from `'PRAGMA foreign_key_check(%s)' % table_name` to `'PRAGMA foreign_key_check(%s)' % self.ops.quote_name(table_name)` to properly quote the table name.\n\n2. **Line with `PRAGMA foreign_key_list(%s)`**: Changed from `'PRAGMA foreign_key_list(%s)' % table_name` to `'PRAGMA foreign_key_list(%s)' % self.ops.quote_name(table_name)` to properly quote the table name.\n\n3. **SELECT statement**: Changed from `'SELECT %s, %s FROM %s WHERE rowid = %%s' % (primary_key_column_name, column_name, table_name,)` to `'SELECT %s, %s FROM %s WHERE rowid = %%s' % (self.ops.quote_name(primary_key_column_name), self.ops.quote_name(column_name), self.ops.quote_name(table_name),)` to properly quote all identifiers.\n\nThese changes ensure that table names and column names that are SQL keywords (like \"order\") are properly quoted when used in SQL statements, preventing syntax errors in SQLite."}, "success": true, "processing_time": 705.0576410293579, "attempts": 3, "error": null}
{"instance_id": "django__django-13809", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex d9fb088350..40440d9203 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -51,6 +51,10 @@ class Command(BaseCommand):\n             '--noreload', action='store_false', dest='use_reloader',\n             help='Tells Django to NOT use the auto-reloader.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n \n     def execute(self, *args, **options):\n         if options['no_color']:\n"}, "success": true, "processing_time": 155.33426690101624, "attempts": 1, "error": null}
{"instance_id": "django__django-13810", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8e8c3da06a..be8a114eb1 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -51,11 +51,11 @@ class BaseHandler:\n                 middleware_is_async = middleware_can_async\n             try:\n                 # Adapt handler, if needed.\n-                handler = self.adapt_method_mode(\n+                adapted_handler = self.adapt_method_mode(\n                     middleware_is_async, handler, handler_is_async,\n                     debug=settings.DEBUG, name='middleware %s' % middleware_path,\n                 )\n-                mw_instance = middleware(handler)\n+                mw_instance = middleware(adapted_handler)\n             except MiddlewareNotUsed as exc:\n                 if settings.DEBUG:\n                     if str(exc):\n"}, "success": true, "processing_time": 173.77551555633545, "attempts": 1, "error": null}
{"instance_id": "django__django-13820", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 95a5062ec9..5e51194bbd 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -90,7 +90,7 @@ class MigrationLoader:\n             else:\n                 # Empty directories are namespaces.\n                 # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n+                if getattr(module, '__file__', None) is None and not isinstance(getattr(module, '__path__', None), list):\n                     self.unmigrated_apps.add(app_config.label)\n                     continue\n                 # Module is not a package (e.g. migrations.py).\n"}, "success": true, "processing_time": 108.13257908821106, "attempts": 1, "error": null}
{"instance_id": "django__django-13933", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..16cce5efef 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1280,11 +1280,16 @@ class ModelChoiceField(ChoiceField):\n             return None\n         try:\n             key = self.to_field_name or 'pk'\n+            original_value = value\n             if isinstance(value, self.queryset.model):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'], \n+                code='invalid_choice', \n+                params={'value': original_value}\n+            )\n         return value\n \n     def validate(self, value):\n"}, "success": true, "processing_time": 107.49777603149414, "attempts": 1, "error": null}
{"instance_id": "django__django-13964", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..04b1981b1a 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -254,7 +254,16 @@ class ForwardManyToOneDescriptor:\n         # Set the values of the related field.\n         else:\n             for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+                pk_val = getattr(value, rh_field.attname)\n+                # Don't set the foreign key if the related object's primary key\n+                # is effectively unset (empty string for CharField primary keys\n+                # that don't allow empty strings)\n+                if (pk_val == '' and \n+                    hasattr(rh_field, 'empty_strings_allowed') and \n+                    not rh_field.empty_strings_allowed):\n+                    # Skip setting the foreign key value for unset CharField primary keys\n+                    continue\n+                setattr(instance, lh_field.attname, pk_val)\n \n         # Set the related instance cache used by __get__ to avoid an SQL query\n         # when accessing the attribute we just set.\n"}, "success": true, "processing_time": 259.8656692504883, "attempts": 1, "error": null}
{"instance_id": "django__django-14007", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex f02199d97c..9c8b5e89a5 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1411,14 +1411,31 @@ class SQLInsertCompiler(SQLCompiler):\n                 cursor.execute(sql, params)\n             if not self.returning_fields:\n                 return []\n+            \n+            # Get the raw results from the database\n             if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:\n-                return self.connection.ops.fetch_returned_insert_rows(cursor)\n-            if self.connection.features.can_return_columns_from_insert:\n+                results = self.connection.ops.fetch_returned_insert_rows(cursor)\n+            elif self.connection.features.can_return_columns_from_insert:\n                 assert len(self.query.objs) == 1\n-                return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]\n-            return [(self.connection.ops.last_insert_id(\n-                cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column\n-            ),)]\n+                results = [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]\n+            else:\n+                results = [(self.connection.ops.last_insert_id(\n+                    cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column\n+                ),)]\n+            \n+            # Apply database converters to the returned values\n+            if self.returning_fields and results:\n+                converted_results = []\n+                for row in results:\n+                    converted_row = []\n+                    for field, value in zip(self.returning_fields, row):\n+                        if hasattr(field, 'from_db_value'):\n+                            value = field.from_db_value(value, None, self.connection)\n+                        converted_row.append(value)\n+                    converted_results.append(tuple(converted_row))\n+                return converted_results\n+            \n+            return results\n \n \n class SQLDeleteCompiler(SQLCompiler):\n"}, "success": true, "processing_time": 211.37431049346924, "attempts": 1, "error": null}
{"instance_id": "django__django-14011", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..3106022c50 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -81,6 +81,12 @@ class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):\n     \"\"\"A threaded version of the WSGIServer\"\"\"\n     daemon_threads = True\n \n+    def server_close(self):\n+        # Close all database connections to prevent \"database is being accessed by other users\" errors\n+        # when the test database is destroyed after LiveServerTestCase tests\n+        connections.close_all()\n+        super().server_close()\n+\n \n class ServerHandler(simple_server.ServerHandler):\n     http_version = '1.1'\n"}, "success": true, "processing_time": 124.46712565422058, "attempts": 1, "error": null}
{"instance_id": "django__django-14017", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa564..1dc2c8917a 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,7 +40,7 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        if not (isinstance(other, Q) or getattr(other, 'conditional', False)):\n             raise TypeError(other)\n \n         # If the other Q() is empty, ignore it and just use `self`.\n"}, "success": true, "processing_time": 243.3594286441803, "attempts": 1, "error": null}
{"instance_id": "django__django-14034", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..50aebbec05 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1026,7 +1026,9 @@ class MultiValueField(Field):\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n                 else:\n-                    return self.compress([])\n+                    # Check if any individual fields are required before returning early\n+                    if not any(field.required for field in self.fields):\n+                        return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n         for i, field in enumerate(self.fields):\n"}, "success": true, "processing_time": 232.14304566383362, "attempts": 1, "error": null}
{"instance_id": "django__django-14053", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 494890cc23..4bbd1a2d4b 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -220,6 +220,8 @@ class HashedFilesMixin:\n \n         # where to store the new paths\n         hashed_files = {}\n+        # Track which files have been yielded to avoid duplicates\n+        yielded_files = set()\n \n         # build a list of adjustable files\n         adjustable_paths = [\n@@ -230,13 +232,17 @@ class HashedFilesMixin:\n         # adjustable files.\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n             yield name, hashed_name, processed\n+            yielded_files.add(name)\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n+                # Only yield if the file actually changed (subst=True) or hasn't been yielded before\n+                if subst or name not in yielded_files:\n+                    yield name, hashed_name, processed\n+                    yielded_files.add(name)\n                 substitutions = substitutions or subst\n \n             if not substitutions:\n"}, "success": true, "processing_time": 242.72523665428162, "attempts": 1, "error": null}
{"instance_id": "django__django-14089", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py\nindex 871b016715..721b0ee951 100644\n--- a/django/utils/datastructures.py\n+++ b/django/utils/datastructures.py\n@@ -34,6 +34,9 @@ class OrderedSet:\n     def __len__(self):\n         return len(self.dict)\n \n+    def __reversed__(self):\n+        return reversed(self.dict)\n+\n \n class MultiValueDictKeyError(KeyError):\n     pass\n"}, "success": true, "processing_time": 159.08321475982666, "attempts": 1, "error": null}
{"instance_id": "django__django-14122", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 850734709d..ec14c5fe21 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -129,7 +129,39 @@ class SQLCompiler:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n             if not is_ref:\n-                expressions.extend(expr.get_group_by_cols())\n+                # Skip Meta.ordering fields from GROUP BY to prevent incorrect aggregation\n+                if self._meta_ordering:\n+                    # Check if this expression comes from Meta.ordering\n+                    is_meta_ordering = False\n+                    for meta_field in self._meta_ordering:\n+                        # Handle both string field names and expression objects\n+                        if hasattr(meta_field, 'resolve_expression'):\n+                            # For expression objects, compare the resolved expressions\n+                            try:\n+                                meta_expr = meta_field.resolve_expression(self.query, allow_joins=True, reuse=None)\n+                                if expr == meta_expr or (hasattr(expr, 'source_expressions') and \n+                                                        hasattr(meta_expr, 'source_expressions') and\n+                                                        expr.source_expressions == meta_expr.source_expressions):\n+                                    is_meta_ordering = True\n+                                    break\n+                            except:\n+                                continue\n+                        else:\n+                            # For string field names, check if the expression matches\n+                            # the field name by comparing the SQL output\n+                            try:\n+                                meta_sql, _ = self.compile(self.query.resolve_ref(meta_field.lstrip('-')))\n+                                expr_sql, _ = self.compile(expr)\n+                                if meta_sql == expr_sql:\n+                                    is_meta_ordering = True\n+                                    break\n+                            except:\n+                                continue\n+                    \n+                    if not is_meta_ordering:\n+                        expressions.extend(expr.get_group_by_cols())\n+                else:\n+                    expressions.extend(expr.get_group_by_cols())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n"}, "success": true, "processing_time": 247.36912608146667, "attempts": 1, "error": null}
{"instance_id": "django__django-14140", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ae0f886107..9e82a81213 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -87,7 +87,12 @@ class Q(tree.Node):\n         args, kwargs = (), {}\n         if len(self.children) == 1 and not isinstance(self.children[0], Q):\n             child = self.children[0]\n-            kwargs = {child[0]: child[1]}\n+            # Check if the child is a 2-tuple (key-value pair from kwargs)\n+            if isinstance(child, tuple) and len(child) == 2:\n+                kwargs = {child[0]: child[1]}\n+            else:\n+                # Child is not a 2-tuple, so it should go in args\n+                args = (child,)\n         else:\n             args = tuple(self.children)\n             if self.connector != self.default:\n"}, "success": true, "processing_time": 228.0405445098877, "attempts": 1, "error": null}
{"instance_id": "django__django-14155", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..7abca74a6c 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,22 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+        # Handle functools.partial objects\n+        if isinstance(func, functools.partial):\n+            self._partial_args = func.args\n+            self._partial_kwargs = func.keywords\n+            underlying_func = func.func\n+        else:\n+            self._partial_args = None\n+            self._partial_kwargs = None\n+            underlying_func = func\n+\n+        if not hasattr(underlying_func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = underlying_func.__class__.__module__ + '.' + underlying_func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = underlying_func.__module__ + '.' + underlying_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n@@ -59,8 +69,18 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        if isinstance(self.func, functools.partial):\n+            func_repr = \"functools.partial(%s\" % self._func_path\n+            if self._partial_args:\n+                func_repr += \", %s\" % \", \".join(repr(arg) for arg in self._partial_args)\n+            if self._partial_kwargs:\n+                func_repr += \", %s\" % \", \".join(\"%s=%r\" % (k, v) for k, v in self._partial_kwargs.items())\n+            func_repr += \")\"\n+        else:\n+            func_repr = self._func_path\n+        \n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n"}, "success": true, "processing_time": 180.1522331237793, "attempts": 1, "error": null}
{"instance_id": "django__django-14170", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex 90e6f41be0..5893db82dc 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -164,11 +164,7 @@ ExtractYear.register_lookup(YearGte)\n ExtractYear.register_lookup(YearLt)\n ExtractYear.register_lookup(YearLte)\n \n-ExtractIsoYear.register_lookup(YearExact)\n-ExtractIsoYear.register_lookup(YearGt)\n-ExtractIsoYear.register_lookup(YearGte)\n-ExtractIsoYear.register_lookup(YearLt)\n-ExtractIsoYear.register_lookup(YearLte)\n+\n \n \n class Now(Func):\n"}, "success": true, "processing_time": 200.93446898460388, "attempts": 1, "error": null}
{"instance_id": "django__django-14311", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex b6af5f5491..79a4c651ce 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -224,7 +224,7 @@ def get_child_arguments():\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n     if getattr(__main__, '__spec__', None) is not None and __main__.__spec__.parent:\n-        args += ['-m', __main__.__spec__.parent]\n+        args += ['-m', __main__.__spec__.name]\n         args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n"}, "success": true, "processing_time": 95.18864297866821, "attempts": 1, "error": null}
{"instance_id": "django__django-14315", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 3effab65a8..944ac1d03e 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -51,7 +51,7 @@ class DatabaseClient(BaseDatabaseClient):\n             env['PGSSLKEY'] = str(sslkey)\n         if passfile:\n             env['PGPASSFILE'] = str(passfile)\n-        return args, env\n+        return args, env if env else None\n \n     def runshell(self, parameters):\n         sigint_handler = signal.getsignal(signal.SIGINT)\n"}, "success": true, "processing_time": 184.35999822616577, "attempts": 1, "error": null}
{"instance_id": "django__django-14349", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex a385819510..8e39d794db 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -101,6 +101,9 @@ class URLValidator(RegexValidator):\n     def __call__(self, value):\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n+        # Check for forbidden characters that should not be in URLs\n+        if '\\n' in value or '\\r' in value or '\\t' in value:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n"}, "success": true, "processing_time": 255.64961957931519, "attempts": 1, "error": null}
{"instance_id": "django__django-14351", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 5089737034..fb61936a80 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -401,7 +401,7 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n             placeholder = '(' + ', '.join(sqls) + ')'\n             return (placeholder, sqls_params)\n         else:\n-            if not getattr(self.rhs, 'has_select_fields', True):\n+            if not getattr(self.rhs, 'has_select_fields', False):\n                 self.rhs.clear_select_clause()\n                 self.rhs.add_fields(['pk'])\n             return super().process_rhs(compiler, connection)\n"}, "success": true, "processing_time": 346.42708945274353, "attempts": 1, "error": null}
{"instance_id": "django__django-14373", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex 38e89c47bb..7185c6921c 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -314,7 +314,7 @@ class DateFormat(TimeFormat):\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n-        return self.data.year\n+        return '%04d' % self.data.year\n \n     def z(self):\n         \"\"\"Day of the year, i.e. 1 to 366.\"\"\"\n"}, "success": true, "processing_time": 167.57268643379211, "attempts": 1, "error": null}
{"instance_id": "django__django-14376", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..8b28a60485 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -200,9 +200,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n"}, "success": true, "processing_time": 96.53861427307129, "attempts": 1, "error": null}
{"instance_id": "django__django-14404", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 59a4a0364d..74ef4c491e 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -420,7 +420,7 @@ class AdminSite:\n     def catch_all_view(self, request, url):\n         if settings.APPEND_SLASH and not url.endswith('/'):\n             urlconf = getattr(request, 'urlconf', None)\n-            path = '%s/' % request.path_info\n+            path = '%s/' % request.path\n             try:\n                 match = resolve(path, urlconf)\n             except Resolver404:\n"}, "success": true, "processing_time": 199.40653157234192, "attempts": 1, "error": null}
{"instance_id": "django__django-14434", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex ad2f5a7da1..19e1a976af 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -1251,7 +1251,7 @@ class BaseDatabaseSchemaEditor:\n         else:\n             sql = self.sql_create_unique\n         if columns:\n-            columns = self._index_columns(table, columns, col_suffixes=(), opclasses=opclasses)\n+            columns = self._index_columns(table.table, columns, col_suffixes=(), opclasses=opclasses)\n         else:\n             columns = Expressions(model._meta.db_table, expressions, compiler, self.quote_value)\n         return Statement(\n"}, "success": true, "processing_time": 382.4305536746979, "attempts": 1, "error": null}
{"instance_id": "django__django-14493", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex f957a667b2..720767aa9e 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -261,6 +261,7 @@ class HashedFilesMixin:\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n+        substitutions = False\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n"}, "success": true, "processing_time": 209.44895362854004, "attempts": 1, "error": null}
{"instance_id": "django__django-14500", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 57042a8690..3d7be71a53 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -254,8 +254,8 @@ class MigrationExecutor:\n         if migration.replaces:\n             for app_label, name in migration.replaces:\n                 self.recorder.record_unapplied(app_label, name)\n-        else:\n-            self.recorder.record_unapplied(migration.app_label, migration.name)\n+        # Always record the migration itself as unapplied\n+        self.recorder.record_unapplied(migration.app_label, migration.name)\n         # Report progress\n         if self.progress_callback:\n             self.progress_callback(\"unapply_success\", migration, fake)\n"}, "success": true, "processing_time": 117.78579664230347, "attempts": 1, "error": null}
{"instance_id": "django__django-14534", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0ee26..c93959b1e3 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,7 +277,7 @@ class BoundWidget:\n \n     @property\n     def id_for_label(self):\n-        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n+        return self.data['attrs']['id']\n \n     @property\n     def choice_label(self):\n"}, "success": true, "processing_time": 102.64581847190857, "attempts": 1, "error": null}
{"instance_id": "django__django-14539", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex 3bc02b8dd3..694d1d8ee8 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -284,7 +284,7 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):\n             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)\n             if middle_unescaped != stripped:\n                 trail = middle[len(stripped):] + trail\n-                middle = middle[:len(stripped) - len(middle_unescaped)]\n+                middle = middle[:len(stripped)]\n                 trimmed_something = True\n         return lead, middle, trail\n \n"}, "success": true, "processing_time": 314.42510294914246, "attempts": 1, "error": null}
{"instance_id": "django__django-14559", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 387deca527..f14ff8d094 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -541,7 +541,7 @@ class QuerySet:\n         if any(f.primary_key for f in fields):\n             raise ValueError('bulk_update() cannot be used with primary key fields.')\n         if not objs:\n-            return\n+            return 0\n         # PK is used twice in the resulting update query, once in the filter\n         # and once in the WHEN. Each field will also have one CAST.\n         max_batch_size = connections[self.db].ops.bulk_batch_size(['pk', 'pk'] + fields, objs)\n@@ -563,9 +563,11 @@ class QuerySet:\n                     case_statement = Cast(case_statement, output_field=field)\n                 update_kwargs[field.attname] = case_statement\n             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\n+        rows_updated = 0\n         with transaction.atomic(using=self.db, savepoint=False):\n             for pks, update_kwargs in updates:\n-                self.filter(pk__in=pks).update(**update_kwargs)\n+                rows_updated += self.filter(pk__in=pks).update(**update_kwargs)\n+        return rows_updated\n     bulk_update.alters_data = True\n \n     def get_or_create(self, defaults=None, **kwargs):\n"}, "success": true, "processing_time": 155.78051829338074, "attempts": 1, "error": null}
{"instance_id": "django__django-14580", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex e19c881cda..072a2efc14 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -273,7 +273,7 @@ class TupleSerializer(BaseSequenceSerializer):\n class TypeSerializer(BaseSerializer):\n     def serialize(self):\n         special_cases = [\n-            (models.Model, \"models.Model\", []),\n+            (models.Model, \"models.Model\", [\"from django.db import models\"]),\n             (type(None), 'type(None)', []),\n         ]\n         for case, string, imports in special_cases:\n"}, "success": true, "processing_time": 215.4290931224823, "attempts": 1, "error": null}
{"instance_id": "django__django-14608", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..1b0d4554e0 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -333,7 +333,7 @@ class BaseFormSet:\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\n@@ -380,7 +380,7 @@ class BaseFormSet:\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\n-            self._non_form_errors = self.error_class(e.error_list)\n+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')\n \n     def clean(self):\n         \"\"\"\n"}, "success": true, "processing_time": 105.42772841453552, "attempts": 1, "error": null}
{"instance_id": "django__django-14631", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 88adadb37d..3802034955 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -232,6 +232,26 @@ class BoundField:\n     def widget_type(self):\n         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())\n \n+    def did_change(self):\n+        \"\"\"\n+        Return True if the field's data has changed from its initial value.\n+        \"\"\"\n+        data_value = self.data\n+        if not self.field.show_hidden_initial:\n+            initial_value = self.initial\n+        else:\n+            initial_prefixed_name = self.form.add_initial_prefix(self.name)\n+            hidden_widget = self.field.hidden_widget()\n+            try:\n+                from django.core.exceptions import ValidationError\n+                initial_value = self.field.to_python(\n+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)\n+                )\n+            except ValidationError:\n+                # Always assume data has changed if validation fails.\n+                return True\n+        return self.field.has_changed(initial_value, data_value)\n+\n \n @html_safe\n class BoundWidget:\ndiff --git a/django/forms/forms.py b/django/forms/forms.py\nindex d14037bfe9..6c8f2ba33c 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -388,13 +388,14 @@ class BaseForm:\n \n     def _clean_fields(self):\n         for name, field in self.fields.items():\n+            bound_field = self[name]\n             if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n+                value = bound_field.initial\n             else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+                value = bound_field.data\n             try:\n                 if isinstance(field, FileField):\n-                    initial = self.get_initial_for_field(field, name)\n+                    initial = bound_field.initial\n                     value = field.clean(value, initial)\n                 else:\n                     value = field.clean(value)\n"}, "success": true, "processing_time": 180.38603329658508, "attempts": 1, "error": null}
{"instance_id": "django__django-14672", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex ccc2223a5f..65950590e2 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -310,7 +310,7 @@ class ManyToManyRel(ForeignObjectRel):\n     def identity(self):\n         return super().identity + (\n             self.through,\n-            self.through_fields,\n+            make_hashable(self.through_fields),\n             self.db_constraint,\n         )\n \n"}, "success": true, "processing_time": 201.36467504501343, "attempts": 1, "error": null}
{"instance_id": "django__django-14725", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 75b0646512..c170f171e1 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -378,6 +378,9 @@ class BaseFormSet(RenderableFormMixin):\n             self._non_form_errors.append(error)\n \n         for i, form in enumerate(self.forms):\n+            # Skip processing extra forms when in edit_only mode\n+            if getattr(self, 'edit_only', False) and i >= self.initial_form_count():\n+                continue\n             # Empty forms are unchanged forms beyond those with initial data.\n             if not form.has_changed() and i >= self.initial_form_count():\n                 empty_forms_count += 1\n@@ -478,7 +481,7 @@ class BaseFormSet(RenderableFormMixin):\n def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n                     can_delete=False, max_num=None, validate_max=False,\n                     min_num=None, validate_min=False, absolute_max=None,\n-                    can_delete_extra=True, renderer=None):\n+                    can_delete_extra=True, renderer=None, edit_only=False):\n     \"\"\"Return a FormSet for the given form class.\"\"\"\n     if min_num is None:\n         min_num = DEFAULT_MIN_NUM\n@@ -505,6 +508,7 @@ def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n         'validate_min': validate_min,\n         'validate_max': validate_max,\n         'renderer': renderer or get_default_renderer(),\n+        'edit_only': edit_only,\n     }\n     return type(form.__name__ + 'FormSet', (formset,), attrs)\n \ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..ca9a64a978 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -576,6 +576,7 @@ class BaseModelFormSet(BaseFormSet):\n                  queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.edit_only = kwargs.pop('edit_only', getattr(self, 'edit_only', False))\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n@@ -813,6 +814,8 @@ class BaseModelFormSet(BaseFormSet):\n \n     def save_new_objects(self, commit=True):\n         self.new_objects = []\n+        if self.edit_only:\n+            return self.new_objects\n         for form in self.extra_forms:\n             if not form.has_changed():\n                 continue\n@@ -875,7 +878,8 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         edit_only=False):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -894,7 +898,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              renderer=renderer, edit_only=edit_only)\n     FormSet.model = model\n     return FormSet\n \n"}, "success": true, "processing_time": 144.09166073799133, "attempts": 1, "error": null}
{"instance_id": "django__django-14752", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex 3903e4c98c..c30181d726 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -26,12 +26,19 @@ class AutocompleteJsonView(BaseListView):\n         context = self.get_context_data()\n         return JsonResponse({\n             'results': [\n-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+                self.serialize_result(obj, to_field_name)\n                 for obj in context['object_list']\n             ],\n             'pagination': {'more': context['page_obj'].has_next()},\n         })\n \n+    def serialize_result(self, obj, to_field_name):\n+        \"\"\"\n+        Convert the provided model object to a dictionary that is added to the\n+        autocomplete results.\n+        \"\"\"\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+\n     def get_paginator(self, *args, **kwargs):\n         \"\"\"Use the ModelAdmin's paginator.\"\"\"\n         return self.model_admin.get_paginator(self.request, *args, **kwargs)\n"}, "success": true, "processing_time": 273.71141600608826, "attempts": 1, "error": null}
{"instance_id": "django__django-14765", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "Looking at the issue, I need to understand what's happening:\n\n1. PR #14760 made all calls to `ProjectState.__init__()` pass `real_apps` as a set\n2. The current code in `ProjectState.__init__()` still checks if `real_apps` is a set and converts it if not\n3. Since all callers now pass a set, this check is unnecessary and can be replaced with an assertion\n\nLet me examine the current code in the `__init__` method:\n\n```python\ndef __init__(self, models=None, real_apps=None):\n    self.models = models or {}\n    # Apps to include from main registry, usually unmigrated ones\n    if real_apps:\n        self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n    else:\n        self.real_apps = set()\n    self.is_delayed = False\n    # {remote_model_key: {model_key: [(field_name, field)]}}\n    self.relations = None\n```\n\nThe issue is on lines 94-97. Currently it:\n1. Checks if `real_apps` is truthy\n2. If so, checks if it's a set, and if not, converts it to a set\n3. If `real_apps` is falsy, sets `self.real_apps` to an empty set\n\nAccording to the intended behavior, since all callers now pass a set, I should:\n1. When `real_apps` is None, set `self.real_apps` to an empty set (preserve existing behavior)\n2. When `real_apps` is not None, assert that it's a set and directly assign it to `self.real_apps`\n\nHere's my reasoning:\n- The `if real_apps:` check needs to be changed to `if real_apps is not None:` to be more explicit about None checking\n- Inside the if block, I should assert that `real_apps` is a set and then directly assign it\n- The else block remains the same (setting to empty set when None)\n\n```\n<file>django/db/migrations/state.py</file>\n<original>\n    def __init__(self, models=None, real_apps=None):\n        self.models = models or {}\n        # Apps to include from main registry, usually unmigrated ones\n        if real_apps:\n            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n        else:\n            self.real_apps = set()\n        self.is_delayed = False\n        # {remote_model_key: {model_key: [(field_name, field)]}}\n        self.relations = None\n</original>\n<patched>\n    def __init__(self, models=None, real_apps=None):\n        self.models = models or {}\n        # Apps to include from main registry, usually unmigrated ones\n        if real_apps is not None:\n            assert isinstance(real_apps, set), \"real_apps must be a set\"\n            self.real_apps = real_apps\n        else:\n            self.real_apps = set()\n        self.is_delayed = False\n        # {remote_model_key: {model_key: [(field_name, field)]}}\n        self.relations = None\n</patched>\n```"}, "success": true, "processing_time": 1129.7022297382355, "attempts": 1, "error": null}
{"instance_id": "django__django-14771", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..af9f15fbb3 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -219,7 +219,7 @@ def get_child_arguments():\n     import __main__\n     py_script = Path(sys.argv[0])\n \n-    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n+    args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions] + ['-X%s' % o for o in sys._xoptions]\n     # __spec__ is set when the server was started with the `-m` option,\n     # see https://docs.python.org/3/reference/import.html#main-spec\n     # __spec__ may not exist, e.g. when running in a Conda env.\n"}, "success": true, "processing_time": 241.85870170593262, "attempts": 1, "error": null}
{"instance_id": "django__django-14787", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..7cb7b7252c 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -33,11 +33,15 @@ def _multi_decorate(decorators, method):\n         decorators = [decorators]\n \n     def _wrapper(self, *args, **kwargs):\n-        # bound_method has the signature that 'decorator' expects i.e. no\n-        # 'self' argument, but it's a closure over self so it can call\n-        # 'func'. Also, wrap method.__get__() in a function because new\n-        # attributes can't be set on bound method objects, only on functions.\n-        bound_method = partial(method.__get__(self, type(self)))\n+        # Create a proper function wrapper instead of using partial to ensure\n+        # it has the necessary function attributes that decorators expect\n+        def bound_method(*args, **kwargs):\n+            return method.__get__(self, type(self))(*args, **kwargs)\n+        \n+        # Copy function attributes from the original method to the bound_method\n+        # so decorators can access __name__, __module__, etc.\n+        update_wrapper(bound_method, method)\n+        \n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n"}, "success": true, "processing_time": 205.0604374408722, "attempts": 1, "error": null}
{"instance_id": "django__django-14792", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..618bf31723 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -73,7 +73,23 @@ def get_current_timezone_name():\n \n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n-    return str(timezone)\n+    timezone_name = str(timezone)\n+    \n+    # Handle Etc/GMT±X timezone names for backward compatibility\n+    # Etc/GMT zones have inverted signs compared to standard UTC offsets\n+    if timezone_name.startswith('Etc/GMT'):\n+        if timezone_name == 'Etc/GMT':\n+            return '+0'\n+        elif timezone_name.startswith('Etc/GMT+'):\n+            # Etc/GMT+X means UTC-X, so return -X\n+            offset = timezone_name[8:]  # Remove 'Etc/GMT+'\n+            return '-' + offset\n+        elif timezone_name.startswith('Etc/GMT-'):\n+            # Etc/GMT-X means UTC+X, so return +X\n+            offset = timezone_name[8:]  # Remove 'Etc/GMT-'\n+            return '+' + offset\n+    \n+    return timezone_name\n \n # Timezone selection functions.\n \n"}, "success": true, "processing_time": 210.45656728744507, "attempts": 1, "error": null}
{"instance_id": "django__django-14855", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dd154f72ee..35108cc359 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -209,7 +209,7 @@ class AdminReadonlyField:\n             remote_field.model._meta.model_name,\n         )\n         try:\n-            url = reverse(url_name, args=[quote(remote_obj.pk)])\n+            url = reverse(url_name, args=[quote(remote_obj.pk)], current_app=self.model_admin.admin_site.name)\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n"}, "success": true, "processing_time": 140.89150166511536, "attempts": 1, "error": null}
{"instance_id": "django__django-14999", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..3e2305ba9a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -320,6 +320,9 @@ class RenameModel(ModelOperation):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            # If the database table name hasn't changed, this is a no-op\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n"}, "success": true, "processing_time": 366.30261158943176, "attempts": 2, "error": null}
{"instance_id": "django__django-15022", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "Looking at the issue, the problem is that when searching with multiple words in the Django admin, each word creates a separate `queryset.filter()` call. When search fields include related fields (like `clientoffice__name`), this results in multiple JOINs to the same table, causing performance issues.\n\nThe current code in `get_search_results` method processes each search term individually:\n\n```python\nfor bit in smart_split(search_term):\n    # ... process bit ...\n    or_queries = models.Q(...)\n    queryset = queryset.filter(or_queries)  # This creates a separate JOIN for each word\n```\n\nThe solution is to collect all the Q objects first and then apply them in a single filter call. This way, Django's ORM can optimize the query and avoid duplicate JOINs.\n\nHere's the reasoning:\n1. Instead of calling `queryset.filter()` for each search word, we need to build all Q objects first\n2. Combine them using AND logic (all words must match) \n3. Apply all filters in a single `queryset.filter()` call\n4. This preserves the existing search functionality while eliminating duplicate JOINs\n\n```\n<file>django/contrib/admin/options.py</file>\n<original>        may_have_duplicates = False\n        search_fields = self.get_search_fields(request)\n        if search_fields and search_term:\n            orm_lookups = [construct_search(str(search_field))\n                           for search_field in search_fields]\n            for bit in smart_split(search_term):\n                if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                    bit = unescape_string_literal(bit)\n                or_queries = models.Q(\n                    *((orm_lookup, bit) for orm_lookup in orm_lookups),\n                    _connector=models.Q.OR,\n                )\n                queryset = queryset.filter(or_queries)\n            may_have_duplicates |= any(\n                lookup_spawns_duplicates(self.opts, search_spec)\n                for search_spec in orm_lookups\n            )</original>\n<patched>        may_have_duplicates = False\n        search_fields = self.get_search_fields(request)\n        if search_fields and search_term:\n            orm_lookups = [construct_search(str(search_field))\n                           for search_field in search_fields]\n            and_queries = []\n            for bit in smart_split(search_term):\n                if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                    bit = unescape_string_literal(bit)\n                or_queries = models.Q(\n                    *((orm_lookup, bit) for orm_lookup in orm_lookups),\n                    _connector=models.Q.OR,\n                )\n                and_queries.append(or_queries)\n            if and_queries:\n                # Combine all search term queries with AND logic in a single filter call\n                combined_query = models.Q(*and_queries, _connector=models.Q.AND)\n                queryset = queryset.filter(combined_query)\n            may_have_duplicates |= any(\n                lookup_spawns_duplicates(self.opts, search_spec)\n                for search_spec in orm_lookups\n            )</patched>\n```"}, "success": true, "processing_time": 969.4650225639343, "attempts": 1, "error": null}
{"instance_id": "django__django-15037", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f9b4bfb477..0b4ccb3453 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -124,6 +124,18 @@ class Command(BaseCommand):\n                             \"self\" if relations[column_name][1] == table_name\n                             else table2model(relations[column_name][1])\n                         )\n+                        \n+                        # Check if the foreign key references a non-primary key field\n+                        target_table = relations[column_name][1]\n+                        referenced_column = relations[column_name][0]\n+                        try:\n+                            target_pk_column = connection.introspection.get_primary_key_column(cursor, target_table)\n+                            if referenced_column != target_pk_column:\n+                                extra_params['to_field'] = referenced_column\n+                        except Exception:\n+                            # If we can't determine the primary key, skip adding to_field\n+                            pass\n+                        \n                         if rel_to in known_models:\n                             field_type = '%s(%s' % (rel_type, rel_to)\n                         else:\n"}, "success": true, "processing_time": 314.99774718284607, "attempts": 1, "error": null}
{"instance_id": "django__django-15098", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 6ea18dd22f..1d31f58205 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -321,6 +321,17 @@ class LocalePrefixPattern:\n             return '%s/' % language_code\n \n     def match(self, path):\n+        from django.utils.translation.trans_real import get_language_from_path\n+        \n+        # Try to extract language code from path using proper regex matching\n+        lang_code = get_language_from_path(path)\n+        if lang_code:\n+            # Calculate the prefix length including the trailing slash\n+            prefix_length = len(lang_code) + 1  # +1 for the leading slash\n+            if path.startswith('/' + lang_code + '/') or path == '/' + lang_code:\n+                return path[prefix_length:], (), {}\n+        \n+        # Fallback to original behavior for backward compatibility\n         language_prefix = self.language_prefix\n         if path.startswith(language_prefix):\n             return path[len(language_prefix):], (), {}\ndiff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex 7dcc77b46c..274a6f0643 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -43,7 +43,7 @@ language_code_re = _lazy_re_compile(\n     re.IGNORECASE\n )\n \n-language_code_prefix_re = _lazy_re_compile(r'^/(\\w+([@-]\\w+)?)(/|$)')\n+language_code_prefix_re = _lazy_re_compile(r'^/(\\w+(?:[@-]\\w+)*)(/|$)')\n \n \n @receiver(setting_changed)\n"}, "success": true, "processing_time": 248.9064164161682, "attempts": 1, "error": null}
{"instance_id": "django__django-15103", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 5ccef38048..12f0d4caaa 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -83,7 +83,7 @@ def escapejs_filter(value):\n \n \n @register.filter(is_safe=True)\n-def json_script(value, element_id):\n+def json_script(value, element_id=None):\n     \"\"\"\n     Output value JSON-encoded, wrapped in a <script type=\"application/json\">\n     tag.\ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex da1b5675ec..65c5442d8d 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -61,7 +61,7 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id):\n+def json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -69,10 +69,16 @@ def json_script(value, element_id):\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n-    return format_html(\n-        '<script id=\"{}\" type=\"application/json\">{}</script>',\n-        element_id, mark_safe(json_str)\n-    )\n+    if element_id is not None:\n+        return format_html(\n+            '<script id=\"{}\" type=\"application/json\">{}</script>',\n+            element_id, mark_safe(json_str)\n+        )\n+    else:\n+        return format_html(\n+            '<script type=\"application/json\">{}</script>',\n+            mark_safe(json_str)\n+        )\n \n \n def conditional_escape(text):\n"}, "success": true, "processing_time": 115.02923655509949, "attempts": 1, "error": null}
{"instance_id": "django__django-15104", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 97977d72ef..bf9c2acd26 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -96,7 +96,7 @@ class MigrationAutodetector:\n         for name, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n-                del deconstruction[2]['to']\n+                deconstruction[2].pop('to', None)\n             fields_def.append(deconstruction)\n         return fields_def\n \n"}, "success": true, "processing_time": 307.45173239707947, "attempts": 1, "error": null}
{"instance_id": "django__django-15127", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py\nindex 01422066a6..8cdbbd92c7 100644\n--- a/django/contrib/messages/storage/base.py\n+++ b/django/contrib/messages/storage/base.py\n@@ -1,8 +1,6 @@\n from django.conf import settings\n from django.contrib.messages import constants, utils\n \n-LEVEL_TAGS = utils.get_level_tags()\n-\n \n class Message:\n     \"\"\"\n@@ -38,7 +36,7 @@ class Message:\n \n     @property\n     def level_tag(self):\n-        return LEVEL_TAGS.get(self.level, '')\n+        return utils.get_level_tags().get(self.level, '')\n \n \n class BaseStorage:\n"}, "success": true, "processing_time": 105.34466505050659, "attempts": 1, "error": null}
{"instance_id": "django__django-15128", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex aaf35ee37c..ef80f8b61c 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -174,6 +174,8 @@ class Query(BaseExpression):\n         self.used_aliases = set()\n         self.filter_is_sticky = False\n         self.subquery = False\n+        # Set of aliases to avoid when generating new aliases during query combination\n+        self._avoid_aliases = None\n \n         # SQL-related attributes\n         # Select and related select clauses are expressions to use in the\n@@ -596,6 +598,11 @@ class Query(BaseExpression):\n         joinpromoter.add_votes(\n             j for j in self.alias_map if self.alias_map[j].join_type == INNER)\n         rhs_votes = set()\n+        \n+        # Collect all RHS aliases to avoid conflicts during alias generation\n+        rhs_aliases = set(rhs.alias_map.keys())\n+        self._avoid_aliases = rhs_aliases\n+        \n         # Now, add the joins from rhs query into the new query (skipping base\n         # table).\n         rhs_tables = list(rhs.alias_map)[1:]\n@@ -621,6 +628,9 @@ class Query(BaseExpression):\n                 self.unref_alias(new_alias)\n         joinpromoter.add_votes(rhs_votes)\n         joinpromoter.update_join_types(self)\n+        \n+        # Clear the avoid_aliases after processing joins\n+        self._avoid_aliases = None\n \n         # Combine subqueries aliases to ensure aliases relabelling properly\n         # handle subqueries when combining where and select clauses.\n@@ -761,7 +771,16 @@ class Query(BaseExpression):\n \n         # Create a new alias for this table.\n         if alias_list:\n-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            # Generate alias avoiding conflicts with existing aliases and avoid_aliases\n+            counter = len(self.alias_map) + 1\n+            avoid_aliases = self._avoid_aliases or set()\n+            while True:\n+                alias = '%s%d' % (self.alias_prefix, counter)\n+                if (alias not in self.alias_map and \n+                    alias not in avoid_aliases and\n+                    alias not in [a for aliases in self.table_map.values() for a in aliases]):\n+                    break\n+                counter += 1\n             alias_list.append(alias)\n         else:\n             # The first occurrence of a table uses the table name directly.\n"}, "success": true, "processing_time": 299.94568157196045, "attempts": 1, "error": null}
{"instance_id": "django__django-15161", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..f1d643a646 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -608,6 +608,13 @@ class F(Combinable):\n     def __hash__(self):\n         return hash(self.name)\n \n+    def deconstruct(self):\n+        return (\n+            'django.db.models.F',\n+            (self.name,),\n+            {}\n+        )\n+\n \n class ResolvedOuterRef(F):\n     \"\"\"\n@@ -650,6 +657,13 @@ class OuterRef(F):\n     def relabeled_clone(self, relabels):\n         return self\n \n+    def deconstruct(self):\n+        return (\n+            'django.db.models.OuterRef',\n+            (self.name,),\n+            {}\n+        )\n+\n \n class Func(SQLiteNumericMixin, Expression):\n     \"\"\"An SQL function call.\"\"\"\n@@ -672,6 +686,19 @@ class Func(SQLiteNumericMixin, Expression):\n         self.source_expressions = self._parse_expressions(*expressions)\n         self.extra = extra\n \n+    def deconstruct(self):\n+        args = tuple(self.source_expressions)\n+        kwargs = {}\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self.output_field\n+        if self.extra:\n+            kwargs.update(self.extra)\n+        return (\n+            'django.db.models.Func',\n+            args,\n+            kwargs\n+        )\n+\n     def __repr__(self):\n         args = self.arg_joiner.join(str(arg) for arg in self.source_expressions)\n         extra = {**self.extra, **self._get_repr_options()}\n@@ -749,6 +776,16 @@ class Value(SQLiteNumericMixin, Expression):\n         super().__init__(output_field=output_field)\n         self.value = value\n \n+    def deconstruct(self):\n+        kwargs = {}\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (\n+            'django.db.models.Value',\n+            (self.value,),\n+            kwargs\n+        )\n+\n     def __repr__(self):\n         return f'{self.__class__.__name__}({self.value!r})'\n \n@@ -963,6 +1000,13 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         super().__init__(output_field=output_field)\n         self.expression = expression\n \n+    def deconstruct(self):\n+        return (\n+            'django.db.models.ExpressionWrapper',\n+            (self.expression, self.output_field),\n+            {}\n+        )\n+\n     def set_source_expressions(self, exprs):\n         self.expression = exprs[0]\n \n@@ -1007,6 +1051,24 @@ class When(Expression):\n         self.condition = condition\n         self.result = self._parse_expressions(then)[0]\n \n+    def deconstruct(self):\n+        kwargs = {}\n+        # Reconstruct the original arguments\n+        if hasattr(self, '_constructor_args'):\n+            # If we stored the original constructor args, use them\n+            return (\n+                'django.db.models.When',\n+                self._constructor_args[0],\n+                self._constructor_args[1]\n+            )\n+        else:\n+            # Fallback: reconstruct from current state\n+            return (\n+                'django.db.models.When',\n+                (),\n+                {'condition': self.condition, 'then': self.result}\n+            )\n+\n     def __str__(self):\n         return \"WHEN %r THEN %r\" % (self.condition, self.result)\n \n@@ -1075,6 +1137,21 @@ class Case(SQLiteNumericMixin, Expression):\n         self.default = self._parse_expressions(default)[0]\n         self.extra = extra\n \n+    def deconstruct(self):\n+        args = tuple(self.cases)\n+        kwargs = {}\n+        if self.default is not None:\n+            kwargs['default'] = self.default\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self.output_field\n+        if self.extra:\n+            kwargs.update(self.extra)\n+        return (\n+            'django.db.models.Case',\n+            args,\n+            kwargs\n+        )\n+\n     def __str__(self):\n         return \"CASE %s, ELSE %r\" % (', '.join(str(c) for c in self.cases), self.default)\n \n@@ -1148,6 +1225,20 @@ class Subquery(BaseExpression, Combinable):\n         self.extra = extra\n         super().__init__(output_field)\n \n+    def deconstruct(self):\n+        # For subqueries, we need to store the original queryset\n+        # This is complex because we need to reconstruct the queryset\n+        kwargs = {}\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self.output_field\n+        if self.extra:\n+            kwargs.update(self.extra)\n+        return (\n+            'django.db.models.Subquery',\n+            (self.query,),\n+            kwargs\n+        )\n+\n     def get_source_expressions(self):\n         return [self.query]\n \n"}, "success": true, "processing_time": 309.9113268852234, "attempts": 1, "error": null}
{"instance_id": "django__django-15252", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..aac4da2485 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,5 +1,5 @@\n from django.apps.registry import Apps\n-from django.db import DatabaseError, models\n+from django.db import DatabaseError, models, router\n from django.utils.functional import classproperty\n from django.utils.timezone import now\n \n@@ -58,6 +58,9 @@ class MigrationRecorder:\n \n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate(self.connection.alias, 'migrations'):\n+            return\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -83,11 +86,15 @@ class MigrationRecorder:\n \n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        if not router.allow_migrate(self.connection.alias, 'migrations'):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n+        if not router.allow_migrate(self.connection.alias, 'migrations'):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n"}, "success": true, "processing_time": 137.00475549697876, "attempts": 1, "error": null}
{"instance_id": "django__django-15268", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..4c442c7f8a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -31,6 +31,13 @@ class ModelOperation(Operation):\n     def references_model(self, name, app_label):\n         return name.lower() == self.name_lower\n \n+    def can_reduce_through(self, operation, app_label):\n+        \"\"\"\n+        Return True if this operation can be reduced through the given operation.\n+        This allows non-consecutive operations to be optimized together.\n+        \"\"\"\n+        return False\n+\n     def reduce(self, operation, app_label):\n         return (\n             super().reduce(operation, app_label) or\n@@ -521,6 +528,23 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n             )\n         )\n \n+    def can_reduce_through(self, operation, app_label):\n+        \"\"\"\n+        Allow reduction through other AlterTogetherOptionOperation of the same type\n+        on the same model.\n+        \"\"\"\n+        return (\n+            isinstance(operation, AlterTogetherOptionOperation) and\n+            type(self) == type(operation) and\n+            self.name_lower == operation.name_lower\n+        )\n+\n+    def reduce(self, operation, app_label):\n+        if (type(self) == type(operation) and \n+            self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n     def describe(self):\n         return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n \n"}, "success": true, "processing_time": 1031.1411020755768, "attempts": 1, "error": null}
{"instance_id": "django__django-15277", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f30b523346..88c9ca9f28 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,8 @@ class CharField(Field):\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n-        self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        if self.max_length is not None:\n+            self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n         databases = kwargs.get('databases') or []\n"}, "success": true, "processing_time": 202.47327637672424, "attempts": 1, "error": null}
{"instance_id": "django__django-15280", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex d5aa968400..4872ce95d8 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -377,6 +377,22 @@ class ReverseOneToOneDescriptor:\n         # we must manage the reverse relation cache manually.\n         for rel_obj in queryset:\n             instance = instances_dict[rel_obj_attr(rel_obj)]\n+            # If the instance has deferred fields that were actually fetched\n+            # by the queryset, create a copy with the correct deferred fields state\n+            if hasattr(instance, '_state') and instance._state.deferred_fields:\n+                # Get the fields that were actually fetched by this queryset\n+                if hasattr(queryset, '_fields') and queryset._fields is not None:\n+                    # Create a copy of the instance with updated deferred fields\n+                    fetched_fields = set(queryset._fields)\n+                    # Only keep deferred fields that weren't fetched by this queryset\n+                    new_deferred_fields = instance._state.deferred_fields - fetched_fields\n+                    if new_deferred_fields != instance._state.deferred_fields:\n+                        # Create a copy of the instance with correct deferred fields\n+                        from copy import copy\n+                        instance_copy = copy(instance)\n+                        instance_copy._state = copy(instance._state)\n+                        instance_copy._state.deferred_fields = new_deferred_fields\n+                        instance = instance_copy\n             self.related.field.set_cached_value(rel_obj, instance)\n         return queryset, rel_obj_attr, instance_attr, True, self.related.get_cache_name(), False\n \n"}, "success": true, "processing_time": 223.50377917289734, "attempts": 1, "error": null}
{"instance_id": "django__django-15315", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 88c9ca9f28..0cf444c7e1 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -544,8 +544,7 @@ class Field(RegisterLookupMixin):\n     def __hash__(self):\n         return hash((\n             self.creation_counter,\n-            self.model._meta.app_label if hasattr(self, 'model') else None,\n-            self.model._meta.model_name if hasattr(self, 'model') else None,\n+            type(self),\n         ))\n \n     def __deepcopy__(self, memodict):\n"}, "success": true, "processing_time": 484.03005862236023, "attempts": 1, "error": null}
{"instance_id": "django__django-15380", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex bf9c2acd26..f1238a3504 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -824,7 +824,7 @@ class MigrationAutodetector:\n         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n-            new_model_state = self.to_state.models[app_label, old_model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n             field = new_model_state.get_field(field_name)\n             # Scan to see if this is actually a rename!\n             field_dec = self.deep_deconstruct(field)\n"}, "success": true, "processing_time": 155.41181015968323, "attempts": 1, "error": null}
{"instance_id": "django__django-15382", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 81f8f79c71..35710813f3 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1210,17 +1210,28 @@ class Exists(Subquery):\n         return clone\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n+        from django.db.models.sql.datastructures import EmptyResultSet\n+        \n         query = self.query.exists(using=connection.alias)\n-        sql, params = super().as_sql(\n-            compiler,\n-            connection,\n-            template=template,\n-            query=query,\n-            **extra_context,\n-        )\n-        if self.negated:\n-            sql = 'NOT {}'.format(sql)\n-        return sql, params\n+        try:\n+            sql, params = super().as_sql(\n+                compiler,\n+                connection,\n+                template=template,\n+                query=query,\n+                **extra_context,\n+            )\n+            if self.negated:\n+                sql = 'NOT {}'.format(sql)\n+            return sql, params\n+        except EmptyResultSet:\n+            # Handle empty querysets appropriately\n+            if self.negated:\n+                # ~Exists(empty_queryset) should be TRUE\n+                return '1=1', []\n+            else:\n+                # Exists(empty_queryset) should be FALSE\n+                return '1=0', []\n \n     def select_format(self, compiler, sql, params):\n         # Wrap EXISTS() with a CASE WHEN expression if a database backend\n"}, "success": true, "processing_time": 222.0980668067932, "attempts": 1, "error": null}
{"instance_id": "django__django-15467", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 64be087bf1..6d4f2865ab 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -269,7 +269,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                         \"class\": get_ul_class(self.radio_fields[db_field.name]),\n                     }\n                 )\n-                kwargs[\"empty_label\"] = _(\"None\") if db_field.blank else None\n+                kwargs[\"empty_label\"] = (kwargs.get(\"empty_label\") or _(\"None\")) if db_field.blank else None\n \n         if \"queryset\" not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n"}, "success": true, "processing_time": 698.4042983055115, "attempts": 1, "error": null}
{"instance_id": "django__django-15499", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 90fc31bee5..8a5c04393b 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -170,6 +170,19 @@ class CreateModel(ModelOperation):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, AlterTogetherOptionOperation)\n             and self.name_lower == operation.name_lower\n"}, "success": true, "processing_time": 152.58104538917542, "attempts": 1, "error": null}
{"instance_id": "django__django-15503", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fdca700c9d..b2aca55ef4 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -193,13 +193,12 @@ class HasKeyLookup(PostgresOperatorLookup):\n                 *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)\n             else:\n                 rhs_key_transforms = [key]\n-            rhs_params.append(\n-                \"%s%s\"\n-                % (\n-                    lhs_json_path,\n-                    compile_json_path(rhs_key_transforms, include_root=False),\n-                )\n-            )\n+            # For has_key lookups, always treat keys as object keys, not array indices\n+            # This fixes the issue with numeric string keys like '1111'\n+            json_path_parts = []\n+            for key_transform in rhs_key_transforms:\n+                json_path_parts.append(\".%s\" % json.dumps(key_transform)[1:-1])\n+            rhs_params.append(\"%s%s\" % (lhs_json_path, \"\".join(json_path_parts)))\n         # Add condition for each key.\n         if self.logical_operator:\n             sql = \"(%s)\" % self.logical_operator.join([sql] * len(rhs_params))\n@@ -227,9 +226,37 @@ class HasKeyLookup(PostgresOperatorLookup):\n         return super().as_postgresql(compiler, connection)\n \n     def as_sqlite(self, compiler, connection):\n-        return self.as_sql(\n-            compiler, connection, template=\"JSON_TYPE(%s, %%s) IS NOT NULL\"\n-        )\n+        # Process JSON path from the left-hand side.\n+        if isinstance(self.lhs, KeyTransform):\n+            lhs, lhs_params, lhs_key_transforms = self.lhs.preprocess_lhs(\n+                compiler, connection\n+            )\n+            lhs_json_path = compile_json_path(lhs_key_transforms)\n+        else:\n+            lhs, lhs_params = self.process_lhs(compiler, connection)\n+            lhs_json_path = \"$\"\n+        sql = \"JSON_TYPE(%s, %%s) IS NOT NULL\" % lhs\n+        # Process JSON path from the right-hand side.\n+        rhs = self.rhs\n+        rhs_params = []\n+        if not isinstance(rhs, (list, tuple)):\n+            rhs = [rhs]\n+        for key in rhs:\n+            if isinstance(key, KeyTransform):\n+                *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)\n+            else:\n+                rhs_key_transforms = [key]\n+            # For SQLite has_key lookups, always treat keys as object keys\n+            # This fixes the issue with numeric string keys like '1111'\n+            import json\n+            json_path_parts = []\n+            for key_transform in rhs_key_transforms:\n+                json_path_parts.append(\".%s\" % json.dumps(key_transform)[1:-1])\n+            rhs_params.append(\"%s%s\" % (lhs_json_path, \"\".join(json_path_parts)))\n+        # Add condition for each key.\n+        if self.logical_operator:\n+            sql = \"(%s)\" % self.logical_operator.join([sql] * len(rhs_params))\n+        return sql, tuple(lhs_params) + tuple(rhs_params)\n \n \n class HasKey(HasKeyLookup):\n"}, "success": true, "processing_time": 361.8317651748657, "attempts": 1, "error": null}
{"instance_id": "django__django-15525", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex da85cb4b92..9a2c35c02c 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -336,7 +336,9 @@ def build_instance(Model, data, db):\n         and hasattr(default_manager, \"get_by_natural_key\")\n         and hasattr(Model, \"natural_key\")\n     ):\n-        natural_key = Model(**data).natural_key()\n+        instance = Model(**data)\n+        instance._state.db = db\n+        natural_key = instance.natural_key()\n         try:\n             data[Model._meta.pk.attname] = Model._meta.pk.to_python(\n                 default_manager.db_manager(db).get_by_natural_key(*natural_key).pk\n"}, "success": true, "processing_time": 297.4190900325775, "attempts": 1, "error": null}
{"instance_id": "django__django-15554", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 54f3258eac..b41507514f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1027,7 +1027,9 @@ class Query(BaseExpression):\n         reuse_aliases = [\n             a\n             for a, j in self.alias_map.items()\n-            if (reuse is None or a in reuse) and j.equals(join)\n+            if (reuse is None or a in reuse) and (\n+                j == join if join.filtered_relation else j.equals(join)\n+            )\n         ]\n         if reuse_aliases:\n             if join.table_alias in reuse_aliases:\n"}, "success": true, "processing_time": 178.90335249900818, "attempts": 1, "error": null}
{"instance_id": "django__django-15561", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 9d6952df21..85d53e3b1a 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -1378,6 +1378,7 @@ class BaseDatabaseSchemaEditor:\n         # - adding only a db_column and the column name is not changed\n         non_database_attrs = [\n             \"blank\",\n+            \"choices\",\n             \"db_column\",\n             \"editable\",\n             \"error_messages\",\n"}, "success": true, "processing_time": 108.81296873092651, "attempts": 1, "error": null}
{"instance_id": "django__django-15563", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex 04063f73bc..f0c26f05dd 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -134,7 +134,15 @@ class UpdateQuery(Query):\n             query = UpdateQuery(model)\n             query.values = values\n             if self.related_ids is not None:\n-                query.add_filter(\"pk__in\", self.related_ids)\n+                # For multiple inheritance, we need to map the child model's primary keys\n+                # to the ancestor model's primary keys through the parent link field\n+                parent_link = self.model._meta.get_ancestor_link(model)\n+                if parent_link:\n+                    # Map child primary keys to ancestor primary keys through the parent link\n+                    query.add_filter(f\"{parent_link.target_field.name}__in\", self.related_ids)\n+                else:\n+                    # Fallback to original behavior if no parent link found\n+                    query.add_filter(\"pk__in\", self.related_ids)\n             result.append(query)\n         return result\n \n"}, "success": true, "processing_time": 378.4780488014221, "attempts": 1, "error": null}
{"instance_id": "django__django-15572", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/template/autoreload.py b/django/template/autoreload.py\nindex 84c8554165..0f4801dd04 100644\n--- a/django/template/autoreload.py\n+++ b/django/template/autoreload.py\n@@ -17,7 +17,7 @@ def get_template_directories():\n         if not isinstance(backend, DjangoTemplates):\n             continue\n \n-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)\n+        items.update(cwd / to_path(dir) for dir in backend.engine.dirs if dir.strip())\n \n         for loader in backend.engine.template_loaders:\n             if not hasattr(loader, \"get_dirs\"):\n"}, "success": true, "processing_time": 103.99858951568604, "attempts": 1, "error": null}
{"instance_id": "django__django-15629", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex fad5560486..739dc32a7d 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1180,7 +1180,11 @@ class ForeignKey(ForeignObject):\n         return self.target_field.rel_db_type(connection=connection)\n \n     def db_parameters(self, connection):\n-        return {\"type\": self.db_type(connection), \"check\": self.db_check(connection)}\n+        params = {\"type\": self.db_type(connection), \"check\": self.db_check(connection)}\n+        # Propagate collation from target field if it exists\n+        if hasattr(self.target_field, 'db_collation') and self.target_field.db_collation:\n+            params[\"collation\"] = self.target_field.db_collation\n+        return params\n \n     def convert_empty_strings(self, value, expression, connection):\n         if (not value) and isinstance(value, str):\n"}, "success": true, "processing_time": 314.1341733932495, "attempts": 1, "error": null}
{"instance_id": "django__django-15695", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..8d0ef8cf62 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -963,13 +963,14 @@ class RenameIndex(IndexOperation):\n \n         to_model_state = to_state.models[app_label, self.model_name_lower]\n         new_index = to_model_state.get_index_by_name(self.new_name)\n+        \n+        # Skip rename if old and new names are identical\n+        if old_index.name == new_index.name:\n+            return\n+            \n         schema_editor.rename_index(model, old_index, new_index)\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n-\n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n             self.new_name_lower,\n"}, "success": true, "processing_time": 295.9410147666931, "attempts": 1, "error": null}
{"instance_id": "django__django-15731", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex e37e56cd17..f2acbe1bc2 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -81,11 +81,10 @@ class BaseManager:\n     @classmethod\n     def _get_queryset_methods(cls, queryset_class):\n         def create_method(name, method):\n+            @functools.wraps(method)\n             def manager_method(self, *args, **kwargs):\n                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n \n-            manager_method.__name__ = method.__name__\n-            manager_method.__doc__ = method.__doc__\n             return manager_method\n \n         new_methods = {}\n"}, "success": true, "processing_time": 197.69149470329285, "attempts": 1, "error": null}
{"instance_id": "django__django-15741", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/formats.py b/django/utils/formats.py\nindex 3f38322d84..984b2c49b4 100644\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -106,6 +106,8 @@ def get_format(format_type, lang=None, use_l10n=None):\n     If use_l10n is provided and is not None, it forces the value to\n     be localized (or not), overriding the value of settings.USE_L10N.\n     \"\"\"\n+    from django.utils.encoding import force_str\n+    format_type = force_str(format_type)\n     if use_l10n is None:\n         try:\n             use_l10n = settings._USE_L10N_INTERNAL\n"}, "success": true, "processing_time": 111.57443284988403, "attempts": 1, "error": null}
{"instance_id": "django__django-15814", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 33cc636b22..5036335bec 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -748,7 +748,7 @@ class Query(BaseExpression):\n                     cur_model = source.related_model\n                 else:\n                     cur_model = source.remote_field.model\n-                opts = cur_model._meta\n+                opts = cur_model._meta.concrete_model._meta\n                 # Even if we're \"just passing through\" this model, we must add\n                 # both the current model's pk and the related reference field\n                 # (if it's not a reverse relation) to the things we select.\n"}, "success": true, "processing_time": 162.82554864883423, "attempts": 1, "error": null}
{"instance_id": "django__django-15851", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 4c9bd63546..3b5ddafaca 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -32,9 +32,9 @@ class DatabaseClient(BaseDatabaseClient):\n             args += [\"-h\", host]\n         if port:\n             args += [\"-p\", str(port)]\n+        args.extend(parameters)\n         if dbname:\n             args += [dbname]\n-        args.extend(parameters)\n \n         env = {}\n         if passwd:\n"}, "success": true, "processing_time": 180.41154718399048, "attempts": 1, "error": null}
{"instance_id": "django__django-15863", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 7a5b28d159..6503076962 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -151,9 +151,13 @@ def floatformat(text, arg=-1):\n             use_l10n = False\n             arg = arg[:-1] or -1\n     try:\n-        input_val = repr(text)\n-        d = Decimal(input_val)\n-    except InvalidOperation:\n+        if isinstance(text, Decimal):\n+            input_val = str(text)\n+            d = text\n+        else:\n+            input_val = str(text)\n+            d = Decimal(input_val)\n+    except (InvalidOperation, ValueError):\n         try:\n             d = Decimal(str(float(text)))\n         except (ValueError, InvalidOperation, TypeError):\n"}, "success": true, "processing_time": 185.84055757522583, "attempts": 1, "error": null}
{"instance_id": "django__django-15916", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 192d9fad94..32cffce014 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -629,6 +629,12 @@ def modelform_factory(\n     # If parent form class already has an inner Meta, the Meta we're\n     # creating needs to inherit from the parent's inner meta.\n     bases = (form.Meta,) if hasattr(form, \"Meta\") else ()\n+    \n+    # If no formfield_callback was explicitly provided, check if the base form\n+    # has one in its Meta class and inherit it\n+    if formfield_callback is None and hasattr(form, 'Meta') and hasattr(form.Meta, 'formfield_callback'):\n+        formfield_callback = form.Meta.formfield_callback\n+    \n     Meta = type(\"Meta\", bases, attrs)\n     if formfield_callback:\n         Meta.formfield_callback = staticmethod(formfield_callback)\n"}, "success": true, "processing_time": 151.97131824493408, "attempts": 1, "error": null}
{"instance_id": "django__django-15957", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex b192df4fbf..097dbe7780 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -72,6 +72,33 @@ from django.db.models.utils import resolve_callables\n from django.utils.functional import cached_property\n \n \n+def _handle_sliced_queryset_for_prefetch(queryset, query_dict):\n+    \"\"\"\n+    Handle filtering of potentially sliced querysets for prefetch operations.\n+    \n+    If the queryset is sliced, temporarily remove the slice, apply the filter,\n+    and then reapply the slice. This avoids the \"Cannot filter a query once \n+    a slice has been taken\" error.\n+    \"\"\"\n+    if queryset.query.is_sliced:\n+        # Extract slice information\n+        start = queryset.query.low_mark\n+        stop = queryset.query.high_mark\n+        \n+        # Create an unsliced clone\n+        clone = queryset._chain()\n+        clone.query.clear_limits()\n+        \n+        # Apply the filter to the unsliced queryset\n+        filtered_queryset = clone.filter(**query_dict)\n+        \n+        # Reapply the slice\n+        return filtered_queryset[start:stop]\n+    else:\n+        # No slice, apply filter normally\n+        return queryset.filter(**query_dict)\n+\n+\n class ForeignKeyDeferredAttribute(DeferredAttribute):\n     def __set__(self, instance, value):\n         if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(\n@@ -145,7 +172,7 @@ class ForwardManyToOneDescriptor:\n             }\n         else:\n             query = {\"%s__in\" % self.field.related_query_name(): instances}\n-        queryset = queryset.filter(**query)\n+        queryset = _handle_sliced_queryset_for_prefetch(queryset, query)\n \n         # Since we're going to assign directly in the cache,\n         # we must manage the reverse relation cache manually.\n@@ -404,7 +431,7 @@ class ReverseOneToOneDescriptor:\n         instance_attr = self.related.field.get_foreign_related_value\n         instances_dict = {instance_attr(inst): inst for inst in instances}\n         query = {\"%s__in\" % self.related.field.name: instances}\n-        queryset = queryset.filter(**query)\n+        queryset = _handle_sliced_queryset_for_prefetch(queryset, query)\n \n         # Since we're going to assign directly in the cache,\n         # we must manage the reverse relation cache manually.\n@@ -719,7 +746,7 @@ def create_reverse_many_to_one_manager(superclass, rel):\n             instance_attr = self.field.get_foreign_related_value\n             instances_dict = {instance_attr(inst): inst for inst in instances}\n             query = {\"%s__in\" % self.field.name: instances}\n-            queryset = queryset.filter(**query)\n+            queryset = _handle_sliced_queryset_for_prefetch(queryset, query)\n \n             # Since we just bypassed this class' get_queryset(), we must manage\n             # the reverse relation manually.\n@@ -1052,7 +1079,7 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n             queryset = queryset.using(queryset._db or self._db)\n \n             query = {\"%s__in\" % self.query_field_name: instances}\n-            queryset = queryset._next_is_sticky().filter(**query)\n+            queryset = _handle_sliced_queryset_for_prefetch(queryset._next_is_sticky(), query)\n \n             # M2M: need to annotate the query in order to get the primary model\n             # that the secondary model was actually related to. We know that\n"}, "success": true, "processing_time": 195.81573247909546, "attempts": 1, "error": null}
{"instance_id": "django__django-15973", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 09785e8586..d2e7e724e3 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -450,8 +450,11 @@ class BaseDatabaseSchemaEditor:\n \n         # Make M2M tables\n         for field in model._meta.local_many_to_many:\n-            if field.remote_field.through._meta.auto_created:\n-                self.create_model(field.remote_field.through)\n+            through = field.remote_field.through\n+            if isinstance(through, str):\n+                through = model._state.apps.get_model(through)\n+            if through._meta.auto_created:\n+                self.create_model(through)\n \n     def delete_model(self, model):\n         \"\"\"Delete a model from the database.\"\"\"\n"}, "success": true, "processing_time": 194.06730031967163, "attempts": 1, "error": null}
{"instance_id": "django__django-15987", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..16aaa4fb73 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -362,12 +362,14 @@ class Command(BaseCommand):\n         \"\"\"\n         dirs = []\n         fixture_dirs = settings.FIXTURE_DIRS\n-        if len(fixture_dirs) != len(set(fixture_dirs)):\n+        # Convert all fixture_dirs to strings for proper duplicate detection\n+        fixture_dirs_str = [os.fspath(d) for d in fixture_dirs]\n+        if len(fixture_dirs_str) != len(set(fixture_dirs_str)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n             app_dir = os.path.join(app_config.path, \"fixtures\")\n-            if app_dir in fixture_dirs:\n+            if app_dir in fixture_dirs_str:\n                 raise ImproperlyConfigured(\n                     \"'%s' is a default fixture directory for the '%s' app \"\n                     \"and cannot be listed in settings.FIXTURE_DIRS.\"\n"}, "success": true, "processing_time": 116.69011354446411, "attempts": 1, "error": null}
{"instance_id": "django__django-16032", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 866e38df83..8d4ca79630 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -420,7 +420,7 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n \n         if isinstance(self.rhs, Query):\n             self.rhs.clear_ordering(clear_default=True)\n-            if not self.rhs.has_select_fields:\n+            if not self.rhs.has_select_fields or self.rhs.annotations:\n                 self.rhs.clear_select_clause()\n                 self.rhs.add_fields([\"pk\"])\n         return super().get_prep_lookup()\n"}, "success": true, "processing_time": 338.10834765434265, "attempts": 1, "error": null}
{"instance_id": "django__django-16082", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 5e3c7cab82..cbf4fd8296 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -533,6 +533,7 @@ _connector_combinations = [\n             Combinable.SUB,\n             Combinable.MUL,\n             Combinable.DIV,\n+            Combinable.MOD,\n         )\n     },\n     # Bitwise operators.\n"}, "success": true, "processing_time": 196.10107493400574, "attempts": 1, "error": null}
{"instance_id": "django__django-16100", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5f07a4208a..62e443bf43 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2010,26 +2010,27 @@ class ModelAdmin(BaseModelAdmin):\n                 request.POST, request.FILES, queryset=modified_objects\n             )\n             if formset.is_valid():\n-                changecount = 0\n-                for form in formset.forms:\n-                    if form.has_changed():\n-                        obj = self.save_form(request, form, change=True)\n-                        self.save_model(request, obj, form, change=True)\n-                        self.save_related(request, form, formsets=[], change=True)\n-                        change_msg = self.construct_change_message(request, form, None)\n-                        self.log_change(request, obj, change_msg)\n-                        changecount += 1\n-\n-                if changecount:\n-                    msg = ngettext(\n-                        \"%(count)s %(name)s was changed successfully.\",\n-                        \"%(count)s %(name)s were changed successfully.\",\n-                        changecount,\n-                    ) % {\n-                        \"count\": changecount,\n-                        \"name\": model_ngettext(self.opts, changecount),\n-                    }\n-                    self.message_user(request, msg, messages.SUCCESS)\n+                with transaction.atomic(using=router.db_for_write(self.model)):\n+                    changecount = 0\n+                    for form in formset.forms:\n+                        if form.has_changed():\n+                            obj = self.save_form(request, form, change=True)\n+                            self.save_model(request, obj, form, change=True)\n+                            self.save_related(request, form, formsets=[], change=True)\n+                            change_msg = self.construct_change_message(request, form, None)\n+                            self.log_change(request, obj, change_msg)\n+                            changecount += 1\n+\n+                    if changecount:\n+                        msg = ngettext(\n+                            \"%(count)s %(name)s was changed successfully.\",\n+                            \"%(count)s %(name)s were changed successfully.\",\n+                            changecount,\n+                        ) % {\n+                            \"count\": changecount,\n+                            \"name\": model_ngettext(self.opts, changecount),\n+                        }\n+                        self.message_user(request, msg, messages.SUCCESS)\n \n                 return HttpResponseRedirect(request.get_full_path())\n \n"}, "success": true, "processing_time": 136.8928611278534, "attempts": 1, "error": null}
{"instance_id": "django__django-16116", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "Looking at the issue, I need to understand what's happening. The problem is that `makemigrations --check` is inconsistent with other Django commands that use `--check`. Specifically:\n\n1. `migrate --check` and `optimizemigration --check` just exit after checking (without performing the actual operation)\n2. `makemigrations --check` currently writes migration files AND then checks, which is inconsistent\n\nThe issue description states that `makemigrations --check` should just exit without making migrations, similar to how other `--check` commands work.\n\nHowever, looking at the provided code locations, none of them seem to be related to the `makemigrations` command. The locations show:\n- `changepassword.py` \n- `createsuperuser.py`\n- `remove_stale_contenttypes.py`\n\nThese are unrelated to the makemigrations command. The intended behavior descriptions mention checking for `check_changes` option and exiting with `sys.exit(1)` if changes are detected, but this seems to be describing the fix needed for the actual `makemigrations` command.\n\nSince the provided locations don't contain the actual `makemigrations` command code, I need to look for where this command would be implemented. Based on Django's structure, this would likely be in `django/core/management/commands/makemigrations.py`.\n\nLet me reason about what the fix should be:\n\n1. The `makemigrations` command should have a `--check` option\n2. When `--check` is used, it should detect if there are pending migrations to be created\n3. If there are pending migrations, it should exit with status code 1 WITHOUT creating the migration files\n4. If there are no pending migrations, it should exit with status code 0\n\nThe intended behavior descriptions suggest that the current implementation writes migration files first and then checks the `check_changes` option at the end, but it should check early and exit before writing any files.\n\nSince I don't have the actual `makemigrations.py` file in the provided locations, I cannot create a specific patch. However, based on the pattern described in the intended behaviors and the issue description, the fix would involve:\n\n1. Moving the check for the `--check` option to occur right after changes are detected\n2. Exiting with `sys.exit(1)` if changes are detected and `--check` is True\n3. Not calling the migration file writing methods when in check mode\n\nWithout the actual `makemigrations.py` code, I cannot provide a specific patch. The provided code locations appear to be incorrect or incomplete for this issue.\n\nHowever, if I had to make an educated guess based on the pattern described, the fix would look something like this in the makemigrations command:\n\n```\n<file>django/core/management/commands/makemigrations.py</file>\n<original>\n# After detecting changes but before writing migration files\nif changes:\n    # Write migration files\n    self.write_migration_files(changes)\n    \n    # Check for --check option at the end\n    if options['check_changes']:\n        sys.exit(1)\n</original>\n<patched>\n# After detecting changes but before writing migration files\nif changes:\n    # Check for --check option early and exit if changes detected\n    if options['check_changes']:\n        sys.exit(1)\n    \n    # Only write migration files if not in check mode\n    self.write_migration_files(changes)\n</patched>\n```\n\nBut since I don't have the actual makemigrations.py file content, I cannot provide the exact patch needed."}, "success": true, "processing_time": 2257.614417552948, "attempts": 1, "error": null}
{"instance_id": "django__django-16139", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b3cfc6723c..f6c4b7fc2f 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n         if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+            password.help_text = password.help_text.format(f\"../../{self.instance.pk}/password/\")\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\n"}, "success": true, "processing_time": 95.97675108909607, "attempts": 1, "error": null}
{"instance_id": "django__django-16145", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex 3c39f57e4d..67a36ef2b7 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -147,7 +147,7 @@ class Command(BaseCommand):\n                 \"version\": self.get_version(),\n                 \"settings\": settings.SETTINGS_MODULE,\n                 \"protocol\": self.protocol,\n-                \"addr\": \"[%s]\" % self.addr if self._raw_ipv6 else self.addr,\n+                \"addr\": \"[%s]\" % self.addr if self._raw_ipv6 else (\"0.0.0.0\" if self.addr == \"0\" else self.addr),\n                 \"port\": self.port,\n                 \"quit_command\": quit_command,\n             }\n"}, "success": true, "processing_time": 179.24598050117493, "attempts": 1, "error": null}
{"instance_id": "django__django-16255", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\nindex 27756d9d96..b40ad806ed 100644\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -168,7 +168,7 @@ class Sitemap:\n         if callable(self.lastmod):\n             try:\n                 return max([self.lastmod(item) for item in self.items()])\n-            except TypeError:\n+            except (TypeError, ValueError):\n                 return None\n         else:\n             return self.lastmod\n"}, "success": true, "processing_time": 108.17570066452026, "attempts": 1, "error": null}
{"instance_id": "django__django-16256", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex c5d87f647a..66358ee54b 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -62,6 +62,7 @@ and two directions (forward and reverse) for a total of six combinations.\n    If you're looking for ``ForwardManyToManyDescriptor`` or\n    ``ReverseManyToManyDescriptor``, use ``ManyToManyDescriptor`` instead.\n \"\"\"\n+from asgiref.sync import sync_to_async\n \n from django.core.exceptions import FieldError\n from django.db import (\n@@ -793,6 +794,11 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         create.alters_data = True\n \n+        async def acreate(self, **kwargs):\n+            return await sync_to_async(self.create)(**kwargs)\n+\n+        acreate.alters_data = True\n+\n         def get_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -801,6 +807,11 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         get_or_create.alters_data = True\n \n+        async def aget_or_create(self, **kwargs):\n+            return await sync_to_async(self.get_or_create)(**kwargs)\n+\n+        aget_or_create.alters_data = True\n+\n         def update_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -809,6 +820,11 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         update_or_create.alters_data = True\n \n+        async def aupdate_or_create(self, **kwargs):\n+            return await sync_to_async(self.update_or_create)(**kwargs)\n+\n+        aupdate_or_create.alters_data = True\n+\n         # remove() and clear() are only provided if the ForeignKey can have a\n         # value of null.\n         if rel.field.null:\n@@ -1191,6 +1207,11 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n \n         create.alters_data = True\n \n+        async def acreate(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.create)(through_defaults=through_defaults, **kwargs)\n+\n+        acreate.alters_data = True\n+\n         def get_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n             obj, created = super(ManyRelatedManager, self.db_manager(db)).get_or_create(\n@@ -1204,6 +1225,11 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n \n         get_or_create.alters_data = True\n \n+        async def aget_or_create(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.get_or_create)(through_defaults=through_defaults, **kwargs)\n+\n+        aget_or_create.alters_data = True\n+\n         def update_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n             obj, created = super(\n@@ -1217,6 +1243,11 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n \n         update_or_create.alters_data = True\n \n+        async def aupdate_or_create(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.update_or_create)(through_defaults=through_defaults, **kwargs)\n+\n+        aupdate_or_create.alters_data = True\n+\n         def _get_target_ids(self, target_field_name, objs):\n             \"\"\"\n             Return the set of ids of `objs` that the target field references.\n"}, "success": true, "processing_time": 223.76631999015808, "attempts": 1, "error": null}
{"instance_id": "django__django-16263", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9735ce10c8..7c69b74d56 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -550,8 +550,66 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        \n+        # Optimize by removing unused annotations\n+        if obj.annotations:\n+            used_annotations = set()\n+            \n+            # Find annotations used in WHERE clause\n+            for child in obj.where.children:\n+                used_annotations.update(self._get_annotation_refs_from_expr(child))\n+            \n+            # Find annotations used in ORDER BY clause\n+            for order_expr in obj.order_by:\n+                if hasattr(order_expr, 'expression'):\n+                    used_annotations.update(self._get_annotation_refs_from_expr(order_expr.expression))\n+                elif isinstance(order_expr, str):\n+                    # Handle string-based ordering like 'field_name' or '-field_name'\n+                    field_name = order_expr.lstrip('-')\n+                    if field_name in obj.annotations:\n+                        used_annotations.add(field_name)\n+            \n+            # Find annotations used by other annotations (transitive dependencies)\n+            changed = True\n+            while changed:\n+                changed = False\n+                for alias, annotation in obj.annotations.items():\n+                    if alias in used_annotations:\n+                        refs = self._get_annotation_refs_from_expr(annotation)\n+                        new_refs = refs - used_annotations\n+                        if new_refs:\n+                            used_annotations.update(new_refs)\n+                            changed = True\n+            \n+            # Remove unused annotations\n+            unused_annotations = set(obj.annotations.keys()) - used_annotations\n+            for alias in unused_annotations:\n+                del obj.annotations[alias]\n+                if obj.annotation_select_mask is not None and alias in obj.annotation_select_mask:\n+                    obj.annotation_select_mask.discard(alias)\n+            \n+            # Clear annotation select cache since we modified annotations\n+            obj._annotation_select_cache = None\n+        \n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n+    \n+    def _get_annotation_refs_from_expr(self, expr):\n+        \"\"\"\n+        Extract annotation references from an expression.\n+        \"\"\"\n+        refs = set()\n+        if hasattr(expr, 'get_source_expressions'):\n+            for source_expr in expr.get_source_expressions():\n+                refs.update(self._get_annotation_refs_from_expr(source_expr))\n+        elif hasattr(expr, 'refs') and expr.refs in self.annotations:\n+            # This is a Ref to an annotation\n+            refs.add(expr.refs)\n+        elif hasattr(expr, 'children'):\n+            # Handle WhereNode and similar containers\n+            for child in expr.children:\n+                refs.update(self._get_annotation_refs_from_expr(child))\n+        return refs\n \n     def has_filters(self):\n         return self.where\n"}, "success": true, "processing_time": 351.34785628318787, "attempts": 1, "error": null}
{"instance_id": "django__django-16315", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be8580f2c4..9348756085 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -794,6 +794,17 @@ class QuerySet(AltersData):\n             update_fields,\n             unique_fields,\n         )\n+        \n+        # Convert field names to database column names for conflict resolution\n+        if update_fields:\n+            update_fields = [\n+                opts.get_field(name).column for name in update_fields\n+            ]\n+        if unique_fields:\n+            unique_fields = [\n+                opts.get_field(name).column for name in unique_fields\n+            ]\n+        \n         self._for_write = True\n         fields = opts.concrete_fields\n         objs = list(objs)\n"}, "success": true, "processing_time": 238.7158007621765, "attempts": 1, "error": null}
{"instance_id": "django__django-16333", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex d73d1c8495..7203f84af8 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,6 +141,9 @@ class UserCreationForm(forms.ModelForm):\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\n+            self._save_m2m()\n+        else:\n+            self.save_m2m = self._save_m2m\n         return user\n \n \n"}, "success": true, "processing_time": 109.88779544830322, "attempts": 1, "error": null}
{"instance_id": "django__django-16429", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/timesince.py b/django/utils/timesince.py\nindex 701c49bab9..27a19c75f2 100644\n--- a/django/utils/timesince.py\n+++ b/django/utils/timesince.py\n@@ -97,6 +97,8 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):\n             d.hour,\n             d.minute,\n             d.second,\n+            0,\n+            d.tzinfo,\n         )\n     else:\n         pivot = d\n"}, "success": true, "processing_time": 183.60145330429077, "attempts": 1, "error": null}
{"instance_id": "django__django-16454", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex abc6f79a15..50c1e7fda9 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -71,6 +71,33 @@ class CommandParser(ArgumentParser):\n         else:\n             raise CommandError(\"Error: %s\" % message)\n \n+    def add_subparsers(self, **kwargs):\n+        # Get the subparser action from the parent class\n+        subparsers_action = super().add_subparsers(**kwargs)\n+        \n+        # Store the original add_parser method\n+        original_add_parser = subparsers_action.add_parser\n+        \n+        # Create a wrapper that uses CommandParser instead of ArgumentParser\n+        def add_parser_wrapper(*args, **parser_kwargs):\n+            # Set the parser_class to CommandParser if not already specified\n+            if 'parser_class' not in parser_kwargs:\n+                parser_kwargs['parser_class'] = CommandParser\n+            \n+            # If using CommandParser, pass through our custom parameters\n+            if parser_kwargs.get('parser_class') is CommandParser:\n+                if 'missing_args_message' not in parser_kwargs:\n+                    parser_kwargs['missing_args_message'] = self.missing_args_message\n+                if 'called_from_command_line' not in parser_kwargs:\n+                    parser_kwargs['called_from_command_line'] = self.called_from_command_line\n+            \n+            return original_add_parser(*args, **parser_kwargs)\n+        \n+        # Replace the add_parser method with our wrapper\n+        subparsers_action.add_parser = add_parser_wrapper\n+        \n+        return subparsers_action\n+\n \n def handle_default_options(options):\n     \"\"\"\n"}, "success": true, "processing_time": 255.83884572982788, "attempts": 1, "error": null}
{"instance_id": "django__django-16485", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 23c3a08c67..78881987fc 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -168,7 +168,7 @@ def floatformat(text, arg=-1):\n     except (ValueError, OverflowError, InvalidOperation):\n         return input_val\n \n-    if not m and p < 0:\n+    if not m and p <= 0:\n         return mark_safe(\n             formats.number_format(\n                 \"%d\" % (int(d)),\n"}, "success": true, "processing_time": 284.1881957054138, "attempts": 1, "error": null}
{"instance_id": "django__django-16493", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7a99b12691..bcf150516b 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -295,7 +295,7 @@ class FileField(Field):\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs[\"upload_to\"] = self.upload_to\n-        if self.storage is not default_storage:\n+        if hasattr(self, \"_storage_callable\") or self.storage is not default_storage:\n             kwargs[\"storage\"] = getattr(self, \"_storage_callable\", self.storage)\n         return name, path, args, kwargs\n \n"}, "success": true, "processing_time": 251.1944580078125, "attempts": 1, "error": null}
{"instance_id": "django__django-16502", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex fef5532e58..7c39e3ca3b 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -143,6 +143,22 @@ class ServerHandler(simple_server.ServerHandler):\n         if self.headers.get(\"Connection\") == \"close\":\n             self.request_handler.close_connection = True\n \n+    def finish_response(self):\n+        \"\"\"\n+        Override to handle HEAD requests properly by consuming the response\n+        iterator without writing the body, ensuring RFC 2616 compliance.\n+        \"\"\"\n+        if self.environ.get('REQUEST_METHOD') == 'HEAD':\n+            # For HEAD requests, consume the response iterator without writing the body\n+            try:\n+                for data in self.result:\n+                    pass  # Consume the iterator but don't write the body\n+            finally:\n+                self.finish_content()\n+        else:\n+            # For all other request methods, use the parent's implementation\n+            super().finish_response()\n+\n     def close(self):\n         self.get_stdin().read()\n         super().close()\n"}, "success": true, "processing_time": 180.64671230316162, "attempts": 1, "error": null}
{"instance_id": "django__django-16569", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 235aaf844c..02d040ee03 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -490,7 +490,7 @@ class BaseFormSet(RenderableFormMixin):\n                     required=False,\n                     widget=self.get_ordering_widget(),\n                 )\n-        if self.can_delete and (self.can_delete_extra or index < initial_form_count):\n+        if self.can_delete and (self.can_delete_extra or (index is not None and index < initial_form_count)):\n             form.fields[DELETION_FIELD_NAME] = BooleanField(\n                 label=_(\"Delete\"),\n                 required=False,\n"}, "success": true, "processing_time": 402.7871434688568, "attempts": 1, "error": null}
{"instance_id": "django__django-16642", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..17e630be37 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -612,6 +612,8 @@ class FileResponse(StreamingHttpResponse):\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"compress\": \"application/x-compress\",\n+                    \"br\": \"application/x-brotli\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\n"}, "success": true, "processing_time": 229.76868891716003, "attempts": 1, "error": null}
{"instance_id": "django__django-16667", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 842b73e95c..f4bc74b7cd 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -1157,7 +1157,7 @@ class SelectDateWidget(Widget):\n             input_format = formats.sanitize_strftime_format(input_format)\n             try:\n                 date_value = datetime.date(int(y), int(m), int(d))\n-            except ValueError:\n+            except (ValueError, OverflowError):\n                 # Return pseudo-ISO dates with zeros for any unselected values,\n                 # e.g. '2017-0-23'.\n                 return \"%s-%s-%s\" % (y or 0, m or 0, d or 0)\n"}, "success": true, "processing_time": 166.83917927742004, "attempts": 1, "error": null}
{"instance_id": "django__django-16801", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7f8eb128e1..c029a759be 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -441,7 +441,7 @@ class ImageField(FileField):\n         # after their corresponding image field don't stay cleared by\n         # Model.__init__, see bug #11196.\n         # Only run post-initialization dimension update on non-abstract models\n-        if not cls._meta.abstract:\n+        if not cls._meta.abstract and (self.width_field or self.height_field):\n             signals.post_init.connect(self.update_dimension_fields, sender=cls)\n \n     def update_dimension_fields(self, instance, force=False, *args, **kwargs):\n"}, "success": true, "processing_time": 334.9698235988617, "attempts": 1, "error": null}
{"instance_id": "django__django-17029", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex 0683f3ad3c..481dd1fc86 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -376,6 +376,7 @@ class Apps:\n         # Call expire cache on each model. This will purge\n         # the relation tree and the fields cache.\n         self.get_models.cache_clear()\n+        self.get_swappable_settings_name.cache_clear()\n         if self.ready:\n             # Circumvent self.get_models() to prevent that the cache is refilled.\n             # This particularly prevents that an empty value is cached while cloning.\n"}, "success": true, "processing_time": 104.81217575073242, "attempts": 1, "error": null}
{"instance_id": "django__django-17087", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..06657ebaab 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -168,7 +168,7 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            return \"%s.%s.%s\" % (module, klass.__qualname__, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\n"}, "success": true, "processing_time": 206.16852974891663, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-22865", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex c59b0ac815..275c72904c 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -651,8 +651,21 @@ class Colorbar:\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n-        self.dividers.set_segments(\n-            np.dstack([X, Y])[1:-1] if self.drawedges else [])\n+        if self.drawedges:\n+            # Adjust segment slicing based on extend property to ensure edges\n+            # are drawn at extremities when extensions are present\n+            segments = np.dstack([X, Y])\n+            if self.extend == 'neither':\n+                segments = segments[1:-1]  # Remove both edges (original behavior)\n+            elif self.extend == 'min':\n+                segments = segments[:-1]   # Keep upper edge, remove lower edge\n+            elif self.extend == 'max':\n+                segments = segments[1:]    # Keep lower edge, remove upper edge\n+            elif self.extend == 'both':\n+                segments = segments[:]     # Keep both edges\n+            self.dividers.set_segments(segments)\n+        else:\n+            self.dividers.set_segments([])\n \n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)  # Have enough hatches.\n"}, "success": true, "processing_time": 195.96335744857788, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-24627", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 90b0bf117e..db5a4ecf55 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1308,6 +1308,14 @@ class _AxesBase(martist.Artist):\n         self._get_patches_for_fill = _process_plot_var_args(self, 'fill')\n \n         self._gridOn = mpl.rcParams['axes.grid']\n+        \n+        # Unset parent references for all children before clearing\n+        for child in self._children:\n+            if hasattr(child, 'axes'):\n+                child.axes = None\n+            if hasattr(child, 'figure'):\n+                child.figure = None\n+        \n         self._children = []\n         self._mouseover_set = _OrderedSet()\n         self.child_axes = []\ndiff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 6c18ba1a64..ca84733a39 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -949,6 +949,12 @@ default: %(va)s\n             ax.clear()\n             self.delaxes(ax)  # Remove ax from self._axstack.\n \n+        # Unset figure references for all artists before clearing lists\n+        for artist_list in [self.artists, self.lines, self.patches, self.texts, self.images, self.legends]:\n+            for artist in artist_list:\n+                if hasattr(artist, 'figure'):\n+                    artist.figure = None\n+\n         self.artists = []\n         self.lines = []\n         self.patches = []\n"}, "success": true, "processing_time": 209.03166937828064, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-25332", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py\nindex c9699b2e21..53fbf81d3b 100644\n--- a/lib/matplotlib/cbook.py\n+++ b/lib/matplotlib/cbook.py\n@@ -846,6 +846,56 @@ class Grouper:\n         siblings = self._mapping.get(weakref.ref(a), [weakref.ref(a)])\n         return [x() for x in siblings]\n \n+    def __getstate__(self):\n+        \"\"\"Prepare the object for pickling by converting weak references to strong references.\"\"\"\n+        self.clean()  # Remove any dead weak references first\n+        \n+        # Convert the weak reference mapping to strong references for pickling\n+        # We need to preserve the grouping structure\n+        strong_mapping = {}\n+        processed_groups = set()\n+        \n+        for key, group in self._mapping.items():\n+            # Get the actual object from the weak reference\n+            key_obj = key()\n+            if key_obj is None:\n+                continue  # Skip dead references\n+                \n+            # Convert the group ID to avoid processing the same group multiple times\n+            group_id = id(group)\n+            if group_id in processed_groups:\n+                continue\n+            processed_groups.add(group_id)\n+            \n+            # Convert weak references in the group to strong references\n+            strong_group = []\n+            for weak_ref in group:\n+                obj = weak_ref()\n+                if obj is not None:\n+                    strong_group.append(obj)\n+            \n+            # Store one representative from each group\n+            if strong_group:\n+                strong_mapping[id(strong_group)] = strong_group\n+        \n+        return {'groups': list(strong_mapping.values())}\n+\n+    def __setstate__(self, state):\n+        \"\"\"Restore the object after unpickling by converting strong references back to weak references.\"\"\"\n+        # Reconstruct the weak reference mapping from the strong references\n+        self._mapping = {}\n+        \n+        for group in state['groups']:\n+            if not group:\n+                continue\n+                \n+            # Create weak references for all objects in the group\n+            weak_group = [weakref.ref(obj) for obj in group]\n+            \n+            # Map each weak reference to the same group list\n+            for weak_ref in weak_group:\n+                self._mapping[weak_ref] = weak_group\n+\n \n class GrouperView:\n     \"\"\"Immutable view over a `.Grouper`.\"\"\"\n"}, "success": true, "processing_time": 588.2681810855865, "attempts": 1, "error": null}
{"instance_id": "mwaskom__seaborn-3069", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 4f0290a4..7e013fd9 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -1626,11 +1626,15 @@ class Plotter:\n                 self._figure.legends.append(legend)\n \n     def _finalize_figure(self, p: Plot) -> None:\n+        from seaborn._core.scales import Nominal\n \n         for sub in self._subplots:\n             ax = sub[\"ax\"]\n             for axis in \"xy\":\n                 axis_key = sub[axis]\n+                \n+                # Check if this axis uses a Nominal scale\n+                is_nominal = axis_key in self._scales and isinstance(self._scales[axis_key], Nominal)\n \n                 # Axis limits\n                 if axis_key in p._limits:\n@@ -1638,11 +1642,27 @@ class Plotter:\n                     a, b = p._limits[axis_key]\n                     lo = a if a is None else convert_units(a)\n                     hi = b if b is None else convert_units(b)\n-                    if isinstance(a, str):\n+                    # Apply +/- 0.5 margin for string limits or Nominal scales\n+                    if isinstance(a, str) or is_nominal:\n                         lo = cast(float, lo) - 0.5\n-                    if isinstance(b, str):\n+                    if isinstance(b, str) or is_nominal:\n                         hi = cast(float, hi) + 0.5\n                     ax.set(**{f\"{axis}lim\": (lo, hi)})\n+                elif is_nominal:\n+                    # Apply default +/- 0.5 margin for Nominal scales when no explicit limits\n+                    axis_obj = getattr(ax, f\"{axis}axis\")\n+                    data_lims = axis_obj.get_data_interval()\n+                    if len(data_lims) == 2 and not (data_lims[0] == data_lims[1] == 0):\n+                        lo, hi = data_lims\n+                        ax.set(**{f\"{axis}lim\": (lo - 0.5, hi + 0.5)})\n+\n+                # Suppress grid for Nominal scales\n+                if is_nominal:\n+                    ax.grid(False, axis=axis)\n+                \n+                # Invert y-axis for Nominal scales\n+                if is_nominal and axis == \"y\":\n+                    ax.invert_yaxis()\n \n         engine_default = None if p._target is not None else \"tight\"\n         layout_engine = p._layout_spec.get(\"engine\", engine_default)\n"}, "success": true, "processing_time": 73.3470823764801, "attempts": 1, "error": null}
{"instance_id": "mwaskom__seaborn-3187", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..10c8d8b4 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -379,7 +379,15 @@ class ContinuousBase(Scale):\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n             labels = axis.major.formatter.format_ticks(locs)\n-            new._legend = list(locs), list(labels)\n+            \n+            # Handle ScalarFormatter offset for large numbers\n+            formatter = axis.major.formatter\n+            if hasattr(formatter, 'offset') and formatter.offset != 0:\n+                # If formatter has an offset, adjust the legend values\n+                offset_locs = locs + formatter.offset\n+                new._legend = list(offset_locs), list(labels)\n+            else:\n+                new._legend = list(locs), list(labels)\n \n         return new\n \n"}, "success": true, "processing_time": 251.08486700057983, "attempts": 1, "error": null}
{"instance_id": "psf__requests-1921", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..f7c94365 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -59,6 +59,11 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n         if v is None:\n             del merged_setting[k]\n \n+    # Remove keys that are set to None in session_setting as well.\n+    for (k, v) in session_setting.items():\n+        if v is None and k in merged_setting:\n+            del merged_setting[k]\n+\n     return merged_setting\n \n \n"}, "success": true, "processing_time": 134.08735513687134, "attempts": 1, "error": null}
{"instance_id": "psf__requests-2931", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/requests/models.py b/requests/models.py\nindex 9c624d3c..8bce13cd 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -80,8 +80,10 @@ class RequestEncodingMixin(object):\n         if parameters are supplied as a dict.\n         \"\"\"\n \n-        if isinstance(data, (str, bytes)):\n+        if isinstance(data, str):\n             return to_native_string(data)\n+        elif isinstance(data, bytes):\n+            return data\n         elif hasattr(data, 'read'):\n             return data\n         elif hasattr(data, '__iter__'):\n"}, "success": true, "processing_time": 151.50662446022034, "attempts": 1, "error": null}
{"instance_id": "pytest-dev__pytest-10051", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..b60465cb4 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -342,7 +342,7 @@ class LogCaptureHandler(logging_StreamHandler):\n         super().emit(record)\n \n     def reset(self) -> None:\n-        self.records = []\n+        self.records.clear()\n         self.stream = StringIO()\n \n     def handleError(self, record: logging.LogRecord) -> None:\n"}, "success": true, "processing_time": 167.97927474975586, "attempts": 1, "error": null}
{"instance_id": "pytest-dev__pytest-10081", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 851e4943b..cadd9f67a 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -205,7 +205,17 @@ class TestCaseFunction(Function):\n \n     def teardown(self) -> None:\n         if self._explicit_tearDown is not None:\n-            self._explicit_tearDown()\n+            # Check if the test was skipped by looking for skip exceptions in _excinfo\n+            was_skipped = False\n+            if hasattr(self, '_excinfo') and self._excinfo:\n+                for excinfo in self._excinfo:\n+                    if isinstance(excinfo.value, pytest.skip.Exception):\n+                        was_skipped = True\n+                        break\n+            \n+            # Only call tearDown if the test wasn't skipped\n+            if not was_skipped:\n+                self._explicit_tearDown()\n             self._explicit_tearDown = None\n         self._testcase = None\n         self._obj = None\n"}, "success": true, "processing_time": 219.6722366809845, "attempts": 1, "error": null}
{"instance_id": "pytest-dev__pytest-7205", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/src/_pytest/setuponly.py b/src/_pytest/setuponly.py\nindex c9cc589ff..c7f076234 100644\n--- a/src/_pytest/setuponly.py\n+++ b/src/_pytest/setuponly.py\n@@ -66,7 +66,7 @@ def _show_fixture_action(fixturedef, msg):\n             tw.write(\" (fixtures used: {})\".format(\", \".join(deps)))\n \n     if hasattr(fixturedef, \"cached_param\"):\n-        tw.write(\"[{}]\".format(fixturedef.cached_param))\n+        tw.write(\"[{}]\".format(saferepr(fixturedef.cached_param)))\n \n     tw.flush()\n \n"}, "success": true, "processing_time": 132.72715544700623, "attempts": 1, "error": null}
{"instance_id": "pytest-dev__pytest-7324", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py\nindex 04c73411a..bea3bbfc2 100644\n--- a/src/_pytest/mark/expression.py\n+++ b/src/_pytest/mark/expression.py\n@@ -161,7 +161,15 @@ def not_expr(s: Scanner) -> ast.expr:\n         return ret\n     ident = s.accept(TokenType.IDENT)\n     if ident:\n-        return ast.Name(ident.value, ast.Load())\n+        # Handle Python boolean literals and None as constants\n+        if ident.value == \"True\":\n+            return ast.Constant(True)\n+        elif ident.value == \"False\":\n+            return ast.Constant(False)\n+        elif ident.value == \"None\":\n+            return ast.Constant(None)\n+        else:\n+            return ast.Name(ident.value, ast.Load())\n     s.reject((TokenType.NOT, TokenType.LPAREN, TokenType.IDENT))\n \n \n"}, "success": true, "processing_time": 174.5732297897339, "attempts": 1, "error": null}
{"instance_id": "pytest-dev__pytest-7432", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..f273d129c 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -292,7 +292,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n     elif (\n-        item._store.get(skipped_by_mark_key, True)\n+        item._store.get(skipped_by_mark_key, False)\n         and rep.skipped\n         and type(rep.longrepr) is tuple\n     ):\n"}, "success": true, "processing_time": 152.6358561515808, "attempts": 1, "error": null}
{"instance_id": "pytest-dev__pytest-7982", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex f0bdb1481..b96cba069 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -558,7 +558,7 @@ def visit(\n     entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n     yield from entries\n     for entry in entries:\n-        if entry.is_dir(follow_symlinks=False) and recurse(entry):\n+        if entry.is_dir() and recurse(entry):\n             yield from visit(entry.path, recurse)\n \n \n"}, "success": true, "processing_time": 83.01282405853271, "attempts": 1, "error": null}
{"instance_id": "scikit-learn__scikit-learn-12682", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957fe..ed171e85d4 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -865,7 +865,8 @@ class SparseCodingMixin(TransformerMixin):\n                                   transform_algorithm='omp',\n                                   transform_n_nonzero_coefs=None,\n                                   transform_alpha=None, split_sign=False,\n-                                  n_jobs=None, positive_code=False):\n+                                  n_jobs=None, positive_code=False,\n+                                  max_iter=1000):\n         self.n_components = n_components\n         self.transform_algorithm = transform_algorithm\n         self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n@@ -873,6 +874,7 @@ class SparseCodingMixin(TransformerMixin):\n         self.split_sign = split_sign\n         self.n_jobs = n_jobs\n         self.positive_code = positive_code\n+        self.max_iter = max_iter\n \n     def transform(self, X):\n         \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n@@ -900,7 +902,7 @@ class SparseCodingMixin(TransformerMixin):\n             X, self.components_, algorithm=self.transform_algorithm,\n             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n             alpha=self.transform_alpha, n_jobs=self.n_jobs,\n-            positive=self.positive_code)\n+            positive=self.positive_code, max_iter=self.max_iter)\n \n         if self.split_sign:\n             # feature vector is split into a positive and negative side\n@@ -991,12 +993,13 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n \n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n-                 split_sign=False, n_jobs=None, positive_code=False):\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+                                       positive_code, max_iter)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n"}, "success": true, "processing_time": 160.29276752471924, "attempts": 1, "error": null}
{"instance_id": "scikit-learn__scikit-learn-13135", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sklearn/preprocessing/_discretization.py b/sklearn/preprocessing/_discretization.py\nindex dd969c12b2..0b4a8e7195 100644\n--- a/sklearn/preprocessing/_discretization.py\n+++ b/sklearn/preprocessing/_discretization.py\n@@ -172,6 +172,7 @@ class KBinsDiscretizer(BaseEstimator, TransformerMixin):\n                 # 1D k-means procedure\n                 km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)\n                 centers = km.fit(column[:, None]).cluster_centers_[:, 0]\n+                centers = np.sort(centers)\n                 bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5\n                 bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]\n \n"}, "success": true, "processing_time": 208.97159218788147, "attempts": 1, "error": null}
{"instance_id": "scikit-learn__scikit-learn-14141", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sklearn/utils/_show_versions.py b/sklearn/utils/_show_versions.py\nindex e5d3141bf0..ecba9ec68b 100644\n--- a/sklearn/utils/_show_versions.py\n+++ b/sklearn/utils/_show_versions.py\n@@ -48,6 +48,7 @@ def _get_deps_info():\n         \"Cython\",\n         \"pandas\",\n         \"matplotlib\",\n+        \"joblib\",\n     ]\n \n     def get_version(module):\n"}, "success": true, "processing_time": 130.81306838989258, "attempts": 1, "error": null}
{"instance_id": "scikit-learn__scikit-learn-26194", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sklearn/metrics/_ranking.py b/sklearn/metrics/_ranking.py\nindex 0cdead9233..1c2a73af58 100644\n--- a/sklearn/metrics/_ranking.py\n+++ b/sklearn/metrics/_ranking.py\n@@ -1019,7 +1019,9 @@ def roc_curve(\n     thresholds : ndarray of shape = (n_thresholds,)\n         Decreasing thresholds on the decision function used to compute\n         fpr and tpr. `thresholds[0]` represents no instances being predicted\n-        and is arbitrarily set to `max(y_score) + 1`.\n+        and is arbitrarily set to `max(y_score) + 1`. For probability estimates\n+        (when all y_score values are between 0 and 1), this threshold is capped\n+        at 1.0.\n \n     See Also\n     --------\n@@ -1083,7 +1085,13 @@ def roc_curve(\n     # to make sure that the curve starts at (0, 0)\n     tps = np.r_[0, tps]\n     fps = np.r_[0, fps]\n-    thresholds = np.r_[thresholds[0] + 1, thresholds]\n+    \n+    # Check if y_score appears to be probability estimates (all values between 0 and 1)\n+    # If so, cap the threshold at 1.0 to avoid exceeding probability bounds\n+    if np.all((y_score >= 0) & (y_score <= 1)):\n+        thresholds = np.r_[min(thresholds[0] + 1, 1.0), thresholds]\n+    else:\n+        thresholds = np.r_[thresholds[0] + 1, thresholds]\n \n     if fps[-1] <= 0:\n         warnings.warn(\n"}, "success": true, "processing_time": 195.6637921333313, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-10449", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 06768168e..c522c7fbb 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -28,7 +28,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation, mode)\n-            if sig.return_annotation is not sig.empty:\n+            if objtype != 'class' and sig.return_annotation is not sig.empty:\n                 annotation['return'] = typing.stringify(sig.return_annotation, mode)\n     except (TypeError, ValueError):\n         pass\n"}, "success": true, "processing_time": 204.90120553970337, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-10673", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 35e16e623..4e5ba1657 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -118,6 +118,9 @@ class TocTree(SphinxDirective):\n                 docname = docname_join(self.env.docname, docname)\n                 if url_re.match(ref) or ref == 'self':\n                     toctree['entries'].append((title, ref))\n+                elif ref in ('genindex', 'modindex', 'search'):\n+                    # Special built-in documents that are generated by Sphinx\n+                    toctree['entries'].append((title, ref))\n                 elif docname not in self.env.found_docs:\n                     if excluded(self.env.doc2path(docname, False)):\n                         message = __('toctree contains reference to excluded document %r')\n"}, "success": true, "processing_time": 174.59248113632202, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-11510", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..42b40e00e 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -376,7 +376,47 @@ class Include(BaseInclude, SphinxDirective):\n         rel_filename, filename = self.env.relfn2path(self.arguments[0])\n         self.arguments[0] = filename\n         self.env.note_included(filename)\n-        return super().run()\n+        \n+        # Read the included file and emit source-read event\n+        try:\n+            with open(filename, 'r', encoding='utf-8') as f:\n+                content = f.read()\n+        except (OSError, UnicodeDecodeError) as err:\n+            raise self.severe(f'Problems with \"{filename}\" directive:\\n{err}')\n+        \n+        # Create a docname for the included file (relative path without extension)\n+        docname = rel_filename\n+        if docname.endswith('.rst'):\n+            docname = docname[:-4]\n+        elif docname.endswith('.txt'):\n+            docname = docname[:-4]\n+        \n+        # Emit source-read event to allow extensions to modify the content\n+        content_list = [content]\n+        self.env.app.emit('source-read', docname, content_list)\n+        processed_content = content_list[0]\n+        \n+        # Create a temporary StringInput with the processed content\n+        from docutils.io import StringInput\n+        original_source = self.state.document.settings.env.temp_data.get('include_source_backup')\n+        self.state.document.settings.env.temp_data['include_source_backup'] = self.state.document.current_source\n+        \n+        # Temporarily replace the source with our processed content\n+        temp_input = StringInput(source=processed_content, source_path=filename)\n+        original_input = self.state.document.current_source\n+        self.state.document.current_source = temp_input\n+        \n+        try:\n+            result = super().run()\n+        finally:\n+            # Restore original source\n+            self.state.document.current_source = original_input\n+            if original_source is not None:\n+                self.state.document.settings.env.temp_data['include_source_backup'] = original_source\n+            else:\n+                self.state.document.settings.env.temp_data.pop('include_source_backup', None)\n+        \n+        return result\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\n"}, "success": true, "processing_time": 148.51812267303467, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-8265", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex 9bafff11c..38ea7ffa2 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -173,7 +173,7 @@ class _UnparseVisitor(ast.NodeVisitor):\n \n     def visit_Tuple(self, node: ast.Tuple) -> str:\n         if node.elts:\n-            return \", \".join(self.visit(e) for e in node.elts)\n+            return \"(\" + \", \".join(self.visit(e) for e in node.elts) + \")\"\n         else:\n             return \"()\"\n \n"}, "success": true, "processing_time": 195.31656861305237, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-9281", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex a415a7074..5e25fc648 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -457,6 +457,8 @@ def object_description(object: Any) -> str:\n         else:\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n                                                  for x in sorted_values)\n+    if isinstance(object, enum.Enum):\n+        return f\"{object.__class__.__name__}.{object.name}\"\n     try:\n         s = repr(object)\n     except Exception as exc:\n"}, "success": true, "processing_time": 141.80273365974426, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-9591", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex e8330e81c..58ad2aa36 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -861,7 +861,8 @@ class PyProperty(PyObject):\n \n         typ = self.options.get('type')\n         if typ:\n-            signode += addnodes.desc_annotation(typ, ': ' + typ)\n+            annotation = self._parse_annotation(typ, self.env)\n+            signode += addnodes.desc_annotation(typ, ': ', annotation)\n \n         return fullname, prefix\n \n"}, "success": true, "processing_time": 187.2861156463623, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-12096", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 1b8005e1d2..2014c07580 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -507,7 +507,12 @@ def _eval_evalf(self, prec):\n             func = getattr(mpmath, fname)\n         except (AttributeError, KeyError):\n             try:\n-                return Float(self._imp_(*self.args), prec)\n+                # Recursively evaluate arguments before passing to _imp_\n+                evaluated_args = [arg.evalf(prec) for arg in self.args]\n+                result = self._imp_(*evaluated_args)\n+                # Recursively evaluate the result from _imp_\n+                from sympy import sympify\n+                return sympify(result).evalf(prec)\n             except (AttributeError, TypeError, ValueError):\n                 return\n \n"}, "success": true, "processing_time": 262.6265046596527, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-13031", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 7ef51bc847..6b1a9aceb1 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -240,7 +240,7 @@ def col_join(self, other):\n         row_join\n         \"\"\"\n         # A null matrix can always be stacked (see  #10770)\n-        if self.rows == 0 and self.cols != other.cols:\n+        if self.rows == 0:\n             return self._new(0, other.cols, []).col_join(other)\n \n         if self.cols != other.cols:\n@@ -476,7 +476,7 @@ def row_join(self, other):\n         col_join\n         \"\"\"\n         # A null matrix can always be stacked (see  #10770)\n-        if self.cols == 0 and self.rows != other.rows:\n+        if self.cols == 0:\n             return self._new(other.rows, 0, []).row_join(other)\n \n         if self.rows != other.rows:\n"}, "success": true, "processing_time": 227.38005828857422, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-13615", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 917717bb74..a75e86843f 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -999,9 +999,25 @@ def _complement(self, other):\n             return Union(a, b)\n \n         if isinstance(other, FiniteSet):\n-            nums = [m for m in other.args if m.is_number]\n-            if nums == []:\n+            nums = []\n+            syms = []\n+            for m in other.args:\n+                if m.is_number:\n+                    nums.append(m)\n+                else:\n+                    syms.append(m)\n+            \n+            if nums == [] and syms == []:\n+                return None\n+            elif nums == []:\n                 return None\n+            elif syms == []:\n+                nums_set = FiniteSet(*nums)\n+                return nums_set - self\n+            else:\n+                nums_set = FiniteSet(*nums)\n+                syms_set = FiniteSet(*syms)\n+                return Union(nums_set - self, Complement(syms_set, self, evaluate=False))\n \n         return Set._complement(self, other)\n \n"}, "success": true, "processing_time": 612.5677170753479, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-13878", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "Looking at the issue, I need to add `_cdf` methods to several distribution classes where integration doesn't work well. The issue provides test cases for distributions that currently fail to compute their CDF properly.\n\nLet me analyze the code structure and identify the distribution classes that need `_cdf` methods. From the test cases, I need to implement CDF for:\n\n1. Arcsin distribution\n2. Dagum distribution  \n3. Erlang distribution\n4. Frechet distribution\n5. Gamma distribution\n6. GammaInverse distribution\n7. Kumaraswamy distribution\n8. Laplace distribution\n9. Logistic distribution\n10. Nakagami distribution\n11. StudentT distribution\n12. UniformSum distribution\n\nI'll need to find these distribution classes in the file and add the appropriate `_cdf` methods with the correct mathematical formulas.\n\nLet me start by examining the file to understand the structure and find the distribution classes:\n\n```\n<file>sympy/stats/crv_types.py</file>\n<original>\nclass ArcsineDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a.is_real, \"Lower boundary should be real.\")\n        _value_check(b.is_real, \"Upper boundary should be real.\")\n        _value_check((b > a) != False, \"Upper boundary should be greater than lower boundary.\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return 1/(pi*sqrt((x - a)*(b - x)))</original>\n<patched>\nclass ArcsineDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a.is_real, \"Lower boundary should be real.\")\n        _value_check(b.is_real, \"Upper boundary should be real.\")\n        _value_check((b > a) != False, \"Upper boundary should be greater than lower boundary.\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return 1/(pi*sqrt((x - a)*(b - x)))\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        return Piecewise(\n            (S.Zero, x < a),\n            ((2/pi)*asin(sqrt((x - a)/(b - a))), x <= b),\n            (S.One, True)\n        )</patched>\n```\n\n```\n<file>sympy/stats/crv_types.py</file>\n<original>\nclass DagumDistribution(SingleContinuousDistribution):\n    _argnames = ('p', 'a', 'b')\n\n    @staticmethod\n    def check(p, a, b):\n        _value_check(p > 0, \"p must be positive\")\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        p, a, b = self.p, self.a, self.b\n        return a*p/x * ((x/b)**(a*p)) / ((((x/b)**a) + 1)**(p + 1))</original>\n<patched>\nclass DagumDistribution(SingleContinuousDistribution):\n    _argnames = ('p', 'a', 'b')\n\n    @staticmethod\n    def check(p, a, b):\n        _value_check(p > 0, \"p must be positive\")\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        p, a, b = self.p, self.a, self.b\n        return a*p/x * ((x/b)**(a*p)) / ((((x/b)**a) + 1)**(p + 1))\n\n    def _cdf(self, x):\n        p, a, b = self.p, self.a, self.b\n        return Piecewise(\n            (S.Zero, x <= 0),\n            ((1 + (x/b)**(-a*p))**(-1/p), True)\n        )</patched>\n```\n\n```\n<file>sympy/stats/crv_types.py</file>\n<original>\nclass ErlangDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'l')\n\n    @staticmethod\n    def check(k, l):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(l > 0, \"l must be positive\")\n\n    def pdf(self, x):\n        k, l = self.k, self.l\n        return l**k / gamma(k) * x**(k-1) * exp(-l*x)</original>\n<patched>\nclass ErlangDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'l')\n\n    @staticmethod\n    def check(k, l):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(l > 0, \"l must be positive\")\n\n    def pdf(self, x):\n        k, l = self.k, self.l\n        return l**k / gamma(k) * x**(k-1) * exp(-l*x)\n\n    def _cdf(self, x):\n        k, l = self.k, self.l\n        return Piecewise(\n            (S.Zero, x < 0),\n            (lowergamma(k, l*x) / gamma(k), True)\n        )</patched>\n```\n\n```\n<file>sympy/stats/crv_types.py</file>\n<original>\nclass FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    @staticmethod\n    def check(a, s, m):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(s > 0, \"s must be positive\")\n        _value_check(m.is_real, \"m must be real\")\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x - m)/s)**(-a - 1) * exp(-((x - m)/s)**(-a))</original>\n<patched>\nclass FrechetDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 's', 'm')\n\n    @staticmethod\n    def check(a, s, m):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(s > 0, \"s must be positive\")\n        _value_check(m.is_real, \"m must be real\")\n\n    def pdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return a/s * ((x - m)/s)**(-a - 1) * exp(-((x - m)/s)**(-a))\n\n    def _cdf(self, x):\n        a, s, m = self.a, self.s, self.m\n        return Piecewise(\n            (S.Zero, x <= m),\n            (exp(-((x - m)/s)**(-a)), True)\n        )</patched>\n```\n\n```\n<file>sympy/stats/crv_types.py</file>\n<original>\nclass GammaDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'theta')\n\n    @staticmethod\n    def check(k, theta):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(theta > 0, \"theta must be positive\")\n\n    def pdf(self, x):\n        k, theta = self.k, self.theta\n        return x**(k - 1) * exp(-x/theta) / (gamma(k) * theta**k)</original>\n<patched>\nclass GammaDistribution(SingleContinuousDistribution):\n    _argnames = ('k', 'theta')\n\n    @staticmethod\n    def check(k, theta):\n        _value_check(k > 0, \"k must be positive\")\n        _value_check(theta > 0, \"theta must be positive\")\n\n    def pdf(self, x):\n        k, theta = self.k, self.theta\n        return x**(k - 1) * exp(-x/theta) / (gamma(k) * theta**k)\n\n    def _cdf(self, x):\n        k, theta = self.k, self.theta\n        return Piecewise(\n            (S.Zero, x < 0),\n            (lowergamma(k, x/theta) / gamma(k), True)\n        )</patched>\n```\n\n```\n<file>sympy/stats/crv_types.py</file>\n<original>\nclass GammaInverseDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return b**a / gamma(a) * x**(-a - 1) * exp(-b/x)</original>\n<patched>\nclass GammaInverseDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return b**a / gamma(a) * x**(-a - 1) * exp(-b/x)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        return Piecewise(\n            (S.Zero, x <= 0),\n            (S.One - uppergamma(a, b/x) / gamma(a), True)\n        )</patched>\n```\n\n```\n<file>sympy/stats/crv_types.py</file>\n<original>\nclass KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a - 1) * (1 - x**a)**(b - 1)</original>\n<patched>\nclass KumaraswamyDistribution(SingleContinuousDistribution):\n    _argnames = ('a', 'b')\n\n    @staticmethod\n    def check(a, b):\n        _value_check(a > 0, \"a must be positive\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        a, b = self.a, self.b\n        return a * b * x**(a - 1) * (1 - x**a)**(b - 1)\n\n    def _cdf(self, x):\n        a, b = self.a, self.b\n        return Piecewise(\n            (S.Zero, x < 0),\n            (1 - (1 - x**a)**b, x <= 1),\n            (S.One, True)\n        )</patched>\n```\n\n```\n<file>sympy/stats/crv_types.py</file>\n<original>\nclass LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    @staticmethod\n    def check(mu, b):\n        _value_check(mu.is_real, \"mu must be real\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return exp(-Abs(x - mu)/b)/(2*b)</original>\n<patched>\nclass LaplaceDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'b')\n\n    @staticmethod\n    def check(mu, b):\n        _value_check(mu.is_real, \"mu must be real\")\n        _value_check(b > 0, \"b must be positive\")\n\n    def pdf(self, x):\n        mu, b = self.mu, self.b\n        return exp(-Abs(x - mu)/b)/(2*b)\n\n    def _cdf(self, x):\n        mu, b = self.mu, self.b\n        return Piecewise(\n            (S.Half*exp((x - mu)/b), x < mu),\n            (1 - S.Half*exp(-(x - mu)/b), True)\n        )</patched>\n```\n\n```\n<file>sympy/stats/crv_types.py</file>\n<original>\nclass LogisticDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 's')\n\n    @staticmethod\n    def check(mu, s):\n        _value_check(mu.is_real, \"mu must be real\")\n        _value_check(s > 0, \"s must be positive\")\n\n    def pdf(self, x):\n        mu, s = self.mu, self.s\n        return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)</original>\n<patched>\nclass LogisticDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 's')\n\n    @staticmethod\n    def check(mu, s):\n        _value_check(mu.is_real, \"mu must be real\")\n        _value_check(s > 0, \"s must be positive\")\n\n    def pdf(self, x):\n        mu, s = self.mu, self.s\n        return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)\n\n    def _cdf(self, x):\n        mu, s = self.mu, self.s\n        return 1 / (1 + exp(-(x - mu)/s))</patched>\n```\n\n```\n<file>sympy/stats/crv_types.py</file>\n<original>\nclass NakagamiDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'omega')\n\n    @staticmethod\n    def check(mu, omega):\n        _value_check(mu > 0, \"mu must be positive\")\n        _value_check(omega > 0, \"omega must be positive\")\n\n    def pdf(self, x):\n        mu, omega = self.mu, self.omega\n        return 2 * mu**mu / (gamma(mu) * omega**mu) * x**(2*mu - 1) * exp(-mu/omega * x**2)</original>\n<patched>\nclass NakagamiDistribution(SingleContinuousDistribution):\n    _argnames = ('mu', 'omega')\n\n    @staticmethod\n    def check(mu, omega):\n        _value_check(mu > 0, \"mu must be positive\")\n        _value_check(omega > 0, \"omega must be positive\")\n\n    def pdf(self, x):\n        mu, omega = self.mu, self.omega\n        return 2 * mu**mu / (gamma(mu) * omega**mu) * x**(2*mu - 1) * exp(-mu/omega * x**2)\n\n    def _cdf(self, x):\n        mu, omega = self.mu, self.omega\n        return Piecewise(\n            (S.Zero, x < 0),\n            (lowergamma(mu, mu*x**2/omega) / gamma(mu), True)\n        )</patched>\n```\n\n```\n<file>sympy/"}, "success": true, "processing_time": 1065.70356965065, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-13974", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 9dd10d219e..768d23fccc 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -382,7 +382,14 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        # Handle powers of TensorProducts by expanding into multiplication\n+        if isinstance(e.base, TensorProduct) and e.exp.is_integer and e.exp.is_positive:\n+            # Expand TensorProduct**n into TensorProduct * TensorProduct * ... (n times)\n+            from sympy import Mul\n+            expanded = Mul(*[e.base for _ in range(int(e.exp))])\n+            return tensor_product_simp_Mul(expanded)\n+        else:\n+            return tensor_product_simp(e.base) ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n"}, "success": true, "processing_time": 309.1862099170685, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-14531", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex cc1d19fcce..1f4eef5c08 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -216,9 +216,9 @@ def _print_LatticeOp(self, expr):\n     def _print_Limit(self, expr):\n         e, z, z0, dir = expr.args\n         if str(dir) == \"+\":\n-            return \"Limit(%s, %s, %s)\" % (e, z, z0)\n+            return \"Limit(%s, %s, %s)\" % (self._print(e), self._print(z), self._print(z0))\n         else:\n-            return \"Limit(%s, %s, %s, dir='%s')\" % (e, z, z0, dir)\n+            return \"Limit(%s, %s, %s, dir='%s')\" % (self._print(e), self._print(z), self._print(z0), dir)\n \n     def _print_list(self, expr):\n         return \"[%s]\" % self.stringify(expr, \", \")\n@@ -630,7 +630,7 @@ def _print_Relational(self, expr):\n         }\n \n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))\n \n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),\n                            self._relationals.get(expr.rel_op) or expr.rel_op,\n"}, "success": true, "processing_time": 153.11717581748962, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-15345", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex ea7e3a2d94..44181fd226 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -116,6 +116,9 @@ def _print_Derivative(self, expr):\n         dvars = [i[0] if i[1] == 1 else i for i in expr.variable_count]\n         return \"Hold[D[\" + ', '.join(self.doprint(a) for a in [dexpr] + dvars) + \"]]\"\n \n+    def _print_Max(self, expr):\n+        return \"Max[%s]\" % self.stringify(expr.args, \", \")\n+\n \n def mathematica_code(expr, **settings):\n     r\"\"\"Converts an expr to a string of the Wolfram Mathematica code\n"}, "success": true, "processing_time": 156.9095594882965, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-15349", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/algebras/quaternion.py b/sympy/algebras/quaternion.py\nindex b84e7cb95a..7eae8d73d0 100644\n--- a/sympy/algebras/quaternion.py\n+++ b/sympy/algebras/quaternion.py\n@@ -529,7 +529,7 @@ def to_rotation_matrix(self, v=None):\n \n         m10 = 2*s*(q.b*q.c + q.d*q.a)\n         m11 = 1 - 2*s*(q.b**2 + q.d**2)\n-        m12 = 2*s*(q.c*q.d + q.b*q.a)\n+        m12 = 2*s*(q.c*q.d - q.b*q.a)\n \n         m20 = 2*s*(q.b*q.d - q.c*q.a)\n         m21 = 2*s*(q.c*q.d + q.b*q.a)\n"}, "success": true, "processing_time": 206.29571843147278, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-15599", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex eae25630cc..a45bb506c0 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -123,9 +123,13 @@ def doit(p, q):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n \n-            if mod_l and all(inner.args[1] == q for inner in mod_l):\n+            # Check if applying modular reduction to non_mod_l results in changes\n+            was = non_mod_l[:]\n+            non_mod_l = [cls(x, q) for x in non_mod_l]\n+            changed = was != non_mod_l\n+            \n+            if changed or (mod_l and all(inner.args[1] == q for inner in mod_l)):\n                 # finding distributive term\n-                non_mod_l = [cls(x, q) for x in non_mod_l]\n                 mod = []\n                 non_mod = []\n                 for j in non_mod_l:\n"}, "success": true, "processing_time": 177.44514322280884, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-15809", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py\nindex 5f9fe73c5c..7f71a3d1b3 100644\n--- a/sympy/functions/elementary/miscellaneous.py\n+++ b/sympy/functions/elementary/miscellaneous.py\n@@ -339,9 +339,6 @@ def real_root(arg, n=None, evaluate=None):\n \n class MinMaxBase(Expr, LatticeOp):\n     def __new__(cls, *args, **assumptions):\n-        if not args:\n-            raise ValueError(\"The Max/Min functions must have arguments.\")\n-\n         args = (sympify(arg) for arg in args)\n \n         # first standard filter, for cls.zero and cls.identity\n"}, "success": true, "processing_time": 189.14753007888794, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-16597", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/assumptions/ask.py b/sympy/assumptions/ask.py\nindex 2f72e111e1..9724d42863 100644\n--- a/sympy/assumptions/ask.py\n+++ b/sympy/assumptions/ask.py\n@@ -1481,6 +1481,7 @@ def get_known_facts():\n         Equivalent(Q.extended_real, Q.real | Q.infinite),\n         Equivalent(Q.even | Q.odd, Q.integer),\n         Implies(Q.even, ~Q.odd),\n+        Implies(Q.even, Q.finite),\n         Equivalent(Q.prime, Q.integer & Q.positive & ~Q.composite),\n         Implies(Q.integer, Q.rational),\n         Implies(Q.rational, Q.algebraic),\n"}, "success": true, "processing_time": 266.1835992336273, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-16766", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex a3f0310735..a284707d60 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -357,6 +357,10 @@ def _print_Not(self, expr):\n         PREC = precedence(expr)\n         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n \n+    def _print_Indexed(self, expr):\n+        base, *index = expr.args\n+        return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\n"}, "success": true, "processing_time": 218.20982575416565, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-17139", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/simplify/fu.py b/sympy/simplify/fu.py\nindex ad1130ef96..c2640a34b9 100644\n--- a/sympy/simplify/fu.py\n+++ b/sympy/simplify/fu.py\n@@ -501,6 +501,9 @@ def _f(rv):\n         if not (rv.is_Pow and rv.base.func == f):\n             return rv\n \n+        # Check if exponent is real before attempting comparisons\n+        if not rv.exp.is_real:\n+            return rv\n         if (rv.exp < 0) == True:\n             return rv\n         if (rv.exp > max) == True:\n"}, "success": true, "processing_time": 137.77728152275085, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-17655", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..d7c6190289 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -283,6 +283,14 @@ def __neg__(self):\n         coords = [-x for x in self.args]\n         return Point(coords, evaluate=False)\n \n+    def __rmul__(self, factor):\n+        \"\"\"Multiply point's coordinates by a factor (reverse multiplication).\n+        \n+        This handles cases where the factor is on the left side of the multiplication,\n+        e.g., factor * point, by delegating to the regular multiplication method.\n+        \"\"\"\n+        return self.__mul__(factor)\n+\n     def __sub__(self, other):\n         \"\"\"Subtract two points, or subtract a factor from this point's\n         coordinates.\"\"\"\n"}, "success": true, "processing_time": 230.8800015449524, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-18211", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/solvers/solveset.py b/sympy/solvers/solveset.py\nindex 445be3e0e8..66117c100b 100644\n--- a/sympy/solvers/solveset.py\n+++ b/sympy/solvers/solveset.py\n@@ -540,9 +540,9 @@ def _solve_trig(f, symbol, domain):\n     else:\n         sol = sol1\n     if sol is None:\n-        raise NotImplementedError(filldedent('''\n-            Solution to this kind of trigonometric equations\n-            is yet to be implemented'''))\n+        from sympy.sets.conditionset import ConditionSet\n+        from sympy import Eq\n+        return ConditionSet(symbol, Eq(f, 0), domain)\n     return sol\n \n \n"}, "success": true, "processing_time": 354.1380033493042, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-19495", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 118eda6f77..c8c70929d9 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -243,7 +243,7 @@ def _eval_subs(self, old, new):\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n         if cond is S.true:\n-            return ConditionSet(new, Contains(new, base), base)\n+            return base\n         return self.func(self.sym, cond, base)\n \n     def dummy_eq(self, other, symbol=None):\n"}, "success": true, "processing_time": 199.78839468955994, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-19637", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex a3f1ce2851..4266773dff 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -513,7 +513,7 @@ def kernS(s):\n             while kern in s:\n                 kern += choice(string.ascii_letters + string.digits)\n             s = s.replace(' ', kern)\n-        hit = kern in s\n+            hit = kern in s\n \n     for i in range(2):\n         try:\n"}, "success": true, "processing_time": 154.92441987991333, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-19954", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex de94ddabb4..fac6cb612e 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2194,18 +2194,18 @@ def _number_blocks(blocks):\n                 # check if the system is minimal with\n                 # respect to the already discovere ones\n                 minimal = True\n-                to_remove = []\n+                to_remove_indices = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        to_remove_indices.append(i)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n-                # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                # remove non-minimal block systems in reverse order to avoid index shifting\n+                for i in reversed(to_remove_indices):\n+                    del num_blocks[i], blocks[i], rep_blocks[i]\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n"}, "success": true, "processing_time": 315.5440664291382, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-20154", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex dd36dea304..3e46d5bf16 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -1802,9 +1802,9 @@ def partitions(n, m=None, k=None, size=False):\n         keys.append(r)\n     room = m - q - bool(r)\n     if size:\n-        yield sum(ms.values()), ms\n+        yield sum(ms.values()), ms.copy()\n     else:\n-        yield ms\n+        yield ms.copy()\n \n     while keys != [1]:\n         # Reuse any 1's.\n@@ -1842,9 +1842,9 @@ def partitions(n, m=None, k=None, size=False):\n             break\n         room -= need\n         if size:\n-            yield sum(ms.values()), ms\n+            yield sum(ms.values()), ms.copy()\n         else:\n-            yield ms\n+            yield ms.copy()\n \n \n def ordered_partitions(n, m=None, sort=True):\n"}, "success": true, "processing_time": 162.47191309928894, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-20916", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/printing/conventions.py b/sympy/printing/conventions.py\nindex 9a3be6bbe9..58a440a654 100644\n--- a/sympy/printing/conventions.py\n+++ b/sympy/printing/conventions.py\n@@ -62,10 +62,22 @@ def split_super_sub(text):\n \n     # make a little exception when a name ends with digits, i.e. treat them\n     # as a subscript too.\n+    from sympy.core.alphabets import greeks\n+    \n+    # First try the original pattern for ASCII letters\n     m = _name_with_digits_p.match(name)\n     if m:\n         name, sub = m.groups()\n         subs.insert(0, sub)\n+    else:\n+        # Check if it's a Greek letter name followed by digits\n+        for greek in greeks:\n+            if name.startswith(greek) and len(name) > len(greek):\n+                suffix = name[len(greek):]\n+                if suffix.isdigit():\n+                    name = greek\n+                    subs.insert(0, suffix)\n+                    break\n \n     return name, supers, subs\n \n"}, "success": true, "processing_time": 359.56388306617737, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-21612", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py\nindex 2e4a45ad20..1dec625960 100644\n--- a/sympy/parsing/latex/_parse_latex_antlr.py\n+++ b/sympy/parsing/latex/_parse_latex_antlr.py\n@@ -386,6 +386,8 @@ def convert_frac(frac):\n     if expr_top == 1:\n         return inverse_denom\n     else:\n+        # Use Mul with evaluate=False to preserve the fraction structure\n+        # This ensures proper precedence for nested fractions\n         return sympy.Mul(expr_top, inverse_denom, evaluate=False)\n \n def convert_binom(binom):\n"}, "success": true, "processing_time": 318.8541581630707, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-21847", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403307..d2cd3451e5 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -127,7 +127,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if sum(powers.values()) >= min_degree:\n                     monomials_list_comm.append(Mul(*item))\n             yield from set(monomials_list_comm)\n         else:\n@@ -139,7 +139,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if sum(powers.values()) >= min_degree:\n                     monomials_list_non_comm.append(Mul(*item))\n             yield from set(monomials_list_non_comm)\n     else:\n"}, "success": true, "processing_time": 195.78568077087402, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-22080", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 288.9275267124176, "attempts": 3, "error": "run_single failed for sympy__sympy-22080: Task sympy__sympy-22080 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task sympy__sympy-22080 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "sympy__sympy-22914", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 114.23465657234192, "attempts": 3, "error": "run_single failed for sympy__sympy-22914: Task sympy__sympy-22914 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task sympy__sympy-22914 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "sympy__sympy-23262", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 115.32835698127747, "attempts": 3, "error": "run_single failed for sympy__sympy-23262: Task sympy__sympy-23262 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task sympy__sympy-23262 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "sympy__sympy-23824", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 121.48223090171814, "attempts": 3, "error": "run_single failed for sympy__sympy-23824: Task sympy__sympy-23824 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task sympy__sympy-23824 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "sympy__sympy-24443", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 99.64454531669617, "attempts": 3, "error": "run_single failed for sympy__sympy-24443: Task sympy__sympy-24443 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task sympy__sympy-24443 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "sympy__sympy-24539", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 101.09726524353027, "attempts": 3, "error": "run_single failed for sympy__sympy-24539: Task sympy__sympy-24539 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task sympy__sympy-24539 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "sympy__sympy-24661", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 100.57221055030823, "attempts": 3, "error": "run_single failed for sympy__sympy-24661: Task sympy__sympy-24661 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task sympy__sympy-24661 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "ytdl-org__youtube-dl-32987", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 43.68865489959717, "attempts": 3, "error": "run_single failed for ytdl-org__youtube-dl-32987: Task ytdl-org__youtube-dl-32987 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task ytdl-org__youtube-dl-32987 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "ytdl-org__youtube-dl-32845", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 43.843698501586914, "attempts": 3, "error": "run_single failed for ytdl-org__youtube-dl-32845: Task ytdl-org__youtube-dl-32845 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task ytdl-org__youtube-dl-32845 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "ytdl-org__youtube-dl-32741", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 43.42587876319885, "attempts": 3, "error": "run_single failed for ytdl-org__youtube-dl-32741: Task ytdl-org__youtube-dl-32741 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task ytdl-org__youtube-dl-32741 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "ytdl-org__youtube-dl-32725", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 45.08847212791443, "attempts": 3, "error": "run_single failed for ytdl-org__youtube-dl-32725: Task ytdl-org__youtube-dl-32725 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task ytdl-org__youtube-dl-32725 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "ytdl-org__youtube-dl-31235", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 42.632588386535645, "attempts": 3, "error": "run_single failed for ytdl-org__youtube-dl-31235: Task ytdl-org__youtube-dl-31235 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task ytdl-org__youtube-dl-31235 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "ytdl-org__youtube-dl-31182", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 49.623669385910034, "attempts": 3, "error": "run_single failed for ytdl-org__youtube-dl-31182: Task ytdl-org__youtube-dl-31182 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task ytdl-org__youtube-dl-31182 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "ytdl-org__youtube-dl-30582", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 42.5917432308197, "attempts": 3, "error": "run_single failed for ytdl-org__youtube-dl-30582: Task ytdl-org__youtube-dl-30582 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task ytdl-org__youtube-dl-30582 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "ytdl-org__youtube-dl-29698", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 41.667126178741455, "attempts": 3, "error": "run_single failed for ytdl-org__youtube-dl-29698: Task ytdl-org__youtube-dl-29698 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task ytdl-org__youtube-dl-29698 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "ytdl-org__youtube-dl-28801", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 43.35249042510986, "attempts": 3, "error": "run_single failed for ytdl-org__youtube-dl-28801: Task ytdl-org__youtube-dl-28801 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task ytdl-org__youtube-dl-28801 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "ytdl-org__youtube-dl-23199", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 42.07143044471741, "attempts": 3, "error": "run_single failed for ytdl-org__youtube-dl-23199: Task ytdl-org__youtube-dl-23199 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task ytdl-org__youtube-dl-23199 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-6388", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.550190925598145, "attempts": 3, "error": "run_single failed for scrapy__scrapy-6388: Task scrapy__scrapy-6388 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-6388 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5950", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.880188703536987, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5950: Task scrapy__scrapy-5950 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5950 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-6050", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.209641933441162, "attempts": 3, "error": "run_single failed for scrapy__scrapy-6050: Task scrapy__scrapy-6050 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-6050 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-6013", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.588265419006348, "attempts": 3, "error": "run_single failed for scrapy__scrapy-6013: Task scrapy__scrapy-6013 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-6013 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5993", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.231098413467407, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5993: Task scrapy__scrapy-5993 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5993 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5952", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 28.02971053123474, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5952: Task scrapy__scrapy-5952 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5952 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5929", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.86845350265503, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5929: Task scrapy__scrapy-5929 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5929 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5917", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.500078201293945, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5917: Task scrapy__scrapy-5917 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5917 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5847", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 26.962870359420776, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5847: Task scrapy__scrapy-5847 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5847 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5833", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.40099596977234, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5833: Task scrapy__scrapy-5833 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5833 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5808", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 26.717395067214966, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5808: Task scrapy__scrapy-5808 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5808 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5689", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.260796070098877, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5689: Task scrapy__scrapy-5689 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5689 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5611", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.639971256256104, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5611: Task scrapy__scrapy-5611 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5611 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5581", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 29.161068439483643, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5581: Task scrapy__scrapy-5581 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5581 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5526", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 28.958109378814697, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5526: Task scrapy__scrapy-5526 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5526 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-6542", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.075271606445312, "attempts": 3, "error": "run_single failed for scrapy__scrapy-6542: Task scrapy__scrapy-6542 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-6542 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-6540", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 28.347933053970337, "attempts": 3, "error": "run_single failed for scrapy__scrapy-6540: Task scrapy__scrapy-6540 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-6540 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-6469", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 28.79484796524048, "attempts": 3, "error": "run_single failed for scrapy__scrapy-6469: Task scrapy__scrapy-6469 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-6469 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-6368", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.1933913230896, "attempts": 3, "error": "run_single failed for scrapy__scrapy-6368: Task scrapy__scrapy-6368 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-6368 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-6352", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 29.24130606651306, "attempts": 3, "error": "run_single failed for scrapy__scrapy-6352: Task scrapy__scrapy-6352 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-6352 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-6151", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.879918575286865, "attempts": 3, "error": "run_single failed for scrapy__scrapy-6151: Task scrapy__scrapy-6151 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-6151 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "scrapy__scrapy-5320", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 27.76343584060669, "attempts": 3, "error": "run_single failed for scrapy__scrapy-5320: Task scrapy__scrapy-5320 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task scrapy__scrapy-5320 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "keras-team__keras-20380", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 47.26427674293518, "attempts": 3, "error": "run_single failed for keras-team__keras-20380: Task keras-team__keras-20380 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task keras-team__keras-20380 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "keras-team__keras-20733", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 48.24966502189636, "attempts": 3, "error": "run_single failed for keras-team__keras-20733: Task keras-team__keras-20733 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task keras-team__keras-20733 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "camel-ai__camel-1627", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 61.38655138015747, "attempts": 3, "error": "run_single failed for camel-ai__camel-1627: Task camel-ai__camel-1627 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task camel-ai__camel-1627 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "camel-ai__camel-1363", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 60.192811012268066, "attempts": 3, "error": "run_single failed for camel-ai__camel-1363: Task camel-ai__camel-1363 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task camel-ai__camel-1363 not found in any ACR output directory. ACR may have failed silently.\n"}
{"instance_id": "fastapi__fastapi-1524", "mode": "codereview", "model_name": "openrouter/anthropic/claude-sonnet-4", "patch_saved": false, "patch_content": null, "success": false, "processing_time": 38.76242113113403, "attempts": 3, "error": "run_single failed for fastapi__fastapi-1524: Task fastapi__fastapi-1524 not found in any ACR output directory. ACR may have failed silently.\nTraceback (most recent call last):\n  File \"/home/cbb89/codearena/codearena/OmniCode/baselines/AutoCodeRover/acr_runner.py\", line 818, in run_single\n    raise Exception(f\"Task {task_id} not found in any ACR output directory. ACR may have failed silently.\")\nException: Task fastapi__fastapi-1524 not found in any ACR output directory. ACR may have failed silently.\n"}
