{
  "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex f269d9e17f..b7169244b5 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -979,6 +979,7 @@ class ForeignKey(ForeignObject):\n             'form_class': forms.ModelChoiceField,\n             'queryset': self.remote_field.model._default_manager.using(using),\n             'to_field_name': self.remote_field.field_name,\n+            'blank': self.blank,\n             **kwargs,\n         })\n \ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex dafc11f995..ded74905f2 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1184,7 +1184,7 @@ class ModelChoiceField(ChoiceField):\n     def __init__(self, queryset, *, empty_label=\"---------\",\n                  required=True, widget=None, label=None, initial=None,\n                  help_text='', to_field_name=None, limit_choices_to=None,\n-                 **kwargs):\n+                 blank=True, **kwargs):\n         if required and (initial is not None):\n             self.empty_label = None\n         else:\n@@ -1196,6 +1196,11 @@ class ModelChoiceField(ChoiceField):\n             self, required=required, widget=widget, label=label,\n             initial=initial, help_text=help_text, **kwargs\n         )\n+        \n+        # If blank=False and widget is RadioSelect, don't show empty label\n+        if not blank and isinstance(self.widget, RadioSelect):\n+            self.empty_label = None\n+            \n         self.queryset = queryset\n         self.limit_choices_to = limit_choices_to   # limit the queryset later.\n         self.to_field_name = to_field_name\n"
}