{
  "patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 4f0290a4..7e013fd9 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -1626,11 +1626,15 @@ class Plotter:\n                 self._figure.legends.append(legend)\n \n     def _finalize_figure(self, p: Plot) -> None:\n+        from seaborn._core.scales import Nominal\n \n         for sub in self._subplots:\n             ax = sub[\"ax\"]\n             for axis in \"xy\":\n                 axis_key = sub[axis]\n+                \n+                # Check if this axis uses a Nominal scale\n+                is_nominal = axis_key in self._scales and isinstance(self._scales[axis_key], Nominal)\n \n                 # Axis limits\n                 if axis_key in p._limits:\n@@ -1638,11 +1642,27 @@ class Plotter:\n                     a, b = p._limits[axis_key]\n                     lo = a if a is None else convert_units(a)\n                     hi = b if b is None else convert_units(b)\n-                    if isinstance(a, str):\n+                    # Apply +/- 0.5 margin for string limits or Nominal scales\n+                    if isinstance(a, str) or is_nominal:\n                         lo = cast(float, lo) - 0.5\n-                    if isinstance(b, str):\n+                    if isinstance(b, str) or is_nominal:\n                         hi = cast(float, hi) + 0.5\n                     ax.set(**{f\"{axis}lim\": (lo, hi)})\n+                elif is_nominal:\n+                    # Apply default +/- 0.5 margin for Nominal scales when no explicit limits\n+                    axis_obj = getattr(ax, f\"{axis}axis\")\n+                    data_lims = axis_obj.get_data_interval()\n+                    if len(data_lims) == 2 and not (data_lims[0] == data_lims[1] == 0):\n+                        lo, hi = data_lims\n+                        ax.set(**{f\"{axis}lim\": (lo - 0.5, hi + 0.5)})\n+\n+                # Suppress grid for Nominal scales\n+                if is_nominal:\n+                    ax.grid(False, axis=axis)\n+                \n+                # Invert y-axis for Nominal scales\n+                if is_nominal and axis == \"y\":\n+                    ax.invert_yaxis()\n \n         engine_default = None if p._target is not None else \"tight\"\n         layout_engine = p._layout_spec.get(\"engine\", engine_default)\n"
}