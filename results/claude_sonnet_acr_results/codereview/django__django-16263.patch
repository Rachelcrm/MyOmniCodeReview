{
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9735ce10c8..7c69b74d56 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -550,8 +550,66 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        \n+        # Optimize by removing unused annotations\n+        if obj.annotations:\n+            used_annotations = set()\n+            \n+            # Find annotations used in WHERE clause\n+            for child in obj.where.children:\n+                used_annotations.update(self._get_annotation_refs_from_expr(child))\n+            \n+            # Find annotations used in ORDER BY clause\n+            for order_expr in obj.order_by:\n+                if hasattr(order_expr, 'expression'):\n+                    used_annotations.update(self._get_annotation_refs_from_expr(order_expr.expression))\n+                elif isinstance(order_expr, str):\n+                    # Handle string-based ordering like 'field_name' or '-field_name'\n+                    field_name = order_expr.lstrip('-')\n+                    if field_name in obj.annotations:\n+                        used_annotations.add(field_name)\n+            \n+            # Find annotations used by other annotations (transitive dependencies)\n+            changed = True\n+            while changed:\n+                changed = False\n+                for alias, annotation in obj.annotations.items():\n+                    if alias in used_annotations:\n+                        refs = self._get_annotation_refs_from_expr(annotation)\n+                        new_refs = refs - used_annotations\n+                        if new_refs:\n+                            used_annotations.update(new_refs)\n+                            changed = True\n+            \n+            # Remove unused annotations\n+            unused_annotations = set(obj.annotations.keys()) - used_annotations\n+            for alias in unused_annotations:\n+                del obj.annotations[alias]\n+                if obj.annotation_select_mask is not None and alias in obj.annotation_select_mask:\n+                    obj.annotation_select_mask.discard(alias)\n+            \n+            # Clear annotation select cache since we modified annotations\n+            obj._annotation_select_cache = None\n+        \n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n+    \n+    def _get_annotation_refs_from_expr(self, expr):\n+        \"\"\"\n+        Extract annotation references from an expression.\n+        \"\"\"\n+        refs = set()\n+        if hasattr(expr, 'get_source_expressions'):\n+            for source_expr in expr.get_source_expressions():\n+                refs.update(self._get_annotation_refs_from_expr(source_expr))\n+        elif hasattr(expr, 'refs') and expr.refs in self.annotations:\n+            # This is a Ref to an annotation\n+            refs.add(expr.refs)\n+        elif hasattr(expr, 'children'):\n+            # Handle WhereNode and similar containers\n+            for child in expr.children:\n+                refs.update(self._get_annotation_refs_from_expr(child))\n+        return refs\n \n     def has_filters(self):\n         return self.where\n"
}