{
  "patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex af8cfd86b5..1c50959009 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -1,3 +1,4 @@\n+import datetime\n import uuid\n \n from django.conf import settings\n@@ -298,6 +299,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n                 converters.append(self.convert_datetimefield_value)\n         elif internal_type == 'UUIDField':\n             converters.append(self.convert_uuidfield_value)\n+        elif internal_type == 'DurationField':\n+            converters.append(self.convert_durationfield_value)\n         return converters\n \n     def convert_booleanfield_value(self, value, expression, connection):\n@@ -315,6 +318,12 @@ class DatabaseOperations(BaseDatabaseOperations):\n             value = uuid.UUID(value)\n         return value\n \n+    def convert_durationfield_value(self, value, expression, connection):\n+        if value is not None:\n+            # MySQL stores duration as microseconds\n+            return datetime.timedelta(microseconds=int(value))\n+        return value\n+\n     def binary_placeholder_sql(self, value):\n         return '_binary %s' if value is not None and not hasattr(value, 'as_sql') else '%s'\n \ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex 9510b5edd9..a7a3e3b994 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -273,6 +273,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n             converters.append(self.get_decimalfield_converter(expression))\n         elif internal_type == 'UUIDField':\n             converters.append(self.convert_uuidfield_value)\n+        elif internal_type == 'DurationField':\n+            converters.append(self.convert_durationfield_value)\n         elif internal_type in ('NullBooleanField', 'BooleanField'):\n             converters.append(self.convert_booleanfield_value)\n         return converters\n@@ -321,6 +323,12 @@ class DatabaseOperations(BaseDatabaseOperations):\n     def convert_booleanfield_value(self, value, expression, connection):\n         return bool(value) if value in (1, 0) else value\n \n+    def convert_durationfield_value(self, value, expression, connection):\n+        if value is not None:\n+            # SQLite stores duration as microseconds\n+            return datetime.timedelta(microseconds=int(value))\n+        return value\n+\n     def bulk_insert_sql(self, fields, placeholder_rows):\n         return \" UNION ALL \".join(\n             \"SELECT %s\" % \", \".join(row)\n"
}