{
  "patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex d5aa968400..4872ce95d8 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -377,6 +377,22 @@ class ReverseOneToOneDescriptor:\n         # we must manage the reverse relation cache manually.\n         for rel_obj in queryset:\n             instance = instances_dict[rel_obj_attr(rel_obj)]\n+            # If the instance has deferred fields that were actually fetched\n+            # by the queryset, create a copy with the correct deferred fields state\n+            if hasattr(instance, '_state') and instance._state.deferred_fields:\n+                # Get the fields that were actually fetched by this queryset\n+                if hasattr(queryset, '_fields') and queryset._fields is not None:\n+                    # Create a copy of the instance with updated deferred fields\n+                    fetched_fields = set(queryset._fields)\n+                    # Only keep deferred fields that weren't fetched by this queryset\n+                    new_deferred_fields = instance._state.deferred_fields - fetched_fields\n+                    if new_deferred_fields != instance._state.deferred_fields:\n+                        # Create a copy of the instance with correct deferred fields\n+                        from copy import copy\n+                        instance_copy = copy(instance)\n+                        instance_copy._state = copy(instance._state)\n+                        instance_copy._state.deferred_fields = new_deferred_fields\n+                        instance = instance_copy\n             self.related.field.set_cached_value(rel_obj, instance)\n         return queryset, rel_obj_attr, instance_attr, True, self.related.get_cache_name(), False\n \n"
}