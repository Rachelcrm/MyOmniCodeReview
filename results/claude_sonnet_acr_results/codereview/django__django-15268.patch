{
  "patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..4c442c7f8a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -31,6 +31,13 @@ class ModelOperation(Operation):\n     def references_model(self, name, app_label):\n         return name.lower() == self.name_lower\n \n+    def can_reduce_through(self, operation, app_label):\n+        \"\"\"\n+        Return True if this operation can be reduced through the given operation.\n+        This allows non-consecutive operations to be optimized together.\n+        \"\"\"\n+        return False\n+\n     def reduce(self, operation, app_label):\n         return (\n             super().reduce(operation, app_label) or\n@@ -521,6 +528,23 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n             )\n         )\n \n+    def can_reduce_through(self, operation, app_label):\n+        \"\"\"\n+        Allow reduction through other AlterTogetherOptionOperation of the same type\n+        on the same model.\n+        \"\"\"\n+        return (\n+            isinstance(operation, AlterTogetherOptionOperation) and\n+            type(self) == type(operation) and\n+            self.name_lower == operation.name_lower\n+        )\n+\n+    def reduce(self, operation, app_label):\n+        if (type(self) == type(operation) and \n+            self.name_lower == operation.name_lower):\n+            return [operation]\n+        return super().reduce(operation, app_label)\n+\n     def describe(self):\n         return \"Alter %s for %s (%s constraint(s))\" % (self.option_name, self.name, len(self.option_value or ''))\n \n"
}