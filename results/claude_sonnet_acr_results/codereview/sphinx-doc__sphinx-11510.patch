{
  "patch": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..42b40e00e 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -376,7 +376,47 @@ class Include(BaseInclude, SphinxDirective):\n         rel_filename, filename = self.env.relfn2path(self.arguments[0])\n         self.arguments[0] = filename\n         self.env.note_included(filename)\n-        return super().run()\n+        \n+        # Read the included file and emit source-read event\n+        try:\n+            with open(filename, 'r', encoding='utf-8') as f:\n+                content = f.read()\n+        except (OSError, UnicodeDecodeError) as err:\n+            raise self.severe(f'Problems with \"{filename}\" directive:\\n{err}')\n+        \n+        # Create a docname for the included file (relative path without extension)\n+        docname = rel_filename\n+        if docname.endswith('.rst'):\n+            docname = docname[:-4]\n+        elif docname.endswith('.txt'):\n+            docname = docname[:-4]\n+        \n+        # Emit source-read event to allow extensions to modify the content\n+        content_list = [content]\n+        self.env.app.emit('source-read', docname, content_list)\n+        processed_content = content_list[0]\n+        \n+        # Create a temporary StringInput with the processed content\n+        from docutils.io import StringInput\n+        original_source = self.state.document.settings.env.temp_data.get('include_source_backup')\n+        self.state.document.settings.env.temp_data['include_source_backup'] = self.state.document.current_source\n+        \n+        # Temporarily replace the source with our processed content\n+        temp_input = StringInput(source=processed_content, source_path=filename)\n+        original_input = self.state.document.current_source\n+        self.state.document.current_source = temp_input\n+        \n+        try:\n+            result = super().run()\n+        finally:\n+            # Restore original source\n+            self.state.document.current_source = original_input\n+            if original_source is not None:\n+                self.state.document.settings.env.temp_data['include_source_backup'] = original_source\n+            else:\n+                self.state.document.settings.env.temp_data.pop('include_source_backup', None)\n+        \n+        return result\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\n"
}