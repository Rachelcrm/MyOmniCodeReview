{
  "patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..7cb7b7252c 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -33,11 +33,15 @@ def _multi_decorate(decorators, method):\n         decorators = [decorators]\n \n     def _wrapper(self, *args, **kwargs):\n-        # bound_method has the signature that 'decorator' expects i.e. no\n-        # 'self' argument, but it's a closure over self so it can call\n-        # 'func'. Also, wrap method.__get__() in a function because new\n-        # attributes can't be set on bound method objects, only on functions.\n-        bound_method = partial(method.__get__(self, type(self)))\n+        # Create a proper function wrapper instead of using partial to ensure\n+        # it has the necessary function attributes that decorators expect\n+        def bound_method(*args, **kwargs):\n+            return method.__get__(self, type(self))(*args, **kwargs)\n+        \n+        # Copy function attributes from the original method to the bound_method\n+        # so decorators can access __name__, __module__, etc.\n+        update_wrapper(bound_method, method)\n+        \n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n"
}