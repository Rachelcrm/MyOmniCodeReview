{
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex aaf35ee37c..ef80f8b61c 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -174,6 +174,8 @@ class Query(BaseExpression):\n         self.used_aliases = set()\n         self.filter_is_sticky = False\n         self.subquery = False\n+        # Set of aliases to avoid when generating new aliases during query combination\n+        self._avoid_aliases = None\n \n         # SQL-related attributes\n         # Select and related select clauses are expressions to use in the\n@@ -596,6 +598,11 @@ class Query(BaseExpression):\n         joinpromoter.add_votes(\n             j for j in self.alias_map if self.alias_map[j].join_type == INNER)\n         rhs_votes = set()\n+        \n+        # Collect all RHS aliases to avoid conflicts during alias generation\n+        rhs_aliases = set(rhs.alias_map.keys())\n+        self._avoid_aliases = rhs_aliases\n+        \n         # Now, add the joins from rhs query into the new query (skipping base\n         # table).\n         rhs_tables = list(rhs.alias_map)[1:]\n@@ -621,6 +628,9 @@ class Query(BaseExpression):\n                 self.unref_alias(new_alias)\n         joinpromoter.add_votes(rhs_votes)\n         joinpromoter.update_join_types(self)\n+        \n+        # Clear the avoid_aliases after processing joins\n+        self._avoid_aliases = None\n \n         # Combine subqueries aliases to ensure aliases relabelling properly\n         # handle subqueries when combining where and select clauses.\n@@ -761,7 +771,16 @@ class Query(BaseExpression):\n \n         # Create a new alias for this table.\n         if alias_list:\n-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            # Generate alias avoiding conflicts with existing aliases and avoid_aliases\n+            counter = len(self.alias_map) + 1\n+            avoid_aliases = self._avoid_aliases or set()\n+            while True:\n+                alias = '%s%d' % (self.alias_prefix, counter)\n+                if (alias not in self.alias_map and \n+                    alias not in avoid_aliases and\n+                    alias not in [a for aliases in self.table_map.values() for a in aliases]):\n+                    break\n+                counter += 1\n             alias_list.append(alias)\n         else:\n             # The first occurrence of a table uses the table name directly.\n"
}