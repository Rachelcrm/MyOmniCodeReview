{
  "patch": "diff --git a/django/views/generic/base.py b/django/views/generic/base.py\nindex ea5baca08d..45cd2e9b36 100644\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -168,17 +168,25 @@ class TemplateView(TemplateResponseMixin, ContextMixin, View):\n def _wrap_url_kwargs_with_deprecation_warning(url_kwargs):\n     context_kwargs = {}\n     for key, value in url_kwargs.items():\n-        # Bind into function closure.\n-        @SimpleLazyObject\n-        def access_value(key=key, value=value):\n-            warnings.warn(\n-                'TemplateView passing URL kwargs to the context is '\n-                'deprecated. Reference %s in your template through '\n-                'view.kwargs instead.' % key,\n-                RemovedInDjango40Warning, stacklevel=2,\n-            )\n-            return value\n-        context_kwargs[key] = access_value\n+        # Create a class that properly handles the lazy evaluation\n+        class DeprecatedValue:\n+            def __init__(self, key, value):\n+                self.key = key\n+                self.value = value\n+                self._warned = False\n+            \n+            def __call__(self):\n+                if not self._warned:\n+                    warnings.warn(\n+                        'TemplateView passing URL kwargs to the context is '\n+                        'deprecated. Reference %s in your template through '\n+                        'view.kwargs instead.' % self.key,\n+                        RemovedInDjango40Warning, stacklevel=2,\n+                    )\n+                    self._warned = True\n+                return self.value\n+        \n+        context_kwargs[key] = SimpleLazyObject(DeprecatedValue(key, value))\n     return context_kwargs\n \n \n"
}