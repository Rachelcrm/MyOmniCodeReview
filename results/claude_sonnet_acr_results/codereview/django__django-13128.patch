{
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d913658291..69af66c972 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -151,6 +151,144 @@ class Combinable:\n \n \n @deconstructible\n+class CombinedExpression(BaseExpression):\n+    \"\"\"\n+    Expression that combines two expressions with a connector (e.g., +, -, *, /).\n+    \"\"\"\n+    \n+    def __init__(self, lhs, connector, rhs, output_field=None):\n+        super().__init__(output_field)\n+        self.connector = connector\n+        self.lhs = lhs\n+        self.rhs = rhs\n+\n+    def __repr__(self):\n+        return \"<%s: %s>\" % (self.__class__.__name__, self)\n+\n+    def __str__(self):\n+        return \"%s %s %s\" % (self.lhs, self.connector, self.rhs)\n+\n+    def get_source_expressions(self):\n+        return [self.lhs, self.rhs]\n+\n+    def set_source_expressions(self, exprs):\n+        self.lhs, self.rhs = exprs\n+\n+    def as_sql(self, compiler, connection):\n+        try:\n+            lhs_output = self.lhs.output_field\n+        except FieldError:\n+            lhs_output = None\n+        try:\n+            rhs_output = self.rhs.output_field\n+        except FieldError:\n+            rhs_output = None\n+        if (not connection.features.has_native_duration_field and\n+                ((lhs_output and lhs_output.get_internal_type() == 'DurationField') or\n+                 (rhs_output and rhs_output.get_internal_type() == 'DurationField'))):\n+            return connection.ops.combine_duration_expression(self.connector, self.as_sql(compiler, connection))\n+        return connection.ops.combine_expression(self.connector, self.as_sql(compiler, connection))\n+\n+    def _resolve_output_field(self):\n+        from django.db import models\n+        \n+        # Get the output fields of the operands\n+        try:\n+            lhs_field = self.lhs.output_field\n+        except FieldError:\n+            lhs_field = None\n+        try:\n+            rhs_field = self.rhs.output_field\n+        except FieldError:\n+            rhs_field = None\n+            \n+        if lhs_field is None or rhs_field is None:\n+            return super()._resolve_output_field()\n+            \n+        # Handle temporal arithmetic\n+        if self.connector == '-':\n+            # DateTimeField - DateTimeField = DurationField\n+            if isinstance(lhs_field, models.DateTimeField) and isinstance(rhs_field, models.DateTimeField):\n+                return models.DurationField()\n+            # DateTimeField - DurationField = DateTimeField\n+            elif isinstance(lhs_field, models.DateTimeField) and isinstance(rhs_field, models.DurationField):\n+                return models.DateTimeField()\n+        elif self.connector == '+':\n+            # DateTimeField + DurationField = DateTimeField\n+            if isinstance(lhs_field, models.DateTimeField) and isinstance(rhs_field, models.DurationField):\n+                return models.DateTimeField()\n+            # DurationField + DateTimeField = DateTimeField\n+            elif isinstance(lhs_field, models.DurationField) and isinstance(rhs_field, models.DateTimeField):\n+                return models.DateTimeField()\n+                \n+        # Fall back to parent behavior for non-temporal operations\n+        return super()._resolve_output_field()\n+\n+\n+class CombinedExpression(BaseExpression):\n+    \"\"\"\n+    Expression that combines two expressions with a connector (e.g., +, -, *, /).\n+    \"\"\"\n+    \n+    def __init__(self, lhs, connector, rhs, output_field=None):\n+        super().__init__(output_field)\n+        self.connector = connector\n+        self.lhs = lhs\n+        self.rhs = rhs\n+\n+    def __repr__(self):\n+        return \"<%s: %s>\" % (self.__class__.__name__, self)\n+\n+    def __str__(self):\n+        return \"%s %s %s\" % (self.lhs, self.connector, self.rhs)\n+\n+    def get_source_expressions(self):\n+        return [self.lhs, self.rhs]\n+\n+    def set_source_expressions(self, exprs):\n+        self.lhs, self.rhs = exprs\n+\n+    def as_sql(self, compiler, connection):\n+        lhs_sql, lhs_params = compiler.compile(self.lhs)\n+        rhs_sql, rhs_params = compiler.compile(self.rhs)\n+        return '(%s %s %s)' % (lhs_sql, self.connector, rhs_sql), lhs_params + rhs_params\n+\n+    def _resolve_output_field(self):\n+        from django.db import models\n+        \n+        # Get the output fields of the operands\n+        try:\n+            lhs_field = self.lhs.output_field\n+        except FieldError:\n+            lhs_field = None\n+        try:\n+            rhs_field = self.rhs.output_field\n+        except FieldError:\n+            rhs_field = None\n+            \n+        if lhs_field is None or rhs_field is None:\n+            return super()._resolve_output_field()\n+            \n+        # Handle temporal arithmetic\n+        if self.connector == '-':\n+            # DateTimeField - DateTimeField = DurationField\n+            if isinstance(lhs_field, models.DateTimeField) and isinstance(rhs_field, models.DateTimeField):\n+                return models.DurationField()\n+            # DateTimeField - DurationField = DateTimeField\n+            elif isinstance(lhs_field, models.DateTimeField) and isinstance(rhs_field, models.DurationField):\n+                return models.DateTimeField()\n+        elif self.connector == '+':\n+            # DateTimeField + DurationField = DateTimeField\n+            if isinstance(lhs_field, models.DateTimeField) and isinstance(rhs_field, models.DurationField):\n+                return models.DateTimeField()\n+            # DurationField + DateTimeField = DateTimeField\n+            elif isinstance(lhs_field, models.DurationField) and isinstance(rhs_field, models.DateTimeField):\n+                return models.DateTimeField()\n+                \n+        # Fall back to parent behavior for non-temporal operations\n+        return super()._resolve_output_field()\n+\n+\n class BaseExpression:\n     \"\"\"Base class for all query expressions.\"\"\"\n \n@@ -298,9 +436,30 @@ class BaseExpression:\n         If all sources are None, then an error is raised higher up the stack in\n         the output_field property.\n         \"\"\"\n+        from django.db import models\n+        \n         sources_iter = (source for source in self.get_source_fields() if source is not None)\n-        for output_field in sources_iter:\n-            for source in sources_iter:\n+        sources = list(sources_iter)\n+        \n+        if not sources:\n+            return None\n+            \n+        # Check if all sources are the same type\n+        first_field = sources[0]\n+        if all(isinstance(field, first_field.__class__) for field in sources):\n+            return first_field\n+            \n+        # Check for valid temporal arithmetic combinations\n+        if len(sources) == 2:\n+            field1, field2 = sources\n+            # Allow DateTimeField with DurationField combinations\n+            if (isinstance(field1, models.DateTimeField) and isinstance(field2, models.DurationField)) or \\\n+               (isinstance(field1, models.DurationField) and isinstance(field2, models.DateTimeField)):\n+                return None  # Let the specific expression class handle this\n+        \n+        # If we get here, we have mixed types that aren't valid temporal combinations\n+        for output_field in sources:\n+            for source in sources:\n                 if not isinstance(output_field, source.__class__):\n                     raise FieldError(\n                         'Expression contains mixed types: %s, %s. You must '\n@@ -309,7 +468,7 @@ class BaseExpression:\n                             source.__class__.__name__,\n                         )\n                     )\n-            return output_field\n+        return sources[0]\n \n     @staticmethod\n     def _convert_value_noop(value, expression, connection):\n@@ -415,6 +574,24 @@ class BaseExpression:\n \n     def __hash__(self):\n         return hash(self.identity)\n+    \n+    def __add__(self, other):\n+        return CombinedExpression(self, '+', other)\n+    \n+    def __sub__(self, other):\n+        return CombinedExpression(self, '-', other)\n+    \n+    def __mul__(self, other):\n+        return CombinedExpression(self, '*', other)\n+    \n+    def __truediv__(self, other):\n+        return CombinedExpression(self, '/', other)\n+    \n+    def __mod__(self, other):\n+        return CombinedExpression(self, '%%', other)\n+    \n+    def __pow__(self, other):\n+        return CombinedExpression(self, '^', other)\n \n \n class Expression(BaseExpression, Combinable):\n"
}