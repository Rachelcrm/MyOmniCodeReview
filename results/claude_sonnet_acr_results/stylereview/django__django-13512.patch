{
  "patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 446083e659..67ca5394e6 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -21,7 +21,6 @@ UNQUOTE_RE = _lazy_re_compile('_(?:%s)' % '|'.join([x[1:] for x in UNQUOTE_MAP])\n \n class FieldIsAForeignKeyColumnName(Exception):\n     \"\"\"A field is a foreign key attname, i.e. <FK>_id.\"\"\"\n-    pass\n \n \n def lookup_needs_distinct(opts, lookup_path):\n@@ -93,7 +92,7 @@ def flatten(fields):\n def flatten_fieldsets(fieldsets):\n     \"\"\"Return a list of field names from an admin fieldsets structure.\"\"\"\n     field_names = []\n-    for name, opts in fieldsets:\n+    for _, opts in fieldsets:\n         field_names.extend(\n             flatten(opts['fields'])\n         )\n@@ -166,7 +165,7 @@ class NestedObjects(Collector):\n     def add_edge(self, source, target):\n         self.edges.setdefault(source, []).append(target)\n \n-    def collect(self, objs, source=None, source_attr=None, **kwargs):\n+    def collect(self, objs, source=None, nullable=False, collect_related=True, source_attr=None, reverse_dependency=False, keep_parents=False, fail_on_restricted=True):\n         for obj in objs:\n             if source_attr and not source_attr.endswith('+'):\n                 related_name = source_attr % {\n@@ -178,7 +177,7 @@ class NestedObjects(Collector):\n                 self.add_edge(None, obj)\n             self.model_objs[obj._meta.model].add(obj)\n         try:\n-            return super().collect(objs, source_attr=source_attr, **kwargs)\n+            return super().collect(objs, source=source, nullable=nullable, collect_related=collect_related, source_attr=source_attr, reverse_dependency=reverse_dependency, keep_parents=keep_parents, fail_on_restricted=fail_on_restricted)\n         except models.ProtectedError as e:\n             self.protected.update(e.protected_objects)\n         except models.RestrictedError as e:\n@@ -213,7 +212,7 @@ class NestedObjects(Collector):\n             roots.extend(self._nested(root, seen, format_callback))\n         return roots\n \n-    def can_fast_delete(self, *args, **kwargs):\n+    def can_fast_delete(self, *_args, **_kwargs):\n         \"\"\"\n         We always want to load the objects into memory so that we can display\n         them to the user in confirm page.\n"
}