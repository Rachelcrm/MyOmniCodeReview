{
  "patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 0fcc607bcf..d0d00784f3 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -57,7 +57,7 @@ class BaseDatabaseOperations:\n         self.connection = connection\n         self._cache = None\n \n-    def autoinc_sql(self, table, column):\n+    def autoinc_sql(self, _table, _column):\n         \"\"\"\n         Return any SQL needed to support auto-incrementing primary keys, or\n         None if no SQL is necessary.\n@@ -66,7 +66,7 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return None\n \n-    def bulk_batch_size(self, fields, objs):\n+    def bulk_batch_size(self, _fields, objs):\n         \"\"\"\n         Return the maximum allowed batch size for the backend. The fields\n         are the fields going to be inserted in the batch, the objs contains\n@@ -84,7 +84,7 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return \"SELECT cache_key FROM %s ORDER BY cache_key LIMIT 1 OFFSET %%s\"\n \n-    def unification_cast_sql(self, output_field):\n+    def unification_cast_sql(self, _output_field):\n         \"\"\"\n         Given a field instance, return the SQL that casts the result of a union\n         to that type. The resulting string should contain a '%s' placeholder\n@@ -166,7 +166,7 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return ''\n \n-    def distinct_sql(self, fields, params):\n+    def distinct_sql(self, fields, _params):\n         \"\"\"\n         Return an SQL DISTINCT clause which removes duplicate rows from the\n         result set. If any fields are given, only check the given fields for\n@@ -177,14 +177,14 @@ class BaseDatabaseOperations:\n         else:\n             return ['DISTINCT'], []\n \n-    def fetch_returned_insert_columns(self, cursor, returning_params):\n+    def fetch_returned_insert_columns(self, cursor, _returning_params):\n         \"\"\"\n         Given a cursor object that has just performed an INSERT...RETURNING\n         statement into a table, return the newly created data.\n         \"\"\"\n         return cursor.fetchone()\n \n-    def field_cast_sql(self, db_type, internal_type):\n+    def field_cast_sql(self, _db_type, _internal_type):\n         \"\"\"\n         Given a column type (e.g. 'BLOB', 'VARCHAR') and an internal type\n         (e.g. 'GenericIPAddressField'), return the SQL to cast it before using\n@@ -227,7 +227,7 @@ class BaseDatabaseOperations:\n             ('OFFSET %d' % offset) if offset else None,\n         ) if sql)\n \n-    def last_executed_query(self, cursor, sql, params):\n+    def last_executed_query(self, _cursor, sql, params):\n         \"\"\"\n         Return a string of the query last executed by the given cursor, with\n         placeholders replaced with actual values.\n@@ -249,7 +249,7 @@ class BaseDatabaseOperations:\n \n         return \"QUERY = %r - PARAMS = %r\" % (sql, u_params)\n \n-    def last_insert_id(self, cursor, table_name, pk_name):\n+    def last_insert_id(self, cursor, _table_name, _pk_name):\n         \"\"\"\n         Given a cursor object that has just performed an INSERT statement into\n         a table that has an auto-incrementing ID, return the newly created ID.\n@@ -258,7 +258,7 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return cursor.lastrowid\n \n-    def lookup_cast(self, lookup_type, internal_type=None):\n+    def lookup_cast(self, _lookup_type, _internal_type=None):\n         \"\"\"\n         Return the string to use in a query when performing lookups\n         (\"contains\", \"like\", etc.). It should contain a '%s' placeholder for\n@@ -315,13 +315,12 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return value\n \n-    def return_insert_columns(self, fields):\n+    def return_insert_columns(self, _fields):\n         \"\"\"\n         For backends that support returning columns as part of an insert query,\n         return the SQL and params to append to the INSERT query. The returned\n         fragment should contain a format string to hold the appropriate column.\n         \"\"\"\n-        pass\n \n     def compiler(self, compiler_name):\n         \"\"\"\n@@ -407,7 +406,7 @@ class BaseDatabaseOperations:\n                 for sql in sql_list:\n                     cursor.execute(sql)\n \n-    def sequence_reset_by_name_sql(self, style, sequences):\n+    def sequence_reset_by_name_sql(self, _style, _sequences):\n         \"\"\"\n         Return a list of the SQL statements required to reset sequences\n         passed in `sequences`.\n@@ -417,7 +416,7 @@ class BaseDatabaseOperations:\n         \"\"\"\n         return []\n \n-    def sequence_reset_sql(self, style, model_list):\n+    def sequence_reset_sql(self, _style, _model_list):\n         \"\"\"\n         Return a list of the SQL statements required to reset sequences for\n         the given models.\n@@ -437,7 +436,7 @@ class BaseDatabaseOperations:\n             return \"ROLLBACK;\"\n         return \"COMMIT;\"\n \n-    def tablespace_sql(self, tablespace, inline=False):\n+    def tablespace_sql(self, _tablespace, _inline=False):\n         \"\"\"\n         Return the SQL that will be used in a query to define the tablespace.\n \n"
}