{
  "patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dd154f72ee..184de6c16e 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -204,6 +204,7 @@ class AdminReadonlyField:\n         return format_html('<label{}>{}{}</label>', flatatt(attrs), capfirst(label), self.form.label_suffix)\n \n     def get_admin_url(self, remote_field, remote_obj):\n+        # pylint: disable=protected-access\n         url_name = 'admin:%s_%s_change' % (\n             remote_field.model._meta.app_label,\n             remote_field.model._meta.model_name,\n@@ -302,9 +303,10 @@ class InlineAdminFormSet:\n     def fields(self):\n         fk = getattr(self.formset, \"fk\", None)\n         empty_form = self.formset.empty_form\n+        # pylint: disable=protected-access\n         meta_labels = empty_form._meta.labels or {}\n         meta_help_texts = empty_form._meta.help_texts or {}\n-        for i, field_name in enumerate(flatten_fieldsets(self.fieldsets)):\n+        for _, field_name in enumerate(flatten_fieldsets(self.fieldsets)):\n             if fk and fk.name == field_name:\n                 continue\n             if not self.has_change_permission or field_name in self.readonly_fields:\n@@ -387,6 +389,7 @@ class InlineAdminForm(AdminForm):\n             )\n \n     def needs_explicit_pk_field(self):\n+        # pylint: disable=protected-access\n         return (\n             # Auto fields are editable, so check for auto or non-editable pk.\n             self.form._meta.model._meta.auto_field or not self.form._meta.model._meta.pk.editable or\n@@ -398,6 +401,7 @@ class InlineAdminForm(AdminForm):\n         )\n \n     def pk_field(self):\n+        # pylint: disable=protected-access\n         return AdminField(self.form, self.formset._pk_field.name, False)\n \n     def fk_field(self):\n"
}