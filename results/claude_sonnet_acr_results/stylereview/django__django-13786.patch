{
  "patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex dddf7c679c..2c7412f795 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -37,6 +37,15 @@ class ModelOperation(Operation):\n             not operation.references_model(self.name, app_label)\n         )\n \n+    def state_forwards(self, app_label, state):\n+        raise NotImplementedError('subclasses of ModelOperation must provide a state_forwards() method')\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        raise NotImplementedError('subclasses of ModelOperation must provide a database_forwards() method')\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        raise NotImplementedError('subclasses of ModelOperation must provide a database_backwards() method')\n+\n \n class CreateModel(ModelOperation):\n     \"\"\"Create a model's table.\"\"\"\n@@ -337,6 +346,7 @@ class RenameModel(ModelOperation):\n         state.reload_model(app_label, self.new_name_lower, delay=True)\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        # pylint: disable=protected-access\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n@@ -388,13 +398,22 @@ class RenameModel(ModelOperation):\n                 )\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        # Swap the names and clear cached properties\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        # Clear cached properties to force recalculation\n+        if 'old_name_lower' in self.__dict__:\n+            del self.__dict__['old_name_lower']\n+        if 'new_name_lower' in self.__dict__:\n+            del self.__dict__['new_name_lower']\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        # Swap back and clear cached properties again\n+        self.old_name, self.new_name = self.new_name, self.old_name\n+        if 'old_name_lower' in self.__dict__:\n+            del self.__dict__['old_name_lower']\n+        if 'new_name_lower' in self.__dict__:\n+            del self.__dict__['new_name_lower']\n \n     def references_model(self, name, app_label):\n         return (\n"
}