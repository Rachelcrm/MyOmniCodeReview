{
  "patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..fa4b72632 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -109,8 +109,10 @@ class ColoredLevelFormatter(logging.Formatter):\n \n     def format(self, record: logging.LogRecord) -> str:\n         fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n-        self._style._fmt = fmt\n-        return super().format(record)\n+        # Create a temporary formatter to avoid modifying the original\n+        temp_formatter = logging.Formatter(fmt, self.datefmt)\n+        temp_formatter._style = self._style.__class__(fmt)\n+        return temp_formatter.format(record)\n \n \n class PercentStyleMultiline(logging.PercentStyle):\n@@ -216,9 +218,9 @@ def pytest_addoption(parser: Parser) -> None:\n     \"\"\"Add options to control log capturing.\"\"\"\n     group = parser.getgroup(\"logging\")\n \n-    def add_option_ini(option, dest, default=None, type=None, **kwargs):\n+    def add_option_ini(option, dest, default=None, type_=None, **kwargs):\n         parser.addini(\n-            dest, default=default, type=type, help=\"Default value for \" + option\n+            dest, default=default, type=type_, help=\"Default value for \" + option\n         )\n         group.addoption(option, dest=dest, **kwargs)\n \n@@ -310,6 +312,7 @@ class catching_logs:\n     def __init__(self, handler: _HandlerType, level: Optional[int] = None) -> None:\n         self.handler = handler\n         self.level = level\n+        self.orig_level = None\n \n     def __enter__(self):\n         root_logger = logging.getLogger()\n@@ -321,7 +324,7 @@ class catching_logs:\n             root_logger.setLevel(min(self.orig_level, self.level))\n         return self.handler\n \n-    def __exit__(self, type, value, traceback):\n+    def __exit__(self, exc_type, value, traceback):\n         root_logger = logging.getLogger()\n         if self.level is not None:\n             root_logger.setLevel(self.orig_level)\n@@ -345,13 +348,16 @@ class LogCaptureHandler(logging_StreamHandler):\n         self.records = []\n         self.stream = StringIO()\n \n-    def handleError(self, record: logging.LogRecord) -> None:\n+    def handleError(self, _record: logging.LogRecord) -> None:\n         if logging.raiseExceptions:\n             # Fail the test if the log message is bad (emit failed).\n             # The default behavior of logging is to print \"Logging error\"\n             # to stderr with the call stack and some extra details.\n             # pytest wants to make such mistakes visible during testing.\n-            raise\n+            try:\n+                raise\n+            except Exception:\n+                raise\n \n \n @final\n@@ -497,7 +503,7 @@ def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n     \"\"\"\n     result = LogCaptureFixture(request.node, _ispytest=True)\n     yield result\n-    result._finalize()\n+    result._finalize()  # pylint: disable=protected-access\n \n \n def get_log_level_for_setting(config: Config, *setting_names: str) -> Optional[int]:\n@@ -603,6 +609,7 @@ class LoggingPlugin:\n         else:\n             formatter = logging.Formatter(log_format, log_date_format)\n \n+        # pylint: disable=protected-access\n         formatter._style = PercentStyleMultiline(\n             formatter._style._fmt, auto_indent=auto_indent\n         )\n@@ -773,6 +780,8 @@ class _LiveLoggingStreamHandler(logging_StreamHandler):\n     ) -> None:\n         super().__init__(stream=terminal_reporter)  # type: ignore[arg-type]\n         self.capture_manager = capture_manager\n+        self._first_record_emitted = False\n+        self._section_name_shown = False\n         self.reset()\n         self.set_when(None)\n         self._test_outcome_written = False\n"
}