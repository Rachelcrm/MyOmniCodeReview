{
  "patch": "diff --git a/fastapi/encoders.py b/fastapi/encoders.py\nindex 26ceb214..2c7729f5 100644\n--- a/fastapi/encoders.py\n+++ b/fastapi/encoders.py\n@@ -5,8 +5,20 @@ from typing import Any, Callable, Dict, List, Set, Tuple, Union\n \n from fastapi.logger import logger\n from fastapi.utils import PYDANTIC_1\n-from pydantic import BaseModel\n-from pydantic.json import ENCODERS_BY_TYPE\n+\n+# Handle different Pydantic versions\n+try:\n+    from pydantic.v1 import BaseModel\n+except ImportError:\n+    from pydantic import BaseModel\n+\n+try:\n+    from pydantic.v1.json import ENCODERS_BY_TYPE\n+except ImportError:\n+    try:\n+        from pydantic.json import ENCODERS_BY_TYPE\n+    except ImportError:\n+        ENCODERS_BY_TYPE = {}\n \n SetIntStr = Set[Union[int, str]]\n DictIntStrAny = Dict[Union[int, str], Any]\n@@ -18,10 +30,10 @@ def generate_encoders_by_class_tuples(\n     encoders_by_classes: Dict[Callable, List] = {}\n     for type_, encoder in type_encoder_map.items():\n         encoders_by_classes.setdefault(encoder, []).append(type_)\n-    encoders_by_class_tuples: Dict[Callable, Tuple] = {}\n+    result_encoders_by_class_tuples: Dict[Callable, Tuple] = {}\n     for encoder, classes in encoders_by_classes.items():\n-        encoders_by_class_tuples[encoder] = tuple(classes)\n-    return encoders_by_class_tuples\n+        result_encoders_by_class_tuples[encoder] = tuple(classes)\n+    return result_encoders_by_class_tuples\n \n \n encoders_by_class_tuples = generate_encoders_by_class_tuples(ENCODERS_BY_TYPE)\n@@ -30,15 +42,19 @@ encoders_by_class_tuples = generate_encoders_by_class_tuples(ENCODERS_BY_TYPE)\n def jsonable_encoder(\n     obj: Any,\n     include: Union[SetIntStr, DictIntStrAny] = None,\n-    exclude: Union[SetIntStr, DictIntStrAny] = set(),\n+    exclude: Union[SetIntStr, DictIntStrAny] = None,\n     by_alias: bool = True,\n     skip_defaults: bool = None,\n     exclude_unset: bool = False,\n     exclude_defaults: bool = False,\n     exclude_none: bool = False,\n-    custom_encoder: dict = {},\n+    custom_encoder: dict = None,\n     sqlalchemy_safe: bool = True,\n ) -> Any:\n+    if exclude is None:\n+        exclude = set()\n+    if custom_encoder is None:\n+        custom_encoder = {}\n     if skip_defaults is not None:\n         logger.warning(  # pragma: nocover\n             \"skip_defaults in jsonable_encoder has been deprecated in favor of \"\n@@ -153,9 +169,9 @@ def jsonable_encoder(\n         errors.append(e)\n         try:\n             data = vars(obj)\n-        except Exception as e:\n-            errors.append(e)\n-            raise ValueError(errors)\n+        except Exception as e2:\n+            errors.append(e2)\n+            raise ValueError(errors) from e2\n     return jsonable_encoder(\n         data,\n         by_alias=by_alias,\n"
}