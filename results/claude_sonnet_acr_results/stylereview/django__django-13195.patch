{
  "patch": "diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\nindex 78256ca3b2..7cb259f74f 100644\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -14,15 +14,15 @@ class MessageEncoder(json.JSONEncoder):\n     \"\"\"\n     message_key = '__json_message'\n \n-    def default(self, obj):\n-        if isinstance(obj, Message):\n+    def default(self, o):\n+        if isinstance(o, Message):\n             # Using 0/1 here instead of False/True to produce more compact json\n-            is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n-            message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n-                message.append(obj.extra_tags)\n+            is_safedata = 1 if isinstance(o.message, SafeData) else 0\n+            message = [self.message_key, is_safedata, o.level, o.message]\n+            if o.extra_tags:\n+                message.append(o.extra_tags)\n             return message\n-        return super().default(obj)\n+        return super().default(o)\n \n \n class MessageDecoder(json.JSONDecoder):\n@@ -94,7 +94,7 @@ class CookieStorage(BaseStorage):\n         else:\n             response.delete_cookie(self.cookie_name, domain=settings.SESSION_COOKIE_DOMAIN)\n \n-    def _store(self, messages, response, remove_oldest=True, *args, **kwargs):\n+    def _store(self, messages, response, *args, remove_oldest=True, **kwargs):\n         \"\"\"\n         Store the messages to a cookie and return a list of any messages which\n         could not be stored.\ndiff --git a/django/contrib/sessions/middleware.py b/django/contrib/sessions/middleware.py\nindex 63013eef7a..11c3053df0 100644\n--- a/django/contrib/sessions/middleware.py\n+++ b/django/contrib/sessions/middleware.py\n@@ -13,6 +13,7 @@ class SessionMiddleware(MiddlewareMixin):\n     # RemovedInDjango40Warning: when the deprecation ends, replace with:\n     #   def __init__(self, get_response):\n     def __init__(self, get_response=None):\n+        super().__init__(get_response)\n         self._get_response_none_deprecation(get_response)\n         self.get_response = get_response\n         self._async_check()\n@@ -60,12 +61,12 @@ class SessionMiddleware(MiddlewareMixin):\n                 if response.status_code != 500:\n                     try:\n                         request.session.save()\n-                    except UpdateError:\n+                    except UpdateError as e:\n                         raise SuspiciousOperation(\n                             \"The request's session was deleted before the \"\n                             \"request completed. The user may have logged \"\n                             \"out in a concurrent request, for example.\"\n-                        )\n+                        ) from e\n                     response.set_cookie(\n                         settings.SESSION_COOKIE_NAME,\n                         request.session.session_key, max_age=max_age,\ndiff --git a/django/http/response.py b/django/http/response.py\nindex e00bcacefb..3f94baaa05 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -50,8 +50,8 @@ class HttpResponseBase:\n         if status is not None:\n             try:\n                 self.status_code = int(status)\n-            except (ValueError, TypeError):\n-                raise TypeError('HTTP status code must be an integer.')\n+            except (ValueError, TypeError) as e:\n+                raise TypeError('HTTP status code must be an integer.') from e\n \n             if not 100 <= self.status_code <= 599:\n                 raise ValueError('HTTP status code must be an integer from 100 to 599.')\n@@ -128,8 +128,7 @@ class HttpResponseBase:\n             if mime_encode:\n                 value = Header(value, 'utf-8', maxlinelen=sys.maxsize).encode()\n             else:\n-                e.reason += ', HTTP response headers must be in %s format' % charset\n-                raise\n+                raise UnicodeError(str(e) + ', HTTP response headers must be in %s format' % charset) from e\n         return value\n \n     def __setitem__(self, header, value):\n@@ -287,7 +286,7 @@ class HttpResponse(HttpResponseBase):\n \n     streaming = False\n \n-    def __init__(self, content=b'', *args, **kwargs):\n+    def __init__(self, *args, content=b'', **kwargs):\n         super().__init__(*args, **kwargs)\n         # Content is a bytestring. See the `content` property methods.\n         self.content = content\n@@ -355,7 +354,7 @@ class StreamingHttpResponse(HttpResponseBase):\n \n     streaming = True\n \n-    def __init__(self, streaming_content=(), *args, **kwargs):\n+    def __init__(self, *args, streaming_content=(), **kwargs):\n         super().__init__(*args, **kwargs)\n         # `streaming_content` should be an iterable of bytestrings.\n         # See the `streaming_content` property methods.\n"
}