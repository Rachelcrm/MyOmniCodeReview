{
  "patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..7600a2a811 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -35,7 +35,7 @@ class ResponseHeaders(CaseInsensitiveMapping):\n         Populate the initial data using __setitem__ to ensure values are\n         correctly encoded.\n         \"\"\"\n-        self._store = {}\n+        super().__init__(data)\n         if data:\n             for header, value in self._unpack_items(data):\n                 self[header] = value\n@@ -75,8 +75,9 @@ class ResponseHeaders(CaseInsensitiveMapping):\n             if mime_encode:\n                 value = Header(value, \"utf-8\", maxlinelen=sys.maxsize).encode()\n             else:\n-                e.reason += \", HTTP response headers must be in %s format\" % charset\n-                raise\n+                raise UnicodeError(\n+                    f\"{str(e)}, HTTP response headers must be in {charset} format\"\n+                ) from e\n         return value\n \n     def __delitem__(self, key):\n@@ -132,8 +133,8 @@ class HttpResponseBase:\n         if status is not None:\n             try:\n                 self.status_code = int(status)\n-            except (ValueError, TypeError):\n-                raise TypeError(\"HTTP status code must be an integer.\")\n+            except (ValueError, TypeError) as exc:\n+                raise TypeError(\"HTTP status code must be an integer.\") from exc\n \n             if not 100 <= self.status_code <= 599:\n                 raise ValueError(\"HTTP status code must be an integer from 100 to 599.\")\n@@ -380,7 +381,7 @@ class HttpResponse(HttpResponseBase):\n         ]\n     )\n \n-    def __init__(self, content=b\"\", *args, **kwargs):\n+    def __init__(self, *args, content=b\"\", **kwargs):\n         super().__init__(*args, **kwargs)\n         # Content is a bytestring. See the `content` property methods.\n         self.content = content\n@@ -457,8 +458,11 @@ class StreamingHttpResponse(HttpResponseBase):\n \n     streaming = True\n \n-    def __init__(self, streaming_content=(), *args, **kwargs):\n+    def __init__(self, *args, streaming_content=(), **kwargs):\n         super().__init__(*args, **kwargs)\n+        # Initialize attributes to avoid pylint warnings\n+        self._iterator = None\n+        self.is_async = False\n         # `streaming_content` should be an iterable of bytestrings.\n         # See the `streaming_content` property methods.\n         self.streaming_content = streaming_content\n@@ -558,6 +562,8 @@ class FileResponse(StreamingHttpResponse):\n         self._no_explicit_content_type = (\n             \"content_type\" not in kwargs or kwargs[\"content_type\"] is None\n         )\n+        # Initialize attribute to avoid pylint warning\n+        self.file_to_stream = None\n         super().__init__(*args, **kwargs)\n \n     def _set_streaming_content(self, value):\n"
}