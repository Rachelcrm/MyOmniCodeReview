{
  "patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex fef5532e58..aa3a605c3f 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -136,11 +136,13 @@ class ServerHandler(simple_server.ServerHandler):\n         if \"Content-Length\" not in self.headers:\n             self.headers[\"Connection\"] = \"close\"\n         # Persistent connections require threading server.\n+        # pylint: disable=no-member\n         elif not isinstance(self.request_handler.server, socketserver.ThreadingMixIn):\n             self.headers[\"Connection\"] = \"close\"\n         # Mark the connection for closing if it's set as such above or if the\n         # application sent the header.\n         if self.headers.get(\"Connection\") == \"close\":\n+            # pylint: disable=attribute-defined-outside-init\n             self.request_handler.close_connection = True\n \n     def close(self):\n@@ -155,7 +157,7 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n         # Short-circuit parent method to not call socket.getfqdn\n         return self.client_address[0]\n \n-    def log_message(self, format, *args):\n+    def log_message(self, fmt, *args):\n         extra = {\n             \"request\": self.request,\n             \"server_time\": self.log_date_time_string(),\n@@ -184,7 +186,7 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n         else:\n             level = logger.info\n \n-        level(format, *args, extra=extra)\n+        level(fmt, *args, extra=extra)\n \n     def get_environ(self):\n         # Strip all headers with underscores in the name before constructing\n@@ -209,10 +211,14 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n \n     def handle_one_request(self):\n         \"\"\"Copy of WSGIRequestHandler.handle() but with different ServerHandler\"\"\"\n+        # pylint: disable=attribute-defined-outside-init\n         self.raw_requestline = self.rfile.readline(65537)\n         if len(self.raw_requestline) > 65536:\n+            # pylint: disable=attribute-defined-outside-init\n             self.requestline = \"\"\n+            # pylint: disable=attribute-defined-outside-init\n             self.request_version = \"\"\n+            # pylint: disable=attribute-defined-outside-init\n             self.command = \"\"\n             self.send_error(414)\n             return\n@@ -223,6 +229,7 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n         handler = ServerHandler(\n             self.rfile, self.wfile, self.get_stderr(), self.get_environ()\n         )\n+        # pylint: disable=attribute-defined-outside-init\n         handler.request_handler = self  # backpointer for logging & connection closing\n         handler.run(self.server.get_app())\n \n@@ -241,6 +248,7 @@ def run(addr, port, wsgi_handler, ipv6=False, threading=False, server_cls=WSGISe\n         # termination before it quits. This will make auto-reloader faster\n         # and will prevent the need to kill the server manually if a thread\n         # isn't terminating correctly.\n+        # pylint: disable=attribute-defined-outside-init\n         httpd.daemon_threads = True\n     httpd.set_app(wsgi_handler)\n     httpd.serve_forever()\n"
}