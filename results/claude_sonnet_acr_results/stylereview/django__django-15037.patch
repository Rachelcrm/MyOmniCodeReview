{
  "patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex f9b4bfb477..263b98e61f 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -28,12 +28,12 @@ class Command(BaseCommand):\n             '--include-views', action='store_true', help='Also output models for database views.',\n         )\n \n-    def handle(self, **options):\n+    def handle(self, *args, **options):\n         try:\n             for line in self.handle_inspection(options):\n                 self.stdout.write(line)\n-        except NotImplementedError:\n-            raise CommandError(\"Database inspection isn't supported for the currently selected database backend.\")\n+        except NotImplementedError as exc:\n+            raise CommandError(\"Database inspection isn't supported for the currently selected database backend.\") from exc\n \n     def handle_inspection(self, options):\n         connection = connections[options['database']]\n@@ -84,7 +84,7 @@ class Command(BaseCommand):\n                         if c['unique'] and len(c['columns']) == 1\n                     ]\n                     table_description = connection.introspection.get_table_description(cursor, table_name)\n-                except Exception as e:\n+                except (DatabaseError, OperationalError) as e:\n                     yield \"# Unable to inspect table '%s'\" % table_name\n                     yield \"# The error was: %s\" % e\n                     continue\n@@ -228,7 +228,7 @@ class Command(BaseCommand):\n \n         return new_name, field_params, field_notes\n \n-    def get_field_type(self, connection, table_name, row):\n+    def get_field_type(self, connection, _table_name, row):\n         \"\"\"\n         Given the database connection, the table name, and the cursor row\n         description, this routine will return the given field type name, as\n"
}