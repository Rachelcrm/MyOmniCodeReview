{
  "patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex ccc2223a5f..98e8caf5cc 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -48,6 +48,7 @@ class ForeignObjectRel(FieldCacheMixin):\n \n         self.symmetrical = False\n         self.multiple = True\n+        self.field_name = None\n \n     # Some of the following cached_properties can't be initialized in\n     # __init__ as the field doesn't have its model yet. Calling these methods\n@@ -139,7 +140,7 @@ class ForeignObjectRel(FieldCacheMixin):\n         return hash(self.identity)\n \n     def get_choices(\n-        self, include_blank=True, blank_choice=BLANK_CHOICE_DASH,\n+        self, include_blank=True, blank_choice=None,\n         limit_choices_to=None, ordering=(),\n     ):\n         \"\"\"\n@@ -149,7 +150,10 @@ class ForeignObjectRel(FieldCacheMixin):\n         Analog of django.db.models.fields.Field.get_choices(), provided\n         initially for utilization by RelatedFieldListFilter.\n         \"\"\"\n+        if blank_choice is None:\n+            blank_choice = BLANK_CHOICE_DASH\n         limit_choices_to = limit_choices_to or self.limit_choices_to\n+        # pylint: disable=protected-access\n         qs = self.related_model._default_manager.complex_filter(limit_choices_to)\n         if ordering:\n             qs = qs.order_by(*ordering)\n@@ -184,6 +188,7 @@ class ForeignObjectRel(FieldCacheMixin):\n         # but this can be overridden with the \"related_name\" option. Due to\n         # backwards compatibility ModelForms need to be able to provide an\n         # alternate model. See BaseInlineFormSet.get_default_prefix().\n+        # pylint: disable=protected-access\n         opts = model._meta if model else self.related_model._meta\n         model = model or self.related_model\n         if self.multiple:\n@@ -246,12 +251,14 @@ class ManyToOneRel(ForeignObjectRel):\n         \"\"\"\n         Return the Field in the 'to' object to which this relationship is tied.\n         \"\"\"\n+        # pylint: disable=protected-access\n         field = self.model._meta.get_field(self.field_name)\n         if not field.concrete:\n             raise exceptions.FieldDoesNotExist(\"No related field named '%s'\" % self.field_name)\n         return field\n \n     def set_field_name(self):\n+        # pylint: disable=protected-access\n         self.field_name = self.field_name or self.model._meta.pk.name\n \n \n@@ -319,6 +326,7 @@ class ManyToManyRel(ForeignObjectRel):\n         Return the field in the 'to' object to which this relationship is tied.\n         Provided for symmetry with ManyToOneRel.\n         \"\"\"\n+        # pylint: disable=protected-access\n         opts = self.through._meta\n         if self.through_fields:\n             field = opts.get_field(self.through_fields[0])\n"
}