{
  "patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 2428218696..f7d4025b8d 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -330,7 +330,7 @@ class ModelBase(type):\n     def _prepare(cls):\n         \"\"\"Create some methods once self._meta has been populated.\"\"\"\n         opts = cls._meta\n-        opts._prepare(cls)\n+        opts._prepare(cls)  # pylint: disable=protected-access\n \n         if opts.order_with_respect_to:\n             cls.get_next_in_order = partialmethod(cls._get_next_or_previous_in_order, is_next=True)\n@@ -362,7 +362,7 @@ class ModelBase(type):\n                 )\n             manager = Manager()\n             manager.auto_created = True\n-            cls.add_to_class('objects', manager)\n+            cls.add_to_class('objects', manager)  # pylint: disable=no-value-for-parameter\n \n         # Set the name of _meta.indexes. This can't be done in\n         # Options.contribute_to_class() because fields haven't been added to\n@@ -406,7 +406,7 @@ class Model(metaclass=ModelBase):\n     def __init__(self, *args, **kwargs):\n         # Alias some things as locals to avoid repeat global lookups\n         cls = self.__class__\n-        opts = self._meta\n+        opts = self._meta  # pylint: disable=no-member\n         _setattr = setattr\n         _DEFERRED = DEFERRED\n         if opts.abstract:\n@@ -449,6 +449,7 @@ class Model(metaclass=ModelBase):\n \n         for field in fields_iter:\n             is_related_object = False\n+            rel_obj = None  # Initialize to avoid used-before-assignment\n             # Virtual field\n             if field.attname not in kwargs and field.column is None:\n                 continue\n@@ -622,7 +623,7 @@ class Model(metaclass=ModelBase):\n                     'are not allowed in fields.' % LOOKUP_SEP)\n \n         hints = {'instance': self}\n-        db_instance_qs = self.__class__._base_manager.db_manager(using, hints=hints).filter(pk=self.pk)\n+        db_instance_qs = self.__class__._base_manager.db_manager(using, hints=hints).filter(pk=self.pk)  # pylint: disable=protected-access\n \n         # Use provided fields, if not set then reload all non-deferred fields.\n         deferred_fields = self.get_deferred_fields()\n@@ -650,7 +651,7 @@ class Model(metaclass=ModelBase):\n             if field.is_cached(self):\n                 field.delete_cached_value(self)\n \n-        self._state.db = db_instance._state.db\n+        self._state.db = db_instance._state.db  # pylint: disable=protected-access\n \n     def serializable_value(self, field_name):\n         \"\"\"\n"
}