{
  "patch": "diff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py\nindex c9699b2e21..1f6d0f26a8 100644\n--- a/lib/matplotlib/cbook.py\n+++ b/lib/matplotlib/cbook.py\n@@ -62,6 +62,7 @@ def _get_running_interactive_framework():\n     tkinter = sys.modules.get(\"tkinter\")\n     if tkinter:\n         codes = {tkinter.mainloop.__code__, tkinter.Misc.mainloop.__code__}\n+        # pylint: disable=protected-access\n         for frame in sys._current_frames().values():\n             while frame:\n                 if frame.f_code in codes:\n@@ -281,13 +282,14 @@ class CallbackRegistry:\n         \"\"\"\n         if self._signals is not None:\n             _api.check_in_list(self._signals, signal=s)\n-        for cid, ref in list(self.callbacks.get(s, {}).items()):\n+        for _, ref in list(self.callbacks.get(s, {}).items()):\n             func = ref()\n             if func is not None:\n                 try:\n                     func(*args, **kwargs)\n                 # this does not capture KeyboardInterrupt, SystemExit,\n                 # and GeneratorExit\n+                # pylint: disable=broad-exception-caught\n                 except Exception as exc:\n                     if self.exception_handler is not None:\n                         self.exception_handler(exc)\n@@ -341,8 +343,8 @@ class silent_list(list):\n     the list (if any).\n     \"\"\"\n \n-    def __init__(self, type, seq=None):\n-        self.type = type\n+    def __init__(self, type_, seq=None):\n+        self.type = type_\n         if seq is not None:\n             self.extend(seq)\n \n@@ -524,7 +526,7 @@ def get_sample_data(fname, asfileobj=True, *, np_load=False):\n                     \"suppress this warning.\")\n                 return path.open('rb')\n         elif suffix in ['.csv', '.xrc', '.txt']:\n-            return path.open('r')\n+            return path.open('r', encoding='utf-8')\n         else:\n             return path.open('rb')\n     else:\n@@ -570,6 +572,8 @@ class Stack:\n     \"\"\"\n \n     def __init__(self, default=None):\n+        self._pos = -1\n+        self._elements = []\n         self.clear()\n         self._default = default\n \n@@ -723,11 +727,11 @@ def print_cycles(objects, outstream=sys.stdout, show_progress=False):\n             outstream.write(\" ->\\n\")\n         outstream.write(\"\\n\")\n \n-    def recurse(obj, start, all, current_path):\n+    def recurse(obj, start, all_objects, current_path):\n         if show_progress:\n-            outstream.write(\"%d\\r\" % len(all))\n+            outstream.write(\"%d\\r\" % len(all_objects))\n \n-        all[id(obj)] = None\n+        all_objects[id(obj)] = None\n \n         referents = gc.get_referents(obj)\n         for referent in referents:\n@@ -743,8 +747,8 @@ def print_cycles(objects, outstream=sys.stdout, show_progress=False):\n                 continue\n \n             # We haven't seen this object before, so recurse\n-            elif id(referent) not in all:\n-                recurse(referent, start, all, current_path + [obj])\n+            elif id(referent) not in all_objects:\n+                recurse(referent, start, all_objects, current_path + [obj])\n \n     for obj in objects:\n         outstream.write(f\"Examining: {obj!r}\\n\")\n@@ -943,6 +947,7 @@ def delete_masked_points(*args):\n                 mask = np.isfinite(xd)\n                 if isinstance(mask, np.ndarray):\n                     masks.append(mask)\n+            # pylint: disable=broad-exception-caught\n             except Exception:  # Fixme: put in tuple of possible exceptions?\n                 pass\n     if len(masks):\n@@ -1143,7 +1148,7 @@ def boxplot_stats(X, whis=1.5, bootstrap=None, labels=None,\n         raise ValueError(\"Dimensions of labels and X must be compatible\")\n \n     input_whis = whis\n-    for ii, (x, label) in enumerate(zip(X, labels)):\n+    for _, (x, label) in enumerate(zip(X, labels)):\n \n         # empty dict\n         stats = {}\n@@ -1993,12 +1998,12 @@ class _OrderedSet(collections.abc.MutableSet):\n     def __len__(self):\n         return len(self._od)\n \n-    def add(self, key):\n-        self._od.pop(key, None)\n-        self._od[key] = None\n+    def add(self, value):\n+        self._od.pop(value, None)\n+        self._od[value] = None\n \n-    def discard(self, key):\n-        self._od.pop(key, None)\n+    def discard(self, value):\n+        self._od.pop(value, None)\n \n \n # Agg's buffers are unmultiplied RGBA8888, which neither PyQt<=5.1 nor cairo\n@@ -2078,7 +2083,7 @@ def _check_and_log_subprocess(command, logger, **kwargs):\n     *logger*.  In case of success, the output is likewise logged.\n     \"\"\"\n     logger.debug('%s', _pformat_subprocess(command))\n-    proc = subprocess.run(command, capture_output=True, **kwargs)\n+    proc = subprocess.run(command, capture_output=True, check=False, **kwargs)\n     if proc.returncode:\n         stdout = proc.stdout\n         if isinstance(stdout, bytes):\n"
}