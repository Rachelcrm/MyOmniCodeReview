{
  "patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..537838a492 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -288,7 +288,7 @@ class BaseModelForm(BaseForm):\n                  initial=None, error_class=ErrorList, label_suffix=None,\n                  empty_permitted=False, instance=None, use_required_attribute=None,\n                  renderer=None):\n-        opts = self._meta\n+        opts = self._meta  # pylint: disable=no-member\n         if opts.model is None:\n             raise ValueError('ModelForm has no model class specified.')\n         if instance is None:\n@@ -331,9 +331,9 @@ class BaseModelForm(BaseForm):\n             # Don't perform model validation on fields that were defined\n             # manually on the form and excluded via the ModelForm's Meta\n             # class. See #12901.\n-            elif self._meta.fields and field not in self._meta.fields:\n+            elif self._meta.fields and field not in self._meta.fields:  # pylint: disable=no-member\n                 exclude.append(f.name)\n-            elif self._meta.exclude and field in self._meta.exclude:\n+            elif self._meta.exclude and field in self._meta.exclude:  # pylint: disable=no-member\n                 exclude.append(f.name)\n \n             # Exclude fields that failed form validation. There's no need for\n@@ -361,7 +361,7 @@ class BaseModelForm(BaseForm):\n     def _update_errors(self, errors):\n         # Override any validation error messages defined at the model level\n         # with those defined at the form level.\n-        opts = self._meta\n+        opts = self._meta  # pylint: disable=no-member\n \n         # Allow the model generated by construct_instance() to raise\n         # ValidationError and have them handled in the same way as others.\n@@ -387,7 +387,7 @@ class BaseModelForm(BaseForm):\n         self.add_error(None, errors)\n \n     def _post_clean(self):\n-        opts = self._meta\n+        opts = self._meta  # pylint: disable=no-member\n \n         exclude = self._get_validation_exclusions()\n \n@@ -432,8 +432,8 @@ class BaseModelForm(BaseForm):\n         Save the many-to-many fields and generic relations for this form.\n         \"\"\"\n         cleaned_data = self.cleaned_data\n-        exclude = self._meta.exclude\n-        fields = self._meta.fields\n+        exclude = self._meta.exclude  # pylint: disable=no-member\n+        fields = self._meta.fields  # pylint: disable=no-member\n         opts = self.instance._meta\n         # Note that for historical reasons we want to include also\n         # private_fields here. (GenericRelation was previously a fake\n@@ -468,7 +468,7 @@ class BaseModelForm(BaseForm):\n         else:\n             # If not committing, add a method to the form to allow deferred\n             # saving of m2m data.\n-            self.save_m2m = self._save_m2m\n+            self.save_m2m = self._save_m2m  # pylint: disable=attribute-defined-outside-init\n         return self.instance\n \n     save.alters_data = True\n"
}