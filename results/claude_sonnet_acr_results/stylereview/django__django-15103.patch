{
  "patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 5ccef38048..029ba3ef4e 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -9,7 +9,7 @@ from pprint import pformat\n from urllib.parse import quote\n \n from django.utils import formats\n-from django.utils.dateformat import format, time_format\n+from django.utils.dateformat import format as date_format, time_format\n from django.utils.encoding import iri_to_uri\n from django.utils.html import (\n     avoid_wrapping, conditional_escape, escape, escapejs,\n@@ -41,14 +41,14 @@ def stringfilter(func):\n         args = list(args)\n         args[0] = str(args[0])\n         if (isinstance(args[0], SafeData) and\n-                getattr(_dec._decorated_function, 'is_safe', False)):\n+                getattr(_dec._decorated_function, 'is_safe', False)):  # pylint: disable=protected-access\n             return mark_safe(func(*args, **kwargs))\n         return func(*args, **kwargs)\n \n     # Include a reference to the real function (used to check original\n     # arguments by the template parser, and to bear the 'is_safe' attribute\n     # when multiple decorators are applied).\n-    _dec._decorated_function = getattr(func, '_decorated_function', func)\n+    _dec._decorated_function = getattr(func, '_decorated_function', func)  # pylint: disable=protected-access\n \n     return wraps(func)(_dec)\n \n@@ -287,10 +287,10 @@ def title(value):\n def truncatechars(value, arg):\n     \"\"\"Truncate a string after `arg` number of characters.\"\"\"\n     try:\n-        length = int(arg)\n+        char_length = int(arg)\n     except ValueError:  # Invalid literal for int().\n         return value  # Fail silently.\n-    return Truncator(value).chars(length)\n+    return Truncator(value).chars(char_length)\n \n \n @register.filter(is_safe=True)\n@@ -301,10 +301,10 @@ def truncatechars_html(value, arg):\n     Preserve newlines in the HTML.\n     \"\"\"\n     try:\n-        length = int(arg)\n+        char_length = int(arg)\n     except ValueError:  # invalid literal for int()\n         return value  # Fail silently.\n-    return Truncator(value).chars(length, html=True)\n+    return Truncator(value).chars(char_length, html=True)\n \n \n @register.filter(is_safe=True)\n@@ -315,10 +315,10 @@ def truncatewords(value, arg):\n     Remove newlines within the string.\n     \"\"\"\n     try:\n-        length = int(arg)\n+        word_length = int(arg)\n     except ValueError:  # Invalid literal for int().\n         return value  # Fail silently.\n-    return Truncator(value).words(length, truncate=' …')\n+    return Truncator(value).words(word_length, truncate=' …')\n \n \n @register.filter(is_safe=True)\n@@ -329,10 +329,10 @@ def truncatewords_html(value, arg):\n     Preserve newlines in the HTML.\n     \"\"\"\n     try:\n-        length = int(arg)\n+        word_length = int(arg)\n     except ValueError:  # invalid literal for int()\n         return value  # Fail silently.\n-    return Truncator(value).words(length, html=True, truncate=' …')\n+    return Truncator(value).words(word_length, html=True, truncate=' …')\n \n \n @register.filter(is_safe=False)\n@@ -344,18 +344,18 @@ def upper(value):\n \n @register.filter(is_safe=False)\n @stringfilter\n-def urlencode(value, safe=None):\n+def urlencode(value, safe_chars=None):\n     \"\"\"\n     Escape a value for use in a URL.\n \n-    The ``safe`` parameter determines the characters which should not be\n+    The ``safe_chars`` parameter determines the characters which should not be\n     escaped by Python's quote() function. If not provided, use the default safe\n     characters (but an empty string can be provided when *all* characters\n     should be escaped).\n     \"\"\"\n     kwargs = {}\n-    if safe is not None:\n-        kwargs['safe'] = safe\n+    if safe_chars is not None:\n+        kwargs['safe'] = safe_chars\n     return quote(value, **kwargs)\n \n \n@@ -417,9 +417,9 @@ def center(value, arg):\n @stringfilter\n def cut(value, arg):\n     \"\"\"Remove all values of arg from the given string.\"\"\"\n-    safe = isinstance(value, SafeData)\n+    is_safe = isinstance(value, SafeData)\n     value = value.replace(arg, '')\n-    if safe and arg != ';':\n+    if is_safe and arg != ';':\n         return mark_safe(value)\n     return value\n \n@@ -701,7 +701,7 @@ def add(value, arg):\n     except (ValueError, TypeError):\n         try:\n             return value + arg\n-        except Exception:\n+        except (TypeError, ValueError):\n             return ''\n \n \n@@ -739,7 +739,7 @@ def date(value, arg=None):\n         return formats.date_format(value, arg)\n     except AttributeError:\n         try:\n-            return format(value, arg)\n+            return date_format(value, arg)\n         except AttributeError:\n             return ''\n \ndiff --git a/django/utils/html.py b/django/utils/html.py\nindex da1b5675ec..15889c2141 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -139,8 +139,8 @@ class MLStripper(HTMLParser):\n         self.reset()\n         self.fed = []\n \n-    def handle_data(self, d):\n-        self.fed.append(d)\n+    def handle_data(self, data):\n+        self.fed.append(data)\n \n     def handle_entityref(self, name):\n         self.fed.append('&%s;' % name)\n@@ -148,6 +148,9 @@ class MLStripper(HTMLParser):\n     def handle_charref(self, name):\n         self.fed.append('&#%s;' % name)\n \n+    def error(self, message):\n+        raise ValueError(f\"HTML parsing error: {message}\")\n+\n     def get_data(self):\n         return ''.join(self.fed)\n \n@@ -357,7 +360,7 @@ class Urlizer:\n         if '@' not in value or value.startswith('@') or value.endswith('@'):\n             return False\n         try:\n-            p1, p2 = value.split('@')\n+            _, p2 = value.split('@')\n         except ValueError:\n             # value contains more than one @.\n             return False\n@@ -399,6 +402,12 @@ def html_safe(klass):\n             \"define __str__().\" % klass.__name__\n         )\n     klass_str = klass.__str__\n-    klass.__str__ = lambda self: mark_safe(klass_str(self))\n-    klass.__html__ = lambda self: str(self)\n+    def safe_str(self):\n+        return mark_safe(klass_str(self))\n+    \n+    def html_method(self):\n+        return str(self)\n+    \n+    klass.__str__ = safe_str\n+    klass.__html__ = html_method\n     return klass\n"
}