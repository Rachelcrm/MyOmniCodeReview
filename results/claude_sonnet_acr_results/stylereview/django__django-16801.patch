{
  "patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7f8eb128e1..be8b168f6b 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -21,6 +21,7 @@ class FieldFile(File, AltersData):\n         self.field = field\n         self.storage = field.storage\n         self._committed = True\n+        self._file = None\n \n     def __eq__(self, other):\n         # Older code may be expecting FileField values to be simple strings.\n@@ -67,7 +68,7 @@ class FieldFile(File, AltersData):\n         return self.storage.url(self.name)\n \n     @property\n-    def size(self):\n+    def size(self):  # pylint: disable=invalid-overridden-method\n         self._require_file()\n         if not self._committed:\n             return self.file.size\n@@ -312,12 +313,12 @@ class FileField(Field):\n \n     def pre_save(self, model_instance, add):\n         file = super().pre_save(model_instance, add)\n-        if file and not file._committed:\n+        if file and not file._committed:  # pylint: disable=protected-access\n             # Commit the file to storage prior to saving the model\n             file.save(file.name, file.file, save=False)\n         return file\n \n-    def contribute_to_class(self, cls, name, **kwargs):\n+    def contribute_to_class(self, cls, name, **kwargs):  # pylint: disable=arguments-differ\n         super().contribute_to_class(cls, name, **kwargs)\n         setattr(cls, self.attname, self.descriptor_class(self))\n \n@@ -346,7 +347,7 @@ class FileField(Field):\n             # database, so leaving False as-is is not acceptable.\n             setattr(instance, self.name, data or \"\")\n \n-    def formfield(self, **kwargs):\n+    def formfield(self, **kwargs):  # pylint: disable=arguments-differ\n         return super().formfield(\n             **{\n                 \"form_class\": forms.FileField,\n@@ -411,7 +412,7 @@ class ImageField(FileField):\n \n     def _check_image_library_installed(self):\n         try:\n-            from PIL import Image  # NOQA\n+            from PIL import Image as _  # noqa: F401\n         except ImportError:\n             return [\n                 checks.Error(\n@@ -441,10 +442,10 @@ class ImageField(FileField):\n         # after their corresponding image field don't stay cleared by\n         # Model.__init__, see bug #11196.\n         # Only run post-initialization dimension update on non-abstract models\n-        if not cls._meta.abstract:\n+        if not cls._meta.abstract:  # pylint: disable=protected-access\n             signals.post_init.connect(self.update_dimension_fields, sender=cls)\n \n-    def update_dimension_fields(self, instance, force=False, *args, **kwargs):\n+    def update_dimension_fields(self, instance, force=False, *args, **kwargs):  # pylint: disable=unused-argument,keyword-arg-before-vararg\n         \"\"\"\n         Update field's width and height fields, if defined.\n \n"
}