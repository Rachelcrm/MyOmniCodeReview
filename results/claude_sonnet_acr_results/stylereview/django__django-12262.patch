{
  "patch": "diff --git a/django/template/library.py b/django/template/library.py\nindex 20bc86dac8..245c074375 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -84,8 +84,8 @@ class Library:\n                     # set the flag on the innermost decorated function\n                     # for decorators that need it, e.g. stringfilter\n                     if hasattr(filter_func, \"_decorated_function\"):\n-                        setattr(filter_func._decorated_function, attr, value)\n-            filter_func._filter_name = name\n+                        setattr(filter_func._decorated_function, attr, value)  # pylint: disable=protected-access\n+            filter_func._filter_name = name  # pylint: disable=protected-access\n             return filter_func\n         else:\n             raise ValueError(\n@@ -133,7 +133,7 @@ class Library:\n         else:\n             raise ValueError(\"Invalid arguments provided to simple_tag\")\n \n-    def inclusion_tag(self, filename, func=None, takes_context=None, name=None):\n+    def inclusion_tag(self, filename, func=None, takes_context=None, name=None):  # pylint: disable=unused-argument\n         \"\"\"\n         Register a callable as an inclusion tag:\n \n@@ -296,7 +296,7 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n                     if varargs is None:\n                         raise TemplateSyntaxError(\n                             \"'%s' received too many positional arguments\" %\n-                            name)\n+                            name) from None\n     if defaults is not None:\n         # Consider the last n params handled, where n is the\n         # number of defaults.\n@@ -319,10 +319,10 @@ def import_library(name):\n         raise InvalidTemplateLibrary(\n             \"Invalid template library specified. ImportError raised when \"\n             \"trying to load '%s': %s\" % (name, e)\n-        )\n+        ) from e\n     try:\n         return module.register\n     except AttributeError:\n         raise InvalidTemplateLibrary(\n             \"Module  %s does not have a variable named 'register'\" % name,\n-        )\n+        ) from None\n"
}