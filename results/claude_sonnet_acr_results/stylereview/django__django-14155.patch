{
  "patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..b023ee2af7 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -15,7 +15,7 @@ from urllib.parse import quote\n from asgiref.local import Local\n \n from django.conf import settings\n-from django.core.checks import Error, Warning\n+from django.core.checks import Error, Warning as CheckWarning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n@@ -345,7 +345,7 @@ class URLPattern:\n         Check that the pattern name does not contain a colon.\n         \"\"\"\n         if self.pattern.name is not None and \":\" in self.pattern.name:\n-            warning = Warning(\n+            warning = CheckWarning(\n                 \"Your URL pattern {} has a name including a ':'. Remove the colon, to \"\n                 \"avoid ambiguous namespace references.\".format(self.pattern.describe()),\n                 id=\"urls.W003\",\n@@ -357,7 +357,7 @@ class URLPattern:\n     def resolve(self, path):\n         match = self.pattern.match(path)\n         if match:\n-            new_path, args, kwargs = match\n+            _, args, kwargs = match\n             # Pass any extra_kwargs as **kwargs.\n             kwargs.update(self.default_args)\n             return ResolverMatch(self.callback, args, kwargs, self.pattern.name, route=str(self.pattern))\n@@ -474,13 +474,13 @@ class URLResolver:\n                             (bits, p_pattern, url_pattern.default_args, url_pattern.pattern.converters)\n                         )\n                 else:  # url_pattern is a URLResolver.\n-                    url_pattern._populate()\n+                    url_pattern._populate()  # pylint: disable=protected-access\n                     if url_pattern.app_name:\n                         apps.setdefault(url_pattern.app_name, []).append(url_pattern.namespace)\n                         namespaces[url_pattern.namespace] = (p_pattern, url_pattern)\n                     else:\n                         for name in url_pattern.reverse_dict:\n-                            for matches, pat, defaults, converters in url_pattern.reverse_dict.getlist(name):\n+                            for _, pat, defaults, converters in url_pattern.reverse_dict.getlist(name):\n                                 new_matches = normalize(p_pattern + pat)\n                                 lookups.appendlist(\n                                     name,\n@@ -497,7 +497,7 @@ class URLResolver:\n                             namespaces[namespace] = (p_pattern + prefix, sub_pattern)\n                         for app_name, namespace_list in url_pattern.app_dict.items():\n                             apps.setdefault(app_name, []).extend(namespace_list)\n-                    self._callback_strs.update(url_pattern._callback_strs)\n+                    self._callback_strs.update(url_pattern._callback_strs)  # pylint: disable=protected-access\n             self._namespace_dict[language_code] = namespaces\n             self._app_dict[language_code] = apps\n             self._reverse_dict[language_code] = lookups\n"
}