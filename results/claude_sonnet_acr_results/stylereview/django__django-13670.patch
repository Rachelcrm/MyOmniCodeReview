{
  "patch": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex afd36d79e0..4f0cac8ac8 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -29,6 +29,9 @@ re_escaped = _lazy_re_compile(r'\\\\(.)')\n \n \n class Formatter:\n+    def __init__(self):\n+        self.data = None\n+    \n     def format(self, formatstr):\n         pieces = []\n         for i, piece in enumerate(re_formatchars.split(str(formatstr))):\n@@ -47,6 +50,7 @@ class Formatter:\n class TimeFormat(Formatter):\n \n     def __init__(self, obj):\n+        super().__init__()\n         self.data = obj\n         self.timezone = None\n \n@@ -167,7 +171,7 @@ class TimeFormat(Formatter):\n         name = None\n         try:\n             name = self.timezone.tzname(self.data)\n-        except Exception:\n+        except (AttributeError, TypeError, OSError):\n             # pytz raises AmbiguousTimeError during the autumn DST change.\n             # This happens mainly when __init__ receives a naive datetime\n             # and sets self.timezone = get_default_timezone().\n@@ -193,7 +197,7 @@ class TimeFormat(Formatter):\n \n         try:\n             offset = self.timezone.utcoffset(self.data)\n-        except Exception:\n+        except (AttributeError, TypeError, OSError):\n             # pytz raises AmbiguousTimeError during the autumn DST change.\n             # This happens mainly when __init__ receives a naive datetime\n             # and sets self.timezone = get_default_timezone().\n@@ -241,7 +245,7 @@ class DateFormat(TimeFormat):\n                 return '1'\n             else:\n                 return '0'\n-        except Exception:\n+        except (AttributeError, TypeError, OSError):\n             # pytz raises AmbiguousTimeError during the autumn DST change.\n             # This happens mainly when __init__ receives a naive datetime\n             # and sets self.timezone = get_default_timezone().\n@@ -337,7 +341,7 @@ class DateFormat(TimeFormat):\n         return self.data.timetuple().tm_yday\n \n \n-def format(value, format_string):\n+def date_format(value, format_string):\n     \"Convenience function\"\n     df = DateFormat(value)\n     return df.format(format_string)\n"
}