{
  "patch": "diff --git a/django/contrib/staticfiles/management/commands/runserver.py b/django/contrib/staticfiles/management/commands/runserver.py\nindex fe050f4dfa..190eaa82bb 100644\n--- a/django/contrib/staticfiles/management/commands/runserver.py\n+++ b/django/contrib/staticfiles/management/commands/runserver.py\n@@ -24,7 +24,7 @@ class Command(RunserverCommand):\n         Return the static files serving handler wrapping the default handler,\n         if static files should be served. Otherwise return the default handler.\n         \"\"\"\n-        handler = super().get_handler(*args, **options)\n+        handler = super().get_handler()\n         use_static_handler = options['use_static_handler']\n         insecure_serving = options['insecure_serving']\n         if use_static_handler and (settings.DEBUG or insecure_serving):\ndiff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py\nindex d9fb088350..3c3dea82a4 100644\n--- a/django/core/management/commands/runserver.py\n+++ b/django/core/management/commands/runserver.py\n@@ -34,6 +34,13 @@ class Command(BaseCommand):\n     protocol = 'http'\n     server_cls = WSGIServer\n \n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        self.use_ipv6 = None\n+        self._raw_ipv6 = None\n+        self.addr = None\n+        self.port = None\n+\n     def add_arguments(self, parser):\n         parser.add_argument(\n             'addrport', nargs='?',\n@@ -60,7 +67,7 @@ class Command(BaseCommand):\n             os.environ[\"DJANGO_COLORS\"] = \"nocolor\"\n         super().execute(*args, **options)\n \n-    def get_handler(self, *args, **options):\n+    def get_handler(self):\n         \"\"\"Return the default WSGI handler for the runner.\"\"\"\n         return get_internal_wsgi_application()\n \n@@ -135,7 +142,7 @@ class Command(BaseCommand):\n         })\n \n         try:\n-            handler = self.get_handler(*args, **options)\n+            handler = self.get_handler()\n             run(self.addr, int(self.port), handler,\n                 ipv6=self.use_ipv6, threading=threading, server_cls=self.server_cls)\n         except OSError as e:\n"
}