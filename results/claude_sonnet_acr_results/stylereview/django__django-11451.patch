{
  "patch": "diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py\nindex f4b1722757..8117d98a15 100644\n--- a/django/contrib/auth/backends.py\n+++ b/django/contrib/auth/backends.py\n@@ -9,16 +9,16 @@ UserModel = get_user_model()\n \n \n class BaseBackend:\n-    def authenticate(self, request, **kwargs):\n+    def authenticate(self, _request, **_kwargs):\n         return None\n \n-    def get_user(self, user_id):\n+    def get_user(self, _user_id):\n         return None\n \n-    def get_user_permissions(self, user_obj, obj=None):\n+    def get_user_permissions(self, _user_obj, _obj=None):\n         return set()\n \n-    def get_group_permissions(self, user_obj, obj=None):\n+    def get_group_permissions(self, _user_obj, _obj=None):\n         return set()\n \n     def get_all_permissions(self, user_obj, obj=None):\n@@ -145,7 +145,7 @@ class RemoteUserBackend(ModelBackend):\n     # Create a User object if not already in the database?\n     create_unknown_user = True\n \n-    def authenticate(self, request, remote_user):\n+    def authenticate(self, request, remote_user, **kwargs):\n         \"\"\"\n         The username passed as ``remote_user`` is considered trusted. Return\n         the ``User`` object with the given username. Create a new ``User``\n@@ -169,7 +169,7 @@ class RemoteUserBackend(ModelBackend):\n             if created:\n                 args = (request, user)\n                 try:\n-                    inspect.getcallargs(self.configure_user, request, user)\n+                    inspect.signature(self.configure_user).bind(request, user)\n                 except TypeError:\n                     args = (user,)\n                     warnings.warn(\n@@ -194,7 +194,7 @@ class RemoteUserBackend(ModelBackend):\n         \"\"\"\n         return username\n \n-    def configure_user(self, request, user):\n+    def configure_user(self, _request, user):\n         \"\"\"\n         Configure a user after creation and return the updated user.\n \n"
}