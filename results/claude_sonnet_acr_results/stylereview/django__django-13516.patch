{
  "patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex e6cbf8c64f..b39cb25ff7 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -39,7 +39,6 @@ class SystemCheckError(CommandError):\n     \"\"\"\n     The system check framework detected unrecoverable errors.\n     \"\"\"\n-    pass\n \n \n class CommandParser(ArgumentParser):\n@@ -133,6 +132,7 @@ class OutputWrapper(TextIOBase):\n             self._style_func = lambda x: x\n \n     def __init__(self, out, ending='\\n'):\n+        super().__init__()\n         self._out = out\n         self.style_func = None\n         self.ending = ending\n@@ -320,7 +320,6 @@ class BaseCommand:\n         \"\"\"\n         Entry point for subclassed commands to add custom arguments.\n         \"\"\"\n-        pass\n \n     def print_help(self, prog_name, subcommand):\n         \"\"\"\n@@ -425,13 +424,13 @@ class BaseCommand:\n         if all_issues:\n             debugs = [e for e in all_issues if e.level < checks.INFO and not e.is_silenced()]\n             infos = [e for e in all_issues if checks.INFO <= e.level < checks.WARNING and not e.is_silenced()]\n-            warnings = [e for e in all_issues if checks.WARNING <= e.level < checks.ERROR and not e.is_silenced()]\n+            warning_issues = [e for e in all_issues if checks.WARNING <= e.level < checks.ERROR and not e.is_silenced()]\n             errors = [e for e in all_issues if checks.ERROR <= e.level < checks.CRITICAL and not e.is_silenced()]\n             criticals = [e for e in all_issues if checks.CRITICAL <= e.level and not e.is_silenced()]\n             sorted_issues = [\n                 (criticals, 'CRITICALS'),\n                 (errors, 'ERRORS'),\n-                (warnings, 'WARNINGS'),\n+                (warning_issues, 'WARNINGS'),\n                 (infos, 'INFOS'),\n                 (debugs, 'DEBUGS'),\n             ]\n@@ -525,7 +524,7 @@ class AppCommand(BaseCommand):\n         try:\n             app_configs = [apps.get_app_config(app_label) for app_label in app_labels]\n         except (LookupError, ImportError) as e:\n-            raise CommandError(\"%s. Are you sure your INSTALLED_APPS setting is correct?\" % e)\n+            raise CommandError(\"%s. Are you sure your INSTALLED_APPS setting is correct?\" % e) from e\n         output = []\n         for app_config in app_configs:\n             app_output = self.handle_app_config(app_config, **options)\ndiff --git a/django/core/management/color.py b/django/core/management/color.py\nindex c626f10034..40313064f9 100644\n--- a/django/core/management/color.py\n+++ b/django/core/management/color.py\n@@ -22,6 +22,8 @@ def supports_color():\n \n \n class Style:\n+    # pylint: disable=no-member\n+    # Style attributes (ERROR, WARNING, NOTICE, etc.) are dynamically added by make_style()\n     pass\n \n \n"
}