{
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..7fb390b7d4 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -39,6 +39,9 @@ class SQLCompiler:\n         self.annotation_col_map = None\n         self.klass_info = None\n         self._meta_ordering = None\n+        self.col_count = None\n+        self.where = None\n+        self.having = None\n \n     def setup_query(self):\n         if all(self.query.alias_refcount[a] == 0 for a in self.query.alias_map):\n@@ -289,9 +292,9 @@ class SQLCompiler:\n         else:\n             ordering = []\n         if self.query.standard_ordering:\n-            asc, desc = ORDER_DIR['ASC']\n+            asc, _ = ORDER_DIR['ASC']\n         else:\n-            asc, desc = ORDER_DIR['DESC']\n+            asc, _ = ORDER_DIR['DESC']\n \n         order_by = []\n         for field in ordering:\n@@ -430,7 +433,7 @@ class SQLCompiler:\n             sql, params = node.as_sql(self, self.connection)\n         return sql, params\n \n-    def get_combinator_sql(self, combinator, all):\n+    def get_combinator_sql(self, combinator, all_):\n         features = self.connection.features\n         compilers = [\n             query.get_compiler(self.using, self.connection)\n@@ -475,7 +478,7 @@ class SQLCompiler:\n         if not parts:\n             raise EmptyResultSet\n         combinator_sql = self.connection.ops.set_operators[combinator]\n-        if all and combinator == 'union':\n+        if all_ and combinator == 'union':\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n@@ -837,11 +840,11 @@ class SQLCompiler:\n             fields_found.add(f.name)\n \n             if restricted:\n-                next = requested.get(f.name, {})\n+                next_requested = requested.get(f.name, {})\n                 if not f.is_relation:\n                     # If a non-related field is used like a relation,\n                     # or if a single non-relational field is given.\n-                    if next or f.name in requested:\n+                    if next_requested or f.name in requested:\n                         raise FieldError(\n                             \"Non-relational field given in select_related: '%s'. \"\n                             \"Choices are: %s\" % (\n@@ -850,7 +853,7 @@ class SQLCompiler:\n                             )\n                         )\n             else:\n-                next = False\n+                next_requested = False\n \n             if not select_related_descend(f, restricted, requested,\n                                           only_load.get(field_model)):\n@@ -874,7 +877,7 @@ class SQLCompiler:\n                 select.append((col, None))\n             klass_info['select_fields'] = select_fields\n             next_klass_infos = self.get_related_selections(\n-                select, f.remote_field.model._meta, alias, cur_depth + 1, next, restricted)\n+                select, f.remote_field.model._meta, alias, cur_depth + 1, next_requested, restricted)\n             get_related_klass_infos(klass_info, next_klass_infos)\n \n         if restricted:\n@@ -910,10 +913,10 @@ class SQLCompiler:\n                     select_fields.append(len(select))\n                     select.append((col, None))\n                 klass_info['select_fields'] = select_fields\n-                next = requested.get(f.related_query_name(), {})\n+                next_requested = requested.get(f.related_query_name(), {})\n                 next_klass_infos = self.get_related_selections(\n                     select, model._meta, alias, cur_depth + 1,\n-                    next, restricted)\n+                    next_requested, restricted)\n                 get_related_klass_infos(klass_info, next_klass_infos)\n \n             def local_setter(obj, from_obj):\n"
}