{
  "patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd376f..9a26146553 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -34,7 +34,7 @@ def construct_instance(form, instance, fields=None, exclude=None):\n     ``cleaned_data``, but do not save the returned instance to the database.\n     \"\"\"\n     from django.db import models\n-    opts = instance._meta\n+    opts = instance._meta  # pylint: disable=protected-access\n \n     cleaned_data = form.cleaned_data\n     file_field_list = []\n@@ -78,7 +78,7 @@ def model_to_dict(instance, fields=None, exclude=None):\n     named from the returned dict, even if they are listed in the ``fields``\n     argument.\n     \"\"\"\n-    opts = instance._meta\n+    opts = instance._meta  # pylint: disable=protected-access\n     data = {}\n     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):\n         if not getattr(f, 'editable', False):\n@@ -135,7 +135,7 @@ def fields_for_model(model, fields=None, exclude=None, widgets=None,\n     \"\"\"\n     field_dict = {}\n     ignored = []\n-    opts = model._meta\n+    opts = model._meta  # pylint: disable=protected-access\n     # Avoid circular import\n     from django.db.models.fields import Field as ModelField\n     sortable_private_fields = [f for f in opts.private_fields if isinstance(f, ModelField)]\n@@ -278,7 +278,7 @@ class BaseModelForm(BaseForm):\n                  initial=None, error_class=ErrorList, label_suffix=None,\n                  empty_permitted=False, instance=None, use_required_attribute=None,\n                  renderer=None):\n-        opts = self._meta\n+        opts = self._meta  # pylint: disable=no-member\n         if opts.model is None:\n             raise ValueError('ModelForm has no model class specified.')\n         if instance is None:\n@@ -311,7 +311,7 @@ class BaseModelForm(BaseForm):\n         exclude = []\n         # Build up a list of fields that should be excluded from model field\n         # validation and unique checks.\n-        for f in self.instance._meta.fields:\n+        for f in self.instance._meta.fields:  # pylint: disable=protected-access\n             field = f.name\n             # Exclude fields that aren't on the form. The developer may be\n             # adding these values to the model after form validation.\n@@ -321,9 +321,9 @@ class BaseModelForm(BaseForm):\n             # Don't perform model validation on fields that were defined\n             # manually on the form and excluded via the ModelForm's Meta\n             # class. See #12901.\n-            elif self._meta.fields and field not in self._meta.fields:\n+            elif self._meta.fields and field not in self._meta.fields:  # pylint: disable=no-member\n                 exclude.append(f.name)\n-            elif self._meta.exclude and field in self._meta.exclude:\n+            elif self._meta.exclude and field in self._meta.exclude:  # pylint: disable=no-member\n                 exclude.append(f.name)\n \n             # Exclude fields that failed form validation. There's no need for\n@@ -351,7 +351,7 @@ class BaseModelForm(BaseForm):\n     def _update_errors(self, errors):\n         # Override any validation error messages defined at the model level\n         # with those defined at the form level.\n-        opts = self._meta\n+        opts = self._meta  # pylint: disable=no-member\n \n         # Allow the model generated by construct_instance() to raise\n         # ValidationError and have them handled in the same way as others.\n@@ -377,7 +377,7 @@ class BaseModelForm(BaseForm):\n         self.add_error(None, errors)\n \n     def _post_clean(self):\n-        opts = self._meta\n+        opts = self._meta  # pylint: disable=no-member\n \n         exclude = self._get_validation_exclusions()\n \n@@ -422,9 +422,9 @@ class BaseModelForm(BaseForm):\n         Save the many-to-many fields and generic relations for this form.\n         \"\"\"\n         cleaned_data = self.cleaned_data\n-        exclude = self._meta.exclude\n-        fields = self._meta.fields\n-        opts = self.instance._meta\n+        exclude = self._meta.exclude  # pylint: disable=no-member\n+        fields = self._meta.fields  # pylint: disable=no-member\n+        opts = self.instance._meta  # pylint: disable=protected-access\n         # Note that for historical reasons we want to include also\n         # private_fields here. (GenericRelation was previously a fake\n         # m2m field).\n@@ -447,8 +447,8 @@ class BaseModelForm(BaseForm):\n         if self.errors:\n             raise ValueError(\n                 \"The %s could not be %s because the data didn't validate.\" % (\n-                    self.instance._meta.object_name,\n-                    'created' if self.instance._state.adding else 'changed',\n+                    self.instance._meta.object_name,  # pylint: disable=protected-access\n+                    'created' if self.instance._state.adding else 'changed',  # pylint: disable=protected-access\n                 )\n             )\n         if commit:\n@@ -458,7 +458,7 @@ class BaseModelForm(BaseForm):\n         else:\n             # If not committing, add a method to the form to allow deferred\n             # saving of m2m data.\n-            self.save_m2m = self._save_m2m\n+            self.save_m2m = self._save_m2m  # pylint: disable=attribute-defined-outside-init\n         return self.instance\n \n     save.alters_data = True\n@@ -590,7 +590,7 @@ class BaseModelFormSet(BaseFormSet):\n         pk_required = i < self.initial_form_count()\n         if pk_required:\n             if self.is_bound:\n-                pk_key = '%s-%s' % (self.add_prefix(i), self.model._meta.pk.name)\n+                pk_key = '%s-%s' % (self.add_prefix(i), self.model._meta.pk.name)  # pylint: disable=protected-access\n                 try:\n                     pk = self.data[pk_key]\n                 except KeyError:\n@@ -598,7 +598,7 @@ class BaseModelFormSet(BaseFormSet):\n                     # with POST data.\n                     pass\n                 else:\n-                    to_python = self._get_to_python(self.model._meta.pk)\n+                    to_python = self._get_to_python(self.model._meta.pk)  # pylint: disable=protected-access\n                     try:\n                         pk = to_python(pk)\n                     except ValidationError:\n@@ -617,7 +617,7 @@ class BaseModelFormSet(BaseFormSet):\n                 pass\n         form = super()._construct_form(i, **kwargs)\n         if pk_required:\n-            form.fields[self.model._meta.pk.name].required = True\n+            form.fields[self.model._meta.pk.name].required = True  # pylint: disable=protected-access\n         return form\n \n     def get_queryset(self):\n"
}