{
  "patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 64be087bf1..7938c7cdc1 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -134,6 +134,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n     view_on_site = True\n     show_full_result_count = True\n     checks_class = BaseModelAdminChecks\n+    \n+    # Attributes set by subclasses or during initialization\n+    admin_site = None\n+    inlines = ()\n \n     def check(self, **kwargs):\n         return self.checks_class().check(self, **kwargs)\n@@ -178,7 +182,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             # rendered output. formfield can be None if it came from a\n             # OneToOneField with parent_link=True or a M2M intermediary.\n             if formfield and db_field.name not in self.raw_id_fields:\n-                related_modeladmin = self.admin_site._registry.get(\n+                related_modeladmin = self.admin_site._registry.get(  # pylint: disable=protected-access\n                     db_field.remote_field.model\n                 )\n                 wrapper_kwargs = {}\n@@ -214,7 +218,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         # For any other type of field, just call its formfield() method.\n         return db_field.formfield(**kwargs)\n \n-    def formfield_for_choice_field(self, db_field, request, **kwargs):\n+    def formfield_for_choice_field(self, db_field, _request, **kwargs):\n         \"\"\"\n         Get a form Field for a database Field that has declared choices.\n         \"\"\"\n@@ -239,11 +243,11 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         ordering.  Otherwise don't specify the queryset, let the field decide\n         (return None in that case).\n         \"\"\"\n-        related_admin = self.admin_site._registry.get(db_field.remote_field.model)\n+        related_admin = self.admin_site._registry.get(db_field.remote_field.model)  # pylint: disable=protected-access\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n             if ordering is not None and ordering != ():\n-                return db_field.remote_field.model._default_manager.using(db).order_by(\n+                return db_field.remote_field.model._default_manager.using(db).order_by(  # pylint: disable=protected-access\n                     *ordering\n                 )\n         return None\n@@ -284,7 +288,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         \"\"\"\n         # If it uses an intermediary model that isn't auto created, don't show\n         # a field in admin.\n-        if not db_field.remote_field.through._meta.auto_created:\n+        if not db_field.remote_field.through._meta.auto_created:  # pylint: disable=protected-access\n             return None\n         db = kwargs.get(\"using\")\n \n@@ -324,7 +328,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             )\n         return form_field\n \n-    def get_autocomplete_fields(self, request):\n+    def get_autocomplete_fields(self, _request):\n         \"\"\"\n         Return a list of ForeignKey and/or ManyToMany fields which should use\n         an autocomplete widget.\n@@ -336,7 +340,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             return None\n \n         if callable(self.view_on_site):\n-            return self.view_on_site(obj)\n+            return self.view_on_site(obj)  # pylint: disable=not-callable\n         elif hasattr(obj, \"get_absolute_url\"):\n             # use the ContentType lookup if view_on_site is True\n             return reverse(\n@@ -356,7 +360,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         except AttributeError:\n             return mark_safe(self.admin_site.empty_value_display)\n \n-    def get_exclude(self, request, obj=None):\n+    def get_exclude(self, _request, _obj=None):\n         \"\"\"\n         Hook for specifying exclude.\n         \"\"\"\n@@ -380,7 +384,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             return self.fieldsets\n         return [(None, {\"fields\": self.get_fields(request, obj)})]\n \n-    def get_inlines(self, request, obj):\n+    def get_inlines(self, _request, _obj):\n         \"\"\"Hook for specifying custom inlines.\"\"\"\n         return self.inlines\n \n@@ -396,6 +400,14 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         \"\"\"\n         return self.readonly_fields\n \n+    def _get_form_for_get_fields(self, request, obj):\n+        \"\"\"\n+        Return a Form class for use in get_fields. Subclasses must implement this.\n+        \"\"\"\n+        raise NotImplementedError(\n+            \"Subclasses must implement _get_form_for_get_fields method.\"\n+        )\n+\n     def get_prepopulated_fields(self, request, obj=None):\n         \"\"\"\n         Hook for specifying custom prepopulated fields.\n"
}