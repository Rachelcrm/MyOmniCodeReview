{
  "patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..9059aff4d0 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -106,15 +106,15 @@ class ServerHandler(simple_server.ServerHandler):\n         if 'Content-Length' not in self.headers:\n             self.headers['Connection'] = 'close'\n         # Persistent connections require threading server.\n-        elif not isinstance(self.request_handler.server, socketserver.ThreadingMixIn):\n+        elif not isinstance(self.request_handler.server, socketserver.ThreadingMixIn):  # pylint: disable=no-member\n             self.headers['Connection'] = 'close'\n         # Mark the connection for closing if it's set as such above or if the\n         # application sent the header.\n         if self.headers.get('Connection') == 'close':\n-            self.request_handler.close_connection = True\n+            self.request_handler.close_connection = True  # pylint: disable=attribute-defined-outside-init\n \n     def close(self):\n-        self.get_stdin()._read_limited()\n+        self.get_stdin()._read_limited()  # pylint: disable=protected-access\n         super().close()\n \n \n@@ -125,7 +125,7 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n         # Short-circuit parent method to not call socket.getfqdn\n         return self.client_address[0]\n \n-    def log_message(self, format, *args):\n+    def log_message(self, fmt, *args):\n         extra = {\n             'request': self.request,\n             'server_time': self.log_date_time_string(),\n@@ -153,7 +153,7 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n         else:\n             level = logger.info\n \n-        level(format, *args, extra=extra)\n+        level(fmt, *args, extra=extra)\n \n     def get_environ(self):\n         # Strip all headers with underscores in the name before constructing\n@@ -178,11 +178,11 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n \n     def handle_one_request(self):\n         \"\"\"Copy of WSGIRequestHandler.handle() but with different ServerHandler\"\"\"\n-        self.raw_requestline = self.rfile.readline(65537)\n+        self.raw_requestline = self.rfile.readline(65537)  # pylint: disable=attribute-defined-outside-init\n         if len(self.raw_requestline) > 65536:\n-            self.requestline = ''\n-            self.request_version = ''\n-            self.command = ''\n+            self.requestline = ''  # pylint: disable=attribute-defined-outside-init\n+            self.request_version = ''  # pylint: disable=attribute-defined-outside-init\n+            self.command = ''  # pylint: disable=attribute-defined-outside-init\n             self.send_error(414)\n             return\n \n@@ -192,7 +192,7 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n         handler = ServerHandler(\n             self.rfile, self.wfile, self.get_stderr(), self.get_environ()\n         )\n-        handler.request_handler = self      # backpointer for logging & connection closing\n+        handler.request_handler = self      # backpointer for logging & connection closing  # pylint: disable=attribute-defined-outside-init\n         handler.run(self.server.get_app())\n \n \n@@ -210,6 +210,6 @@ def run(addr, port, wsgi_handler, ipv6=False, threading=False, server_cls=WSGISe\n         # termination before it quits. This will make auto-reloader faster\n         # and will prevent the need to kill the server manually if a thread\n         # isn't terminating correctly.\n-        httpd.daemon_threads = True\n+        httpd.daemon_threads = True  # pylint: disable=attribute-defined-outside-init\n     httpd.set_app(wsgi_handler)\n     httpd.serve_forever()\n"
}