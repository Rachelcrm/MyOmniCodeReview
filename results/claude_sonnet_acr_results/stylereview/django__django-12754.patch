{
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 30616c0172..d9394dc63e 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -93,7 +93,7 @@ class MigrationAutodetector:\n         the related fields change during renames).\n         \"\"\"\n         fields_def = []\n-        for name, field in sorted(fields.items()):\n+        for _, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n                 del deconstruction[2]['to']\n@@ -135,23 +135,23 @@ class MigrationAutodetector:\n         self.new_unmanaged_keys = set()\n         for al, mn in self.from_state.models:\n             model = self.old_apps.get_model(al, mn)\n-            if not model._meta.managed:\n+            if not model._meta.managed:  # pylint: disable=protected-access\n                 self.old_unmanaged_keys.add((al, mn))\n             elif al not in self.from_state.real_apps:\n-                if model._meta.proxy:\n+                if model._meta.proxy:  # pylint: disable=protected-access\n                     self.old_proxy_keys.add((al, mn))\n                 else:\n                     self.old_model_keys.add((al, mn))\n \n         for al, mn in self.to_state.models:\n             model = self.new_apps.get_model(al, mn)\n-            if not model._meta.managed:\n+            if not model._meta.managed:  # pylint: disable=protected-access\n                 self.new_unmanaged_keys.add((al, mn))\n             elif (\n                 al not in self.from_state.real_apps or\n                 (convert_apps and al in convert_apps)\n             ):\n-                if model._meta.proxy:\n+                if model._meta.proxy:  # pylint: disable=protected-access\n                     self.new_proxy_keys.add((al, mn))\n                 else:\n                     self.new_model_keys.add((al, mn))\n@@ -227,12 +227,12 @@ class MigrationAutodetector:\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n             for field_name in old_model_state.fields:\n-                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)\n+                old_field = self.old_apps.get_model(app_label, old_model_name)._meta.get_field(field_name)  # pylint: disable=protected-access\n                 if (hasattr(old_field, \"remote_field\") and getattr(old_field.remote_field, \"through\", None) and\n-                        not old_field.remote_field.through._meta.auto_created):\n+                        not old_field.remote_field.through._meta.auto_created):  # pylint: disable=protected-access\n                     through_key = (\n-                        old_field.remote_field.through._meta.app_label,\n-                        old_field.remote_field.through._meta.model_name,\n+                        old_field.remote_field.through._meta.app_label,  # pylint: disable=protected-access\n+                        old_field.remote_field.through._meta.model_name,  # pylint: disable=protected-access\n                     )\n                     self.through_users[through_key] = (app_label, old_model_name, field_name)\n \n@@ -274,7 +274,7 @@ class MigrationAutodetector:\n                 for operation in list(self.generated_operations[app_label]):\n                     deps_satisfied = True\n                     operation_dependencies = set()\n-                    for dep in operation._auto_deps:\n+                    for dep in operation._auto_deps:  # pylint: disable=protected-access\n                         # Temporarily resolve the swappable dependency to\n                         # prevent circular references. While keeping the\n                         # dependency checks on the resolved model, add the\n@@ -343,7 +343,7 @@ class MigrationAutodetector:\n             # construct a dependency graph for intra-app dependencies\n             dependency_graph = {op: set() for op in ops}\n             for op in ops:\n-                for dep in op._auto_deps:\n+                for dep in op._auto_deps:  # pylint: disable=protected-access\n                     # Resolve intra-app dependencies to handle circular\n                     # references involving a swappable model.\n                     dep = self._resolve_dependency(dep)[0]\n@@ -436,7 +436,7 @@ class MigrationAutodetector:\n \n     def add_operation(self, app_label, operation, dependencies=None, beginning=False):\n         # Dependencies are (app_label, model_name, field_name, create/delete as True/False)\n-        operation._auto_deps = dependencies or []\n+        operation._auto_deps = dependencies or []  # pylint: disable=protected-access\n         if beginning:\n             self.generated_operations.setdefault(app_label, []).insert(0, operation)\n         else:\n@@ -452,7 +452,7 @@ class MigrationAutodetector:\n             base_names = [base.__name__ for base in model.__bases__]\n             string_version = \"%s.%s\" % (item[0], item[1])\n             if (\n-                model._meta.swappable or\n+                model._meta.swappable or  # pylint: disable=protected-access\n                 \"AbstractUser\" in base_names or\n                 \"AbstractBaseUser\" in base_names or\n                 settings.AUTH_USER_MODEL.lower() == string_version.lower()\n@@ -482,7 +482,7 @@ class MigrationAutodetector:\n                     rem_model_fields_def = self.only_relation_agnostic_fields(rem_model_state.fields)\n                     if model_fields_def == rem_model_fields_def:\n                         if self.questioner.ask_rename_model(rem_model_state, model_state):\n-                            model_opts = self.new_apps.get_model(app_label, model_name)._meta\n+                            model_opts = self.new_apps.get_model(app_label, model_name)._meta  # pylint: disable=protected-access\n                             dependencies = []\n                             for field in model_opts.get_fields():\n                                 if field.is_relation:\n@@ -527,7 +527,7 @@ class MigrationAutodetector:\n         )\n         for app_label, model_name in all_added_models:\n             model_state = self.to_state.models[app_label, model_name]\n-            model_opts = self.new_apps.get_model(app_label, model_name)._meta\n+            model_opts = self.new_apps.get_model(app_label, model_name)._meta  # pylint: disable=protected-access\n             # Gather related fields\n             related_fields = {}\n             primary_key_rel = None\n@@ -541,12 +541,12 @@ class MigrationAutodetector:\n                     # through will be none on M2Ms on swapped-out models;\n                     # we can treat lack of through as auto_created=True, though.\n                     if (getattr(field.remote_field, \"through\", None) and\n-                            not field.remote_field.through._meta.auto_created):\n+                            not field.remote_field.through._meta.auto_created):  # pylint: disable=protected-access\n                         related_fields[field.name] = field\n             for field in model_opts.local_many_to_many:\n                 if field.remote_field.model:\n                     related_fields[field.name] = field\n-                if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n+                if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:  # pylint: disable=protected-access\n                     related_fields[field.name] = field\n             # Are there indexes/unique|index_together to defer?\n             indexes = model_state.options.pop('indexes')\n@@ -566,8 +566,8 @@ class MigrationAutodetector:\n             # Depend on the other end of the primary key if it's a relation\n             if primary_key_rel:\n                 dependencies.append((\n-                    primary_key_rel._meta.app_label,\n-                    primary_key_rel._meta.object_name,\n+                    primary_key_rel._meta.app_label,  # pylint: disable=protected-access\n+                    primary_key_rel._meta.object_name,  # pylint: disable=protected-access\n                     None,\n                     True\n                 ))\n@@ -664,9 +664,9 @@ class MigrationAutodetector:\n             if (app_label, model_name) in self.old_proxy_keys:\n                 for related_object in model_opts.related_objects:\n                     self.add_operation(\n-                        related_object.related_model._meta.app_label,\n+                        related_object.related_model._meta.app_label,  # pylint: disable=protected-access\n                         operations.AlterField(\n-                            model_name=related_object.related_model._meta.object_name,\n+                            model_name=related_object.related_model._meta.object_name,  # pylint: disable=protected-access\n                             name=related_object.field.name,\n                             field=related_object.field,\n                         ),\n"
}