{
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 88c9ca9f28..5c6bd3e40b 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -406,7 +406,7 @@ class Field(RegisterLookupMixin):\n         from django.db.models.expressions import Col\n         return Col(self.model._meta.db_table, self)\n \n-    def select_format(self, compiler, sql, params):\n+    def select_format(self, _compiler, sql, params):\n         \"\"\"\n         Custom format for select clauses. For example, GIS columns need to be\n         selected as AsText(table.col) on MySQL as the table.col data can't be\n@@ -510,7 +510,7 @@ class Field(RegisterLookupMixin):\n         Uses deconstruct() to clone a new copy of this Field.\n         Will not preserve any class attachments/attribute names.\n         \"\"\"\n-        name, path, args, kwargs = self.deconstruct()\n+        _, _, args, kwargs = self.deconstruct()\n         return self.__class__(*args, **kwargs)\n \n     def __eq__(self, other):\n@@ -553,9 +553,12 @@ class Field(RegisterLookupMixin):\n         # intended to be altered after initial creation.\n         obj = copy.copy(self)\n         if self.remote_field:\n-            obj.remote_field = copy.copy(self.remote_field)\n+            # Copy the remote_field using the same approach as copy.copy()\n+            # to avoid setting attributes outside __init__\n+            remote_field_copy = copy.copy(self.remote_field)\n             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:\n-                obj.remote_field.field = obj\n+                remote_field_copy.field = obj\n+            obj.__dict__['remote_field'] = remote_field_copy\n         memodict[id(self)] = obj\n         return obj\n \n@@ -587,7 +590,7 @@ class Field(RegisterLookupMixin):\n         return _load_field, (self.model._meta.app_label, self.model._meta.object_name,\n                              self.name)\n \n-    def get_pk_value_on_save(self, instance):\n+    def get_pk_value_on_save(self, _instance):\n         \"\"\"\n         Hook to generate new PK values on save. This method is called when\n         saving instances with no primary key value set. If this method returns\n@@ -630,7 +633,7 @@ class Field(RegisterLookupMixin):\n         if errors:\n             raise exceptions.ValidationError(errors)\n \n-    def validate(self, value, model_instance):\n+    def validate(self, value, _model_instance):\n         \"\"\"\n         Validate value and raise ValidationError if necessary. Subclasses\n         should override this to provide validation logic.\n@@ -644,7 +647,7 @@ class Field(RegisterLookupMixin):\n                 if isinstance(option_value, (list, tuple)):\n                     # This is an optgroup, so look inside the group for\n                     # options.\n-                    for optgroup_key, optgroup_value in option_value:\n+                    for optgroup_key, _ in option_value:\n                         if value == optgroup_key:\n                             return\n                 elif value == option_key:\n"
}