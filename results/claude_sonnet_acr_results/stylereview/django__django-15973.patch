{
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex ad32437630..181d452ede 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -290,7 +290,7 @@ class MigrationAutodetector:\n                 for operation in list(self.generated_operations[app_label]):\n                     deps_satisfied = True\n                     operation_dependencies = set()\n-                    for dep in operation._auto_deps:\n+                    for dep in operation._auto_deps:  # pylint: disable=protected-access\n                         # Temporarily resolve the swappable dependency to\n                         # prevent circular references. While keeping the\n                         # dependency checks on the resolved model, add the\n@@ -386,7 +386,7 @@ class MigrationAutodetector:\n             # construct a dependency graph for intra-app dependencies\n             dependency_graph = {op: set() for op in ops}\n             for op in ops:\n-                for dep in op._auto_deps:\n+                for dep in op._auto_deps:  # pylint: disable=protected-access\n                     # Resolve intra-app dependencies to handle circular\n                     # references involving a swappable model.\n                     dep = self._resolve_dependency(dep)[0]\n@@ -484,7 +484,7 @@ class MigrationAutodetector:\n     def add_operation(self, app_label, operation, dependencies=None, beginning=False):\n         # Dependencies are\n         # (app_label, model_name, field_name, create/delete as True/False)\n-        operation._auto_deps = dependencies or []\n+        operation._auto_deps = dependencies or []  # pylint: disable=protected-access\n         if beginning:\n             self.generated_operations.setdefault(app_label, []).insert(0, operation)\n         else:\n@@ -1256,7 +1256,7 @@ class MigrationAutodetector:\n                 new_value,\n                 index_together_app_label,\n                 index_together_model_name,\n-                dependencies,\n+                _,\n             ) in self._get_altered_foo_together_operations(\n                 operations.AlterIndexTogether.option_name\n             ):\n@@ -1705,7 +1705,7 @@ class MigrationAutodetector:\n         app_dependencies = {}\n         for app_label, migrations in changes.items():\n             for migration in migrations:\n-                for dep_app_label, name in migration.dependencies:\n+                for dep_app_label, _ in migration.dependencies:\n                     app_dependencies.setdefault(app_label, set()).add(dep_app_label)\n         required_apps = set(app_labels)\n         # Keep resolving till there's no change\n"
}