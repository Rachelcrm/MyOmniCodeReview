{
  "patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..65ccda4db4 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -50,6 +50,9 @@ class BaseUnorderedSequenceSerializer(BaseSequenceSerializer):\n     def __init__(self, value):\n         super().__init__(sorted(value, key=repr))\n \n+    def _format(self):\n+        return \"[%s]\"\n+\n \n class BaseSimpleSerializer(BaseSerializer):\n     def serialize(self):\n@@ -134,7 +137,7 @@ class EnumSerializer(BaseSerializer):\n             if PY311:\n                 members = list(self.value)\n             else:\n-                members, _ = enum._decompose(enum_class, self.value)\n+                members, _ = enum._decompose(enum_class, self.value)  # pylint: disable=protected-access,no-member\n                 members = reversed(members)\n         else:\n             members = (self.value,)\n@@ -227,7 +230,7 @@ class IterableSerializer(BaseSerializer):\n \n class ModelFieldSerializer(DeconstructableSerializer):\n     def serialize(self):\n-        attr_name, path, args, kwargs = self.value.deconstruct()\n+        _, path, args, kwargs = self.value.deconstruct()\n         return self.serialize_deconstructed(path, args, kwargs)\n \n \n@@ -390,7 +393,7 @@ def serializer_factory(value):\n     # Anything that knows how to deconstruct itself.\n     if hasattr(value, \"deconstruct\"):\n         return DeconstructableSerializer(value)\n-    for type_, serializer_cls in Serializer._registry.items():\n+    for type_, serializer_cls in Serializer._registry.items():  # pylint: disable=protected-access\n         if isinstance(value, type_):\n             return serializer_cls(value)\n     raise ValueError(\n"
}