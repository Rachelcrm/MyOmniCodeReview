{
  "patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7a99b12691..a294c470ee 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -21,6 +21,7 @@ class FieldFile(File, AltersData):\n         self.field = field\n         self.storage = field.storage\n         self._committed = True\n+        self._file = None\n \n     def __eq__(self, other):\n         # Older code may be expecting FileField values to be simple strings.\n@@ -66,7 +67,6 @@ class FieldFile(File, AltersData):\n         self._require_file()\n         return self.storage.url(self.name)\n \n-    @property\n     def size(self):\n         self._require_file()\n         if not self._committed:\n@@ -317,8 +317,8 @@ class FileField(Field):\n             file.save(file.name, file.file, save=False)\n         return file\n \n-    def contribute_to_class(self, cls, name, **kwargs):\n-        super().contribute_to_class(cls, name, **kwargs)\n+    def contribute_to_class(self, cls, name, private_only=False):\n+        super().contribute_to_class(cls, name, private_only=private_only)\n         setattr(cls, self.attname, self.descriptor_class(self))\n \n     def generate_filename(self, instance, filename):\n@@ -346,8 +346,10 @@ class FileField(Field):\n             # database, so leaving False as-is is not acceptable.\n             setattr(instance, self.name, data or \"\")\n \n-    def formfield(self, **kwargs):\n+    def formfield(self, form_class=None, choices_form_class=None, **kwargs):\n         return super().formfield(\n+            form_class=form_class,\n+            choices_form_class=choices_form_class,\n             **{\n                 \"form_class\": forms.FileField,\n                 \"max_length\": self.max_length,\n@@ -411,7 +413,7 @@ class ImageField(FileField):\n \n     def _check_image_library_installed(self):\n         try:\n-            from PIL import Image  # NOQA\n+            from PIL import Image  # noqa: F401\n         except ImportError:\n             return [\n                 checks.Error(\n@@ -435,8 +437,8 @@ class ImageField(FileField):\n             kwargs[\"height_field\"] = self.height_field\n         return name, path, args, kwargs\n \n-    def contribute_to_class(self, cls, name, **kwargs):\n-        super().contribute_to_class(cls, name, **kwargs)\n+    def contribute_to_class(self, cls, name, private_only=False):\n+        super().contribute_to_class(cls, name, private_only=private_only)\n         # Attach update_dimension_fields so that dimension fields declared\n         # after their corresponding image field don't stay cleared by\n         # Model.__init__, see bug #11196.\n@@ -444,7 +446,7 @@ class ImageField(FileField):\n         if not cls._meta.abstract:\n             signals.post_init.connect(self.update_dimension_fields, sender=cls)\n \n-    def update_dimension_fields(self, instance, force=False, *args, **kwargs):\n+    def update_dimension_fields(self, instance, *args, force=False, **kwargs):  # pylint: disable=unused-argument\n         \"\"\"\n         Update field's width and height fields, if defined.\n \n@@ -501,8 +503,10 @@ class ImageField(FileField):\n         if self.height_field:\n             setattr(instance, self.height_field, height)\n \n-    def formfield(self, **kwargs):\n+    def formfield(self, form_class=None, choices_form_class=None, **kwargs):\n         return super().formfield(\n+            form_class=form_class,\n+            choices_form_class=choices_form_class,\n             **{\n                 \"form_class\": forms.ImageField,\n                 **kwargs,\n"
}