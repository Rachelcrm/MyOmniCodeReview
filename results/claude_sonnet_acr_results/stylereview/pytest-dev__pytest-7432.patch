{
  "patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..794095374 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -52,9 +52,9 @@ def pytest_configure(config: Config) -> None:\n         import pytest\n \n         old = pytest.xfail\n-        config._cleanup.append(lambda: setattr(pytest, \"xfail\", old))\n+        config._cleanup.append(lambda: setattr(pytest, \"xfail\", old))  # pylint: disable=protected-access\n \n-        def nop(*args, **kwargs):\n+        def nop(*_args, **_kwargs):  # pylint: disable=unused-argument\n             pass\n \n         nop.Exception = xfail.Exception  # type: ignore[attr-defined] # noqa: F821\n@@ -105,8 +105,8 @@ def evaluate_condition(item: Item, mark: Mark, condition: object) -> Tuple[bool,\n         if hasattr(item, \"obj\"):\n             globals_.update(item.obj.__globals__)  # type: ignore[attr-defined]\n         try:\n-            condition_code = _pytest._code.compile(condition, mode=\"eval\")\n-            result = eval(condition_code, globals_)\n+            condition_code = _pytest._code.compile(condition, mode=\"eval\")  # pylint: disable=protected-access\n+            result = eval(condition_code, globals_)  # pylint: disable=eval-used\n         except SyntaxError as exc:\n             msglines = [\n                 \"Error evaluating %r condition\" % mark.name,\n@@ -115,7 +115,7 @@ def evaluate_condition(item: Item, mark: Mark, condition: object) -> Tuple[bool,\n                 \"SyntaxError: invalid syntax\",\n             ]\n             fail(\"\\n\".join(msglines), pytrace=False)\n-        except Exception as exc:\n+        except Exception as exc:  # pylint: disable=broad-exception-caught\n             msglines = [\n                 \"Error evaluating %r condition\" % mark.name,\n                 \"    \" + condition,\n@@ -127,7 +127,7 @@ def evaluate_condition(item: Item, mark: Mark, condition: object) -> Tuple[bool,\n     else:\n         try:\n             result = bool(condition)\n-        except Exception as exc:\n+        except Exception as exc:  # pylint: disable=broad-exception-caught\n             msglines = [\n                 \"Error evaluating %r condition as a boolean\" % mark.name,\n                 *traceback.format_exception_only(type(exc), exc),\n@@ -231,24 +231,24 @@ unexpectedsuccess_key = StoreKey[str]()\n \n @hookimpl(tryfirst=True)\n def pytest_runtest_setup(item: Item) -> None:\n-    item._store[skipped_by_mark_key] = False\n+    item._store[skipped_by_mark_key] = False  # pylint: disable=protected-access\n \n     skipped = evaluate_skip_marks(item)\n     if skipped:\n-        item._store[skipped_by_mark_key] = True\n+        item._store[skipped_by_mark_key] = True  # pylint: disable=protected-access\n         skip(skipped.reason)\n \n     if not item.config.option.runxfail:\n-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n+        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)  # pylint: disable=protected-access\n         if xfailed and not xfailed.run:\n             xfail(\"[NOTRUN] \" + xfailed.reason)\n \n \n @hookimpl(hookwrapper=True)\n def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n-    xfailed = item._store.get(xfailed_key, None)\n+    xfailed = item._store.get(xfailed_key, None)  # pylint: disable=protected-access\n     if xfailed is None:\n-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n+        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)  # pylint: disable=protected-access\n \n     if not item.config.option.runxfail:\n         if xfailed and not xfailed.run:\n@@ -261,10 +261,10 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n     outcome = yield\n     rep = outcome.get_result()\n-    xfailed = item._store.get(xfailed_key, None)\n+    xfailed = item._store.get(xfailed_key, None)  # pylint: disable=protected-access\n     # unittest special case, see setting of unexpectedsuccess_key\n-    if unexpectedsuccess_key in item._store and rep.when == \"call\":\n-        reason = item._store[unexpectedsuccess_key]\n+    if unexpectedsuccess_key in item._store and rep.when == \"call\":  # pylint: disable=protected-access\n+        reason = item._store[unexpectedsuccess_key]  # pylint: disable=protected-access\n         if reason:\n             rep.longrepr = \"Unexpected success: {}\".format(reason)\n         else:\n@@ -292,7 +292,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n     elif (\n-        item._store.get(skipped_by_mark_key, True)\n+        item._store.get(skipped_by_mark_key, True)  # pylint: disable=protected-access\n         and rep.skipped\n         and type(rep.longrepr) is tuple\n     ):\n"
}