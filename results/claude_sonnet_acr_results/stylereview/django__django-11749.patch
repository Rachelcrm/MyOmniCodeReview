{
  "patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 5f2e64761e..8779b03168 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -102,7 +102,7 @@ def call_command(command_name, *args, **options):\n         try:\n             app_name = get_commands()[command_name]\n         except KeyError:\n-            raise CommandError(\"Unknown command: %r\" % command_name)\n+            raise CommandError(\"Unknown command: %r\" % command_name) from None\n \n         if isinstance(app_name, BaseCommand):\n             # If the command is already loaded, use it directly.\n@@ -115,14 +115,14 @@ def call_command(command_name, *args, **options):\n     # Use the `dest` option name from the parser option\n     opt_mapping = {\n         min(s_opt.option_strings).lstrip('-').replace('-', '_'): s_opt.dest\n-        for s_opt in parser._actions if s_opt.option_strings\n+        for s_opt in parser._actions if s_opt.option_strings  # pylint: disable=protected-access\n     }\n     arg_options = {opt_mapping.get(key, key): value for key, value in options.items()}\n     parse_args = [str(a) for a in args]\n \n     def get_actions(parser):\n         # Parser actions and actions from sub-parser choices.\n-        for opt in parser._actions:\n+        for opt in parser._actions:  # pylint: disable=protected-access\n             if isinstance(opt, _SubParsersAction):\n                 for sub_opt in opt.choices.values():\n                     yield from get_actions(sub_opt)\n@@ -137,7 +137,7 @@ def call_command(command_name, *args, **options):\n         for opt in parser_actions if opt.required and opt.dest in options\n     ]\n     defaults = parser.parse_args(args=parse_args)\n-    defaults = dict(defaults._get_kwargs(), **arg_options)\n+    defaults = dict(defaults._get_kwargs(), **arg_options)  # pylint: disable=protected-access\n     # Raise an error if any unknown options were passed.\n     stealth_options = set(command.base_stealth_options + command.stealth_options)\n     dest_parameters = {action.dest for action in parser_actions}\n@@ -192,12 +192,12 @@ class ManagementUtility:\n             style = color_style()\n             for app in sorted(commands_dict):\n                 usage.append(\"\")\n-                usage.append(style.NOTICE(\"[%s]\" % app))\n+                usage.append(getattr(style, 'NOTICE', str)(\"[%s]\" % app))\n                 for name in sorted(commands_dict[app]):\n                     usage.append(\"    %s\" % name)\n             # Output an extra note if settings are not properly configured\n             if self.settings_exception is not None:\n-                usage.append(style.NOTICE(\n+                usage.append(getattr(style, 'NOTICE', str)(\n                     \"Note that only Django core commands are listed \"\n                     \"as settings are not properly configured (error: %s).\"\n                     % self.settings_exception))\n@@ -220,7 +220,7 @@ class ManagementUtility:\n                 # following line will retrigger an ImproperlyConfigured exception\n                 # (get_commands() swallows the original one) so the user is\n                 # informed about it.\n-                settings.INSTALLED_APPS\n+                settings.INSTALLED_APPS  # pylint: disable=pointless-statement\n             else:\n                 sys.stderr.write(\"No Django settings specified.\\n\")\n             possible_matches = get_close_matches(subcommand, commands)\n@@ -292,7 +292,7 @@ class ManagementUtility:\n             parser = subcommand_cls.create_parser('', cwords[0])\n             options.extend(\n                 (min(s_opt.option_strings), s_opt.nargs != 0)\n-                for s_opt in parser._actions if s_opt.option_strings\n+                for s_opt in parser._actions if s_opt.option_strings  # pylint: disable=protected-access\n             )\n             # filter out previously specified options from available options\n             prev_opts = {x.split('=')[0] for x in cwords[1:cword - 1]}\n@@ -347,7 +347,7 @@ class ManagementUtility:\n             if subcommand == 'runserver' and '--noreload' not in self.argv:\n                 try:\n                     autoreload.check_errors(django.setup)()\n-                except Exception:\n+                except Exception:  # pylint: disable=broad-except\n                     # The exception will be raised later in the child process\n                     # started by the autoreloader. Pretend it didn't happen by\n                     # loading an empty list of applications.\n"
}