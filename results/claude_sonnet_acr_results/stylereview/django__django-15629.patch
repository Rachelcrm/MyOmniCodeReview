{
  "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 696bfd7742..f927b483ee 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -35,6 +35,7 @@ def _is_relevant_relation(relation, altered_field):\n \n \n def _all_related_fields(model):\n+    # pylint: disable=protected-access\n     return model._meta._get_fields(\n         forward=False,\n         reverse=True,\n@@ -135,12 +136,12 @@ class BaseDatabaseSchemaEditor:\n \n     sql_delete_procedure = \"DROP PROCEDURE %(procedure)s\"\n \n-    def __init__(self, connection, collect_sql=False, atomic=True):\n+    def __init__(self, connection, collect_sql=False, atomic_migration=True):\n         self.connection = connection\n         self.collect_sql = collect_sql\n         if self.collect_sql:\n             self.collected_sql = []\n-        self.atomic_migration = self.connection.features.can_rollback_ddl and atomic\n+        self.atomic_migration = self.connection.features.can_rollback_ddl and atomic_migration\n \n     # State-managing methods\n \n@@ -198,6 +199,7 @@ class BaseDatabaseSchemaEditor:\n         \"\"\"Take a model and return its table definition.\"\"\"\n         # Add any unique_togethers (always deferred, as some fields might be\n         # created afterward, like geometry fields with some backends).\n+        # pylint: disable=protected-access\n         for field_names in model._meta.unique_together:\n             fields = [model._meta.get_field(field) for field in field_names]\n             self.deferred_sql.append(self._create_unique_sql(model, fields))\n@@ -220,6 +222,7 @@ class BaseDatabaseSchemaEditor:\n             params.extend(extra_params)\n             # FK.\n             if field.remote_field and field.db_constraint:\n+                # pylint: disable=protected-access\n                 to_table = field.remote_field.model._meta.db_table\n                 to_column = field.remote_field.model._meta.get_field(\n                     field.remote_field.field_name\n@@ -250,11 +253,13 @@ class BaseDatabaseSchemaEditor:\n                 \"BigAutoField\",\n                 \"SmallAutoField\",\n             ):\n+                # pylint: disable=protected-access\n                 autoinc_sql = self.connection.ops.autoinc_sql(\n                     model._meta.db_table, field.column\n                 )\n                 if autoinc_sql:\n                     self.deferred_sql.extend(autoinc_sql)\n+        # pylint: disable=protected-access\n         constraints = [\n             constraint.constraint_sql(model, self)\n             for constraint in model._meta.constraints\n@@ -266,6 +271,7 @@ class BaseDatabaseSchemaEditor:\n             ),\n         }\n         if model._meta.db_tablespace:\n+            # pylint: disable=protected-access\n             tablespace_sql = self.connection.ops.tablespace_sql(\n                 model._meta.db_tablespace\n             )\n@@ -322,6 +328,7 @@ class BaseDatabaseSchemaEditor:\n         elif field.unique:\n             yield \"UNIQUE\"\n         # Optionally add the tablespace if it's an implicitly indexed column.\n+        # pylint: disable=protected-access\n         tablespace = field.db_tablespace or model._meta.db_tablespace\n         if (\n             tablespace\n@@ -357,14 +364,14 @@ class BaseDatabaseSchemaEditor:\n             params,\n         )\n \n-    def skip_default(self, field):\n+    def skip_default(self, _field):\n         \"\"\"\n         Some backends don't accept default values for certain columns types\n         (i.e. MySQL longtext and longblob).\n         \"\"\"\n         return False\n \n-    def skip_default_on_alter(self, field):\n+    def skip_default_on_alter(self, _field):\n         \"\"\"\n         Some backends don't accept default values for certain columns types\n         (i.e. MySQL longtext and longblob) in the ALTER COLUMN statement.\n@@ -380,7 +387,7 @@ class BaseDatabaseSchemaEditor:\n             \"requires_literal_defaults must provide a prepare_default() method\"\n         )\n \n-    def _column_default_sql(self, field):\n+    def _column_default_sql(self, _field):\n         \"\"\"\n         Return the SQL to use in a DEFAULT clause. The resulting string should\n         contain a '%s' placeholder for a default value.\n@@ -442,6 +449,7 @@ class BaseDatabaseSchemaEditor:\n         self.deferred_sql.extend(self._model_indexes_sql(model))\n \n         # Make M2M tables\n+        # pylint: disable=protected-access\n         for field in model._meta.local_many_to_many:\n             if field.remote_field.through._meta.auto_created:\n                 self.create_model(field.remote_field.through)\n@@ -449,11 +457,13 @@ class BaseDatabaseSchemaEditor:\n     def delete_model(self, model):\n         \"\"\"Delete a model from the database.\"\"\"\n         # Handle auto-created intermediary models\n+        # pylint: disable=protected-access\n         for field in model._meta.local_many_to_many:\n             if field.remote_field.through._meta.auto_created:\n                 self.delete_model(field.remote_field.through)\n \n         # Delete the table\n+        # pylint: disable=protected-access\n         self.execute(\n             self.sql_delete_table\n             % {\n@@ -461,6 +471,7 @@ class BaseDatabaseSchemaEditor:\n             }\n         )\n         # Remove all deferred statements referencing the deleted table.\n+        # pylint: disable=protected-access\n         for sql in list(self.deferred_sql):\n             if isinstance(sql, Statement) and sql.references_table(\n                 model._meta.db_table\n"
}