{
  "patch": "diff --git a/django/contrib/sessions/middleware.py b/django/contrib/sessions/middleware.py\nindex 95ad30ce7f..577768b820 100644\n--- a/django/contrib/sessions/middleware.py\n+++ b/django/contrib/sessions/middleware.py\n@@ -61,12 +61,12 @@ class SessionMiddleware(MiddlewareMixin):\n                 if response.status_code != 500:\n                     try:\n                         request.session.save()\n-                    except UpdateError:\n+                    except UpdateError as e:\n                         raise SuspiciousOperation(\n                             \"The request's session was deleted before the \"\n                             \"request completed. The user may have logged \"\n                             \"out in a concurrent request, for example.\"\n-                        )\n+                        ) from e\n                     response.set_cookie(\n                         settings.SESSION_COOKIE_NAME,\n                         request.session.session_key, max_age=max_age,\ndiff --git a/django/middleware/cache.py b/django/middleware/cache.py\nindex e92f768fa3..f8a26a0769 100644\n--- a/django/middleware/cache.py\n+++ b/django/middleware/cache.py\n@@ -72,12 +72,12 @@ class UpdateCacheMiddleware(MiddlewareMixin):\n         self.cache = caches[self.cache_alias]\n         self.get_response = get_response\n \n-    def _should_update_cache(self, request, response):\n-        return hasattr(request, '_cache_update_cache') and request._cache_update_cache\n+    def _should_update_cache(self, request):\n+        return hasattr(request, '_cache_update_cache') and request._cache_update_cache  # pylint: disable=protected-access\n \n     def process_response(self, request, response):\n         \"\"\"Set the cache, if needed.\"\"\"\n-        if not self._should_update_cache(request, response):\n+        if not self._should_update_cache(request):\n             # We don't need to update the cache, just return.\n             return response\n \n@@ -140,13 +140,13 @@ class FetchFromCacheMiddleware(MiddlewareMixin):\n         version if available.\n         \"\"\"\n         if request.method not in ('GET', 'HEAD'):\n-            request._cache_update_cache = False\n+            request._cache_update_cache = False  # pylint: disable=protected-access\n             return None  # Don't bother checking the cache.\n \n         # try and get the cached GET response\n         cache_key = get_cache_key(request, self.key_prefix, 'GET', cache=self.cache)\n         if cache_key is None:\n-            request._cache_update_cache = True\n+            request._cache_update_cache = True  # pylint: disable=protected-access\n             return None  # No cache information available, need to rebuild.\n         response = self.cache.get(cache_key)\n         # if it wasn't found and we are looking for a HEAD, try looking just for that\n@@ -155,11 +155,11 @@ class FetchFromCacheMiddleware(MiddlewareMixin):\n             response = self.cache.get(cache_key)\n \n         if response is None:\n-            request._cache_update_cache = True\n+            request._cache_update_cache = True  # pylint: disable=protected-access\n             return None  # No cache information available, need to rebuild.\n \n         # hit, return cached response\n-        request._cache_update_cache = False\n+        request._cache_update_cache = False  # pylint: disable=protected-access\n         return response\n \n \n"
}