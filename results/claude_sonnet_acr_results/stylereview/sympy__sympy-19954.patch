{
  "patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex de94ddabb4..452d17d5ac 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -752,7 +752,7 @@ def composition_series(self):\n                 order = K.order() // H.order()\n                 down_seg = []\n                 for p, e in factorint(order).items():\n-                    for j in range(e):\n+                    for _ in range(e):\n                         down_seg.append(PermutationGroup([g] + H.generators))\n                         g = g**p\n                 up_seg = down_seg + up_seg\n@@ -845,6 +845,7 @@ def step(l, x):\n             i = [base[l]^h for h in h_transversals[l]].index(gamma)\n             x = h_transversals[l][i]*x\n             if l < len(orbits)-1:\n+                u = None\n                 for u in transversals[l]:\n                     if base[l]^u == base[l]^x:\n                         break\n@@ -1396,11 +1397,11 @@ def derived_series(self):\n         \"\"\"\n         res = [self]\n         current = self\n-        next = self.derived_subgroup()\n-        while not current.is_subgroup(next):\n-            res.append(next)\n-            current = next\n-            next = next.derived_subgroup()\n+        next_subgroup = self.derived_subgroup()\n+        while not current.is_subgroup(next_subgroup):\n+            res.append(next_subgroup)\n+            current = next_subgroup\n+            next_subgroup = next_subgroup.derived_subgroup()\n         return res\n \n     def derived_subgroup(self):\n@@ -1821,7 +1822,7 @@ def abelian_invariants(self):\n                 G = K\n                 gns = pows\n                 if r == 1:\n-                    break;\n+                    break\n                 ranks.append(multiplicity(p, r))\n \n             if ranks:\n"
}