{
  "patch": "diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\nindex 27756d9d96..8409c6cb14 100644\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -79,6 +79,9 @@ class Sitemap:\n     # Add an alternate/hreflang link with value 'x-default'.\n     x_default = False\n \n+    def __init__(self):\n+        self.latest_lastmod = None\n+\n     def _get(self, name, item, default=None):\n         try:\n             attr = getattr(self, name)\n@@ -88,7 +91,7 @@ class Sitemap:\n             if self.i18n:\n                 # Split the (item, lang_code) tuples again for the location,\n                 # priority, lastmod and changefreq method calls.\n-                item, lang_code = item\n+                item, _ = item\n             return attr(item)\n         return attr\n \n@@ -111,7 +114,7 @@ class Sitemap:\n \n     def _location(self, item, force_lang_code=None):\n         if self.i18n:\n-            obj, lang_code = item\n+            _, lang_code = item\n             # Activate language from item-tuple or forced one before calling location.\n             with translation.override(force_lang_code or lang_code):\n                 return self._get(\"location\", item)\n@@ -165,13 +168,14 @@ class Sitemap:\n     def get_latest_lastmod(self):\n         if not hasattr(self, \"lastmod\"):\n             return None\n-        if callable(self.lastmod):\n+        lastmod_attr = getattr(self, \"lastmod\")\n+        if callable(lastmod_attr):\n             try:\n-                return max([self.lastmod(item) for item in self.items()])\n+                return max([lastmod_attr(item) for item in self.items()])\n             except TypeError:\n                 return None\n         else:\n-            return self.lastmod\n+            return lastmod_attr\n \n     def _urls(self, page, protocol, domain):\n         urls = []\n"
}