{
  "patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 842b73e95c..a1f2d4acfb 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -137,7 +137,9 @@ class Media:\n     def __getitem__(self, name):\n         \"\"\"Return a Media object that only contains media of the given type.\"\"\"\n         if name in MEDIA_TYPES:\n-            return Media(**{str(name): getattr(self, \"_\" + name)})\n+            name_str = str(name)\n+            if name_str:  # Ensure name is not empty\n+                return Media(**{name_str: getattr(self, \"_\" + name)})\n         raise KeyError('Unknown media type \"%s\"' % name)\n \n     @staticmethod\n@@ -228,6 +230,7 @@ class Widget(metaclass=MediaDefiningClass):\n     is_required = False\n     supports_microseconds = True\n     use_fieldset = False\n+    template_name = None\n \n     def __init__(self, attrs=None):\n         self.attrs = {} if attrs is None else attrs.copy()\n@@ -282,14 +285,14 @@ class Widget(metaclass=MediaDefiningClass):\n         \"\"\"Build an attribute dictionary.\"\"\"\n         return {**base_attrs, **(extra_attrs or {})}\n \n-    def value_from_datadict(self, data, files, name):\n+    def value_from_datadict(self, data, _files, name):\n         \"\"\"\n         Given a dictionary of data and this widget's name, return the value\n         of this widget or None if it's not provided.\n         \"\"\"\n         return data.get(name)\n \n-    def value_omitted_from_data(self, data, files, name):\n+    def value_omitted_from_data(self, data, _files, name):\n         return name not in data\n \n     def id_for_label(self, id_):\n@@ -304,7 +307,7 @@ class Widget(metaclass=MediaDefiningClass):\n         \"\"\"\n         return id_\n \n-    def use_required_attribute(self, initial):\n+    def use_required_attribute(self, _initial):\n         return not self.is_hidden\n \n \n@@ -513,9 +516,9 @@ class DateTimeBaseInput(TextInput):\n     format_key = \"\"\n     supports_microseconds = False\n \n-    def __init__(self, attrs=None, format=None):\n+    def __init__(self, attrs=None, date_format=None):\n         super().__init__(attrs)\n-        self.format = format or None\n+        self.format = date_format or None\n \n     def format_value(self, value):\n         return formats.localize_input(\n@@ -1026,6 +1029,7 @@ class SelectDateWidget(Widget):\n     use_fieldset = True\n \n     def __init__(self, attrs=None, years=None, months=None, empty_label=None):\n+        super().__init__(attrs)\n         self.attrs = attrs or {}\n \n         # Optional list or tuple of years to use in the \"year\" select box.\n"
}