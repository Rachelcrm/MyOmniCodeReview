{
  "patch": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 4c0e7e2a56..c8b447d4d0 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -107,14 +107,14 @@ ROLES = {\n }\n \n \n-def create_reference_role(rolename, urlbase):\n-    def _role(name, rawtext, text, lineno, inliner, options=None, content=None):\n+def create_reference_role(rolename, url_base):\n+    def _role(_name, rawtext, text, _lineno, inliner, options=None, _content=None):\n         if options is None:\n             options = {}\n         node = docutils.nodes.reference(\n             rawtext,\n             text,\n-            refuri=(urlbase % (\n+            refuri=(url_base % (\n                 inliner.document.settings.link_base,\n                 text.lower(),\n             )),\n@@ -124,7 +124,7 @@ def create_reference_role(rolename, urlbase):\n     docutils.parsers.rst.roles.register_canonical_role(rolename, _role)\n \n \n-def default_reference_role(name, rawtext, text, lineno, inliner, options=None, content=None):\n+def default_reference_role(_name, rawtext, text, _lineno, inliner, options=None, _content=None):\n     if options is None:\n         options = {}\n     context = inliner.document.settings.default_reference_context\ndiff --git a/django/contrib/admindocs/views.py b/django/contrib/admindocs/views.py\nindex cacdeb91a0..adaaeddf40 100644\n--- a/django/contrib/admindocs/views.py\n+++ b/django/contrib/admindocs/views.py\n@@ -70,7 +70,7 @@ class TemplateTagIndexView(BaseAdminDocsView):\n                     title, body, metadata = utils.parse_docstring(tag_func.__doc__)\n                     title = title and utils.parse_rst(title, 'tag', _('tag:') + tag_name)\n                     body = body and utils.parse_rst(body, 'tag', _('tag:') + tag_name)\n-                    for key in metadata:\n+                    for key in list(metadata):\n                         metadata[key] = utils.parse_rst(metadata[key], 'tag', _('tag:') + tag_name)\n                     tag_library = module_name.split('.')[-1]\n                     tags.append({\n@@ -101,7 +101,7 @@ class TemplateFilterIndexView(BaseAdminDocsView):\n                     title, body, metadata = utils.parse_docstring(filter_func.__doc__)\n                     title = title and utils.parse_rst(title, 'filter', _('filter:') + filter_name)\n                     body = body and utils.parse_rst(body, 'filter', _('filter:') + filter_name)\n-                    for key in metadata:\n+                    for key in list(metadata):\n                         metadata[key] = utils.parse_rst(metadata[key], 'filter', _('filter:') + filter_name)\n                     tag_library = module_name.split('.')[-1]\n                     filters.append({\n@@ -138,7 +138,7 @@ class ViewDetailView(BaseAdminDocsView):\n     @staticmethod\n     def _get_view_func(view):\n         urlconf = get_urlconf()\n-        if get_resolver(urlconf)._is_callback(view):\n+        if get_resolver(urlconf)._is_callback(view):  # pylint: disable=protected-access\n             mod, func = get_mod_func(view)\n             try:\n                 # Separate the module and function, e.g.\n@@ -160,7 +160,7 @@ class ViewDetailView(BaseAdminDocsView):\n         title, body, metadata = utils.parse_docstring(view_func.__doc__)\n         title = title and utils.parse_rst(title, 'view', _('view:') + view)\n         body = body and utils.parse_rst(body, 'view', _('view:') + view)\n-        for key in metadata:\n+        for key in list(metadata):\n             metadata[key] = utils.parse_rst(metadata[key], 'model', _('view:') + view)\n         return super().get_context_data(**{\n             **kwargs,\n@@ -187,16 +187,16 @@ class ModelDetailView(BaseAdminDocsView):\n         # Get the model class.\n         try:\n             app_config = apps.get_app_config(self.kwargs['app_label'])\n-        except LookupError:\n-            raise Http404(_(\"App %(app_label)r not found\") % self.kwargs)\n+        except LookupError as e:\n+            raise Http404(_(\"App %(app_label)r not found\") % self.kwargs) from e\n         try:\n             model = app_config.get_model(model_name)\n-        except LookupError:\n-            raise Http404(_(\"Model %(model_name)r not found in app %(app_label)r\") % self.kwargs)\n+        except LookupError as e:\n+            raise Http404(_(\"Model %(model_name)r not found in app %(app_label)r\") % self.kwargs) from e\n \n-        opts = model._meta\n+        opts = model._meta  # pylint: disable=protected-access\n \n-        title, body, metadata = utils.parse_docstring(model.__doc__)\n+        title, body, _ = utils.parse_docstring(model.__doc__)\n         title = title and utils.parse_rst(title, 'model', _('model:') + model_name)\n         body = body and utils.parse_rst(body, 'model', _('model:') + model_name)\n \n@@ -207,7 +207,7 @@ class ModelDetailView(BaseAdminDocsView):\n             # descriptor that returns the other object\n             if isinstance(field, models.ForeignKey):\n                 data_type = field.remote_field.model.__name__\n-                app_label = field.remote_field.model._meta.app_label\n+                app_label = field.remote_field.model._meta.app_label  # pylint: disable=protected-access\n                 verbose = utils.parse_rst(\n                     (_(\"the related `%(app_label)s.%(data_type)s` object\") % {\n                         'app_label': app_label, 'data_type': data_type,\n@@ -228,7 +228,7 @@ class ModelDetailView(BaseAdminDocsView):\n         # Gather many-to-many fields.\n         for field in opts.many_to_many:\n             data_type = field.remote_field.model.__name__\n-            app_label = field.remote_field.model._meta.app_label\n+            app_label = field.remote_field.model._meta.app_label  # pylint: disable=protected-access\n             verbose = _(\"related `%(app_label)s.%(object_name)s` objects\") % {\n                 'app_label': app_label,\n                 'object_name': data_type,\n@@ -290,8 +290,8 @@ class ModelDetailView(BaseAdminDocsView):\n         # Gather related objects\n         for rel in opts.related_objects:\n             verbose = _(\"related `%(app_label)s.%(object_name)s` objects\") % {\n-                'app_label': rel.related_model._meta.app_label,\n-                'object_name': rel.related_model._meta.object_name,\n+                'app_label': rel.related_model._meta.app_label,  # pylint: disable=protected-access\n+                'object_name': rel.related_model._meta.object_name,  # pylint: disable=protected-access\n             }\n             accessor = rel.get_accessor_name()\n             fields.append({\n"
}