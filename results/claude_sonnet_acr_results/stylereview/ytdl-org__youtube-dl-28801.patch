{
  "patch": "diff --git a/youtube_dl/utils.py b/youtube_dl/utils.py\nindex 61b94d84c..d069e5eef 100644\n--- a/youtube_dl/utils.py\n+++ b/youtube_dl/utils.py\n@@ -1811,7 +1811,7 @@ def preferredencoding():\n     try:\n         pref = locale.getpreferredencoding()\n         'TEST'.encode(pref)\n-    except Exception:\n+    except (LookupError, TypeError):\n         pref = 'UTF-8'\n \n     return pref\n@@ -1959,9 +1959,9 @@ def xpath_attr(node, xpath, key, name=None, fatal=False, default=NO_DEFAULT):\n     return n.attrib[key]\n \n \n-def get_element_by_id(id, html):\n+def get_element_by_id(element_id, html):\n     \"\"\"Return the content of the tag with the specified ID in the passed HTML document\"\"\"\n-    return get_element_by_attribute('id', id, html)\n+    return get_element_by_attribute('id', element_id, html)\n \n \n def get_element_by_class(class_name, html):\n@@ -2016,6 +2016,9 @@ class HTMLAttributeParser(compat_HTMLParser):\n     def handle_starttag(self, tag, attrs):\n         self.attrs = dict(attrs)\n \n+    def error(self, message):\n+        raise HTMLParseError(message)\n+\n \n def extract_attributes(html_element):\n     \"\"\"Given a string for an HTML element such as\n@@ -2073,10 +2076,10 @@ def sanitize_open(filename, open_mode):\n     try:\n         if filename == '-':\n             if sys.platform == 'win32':\n-                import msvcrt\n-                msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)\n+                import msvcrt as msvcrt_local\n+                msvcrt_local.setmode(sys.stdout.fileno(), os.O_BINARY)\n             return (sys.stdout.buffer if hasattr(sys.stdout, 'buffer') else sys.stdout, filename)\n-        stream = open(encodeFilename(filename), open_mode)\n+        stream = open(encodeFilename(filename), open_mode, encoding='utf-8')\n         return (stream, filename)\n     except (IOError, OSError) as err:\n         if err.errno in (errno.EACCES,):\n@@ -2088,7 +2091,7 @@ def sanitize_open(filename, open_mode):\n             raise\n         else:\n             # An exception here should be caught in the caller\n-            stream = open(encodeFilename(alt_filename), open_mode)\n+            stream = open(encodeFilename(alt_filename), open_mode, encoding='utf-8')\n             return (stream, alt_filename)\n \n \n@@ -2152,7 +2155,8 @@ def sanitize_path(s):\n         return s\n     drive_or_unc, _ = os.path.splitdrive(s)\n     if sys.version_info < (2, 7) and not drive_or_unc:\n-        drive_or_unc, _ = os.path.splitunc(s)\n+        if hasattr(os.path, 'splitunc'):\n+            drive_or_unc, _ = os.path.splitunc(s)\n     norm_path = os.path.normpath(remove_start(s, drive_or_unc)).split(os.path.sep)\n     if drive_or_unc:\n         norm_path.pop(0)\n@@ -2250,7 +2254,7 @@ def process_communicate_or_kill(p, *args, **kwargs):\n \n \n def get_subprocess_encoding():\n-    if sys.platform == 'win32' and sys.getwindowsversion()[0] >= 5:\n+    if sys.platform == 'win32' and hasattr(sys, 'getwindowsversion') and sys.getwindowsversion()[0] >= 5:\n         # For subprocess calls, encode with locale encoding\n         # Refer to http://stackoverflow.com/a/9951851/35070\n         encoding = preferredencoding()\n@@ -2274,6 +2278,7 @@ if sys.version_info < (3, 0) and not sys.platform.startswith('java'):\n         # match Windows 9x series as well. Besides, NT 4 is obsolete.)\n         if (not for_subprocess\n                 and sys.platform == 'win32'\n+                and hasattr(sys, 'getwindowsversion')\n                 and sys.getwindowsversion()[0] >= 5\n                 and isinstance(s, compat_str)):\n             return s\n@@ -2281,6 +2286,7 @@ if sys.version_info < (3, 0) and not sys.platform.startswith('java'):\n         return _encode_compat_str(s, get_subprocess_encoding(), 'ignore')\n \n     def decodeFilename(b, for_subprocess=False):\n+        # pylint: disable=unused-argument\n         return _decode_compat_str(b, get_subprocess_encoding(), 'ignore')\n \n else:\n@@ -2374,7 +2380,6 @@ def bug_reports_message():\n \n class YoutubeDLError(Exception):\n     \"\"\"Base exception for YoutubeDL errors.\"\"\"\n-    pass\n \n \n class ExtractorError(YoutubeDLError):\n@@ -2543,7 +2548,7 @@ def _create_http_connection(ydl_handler, http_class, is_https, *args, **kwargs):\n                     \"No remote IP%s addresses available for connect, can't use '%s' as source address\"\n                     % (ip_version, source_address[0]))\n             for res in ip_addrs:\n-                af, socktype, proto, canonname, sa = res\n+                af, socktype, proto, _, sa = res\n                 sock = None\n                 try:\n                     sock = socket.socket(af, socktype, proto)\n"
}