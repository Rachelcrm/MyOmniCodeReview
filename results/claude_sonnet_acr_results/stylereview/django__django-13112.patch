{
  "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex c2aea9c730..b3d192a095 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -76,8 +76,8 @@ def lazy_related_operation(function, model, *related_models, **kwargs):\n     \"\"\"\n     models = [model] + [resolve_relation(model, rel) for rel in related_models]\n     model_keys = (make_model_tuple(m) for m in models)\n-    apps = model._meta.apps\n-    return apps.lazy_model_operation(partial(function, **kwargs), *model_keys)\n+    model_apps = model._meta.apps\n+    return model_apps.lazy_model_operation(partial(function, **kwargs), *model_keys)\n \n \n class RelatedField(FieldCacheMixin, Field):\n@@ -281,7 +281,7 @@ class RelatedField(FieldCacheMixin, Field):\n \n         return errors\n \n-    def db_type(self, connection):\n+    def db_type(self, database_connection):\n         # By default related field will not have a column as it relates to\n         # columns from another table.\n         return None\n@@ -327,37 +327,7 @@ class RelatedField(FieldCacheMixin, Field):\n             kwargs['related_query_name'] = self.remote_field.related_query_name\n         return name, path, args, kwargs\n \n-    def get_forward_related_filter(self, obj):\n-        \"\"\"\n-        Return the keyword arguments that when supplied to\n-        self.model.object.filter(), would select all instances related through\n-        this field to the remote obj. This is used to build the querysets\n-        returned by related descriptors. obj is an instance of\n-        self.related_field.model.\n-        \"\"\"\n-        return {\n-            '%s__%s' % (self.name, rh_field.name): getattr(obj, rh_field.attname)\n-            for _, rh_field in self.related_fields\n-        }\n \n-    def get_reverse_related_filter(self, obj):\n-        \"\"\"\n-        Complement to get_forward_related_filter(). Return the keyword\n-        arguments that when passed to self.related_field.model.object.filter()\n-        select all instances of self.related_field.model related through\n-        this field to obj. obj is an instance of self.model.\n-        \"\"\"\n-        base_filter = {\n-            rh_field.attname: getattr(obj, lh_field.attname)\n-            for lh_field, rh_field in self.related_fields\n-        }\n-        descriptor_filter = self.get_extra_descriptor_filter(obj)\n-        base_q = Q(**base_filter)\n-        if isinstance(descriptor_filter, dict):\n-            return base_q & Q(**descriptor_filter)\n-        elif descriptor_filter:\n-            return base_q & descriptor_filter\n-        return base_q\n \n     @property\n     def swappable_setting(self):\n@@ -441,6 +411,44 @@ class RelatedField(FieldCacheMixin, Field):\n         return self.name\n \n \n+class ForeignObject(RelatedField):\n+    \"\"\"\n+    Abstraction of the ForeignKey relation to support multi-column relations.\n+    \"\"\"\n+\n+    def get_forward_related_filter(self, obj):\n+        \"\"\"\n+        Return the keyword arguments that when supplied to\n+        self.model.object.filter(), would select all instances related through\n+        this field to the remote obj. This is used to build the querysets\n+        returned by related descriptors. obj is an instance of\n+        self.related_field.model.\n+        \"\"\"\n+        return {\n+            '%s__%s' % (self.name, rh_field.name): getattr(obj, rh_field.attname)\n+            for _, rh_field in self.related_fields\n+        }\n+\n+    def get_reverse_related_filter(self, obj):\n+        \"\"\"\n+        Complement to get_forward_related_filter(). Return the keyword\n+        arguments that when passed to self.related_field.model.object.filter()\n+        select all instances of self.related_field.model related through\n+        this field to obj. obj is an instance of self.model.\n+        \"\"\"\n+        base_filter = {\n+            rh_field.attname: getattr(obj, lh_field.attname)\n+            for lh_field, rh_field in self.related_fields\n+        }\n+        descriptor_filter = self.get_extra_descriptor_filter(obj)\n+        base_q = Q(**base_filter)\n+        if isinstance(descriptor_filter, dict):\n+            return base_q & Q(**descriptor_filter)\n+        elif descriptor_filter:\n+            return base_q & descriptor_filter\n+        return base_q\n+\n+\n class ForeignObject(RelatedField):\n     \"\"\"\n     Abstraction of the ForeignKey relation to support multi-column relations.\n"
}