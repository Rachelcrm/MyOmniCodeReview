{
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..3949596b77 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -142,6 +142,7 @@ class Query(BaseExpression):\n     compiler = 'SQLCompiler'\n \n     def __init__(self, model, where=WhereNode, alias_cols=True):\n+        super().__init__(output_field=None)\n         self.model = model\n         self.alias_refcount = {}\n         # alias_map is the most important data structure regarding joins.\n@@ -229,7 +230,7 @@ class Query(BaseExpression):\n         self.explain_format = None\n         self.explain_options = {}\n \n-    @property\n+    @cached_property\n     def output_field(self):\n         if len(self.select) == 1:\n             select = self.select[0]\n@@ -353,7 +354,7 @@ class Query(BaseExpression):\n \n     def relabeled_clone(self, change_map):\n         clone = self.clone()\n-        clone.change_aliases(change_map)\n+        clone.change_aliases(change_map)  # pylint: disable=no-member\n         return clone\n \n     def _get_col(self, target, field, alias):\n@@ -442,13 +443,13 @@ class Query(BaseExpression):\n             inner_query = self.clone()\n             inner_query.select_for_update = False\n             inner_query.select_related = False\n-            inner_query.set_annotation_mask(self.annotation_select)\n+            inner_query.set_annotation_mask(self.annotation_select)  # pylint: disable=no-member\n             if not self.is_sliced and not self.distinct_fields:\n                 # Queries with distinct_fields need ordering and when a limit\n                 # is applied we must take the slice from the ordered query.\n                 # Otherwise no need for ordering.\n-                inner_query.clear_ordering(True)\n-            if not inner_query.distinct:\n+                inner_query.clear_ordering(True)  # pylint: disable=no-member\n+            if not inner_query.distinct:  # pylint: disable=no-member\n                 # If the inner query uses default select and it has some\n                 # aggregate annotations, then we must make sure the inner\n                 # query is grouped by the main model's primary key. However,\n@@ -459,7 +460,7 @@ class Query(BaseExpression):\n                     if getattr(annotation, 'contains_aggregate', True)\n                 )\n                 if inner_query.default_cols and has_existing_aggregate_annotations:\n-                    inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n+                    inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)  # pylint: disable=no-member\n                 inner_query.default_cols = False\n \n             relabels = {t: 'subquery' for t in inner_query.alias_map}\n@@ -467,20 +468,20 @@ class Query(BaseExpression):\n             # Remove any aggregates marked for reduction from the subquery\n             # and move them to the outer AggregateQuery.\n             col_cnt = 0\n-            for alias, expression in list(inner_query.annotation_select.items()):\n-                annotation_select_mask = inner_query.annotation_select_mask\n+            for alias, expression in list(inner_query.annotation_select.items()):  # pylint: disable=no-member\n+                annotation_select_mask = inner_query.annotation_select_mask  # pylint: disable=no-member\n                 if expression.is_summary:\n-                    expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)\n+                    expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)  # pylint: disable=no-member\n                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n                     del inner_query.annotations[alias]\n                     annotation_select_mask.remove(alias)\n                 # Make sure the annotation_select wont use cached results.\n-                inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n+                inner_query.set_annotation_mask(inner_query.annotation_select_mask)  # pylint: disable=no-member\n             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:\n                 # In case of Model.objects[0:3].count(), there would be no\n                 # field selected in the inner query, yet we must use a subquery.\n                 # So, make sure at least one field is selected.\n-                inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n+                inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)  # pylint: disable=no-member\n             try:\n                 outer_query.add_subquery(inner_query, using)\n             except EmptyResultSet:\n@@ -513,7 +514,7 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n-        obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n+        obj.add_annotation(Count('*'), alias='__count', is_summary=True)  # pylint: disable=no-member\n         number = obj.get_aggregation(using, ['__count'])['__count']\n         if number is None:\n             number = 0\n"
}