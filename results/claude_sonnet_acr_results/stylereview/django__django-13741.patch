{
  "patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b9eb33329f..ed752b9528 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -107,8 +107,8 @@ class UserCreationForm(forms.ModelForm):\n \n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n-        if self._meta.model.USERNAME_FIELD in self.fields:\n-            self.fields[self._meta.model.USERNAME_FIELD].widget.attrs['autofocus'] = True\n+        if self._meta.model.USERNAME_FIELD in self.fields:  # pylint: disable=no-member\n+            self.fields[self._meta.model.USERNAME_FIELD].widget.attrs['autofocus'] = True  # pylint: disable=no-member\n \n     def clean_password2(self):\n         password1 = self.cleaned_data.get(\"password1\")\n@@ -190,7 +190,7 @@ class AuthenticationForm(forms.Form):\n         'inactive': _(\"This account is inactive.\"),\n     }\n \n-    def __init__(self, request=None, *args, **kwargs):\n+    def __init__(self, *args, request=None, **kwargs):\n         \"\"\"\n         The 'request' parameter is set for custom auth use by subclasses.\n         The form data comes in via the standard 'data' kwarg.\n@@ -280,7 +280,7 @@ class PasswordResetForm(forms.Form):\n         resetting their password.\n         \"\"\"\n         email_field_name = UserModel.get_email_field_name()\n-        active_users = UserModel._default_manager.filter(**{\n+        active_users = UserModel._default_manager.filter(**{  # pylint: disable=protected-access\n             '%s__iexact' % email_field_name: email,\n             'is_active': True,\n         })\n@@ -445,7 +445,7 @@ class AdminPasswordChangeForm(forms.Form):\n         return self.user\n \n     @property\n-    def changed_data(self):\n+    def changed_data(self):  # pylint: disable=invalid-overridden-method\n         data = super().changed_data\n         for name in self.fields:\n             if name not in data:\n"
}