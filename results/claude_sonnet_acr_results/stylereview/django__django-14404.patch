{
  "patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 59a4a0364d..f99adaf129 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -89,7 +89,7 @@ class AdminSite:\n         errors = []\n         modeladmins = (o for o in self._registry.values() if o.__class__ is not ModelAdmin)\n         for modeladmin in modeladmins:\n-            if modeladmin.model._meta.app_config in app_configs:\n+            if modeladmin.model._meta.app_config in app_configs:  # pylint: disable=protected-access\n                 errors.extend(modeladmin.check())\n         return errors\n \n@@ -111,7 +111,7 @@ class AdminSite:\n         if isinstance(model_or_iterable, ModelBase):\n             model_or_iterable = [model_or_iterable]\n         for model in model_or_iterable:\n-            if model._meta.abstract:\n+            if model._meta.abstract:  # pylint: disable=protected-access\n                 raise ImproperlyConfigured(\n                     'The model %s is abstract, so it cannot be registered with admin.' % model.__name__\n                 )\n@@ -128,7 +128,7 @@ class AdminSite:\n \n             # Ignore the registration if the model has been\n             # swapped out.\n-            if not model._meta.swapped:\n+            if not model._meta.swapped:  # pylint: disable=protected-access\n                 # If we got **options then dynamically construct a subclass of\n                 # admin_class with those **options.\n                 if options:\n@@ -277,10 +277,10 @@ class AdminSite:\n         valid_app_labels = []\n         for model, model_admin in self._registry.items():\n             urlpatterns += [\n-                path('%s/%s/' % (model._meta.app_label, model._meta.model_name), include(model_admin.urls)),\n+                path('%s/%s/' % (model._meta.app_label, model._meta.model_name), include(model_admin.urls)),  # pylint: disable=protected-access\n             ]\n-            if model._meta.app_label not in valid_app_labels:\n-                valid_app_labels.append(model._meta.app_label)\n+            if model._meta.app_label not in valid_app_labels:  # pylint: disable=protected-access\n+                valid_app_labels.append(model._meta.app_label)  # pylint: disable=protected-access\n \n         # If there were ModelAdmins registered, we should have a list of app\n         # labels for which we need to allow access to the app_index view,\n@@ -349,7 +349,7 @@ class AdminSite:\n         request.current_app = self.name\n         return PasswordChangeDoneView.as_view(**defaults)(request)\n \n-    def i18n_javascript(self, request, extra_context=None):\n+    def i18n_javascript(self, request, extra_context=None):  # pylint: disable=unused-argument\n         \"\"\"\n         Display the i18n JavaScript that the Django admin requires.\n \n@@ -440,13 +440,13 @@ class AdminSite:\n         if label:\n             models = {\n                 m: m_a for m, m_a in self._registry.items()\n-                if m._meta.app_label == label\n+                if m._meta.app_label == label  # pylint: disable=protected-access\n             }\n         else:\n             models = self._registry\n \n         for model, model_admin in models.items():\n-            app_label = model._meta.app_label\n+            app_label = model._meta.app_label  # pylint: disable=protected-access\n \n             has_module_perms = model_admin.has_module_permission(request)\n             if not has_module_perms:\n@@ -459,11 +459,11 @@ class AdminSite:\n             if True not in perms.values():\n                 continue\n \n-            info = (app_label, model._meta.model_name)\n+            info = (app_label, model._meta.model_name)  # pylint: disable=protected-access\n             model_dict = {\n                 'model': model,\n-                'name': capfirst(model._meta.verbose_name_plural),\n-                'object_name': model._meta.object_name,\n+                'name': capfirst(model._meta.verbose_name_plural),  # pylint: disable=protected-access\n+                'object_name': model._meta.object_name,  # pylint: disable=protected-access\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n"
}