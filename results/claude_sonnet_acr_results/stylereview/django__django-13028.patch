{
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..9af62ca794 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -142,6 +142,7 @@ class Query(BaseExpression):\n     compiler = 'SQLCompiler'\n \n     def __init__(self, model, where=WhereNode, alias_cols=True):\n+        super().__init__(output_field=None)\n         self.model = model\n         self.alias_refcount = {}\n         # alias_map is the most important data structure regarding joins.\n@@ -229,7 +230,7 @@ class Query(BaseExpression):\n         self.explain_format = None\n         self.explain_options = {}\n \n-    @property\n+    @cached_property\n     def output_field(self):\n         if len(self.select) == 1:\n             select = self.select[0]\n@@ -283,6 +284,7 @@ class Query(BaseExpression):\n         processing. Normally, this is self.model._meta, but it can be changed\n         by subclasses.\n         \"\"\"\n+        # pylint: disable=protected-access\n         return self.model._meta\n \n     def clone(self):\n@@ -310,6 +312,7 @@ class Query(BaseExpression):\n         # _annotation_select_cache point to the same underlying objects.\n         # It will get re-populated in the cloned queryset the next time it's\n         # used.\n+        # pylint: disable=protected-access\n         obj._annotation_select_cache = None\n         obj.extra = self.extra.copy()\n         if self.extra_select_mask is None:\n@@ -317,8 +320,10 @@ class Query(BaseExpression):\n         else:\n             obj.extra_select_mask = self.extra_select_mask.copy()\n         if self._extra_select_cache is None:\n+            # pylint: disable=protected-access\n             obj._extra_select_cache = None\n         else:\n+            # pylint: disable=protected-access\n             obj._extra_select_cache = self._extra_select_cache.copy()\n         if self.select_related is not False:\n             # Use deepcopy because select_related stores fields in nested\n@@ -327,6 +332,7 @@ class Query(BaseExpression):\n         if 'subq_aliases' in self.__dict__:\n             obj.subq_aliases = self.subq_aliases.copy()\n         obj.used_aliases = self.used_aliases.copy()\n+        # pylint: disable=protected-access\n         obj._filtered_relations = self._filtered_relations.copy()\n         # Clear the cached_property\n         try:\n@@ -347,11 +353,13 @@ class Query(BaseExpression):\n             obj.used_aliases = set()\n         obj.filter_is_sticky = False\n         if hasattr(obj, '_setup_query'):\n+            # pylint: disable=protected-access\n             obj._setup_query()\n         return obj\n \n     def relabeled_clone(self, change_map):\n         clone = self.clone()\n+        # pylint: disable=no-member\n         clone.change_aliases(change_map)\n         return clone\n \n@@ -441,12 +449,15 @@ class Query(BaseExpression):\n             inner_query = self.clone()\n             inner_query.select_for_update = False\n             inner_query.select_related = False\n+            # pylint: disable=no-member\n             inner_query.set_annotation_mask(self.annotation_select)\n             if not self.is_sliced and not self.distinct_fields:\n                 # Queries with distinct_fields need ordering and when a limit\n                 # is applied we must take the slice from the ordered query.\n                 # Otherwise no need for ordering.\n+                # pylint: disable=no-member\n                 inner_query.clear_ordering(True)\n+            # pylint: disable=no-member\n             if not inner_query.distinct:\n                 # If the inner query uses default select and it has some\n                 # aggregate annotations, then we must make sure the inner\n@@ -458,6 +469,7 @@ class Query(BaseExpression):\n                     if getattr(annotation, 'contains_aggregate', True)\n                 )\n                 if inner_query.default_cols and has_existing_aggregate_annotations:\n+                    # pylint: disable=protected-access,no-member\n                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n                 inner_query.default_cols = False\n \n@@ -466,19 +478,23 @@ class Query(BaseExpression):\n             # Remove any aggregates marked for reduction from the subquery\n             # and move them to the outer AggregateQuery.\n             col_cnt = 0\n+            # pylint: disable=no-member\n             for alias, expression in list(inner_query.annotation_select.items()):\n                 annotation_select_mask = inner_query.annotation_select_mask\n                 if expression.is_summary:\n+                    # pylint: disable=no-member\n                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)\n                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n                     del inner_query.annotations[alias]\n                     annotation_select_mask.remove(alias)\n                 # Make sure the annotation_select wont use cached results.\n+                # pylint: disable=no-member\n                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:\n                 # In case of Model.objects[0:3].count(), there would be no\n                 # field selected in the inner query, yet we must use a subquery.\n                 # So, make sure at least one field is selected.\n+                # pylint: disable=protected-access,no-member\n                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n             try:\n                 outer_query.add_subquery(inner_query, using)\n@@ -512,6 +528,7 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        # pylint: disable=no-member\n         obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n         number = obj.get_aggregation(using, ['__count'])['__count']\n         if number is None:\n@@ -2295,6 +2312,18 @@ class Query(BaseExpression):\n             field.empty_strings_allowed\n         ) or field.null\n \n+    def get_source_expressions(self):\n+        return []\n+\n+    def set_source_expressions(self, exprs):\n+        assert not exprs\n+\n+    def copy(self):\n+        return self.clone()\n+\n+    def get_group_by_cols(self, alias=None):\n+        return [self]\n+\n \n def get_order_dir(field, default='ASC'):\n     \"\"\"\n"
}