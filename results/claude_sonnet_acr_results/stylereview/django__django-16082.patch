{
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 5e3c7cab82..8b91c7bd49 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -24,8 +24,8 @@ class SQLiteNumericMixin:\n     numeric to be properly filtered.\n     \"\"\"\n \n-    def as_sqlite(self, compiler, connection, **extra_context):\n-        sql, params = self.as_sql(compiler, connection, **extra_context)\n+    def as_sqlite(self, compiler, db_connection, **extra_context):\n+        sql, params = self.as_sql(compiler, db_connection, **extra_context)\n         try:\n             if self.output_field.get_internal_type() == \"DecimalField\":\n                 sql = \"CAST(%s AS NUMERIC)\" % sql\n@@ -59,14 +59,14 @@ class Combinable:\n     BITRIGHTSHIFT = \">>\"\n     BITXOR = \"#\"\n \n-    def _combine(self, other, connector, reversed):\n+    def _combine(self, other, conn, is_reversed):\n         if not hasattr(other, \"resolve_expression\"):\n             # everything must be resolvable to an expression\n             other = Value(other)\n \n-        if reversed:\n-            return CombinedExpression(other, connector, self)\n-        return CombinedExpression(self, connector, other)\n+        if is_reversed:\n+            return CombinedExpression(other, conn, self)\n+        return CombinedExpression(self, conn, other)\n \n     #############\n     # OPERATORS #\n@@ -177,19 +177,19 @@ class BaseExpression:\n \n     def __init__(self, output_field=None):\n         if output_field is not None:\n-            self.output_field = output_field\n+            self._output_field_override = output_field\n \n     def __getstate__(self):\n         state = self.__dict__.copy()\n         state.pop(\"convert_value\", None)\n         return state\n \n-    def get_db_converters(self, connection):\n+    def get_db_converters(self, db_connection):\n         return (\n             []\n             if self.convert_value is self._convert_value_noop\n             else [self.convert_value]\n-        ) + self.output_field.get_db_converters(connection)\n+        ) + self.output_field.get_db_converters(db_connection)\n \n     def get_source_expressions(self):\n         return []\n@@ -205,7 +205,7 @@ class BaseExpression:\n             for arg in expressions\n         ]\n \n-    def as_sql(self, compiler, connection):\n+    def as_sql(self, compiler, db_connection):\n         \"\"\"\n         Responsible for returning a (sql, [params]) tuple to be included\n         in the current query.\n@@ -214,10 +214,10 @@ class BaseExpression:\n         providing an `as_{vendor}` method and patching the Expression:\n \n         ```\n-        def override_as_sql(self, compiler, connection):\n+        def override_as_sql(self, compiler, db_connection):\n             # custom logic\n-            return super().as_sql(compiler, connection)\n-        setattr(Expression, 'as_' + connection.vendor, override_as_sql)\n+            return super().as_sql(compiler, db_connection)\n+        setattr(Expression, 'as_' + db_connection.vendor, override_as_sql)\n         ```\n \n         Arguments:\n@@ -225,7 +225,7 @@ class BaseExpression:\n            Must have a compile method, returning a (sql, [params]) tuple.\n            Calling compiler(value) will return a quoted `value`.\n \n-         * connection: the database connection used for the current query.\n+         * db_connection: the database connection used for the current query.\n \n         Return: (sql, params)\n           Where `sql` is a string containing ordered sql parameters to be\n@@ -253,7 +253,7 @@ class BaseExpression:\n         )\n \n     def resolve_expression(\n-        self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False\n+        self, query=None, allow_joins=True, reuse=None, summarize=False, _for_save=False\n     ):\n         \"\"\"\n         Provide the chance to do any preprocessing or validation before being\n@@ -292,6 +292,8 @@ class BaseExpression:\n     @cached_property\n     def output_field(self):\n         \"\"\"Return the output type of this expressions.\"\"\"\n+        if hasattr(self, '_output_field_override'):\n+            return self._output_field_override\n         output_field = self._resolve_output_field()\n         if output_field is None:\n             self._output_field_resolved_to_none = True\n@@ -341,7 +343,7 @@ class BaseExpression:\n             return output_field\n \n     @staticmethod\n-    def _convert_value_noop(value, expression, connection):\n+    def _convert_value_noop(value, _expression, _db_connection):\n         return value\n \n     @cached_property\n@@ -417,7 +419,7 @@ class BaseExpression:\n         )\n         return clone\n \n-    def get_group_by_cols(self, alias=None):\n+    def get_group_by_cols(self, _alias=None):\n         if not self.contains_aggregate:\n             return [self]\n         cols = []\n"
}