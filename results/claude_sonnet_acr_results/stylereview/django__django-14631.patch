{
  "patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 88adadb37d..a81f82f117 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -147,7 +147,7 @@ class BoundField:\n         # Only add the suffix if the label does not end in punctuation.\n         # Translators: If found as last label character, these punctuation\n         # characters will prevent the default label_suffix to be appended to the label\n-        if label_suffix and contents and contents[-1] not in _(':?.!'):\n+        if label_suffix and contents and contents[-1] not in ':?.!':\n             contents = format_html('{}{}', contents, label_suffix)\n         widget = self.field.widget\n         id_ = widget.attrs.get('id') or self.auto_id\n@@ -257,7 +257,7 @@ class BoundWidget:\n \n     def tag(self, wrap_label=False):\n         context = {'widget': {**self.data, 'wrap_label': wrap_label}}\n-        return self.parent_widget._render(self.template_name, context, self.renderer)\n+        return self.parent_widget._render(self.template_name, context, self.renderer)  # pylint: disable=protected-access\n \n     @property\n     def template_name(self):\ndiff --git a/django/forms/forms.py b/django/forms/forms.py\nindex d14037bfe9..7cc90d196e 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -76,13 +76,14 @@ class BaseForm:\n         self.label_suffix = label_suffix if label_suffix is not None else _(':')\n         self.empty_permitted = empty_permitted\n         self._errors = None  # Stores the errors after clean() has been called.\n+        self.cleaned_data = None  # Initialize cleaned_data attribute\n \n         # The base_fields class attribute is the *class-wide* definition of\n         # fields. Because a particular *instance* of the class might want to\n         # alter self.fields, we create self.fields here by copying base_fields.\n         # Instances should always modify self.fields; they should not modify\n         # self.base_fields.\n-        self.fields = copy.deepcopy(self.base_fields)\n+        self.fields = copy.deepcopy(getattr(self, 'base_fields', {}))\n         self._bound_fields_cache = {}\n         self.order_fields(self.field_order if field_order is None else field_order)\n \n@@ -155,14 +156,14 @@ class BaseForm:\n             pass\n         try:\n             field = self.fields[name]\n-        except KeyError:\n+        except KeyError as exc:\n             raise KeyError(\n                 \"Key '%s' not found in '%s'. Choices are: %s.\" % (\n                     name,\n                     self.__class__.__name__,\n                     ', '.join(sorted(self.fields)),\n                 )\n-            )\n+            ) from exc\n         bound_field = field.get_bound_field(self, name)\n         self._bound_fields_cache[name] = bound_field\n         return bound_field\n@@ -419,7 +420,6 @@ class BaseForm:\n         An internal hook for performing additional cleaning after form cleaning\n         is complete. Used for model validation in model forms.\n         \"\"\"\n-        pass\n \n     def clean(self):\n         \"\"\"\n"
}