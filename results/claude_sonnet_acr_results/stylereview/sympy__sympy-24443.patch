{
  "patch": "diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex bb7bdf32ba..14ebba48ed 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -48,7 +48,7 @@ def _invs(self):\n                 continue\n             w = self.domain.identity\n             if isinstance(self.codomain, PermutationGroup):\n-                parts = image._strong_gens_slp[g][::-1]\n+                parts = image.generator_product(g)[::-1]\n             else:\n                 parts = g\n             for s in parts:\n@@ -379,7 +379,7 @@ def orbit_homomorphism(group, omega):\n     identity = codomain.identity\n     omega = list(omega)\n     images = {g: identity*Permutation([omega.index(o^g) for o in omega]) for g in group.generators}\n-    group._schreier_sims(base=omega)\n+    group.schreier_sims(base=omega)\n     H = GroupHomomorphism(group, codomain, images)\n     if len(group.basic_stabilizers) > len(omega):\n         H._kernel = group.basic_stabilizers[len(omega)]\n@@ -505,7 +505,7 @@ def group_isomorphism(G, H, isomorphism=True):\n     if isinstance(H, FpGroup):\n         if h_order is S.Infinity:\n             raise NotImplementedError(\"Isomorphism methods are not implemented for infinite groups.\")\n-        _H, h_isomorphism = H._to_perm_group()\n+        _H, h_isomorphism = H.to_perm_group()\n \n     if (g_order != h_order) or (G.is_abelian != H.is_abelian):\n         if not isomorphism:\n"
}