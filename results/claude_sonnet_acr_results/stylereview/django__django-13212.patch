{
  "patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 84b4f31ec7..de6c4991a4 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -115,11 +115,11 @@ class URLValidator(RegexValidator):\n                 try:\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n                 except ValueError:  # for example, \"Invalid IPv6 URL\"\n-                    raise ValidationError(self.message, code=self.code)\n+                    raise ValidationError(self.message, code=self.code) from None\n                 try:\n                     netloc = punycode(netloc)  # IDN -> ACE\n                 except UnicodeError:  # invalid domain part\n-                    raise e\n+                    raise e from None\n                 url = urlunsplit((scheme, netloc, path, query, fragment))\n                 super().__call__(url)\n             else:\n@@ -132,7 +132,7 @@ class URLValidator(RegexValidator):\n                 try:\n                     validate_ipv6_address(potential_ip)\n                 except ValidationError:\n-                    raise ValidationError(self.message, code=self.code)\n+                    raise ValidationError(self.message, code=self.code) from None\n \n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n@@ -272,7 +272,7 @@ def validate_ipv4_address(value):\n     try:\n         ipaddress.IPv4Address(value)\n     except ValueError:\n-        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid')\n+        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid') from None\n \n \n def validate_ipv6_address(value):\n@@ -287,7 +287,7 @@ def validate_ipv46_address(value):\n         try:\n             validate_ipv6_address(value)\n         except ValidationError:\n-            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid')\n+            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid') from None\n \n \n ip_address_validator_map = {\n@@ -309,7 +309,7 @@ def ip_address_validators(protocol, unpack_ipv4):\n         return ip_address_validator_map[protocol.lower()]\n     except KeyError:\n         raise ValueError(\"The protocol '%s' is unknown. Supported: %s\"\n-                         % (protocol, list(ip_address_validator_map)))\n+                         % (protocol, list(ip_address_validator_map))) from None\n \n \n def int_list_validator(sep=',', message=None, code='invalid', allow_negative=False):\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 36dad72704..9a390632b4 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -274,7 +274,7 @@ class IntegerField(Field):\n         try:\n             value = int(self.re_decimal.sub('', str(value)))\n         except (ValueError, TypeError):\n-            raise ValidationError(self.error_messages['invalid'], code='invalid')\n+            raise ValidationError(self.error_messages['invalid'], code='invalid') from None\n         return value\n \n     def widget_attrs(self, widget):\n@@ -297,7 +297,7 @@ class FloatField(IntegerField):\n         Validate that float() can be called on the input. Return the result\n         of float() or None for empty values.\n         \"\"\"\n-        value = super(IntegerField, self).to_python(value)\n+        value = super().to_python(value)\n         if value in self.empty_values:\n             return None\n         if self.localize:\n@@ -305,7 +305,7 @@ class FloatField(IntegerField):\n         try:\n             value = float(value)\n         except (ValueError, TypeError):\n-            raise ValidationError(self.error_messages['invalid'], code='invalid')\n+            raise ValidationError(self.error_messages['invalid'], code='invalid') from None\n         return value\n \n     def validate(self, value):\n@@ -313,7 +313,7 @@ class FloatField(IntegerField):\n         if value in self.empty_values:\n             return\n         if not math.isfinite(value):\n-            raise ValidationError(self.error_messages['invalid'], code='invalid')\n+            raise ValidationError(self.error_messages['invalid'], code='invalid') from None\n \n     def widget_attrs(self, widget):\n         attrs = super().widget_attrs(widget)\n@@ -347,7 +347,7 @@ class DecimalField(IntegerField):\n         try:\n             value = Decimal(value)\n         except DecimalException:\n-            raise ValidationError(self.error_messages['invalid'], code='invalid')\n+            raise ValidationError(self.error_messages['invalid'], code='invalid') from None\n         return value\n \n     def validate(self, value):\n@@ -470,7 +470,7 @@ class DateTimeField(BaseTemporalField):\n         try:\n             result = parse_datetime(value.strip())\n         except ValueError:\n-            raise ValidationError(self.error_messages['invalid'], code='invalid')\n+            raise ValidationError(self.error_messages['invalid'], code='invalid') from None\n         if not result:\n             result = super().to_python(value)\n         return from_current_timezone(result)\n@@ -566,7 +566,7 @@ class FileField(Field):\n             file_name = data.name\n             file_size = data.size\n         except AttributeError:\n-            raise ValidationError(self.error_messages['invalid'], code='invalid')\n+            raise ValidationError(self.error_messages['invalid'], code='invalid') from None\n \n         if self.max_length is not None and len(file_name) > self.max_length:\n             params = {'max': self.max_length, 'length': len(file_name)}\n@@ -687,7 +687,7 @@ class URLField(CharField):\n             except ValueError:\n                 # urlparse.urlsplit can raise a ValueError with some\n                 # misformatted URLs.\n-                raise ValidationError(self.error_messages['invalid'], code='invalid')\n+                raise ValidationError(self.error_messages['invalid'], code='invalid') from None\n \n         value = super().to_python(value)\n         if value:\n@@ -850,7 +850,7 @@ class TypedChoiceField(ChoiceField):\n                 self.error_messages['invalid_choice'],\n                 code='invalid_choice',\n                 params={'value': value},\n-            )\n+            ) from None\n         return value\n \n     def clean(self, value):\n@@ -922,7 +922,7 @@ class TypedMultipleChoiceField(MultipleChoiceField):\n                     self.error_messages['invalid_choice'],\n                     code='invalid_choice',\n                     params={'value': choice},\n-                )\n+                ) from None\n         return new_value\n \n     def clean(self, value):\n@@ -1211,7 +1211,7 @@ class UUIDField(CharField):\n             try:\n                 value = uuid.UUID(value)\n             except ValueError:\n-                raise ValidationError(self.error_messages['invalid'], code='invalid')\n+                raise ValidationError(self.error_messages['invalid'], code='invalid') from None\n         return value\n \n \n@@ -1248,7 +1248,7 @@ class JSONField(CharField):\n                 self.error_messages['invalid'],\n                 code='invalid',\n                 params={'value': value},\n-            )\n+            ) from None\n         if isinstance(converted, str):\n             return JSONString(converted)\n         else:\n"
}