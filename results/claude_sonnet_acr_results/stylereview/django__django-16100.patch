{
  "patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5f07a4208a..1ac792293b 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -134,6 +134,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n     view_on_site = True\n     show_full_result_count = True\n     checks_class = BaseModelAdminChecks\n+    inlines = ()\n \n     def check(self, **kwargs):\n         return self.checks_class().check(self, **kwargs)\n@@ -177,8 +178,8 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             # extra HTML -- the \"add other\" interface -- to the end of the\n             # rendered output. formfield can be None if it came from a\n             # OneToOneField with parent_link=True or a M2M intermediary.\n-            if formfield and db_field.name not in self.raw_id_fields:\n-                related_modeladmin = self.admin_site._registry.get(\n+            if formfield and db_field.name not in self.raw_id_fields and hasattr(self, 'admin_site'):\n+                related_modeladmin = self.admin_site._registry.get(  # pylint: disable=protected-access\n                     db_field.remote_field.model\n                 )\n                 wrapper_kwargs = {}\n@@ -214,7 +215,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         # For any other type of field, just call its formfield() method.\n         return db_field.formfield(**kwargs)\n \n-    def formfield_for_choice_field(self, db_field, request, **kwargs):\n+    def formfield_for_choice_field(self, db_field, _request, **kwargs):\n         \"\"\"\n         Get a form Field for a database Field that has declared choices.\n         \"\"\"\n@@ -239,13 +240,14 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         ordering.  Otherwise don't specify the queryset, let the field decide\n         (return None in that case).\n         \"\"\"\n-        related_admin = self.admin_site._registry.get(db_field.remote_field.model)\n-        if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n-            if ordering is not None and ordering != ():\n-                return db_field.remote_field.model._default_manager.using(db).order_by(\n-                    *ordering\n-                )\n+        if hasattr(self, 'admin_site'):\n+            related_admin = self.admin_site._registry.get(db_field.remote_field.model)  # pylint: disable=protected-access\n+            if related_admin is not None:\n+                ordering = related_admin.get_ordering(request)\n+                if ordering is not None and ordering != ():\n+                    return db_field.remote_field.model._default_manager.using(db).order_by(  # pylint: disable=protected-access\n+                        *ordering\n+                    )\n         return None\n \n     def formfield_for_foreignkey(self, db_field, request, **kwargs):\n@@ -255,11 +257,11 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         db = kwargs.get(\"using\")\n \n         if \"widget\" not in kwargs:\n-            if db_field.name in self.get_autocomplete_fields(request):\n+            if db_field.name in self.get_autocomplete_fields(request) and hasattr(self, 'admin_site'):\n                 kwargs[\"widget\"] = AutocompleteSelect(\n                     db_field, self.admin_site, using=db\n                 )\n-            elif db_field.name in self.raw_id_fields:\n+            elif db_field.name in self.raw_id_fields and hasattr(self, 'admin_site'):\n                 kwargs[\"widget\"] = widgets.ForeignKeyRawIdWidget(\n                     db_field.remote_field, self.admin_site, using=db\n                 )\n@@ -330,7 +332,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             )\n         return form_field\n \n-    def get_autocomplete_fields(self, request):\n+    def get_autocomplete_fields(self, _request):\n         \"\"\"\n         Return a list of ForeignKey and/or ManyToMany fields which should use\n         an autocomplete widget.\n@@ -343,7 +345,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n \n         if callable(self.view_on_site):\n             return self.view_on_site(obj)\n-        elif hasattr(obj, \"get_absolute_url\"):\n+        elif hasattr(obj, \"get_absolute_url\") and hasattr(self, 'admin_site'):\n             # use the ContentType lookup if view_on_site is True\n             return reverse(\n                 \"admin:view_on_site\",\n@@ -361,9 +363,11 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         try:\n             return mark_safe(self.empty_value_display)\n         except AttributeError:\n-            return mark_safe(self.admin_site.empty_value_display)\n+            if hasattr(self, 'admin_site'):\n+                return mark_safe(self.admin_site.empty_value_display)\n+            return mark_safe(\"-\")\n \n-    def get_exclude(self, request, obj=None):\n+    def get_exclude(self, _request, _obj=None):\n         \"\"\"\n         Hook for specifying exclude.\n         \"\"\"\n@@ -376,6 +380,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         if self.fields:\n             return self.fields\n         # _get_form_for_get_fields() is implemented in subclasses.\n+        if not hasattr(self, '_get_form_for_get_fields'):\n+            raise NotImplementedError(\n+                \"Subclasses must implement _get_form_for_get_fields() method.\"\n+            )\n         form = self._get_form_for_get_fields(request, obj)\n         return [*form.base_fields, *self.get_readonly_fields(request, obj)]\n \n@@ -387,7 +395,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             return self.fieldsets\n         return [(None, {\"fields\": self.get_fields(request, obj)})]\n \n-    def get_inlines(self, request, obj):\n+    def get_inlines(self, _request, _obj):\n         \"\"\"Hook for specifying custom inlines.\"\"\"\n         return self.inlines\n \n"
}