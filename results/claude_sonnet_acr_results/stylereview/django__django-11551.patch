{
  "patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex f82c20c2f1..6a66e72579 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -46,7 +46,7 @@ def _contains_subclass(class_path, candidate_paths):\n     return False\n \n \n-def check_admin_app(app_configs, **kwargs):\n+def check_admin_app(app_configs, **_kwargs):\n     from django.contrib.admin.sites import all_sites\n     errors = []\n     for site in all_sites:\n@@ -54,7 +54,7 @@ def check_admin_app(app_configs, **kwargs):\n     return errors\n \n \n-def check_dependencies(**kwargs):\n+def check_dependencies(**_kwargs):\n     \"\"\"\n     Check that the admin's dependencies are correctly installed.\n     \"\"\"\n@@ -128,7 +128,7 @@ def check_dependencies(**kwargs):\n \n class BaseModelAdminChecks:\n \n-    def check(self, admin_obj, **kwargs):\n+    def check(self, admin_obj, **_kwargs):\n         return [\n             *self._check_autocomplete_fields(admin_obj),\n             *self._check_raw_id_fields(admin_obj),\n@@ -164,7 +164,7 @@ class BaseModelAdminChecks:\n         search_fields defined.\n         \"\"\"\n         try:\n-            field = obj.model._meta.get_field(field_name)\n+            field = obj.model._meta.get_field(field_name)  # pylint: disable=protected-access\n         except FieldDoesNotExist:\n             return refer_to_missing_field(field=field_name, option=label, obj=obj, id='admin.E037')\n         else:\n@@ -173,7 +173,7 @@ class BaseModelAdminChecks:\n                     'a foreign key or a many-to-many field',\n                     option=label, obj=obj, id='admin.E038'\n                 )\n-            related_admin = obj.admin_site._registry.get(field.remote_field.model)\n+            related_admin = obj.admin_site._registry.get(field.remote_field.model)  # pylint: disable=protected-access\n             if related_admin is None:\n                 return [\n                     checks.Error(\n@@ -218,7 +218,7 @@ class BaseModelAdminChecks:\n         ManyToManyField. \"\"\"\n \n         try:\n-            field = obj.model._meta.get_field(field_name)\n+            field = obj.model._meta.get_field(field_name)  # pylint: disable=protected-access\n         except FieldDoesNotExist:\n             return refer_to_missing_field(field=field_name, option=label, obj=obj, id='admin.E002')\n         else:\n@@ -330,14 +330,14 @@ class BaseModelAdminChecks:\n             return []\n         else:\n             try:\n-                field = obj.model._meta.get_field(field_name)\n+                field = obj.model._meta.get_field(field_name)  # pylint: disable=protected-access\n             except FieldDoesNotExist:\n                 # If we can't find a field on the model that matches, it could\n                 # be an extra field on the form.\n                 return []\n             else:\n                 if (isinstance(field, models.ManyToManyField) and\n-                        not field.remote_field.through._meta.auto_created):\n+                        not field.remote_field.through._meta.auto_created):  # pylint: disable=protected-access\n                     return [\n                         checks.Error(\n                             \"The value of '%s' cannot include the ManyToManyField '%s', \"\n@@ -401,7 +401,7 @@ class BaseModelAdminChecks:\n         check that given field exists and is a ManyToManyField. \"\"\"\n \n         try:\n-            field = obj.model._meta.get_field(field_name)\n+            field = obj.model._meta.get_field(field_name)  # pylint: disable=protected-access\n         except FieldDoesNotExist:\n             return refer_to_missing_field(field=field_name, option=label, obj=obj, id='admin.E019')\n         else:\n@@ -426,7 +426,7 @@ class BaseModelAdminChecks:\n         field and that the field is a ForeignKey or has `choices` defined. \"\"\"\n \n         try:\n-            field = obj.model._meta.get_field(field_name)\n+            field = obj.model._meta.get_field(field_name)  # pylint: disable=protected-access\n         except FieldDoesNotExist:\n             return refer_to_missing_field(field=field_name, option=label, obj=obj, id='admin.E022')\n         else:\n@@ -490,7 +490,7 @@ class BaseModelAdminChecks:\n         \"\"\"\n \n         try:\n-            field = obj.model._meta.get_field(field_name)\n+            field = obj.model._meta.get_field(field_name)  # pylint: disable=protected-access\n         except FieldDoesNotExist:\n             return refer_to_missing_field(field=field_name, option=label, obj=obj, id='admin.E027')\n         else:\n@@ -523,7 +523,7 @@ class BaseModelAdminChecks:\n         `field_name` is \"title\". \"\"\"\n \n         try:\n-            obj.model._meta.get_field(field_name)\n+            obj.model._meta.get_field(field_name)  # pylint: disable=protected-access\n         except FieldDoesNotExist:\n             return refer_to_missing_field(field=field_name, option=label, obj=obj, id='admin.E030')\n         else:\n@@ -574,7 +574,7 @@ class BaseModelAdminChecks:\n             if field_name == 'pk':\n                 return []\n             try:\n-                obj.model._meta.get_field(field_name)\n+                obj.model._meta.get_field(field_name)  # pylint: disable=protected-access\n             except FieldDoesNotExist:\n                 return refer_to_missing_field(field=field_name, option=label, obj=obj, id='admin.E033')\n             else:\n@@ -602,12 +602,12 @@ class BaseModelAdminChecks:\n             return []\n         else:\n             try:\n-                obj.model._meta.get_field(field_name)\n+                obj.model._meta.get_field(field_name)  # pylint: disable=protected-access\n             except FieldDoesNotExist:\n                 return [\n                     checks.Error(\n                         \"The value of '%s' is not a callable, an attribute of '%s', or an attribute of '%s.%s'.\" % (\n-                            label, obj.__class__.__name__, obj.model._meta.app_label, obj.model._meta.object_name\n+                            label, obj.__class__.__name__, obj.model._meta.app_label, obj.model._meta.object_name  # pylint: disable=protected-access\n                         ),\n                         obj=obj.__class__,\n                         id='admin.E035',\n@@ -619,7 +619,7 @@ class BaseModelAdminChecks:\n \n class ModelAdminChecks(BaseModelAdminChecks):\n \n-    def check(self, admin_obj, **kwargs):\n+    def check(self, admin_obj, **_kwargs):\n         return [\n             *super().check(admin_obj),\n             *self._check_save_as(admin_obj),\n@@ -667,7 +667,7 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                 for index, item in enumerate(obj.inlines)\n             ))\n \n-    def _check_inlines_item(self, obj, inline, label):\n+    def _check_inlines_item(self, obj, inline, _label):\n         \"\"\" Check one inline model admin. \"\"\"\n         try:\n             inline_label = inline.__module__ + '.' + inline.__name__\n"
}