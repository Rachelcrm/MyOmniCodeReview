{
  "patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 4f0290a4..011d8a9c 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -275,12 +275,13 @@ class Plot:\n \n     def _repr_png_(self) -> tuple[bytes, dict[str, float]]:\n \n-        return self.plot()._repr_png_()\n+        return self.plot()._repr_png_()  # pylint: disable=protected-access\n \n     # TODO _repr_svg_?\n \n     def _clone(self) -> Plot:\n         \"\"\"Generate a new object with the same information as the current spec.\"\"\"\n+        # pylint: disable=protected-access\n         new = Plot()\n \n         # TODO any way to enforce that data does not get mutated?\n@@ -382,7 +383,7 @@ class Plot:\n             raise TypeError(err)\n \n         new = self._clone()\n-        new._target = target\n+        new._target = target  # pylint: disable=protected-access\n \n         return new\n \n@@ -462,7 +463,7 @@ class Plot:\n             raise TypeError(msg)\n \n         new = self._clone()\n-        new._layers.append({\n+        new._layers.append({  # pylint: disable=protected-access\n             \"mark\": mark,\n             \"stat\": stat,\n             \"move\": move,\n@@ -535,7 +536,7 @@ class Plot:\n         pair_spec[\"wrap\"] = wrap\n \n         new = self._clone()\n-        new._pair_spec.update(pair_spec)\n+        new._pair_spec.update(pair_spec)  # pylint: disable=protected-access\n         return new\n \n     def facet(\n@@ -595,7 +596,7 @@ class Plot:\n         }\n \n         new = self._clone()\n-        new._facet_spec.update(spec)\n+        new._facet_spec.update(spec)  # pylint: disable=protected-access\n \n         return new\n \n@@ -625,7 +626,7 @@ class Plot:\n \n         \"\"\"\n         new = self._clone()\n-        new._scales.update(scales)\n+        new._scales.update(scales)  # pylint: disable=protected-access\n         return new\n \n     def share(self, **shares: bool | str) -> Plot:\n@@ -644,7 +645,7 @@ class Plot:\n \n         \"\"\"\n         new = self._clone()\n-        new._shares.update(shares)\n+        new._shares.update(shares)  # pylint: disable=protected-access\n         return new\n \n     def limit(self, **limits: tuple[Any, Any]) -> Plot:\n"
}