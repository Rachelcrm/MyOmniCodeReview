{
  "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex ad2f5a7da1..937af3293e 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -30,6 +30,7 @@ def _is_relevant_relation(relation, altered_field):\n \n \n def _all_related_fields(model):\n+    # pylint: disable=protected-access\n     return model._meta._get_fields(forward=False, reverse=True, include_hidden=True)\n \n \n@@ -96,12 +97,12 @@ class BaseDatabaseSchemaEditor:\n \n     sql_delete_procedure = 'DROP PROCEDURE %(procedure)s'\n \n-    def __init__(self, connection, collect_sql=False, atomic=True):\n+    def __init__(self, connection, collect_sql=False, use_atomic=True):\n         self.connection = connection\n         self.collect_sql = collect_sql\n         if self.collect_sql:\n             self.collected_sql = []\n-        self.atomic_migration = self.connection.features.can_rollback_ddl and atomic\n+        self.atomic_migration = self.connection.features.can_rollback_ddl and use_atomic\n \n     # State-managing methods\n \n@@ -149,6 +150,7 @@ class BaseDatabaseSchemaEditor:\n \n     def table_sql(self, model):\n         \"\"\"Take a model and return its table definition.\"\"\"\n+        # pylint: disable=protected-access\n         # Add any unique_togethers (always deferred, as some fields might be\n         # created afterwards, like geometry fields with some backends).\n         for fields in model._meta.unique_together:\n@@ -211,6 +213,7 @@ class BaseDatabaseSchemaEditor:\n         Take a field and return its column definition.\n         The field must already have had set_attributes_from_name() called.\n         \"\"\"\n+        # pylint: disable=protected-access\n         # Get the column's type and use that as the basis of the SQL\n         db_params = field.db_parameters(connection=self.connection)\n         sql = db_params['type']\n@@ -259,14 +262,14 @@ class BaseDatabaseSchemaEditor:\n         # Return the sql\n         return sql, params\n \n-    def skip_default(self, field):\n+    def skip_default(self, _field):\n         \"\"\"\n         Some backends don't accept default values for certain columns types\n         (i.e. MySQL longtext and longblob).\n         \"\"\"\n         return False\n \n-    def skip_default_on_alter(self, field):\n+    def skip_default_on_alter(self, _field):\n         \"\"\"\n         Some backends don't accept default values for certain columns types\n         (i.e. MySQL longtext and longblob) in the ALTER COLUMN statement.\n@@ -282,7 +285,7 @@ class BaseDatabaseSchemaEditor:\n             'requires_literal_defaults must provide a prepare_default() method'\n         )\n \n-    def _column_default_sql(self, field):\n+    def _column_default_sql(self, _field):\n         \"\"\"\n         Return the SQL to use in a DEFAULT clause. The resulting string should\n         contain a '%s' placeholder for a default value.\n@@ -340,6 +343,7 @@ class BaseDatabaseSchemaEditor:\n         # Add any field index and index_together's (deferred as SQLite _remake_table needs it)\n         self.deferred_sql.extend(self._model_indexes_sql(model))\n \n+        # pylint: disable=protected-access\n         # Make M2M tables\n         for field in model._meta.local_many_to_many:\n             if field.remote_field.through._meta.auto_created:\n@@ -347,6 +351,7 @@ class BaseDatabaseSchemaEditor:\n \n     def delete_model(self, model):\n         \"\"\"Delete a model from the database.\"\"\"\n+        # pylint: disable=protected-access\n         # Handle auto-created intermediary models\n         for field in model._meta.local_many_to_many:\n             if field.remote_field.through._meta.auto_created:\n"
}