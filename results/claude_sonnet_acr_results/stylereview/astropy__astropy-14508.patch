{
  "patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 118bfced89..aa523bdde1 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -379,8 +379,8 @@ class Card(_Verify):\n             if self.field_specifier:\n                 try:\n                     self._value = _int_or_float(self._value)\n-                except ValueError:\n-                    raise ValueError(f\"value {self._value} is not a float\")\n+                except ValueError as exc:\n+                    raise ValueError(f\"value {self._value} is not a float\") from exc\n \n     @value.deleter\n     def value(self):\n@@ -844,7 +844,7 @@ class Card(_Verify):\n             comments = []\n             keyword = None\n             for card in self._itersubcards():\n-                kw, vc = card._split()\n+                kw, vc = card._split()  # pylint: disable=protected-access\n                 if keyword is None:\n                     keyword = kw\n \n@@ -905,7 +905,7 @@ class Card(_Verify):\n     def _fix_value(self):\n         \"\"\"Fix the card image for fixable non-standard compliance.\"\"\"\n         value = None\n-        keyword, valuecomment = self._split()\n+        _, valuecomment = self._split()\n         m = self._value_NFSC_RE.match(valuecomment)\n \n         # for the unparsable case\n@@ -1259,7 +1259,7 @@ def _int_or_float(s):\n         try:\n             return float(s)\n         except (ValueError, TypeError) as e:\n-            raise ValueError(str(e))\n+            raise ValueError(str(e)) from e\n \n \n def _format_value(value):\n@@ -1328,19 +1328,19 @@ def _format_float(value):\n     return value_str\n \n \n-def _pad(input):\n+def _pad(input_str):\n     \"\"\"Pad blank space to the input string to be multiple of 80.\"\"\"\n-    _len = len(input)\n+    _len = len(input_str)\n     if _len == Card.length:\n-        return input\n+        return input_str\n     elif _len > Card.length:\n         strlen = _len % Card.length\n         if strlen == 0:\n-            return input\n+            return input_str\n         else:\n-            return input + \" \" * (Card.length - strlen)\n+            return input_str + \" \" * (Card.length - strlen)\n \n     # minimum length is 80\n     else:\n         strlen = _len % Card.length\n-        return input + \" \" * (Card.length - strlen)\n+        return input_str + \" \" * (Card.length - strlen)\n"
}