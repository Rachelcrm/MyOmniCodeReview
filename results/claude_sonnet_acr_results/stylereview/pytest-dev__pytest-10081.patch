{
  "patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 851e4943b..5635a50df 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -21,7 +21,7 @@ from _pytest.config import hookimpl\n from _pytest.fixtures import FixtureRequest\n from _pytest.nodes import Collector\n from _pytest.nodes import Item\n-from _pytest.outcomes import exit\n+from _pytest.outcomes import exit as pytest_exit\n from _pytest.outcomes import fail\n from _pytest.outcomes import skip\n from _pytest.outcomes import xfail\n@@ -50,7 +50,7 @@ def pytest_pycollect_makeitem(\n         # Type ignored because `ut` is an opaque module.\n         if not issubclass(obj, ut.TestCase):  # type: ignore\n             return None\n-    except Exception:\n+    except Exception:  # pylint: disable=broad-exception-caught\n         return None\n     # Yes, so let's collect it.\n     item: UnitTestCase = UnitTestCase.from_parent(collector, name=name, obj=obj)\n@@ -74,7 +74,7 @@ class UnitTestCase(Class):\n             self._inject_setup_teardown_fixtures(cls)\n             self._inject_setup_class_fixture()\n \n-        self.session._fixturemanager.parsefactories(self, unittest=True)\n+        self.session._fixturemanager.parsefactories(self, unittest=True)  # pylint: disable=protected-access\n         loader = TestLoader()\n         foundsomething = False\n         for name in loader.getTestCaseNames(self.obj):\n@@ -105,7 +105,7 @@ class UnitTestCase(Class):\n             pass_self=False,\n         )\n         if class_fixture:\n-            cls.__pytest_class_setup = class_fixture  # type: ignore[attr-defined]\n+            cls.__pytest_class_setup = class_fixture  # type: ignore[attr-defined]  # pylint: disable=protected-access,unused-private-member\n \n         method_fixture = _make_xunit_fixture(\n             cls,\n@@ -116,7 +116,7 @@ class UnitTestCase(Class):\n             pass_self=True,\n         )\n         if method_fixture:\n-            cls.__pytest_method_setup = method_fixture  # type: ignore[attr-defined]\n+            cls.__pytest_method_setup = method_fixture  # type: ignore[attr-defined]  # pylint: disable=protected-access,unused-private-member\n \n \n def _make_xunit_fixture(\n@@ -136,7 +136,7 @@ def _make_xunit_fixture(\n         cleanup = getattr(obj, cleanup_name, lambda *args: None)\n     else:\n \n-        def cleanup(*args):\n+        def cleanup(*_args):\n             pass\n \n     @pytest.fixture(\n@@ -201,7 +201,7 @@ class TestCaseFunction(Function):\n         self._testcase = self.parent.obj(self.name)  # type: ignore[attr-defined]\n         self._obj = getattr(self._testcase, self.name)\n         if hasattr(self, \"_request\"):\n-            self._request._fillfixtures()\n+            self._request._fillfixtures()  # pylint: disable=protected-access\n \n     def teardown(self) -> None:\n         if self._explicit_tearDown is not None:\n@@ -217,11 +217,11 @@ class TestCaseFunction(Function):\n         # Unwrap potential exception info (see twisted trial support below).\n         rawexcinfo = getattr(rawexcinfo, \"_rawexcinfo\", rawexcinfo)\n         try:\n-            excinfo = _pytest._code.ExceptionInfo[BaseException].from_exc_info(rawexcinfo)  # type: ignore[arg-type]\n+            excinfo = _pytest._code.ExceptionInfo[BaseException].from_exc_info(rawexcinfo)  # type: ignore[arg-type]  # pylint: disable=protected-access\n             # Invoke the attributes to trigger storing the traceback\n             # trial causes some issue there.\n-            excinfo.value\n-            excinfo.traceback\n+            excinfo.value  # pylint: disable=pointless-statement\n+            excinfo.traceback  # pylint: disable=pointless-statement\n         except TypeError:\n             try:\n                 try:\n@@ -234,7 +234,7 @@ class TestCaseFunction(Function):\n                     fail(\"\".join(values), pytrace=False)\n                 except (fail.Exception, KeyboardInterrupt):\n                     raise\n-                except BaseException:\n+                except BaseException:  # pylint: disable=broad-exception-caught\n                     fail(\n                         \"ERROR: Unknown Incompatible Exception \"\n                         \"representation:\\n%r\" % (rawexcinfo,),\n@@ -243,25 +243,25 @@ class TestCaseFunction(Function):\n             except KeyboardInterrupt:\n                 raise\n             except fail.Exception:\n-                excinfo = _pytest._code.ExceptionInfo.from_current()\n+                excinfo = _pytest._code.ExceptionInfo.from_current()  # pylint: disable=protected-access\n         self.__dict__.setdefault(\"_excinfo\", []).append(excinfo)\n \n     def addError(\n-        self, testcase: \"unittest.TestCase\", rawexcinfo: \"_SysExcInfoType\"\n+        self, _testcase: \"unittest.TestCase\", rawexcinfo: \"_SysExcInfoType\"\n     ) -> None:\n         try:\n-            if isinstance(rawexcinfo[1], exit.Exception):\n-                exit(rawexcinfo[1].msg)\n+            if isinstance(rawexcinfo[1], pytest_exit.Exception):\n+                pytest_exit(rawexcinfo[1].msg)\n         except TypeError:\n             pass\n         self._addexcinfo(rawexcinfo)\n \n     def addFailure(\n-        self, testcase: \"unittest.TestCase\", rawexcinfo: \"_SysExcInfoType\"\n+        self, _testcase: \"unittest.TestCase\", rawexcinfo: \"_SysExcInfoType\"\n     ) -> None:\n         self._addexcinfo(rawexcinfo)\n \n-    def addSkip(self, testcase: \"unittest.TestCase\", reason: str) -> None:\n+    def addSkip(self, _testcase: \"unittest.TestCase\", reason: str) -> None:\n         try:\n             raise pytest.skip.Exception(reason, _use_item_location=True)\n         except skip.Exception:\n@@ -269,8 +269,8 @@ class TestCaseFunction(Function):\n \n     def addExpectedFailure(\n         self,\n-        testcase: \"unittest.TestCase\",\n-        rawexcinfo: \"_SysExcInfoType\",\n+        _testcase: \"unittest.TestCase\",\n+        _rawexcinfo: \"_SysExcInfoType\",\n         reason: str = \"\",\n     ) -> None:\n         try:\n@@ -280,7 +280,7 @@ class TestCaseFunction(Function):\n \n     def addUnexpectedSuccess(\n         self,\n-        testcase: \"unittest.TestCase\",\n+        _testcase: \"unittest.TestCase\",\n         reason: Optional[\"twisted.trial.unittest.Todo\"] = None,\n     ) -> None:\n         msg = \"Unexpected success\"\n"
}