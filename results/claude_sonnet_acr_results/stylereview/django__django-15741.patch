{
  "patch": "diff --git a/django/utils/formats.py b/django/utils/formats.py\nindex 3f38322d84..0be21e3a0d 100644\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -54,7 +54,7 @@ def reset_format_cache():\n     This method is provided primarily for testing purposes,\n     so that the effects of cached formats can be removed.\n     \"\"\"\n-    global _format_cache, _format_modules_cache\n+    global _format_cache, _format_modules_cache  # pylint: disable=global-statement\n     _format_cache = {}\n     _format_modules_cache = {}\n \n@@ -108,7 +108,7 @@ def get_format(format_type, lang=None, use_l10n=None):\n     \"\"\"\n     if use_l10n is None:\n         try:\n-            use_l10n = settings._USE_L10N_INTERNAL\n+            use_l10n = settings._USE_L10N_INTERNAL  # pylint: disable=protected-access\n         except AttributeError:\n             use_l10n = settings.USE_L10N\n     if use_l10n and lang is None:\n@@ -146,7 +146,7 @@ def get_format(format_type, lang=None, use_l10n=None):\n get_format_lazy = lazy(get_format, str, list, tuple)\n \n \n-def date_format(value, format=None, use_l10n=None):\n+def date_format(value, format_string=None, use_l10n=None):\n     \"\"\"\n     Format a datetime.date or datetime.datetime object using a\n     localizable format.\n@@ -155,11 +155,11 @@ def date_format(value, format=None, use_l10n=None):\n     be localized (or not), overriding the value of settings.USE_L10N.\n     \"\"\"\n     return dateformat.format(\n-        value, get_format(format or \"DATE_FORMAT\", use_l10n=use_l10n)\n+        value, get_format(format_string or \"DATE_FORMAT\", use_l10n=use_l10n)\n     )\n \n \n-def time_format(value, format=None, use_l10n=None):\n+def time_format(value, format_string=None, use_l10n=None):\n     \"\"\"\n     Format a datetime.time object using a localizable format.\n \n@@ -167,7 +167,7 @@ def time_format(value, format=None, use_l10n=None):\n     be localized (or not), overriding the value of settings.USE_L10N.\n     \"\"\"\n     return dateformat.time_format(\n-        value, get_format(format or \"TIME_FORMAT\", use_l10n=use_l10n)\n+        value, get_format(format_string or \"TIME_FORMAT\", use_l10n=use_l10n)\n     )\n \n \n@@ -180,7 +180,7 @@ def number_format(value, decimal_pos=None, use_l10n=None, force_grouping=False):\n     \"\"\"\n     if use_l10n is None:\n         try:\n-            use_l10n = settings._USE_L10N_INTERNAL\n+            use_l10n = settings._USE_L10N_INTERNAL  # pylint: disable=protected-access\n         except AttributeError:\n             use_l10n = settings.USE_L10N\n     lang = get_language() if use_l10n else None\n@@ -232,16 +232,16 @@ def localize_input(value, default=None):\n     elif isinstance(value, (decimal.Decimal, float, int)):\n         return number_format(value)\n     elif isinstance(value, datetime.datetime):\n-        format = default or get_format(\"DATETIME_INPUT_FORMATS\")[0]\n-        format = sanitize_strftime_format(format)\n-        return value.strftime(format)\n+        format_string = default or get_format(\"DATETIME_INPUT_FORMATS\")[0]\n+        format_string = sanitize_strftime_format(format_string)\n+        return value.strftime(format_string)\n     elif isinstance(value, datetime.date):\n-        format = default or get_format(\"DATE_INPUT_FORMATS\")[0]\n-        format = sanitize_strftime_format(format)\n-        return value.strftime(format)\n+        format_string = default or get_format(\"DATE_INPUT_FORMATS\")[0]\n+        format_string = sanitize_strftime_format(format_string)\n+        return value.strftime(format_string)\n     elif isinstance(value, datetime.time):\n-        format = default or get_format(\"TIME_INPUT_FORMATS\")[0]\n-        return value.strftime(format)\n+        format_string = default or get_format(\"TIME_INPUT_FORMATS\")[0]\n+        return value.strftime(format_string)\n     return value\n \n \n"
}