{
  "patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 23c3a08c67..bcc8b86bc3 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -11,7 +11,7 @@ from pprint import pformat\n from urllib.parse import quote\n \n from django.utils import formats\n-from django.utils.dateformat import format, time_format\n+from django.utils.dateformat import format as date_format, time_format\n from django.utils.deprecation import RemovedInDjango51Warning\n from django.utils.encoding import iri_to_uri\n from django.utils.html import avoid_wrapping, conditional_escape, escape, escapejs\n@@ -43,10 +43,10 @@ def stringfilter(func):\n     \"\"\"\n \n     @wraps(func)\n-    def _dec(first, *args, **kwargs):\n-        first = str(first)\n-        result = func(first, *args, **kwargs)\n-        if isinstance(first, SafeData) and getattr(unwrap(func), \"is_safe\", False):\n+    def _dec(value, *args, **kwargs):\n+        value = str(value)\n+        result = func(value, *args, **kwargs)\n+        if isinstance(value, SafeData) and getattr(unwrap(func), \"is_safe\", False):\n             result = mark_safe(result)\n         return result\n \n@@ -292,10 +292,10 @@ def title(value):\n def truncatechars(value, arg):\n     \"\"\"Truncate a string after `arg` number of characters.\"\"\"\n     try:\n-        length = int(arg)\n+        char_length = int(arg)\n     except ValueError:  # Invalid literal for int().\n         return value  # Fail silently.\n-    return Truncator(value).chars(length)\n+    return Truncator(value).chars(char_length)\n \n \n @register.filter(is_safe=True)\n@@ -306,10 +306,10 @@ def truncatechars_html(value, arg):\n     Preserve newlines in the HTML.\n     \"\"\"\n     try:\n-        length = int(arg)\n+        char_length = int(arg)\n     except ValueError:  # invalid literal for int()\n         return value  # Fail silently.\n-    return Truncator(value).chars(length, html=True)\n+    return Truncator(value).chars(char_length, html=True)\n \n \n @register.filter(is_safe=True)\n@@ -320,10 +320,10 @@ def truncatewords(value, arg):\n     Remove newlines within the string.\n     \"\"\"\n     try:\n-        length = int(arg)\n+        word_length = int(arg)\n     except ValueError:  # Invalid literal for int().\n         return value  # Fail silently.\n-    return Truncator(value).words(length, truncate=\" …\")\n+    return Truncator(value).words(word_length, truncate=\" …\")\n \n \n @register.filter(is_safe=True)\n@@ -334,10 +334,10 @@ def truncatewords_html(value, arg):\n     Preserve newlines in the HTML.\n     \"\"\"\n     try:\n-        length = int(arg)\n+        word_length = int(arg)\n     except ValueError:  # invalid literal for int()\n         return value  # Fail silently.\n-    return Truncator(value).words(length, html=True, truncate=\" …\")\n+    return Truncator(value).words(word_length, html=True, truncate=\" …\")\n \n \n @register.filter(is_safe=False)\n@@ -349,18 +349,18 @@ def upper(value):\n \n @register.filter(is_safe=False)\n @stringfilter\n-def urlencode(value, safe=None):\n+def urlencode(value, safe_chars=None):\n     \"\"\"\n     Escape a value for use in a URL.\n \n-    The ``safe`` parameter determines the characters which should not be\n+    The ``safe_chars`` parameter determines the characters which should not be\n     escaped by Python's quote() function. If not provided, use the default safe\n     characters (but an empty string can be provided when *all* characters\n     should be escaped).\n     \"\"\"\n     kwargs = {}\n-    if safe is not None:\n-        kwargs[\"safe\"] = safe\n+    if safe_chars is not None:\n+        kwargs[\"safe\"] = safe_chars\n     return quote(value, **kwargs)\n \n \n@@ -424,9 +424,9 @@ def center(value, arg):\n @stringfilter\n def cut(value, arg):\n     \"\"\"Remove all values of arg from the given string.\"\"\"\n-    safe = isinstance(value, SafeData)\n+    is_safe = isinstance(value, SafeData)\n     value = value.replace(arg, \"\")\n-    if safe and arg != \";\":\n+    if is_safe and arg != \";\":\n         return mark_safe(value)\n     return value\n \n@@ -529,9 +529,9 @@ def _property_resolver(arg):\n     \"\"\"\n     try:\n         float(arg)\n-    except ValueError:\n+    except ValueError as exc:\n         if VARIABLE_ATTRIBUTE_SEPARATOR + \"_\" in arg or arg[0] == \"_\":\n-            raise AttributeError(\"Access to private variables is forbidden.\")\n+            raise AttributeError(\"Access to private variables is forbidden.\") from exc\n         parts = arg.split(VARIABLE_ATTRIBUTE_SEPARATOR)\n \n         def resolve(value):\n@@ -771,7 +771,7 @@ def date(value, arg=None):\n         return formats.date_format(value, arg)\n     except AttributeError:\n         try:\n-            return format(value, arg)\n+            return date_format(value, arg)\n         except AttributeError:\n             return \"\"\n \n"
}