{
  "patch": "diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex 7dcc77b46c..19f5d5dd04 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -93,10 +93,10 @@ class TranslationCatalog:\n         # Merge if plural function is the same, else prepend.\n         for cat, plural in zip(self._catalogs, self._plurals):\n             if trans.plural.__code__ == plural.__code__:\n-                cat.update(trans._catalog)\n+                cat.update(trans._catalog)  # pylint: disable=protected-access\n                 break\n         else:\n-            self._catalogs.insert(0, trans._catalog.copy())\n+            self._catalogs.insert(0, trans._catalog.copy())  # pylint: disable=protected-access\n             self._plurals.insert(0, trans.plural)\n \n     def get(self, key, default=None):\n@@ -149,8 +149,8 @@ class DjangoTranslation(gettext_module.GNUTranslations):\n \n         if localedirs:\n             for localedir in localedirs:\n-                translation = self._new_gnu_trans(localedir)\n-                self.merge(translation)\n+                gnu_translation = self._new_gnu_trans(localedir)\n+                self.merge(gnu_translation)\n         else:\n             self._add_installed_apps_translations()\n \n@@ -185,29 +185,29 @@ class DjangoTranslation(gettext_module.GNUTranslations):\n         \"\"\"Create a base catalog using global django translations.\"\"\"\n         settingsfile = sys.modules[settings.__module__].__file__\n         localedir = os.path.join(os.path.dirname(settingsfile), 'locale')\n-        translation = self._new_gnu_trans(localedir)\n-        self.merge(translation)\n+        gnu_translation = self._new_gnu_trans(localedir)\n+        self.merge(gnu_translation)\n \n     def _add_installed_apps_translations(self):\n         \"\"\"Merge translations from each installed app.\"\"\"\n         try:\n             app_configs = reversed(list(apps.get_app_configs()))\n-        except AppRegistryNotReady:\n+        except AppRegistryNotReady as exc:\n             raise AppRegistryNotReady(\n                 \"The translation infrastructure cannot be initialized before the \"\n                 \"apps registry is ready. Check that you don't make non-lazy \"\n-                \"gettext calls at import time.\")\n+                \"gettext calls at import time.\") from exc\n         for app_config in app_configs:\n             localedir = os.path.join(app_config.path, 'locale')\n             if os.path.exists(localedir):\n-                translation = self._new_gnu_trans(localedir)\n-                self.merge(translation)\n+                gnu_translation = self._new_gnu_trans(localedir)\n+                self.merge(gnu_translation)\n \n     def _add_local_translations(self):\n         \"\"\"Merge translations defined in LOCALE_PATHS.\"\"\"\n         for localedir in reversed(settings.LOCALE_PATHS):\n-            translation = self._new_gnu_trans(localedir)\n-            self.merge(translation)\n+            gnu_translation = self._new_gnu_trans(localedir)\n+            self.merge(gnu_translation)\n \n     def _add_fallback(self, localedirs=None):\n         \"\"\"Set the GNUTranslations() fallback with the default language.\"\"\"\n@@ -231,12 +231,12 @@ class DjangoTranslation(gettext_module.GNUTranslations):\n         if self._catalog is None:\n             # Take plural and _info from first catalog found (generally Django's).\n             self.plural = other.plural\n-            self._info = other._info.copy()\n+            self._info = other._info.copy()  # pylint: disable=protected-access\n             self._catalog = TranslationCatalog(other)\n         else:\n             self._catalog.update(other)\n-        if other._fallback:\n-            self.add_fallback(other._fallback)\n+        if other._fallback:  # pylint: disable=protected-access\n+            self.add_fallback(other._fallback)  # pylint: disable=protected-access\n \n     def language(self):\n         \"\"\"Return the translation language.\"\"\"\n@@ -263,7 +263,7 @@ def translation(language):\n     \"\"\"\n     Return a translation object in the default 'django' domain.\n     \"\"\"\n-    global _translations\n+    global _translations  # pylint: disable=global-variable-not-assigned\n     if language not in _translations:\n         _translations[language] = DjangoTranslation(language)\n     return _translations[language]\n@@ -331,7 +331,7 @@ def catalog():\n     This can be used if you need to modify the catalog or want to access the\n     whole message catalog instead of just translating one string.\n     \"\"\"\n-    global _default\n+    global _default  # pylint: disable=global-statement\n \n     t = getattr(_active, \"value\", None)\n     if t is not None:\n@@ -347,7 +347,7 @@ def gettext(message):\n     translation object to use. If no current translation is activated, the\n     message will be run through the default translation object.\n     \"\"\"\n-    global _default\n+    global _default  # pylint: disable=global-statement\n \n     eol_message = message.replace('\\r\\n', '\\n').replace('\\r', '\\n')\n \n@@ -389,7 +389,7 @@ def gettext_noop(message):\n \n \n def do_ntranslate(singular, plural, number, translation_function):\n-    global _default\n+    global _default  # pylint: disable=global-statement\n \n     t = getattr(_active, \"value\", None)\n     if t is not None:\n@@ -540,7 +540,7 @@ def get_language_from_request(request, check_path=False):\n         pass\n \n     accept = request.META.get('HTTP_ACCEPT_LANGUAGE', '')\n-    for accept_lang, unused in parse_accept_lang_header(accept):\n+    for accept_lang, _ in parse_accept_lang_header(accept):\n         if accept_lang == '*':\n             break\n \n"
}