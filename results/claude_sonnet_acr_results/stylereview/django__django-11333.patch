{
  "patch": "diff --git a/django/urls/base.py b/django/urls/base.py\nindex 0e1c3d909c..b1bce5e054 100644\n--- a/django/urls/base.py\n+++ b/django/urls/base.py\n@@ -78,9 +78,9 @@ def reverse(viewname, urlconf=None, args=None, kwargs=None, current_app=None):\n                     raise NoReverseMatch(\n                         \"%s is not a registered namespace inside '%s'\" %\n                         (key, ':'.join(resolved_path))\n-                    )\n+                    ) from key\n                 else:\n-                    raise NoReverseMatch(\"%s is not a registered namespace\" % key)\n+                    raise NoReverseMatch(\"%s is not a registered namespace\" % key) from key\n         if ns_pattern:\n             resolver = get_ns_resolver(ns_pattern, resolver, tuple(ns_converters.items()))\n \ndiff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 247e3680c0..cac7be7db4 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -14,7 +14,7 @@ from urllib.parse import quote\n from asgiref.local import Local\n \n from django.conf import settings\n-from django.core.checks import Error, Warning\n+from django.core.checks import Error, Warning as CheckWarning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n@@ -124,7 +124,7 @@ class CheckURLMixin:\n             # when APPEND_SLASH=False.\n             return []\n         if regex_pattern.startswith(('/', '^/', '^\\\\/')) and not regex_pattern.endswith('/'):\n-            warning = Warning(\n+            warning = CheckWarning(\n                 \"Your URL pattern {} has a route beginning with a '/'. Remove this \"\n                 \"slash as it is unnecessary. If this pattern is targeted in an \"\n                 \"include(), ensure the include() pattern has a trailing '/'.\".format(\n@@ -168,7 +168,7 @@ class RegexPattern(CheckURLMixin):\n     def _check_include_trailing_dollar(self):\n         regex_pattern = self.regex.pattern\n         if regex_pattern.endswith('$') and not regex_pattern.endswith(r'\\$'):\n-            return [Warning(\n+            return [CheckWarning(\n                 \"Your URL pattern {} uses include with a route ending with a '$'. \"\n                 \"Remove the dollar from the route to avoid problems including \"\n                 \"URLs.\".format(self.describe()),\n@@ -184,7 +184,7 @@ class RegexPattern(CheckURLMixin):\n         except re.error as e:\n             raise ImproperlyConfigured(\n                 '\"%s\" is not a valid regular expression: %s' % (regex, e)\n-            )\n+            ) from e\n \n     def __str__(self):\n         return str(self._regex)\n@@ -227,7 +227,7 @@ def _route_to_regex(route, is_endpoint=False):\n         except KeyError as e:\n             raise ImproperlyConfigured(\n                 \"URL route '%s' uses invalid converter %s.\" % (original_route, e)\n-            )\n+            ) from e\n         converters[parameter] = converter\n         parts.append('(?P<' + parameter + '>' + converter.regex + ')')\n     if is_endpoint:\n@@ -263,7 +263,7 @@ class RoutePattern(CheckURLMixin):\n         warnings = self._check_pattern_startswith_slash()\n         route = self._route\n         if '(?P<' in route or route.startswith('^') or route.endswith('$'):\n-            warnings.append(Warning(\n+            warnings.append(CheckWarning(\n                 \"Your URL pattern {} has a route that contains '(?P<', begins \"\n                 \"with a '^', or ends with a '$'. This was likely an oversight \"\n                 \"when migrating to django.urls.path().\".format(self.describe()),\n@@ -332,7 +332,7 @@ class URLPattern:\n         Check that the pattern name does not contain a colon.\n         \"\"\"\n         if self.pattern.name is not None and \":\" in self.pattern.name:\n-            warning = Warning(\n+            warning = CheckWarning(\n                 \"Your URL pattern {} has a name including a ':'. Remove the colon, to \"\n                 \"avoid ambiguous namespace references.\".format(self.pattern.describe()),\n                 id=\"urls.W003\",\n@@ -344,7 +344,7 @@ class URLPattern:\n     def resolve(self, path):\n         match = self.pattern.match(path)\n         if match:\n-            new_path, args, kwargs = match\n+            _, args, kwargs = match\n             # Pass any extra_kwargs as **kwargs.\n             kwargs.update(self.default_args)\n             return ResolverMatch(self.callback, args, kwargs, self.pattern.name, route=str(self.pattern))\n@@ -407,7 +407,7 @@ class URLResolver:\n         # which takes (request).\n         for status_code, num_parameters in [(400, 2), (403, 2), (404, 2), (500, 1)]:\n             try:\n-                handler, param_dict = self.resolve_error_handler(status_code)\n+                handler, _ = self.resolve_error_handler(status_code)\n             except (ImportError, ViewDoesNotExist) as e:\n                 path = getattr(self.urlconf_module, 'handler%s' % status_code)\n                 msg = (\n@@ -467,7 +467,7 @@ class URLResolver:\n                         namespaces[url_pattern.namespace] = (p_pattern, url_pattern)\n                     else:\n                         for name in url_pattern.reverse_dict:\n-                            for matches, pat, defaults, converters in url_pattern.reverse_dict.getlist(name):\n+                            for _, pat, defaults, converters in url_pattern.reverse_dict.getlist(name):\n                                 new_matches = normalize(p_pattern + pat)\n                                 lookups.appendlist(\n                                     name,\n@@ -537,7 +537,7 @@ class URLResolver:\n                 try:\n                     sub_match = pattern.resolve(new_path)\n                 except Resolver404 as e:\n-                    sub_tried = e.args[0].get('tried')\n+                    sub_tried = e.args[0].get('tried') if isinstance(e.args[0], dict) else None\n                     if sub_tried is not None:\n                         tried.extend([pattern] + t for t in sub_tried)\n                     else:\n@@ -580,13 +580,13 @@ class URLResolver:\n         patterns = getattr(self.urlconf_module, \"urlpatterns\", self.urlconf_module)\n         try:\n             iter(patterns)\n-        except TypeError:\n+        except TypeError as e:\n             msg = (\n                 \"The included URLconf '{name}' does not appear to have any \"\n                 \"patterns in it. If you see valid patterns in the file then \"\n                 \"the issue is probably caused by a circular import.\"\n             )\n-            raise ImproperlyConfigured(msg.format(name=self.urlconf_name))\n+            raise ImproperlyConfigured(msg.format(name=self.urlconf_name)) from e\n         return patterns\n \n     def resolve_error_handler(self, view_type):\n"
}