{
  "patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex ea7e3a2d94..2bedf700d4 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -53,8 +53,10 @@ class MCodePrinter(CodePrinter):\n     _number_symbols = set()\n     _not_supported = set()\n \n-    def __init__(self, settings={}):\n+    def __init__(self, settings=None):\n         \"\"\"Register function mappings supplied by user\"\"\"\n+        if settings is None:\n+            settings = {}\n         CodePrinter.__init__(self, settings)\n         self.known_functions = dict(known_functions)\n         userfuncs = settings.get('user_functions', {})\n@@ -65,7 +67,7 @@ def __init__(self, settings={}):\n \n     doprint = StrPrinter.doprint\n \n-    def _print_Pow(self, expr):\n+    def _print_Pow(self, expr, rational=False):\n         PREC = precedence(expr)\n         return '%s^%s' % (self.parenthesize(expr.base, PREC),\n                           self.parenthesize(expr.exp, PREC))\n@@ -82,10 +84,10 @@ def _print_Mul(self, expr):\n     def _print_Pi(self, expr):\n         return 'Pi'\n \n-    def _print_Infinity(self, expr):\n+    def _print_Infinity(self, _expr):\n         return 'Infinity'\n \n-    def _print_NegativeInfinity(self, expr):\n+    def _print_NegativeInfinity(self, _expr):\n         return '-Infinity'\n \n     def _print_list(self, expr):\n@@ -116,6 +118,24 @@ def _print_Derivative(self, expr):\n         dvars = [i[0] if i[1] == 1 else i for i in expr.variable_count]\n         return \"Hold[D[\" + ', '.join(self.doprint(a) for a in [dexpr] + dvars) + \"]]\"\n \n+    def _declare_number_const(self, name, value):\n+        raise NotImplementedError(\"Number constant declaration is not supported for Mathematica code printing\")\n+\n+    def _format_code(self, lines):\n+        raise NotImplementedError(\"Code formatting is not supported for Mathematica expression printing\")\n+\n+    def _get_comment(self, text):\n+        raise NotImplementedError(\"Comment generation is not supported for Mathematica expression printing\")\n+\n+    def _get_loop_opening_ending(self, indices):\n+        raise NotImplementedError(\"Loop generation is not supported for Mathematica expression printing\")\n+\n+    def _get_statement(self, codestring):\n+        raise NotImplementedError(\"Statement generation is not supported for Mathematica expression printing\")\n+\n+    def _rate_index_position(self, p):\n+        raise NotImplementedError(\"Index position rating is not supported for Mathematica expression printing\")\n+\n \n def mathematica_code(expr, **settings):\n     r\"\"\"Converts an expr to a string of the Wolfram Mathematica code\n"
}