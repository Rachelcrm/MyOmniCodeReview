{
  "patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 6d38f932f9..d57d5c6806 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -16,14 +16,7 @@ class cached_property:\n     \"\"\"\n     name = None\n \n-    @staticmethod\n-    def func(instance):\n-        raise TypeError(\n-            'Cannot use cached_property instance without calling '\n-            '__set_name__() on it.'\n-        )\n-\n-    def __init__(self, func, name=None):\n+    def __init__(self, func, name=None):  # pylint: disable=unused-argument\n         self.real_func = func\n         self.__doc__ = getattr(func, '__doc__')\n \n@@ -70,7 +63,6 @@ class Promise:\n     Base class for the proxy class created in the closure of the lazy function.\n     It's used to recognize promises in code.\n     \"\"\"\n-    pass\n \n \n def lazy(func, *resultclasses):\n@@ -93,9 +85,9 @@ def lazy(func, *resultclasses):\n         def __init__(self, args, kw):\n             self.__args = args\n             self.__kw = kw\n-            if not self.__prepared:\n+            if not self.__prepared:  # pylint: disable=protected-access\n                 self.__prepare_class__()\n-            self.__class__.__prepared = True\n+            self.__class__.__prepared = True  # pylint: disable=protected-access\n \n         def __reduce__(self):\n             return (\n@@ -132,7 +124,7 @@ def lazy(func, *resultclasses):\n             def __wrapper__(self, *args, **kw):\n                 # Automatically triggers the evaluation of a lazy value and\n                 # applies the given magic method of the result type.\n-                res = func(*self.__args, **self.__kw)\n+                res = func(*self.__args, **self.__kw)  # pylint: disable=protected-access\n                 return getattr(res, method_name)(*args, **kw)\n             return __wrapper__\n \n@@ -142,8 +134,7 @@ def lazy(func, *resultclasses):\n         def __bytes_cast(self):\n             return bytes(func(*self.__args, **self.__kw))\n \n-        def __bytes_cast_encoded(self):\n-            return func(*self.__args, **self.__kw).encode()\n+\n \n         def __cast(self):\n             if self._delegate_bytes:\n@@ -160,12 +151,12 @@ def lazy(func, *resultclasses):\n \n         def __eq__(self, other):\n             if isinstance(other, Promise):\n-                other = other.__cast()\n+                other = other.__cast()  # pylint: disable=protected-access\n             return self.__cast() == other\n \n         def __lt__(self, other):\n             if isinstance(other, Promise):\n-                other = other.__cast()\n+                other = other.__cast()  # pylint: disable=protected-access\n             return self.__cast() < other\n \n         def __hash__(self):\n@@ -236,9 +227,9 @@ empty = object()\n \n def new_method_proxy(func):\n     def inner(self, *args):\n-        if self._wrapped is empty:\n-            self._setup()\n-        return func(self._wrapped, *args)\n+        if self._wrapped is empty:  # pylint: disable=protected-access\n+            self._setup()  # pylint: disable=protected-access\n+        return func(self._wrapped, *args)  # pylint: disable=protected-access\n     return inner\n \n \n"
}