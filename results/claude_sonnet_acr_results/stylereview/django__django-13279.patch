{
  "patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex b5453160a5..6715b76f03 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -26,14 +26,12 @@ class CreateError(Exception):\n     Used internally as a consistent exception type to catch from save (see the\n     docstring for SessionBase.save() for details).\n     \"\"\"\n-    pass\n \n \n class UpdateError(Exception):\n     \"\"\"\n     Occurs if Django tries to update a session that was deleted.\n     \"\"\"\n-    pass\n \n \n class SessionBase:\n@@ -50,6 +48,8 @@ class SessionBase:\n         self.accessed = False\n         self.modified = False\n         self.serializer = import_string(settings.SESSION_SERIALIZER)\n+        self._session_cache = None\n+        self.__session_key = None\n \n     def __contains__(self, key):\n         return key in self._session\n@@ -118,7 +118,7 @@ class SessionBase:\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n         # RemovedInDjango40Warning: when the deprecation ends, handle here\n         # exceptions similar to what _legacy_decode() does now.\n-        except Exception:\n+        except Exception:  # pylint: disable=broad-except  # Intentional for legacy compatibility\n             return self._legacy_decode(session_data)\n \n     def _legacy_decode(self, session_data):\n@@ -126,13 +126,13 @@ class SessionBase:\n         encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n             # could produce ValueError if there is no ':'\n-            hash, serialized = encoded_data.split(b':', 1)\n+            session_hash, serialized = encoded_data.split(b':', 1)\n             expected_hash = self._hash(serialized)\n-            if not constant_time_compare(hash.decode(), expected_hash):\n+            if not constant_time_compare(session_hash.decode(), expected_hash):\n                 raise SuspiciousSession(\"Session data corrupted\")\n             else:\n                 return self.serializer().loads(serialized)\n-        except Exception as e:\n+        except Exception as e:  # pylint: disable=broad-except  # Intentional to handle various decoding errors\n             # ValueError, SuspiciousOperation, unpickling exceptions. If any of\n             # these happen, just return an empty dictionary (an empty session).\n             if isinstance(e, SuspiciousOperation):\n"
}