{
  "patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex aaf35ee37c..aeaf262f48 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -152,6 +152,7 @@ class Query(BaseExpression):\n     join_class = Join\n \n     def __init__(self, model, alias_cols=True):\n+        super().__init__()\n         self.model = model\n         self.alias_refcount = {}\n         # alias_map is the most important data structure regarding joins.\n@@ -236,7 +237,7 @@ class Query(BaseExpression):\n \n         self.explain_info = None\n \n-    @property\n+    @cached_property\n     def output_field(self):\n         if len(self.select) == 1:\n             select = self.select[0]\n@@ -299,6 +300,7 @@ class Query(BaseExpression):\n         \"\"\"\n         obj = Empty()\n         obj.__class__ = self.__class__\n+        # pylint: disable=no-member\n         # Copy references to everything.\n         obj.__dict__ = self.__dict__.copy()\n         # Clone attributes that can't use shallow copy.\n@@ -357,7 +359,7 @@ class Query(BaseExpression):\n \n     def relabeled_clone(self, change_map):\n         clone = self.clone()\n-        clone.change_aliases(change_map)\n+        clone.change_aliases(change_map)  # pylint: disable=no-member\n         return clone\n \n     def _get_col(self, target, field, alias):\n@@ -445,6 +447,7 @@ class Query(BaseExpression):\n             inner_query = self.clone()\n             inner_query.subquery = True\n             outer_query = AggregateQuery(self.model, inner_query)\n+            # pylint: disable=no-member\n             inner_query.select_for_update = False\n             inner_query.select_related = False\n             inner_query.set_annotation_mask(self.annotation_select)\n@@ -515,8 +518,8 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n-        obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n-        return obj.get_aggregation(using, ['__count'])['__count']\n+        obj.add_annotation(Count('*'), alias='__count', is_summary=True)  # pylint: disable=no-member\n+        return obj.get_aggregation(using, ['__count'])['__count']  # pylint: disable=no-member\n \n     def has_filters(self):\n         return self.where\n"
}