{
  "patch": "diff --git a/youtube_dl/compat.py b/youtube_dl/compat.py\nindex 818ccebd0..1918a13b8 100644\n--- a/youtube_dl/compat.py\n+++ b/youtube_dl/compat.py\n@@ -41,7 +41,7 @@ except NameError:\n \n # casefold\n try:\n-    compat_str.casefold\n+    hasattr(compat_str, 'casefold')\n     compat_casefold = lambda s: s.casefold()\n except AttributeError:\n     from .casefold import casefold as compat_casefold\n@@ -64,9 +64,9 @@ except TypeError:\n \n         init = cls.__init__\n \n-        def wrapped_init(self, *args, **kwargs):\n+        def wrapped_init(self, *init_args, **kwargs):\n             method = kwargs.pop('method', 'GET')\n-            init(self, *args, **kwargs)\n+            init(self, *init_args, **kwargs)\n             if any(callable(x.__dict__.get('get_method')) for x in (self.__class__, self) if x != cls):\n                 # allow instance or its subclass to override get_method()\n                 return\n@@ -117,12 +117,12 @@ compat_http_cookiejar = compat_cookiejar\n \n if sys.version_info[0] == 2:\n     class compat_cookiejar_Cookie(compat_cookiejar.Cookie):\n-        def __init__(self, version, name, value, *args, **kwargs):\n-            if isinstance(name, compat_str):\n-                name = name.encode()\n+        def __init__(self, version, cookie_name, value, *cookie_args, **kwargs):\n+            if isinstance(cookie_name, compat_str):\n+                cookie_name = cookie_name.encode()\n             if isinstance(value, compat_str):\n                 value = value.encode()\n-            compat_cookiejar.Cookie.__init__(self, version, name, value, *args, **kwargs)\n+            compat_cookiejar.Cookie.__init__(self, version, cookie_name, value, *cookie_args, **kwargs)\n else:\n     compat_cookiejar_Cookie = compat_cookiejar.Cookie\n compat_http_cookiejar_Cookie = compat_cookiejar_Cookie\n@@ -2444,7 +2444,7 @@ try:\n     from subprocess import DEVNULL\n     compat_subprocess_get_DEVNULL = lambda: DEVNULL\n except ImportError:\n-    compat_subprocess_get_DEVNULL = lambda: open(os.path.devnull, 'w')\n+    compat_subprocess_get_DEVNULL = lambda: open(os.path.devnull, 'w', encoding='utf-8')\n \n try:\n     import http.server as compat_http_server\n@@ -2471,7 +2471,7 @@ except ImportError:  # Python 2\n         # unescaped non-ASCII characters, which URIs should not.\n         if not string:\n             # Is it a string-like object?\n-            string.split\n+            hasattr(string, 'split')\n             return b''\n         if isinstance(string, compat_str):\n             string = string.encode('utf-8')\n@@ -2482,9 +2482,14 @@ except ImportError:  # Python 2\n         append = res.append\n         for item in bits[1:]:\n             try:\n-                append(compat_urllib_parse._hextochr[item[:2]])\n+                if hasattr(compat_urllib_parse, '_hextochr'):\n+                    append(compat_urllib_parse._hextochr[item[:2]])\n+                else:\n+                    # Fallback hex conversion\n+                    hex_str = item[:2].decode('ascii') if isinstance(item[:2], bytes) else item[:2]\n+                    append(bytes.fromhex(hex_str))\n                 append(item[2:])\n-            except KeyError:\n+            except (KeyError, ValueError):\n                 append(b'%')\n                 append(item)\n         return b''.join(res)\n@@ -2500,7 +2505,7 @@ except ImportError:  # Python 2\n         unquote('abc%20def') -> 'abc def'.\n         \"\"\"\n         if '%' not in string:\n-            string.split\n+            hasattr(string, 'split')\n             return string\n         if encoding is None:\n             encoding = 'utf-8'\n@@ -2544,13 +2549,14 @@ except ImportError:  # Python 2\n         def encode_list(l):\n             return [encode_elem(e) for e in l]\n \n-        return compat_urllib_parse._urlencode(encode_elem(query), doseq=doseq)\n+        urlencode_func = getattr(compat_urllib_parse, '_urlencode', None) or getattr(compat_urllib_parse, 'urlencode')\n+        return urlencode_func(encode_elem(query), doseq=doseq)\n \n     # HACK: The following is the correct parse_qs implementation from cpython 3's stdlib.\n     # Python 2's version is apparently totally broken\n     def _parse_qsl(qs, keep_blank_values=False, strict_parsing=False,\n                    encoding='utf-8', errors='replace'):\n-        qs, _coerce_result = qs, compat_str\n+        _coerce_result = compat_str\n         pairs = [s2 for s1 in qs.split('&') for s2 in s1.split(';')]\n         r = []\n         for name_value in pairs:\n@@ -2566,15 +2572,15 @@ except ImportError:  # Python 2\n                 else:\n                     continue\n             if len(nv[1]) or keep_blank_values:\n-                name = nv[0].replace('+', ' ')\n-                name = compat_urllib_parse_unquote(\n-                    name, encoding=encoding, errors=errors)\n-                name = _coerce_result(name)\n+                param_name = nv[0].replace('+', ' ')\n+                param_name = compat_urllib_parse_unquote(\n+                    param_name, encoding=encoding, errors=errors)\n+                param_name = _coerce_result(param_name)\n                 value = nv[1].replace('+', ' ')\n                 value = compat_urllib_parse_unquote(\n                     value, encoding=encoding, errors=errors)\n                 value = _coerce_result(value)\n-                r.append((name, value))\n+                r.append((param_name, value))\n         return r\n \n     def compat_parse_qs(qs, keep_blank_values=False, strict_parsing=False,\n@@ -2582,11 +2588,11 @@ except ImportError:  # Python 2\n         parsed_result = {}\n         pairs = _parse_qsl(qs, keep_blank_values, strict_parsing,\n                            encoding=encoding, errors=errors)\n-        for name, value in pairs:\n-            if name in parsed_result:\n-                parsed_result[name].append(value)\n+        for param_name, value in pairs:\n+            if param_name in parsed_result:\n+                parsed_result[param_name].append(value)\n             else:\n-                parsed_result[name] = [value]\n+                parsed_result[param_name] = [value]\n         return parsed_result\n \n     setattr(compat_urllib_parse, '_urlencode',\n@@ -2618,7 +2624,7 @@ except ImportError:  # Python < 3.4\n             # parameter := attribute \"=\" value\n             url = req.get_full_url()\n \n-            scheme, data = url.split(':', 1)\n+            _, data = url.split(':', 1)\n             mediatype, data = data.split(',', 1)\n \n             # even base64 encoded data URLs might be quoted so unquote in any case:\n"
}