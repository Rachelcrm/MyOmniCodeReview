{
  "patch": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..4a2274ee84 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -100,7 +100,7 @@\n \n \n \n-def ContinuousRV(symbol, density, set=Interval(-oo, oo)):\n+def ContinuousRV(symbol, density, domain=Interval(-oo, oo)):\n     \"\"\"\n     Create a Continuous Random Variable given the following:\n \n@@ -130,7 +130,7 @@ def ContinuousRV(symbol, density, set=Interval(-oo, oo)):\n     1/2\n     \"\"\"\n     pdf = Lambda(symbol, density)\n-    dist = ContinuousDistributionHandmade(pdf, set)\n+    dist = ContinuousDistributionHandmade(pdf, domain)\n     return SingleContinuousPSpace(symbol, dist).value\n \n def rv(symbol, cls, args):\n@@ -281,7 +281,8 @@ class BetaDistribution(SingleContinuousDistribution):\n     set = Interval(0, 1)\n \n     @staticmethod\n-    def check(alpha, beta):\n+    def check(*args):\n+        alpha, beta = args\n         _value_check(alpha > 0, \"Alpha must be positive\")\n         _value_check(beta > 0, \"Beta must be positive\")\n \n@@ -424,7 +425,7 @@ def pdf(self, x):\n         return 1/(pi*self.gamma*(1 + ((x - self.x0)/self.gamma)**2))\n \n \n-def Cauchy(name, x0, gamma):\n+def Cauchy(name, x0, scale):\n     r\"\"\"\n     Create a continuous random variable with a Cauchy distribution.\n \n@@ -467,7 +468,7 @@ def Cauchy(name, x0, gamma):\n     .. [2] http://mathworld.wolfram.com/CauchyDistribution.html\n     \"\"\"\n \n-    return rv(name, CauchyDistribution, (x0, gamma))\n+    return rv(name, CauchyDistribution, (x0, scale))\n \n #-------------------------------------------------------------------------------\n # Chi distribution -------------------------------------------------------------\n@@ -798,7 +799,8 @@ class ExponentialDistribution(SingleContinuousDistribution):\n     set  = Interval(0, oo)\n \n     @staticmethod\n-    def check(rate):\n+    def check(*args):\n+        rate = args[0]\n         _value_check(rate > 0, \"Rate must be positive.\")\n \n     def pdf(self, x):\n@@ -1100,7 +1102,8 @@ class GammaDistribution(SingleContinuousDistribution):\n     set = Interval(0, oo)\n \n     @staticmethod\n-    def check(k, theta):\n+    def check(*args):\n+        k, theta = args\n         _value_check(k > 0, \"k must be positive\")\n         _value_check(theta > 0, \"Theta must be positive\")\n \n@@ -1192,7 +1195,8 @@ class GammaInverseDistribution(SingleContinuousDistribution):\n     set = Interval(0, oo)\n \n     @staticmethod\n-    def check(a, b):\n+    def check(*args):\n+        a, b = args\n         _value_check(a > 0, \"alpha must be positive\")\n         _value_check(b > 0, \"beta must be positive\")\n \n@@ -1315,7 +1319,8 @@ class GompertzDistribution(SingleContinuousDistribution):\n     set = Interval(0, oo)\n \n     @staticmethod\n-    def check(b, eta):\n+    def check(*args):\n+        b, eta = args\n         _value_check(b > 0, \"b must be positive\")\n         _value_check(eta > 0, \"eta must be positive\")\n \n@@ -1377,7 +1382,8 @@ class KumaraswamyDistribution(SingleContinuousDistribution):\n     set = Interval(0, oo)\n \n     @staticmethod\n-    def check(a, b):\n+    def check(*args):\n+        a, b = args\n         _value_check(a > 0, \"a must be positive\")\n         _value_check(b > 0, \"b must be positive\")\n \n@@ -1783,7 +1789,9 @@ class NormalDistribution(SingleContinuousDistribution):\n     _argnames = ('mean', 'std')\n \n     @staticmethod\n-    def check(mean, std):\n+    def check(*args):\n+        mean, std = args\n+        # mean parameter is used for unpacking but no validation needed\n         _value_check(std > 0, \"Standard deviation must be positive\")\n \n     def pdf(self, x):\n@@ -1878,7 +1886,8 @@ def set(self):\n         return Interval(self.xm, oo)\n \n     @staticmethod\n-    def check(xm, alpha):\n+    def check(*args):\n+        xm, alpha = args\n         _value_check(xm > 0, \"Xm must be positive\")\n         _value_check(alpha > 0, \"Alpha must be positive\")\n \n@@ -2028,7 +2037,8 @@ def set(self):\n         return Interval(self.mu - self.s, self.mu + self.s)\n \n     @staticmethod\n-    def check(mu, s):\n+    def check(*args):\n+        mu, s = args\n         _value_check(s > 0, \"s must be positive\")\n \n     def pdf(self, x):\n"
}