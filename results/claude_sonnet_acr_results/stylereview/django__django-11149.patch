{
  "patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 880a2cc17b..52841d3cae 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -138,7 +138,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         # If the field specifies choices, we don't need to look for special\n         # admin widgets - we just need to use a select widget of some kind.\n         if db_field.choices:\n-            return self.formfield_for_choice_field(db_field, request, **kwargs)\n+            return self.formfield_for_choice_field(db_field, **kwargs)\n \n         # ForeignKey or ManyToManyFields\n         if isinstance(db_field, (models.ForeignKey, models.ManyToManyField)):\n@@ -159,7 +159,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             # extra HTML -- the \"add other\" interface -- to the end of the\n             # rendered output. formfield can be None if it came from a\n             # OneToOneField with parent_link=True or a M2M intermediary.\n-            if formfield and db_field.name not in self.raw_id_fields:\n+            if formfield and db_field.name not in self.raw_id_fields and hasattr(self, 'admin_site'):\n                 related_modeladmin = self.admin_site._registry.get(db_field.remote_field.model)\n                 wrapper_kwargs = {}\n                 if related_modeladmin:\n@@ -185,7 +185,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         # For any other type of field, just call its formfield() method.\n         return db_field.formfield(**kwargs)\n \n-    def formfield_for_choice_field(self, db_field, request, **kwargs):\n+    def formfield_for_choice_field(self, db_field, **kwargs):\n         \"\"\"\n         Get a form Field for a database Field that has declared choices.\n         \"\"\"\n@@ -209,6 +209,8 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         ordering.  Otherwise don't specify the queryset, let the field decide\n         (return None in that case).\n         \"\"\"\n+        if not hasattr(self, 'admin_site'):\n+            return None\n         related_admin = self.admin_site._registry.get(db_field.remote_field.model)\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n@@ -223,9 +225,9 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         db = kwargs.get('using')\n \n         if 'widget' not in kwargs:\n-            if db_field.name in self.get_autocomplete_fields(request):\n+            if hasattr(self, 'admin_site') and db_field.name in self.get_autocomplete_fields():\n                 kwargs['widget'] = AutocompleteSelect(db_field.remote_field, self.admin_site, using=db)\n-            elif db_field.name in self.raw_id_fields:\n+            elif hasattr(self, 'admin_site') and db_field.name in self.raw_id_fields:\n                 kwargs['widget'] = widgets.ForeignKeyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n             elif db_field.name in self.radio_fields:\n                 kwargs['widget'] = widgets.AdminRadioSelect(attrs={\n"
}