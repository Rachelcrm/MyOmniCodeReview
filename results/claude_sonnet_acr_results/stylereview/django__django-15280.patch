{
  "patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex d5aa968400..35bf34ee75 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -115,12 +115,12 @@ class ForwardManyToOneDescriptor:\n         return self.field.is_cached(instance)\n \n     def get_queryset(self, **hints):\n-        return self.field.remote_field.model._base_manager.db_manager(hints=hints).all()\n+        return self.field.remote_field.model._base_manager.db_manager(hints=hints).all()  # pylint: disable=protected-access\n \n     def get_prefetch_queryset(self, instances, queryset=None):\n         if queryset is None:\n             queryset = self.get_queryset()\n-        queryset._add_hints(instance=instances[0])\n+        queryset._add_hints(instance=instances[0])  # pylint: disable=protected-access\n \n         rel_obj_attr = self.field.get_foreign_related_value\n         instance_attr = self.field.get_local_related_value\n@@ -293,7 +293,7 @@ class ForwardOneToOneDescriptor(ForwardManyToOneDescriptor):\n             # Because it's a parent link, all the data is available in the\n             # instance, so populate the parent model with this data.\n             rel_model = self.field.remote_field.model\n-            fields = [field.attname for field in rel_model._meta.concrete_fields]\n+            fields = [field.attname for field in rel_model._meta.concrete_fields]  # pylint: disable=protected-access\n \n             # If any of the related model's fields are deferred, fallback to\n             # fetching all fields from the related model. This avoids a query\n@@ -301,8 +301,8 @@ class ForwardOneToOneDescriptor(ForwardManyToOneDescriptor):\n             if not any(field in fields for field in deferred):\n                 kwargs = {field: getattr(instance, field) for field in fields}\n                 obj = rel_model(**kwargs)\n-                obj._state.adding = instance._state.adding\n-                obj._state.db = instance._state.db\n+                obj._state.adding = instance._state.adding  # pylint: disable=protected-access\n+                obj._state.db = instance._state.db  # pylint: disable=protected-access\n                 return obj\n         return super().get_object(instance)\n \n@@ -360,12 +360,12 @@ class ReverseOneToOneDescriptor:\n         return self.related.is_cached(instance)\n \n     def get_queryset(self, **hints):\n-        return self.related.related_model._base_manager.db_manager(hints=hints).all()\n+        return self.related.related_model._base_manager.db_manager(hints=hints).all()  # pylint: disable=protected-access\n \n     def get_prefetch_queryset(self, instances, queryset=None):\n         if queryset is None:\n             queryset = self.get_queryset()\n-        queryset._add_hints(instance=instances[0])\n+        queryset._add_hints(instance=instances[0])  # pylint: disable=protected-access\n \n         rel_obj_attr = self.related.field.get_local_related_value\n         instance_attr = self.related.field.get_foreign_related_value\n@@ -524,7 +524,7 @@ class ReverseManyToOneDescriptor:\n         related_model = self.rel.related_model\n \n         return create_reverse_many_to_one_manager(\n-            related_model._default_manager.__class__,\n+            related_model._default_manager.__class__,  # pylint: disable=protected-access\n             self.rel,\n         )\n \n@@ -589,10 +589,10 @@ def create_reverse_many_to_one_manager(superclass, rel):\n             \"\"\"\n             db = self._db or router.db_for_read(self.model, instance=self.instance)\n             empty_strings_as_null = connections[db].features.interprets_empty_strings_as_nulls\n-            queryset._add_hints(instance=self.instance)\n+            queryset._add_hints(instance=self.instance)  # pylint: disable=protected-access\n             if self._db:\n                 queryset = queryset.using(self._db)\n-            queryset._defer_next_filter = True\n+            queryset._defer_next_filter = True  # pylint: disable=protected-access\n             queryset = queryset.filter(**self.core_filters)\n             for field in self.field.foreign_related_fields:\n                 val = getattr(self.instance, field.attname)\n@@ -614,18 +614,18 @@ def create_reverse_many_to_one_manager(superclass, rel):\n                     ])\n                 else:\n                     rel_obj_id = getattr(self.instance, target_field.attname)\n-                queryset._known_related_objects = {self.field: {rel_obj_id: self.instance}}\n+                queryset._known_related_objects = {self.field: {rel_obj_id: self.instance}}  # pylint: disable=protected-access\n             return queryset\n \n         def _remove_prefetched_objects(self):\n             try:\n-                self.instance._prefetched_objects_cache.pop(self.field.remote_field.get_cache_name())\n+                self.instance._prefetched_objects_cache.pop(self.field.remote_field.get_cache_name())  # pylint: disable=protected-access\n             except (AttributeError, KeyError):\n                 pass  # nothing to clear from cache\n \n         def get_queryset(self):\n             try:\n-                return self.instance._prefetched_objects_cache[self.field.remote_field.get_cache_name()]\n+                return self.instance._prefetched_objects_cache[self.field.remote_field.get_cache_name()]  # pylint: disable=protected-access\n             except (AttributeError, KeyError):\n                 queryset = super().get_queryset()\n                 return self._apply_rel_filters(queryset)\n@@ -634,8 +634,8 @@ def create_reverse_many_to_one_manager(superclass, rel):\n             if queryset is None:\n                 queryset = super().get_queryset()\n \n-            queryset._add_hints(instance=instances[0])\n-            queryset = queryset.using(queryset._db or self._db)\n+            queryset._add_hints(instance=instances[0])  # pylint: disable=protected-access\n+            queryset = queryset.using(queryset._db or self._db)  # pylint: disable=protected-access\n \n             rel_obj_attr = self.field.get_local_related_value\n             instance_attr = self.field.get_foreign_related_value\n@@ -658,7 +658,7 @@ def create_reverse_many_to_one_manager(superclass, rel):\n             def check_and_update_obj(obj):\n                 if not isinstance(obj, self.model):\n                     raise TypeError(\"'%s' instance expected, got %r\" % (\n-                        self.model._meta.object_name, obj,\n+                        self.model._meta.object_name, obj,  # pylint: disable=protected-access\n                     ))\n                 setattr(obj, self.field.name, self.instance)\n \n@@ -666,7 +666,7 @@ def create_reverse_many_to_one_manager(superclass, rel):\n                 pks = []\n                 for obj in objs:\n                     check_and_update_obj(obj)\n-                    if obj._state.adding or obj._state.db != db:\n+                    if obj._state.adding or obj._state.db != db:  # pylint: disable=protected-access\n                         raise ValueError(\n                             \"%r instance isn't saved. Use bulk=False or save \"\n                             \"the object first.\" % obj\n"
}