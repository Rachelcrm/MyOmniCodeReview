{
  "patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..cb04bdbd4f 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -21,7 +21,7 @@ class ListFilter:\n     title = None  # Human-readable title to appear in the right sidebar.\n     template = 'admin/filter.html'\n \n-    def __init__(self, request, params, model, model_admin):\n+    def __init__(self, _request, _params, _model, _model_admin):\n         # This dictionary will eventually contain the request's query string\n         # parameters actually used by this filter.\n         self.used_parameters = {}\n@@ -132,13 +132,28 @@ class FieldListFilter(ListFilter):\n     def has_output(self):\n         return True\n \n+    def choices(self, changelist):\n+        \"\"\"\n+        Return choices ready to be output in the template.\n+        Must be implemented by subclasses.\n+        \"\"\"\n+        raise NotImplementedError('subclasses of FieldListFilter must provide a choices() method')\n+\n+    def expected_parameters(self):\n+        \"\"\"\n+        Return the list of parameter names that are expected from the\n+        request's query string and that will be used by this filter.\n+        Must be implemented by subclasses.\n+        \"\"\"\n+        raise NotImplementedError('subclasses of FieldListFilter must provide an expected_parameters() method')\n+\n     def queryset(self, request, queryset):\n         try:\n             return queryset.filter(**self.used_parameters)\n         except (ValueError, ValidationError) as e:\n             # Fields may raise a ValueError or ValidationError when converting\n             # the parameters to the correct type.\n-            raise IncorrectLookupParameters(e)\n+            raise IncorrectLookupParameters(e) from e\n \n     @classmethod\n     def register(cls, test, list_filter_class, take_priority=False):\n@@ -195,7 +210,7 @@ class RelatedFieldListFilter(FieldListFilter):\n \n     def field_choices(self, field, request, model_admin):\n         ordering = ()\n-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)  # pylint: disable=protected-access\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n         return field.get_choices(include_blank=False, ordering=ordering)\n@@ -376,7 +391,7 @@ class AllValuesFieldListFilter(FieldListFilter):\n         self.lookup_val = params.get(self.lookup_kwarg)\n         self.lookup_val_isnull = params.get(self.lookup_kwarg_isnull)\n         self.empty_value_display = model_admin.get_empty_value_display()\n-        parent_model, reverse_path = reverse_field_path(model, field_path)\n+        parent_model, _reverse_path = reverse_field_path(model, field_path)\n         # Obey parent ModelAdmin queryset when deciding which options to show\n         if model == parent_model:\n             queryset = model_admin.get_queryset(request)\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 194514c900..32418e7e50 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -57,7 +57,7 @@ BLANK_CHOICE_DASH = [(\"\", \"---------\")]\n \n \n def _load_field(app_label, model_name, field_name):\n-    return apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+    return apps.get_model(app_label, model_name)._meta.get_field(field_name)  # pylint: disable=protected-access\n \n \n # A guide to Field parameters:\n@@ -322,9 +322,9 @@ class Field(RegisterLookupMixin):\n             return []\n \n     def _check_backend_specific_checks(self, **kwargs):\n-        app_label = self.model._meta.app_label\n+        app_label = self.model._meta.app_label  # pylint: disable=protected-access\n         for db in connections:\n-            if router.allow_migrate(db, app_label, model_name=self.model._meta.model_name):\n+            if router.allow_migrate(db, app_label, model_name=self.model._meta.model_name):  # pylint: disable=protected-access\n                 return connections[db].validation.check_field(self, **kwargs)\n         return []\n \n@@ -378,7 +378,7 @@ class Field(RegisterLookupMixin):\n     def get_col(self, alias, output_field=None):\n         if output_field is None:\n             output_field = self\n-        if alias != self.model._meta.db_table or output_field != self:\n+        if alias != self.model._meta.db_table or output_field != self:  # pylint: disable=protected-access\n             from django.db.models.expressions import Col\n             return Col(alias, self, output_field)\n         else:\n@@ -387,9 +387,9 @@ class Field(RegisterLookupMixin):\n     @cached_property\n     def cached_col(self):\n         from django.db.models.expressions import Col\n-        return Col(self.model._meta.db_table, self)\n+        return Col(self.model._meta.db_table, self)  # pylint: disable=protected-access\n \n-    def select_format(self, compiler, sql, params):\n+    def select_format(self, _compiler, sql, params):\n         \"\"\"\n         Custom format for select clauses. For example, GIS columns need to be\n         selected as AsText(table.col) on MySQL as the table.col data can't be\n@@ -491,7 +491,7 @@ class Field(RegisterLookupMixin):\n         Uses deconstruct() to clone a new copy of this Field.\n         Will not preserve any class attachments/attribute names.\n         \"\"\"\n-        name, path, args, kwargs = self.deconstruct()\n+        _name, _path, args, kwargs = self.deconstruct()\n         return self.__class__(*args, **kwargs)\n \n     def __eq__(self, other):\n@@ -514,9 +514,9 @@ class Field(RegisterLookupMixin):\n         # intended to be altered after initial creation.\n         obj = copy.copy(self)\n         if self.remote_field:\n-            obj.remote_field = copy.copy(self.remote_field)\n+            obj.remote_field = copy.copy(self.remote_field)  # pylint: disable=attribute-defined-outside-init\n             if hasattr(self.remote_field, 'field') and self.remote_field.field is self:\n-                obj.remote_field.field = obj\n+                obj.remote_field.field = obj  # pylint: disable=attribute-defined-outside-init\n         memodict[id(self)] = obj\n         return obj\n \n"
}