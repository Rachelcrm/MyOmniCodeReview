{
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex bf9c2acd26..d7daf5fb97 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -33,6 +33,23 @@ class MigrationAutodetector:\n         self.to_state = to_state\n         self.questioner = questioner or MigrationQuestioner()\n         self.existing_apps = {app for app, model in from_state.models}\n+        \n+        # Initialize attributes that will be set in other methods\n+        self.generated_operations = None\n+        self.altered_indexes = None\n+        self.altered_constraints = None\n+        self.old_model_keys = None\n+        self.old_proxy_keys = None\n+        self.old_unmanaged_keys = None\n+        self.new_model_keys = None\n+        self.new_proxy_keys = None\n+        self.new_unmanaged_keys = None\n+        self.kept_model_keys = None\n+        self.kept_proxy_keys = None\n+        self.kept_unmanaged_keys = None\n+        self.through_users = None\n+        self.old_field_keys = None\n+        self.new_field_keys = None\n \n     def changes(self, graph, trim_to_apps=None, convert_apps=None, migration_name=None):\n         \"\"\"\n@@ -93,7 +110,7 @@ class MigrationAutodetector:\n         the related fields change during renames).\n         \"\"\"\n         fields_def = []\n-        for name, field in sorted(fields.items()):\n+        for _, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n                 deconstruction[2].pop('to', None)\n@@ -272,7 +289,7 @@ class MigrationAutodetector:\n                 for operation in list(self.generated_operations[app_label]):\n                     deps_satisfied = True\n                     operation_dependencies = set()\n-                    for dep in operation._auto_deps:\n+                    for dep in operation._auto_deps:  # pylint: disable=protected-access\n                         # Temporarily resolve the swappable dependency to\n                         # prevent circular references. While keeping the\n                         # dependency checks on the resolved model, add the\n@@ -341,7 +358,7 @@ class MigrationAutodetector:\n             # construct a dependency graph for intra-app dependencies\n             dependency_graph = {op: set() for op in ops}\n             for op in ops:\n-                for dep in op._auto_deps:\n+                for dep in op._auto_deps:  # pylint: disable=protected-access\n                     # Resolve intra-app dependencies to handle circular\n                     # references involving a swappable model.\n                     dep = self._resolve_dependency(dep)[0]\n@@ -434,7 +451,7 @@ class MigrationAutodetector:\n \n     def add_operation(self, app_label, operation, dependencies=None, beginning=False):\n         # Dependencies are (app_label, model_name, field_name, create/delete as True/False)\n-        operation._auto_deps = dependencies or []\n+        operation._auto_deps = dependencies or []  # pylint: disable=protected-access\n         if beginning:\n             self.generated_operations.setdefault(app_label, []).insert(0, operation)\n         else:\n@@ -1367,7 +1384,7 @@ class MigrationAutodetector:\n         app_dependencies = {}\n         for app_label, migrations in changes.items():\n             for migration in migrations:\n-                for dep_app_label, name in migration.dependencies:\n+                for dep_app_label, _ in migration.dependencies:\n                     app_dependencies.setdefault(app_label, set()).add(dep_app_label)\n         required_apps = set(app_labels)\n         # Keep resolving till there's no change\n"
}