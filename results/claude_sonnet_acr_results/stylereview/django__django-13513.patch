{
  "patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7a89f7bd15..ee0921386c 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -130,7 +130,7 @@ class SafeExceptionReporterFilter:\n             return {}\n         return {k: self.cleanse_setting(k, v) for k, v in request.META.items()}\n \n-    def is_active(self, request):\n+    def is_active(self, _request):\n         \"\"\"\n         This filter is to add safety in production environments (i.e. DEBUG\n         is False). If DEBUG is True then your site is not safe anyway.\n@@ -184,7 +184,7 @@ class SafeExceptionReporterFilter:\n             # might raise an exception. isinstance checks that lazy\n             # MultiValueDicts will have a return value.\n             is_multivalue_dict = isinstance(value, MultiValueDict)\n-        except Exception as e:\n+        except (TypeError, AttributeError) as e:\n             return '{!r} while evaluating {!r}'.format(e, value)\n \n         if is_multivalue_dict:\n@@ -293,7 +293,7 @@ class ExceptionReporter:\n         else:\n             try:\n                 user_str = str(self.request.user)\n-            except Exception:\n+            except Exception:  # pylint: disable=broad-except\n                 # request.user may raise OperationalError if the database is\n                 # unavailable, for example.\n                 user_str = '[unable to retrieve the current user]'\n@@ -531,7 +531,7 @@ def technical_404_response(request, exception):\n     return HttpResponseNotFound(t.render(c), content_type='text/html')\n \n \n-def default_urlconf(request):\n+def default_urlconf(_request):\n     \"\"\"Create an empty URLconf 404 error response.\"\"\"\n     with Path(CURRENT_DIR, 'templates', 'default_urlconf.html').open(encoding='utf-8') as fh:\n         t = DEBUG_ENGINE.from_string(fh.read())\n"
}