{
  "patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 137e6faa0f..61641b8690 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -116,6 +116,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n     view_on_site = True\n     show_full_result_count = True\n     checks_class = BaseModelAdminChecks\n+    inlines = ()\n \n     def check(self, **kwargs):\n         return self.checks_class().check(self, **kwargs)\n@@ -159,7 +160,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             # extra HTML -- the \"add other\" interface -- to the end of the\n             # rendered output. formfield can be None if it came from a\n             # OneToOneField with parent_link=True or a M2M intermediary.\n-            if formfield and db_field.name not in self.raw_id_fields:\n+            if formfield and db_field.name not in self.raw_id_fields and hasattr(self, 'admin_site') and self.admin_site:\n                 related_modeladmin = self.admin_site._registry.get(db_field.remote_field.model)\n                 wrapper_kwargs = {}\n                 if related_modeladmin:\n@@ -185,7 +186,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         # For any other type of field, just call its formfield() method.\n         return db_field.formfield(**kwargs)\n \n-    def formfield_for_choice_field(self, db_field, request, **kwargs):\n+    def formfield_for_choice_field(self, db_field, request=None, **kwargs):\n         \"\"\"\n         Get a form Field for a database Field that has declared choices.\n         \"\"\"\n@@ -209,11 +210,12 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         ordering.  Otherwise don't specify the queryset, let the field decide\n         (return None in that case).\n         \"\"\"\n-        related_admin = self.admin_site._registry.get(db_field.remote_field.model)\n-        if related_admin is not None:\n-            ordering = related_admin.get_ordering(request)\n-            if ordering is not None and ordering != ():\n-                return db_field.remote_field.model._default_manager.using(db).order_by(*ordering)\n+        if hasattr(self, 'admin_site') and self.admin_site:\n+            related_admin = self.admin_site._registry.get(db_field.remote_field.model)\n+            if related_admin is not None:\n+                ordering = related_admin.get_ordering(request)\n+                if ordering is not None and ordering != ():\n+                    return db_field.remote_field.model._default_manager.using(db).order_by(*ordering)\n         return None\n \n     def formfield_for_foreignkey(self, db_field, request, **kwargs):\n@@ -223,9 +225,9 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         db = kwargs.get('using')\n \n         if 'widget' not in kwargs:\n-            if db_field.name in self.get_autocomplete_fields(request):\n+            if db_field.name in self.get_autocomplete_fields(request) and hasattr(self, 'admin_site') and self.admin_site:\n                 kwargs['widget'] = AutocompleteSelect(db_field.remote_field, self.admin_site, using=db)\n-            elif db_field.name in self.raw_id_fields:\n+            elif db_field.name in self.raw_id_fields and hasattr(self, 'admin_site') and self.admin_site:\n                 kwargs['widget'] = widgets.ForeignKeyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n             elif db_field.name in self.radio_fields:\n                 kwargs['widget'] = widgets.AdminRadioSelect(attrs={\n@@ -251,9 +253,9 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         db = kwargs.get('using')\n \n         autocomplete_fields = self.get_autocomplete_fields(request)\n-        if db_field.name in autocomplete_fields:\n+        if db_field.name in autocomplete_fields and hasattr(self, 'admin_site') and self.admin_site:\n             kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in self.raw_id_fields:\n+        elif db_field.name in self.raw_id_fields and hasattr(self, 'admin_site') and self.admin_site:\n             kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n         elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n             kwargs['widget'] = widgets.FilteredSelectMultiple(\n@@ -274,7 +276,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             form_field.help_text = format_lazy('{} {}', help_text, msg) if help_text else msg\n         return form_field\n \n-    def get_autocomplete_fields(self, request):\n+    def get_autocomplete_fields(self, request=None):\n         \"\"\"\n         Return a list of ForeignKey and/or ManyToMany fields which should use\n         an autocomplete widget.\n@@ -287,7 +289,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n \n         if callable(self.view_on_site):\n             return self.view_on_site(obj)\n-        elif self.view_on_site and hasattr(obj, 'get_absolute_url'):\n+        elif self.view_on_site is True and hasattr(obj, 'get_absolute_url'):\n             # use the ContentType lookup if view_on_site is True\n             return reverse('admin:view_on_site', kwargs={\n                 'content_type_id': get_content_type_for_model(obj).pk,\n@@ -301,9 +303,11 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         try:\n             return mark_safe(self.empty_value_display)\n         except AttributeError:\n-            return mark_safe(self.admin_site.empty_value_display)\n+            if hasattr(self, 'admin_site') and self.admin_site:\n+                return mark_safe(self.admin_site.empty_value_display)\n+            return mark_safe('-')\n \n-    def get_exclude(self, request, obj=None):\n+    def get_exclude(self, request=None, obj=None):\n         \"\"\"\n         Hook for specifying exclude.\n         \"\"\"\n@@ -316,8 +320,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         if self.fields:\n             return self.fields\n         # _get_form_for_get_fields() is implemented in subclasses.\n-        form = self._get_form_for_get_fields(request, obj)\n-        return [*form.base_fields, *self.get_readonly_fields(request, obj)]\n+        if hasattr(self, '_get_form_for_get_fields'):\n+            form = self._get_form_for_get_fields(request, obj)\n+            return [*form.base_fields, *self.get_readonly_fields(request, obj)]\n+        return []\n \n     def get_fieldsets(self, request, obj=None):\n         \"\"\"\n@@ -327,7 +333,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             return self.fieldsets\n         return [(None, {'fields': self.get_fields(request, obj)})]\n \n-    def get_inlines(self, request, obj):\n+    def get_inlines(self, request=None, obj=None):\n         \"\"\"Hook for specifying custom inlines.\"\"\"\n         return self.inlines\n \n"
}