{
  "patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 90fc31bee5..ebc735935e 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -37,6 +37,18 @@ class ModelOperation(Operation):\n     def can_reduce_through(self, operation, app_label):\n         return not operation.references_model(self.name, app_label)\n \n+    @abstractmethod\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        pass\n+\n+    @abstractmethod\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        pass\n+\n+    @abstractmethod\n+    def state_forwards(self, app_label, state):\n+        pass\n+\n \n class CreateModel(ModelOperation):\n     \"\"\"Create a model's table.\"\"\"\n@@ -358,25 +370,25 @@ class RenameModel(ModelOperation):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n-            old_db_table = old_model._meta.db_table\n-            new_db_table = new_model._meta.db_table\n+            old_db_table = old_model._meta.db_table  # pylint: disable=protected-access\n+            new_db_table = new_model._meta.db_table  # pylint: disable=protected-access\n             # Don't alter when a table name is not changed.\n             if old_db_table == new_db_table:\n                 return\n             # Move the main table\n             schema_editor.alter_db_table(new_model, old_db_table, new_db_table)\n             # Alter the fields pointing to us\n-            for related_object in old_model._meta.related_objects:\n+            for related_object in old_model._meta.related_objects:  # pylint: disable=protected-access\n                 if related_object.related_model == old_model:\n                     model = new_model\n                     related_key = (app_label, self.new_name_lower)\n                 else:\n                     model = related_object.related_model\n                     related_key = (\n-                        related_object.related_model._meta.app_label,\n-                        related_object.related_model._meta.model_name,\n+                        related_object.related_model._meta.app_label,  # pylint: disable=protected-access\n+                        related_object.related_model._meta.model_name,  # pylint: disable=protected-access\n                     )\n-                to_field = to_state.apps.get_model(*related_key)._meta.get_field(\n+                to_field = to_state.apps.get_model(*related_key)._meta.get_field(  # pylint: disable=protected-access\n                     related_object.field.name\n                 )\n                 schema_editor.alter_field(\n@@ -386,13 +398,13 @@ class RenameModel(ModelOperation):\n                 )\n             # Rename M2M fields whose name is based on this model's name.\n             fields = zip(\n-                old_model._meta.local_many_to_many, new_model._meta.local_many_to_many\n+                old_model._meta.local_many_to_many, new_model._meta.local_many_to_many  # pylint: disable=protected-access\n             )\n             for (old_field, new_field) in fields:\n                 # Skip self-referential fields as these are renamed above.\n                 if (\n                     new_field.model == new_field.related_model\n-                    or not new_field.remote_field.through._meta.auto_created\n+                    or not new_field.remote_field.through._meta.auto_created  # pylint: disable=protected-access\n                 ):\n                     continue\n                 # Rename the M2M table that's based on this model's name.\n@@ -400,30 +412,35 @@ class RenameModel(ModelOperation):\n                 new_m2m_model = new_field.remote_field.through\n                 schema_editor.alter_db_table(\n                     new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n+                    old_m2m_model._meta.db_table,  # pylint: disable=protected-access\n+                    new_m2m_model._meta.db_table,  # pylint: disable=protected-access\n                 )\n                 # Rename the column in the M2M table that's based on this\n                 # model's name.\n                 schema_editor.alter_field(\n                     new_m2m_model,\n-                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n-                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n+                    old_m2m_model._meta.get_field(old_model._meta.model_name),  # pylint: disable=protected-access\n+                    new_m2m_model._meta.get_field(new_model._meta.model_name),  # pylint: disable=protected-access\n                 )\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+        # Clear cached properties before swapping names\n+        if 'old_name_lower' in self.__dict__:\n+            del self.__dict__['old_name_lower']\n+        if 'new_name_lower' in self.__dict__:\n+            del self.__dict__['new_name_lower']\n+        \n+        # Swap the names\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n+        # Swap back and clear cached properties again\n+        if 'old_name_lower' in self.__dict__:\n+            del self.__dict__['old_name_lower']\n+        if 'new_name_lower' in self.__dict__:\n+            del self.__dict__['new_name_lower']\n+        \n         self.new_name, self.old_name = self.old_name, self.new_name\n \n     def references_model(self, name, app_label):\n"
}