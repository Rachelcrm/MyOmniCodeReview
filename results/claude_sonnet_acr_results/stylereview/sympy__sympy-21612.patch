{
  "patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex c3fdcdd435..250f5d5278 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -67,10 +67,10 @@ def _print_Add(self, expr, order=None):\n             sign = \"\"\n         return sign + ' '.join(l)\n \n-    def _print_BooleanTrue(self, expr):\n+    def _print_BooleanTrue(self, _):\n         return \"True\"\n \n-    def _print_BooleanFalse(self, expr):\n+    def _print_BooleanFalse(self, _):\n         return \"False\"\n \n     def _print_Not(self, expr):\n@@ -98,10 +98,10 @@ def _print_BlockMatrix(self, B):\n             self._print(B.blocks[0, 0])\n         return self._print(B.blocks)\n \n-    def _print_Catalan(self, expr):\n+    def _print_Catalan(self, _):\n         return 'Catalan'\n \n-    def _print_ComplexInfinity(self, expr):\n+    def _print_ComplexInfinity(self, _):\n         return 'zoo'\n \n     def _print_ConditionSet(self, s):\n@@ -114,7 +114,7 @@ def _print_ConditionSet(self, s):\n     def _print_Derivative(self, expr):\n         dexpr = expr.expr\n         dvars = [i[0] if i[1] == 1 else i for i in expr.variable_count]\n-        return 'Derivative(%s)' % \", \".join(map(lambda arg: self._print(arg), [dexpr] + dvars))\n+        return 'Derivative(%s)' % \", \".join(map(self._print, [dexpr] + dvars))\n \n     def _print_dict(self, d):\n         keys = sorted(d.keys(), key=default_sort_key)\n@@ -141,10 +141,10 @@ def _print_RandomDomain(self, d):\n     def _print_Dummy(self, expr):\n         return '_' + expr.name\n \n-    def _print_EulerGamma(self, expr):\n+    def _print_EulerGamma(self, _):\n         return 'EulerGamma'\n \n-    def _print_Exp1(self, expr):\n+    def _print_Exp1(self, _):\n         return 'E'\n \n     def _print_ExprCondPair(self, expr):\n@@ -153,16 +153,16 @@ def _print_ExprCondPair(self, expr):\n     def _print_Function(self, expr):\n         return expr.func.__name__ + \"(%s)\" % self.stringify(expr.args, \", \")\n \n-    def _print_GoldenRatio(self, expr):\n+    def _print_GoldenRatio(self, _):\n         return 'GoldenRatio'\n \n-    def _print_TribonacciConstant(self, expr):\n+    def _print_TribonacciConstant(self, _):\n         return 'TribonacciConstant'\n \n-    def _print_ImaginaryUnit(self, expr):\n+    def _print_ImaginaryUnit(self, _):\n         return 'I'\n \n-    def _print_Infinity(self, expr):\n+    def _print_Infinity(self, _):\n         return 'oo'\n \n     def _print_Integral(self, expr):\n@@ -212,17 +212,18 @@ def _print_LatticeOp(self, expr):\n         return expr.func.__name__ + \"(%s)\" % \", \".join(self._print(arg) for arg in args)\n \n     def _print_Limit(self, expr):\n-        e, z, z0, dir = expr.args\n-        if str(dir) == \"+\":\n+        e, z, z0, direction = expr.args\n+        if str(direction) == \"+\":\n             return \"Limit(%s, %s, %s)\" % tuple(map(self._print, (e, z, z0)))\n         else:\n             return \"Limit(%s, %s, %s, dir='%s')\" % tuple(map(self._print,\n-                                                            (e, z, z0, dir)))\n+                                                            (e, z, z0, direction)))\n \n     def _print_list(self, expr):\n         return \"[%s]\" % self.stringify(expr, \", \")\n \n     def _print_MatrixBase(self, expr):\n+        # pylint: disable=protected-access\n         return expr._format_str(self)\n \n     def _print_MatrixElement(self, expr):\n@@ -238,7 +239,7 @@ def strslice(x, dim):\n                 x[0] = ''\n             if x[1] == dim:\n                 x[1] = ''\n-            return ':'.join(map(lambda arg: self._print(arg), x))\n+            return ':'.join(map(self._print, x))\n         return (self.parenthesize(expr.parent, PRECEDENCE[\"Atom\"], strict=True) + '[' +\n                 strslice(expr.rowslice, expr.parent.rows) + ', ' +\n                 strslice(expr.colslice, expr.parent.cols) + ']')\n@@ -268,6 +269,7 @@ def _print_Mul(self, expr):\n                 else:\n                     dargs = list(di.exp.args)\n                     dargs[0] = -dargs[0]\n+                    # pylint: disable=protected-access\n                     e = Mul._from_args(dargs)\n                 d[i] = Pow(di.base, e, evaluate=False) if e - 1 else di.base\n \n@@ -321,6 +323,7 @@ def apow(i):\n                 eargs = eargs[1:]\n             else:\n                 eargs[0] = -eargs[0]\n+            # pylint: disable=protected-access\n             e = Mul._from_args(eargs)\n             if isinstance(i, Pow):\n                 return i.func(b, e, evaluate=False)\n@@ -385,10 +388,10 @@ def _print_ElementwiseApplyFunction(self, expr):\n             self._print(expr.expr),\n         )\n \n-    def _print_NaN(self, expr):\n+    def _print_NaN(self, _):\n         return 'nan'\n \n-    def _print_NegativeInfinity(self, expr):\n+    def _print_NegativeInfinity(self, _):\n         return '-oo'\n \n     def _print_Order(self, expr):\n@@ -453,9 +456,11 @@ def _print_Subs(self, obj):\n             self._print(expr), self._print(old), self._print(new))\n \n     def _print_TensorIndex(self, expr):\n+        # pylint: disable=protected-access\n         return expr._print()\n \n     def _print_TensorHead(self, expr):\n+        # pylint: disable=protected-access\n         return expr._print()\n \n     def _print_Tensor(self, expr):\n"
}