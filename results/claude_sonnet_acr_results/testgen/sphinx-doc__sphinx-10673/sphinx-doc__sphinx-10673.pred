{
  "instance_id": "sphinx-doc__sphinx-10673",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/test_directive_toctree_builtin_docs.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom docutils import nodes\nfrom docutils.parsers.rst import directives\n\nfrom sphinx import addnodes\nfrom sphinx.directives.other import TocTree\nfrom sphinx.environment.adapters.toctree import TocTree as TocTreeAdapter\nfrom sphinx.testing.util import SphinxTestApp\nfrom sphinx.util.docutils import docutils_namespace\n\n\n@pytest.fixture\ndef app():\n    \"\"\"Create a Sphinx application for testing.\"\"\"\n    with SphinxTestApp(buildername='html', srcdir=None) as app:\n        yield app\n\n\n@pytest.fixture\ndef toctree_directive(app):\n    \"\"\"Create a TocTree directive instance for testing.\"\"\"\n    directive = TocTree(\n        name='toctree',\n        arguments=[],\n        options={},\n        content=[],\n        lineno=1,\n        content_offset=0,\n        block_text='',\n        state=None,\n        state_machine=None\n    )\n    directive.env = app.env\n    return directive\n\n\nclass TestTocTreeBuiltinDocs:\n    \"\"\"Test toctree handling of built-in documents like genindex, modindex, search.\"\"\"\n\n    def test_toctree_with_genindex_should_not_warn(self, app, status, warning):\n        \"\"\"Test that including genindex in toctree doesn't generate warnings.\"\"\"\n        # Create a simple document with toctree containing genindex\n        app.env.temp_data['docname'] = 'index'\n        \n        # Add the document content\n        content = \"\"\"\nTest Document\n=============\n\n.. toctree::\n   :maxdepth: 1\n   \n   genindex\n\"\"\"\n        \n        # Write the content to a file and build\n        (app.srcdir / 'index.rst').write_text(content)\n        app.build()\n        \n        # Check that no warnings about genindex were generated\n        warning_text = warning.getvalue()\n        assert \"toctree contains reference to nonexisting document 'genindex'\" not in warning_text\n\n    def test_toctree_with_modindex_should_not_warn(self, app, status, warning):\n        \"\"\"Test that including modindex in toctree doesn't generate warnings.\"\"\"\n        app.env.temp_data['docname'] = 'index'\n        \n        content = \"\"\"\nTest Document\n=============\n\n.. toctree::\n   :maxdepth: 1\n   \n   modindex\n\"\"\"\n        \n        (app.srcdir / 'index.rst').write_text(content)\n        app.build()\n        \n        warning_text = warning.getvalue()\n        assert \"toctree contains reference to nonexisting document 'modindex'\" not in warning_text\n\n    def test_toctree_with_search_should_not_warn(self, app, status, warning):\n        \"\"\"Test that including search in toctree doesn't generate warnings.\"\"\"\n        app.env.temp_data['docname'] = 'index'\n        \n        content = \"\"\"\nTest Document\n=============\n\n.. toctree::\n   :maxdepth: 1\n   \n   search\n\"\"\"\n        \n        (app.srcdir / 'index.rst').write_text(content)\n        app.build()\n        \n        warning_text = warning.getvalue()\n        assert \"toctree contains reference to nonexisting document 'search'\" not in warning_text\n\n    def test_toctree_with_all_builtin_docs_should_not_warn(self, app, status, warning):\n        \"\"\"Test that including all built-in docs in toctree doesn't generate warnings.\"\"\"\n        app.env.temp_data['docname'] = 'index'\n        \n        content = \"\"\"\nTest Document\n=============\n\n.. toctree::\n   :maxdepth: 1\n   :caption: Indices and tables\n   \n   genindex\n   modindex\n   search\n\"\"\"\n        \n        (app.srcdir / 'index.rst').write_text(content)\n        app.build()\n        \n        warning_text = warning.getvalue()\n        assert \"toctree contains reference to nonexisting document 'genindex'\" not in warning_text\n        assert \"toctree contains reference to nonexisting document 'modindex'\" not in warning_text\n        assert \"toctree contains reference to nonexisting document 'search'\" not in warning_text\n\n    def test_toctree_with_mixed_docs_should_warn_only_for_missing(self, app, status, warning):\n        \"\"\"Test that toctree warns only for truly missing docs, not built-in ones.\"\"\"\n        app.env.temp_data['docname'] = 'index'\n        \n        content = \"\"\"\nTest Document\n=============\n\n.. toctree::\n   :maxdepth: 1\n   \n   genindex\n   nonexistent_doc\n   modindex\n   another_missing_doc\n   search\n\"\"\"\n        \n        (app.srcdir / 'index.rst').write_text(content)\n        app.build()\n        \n        warning_text = warning.getvalue()\n        \n        # Should NOT warn about built-in docs\n        assert \"toctree contains reference to nonexisting document 'genindex'\" not in warning_text\n        assert \"toctree contains reference to nonexisting document 'modindex'\" not in warning_text\n        assert \"toctree contains reference to nonexisting document 'search'\" not in warning_text\n        \n        # Should warn about truly missing docs\n        assert \"toctree contains reference to nonexisting document\" in warning_text\n        assert \"nonexistent_doc\" in warning_text or \"another_missing_doc\" in warning_text\n\n    def test_toctree_builtin_docs_with_subdirectory(self, app, status, warning):\n        \"\"\"Test that built-in docs work even when referenced from subdirectories.\"\"\"\n        app.env.temp_data['docname'] = 'subdir/page'\n        \n        # Create subdirectory\n        (app.srcdir / 'subdir').mkdir(exist_ok=True)\n        \n        content = \"\"\"\nSubdirectory Page\n=================\n\n.. toctree::\n   :maxdepth: 1\n   \n   ../genindex\n   ../modindex\n   ../search\n\"\"\"\n        \n        (app.srcdir / 'subdir' / 'page.rst').write_text(content)\n        \n        # Also need an index file\n        index_content = \"\"\"\nMain Document\n=============\n\n.. toctree::\n   :maxdepth: 1\n   \n   subdir/page\n\"\"\"\n        (app.srcdir / 'index.rst').write_text(index_content)\n        \n        app.build()\n        \n        warning_text = warning.getvalue()\n        assert \"toctree contains reference to nonexisting document\" not in warning_text or \\\n               (\"genindex\" not in warning_text and \"modindex\" not in warning_text and \"search\" not in warning_text)\n\n    def test_toctree_resolve_builtin_docs(self, app):\n        \"\"\"Test that TocTree.resolve handles built-in docs correctly.\"\"\"\n        # Create a toctree node with built-in docs\n        toctree_node = addnodes.toctree()\n        toctree_node['entries'] = [\n            (None, 'genindex'),\n            (None, 'modindex'), \n            (None, 'search')\n        ]\n        toctree_node['includefiles'] = ['genindex', 'modindex', 'search']\n        \n        # Create TocTree adapter\n        adapter = TocTreeAdapter(app.env)\n        \n        # This should not raise exceptions or generate warnings\n        # The resolve method should handle built-in docs gracefully\n        try:\n            result = adapter.resolve('index', app.builder, toctree_node)\n            # If no exception is raised, the test passes\n            # The exact result structure may vary, but no errors should occur\n        except KeyError as e:\n            # If KeyError is raised for built-in docs, that's the bug we're testing\n            if str(e) in (\"'genindex'\", \"'modindex'\", \"'search'\"):\n                pytest.fail(f\"TocTree.resolve should handle built-in document {e} without KeyError\")\n            else:\n                # Re-raise if it's a different KeyError\n                raise\n\n    def test_toctree_parse_content_builtin_docs(self, app):\n        \"\"\"Test that TocTree.parse_content handles built-in docs correctly.\"\"\"\n        # Create a mock toctree directive\n        directive = TocTree(\n            name='toctree',\n            arguments=[],\n            options={},\n            content=['genindex', 'modindex', 'search'],\n            lineno=1,\n            content_offset=0,\n            block_text='',\n            state=None,\n            state_machine=None\n        )\n        directive.env = app.env\n        \n        # Create a toctree node\n        toctree_node = addnodes.toctree()\n        toctree_node['entries'] = []\n        toctree_node['includefiles'] = []\n        \n        # Parse the content - this should not generate warnings for built-in docs\n        with pytest.warns(None) as warning_list:\n            directive.parse_content(toctree_node)\n        \n        # Filter warnings to only those about nonexisting documents\n        nonexisting_warnings = [\n            w for w in warning_list \n            if hasattr(w.message, 'args') and \n            'nonexisting document' in str(w.message.args[0]) and\n            any(doc in str(w.message.args) for doc in ['genindex', 'modindex', 'search'])\n        ]\n        \n        # Should not have warnings about built-in docs\n        assert len(nonexisting_warnings) == 0, f\"Found warnings about built-in docs: {nonexisting_warnings}\"\n\n    def test_regular_missing_docs_still_warn(self, app, status, warning):\n        \"\"\"Test that regular missing documents still generate warnings (regression test).\"\"\"\n        app.env.temp_data['docname'] = 'index'\n        \n        content = \"\"\"\nTest Document\n=============\n\n.. toctree::\n   :maxdepth: 1\n   \n   definitely_missing_document\n\"\"\"\n        \n        (app.srcdir / 'index.rst').write_text(content)\n        app.build()\n        \n        warning_text = warning.getvalue()\n        assert \"toctree contains reference to nonexisting document\" in warning_text\n        assert \"definitely_missing_document\" in warning_text\n</patched>\n```",
  "patch": "--- a/tests/test_directive_toctree_builtin_docs.py\n+++ b/tests/test_directive_toctree_builtin_docs.py\n-# Empty if creating new file\n+import pytest\n+from docutils import nodes\n+from docutils.parsers.rst import directives\n+\n+from sphinx import addnodes\n+from sphinx.directives.other import TocTree\n+from sphinx.environment.adapters.toctree import TocTree as TocTreeAdapter\n+from sphinx.testing.util import SphinxTestApp\n+from sphinx.util.docutils import docutils_namespace\n+\n+\n+@pytest.fixture\n+def app():\n+    \"\"\"Create a Sphinx application for testing.\"\"\"\n+    with SphinxTestApp(buildername='html', srcdir=None) as app:\n+        yield app\n+\n+\n+@pytest.fixture\n+def toctree_directive(app):\n+    \"\"\"Create a TocTree directive instance for testing.\"\"\"\n+    directive = TocTree(\n+        name='toctree',\n+        arguments=[],\n+        options={},\n+        content=[],\n+        lineno=1,\n+        content_offset=0,\n+        block_text='',\n+        state=None,\n+        state_machine=None\n+    )\n+    directive.env = app.env\n+    return directive\n+\n+\n+class TestTocTreeBuiltinDocs:\n+    \"\"\"Test toctree handling of built-in documents like genindex, modindex, search.\"\"\"\n+\n+    def test_toctree_with_genindex_should_not_warn(self, app, status, warning):\n+        \"\"\"Test that including genindex in toctree doesn't generate warnings.\"\"\"\n+        # Create a simple document with toctree containing genindex\n+        app.env.temp_data['docname'] = 'index'\n+        \n+        # Add the document content\n+        content = \"\"\"\n+Test Document\n+=============\n+\n+.. toctree::\n+   :maxdepth: 1\n+   \n+   genindex\n+\"\"\"\n+        \n+        # Write the content to a file and build\n+        (app.srcdir / 'index.rst').write_text(content)\n+        app.build()\n+        \n+        # Check that no warnings about genindex were generated\n+        warning_text = warning.getvalue()\n+        assert \"toctree contains reference to nonexisting document 'genindex'\" not in warning_text\n+\n+    def test_toctree_with_modindex_should_not_warn(self, app, status, warning):\n+        \"\"\"Test that including modindex in toctree doesn't generate warnings.\"\"\"\n+        app.env.temp_data['docname'] = 'index'\n+        \n+        content = \"\"\"\n+Test Document\n+=============\n+\n+.. toctree::\n+   :maxdepth: 1\n+   \n+   modindex\n+\"\"\"\n+        \n+        (app.srcdir / 'index.rst').write_text(content)\n+        app.build()\n+        \n+        warning_text = warning.getvalue()\n+        assert \"toctree contains reference to nonexisting document 'modindex'\" not in warning_text\n+\n+    def test_toctree_with_search_should_not_warn(self, app, status, warning):\n+        \"\"\"Test that including search in toctree doesn't generate warnings.\"\"\"\n+        app.env.temp_data['docname'] = 'index'\n+        \n+        content = \"\"\"\n+Test Document\n+=============\n+\n+.. toctree::\n+   :maxdepth: 1\n+   \n+   search\n+\"\"\"\n+        \n+        (app.srcdir / 'index.rst').write_text(content)\n+        app.build()\n+        \n+        warning_text = warning.getvalue()\n+        assert \"toctree contains reference to nonexisting document 'search'\" not in warning_text\n+\n+    def test_toctree_with_all_builtin_docs_should_not_warn(self, app, status, warning):\n+        \"\"\"Test that including all built-in docs in toctree doesn't generate warnings.\"\"\"\n+        app.env.temp_data['docname'] = 'index'\n+        \n+        content = \"\"\"\n+Test Document\n+=============\n+\n+.. toctree::\n+   :maxdepth: 1\n+   :caption: Indices and tables\n+   \n+   genindex\n+   modindex\n+   search\n+\"\"\"\n+        \n+        (app.srcdir / 'index.rst').write_text(content)\n+        app.build()\n+        \n+        warning_text = warning.getvalue()\n+        assert \"toctree contains reference to nonexisting document 'genindex'\" not in warning_text\n+        assert \"toctree contains reference to nonexisting document 'modindex'\" not in warning_text\n+        assert \"toctree contains reference to nonexisting document 'search'\" not in warning_text\n+\n+    def test_toctree_with_mixed_docs_should_warn_only_for_missing(self, app, status, warning):\n+        \"\"\"Test that toctree warns only for truly missing docs, not built-in ones.\"\"\"\n+        app.env.temp_data['docname'] = 'index'\n+        \n+        content = \"\"\"\n+Test Document\n+=============\n+\n+.. toctree::\n+   :maxdepth: 1\n+   \n+   genindex\n+   nonexistent_doc\n+   modindex\n+   another_missing_doc\n+   search\n+\"\"\"\n+        \n+        (app.srcdir / 'index.rst').write_text(content)\n+        app.build()\n+        \n+        warning_text = warning.getvalue()\n+        \n+        # Should NOT warn about built-in docs\n+        assert \"toctree contains reference to nonexisting document 'genindex'\" not in warning_text\n+        assert \"toctree contains reference to nonexisting document 'modindex'\" not in warning_text\n+        assert \"toctree contains reference to nonexisting document 'search'\" not in warning_text\n+        \n+        # Should warn about truly missing docs\n+        assert \"toctree contains reference to nonexisting document\" in warning_text\n+        assert \"nonexistent_doc\" in warning_text or \"another_missing_doc\" in warning_text\n+\n+    def test_toctree_builtin_docs_with_subdirectory(self, app, status, warning):\n+        \"\"\"Test that built-in docs work even when referenced from subdirectories.\"\"\"\n+        app.env.temp_data['docname'] = 'subdir/page'\n+        \n+        # Create subdirectory\n+        (app.srcdir / 'subdir').mkdir(exist_ok=True)\n+        \n+        content = \"\"\"\n+Subdirectory Page\n+=================\n+\n+.. toctree::\n+   :maxdepth: 1\n+   \n+   ../genindex\n+   ../modindex\n+   ../search\n+\"\"\"\n+        \n+        (app.srcdir / 'subdir' / 'page.rst').write_text(content)\n+        \n+        # Also need an index file\n+        index_content = \"\"\"\n+Main Document\n+=============\n+\n+.. toctree::\n+   :maxdepth: 1\n+   \n+   subdir/page\n+\"\"\"\n+        (app.srcdir / 'index.rst').write_text(index_content)\n+        \n+        app.build()\n+        \n+        warning_text = warning.getvalue()\n+        assert \"toctree contains reference to nonexisting document\" not in warning_text or \\\n+               (\"genindex\" not in warning_text and \"modindex\" not in warning_text and \"search\" not in warning_text)\n+\n+    def test_toctree_resolve_builtin_docs(self, app):\n+        \"\"\"Test that TocTree.resolve handles built-in docs correctly.\"\"\"\n+        # Create a toctree node with built-in docs\n+        toctree_node = addnodes.toctree()\n+        toctree_node['entries'] = [\n+            (None, 'genindex'),\n+            (None, 'modindex'), \n+            (None, 'search')\n+        ]\n+        toctree_node['includefiles'] = ['genindex', 'modindex', 'search']\n+        \n+        # Create TocTree adapter\n+        adapter = TocTreeAdapter(app.env)\n+        \n+        # This should not raise exceptions or generate warnings\n+        # The resolve method should handle built-in docs gracefully\n+        try:\n+            result = adapter.resolve('index', app.builder, toctree_node)\n+            # If no exception is raised, the test passes\n+            # The exact result structure may vary, but no errors should occur\n+        except KeyError as e:\n+            # If KeyError is raised for built-in docs, that's the bug we're testing\n+            if str(e) in (\"'genindex'\", \"'modindex'\", \"'search'\"):\n+                pytest.fail(f\"TocTree.resolve should handle built-in document {e} without KeyError\")\n+            else:\n+                # Re-raise if it's a different KeyError\n+                raise\n+\n+    def test_toctree_parse_content_builtin_docs(self, app):\n+        \"\"\"Test that TocTree.parse_content handles built-in docs correctly.\"\"\"\n+        # Create a mock toctree directive\n+        directive = TocTree(\n+            name='toctree',\n+            arguments=[],\n+            options={},\n+            content=['genindex', 'modindex', 'search'],\n+            lineno=1,\n+            content_offset=0,\n+            block_text='',\n+            state=None,\n+            state_machine=None\n+        )\n+        directive.env = app.env\n+        \n+        # Create a toctree node\n+        toctree_node = addnodes.toctree()\n+        toctree_node['entries'] = []\n+        toctree_node['includefiles'] = []\n+        \n+        # Parse the content - this should not generate warnings for built-in docs\n+        with pytest.warns(None) as warning_list:\n+            directive.parse_content(toctree_node)\n+        \n+        # Filter warnings to only those about nonexisting documents\n+        nonexisting_warnings = [\n+            w for w in warning_list \n+            if hasattr(w.message, 'args') and \n+            'nonexisting document' in str(w.message.args[0]) and\n+            any(doc in str(w.message.args) for doc in ['genindex', 'modindex', 'search'])\n+        ]\n+        \n+        # Should not have warnings about built-in docs\n+        assert len(nonexisting_warnings) == 0, f\"Found warnings about built-in docs: {nonexisting_warnings}\"\n+\n+    def test_regular_missing_docs_still_warn(self, app, status, warning):\n+        \"\"\"Test that regular missing documents still generate warnings (regression test).\"\"\"\n+        app.env.temp_data['docname'] = 'index'\n+        \n+        content = \"\"\"\n+Test Document\n+=============\n+\n+.. toctree::\n+   :maxdepth: 1\n+   \n+   definitely_missing_document\n+\"\"\"\n+        \n+        (app.srcdir / 'index.rst').write_text(content)\n+        app.build()\n+        \n+        warning_text = warning.getvalue()\n+        assert \"toctree contains reference to nonexisting document\" in warning_text\n+        assert \"definitely_missing_document\" in warning_text\n"
}