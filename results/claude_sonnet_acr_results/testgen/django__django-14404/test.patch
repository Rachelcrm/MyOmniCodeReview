--- a/tests/admin_tests/test_sites.py
+++ b/tests/admin_tests/test_sites.py
-# Empty if creating new file
+import pytest
+from django.conf import settings
+from django.contrib.admin.sites import AdminSite
+from django.http import HttpRequest, Http404
+from django.test import TestCase, RequestFactory, override_settings
+from django.urls import reverse
+from django.contrib.auth.models import User
+
+
+class CatchAllViewForceScriptNameTests(TestCase):
+    """Test that catch_all_view properly supports FORCE_SCRIPT_NAME."""
+    
+    def setUp(self):
+        self.factory = RequestFactory()
+        self.admin_site = AdminSite()
+        
+    def test_catch_all_view_without_force_script_name(self):
+        """Test catch_all_view behavior without FORCE_SCRIPT_NAME (baseline)."""
+        request = self.factory.get('/admin/test')
+        request.path_info = '/admin/test'
+        request.path = '/admin/test'
+        
+        with override_settings(APPEND_SLASH=True):
+            response = self.admin_site.catch_all_view(request, 'test')
+            
+        # Should redirect to /admin/test/ (with trailing slash)
+        self.assertEqual(response.status_code, 301)
+        self.assertEqual(response.url, '/admin/test/')
+    
+    @override_settings(FORCE_SCRIPT_NAME='/myapp', APPEND_SLASH=True)
+    def test_catch_all_view_with_force_script_name_fails_before_fix(self):
+        """Test that demonstrates the bug - redirect loses script name."""
+        request = self.factory.get('/myapp/admin/test')
+        # Simulate how Django sets path_info and path with FORCE_SCRIPT_NAME
+        request.path_info = '/admin/test'  # Script name stripped
+        request.path = '/myapp/admin/test'  # Full path with script name
+        
+        with override_settings(APPEND_SLASH=True):
+            response = self.admin_site.catch_all_view(request, 'test')
+            
+        # BUG: This currently redirects to '/admin/test/' instead of '/myapp/admin/test/'
+        # The test will fail before the fix is applied
+        self.assertEqual(response.status_code, 301)
+        # This assertion will fail with the current buggy code
+        self.assertEqual(response.url, '/myapp/admin/test/')
+    
+    @override_settings(FORCE_SCRIPT_NAME='/myapp', APPEND_SLASH=True)
+    def test_catch_all_view_with_force_script_name_passes_after_fix(self):
+        """Test that verifies the fix works correctly."""
+        request = self.factory.get('/myapp/admin/test')
+        # Simulate how Django sets path_info and path with FORCE_SCRIPT_NAME
+        request.path_info = '/admin/test'  # Script name stripped
+        request.path = '/myapp/admin/test'  # Full path with script name
+        
+        with override_settings(APPEND_SLASH=True):
+            response = self.admin_site.catch_all_view(request, 'test')
+            
+        # After fix: Should redirect to '/myapp/admin/test/' (preserving script name)
+        self.assertEqual(response.status_code, 301)
+        self.assertEqual(response.url, '/myapp/admin/test/')
+    
+    @override_settings(FORCE_SCRIPT_NAME='/app/subpath', APPEND_SLASH=True)
+    def test_catch_all_view_with_nested_script_name(self):
+        """Test with nested script name path."""
+        request = self.factory.get('/app/subpath/admin/test')
+        request.path_info = '/admin/test'
+        request.path = '/app/subpath/admin/test'
+        
+        with override_settings(APPEND_SLASH=True):
+            response = self.admin_site.catch_all_view(request, 'test')
+            
+        self.assertEqual(response.status_code, 301)
+        self.assertEqual(response.url, '/app/subpath/admin/test/')
+    
+    def test_catch_all_view_with_trailing_slash_no_redirect(self):
+        """Test that URLs with trailing slash don't get redirected."""
+        request = self.factory.get('/admin/test/')
+        request.path_info = '/admin/test/'
+        request.path = '/admin/test/'
+        
+        with override_settings(APPEND_SLASH=True):
+            with self.assertRaises(Http404):
+                self.admin_site.catch_all_view(request, 'test/')
+    
+    @override_settings(APPEND_SLASH=False)
+    def test_catch_all_view_append_slash_disabled(self):
+        """Test that no redirect happens when APPEND_SLASH is False."""
+        request = self.factory.get('/admin/test')
+        request.path_info = '/admin/test'
+        request.path = '/admin/test'
+        
+        with self.assertRaises(Http404):
+            self.admin_site.catch_all_view(request, 'test')
+    
+    @override_settings(FORCE_SCRIPT_NAME='', APPEND_SLASH=True)
+    def test_catch_all_view_empty_script_name(self):
+        """Test with empty FORCE_SCRIPT_NAME."""
+        request = self.factory.get('/admin/test')
+        request.path_info = '/admin/test'
+        request.path = '/admin/test'
+        
+        response = self.admin_site.catch_all_view(request, 'test')
+        
+        self.assertEqual(response.status_code, 301)
+        self.assertEqual(response.url, '/admin/test/')
+    
+    @override_settings(FORCE_SCRIPT_NAME='/myapp', APPEND_SLASH=True)
+    def test_catch_all_view_edge_case_root_path(self):
+        """Test edge case with root path."""
+        request = self.factory.get('/myapp/admin/')
+        request.path_info = '/admin/'
+        request.path = '/myapp/admin/'
+        
+        # Should raise Http404 since path already ends with slash
+        with self.assertRaises(Http404):
+            self.admin_site.catch_all_view(request, '')
+
+
+class CatchAllViewIntegrationTests(TestCase):
+    """Integration tests to verify the fix works in realistic scenarios."""
+    
+    def setUp(self):
+        self.factory = RequestFactory()
+        
+    @override_settings(
+        FORCE_SCRIPT_NAME='/myapp',
+        APPEND_SLASH=True,
+        ROOT_URLCONF='django.contrib.admin.urls'
+    )
+    def test_admin_url_resolution_with_force_script_name(self):
+        """Test that admin URLs work correctly with FORCE_SCRIPT_NAME."""
+        # Create a superuser for admin access
+        User.objects.create_superuser('admin', 'admin@test.com', 'password')
+        
+        # Test that admin index works with script name
+        request = self.factory.get('/myapp/admin/')
+        request.path_info = '/admin/'
+        request.path = '/myapp/admin/'
+        request.user = User.objects.get(username='admin')
+        
+        # This should not trigger catch_all_view since it ends with slash
+        # But if it did, it should preserve the script name
+        admin_site = AdminSite()
+        with self.assertRaises(Http404):
+            admin_site.catch_all_view(request, '')
+    
+    @override_settings(FORCE_SCRIPT_NAME='/myapp', APPEND_SLASH=True)
+    def test_catch_all_view_preserves_query_params(self):
+        """Test that redirects preserve query parameters."""
+        request = self.factory.get('/myapp/admin/test?param=value')
+        request.path_info = '/admin/test'
+        request.path = '/myapp/admin/test'
+        request.GET = {'param': 'value'}
+        
+        admin_site = AdminSite()
+        response = admin_site.catch_all_view(request, 'test')
+        
+        # The redirect URL should include the script name
+        self.assertEqual(response.status_code, 301)
+        self.assertEqual(response.url, '/myapp/admin/test/')
+        # Note: Query params are not preserved in the current implementation
+        # This test documents the current behavior

--- a/tests/admin_tests/test_force_script_name_bug.py
+++ b/tests/admin_tests/test_force_script_name_bug.py
-# Empty if creating new file
+import pytest
+from django.contrib.admin.sites import AdminSite
+from django.test import TestCase, RequestFactory, override_settings
+from django.http import Http404
+
+
+class ForceScriptNameBugReproductionTest(TestCase):
+    """
+    Test that specifically reproduces the bug described in the issue.
+    This test should fail before the fix and pass after the fix.
+    """
+    
+    def setUp(self):
+        self.factory = RequestFactory()
+        self.admin_site = AdminSite()
+    
+    @override_settings(FORCE_SCRIPT_NAME='/myapp', APPEND_SLASH=True)
+    def test_bug_reproduction_catch_all_view_loses_script_name(self):
+        """
+        Reproduce the exact bug: catch_all_view returns redirect to 
+        '%s/' % request.path_info (script name cut off) instead of 
+        '%s/' % request.path (with the script name).
+        
+        This test will FAIL before the fix is applied and PASS after.
+        """
+        # Simulate a request to /myapp/admin/test (without trailing slash)
+        request = self.factory.get('/myapp/admin/test')
+        
+        # When FORCE_SCRIPT_NAME is set, Django sets these attributes:
+        request.path_info = '/admin/test'      # Script name stripped off
+        request.path = '/myapp/admin/test'     # Full path with script name
+        
+        # Call catch_all_view which should redirect to add trailing slash
+        response = self.admin_site.catch_all_view(request, 'test')
+        
+        # Verify we get a redirect response
+        self.assertEqual(response.status_code, 301)
+        
+        # BUG: The current implementation uses request.path_info, so it redirects to:
+        # '/admin/test/' instead of '/myapp/admin/test/'
+        # 
+        # EXPECTED (after fix): Should redirect to '/myapp/admin/test/' 
+        # ACTUAL (before fix): Redirects to '/admin/test/'
+        
+        # This assertion will FAIL before the fix because the redirect URL
+        # will be '/admin/test/' instead of '/myapp/admin/test/'
+        expected_redirect_url = '/myapp/admin/test/'
+        actual_redirect_url = response.url
+        
+        self.assertEqual(
+            actual_redirect_url, 
+            expected_redirect_url,
+            f"Expected redirect to '{expected_redirect_url}' but got '{actual_redirect_url}'. "
+            f"The catch_all_view is using request.path_info instead of request.path, "
+            f"which strips off the FORCE_SCRIPT_NAME prefix."
+        )
+    
+    @override_settings(FORCE_SCRIPT_NAME='/app/sub', APPEND_SLASH=True)
+    def test_bug_reproduction_with_nested_script_name(self):
+        """Test the bug with a nested script name path."""
+        request = self.factory.get('/app/sub/admin/users')
+        request.path_info = '/admin/users'
+        request.path = '/app/sub/admin/users'
+        
+        response = self.admin_site.catch_all_view(request, 'users')
+        
+        self.assertEqual(response.status_code, 301)
+        # This will fail before fix: actual will be '/admin/users/'
+        # This will pass after fix: actual will be '/app/sub/admin/users/'
+        self.assertEqual(response.url, '/app/sub/admin/users/')
+    
+    def test_no_regression_without_force_script_name(self):
+        """Ensure the fix doesn't break normal operation without FORCE_SCRIPT_NAME."""
+        request = self.factory.get('/admin/test')
+        request.path_info = '/admin/test'
+        request.path = '/admin/test'
+        
+        with override_settings(APPEND_SLASH=True):
+            response = self.admin_site.catch_all_view(request, 'test')
+        
+        self.assertEqual(response.status_code, 301)
+        self.assertEqual(response.url, '/admin/test/')
+    
+    @override_settings(FORCE_SCRIPT_NAME='/', APPEND_SLASH=True)
+    def test_edge_case_root_script_name(self):
+        """Test edge case where FORCE_SCRIPT_NAME is just '/'."""
+        request = self.factory.get('/admin/test')
+        request.path_info = '/admin/test'
+        request.path = '/admin/test'  # Same as path_info when script name is '/'
+        
+        response = self.admin_site.catch_all_view(request, 'test')
+        
+        self.assertEqual(response.status_code, 301)
+        self.assertEqual(response.url, '/admin/test/')
+
+
+@pytest.mark.django_db
+class TestCatchAllViewBugPytest:
+    """Pytest version of the bug reproduction tests."""
+    
+    def setup_method(self):
+        self.factory = RequestFactory()
+        self.admin_site = AdminSite()
+    
+    @override_settings(FORCE_SCRIPT_NAME='/myapp', APPEND_SLASH=True)
+    def test_catch_all_view_bug_with_pytest(self):
+        """Pytest version of the bug reproduction test."""
+        request = self.factory.get('/myapp/admin/test')
+        request.path_info = '/admin/test'
+        request.path = '/myapp/admin/test'
+        
+        response = self.admin_site.catch_all_view(request, 'test')
+        
+        assert response.status_code == 301
+        # This assertion will fail before the fix
+        assert response.url == '/myapp/admin/test/', (
+            f"Expected '/myapp/admin/test/' but got '{response.url}'. "
+            "catch_all_view should use request.path instead of request.path_info "
+            "to support FORCE_SCRIPT_NAME properly."
+        )
