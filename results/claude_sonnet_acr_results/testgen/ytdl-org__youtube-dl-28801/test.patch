--- a/test/test_http_auth.py
+++ b/test/test_http_auth.py
-# Empty if creating new file
+#!/usr/bin/env python
+# coding: utf-8
+from __future__ import unicode_literals
+
+import pytest
+import sys
+import os
+import threading
+import time
+try:
+    from http.server import HTTPServer, BaseHTTPRequestHandler
+    from urllib.parse import urlparse
+except ImportError:
+    from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
+    from urlparse import urlparse
+import base64
+
+# Add the parent directory to the path so we can import youtube_dl
+sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
+
+from youtube_dl import YoutubeDL
+from youtube_dl.utils import ExtractorError
+
+
+class AuthHTTPRequestHandler(BaseHTTPRequestHandler):
+    """HTTP request handler that requires basic authentication"""
+    
+    def do_GET(self):
+        auth_header = self.headers.get('Authorization')
+        
+        if not auth_header:
+            self.send_response(401)
+            self.send_header('WWW-Authenticate', 'Basic realm="Test"')
+            self.end_headers()
+            self.wfile.write(b'Authentication required')
+            return
+            
+        try:
+            auth_type, credentials = auth_header.split(' ', 1)
+            if auth_type.lower() != 'basic':
+                self.send_response(401)
+                self.send_header('WWW-Authenticate', 'Basic realm="Test"')
+                self.end_headers()
+                return
+                
+            decoded_creds = base64.b64decode(credentials).decode('utf-8')
+            username, password = decoded_creds.split(':', 1)
+            
+            # Check credentials
+            if username == 'testuser' and password == 'testpass':
+                self.send_response(200)
+                self.send_header('Content-Type', 'text/plain')
+                self.end_headers()
+                self.wfile.write(b'Authentication successful')
+            else:
+                self.send_response(401)
+                self.send_header('WWW-Authenticate', 'Basic realm="Test"')
+                self.end_headers()
+                self.wfile.write(b'Invalid credentials')
+        except Exception:
+            self.send_response(401)
+            self.send_header('WWW-Authenticate', 'Basic realm="Test"')
+            self.end_headers()
+            self.wfile.write(b'Invalid authorization header')
+    
+    def do_HEAD(self):
+        self.do_GET()
+    
+    def log_message(self, format, *args):
+        # Suppress log messages
+        pass
+
+
+class TestHTTPAuthentication:
+    """Test suite for HTTP Basic Authentication functionality"""
+    
+    @pytest.fixture(scope="class")
+    def auth_server(self):
+        """Start a test HTTP server that requires authentication"""
+        server = HTTPServer(('localhost', 0), AuthHTTPRequestHandler)
+        port = server.server_address[1]
+        
+        def run_server():
+            server.serve_forever()
+        
+        server_thread = threading.Thread(target=run_server)
+        server_thread.daemon = True
+        server_thread.start()
+        
+        # Give the server time to start
+        time.sleep(0.1)
+        
+        yield f'http://localhost:{port}'
+        
+        server.shutdown()
+        server.server_close()
+    
+    def test_http_auth_without_credentials_fails(self, auth_server):
+        """Test that accessing protected URL without credentials fails with 401"""
+        ydl = YoutubeDL({'quiet': True})
+        
+        with pytest.raises(ExtractorError) as exc_info:
+            ydl.extract_info(f'{auth_server}/test', download=False)
+        
+        # Should fail with 401 Authorization Required
+        assert '401' in str(exc_info.value) or 'Authorization Required' in str(exc_info.value)
+    
+    def test_http_auth_with_wrong_credentials_fails(self, auth_server):
+        """Test that accessing protected URL with wrong credentials fails with 401"""
+        ydl = YoutubeDL({
+            'quiet': True,
+            'username': 'wronguser',
+            'password': 'wrongpass'
+        })
+        
+        with pytest.raises(ExtractorError) as exc_info:
+            ydl.extract_info(f'{auth_server}/test', download=False)
+        
+        # Should fail with 401 or authentication error
+        assert '401' in str(exc_info.value) or 'Authorization Required' in str(exc_info.value)
+    
+    def test_http_auth_with_correct_credentials_succeeds(self, auth_server):
+        """Test that accessing protected URL with correct credentials succeeds"""
+        ydl = YoutubeDL({
+            'quiet': True,
+            'username': 'testuser',
+            'password': 'testpass'
+        })
+        
+        # This should not raise an exception
+        try:
+            ydl.extract_info(f'{auth_server}/test', download=False)
+        except ExtractorError as e:
+            # If it fails, it should not be due to authentication
+            assert '401' not in str(e) and 'Authorization Required' not in str(e)
+    
+    def test_http_auth_with_username_only_fails(self, auth_server):
+        """Test that providing only username without password fails"""
+        ydl = YoutubeDL({
+            'quiet': True,
+            'username': 'testuser'
+        })
+        
+        with pytest.raises(ExtractorError) as exc_info:
+            ydl.extract_info(f'{auth_server}/test', download=False)
+        
+        # Should fail with 401 Authorization Required
+        assert '401' in str(exc_info.value) or 'Authorization Required' in str(exc_info.value)
+    
+    def test_http_auth_with_password_only_fails(self, auth_server):
+        """Test that providing only password without username fails"""
+        ydl = YoutubeDL({
+            'quiet': True,
+            'password': 'testpass'
+        })
+        
+        with pytest.raises(ExtractorError) as exc_info:
+            ydl.extract_info(f'{auth_server}/test', download=False)
+        
+        # Should fail with 401 Authorization Required
+        assert '401' in str(exc_info.value) or 'Authorization Required' in str(exc_info.value)
+    
+    def test_http_auth_with_empty_credentials_fails(self, auth_server):
+        """Test that providing empty username/password fails"""
+        ydl = YoutubeDL({
+            'quiet': True,
+            'username': '',
+            'password': ''
+        })
+        
+        with pytest.raises(ExtractorError) as exc_info:
+            ydl.extract_info(f'{auth_server}/test', download=False)
+        
+        # Should fail with 401 Authorization Required
+        assert '401' in str(exc_info.value) or 'Authorization Required' in str(exc_info.value)
+    
+    def test_http_auth_opener_setup(self):
+        """Test that the opener is properly configured with authentication handler"""
+        ydl = YoutubeDL({
+            'username': 'testuser',
+            'password': 'testpass'
+        })
+        
+        # Check that the opener has been set up
+        assert hasattr(ydl, '_opener')
+        assert ydl._opener is not None
+        
+        # Check that authentication parameters are stored
+        assert ydl.params.get('username') == 'testuser'
+        assert ydl.params.get('password') == 'testpass'
+    
+    def test_http_auth_opener_without_credentials(self):
+        """Test that the opener works normally without authentication credentials"""
+        ydl = YoutubeDL({'quiet': True})
+        
+        # Check that the opener has been set up normally
+        assert hasattr(ydl, '_opener')
+        assert ydl._opener is not None
+        
+        # Check that no authentication parameters are set
+        assert ydl.params.get('username') is None
+        assert ydl.params.get('password') is None
+
+
+if __name__ == '__main__':
+    pytest.main([__file__])
