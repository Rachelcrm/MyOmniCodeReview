{
  "instance_id": "scrapy__scrapy-6469",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/test_contracts.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom unittest.mock import Mock\nfrom scrapy.contracts import Contract\nfrom scrapy.http import Request, Response\nfrom scrapy.utils.test import get_crawler\n\n\nclass TestContract:\n    \"\"\"Test cases for Spider Contract functionality.\"\"\"\n\n    def setup_method(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.crawler = get_crawler()\n        \n    def test_adjust_request_args_with_cb_kwargs_only(self):\n        \"\"\"Test that adjust_request_args handles cb_kwargs correctly (existing functionality).\"\"\"\n        # Create a mock method for the contract\n        mock_method = Mock()\n        mock_method.__name__ = 'test_method'\n        \n        # Create contract with cb_kwargs\n        contract = Contract(mock_method, cb_kwargs={'key1': 'value1', 'key2': 'value2'})\n        \n        # Test request args adjustment\n        args = {'url': 'http://example.com'}\n        adjusted_args = contract.adjust_request_args(args)\n        \n        # Should include cb_kwargs\n        assert 'cb_kwargs' in adjusted_args\n        assert adjusted_args['cb_kwargs'] == {'key1': 'value1', 'key2': 'value2'}\n        assert adjusted_args['url'] == 'http://example.com'\n\n    def test_adjust_request_args_with_meta_only_fails_before_fix(self):\n        \"\"\"Test that adjust_request_args fails to handle meta before the fix is applied.\"\"\"\n        # Create a mock method for the contract\n        mock_method = Mock()\n        mock_method.__name__ = 'test_method'\n        \n        # Create contract with meta (this should fail before fix)\n        contract = Contract(mock_method, meta={'cookiejar': 1, 'custom_data': 'test'})\n        \n        # Test request args adjustment\n        args = {'url': 'http://example.com'}\n        adjusted_args = contract.adjust_request_args(args)\n        \n        # Before fix: meta should NOT be in adjusted_args\n        assert 'meta' not in adjusted_args\n        assert adjusted_args['url'] == 'http://example.com'\n\n    def test_adjust_request_args_with_meta_after_fix(self):\n        \"\"\"Test that adjust_request_args handles meta correctly after the fix.\"\"\"\n        # Create a mock method for the contract\n        mock_method = Mock()\n        mock_method.__name__ = 'test_method'\n        \n        # Create contract with meta\n        contract = Contract(mock_method, meta={'cookiejar': 1, 'custom_data': 'test'})\n        \n        # Test request args adjustment\n        args = {'url': 'http://example.com'}\n        adjusted_args = contract.adjust_request_args(args)\n        \n        # After fix: should include meta\n        assert 'meta' in adjusted_args\n        assert adjusted_args['meta'] == {'cookiejar': 1, 'custom_data': 'test'}\n        assert adjusted_args['url'] == 'http://example.com'\n\n    def test_adjust_request_args_with_both_cb_kwargs_and_meta(self):\n        \"\"\"Test that adjust_request_args handles both cb_kwargs and meta correctly.\"\"\"\n        # Create a mock method for the contract\n        mock_method = Mock()\n        mock_method.__name__ = 'test_method'\n        \n        # Create contract with both cb_kwargs and meta\n        contract = Contract(\n            mock_method, \n            cb_kwargs={'callback_arg': 'value'}, \n            meta={'cookiejar': 1, 'depth': 2}\n        )\n        \n        # Test request args adjustment\n        args = {'url': 'http://example.com'}\n        adjusted_args = contract.adjust_request_args(args)\n        \n        # Should include both cb_kwargs and meta\n        assert 'cb_kwargs' in adjusted_args\n        assert 'meta' in adjusted_args\n        assert adjusted_args['cb_kwargs'] == {'callback_arg': 'value'}\n        assert adjusted_args['meta'] == {'cookiejar': 1, 'depth': 2}\n        assert adjusted_args['url'] == 'http://example.com'\n\n    def test_adjust_request_args_meta_merges_with_existing_meta(self):\n        \"\"\"Test that meta from contract merges with existing meta in request args.\"\"\"\n        # Create a mock method for the contract\n        mock_method = Mock()\n        mock_method.__name__ = 'test_method'\n        \n        # Create contract with meta\n        contract = Contract(mock_method, meta={'cookiejar': 1, 'new_key': 'new_value'})\n        \n        # Test request args with existing meta\n        args = {\n            'url': 'http://example.com',\n            'meta': {'existing_key': 'existing_value', 'cookiejar': 0}  # cookiejar should be overridden\n        }\n        adjusted_args = contract.adjust_request_args(args)\n        \n        # Meta should be merged, with contract meta taking precedence\n        expected_meta = {\n            'existing_key': 'existing_value',\n            'cookiejar': 1,  # overridden by contract\n            'new_key': 'new_value'\n        }\n        assert adjusted_args['meta'] == expected_meta\n        assert adjusted_args['url'] == 'http://example.com'\n\n    def test_adjust_request_args_cb_kwargs_merges_with_existing_cb_kwargs(self):\n        \"\"\"Test that cb_kwargs from contract merges with existing cb_kwargs in request args.\"\"\"\n        # Create a mock method for the contract\n        mock_method = Mock()\n        mock_method.__name__ = 'test_method'\n        \n        # Create contract with cb_kwargs\n        contract = Contract(mock_method, cb_kwargs={'contract_arg': 'contract_value', 'shared_arg': 'from_contract'})\n        \n        # Test request args with existing cb_kwargs\n        args = {\n            'url': 'http://example.com',\n            'cb_kwargs': {'existing_arg': 'existing_value', 'shared_arg': 'from_request'}\n        }\n        adjusted_args = contract.adjust_request_args(args)\n        \n        # cb_kwargs should be merged, with contract cb_kwargs taking precedence\n        expected_cb_kwargs = {\n            'existing_arg': 'existing_value',\n            'contract_arg': 'contract_value',\n            'shared_arg': 'from_contract'  # overridden by contract\n        }\n        assert adjusted_args['cb_kwargs'] == expected_cb_kwargs\n        assert adjusted_args['url'] == 'http://example.com'\n\n    def test_adjust_request_args_empty_meta_and_cb_kwargs(self):\n        \"\"\"Test that empty meta and cb_kwargs are handled correctly.\"\"\"\n        # Create a mock method for the contract\n        mock_method = Mock()\n        mock_method.__name__ = 'test_method'\n        \n        # Create contract with empty meta and cb_kwargs\n        contract = Contract(mock_method, meta={}, cb_kwargs={})\n        \n        # Test request args adjustment\n        args = {'url': 'http://example.com'}\n        adjusted_args = contract.adjust_request_args(args)\n        \n        # Empty dicts should still be added\n        assert 'meta' in adjusted_args\n        assert 'cb_kwargs' in adjusted_args\n        assert adjusted_args['meta'] == {}\n        assert adjusted_args['cb_kwargs'] == {}\n        assert adjusted_args['url'] == 'http://example.com'\n\n    def test_adjust_request_args_no_meta_or_cb_kwargs_in_contract(self):\n        \"\"\"Test that adjust_request_args works when contract has no meta or cb_kwargs.\"\"\"\n        # Create a mock method for the contract\n        mock_method = Mock()\n        mock_method.__name__ = 'test_method'\n        \n        # Create contract without meta or cb_kwargs\n        contract = Contract(mock_method)\n        \n        # Test request args adjustment\n        args = {'url': 'http://example.com'}\n        adjusted_args = contract.adjust_request_args(args)\n        \n        # Should not add meta or cb_kwargs if not present in contract\n        assert 'meta' not in adjusted_args\n        assert 'cb_kwargs' not in adjusted_args\n        assert adjusted_args['url'] == 'http://example.com'\n\n    def test_contract_integration_with_request_creation(self):\n        \"\"\"Test integration of contract meta with actual Request creation.\"\"\"\n        # Create a mock method for the contract\n        mock_method = Mock()\n        mock_method.__name__ = 'test_method'\n        \n        # Create contract with meta that would be used in real spider scenarios\n        contract = Contract(\n            mock_method, \n            meta={'cookiejar': 1, 'download_timeout': 30, 'custom_data': 'test_value'},\n            cb_kwargs={'parse_arg': 'parse_value'}\n        )\n        \n        # Simulate request creation with contract args\n        base_args = {'url': 'http://example.com', 'callback': mock_method}\n        adjusted_args = contract.adjust_request_args(base_args)\n        \n        # Create actual request with adjusted args\n        request = Request(**adjusted_args)\n        \n        # Verify meta is properly set in the request\n        assert request.meta['cookiejar'] == 1\n        assert request.meta['download_timeout'] == 30\n        assert request.meta['custom_data'] == 'test_value'\n        assert request.cb_kwargs['parse_arg'] == 'parse_value'\n        assert request.url == 'http://example.com'\n\n    def test_contract_meta_with_complex_data_types(self):\n        \"\"\"Test that contract meta handles complex data types correctly.\"\"\"\n        # Create a mock method for the contract\n        mock_method = Mock()\n        mock_method.__name__ = 'test_method'\n        \n        # Create contract with complex meta data\n        complex_meta = {\n            'cookiejar': 1,\n            'headers': {'User-Agent': 'test-agent', 'Accept': 'text/html'},\n            'proxy': 'http://proxy.example.com:8080',\n            'download_delay': 2.5,\n            'retry_times': 3,\n            'custom_list': ['item1', 'item2'],\n            'custom_dict': {'nested_key': 'nested_value'}\n        }\n        \n        contract = Contract(mock_method, meta=complex_meta)\n        \n        # Test request args adjustment\n        args = {'url': 'http://example.com'}\n        adjusted_args = contract.adjust_request_args(args)\n        \n        # All complex data should be preserved\n        assert adjusted_args['meta'] == complex_meta\n        assert isinstance(adjusted_args['meta']['headers'], dict)\n        assert isinstance(adjusted_args['meta']['custom_list'], list)\n        assert isinstance(adjusted_args['meta']['custom_dict'], dict)\n        assert adjusted_args['meta']['download_delay'] == 2.5\n</patched>\n```",
  "patch": "--- a/tests/test_contracts.py\n+++ b/tests/test_contracts.py\n-# Empty if creating new file\n+import pytest\n+from unittest.mock import Mock\n+from scrapy.contracts import Contract\n+from scrapy.http import Request, Response\n+from scrapy.utils.test import get_crawler\n+\n+\n+class TestContract:\n+    \"\"\"Test cases for Spider Contract functionality.\"\"\"\n+\n+    def setup_method(self):\n+        \"\"\"Set up test fixtures.\"\"\"\n+        self.crawler = get_crawler()\n+        \n+    def test_adjust_request_args_with_cb_kwargs_only(self):\n+        \"\"\"Test that adjust_request_args handles cb_kwargs correctly (existing functionality).\"\"\"\n+        # Create a mock method for the contract\n+        mock_method = Mock()\n+        mock_method.__name__ = 'test_method'\n+        \n+        # Create contract with cb_kwargs\n+        contract = Contract(mock_method, cb_kwargs={'key1': 'value1', 'key2': 'value2'})\n+        \n+        # Test request args adjustment\n+        args = {'url': 'http://example.com'}\n+        adjusted_args = contract.adjust_request_args(args)\n+        \n+        # Should include cb_kwargs\n+        assert 'cb_kwargs' in adjusted_args\n+        assert adjusted_args['cb_kwargs'] == {'key1': 'value1', 'key2': 'value2'}\n+        assert adjusted_args['url'] == 'http://example.com'\n+\n+    def test_adjust_request_args_with_meta_only_fails_before_fix(self):\n+        \"\"\"Test that adjust_request_args fails to handle meta before the fix is applied.\"\"\"\n+        # Create a mock method for the contract\n+        mock_method = Mock()\n+        mock_method.__name__ = 'test_method'\n+        \n+        # Create contract with meta (this should fail before fix)\n+        contract = Contract(mock_method, meta={'cookiejar': 1, 'custom_data': 'test'})\n+        \n+        # Test request args adjustment\n+        args = {'url': 'http://example.com'}\n+        adjusted_args = contract.adjust_request_args(args)\n+        \n+        # Before fix: meta should NOT be in adjusted_args\n+        assert 'meta' not in adjusted_args\n+        assert adjusted_args['url'] == 'http://example.com'\n+\n+    def test_adjust_request_args_with_meta_after_fix(self):\n+        \"\"\"Test that adjust_request_args handles meta correctly after the fix.\"\"\"\n+        # Create a mock method for the contract\n+        mock_method = Mock()\n+        mock_method.__name__ = 'test_method'\n+        \n+        # Create contract with meta\n+        contract = Contract(mock_method, meta={'cookiejar': 1, 'custom_data': 'test'})\n+        \n+        # Test request args adjustment\n+        args = {'url': 'http://example.com'}\n+        adjusted_args = contract.adjust_request_args(args)\n+        \n+        # After fix: should include meta\n+        assert 'meta' in adjusted_args\n+        assert adjusted_args['meta'] == {'cookiejar': 1, 'custom_data': 'test'}\n+        assert adjusted_args['url'] == 'http://example.com'\n+\n+    def test_adjust_request_args_with_both_cb_kwargs_and_meta(self):\n+        \"\"\"Test that adjust_request_args handles both cb_kwargs and meta correctly.\"\"\"\n+        # Create a mock method for the contract\n+        mock_method = Mock()\n+        mock_method.__name__ = 'test_method'\n+        \n+        # Create contract with both cb_kwargs and meta\n+        contract = Contract(\n+            mock_method, \n+            cb_kwargs={'callback_arg': 'value'}, \n+            meta={'cookiejar': 1, 'depth': 2}\n+        )\n+        \n+        # Test request args adjustment\n+        args = {'url': 'http://example.com'}\n+        adjusted_args = contract.adjust_request_args(args)\n+        \n+        # Should include both cb_kwargs and meta\n+        assert 'cb_kwargs' in adjusted_args\n+        assert 'meta' in adjusted_args\n+        assert adjusted_args['cb_kwargs'] == {'callback_arg': 'value'}\n+        assert adjusted_args['meta'] == {'cookiejar': 1, 'depth': 2}\n+        assert adjusted_args['url'] == 'http://example.com'\n+\n+    def test_adjust_request_args_meta_merges_with_existing_meta(self):\n+        \"\"\"Test that meta from contract merges with existing meta in request args.\"\"\"\n+        # Create a mock method for the contract\n+        mock_method = Mock()\n+        mock_method.__name__ = 'test_method'\n+        \n+        # Create contract with meta\n+        contract = Contract(mock_method, meta={'cookiejar': 1, 'new_key': 'new_value'})\n+        \n+        # Test request args with existing meta\n+        args = {\n+            'url': 'http://example.com',\n+            'meta': {'existing_key': 'existing_value', 'cookiejar': 0}  # cookiejar should be overridden\n+        }\n+        adjusted_args = contract.adjust_request_args(args)\n+        \n+        # Meta should be merged, with contract meta taking precedence\n+        expected_meta = {\n+            'existing_key': 'existing_value',\n+            'cookiejar': 1,  # overridden by contract\n+            'new_key': 'new_value'\n+        }\n+        assert adjusted_args['meta'] == expected_meta\n+        assert adjusted_args['url'] == 'http://example.com'\n+\n+    def test_adjust_request_args_cb_kwargs_merges_with_existing_cb_kwargs(self):\n+        \"\"\"Test that cb_kwargs from contract merges with existing cb_kwargs in request args.\"\"\"\n+        # Create a mock method for the contract\n+        mock_method = Mock()\n+        mock_method.__name__ = 'test_method'\n+        \n+        # Create contract with cb_kwargs\n+        contract = Contract(mock_method, cb_kwargs={'contract_arg': 'contract_value', 'shared_arg': 'from_contract'})\n+        \n+        # Test request args with existing cb_kwargs\n+        args = {\n+            'url': 'http://example.com',\n+            'cb_kwargs': {'existing_arg': 'existing_value', 'shared_arg': 'from_request'}\n+        }\n+        adjusted_args = contract.adjust_request_args(args)\n+        \n+        # cb_kwargs should be merged, with contract cb_kwargs taking precedence\n+        expected_cb_kwargs = {\n+            'existing_arg': 'existing_value',\n+            'contract_arg': 'contract_value',\n+            'shared_arg': 'from_contract'  # overridden by contract\n+        }\n+        assert adjusted_args['cb_kwargs'] == expected_cb_kwargs\n+        assert adjusted_args['url'] == 'http://example.com'\n+\n+    def test_adjust_request_args_empty_meta_and_cb_kwargs(self):\n+        \"\"\"Test that empty meta and cb_kwargs are handled correctly.\"\"\"\n+        # Create a mock method for the contract\n+        mock_method = Mock()\n+        mock_method.__name__ = 'test_method'\n+        \n+        # Create contract with empty meta and cb_kwargs\n+        contract = Contract(mock_method, meta={}, cb_kwargs={})\n+        \n+        # Test request args adjustment\n+        args = {'url': 'http://example.com'}\n+        adjusted_args = contract.adjust_request_args(args)\n+        \n+        # Empty dicts should still be added\n+        assert 'meta' in adjusted_args\n+        assert 'cb_kwargs' in adjusted_args\n+        assert adjusted_args['meta'] == {}\n+        assert adjusted_args['cb_kwargs'] == {}\n+        assert adjusted_args['url'] == 'http://example.com'\n+\n+    def test_adjust_request_args_no_meta_or_cb_kwargs_in_contract(self):\n+        \"\"\"Test that adjust_request_args works when contract has no meta or cb_kwargs.\"\"\"\n+        # Create a mock method for the contract\n+        mock_method = Mock()\n+        mock_method.__name__ = 'test_method'\n+        \n+        # Create contract without meta or cb_kwargs\n+        contract = Contract(mock_method)\n+        \n+        # Test request args adjustment\n+        args = {'url': 'http://example.com'}\n+        adjusted_args = contract.adjust_request_args(args)\n+        \n+        # Should not add meta or cb_kwargs if not present in contract\n+        assert 'meta' not in adjusted_args\n+        assert 'cb_kwargs' not in adjusted_args\n+        assert adjusted_args['url'] == 'http://example.com'\n+\n+    def test_contract_integration_with_request_creation(self):\n+        \"\"\"Test integration of contract meta with actual Request creation.\"\"\"\n+        # Create a mock method for the contract\n+        mock_method = Mock()\n+        mock_method.__name__ = 'test_method'\n+        \n+        # Create contract with meta that would be used in real spider scenarios\n+        contract = Contract(\n+            mock_method, \n+            meta={'cookiejar': 1, 'download_timeout': 30, 'custom_data': 'test_value'},\n+            cb_kwargs={'parse_arg': 'parse_value'}\n+        )\n+        \n+        # Simulate request creation with contract args\n+        base_args = {'url': 'http://example.com', 'callback': mock_method}\n+        adjusted_args = contract.adjust_request_args(base_args)\n+        \n+        # Create actual request with adjusted args\n+        request = Request(**adjusted_args)\n+        \n+        # Verify meta is properly set in the request\n+        assert request.meta['cookiejar'] == 1\n+        assert request.meta['download_timeout'] == 30\n+        assert request.meta['custom_data'] == 'test_value'\n+        assert request.cb_kwargs['parse_arg'] == 'parse_value'\n+        assert request.url == 'http://example.com'\n+\n+    def test_contract_meta_with_complex_data_types(self):\n+        \"\"\"Test that contract meta handles complex data types correctly.\"\"\"\n+        # Create a mock method for the contract\n+        mock_method = Mock()\n+        mock_method.__name__ = 'test_method'\n+        \n+        # Create contract with complex meta data\n+        complex_meta = {\n+            'cookiejar': 1,\n+            'headers': {'User-Agent': 'test-agent', 'Accept': 'text/html'},\n+            'proxy': 'http://proxy.example.com:8080',\n+            'download_delay': 2.5,\n+            'retry_times': 3,\n+            'custom_list': ['item1', 'item2'],\n+            'custom_dict': {'nested_key': 'nested_value'}\n+        }\n+        \n+        contract = Contract(mock_method, meta=complex_meta)\n+        \n+        # Test request args adjustment\n+        args = {'url': 'http://example.com'}\n+        adjusted_args = contract.adjust_request_args(args)\n+        \n+        # All complex data should be preserved\n+        assert adjusted_args['meta'] == complex_meta\n+        assert isinstance(adjusted_args['meta']['headers'], dict)\n+        assert isinstance(adjusted_args['meta']['custom_list'], list)\n+        assert isinstance(adjusted_args['meta']['custom_dict'], dict)\n+        assert adjusted_args['meta']['download_delay'] == 2.5\n"
}