{
  "instance_id": "django__django-12143",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/admin_views/test_regex_prefix_bug.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport re\nfrom django.contrib.admin.options import ModelAdmin\nfrom django.contrib.auth.models import User\nfrom django.http import HttpRequest\nfrom django.test import TestCase, RequestFactory\nfrom django.forms.formsets import BaseFormSet\n\n\nclass MockModel:\n    \"\"\"Mock model for testing purposes.\"\"\"\n    class _meta:\n        pk = type('MockPK', (), {'name': 'id'})()\n    \n    _meta = _meta()\n\n\nclass MockModelAdmin(ModelAdmin):\n    \"\"\"Mock ModelAdmin for testing purposes.\"\"\"\n    model = MockModel\n\n\nclass TestRegexPrefixBug(TestCase):\n    \"\"\"Test cases for the regex special characters bug in formset prefix.\"\"\"\n    \n    def setUp(self):\n        self.factory = RequestFactory()\n        self.admin = MockModelAdmin(MockModel, None)\n    \n    def test_get_edited_object_pks_with_normal_prefix(self):\n        \"\"\"Test that normal prefixes work correctly.\"\"\"\n        request = self.factory.post('/', {\n            'form-0-id': '1',\n            'form-1-id': '2',\n            'form-2-id': '3',\n            'other-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'form')\n        self.assertEqual(set(pks), {'1', '2', '3'})\n    \n    def test_get_edited_object_pks_with_dot_in_prefix_fails_before_fix(self):\n        \"\"\"Test that demonstrates the bug with dot in prefix (should fail before fix).\"\"\"\n        request = self.factory.post('/', {\n            'my.prefix-0-id': '1',\n            'my.prefix-1-id': '2',\n            'myXprefix-0-id': '3',  # This would incorrectly match due to . being regex metachar\n            'other-field': 'value'\n        })\n        \n        # Before fix: This would incorrectly include '3' because . matches any character\n        # After fix: This should only include '1' and '2'\n        pks = self.admin._get_edited_object_pks(request, 'my.prefix')\n        \n        # This test demonstrates the bug - it will fail before the fix is applied\n        # because the regex will match 'myXprefix-0-id' due to . being a metacharacter\n        self.assertEqual(set(pks), {'1', '2'})  # Should only match exact prefix\n    \n    def test_get_edited_object_pks_with_asterisk_in_prefix(self):\n        \"\"\"Test prefix containing asterisk (regex metacharacter).\"\"\"\n        request = self.factory.post('/', {\n            'my*prefix-0-id': '1',\n            'my*prefix-1-id': '2',\n            'myprefix-0-id': '3',  # Should not match\n            'myyprefix-0-id': '4',  # Should not match\n            'other-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'my*prefix')\n        self.assertEqual(set(pks), {'1', '2'})\n    \n    def test_get_edited_object_pks_with_plus_in_prefix(self):\n        \"\"\"Test prefix containing plus sign (regex metacharacter).\"\"\"\n        request = self.factory.post('/', {\n            'my+prefix-0-id': '1',\n            'my+prefix-1-id': '2',\n            'myprefix-0-id': '3',  # Should not match\n            'other-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'my+prefix')\n        self.assertEqual(set(pks), {'1', '2'})\n    \n    def test_get_edited_object_pks_with_question_mark_in_prefix(self):\n        \"\"\"Test prefix containing question mark (regex metacharacter).\"\"\"\n        request = self.factory.post('/', {\n            'my?prefix-0-id': '1',\n            'my?prefix-1-id': '2',\n            'myprefix-0-id': '3',  # Should not match\n            'myyprefix-0-id': '4',  # Should not match\n            'other-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'my?prefix')\n        self.assertEqual(set(pks), {'1', '2'})\n    \n    def test_get_edited_object_pks_with_brackets_in_prefix(self):\n        \"\"\"Test prefix containing square brackets (regex metacharacters).\"\"\"\n        request = self.factory.post('/', {\n            'my[test]prefix-0-id': '1',\n            'my[test]prefix-1-id': '2',\n            'mytestprefix-0-id': '3',  # Should not match\n            'other-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'my[test]prefix')\n        self.assertEqual(set(pks), {'1', '2'})\n    \n    def test_get_edited_object_pks_with_parentheses_in_prefix(self):\n        \"\"\"Test prefix containing parentheses (regex metacharacters).\"\"\"\n        request = self.factory.post('/', {\n            'my(test)prefix-0-id': '1',\n            'my(test)prefix-1-id': '2',\n            'mytestprefix-0-id': '3',  # Should not match\n            'other-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'my(test)prefix')\n        self.assertEqual(set(pks), {'1', '2'})\n    \n    def test_get_edited_object_pks_with_caret_in_prefix(self):\n        \"\"\"Test prefix containing caret (regex metacharacter).\"\"\"\n        request = self.factory.post('/', {\n            'my^prefix-0-id': '1',\n            'my^prefix-1-id': '2',\n            'myprefix-0-id': '3',  # Should not match\n            'other-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'my^prefix')\n        self.assertEqual(set(pks), {'1', '2'})\n    \n    def test_get_edited_object_pks_with_dollar_in_prefix(self):\n        \"\"\"Test prefix containing dollar sign (regex metacharacter).\"\"\"\n        request = self.factory.post('/', {\n            'my$prefix-0-id': '1',\n            'my$prefix-1-id': '2',\n            'myprefix-0-id': '3',  # Should not match\n            'other-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'my$prefix')\n        self.assertEqual(set(pks), {'1', '2'})\n    \n    def test_get_edited_object_pks_with_pipe_in_prefix(self):\n        \"\"\"Test prefix containing pipe (regex metacharacter).\"\"\"\n        request = self.factory.post('/', {\n            'my|prefix-0-id': '1',\n            'my|prefix-1-id': '2',\n            'myprefix-0-id': '3',  # Should not match\n            'other-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'my|prefix')\n        self.assertEqual(set(pks), {'1', '2'})\n    \n    def test_get_edited_object_pks_with_backslash_in_prefix(self):\n        \"\"\"Test prefix containing backslash (regex metacharacter).\"\"\"\n        request = self.factory.post('/', {\n            'my\\\\prefix-0-id': '1',\n            'my\\\\prefix-1-id': '2',\n            'myprefix-0-id': '3',  # Should not match\n            'other-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'my\\\\prefix')\n        self.assertEqual(set(pks), {'1', '2'})\n    \n    def test_get_edited_object_pks_with_multiple_special_chars(self):\n        \"\"\"Test prefix containing multiple regex special characters.\"\"\"\n        request = self.factory.post('/', {\n            'my.test*prefix-0-id': '1',\n            'my.test*prefix-1-id': '2',\n            'myXtestYprefix-0-id': '3',  # Should not match\n            'other-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'my.test*prefix')\n        self.assertEqual(set(pks), {'1', '2'})\n    \n    def test_get_edited_object_pks_empty_result(self):\n        \"\"\"Test that method returns empty list when no matches found.\"\"\"\n        request = self.factory.post('/', {\n            'other-0-id': '1',\n            'different-1-id': '2',\n            'unrelated-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'form')\n        self.assertEqual(pks, [])\n    \n    def test_get_edited_object_pks_with_non_matching_pattern(self):\n        \"\"\"Test that only correctly formatted field names are matched.\"\"\"\n        request = self.factory.post('/', {\n            'form-0-id': '1',  # Correct format\n            'form-1-id': '2',  # Correct format\n            'form-id': '3',    # Missing number - should not match\n            'form-0-': '4',    # Missing pk name - should not match\n            'form-a-id': '5',  # Non-numeric index - should not match\n            'form-0-id-extra': '6',  # Extra suffix - should not match\n            'other-field': 'value'\n        })\n        \n        pks = self.admin._get_edited_object_pks(request, 'form')\n        self.assertEqual(set(pks), {'1', '2'})\n    \n    def test_regex_pattern_compilation_with_special_chars(self):\n        \"\"\"Test that the regex pattern compiles correctly with special characters.\"\"\"\n        # This test verifies that re.escape() is being used properly\n        prefix_with_special_chars = 'my.test*prefix+with?chars[abc]'\n        \n        # This should not raise a regex compilation error\n        try:\n            pattern = re.compile(r'{}-\\d+-{}$'.format(re.escape(prefix_with_special_chars), 'id'))\n            # Test that the pattern works as expected\n            self.assertTrue(pattern.match('my.test*prefix+with?chars[abc]-0-id'))\n            self.assertFalse(pattern.match('myXtestYprefixZwithXcharsXabc-0-id'))\n        except re.error:\n            self.fail(\"Regex compilation failed with escaped special characters\")\n    \n    def test_data_loss_scenario_demonstration(self):\n        \"\"\"\n        Demonstrate the potential data loss scenario.\n        \n        This test shows how the bug could cause data loss by matching\n        unintended form fields when the prefix contains special regex characters.\n        \"\"\"\n        # Scenario: User has a formset with prefix \"app.model\" \n        # and there are other fields that could be matched incorrectly\n        request = self.factory.post('/', {\n            'app.model-0-id': '100',  # Intended match\n            'app.model-1-id': '200',  # Intended match\n            'appXmodel-0-id': '999',  # Unintended match due to . being metachar\n            'appYmodel-1-id': '888',  # Unintended match due to . being metachar\n            'other-field': 'value'\n        })\n        \n        # With the bug, this would incorrectly include '999' and '888'\n        # After the fix, it should only include '100' and '200'\n        pks = self.admin._get_edited_object_pks(request, 'app.model')\n        \n        # This assertion will fail before the fix is applied\n        self.assertEqual(set(pks), {'100', '200'})\n        \n        # Verify that the unintended matches are not included\n        self.assertNotIn('999', pks)\n        self.assertNotIn('888', pks)\n</patched>\n```",
  "patch": "--- a/tests/admin_views/test_regex_prefix_bug.py\n+++ b/tests/admin_views/test_regex_prefix_bug.py\n-# Empty if creating new file\n+import re\n+from django.contrib.admin.options import ModelAdmin\n+from django.contrib.auth.models import User\n+from django.http import HttpRequest\n+from django.test import TestCase, RequestFactory\n+from django.forms.formsets import BaseFormSet\n+\n+\n+class MockModel:\n+    \"\"\"Mock model for testing purposes.\"\"\"\n+    class _meta:\n+        pk = type('MockPK', (), {'name': 'id'})()\n+    \n+    _meta = _meta()\n+\n+\n+class MockModelAdmin(ModelAdmin):\n+    \"\"\"Mock ModelAdmin for testing purposes.\"\"\"\n+    model = MockModel\n+\n+\n+class TestRegexPrefixBug(TestCase):\n+    \"\"\"Test cases for the regex special characters bug in formset prefix.\"\"\"\n+    \n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.admin = MockModelAdmin(MockModel, None)\n+    \n+    def test_get_edited_object_pks_with_normal_prefix(self):\n+        \"\"\"Test that normal prefixes work correctly.\"\"\"\n+        request = self.factory.post('/', {\n+            'form-0-id': '1',\n+            'form-1-id': '2',\n+            'form-2-id': '3',\n+            'other-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'form')\n+        self.assertEqual(set(pks), {'1', '2', '3'})\n+    \n+    def test_get_edited_object_pks_with_dot_in_prefix_fails_before_fix(self):\n+        \"\"\"Test that demonstrates the bug with dot in prefix (should fail before fix).\"\"\"\n+        request = self.factory.post('/', {\n+            'my.prefix-0-id': '1',\n+            'my.prefix-1-id': '2',\n+            'myXprefix-0-id': '3',  # This would incorrectly match due to . being regex metachar\n+            'other-field': 'value'\n+        })\n+        \n+        # Before fix: This would incorrectly include '3' because . matches any character\n+        # After fix: This should only include '1' and '2'\n+        pks = self.admin._get_edited_object_pks(request, 'my.prefix')\n+        \n+        # This test demonstrates the bug - it will fail before the fix is applied\n+        # because the regex will match 'myXprefix-0-id' due to . being a metacharacter\n+        self.assertEqual(set(pks), {'1', '2'})  # Should only match exact prefix\n+    \n+    def test_get_edited_object_pks_with_asterisk_in_prefix(self):\n+        \"\"\"Test prefix containing asterisk (regex metacharacter).\"\"\"\n+        request = self.factory.post('/', {\n+            'my*prefix-0-id': '1',\n+            'my*prefix-1-id': '2',\n+            'myprefix-0-id': '3',  # Should not match\n+            'myyprefix-0-id': '4',  # Should not match\n+            'other-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'my*prefix')\n+        self.assertEqual(set(pks), {'1', '2'})\n+    \n+    def test_get_edited_object_pks_with_plus_in_prefix(self):\n+        \"\"\"Test prefix containing plus sign (regex metacharacter).\"\"\"\n+        request = self.factory.post('/', {\n+            'my+prefix-0-id': '1',\n+            'my+prefix-1-id': '2',\n+            'myprefix-0-id': '3',  # Should not match\n+            'other-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'my+prefix')\n+        self.assertEqual(set(pks), {'1', '2'})\n+    \n+    def test_get_edited_object_pks_with_question_mark_in_prefix(self):\n+        \"\"\"Test prefix containing question mark (regex metacharacter).\"\"\"\n+        request = self.factory.post('/', {\n+            'my?prefix-0-id': '1',\n+            'my?prefix-1-id': '2',\n+            'myprefix-0-id': '3',  # Should not match\n+            'myyprefix-0-id': '4',  # Should not match\n+            'other-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'my?prefix')\n+        self.assertEqual(set(pks), {'1', '2'})\n+    \n+    def test_get_edited_object_pks_with_brackets_in_prefix(self):\n+        \"\"\"Test prefix containing square brackets (regex metacharacters).\"\"\"\n+        request = self.factory.post('/', {\n+            'my[test]prefix-0-id': '1',\n+            'my[test]prefix-1-id': '2',\n+            'mytestprefix-0-id': '3',  # Should not match\n+            'other-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'my[test]prefix')\n+        self.assertEqual(set(pks), {'1', '2'})\n+    \n+    def test_get_edited_object_pks_with_parentheses_in_prefix(self):\n+        \"\"\"Test prefix containing parentheses (regex metacharacters).\"\"\"\n+        request = self.factory.post('/', {\n+            'my(test)prefix-0-id': '1',\n+            'my(test)prefix-1-id': '2',\n+            'mytestprefix-0-id': '3',  # Should not match\n+            'other-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'my(test)prefix')\n+        self.assertEqual(set(pks), {'1', '2'})\n+    \n+    def test_get_edited_object_pks_with_caret_in_prefix(self):\n+        \"\"\"Test prefix containing caret (regex metacharacter).\"\"\"\n+        request = self.factory.post('/', {\n+            'my^prefix-0-id': '1',\n+            'my^prefix-1-id': '2',\n+            'myprefix-0-id': '3',  # Should not match\n+            'other-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'my^prefix')\n+        self.assertEqual(set(pks), {'1', '2'})\n+    \n+    def test_get_edited_object_pks_with_dollar_in_prefix(self):\n+        \"\"\"Test prefix containing dollar sign (regex metacharacter).\"\"\"\n+        request = self.factory.post('/', {\n+            'my$prefix-0-id': '1',\n+            'my$prefix-1-id': '2',\n+            'myprefix-0-id': '3',  # Should not match\n+            'other-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'my$prefix')\n+        self.assertEqual(set(pks), {'1', '2'})\n+    \n+    def test_get_edited_object_pks_with_pipe_in_prefix(self):\n+        \"\"\"Test prefix containing pipe (regex metacharacter).\"\"\"\n+        request = self.factory.post('/', {\n+            'my|prefix-0-id': '1',\n+            'my|prefix-1-id': '2',\n+            'myprefix-0-id': '3',  # Should not match\n+            'other-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'my|prefix')\n+        self.assertEqual(set(pks), {'1', '2'})\n+    \n+    def test_get_edited_object_pks_with_backslash_in_prefix(self):\n+        \"\"\"Test prefix containing backslash (regex metacharacter).\"\"\"\n+        request = self.factory.post('/', {\n+            'my\\\\prefix-0-id': '1',\n+            'my\\\\prefix-1-id': '2',\n+            'myprefix-0-id': '3',  # Should not match\n+            'other-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'my\\\\prefix')\n+        self.assertEqual(set(pks), {'1', '2'})\n+    \n+    def test_get_edited_object_pks_with_multiple_special_chars(self):\n+        \"\"\"Test prefix containing multiple regex special characters.\"\"\"\n+        request = self.factory.post('/', {\n+            'my.test*prefix-0-id': '1',\n+            'my.test*prefix-1-id': '2',\n+            'myXtestYprefix-0-id': '3',  # Should not match\n+            'other-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'my.test*prefix')\n+        self.assertEqual(set(pks), {'1', '2'})\n+    \n+    def test_get_edited_object_pks_empty_result(self):\n+        \"\"\"Test that method returns empty list when no matches found.\"\"\"\n+        request = self.factory.post('/', {\n+            'other-0-id': '1',\n+            'different-1-id': '2',\n+            'unrelated-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'form')\n+        self.assertEqual(pks, [])\n+    \n+    def test_get_edited_object_pks_with_non_matching_pattern(self):\n+        \"\"\"Test that only correctly formatted field names are matched.\"\"\"\n+        request = self.factory.post('/', {\n+            'form-0-id': '1',  # Correct format\n+            'form-1-id': '2',  # Correct format\n+            'form-id': '3',    # Missing number - should not match\n+            'form-0-': '4',    # Missing pk name - should not match\n+            'form-a-id': '5',  # Non-numeric index - should not match\n+            'form-0-id-extra': '6',  # Extra suffix - should not match\n+            'other-field': 'value'\n+        })\n+        \n+        pks = self.admin._get_edited_object_pks(request, 'form')\n+        self.assertEqual(set(pks), {'1', '2'})\n+    \n+    def test_regex_pattern_compilation_with_special_chars(self):\n+        \"\"\"Test that the regex pattern compiles correctly with special characters.\"\"\"\n+        # This test verifies that re.escape() is being used properly\n+        prefix_with_special_chars = 'my.test*prefix+with?chars[abc]'\n+        \n+        # This should not raise a regex compilation error\n+        try:\n+            pattern = re.compile(r'{}-\\d+-{}$'.format(re.escape(prefix_with_special_chars), 'id'))\n+            # Test that the pattern works as expected\n+            self.assertTrue(pattern.match('my.test*prefix+with?chars[abc]-0-id'))\n+            self.assertFalse(pattern.match('myXtestYprefixZwithXcharsXabc-0-id'))\n+        except re.error:\n+            self.fail(\"Regex compilation failed with escaped special characters\")\n+    \n+    def test_data_loss_scenario_demonstration(self):\n+        \"\"\"\n+        Demonstrate the potential data loss scenario.\n+        \n+        This test shows how the bug could cause data loss by matching\n+        unintended form fields when the prefix contains special regex characters.\n+        \"\"\"\n+        # Scenario: User has a formset with prefix \"app.model\" \n+        # and there are other fields that could be matched incorrectly\n+        request = self.factory.post('/', {\n+            'app.model-0-id': '100',  # Intended match\n+            'app.model-1-id': '200',  # Intended match\n+            'appXmodel-0-id': '999',  # Unintended match due to . being metachar\n+            'appYmodel-1-id': '888',  # Unintended match due to . being metachar\n+            'other-field': 'value'\n+        })\n+        \n+        # With the bug, this would incorrectly include '999' and '888'\n+        # After the fix, it should only include '100' and '200'\n+        pks = self.admin._get_edited_object_pks(request, 'app.model')\n+        \n+        # This assertion will fail before the fix is applied\n+        self.assertEqual(set(pks), {'100', '200'})\n+        \n+        # Verify that the unintended matches are not included\n+        self.assertNotIn('999', pks)\n+        self.assertNotIn('888', pks)\n"
}