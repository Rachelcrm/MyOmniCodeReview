{
  "instance_id": "django__django-14725",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/forms_tests/test_formsets.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.forms import modelformset_factory, ModelForm\nfrom django.test import TestCase\nfrom django.db import models\n\n\nclass TestModel(models.Model):\n    \"\"\"Test model for formset testing.\"\"\"\n    name = models.CharField(max_length=100)\n    value = models.IntegerField(default=0)\n    \n    class Meta:\n        app_label = 'forms_tests'\n\n\nclass TestModelForm(ModelForm):\n    \"\"\"Test form for the test model.\"\"\"\n    class Meta:\n        model = TestModel\n        fields = ['name', 'value']\n\n\nclass ModelFormsetCanAddTests(TestCase):\n    \"\"\"Test suite for the can_add functionality in model formsets.\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test data.\"\"\"\n        self.test_obj1 = TestModel.objects.create(name=\"Object 1\", value=10)\n        self.test_obj2 = TestModel.objects.create(name=\"Object 2\", value=20)\n    \n    def test_can_add_default_true(self):\n        \"\"\"Test that can_add defaults to True for backward compatibility.\"\"\"\n        FormSet = modelformset_factory(TestModel, form=TestModelForm)\n        formset = FormSet(queryset=TestModel.objects.all())\n        \n        # Should have can_add attribute set to True by default\n        self.assertTrue(hasattr(formset, 'can_add'))\n        self.assertTrue(formset.can_add)\n    \n    def test_can_add_false_prevents_new_object_creation(self):\n        \"\"\"Test that can_add=False prevents new objects from being created.\"\"\"\n        FormSet = modelformset_factory(TestModel, form=TestModelForm, can_add=False)\n        formset = FormSet(queryset=TestModel.objects.all())\n        \n        # Should have can_add set to False\n        self.assertFalse(formset.can_add)\n        \n        # Simulate form data that would normally create a new object\n        form_data = {\n            'form-TOTAL_FORMS': '3',  # 2 existing + 1 new\n            'form-INITIAL_FORMS': '2',\n            'form-MIN_NUM_FORMS': '0',\n            'form-MAX_NUM_FORMS': '1000',\n            \n            # Existing objects\n            'form-0-id': str(self.test_obj1.id),\n            'form-0-name': 'Updated Object 1',\n            'form-0-value': '15',\n            \n            'form-1-id': str(self.test_obj2.id),\n            'form-1-name': 'Updated Object 2',\n            'form-1-value': '25',\n            \n            # New object (should be ignored)\n            'form-2-name': 'New Object',\n            'form-2-value': '30',\n        }\n        \n        formset = FormSet(data=form_data, queryset=TestModel.objects.all())\n        \n        # Formset should be valid\n        self.assertTrue(formset.is_valid())\n        \n        # Save should not create new objects\n        initial_count = TestModel.objects.count()\n        saved_objects = formset.save()\n        final_count = TestModel.objects.count()\n        \n        # Count should remain the same (no new objects created)\n        self.assertEqual(initial_count, final_count)\n        \n        # Only existing objects should be in saved_objects\n        self.assertEqual(len(saved_objects), 2)\n        \n        # Verify existing objects were updated\n        self.test_obj1.refresh_from_db()\n        self.test_obj2.refresh_from_db()\n        self.assertEqual(self.test_obj1.name, 'Updated Object 1')\n        self.assertEqual(self.test_obj1.value, 15)\n        self.assertEqual(self.test_obj2.name, 'Updated Object 2')\n        self.assertEqual(self.test_obj2.value, 25)\n    \n    def test_can_add_true_allows_new_object_creation(self):\n        \"\"\"Test that can_add=True allows new objects to be created.\"\"\"\n        FormSet = modelformset_factory(TestModel, form=TestModelForm, can_add=True)\n        formset = FormSet(queryset=TestModel.objects.all())\n        \n        # Should have can_add set to True\n        self.assertTrue(formset.can_add)\n        \n        # Simulate form data that creates a new object\n        form_data = {\n            'form-TOTAL_FORMS': '3',  # 2 existing + 1 new\n            'form-INITIAL_FORMS': '2',\n            'form-MIN_NUM_FORMS': '0',\n            'form-MAX_NUM_FORMS': '1000',\n            \n            # Existing objects\n            'form-0-id': str(self.test_obj1.id),\n            'form-0-name': 'Updated Object 1',\n            'form-0-value': '15',\n            \n            'form-1-id': str(self.test_obj2.id),\n            'form-1-name': 'Updated Object 2',\n            'form-1-value': '25',\n            \n            # New object\n            'form-2-name': 'New Object',\n            'form-2-value': '30',\n        }\n        \n        formset = FormSet(data=form_data, queryset=TestModel.objects.all())\n        \n        # Formset should be valid\n        self.assertTrue(formset.is_valid())\n        \n        # Save should create new objects\n        initial_count = TestModel.objects.count()\n        saved_objects = formset.save()\n        final_count = TestModel.objects.count()\n        \n        # Count should increase by 1\n        self.assertEqual(final_count, initial_count + 1)\n        \n        # All objects should be in saved_objects\n        self.assertEqual(len(saved_objects), 3)\n        \n        # Verify new object was created\n        new_obj = TestModel.objects.get(name='New Object')\n        self.assertEqual(new_obj.value, 30)\n    \n    def test_can_add_false_with_extra_zero(self):\n        \"\"\"Test that can_add=False works even when extra=0.\"\"\"\n        FormSet = modelformset_factory(\n            TestModel, \n            form=TestModelForm, \n            can_add=False, \n            extra=0\n        )\n        formset = FormSet(queryset=TestModel.objects.all())\n        \n        # Should have can_add set to False\n        self.assertFalse(formset.can_add)\n        \n        # Simulate JavaScript adding extra forms despite extra=0\n        form_data = {\n            'form-TOTAL_FORMS': '4',  # 2 existing + 2 extra (simulating JS manipulation)\n            'form-INITIAL_FORMS': '2',\n            'form-MIN_NUM_FORMS': '0',\n            'form-MAX_NUM_FORMS': '1000',\n            \n            # Existing objects\n            'form-0-id': str(self.test_obj1.id),\n            'form-0-name': 'Object 1',\n            'form-0-value': '10',\n            \n            'form-1-id': str(self.test_obj2.id),\n            'form-1-name': 'Object 2',\n            'form-1-value': '20',\n            \n            # Extra forms added via JavaScript\n            'form-2-name': 'JS Added Object 1',\n            'form-2-value': '100',\n            \n            'form-3-name': 'JS Added Object 2',\n            'form-3-value': '200',\n        }\n        \n        formset = FormSet(data=form_data, queryset=TestModel.objects.all())\n        \n        # Formset should be valid\n        self.assertTrue(formset.is_valid())\n        \n        # Save should not create new objects despite the extra form data\n        initial_count = TestModel.objects.count()\n        saved_objects = formset.save()\n        final_count = TestModel.objects.count()\n        \n        # Count should remain the same\n        self.assertEqual(initial_count, final_count)\n        \n        # Only existing objects should be saved\n        self.assertEqual(len(saved_objects), 2)\n        \n        # Verify no new objects were created\n        self.assertFalse(TestModel.objects.filter(name='JS Added Object 1').exists())\n        self.assertFalse(TestModel.objects.filter(name='JS Added Object 2').exists())\n    \n    def test_can_add_false_save_new_objects_returns_empty_list(self):\n        \"\"\"Test that save_new_objects returns empty list when can_add=False.\"\"\"\n        FormSet = modelformset_factory(TestModel, form=TestModelForm, can_add=False)\n        \n        form_data = {\n            'form-TOTAL_FORMS': '3',\n            'form-INITIAL_FORMS': '2',\n            'form-MIN_NUM_FORMS': '0',\n            'form-MAX_NUM_FORMS': '1000',\n            \n            # Existing objects\n            'form-0-id': str(self.test_obj1.id),\n            'form-0-name': 'Object 1',\n            'form-0-value': '10',\n            \n            'form-1-id': str(self.test_obj2.id),\n            'form-1-name': 'Object 2',\n            'form-1-value': '20',\n            \n            # New object data\n            'form-2-name': 'New Object',\n            'form-2-value': '30',\n        }\n        \n        formset = FormSet(data=form_data, queryset=TestModel.objects.all())\n        self.assertTrue(formset.is_valid())\n        \n        # save_new_objects should return empty list\n        new_objects = formset.save_new_objects()\n        self.assertEqual(new_objects, [])\n        self.assertEqual(len(new_objects), 0)\n    \n    def test_can_add_true_save_new_objects_creates_objects(self):\n        \"\"\"Test that save_new_objects creates objects when can_add=True.\"\"\"\n        FormSet = modelformset_factory(TestModel, form=TestModelForm, can_add=True)\n        \n        form_data = {\n            'form-TOTAL_FORMS': '3',\n            'form-INITIAL_FORMS': '2',\n            'form-MIN_NUM_FORMS': '0',\n            'form-MAX_NUM_FORMS': '1000',\n            \n            # Existing objects\n            'form-0-id': str(self.test_obj1.id),\n            'form-0-name': 'Object 1',\n            'form-0-value': '10',\n            \n            'form-1-id': str(self.test_obj2.id),\n            'form-1-name': 'Object 2',\n            'form-1-value': '20',\n            \n            # New object data\n            'form-2-name': 'New Object',\n            'form-2-value': '30',\n        }\n        \n        formset = FormSet(data=form_data, queryset=TestModel.objects.all())\n        self.assertTrue(formset.is_valid())\n        \n        # save_new_objects should create and return new objects\n        initial_count = TestModel.objects.count()\n        new_objects = formset.save_new_objects()\n        final_count = TestModel.objects.count()\n        \n        self.assertEqual(len(new_objects), 1)\n        self.assertEqual(final_count, initial_count + 1)\n        self.assertEqual(new_objects[0].name, 'New Object')\n        self.assertEqual(new_objects[0].value, 30)\n    \n    def test_can_add_parameter_passed_to_formset_factory(self):\n        \"\"\"Test that can_add parameter is properly passed through formset_factory.\"\"\"\n        # Test with can_add=False\n        FormSetFalse = modelformset_factory(TestModel, form=TestModelForm, can_add=False)\n        formset_false = FormSetFalse(queryset=TestModel.objects.all())\n        self.assertFalse(formset_false.can_add)\n        \n        # Test with can_add=True\n        FormSetTrue = modelformset_factory(TestModel, form=TestModelForm, can_add=True)\n        formset_true = FormSetTrue(queryset=TestModel.objects.all())\n        self.assertTrue(formset_true.can_add)\n        \n        # Test default behavior (should be True)\n        FormSetDefault = modelformset_factory(TestModel, form=TestModelForm)\n        formset_default = FormSetDefault(queryset=TestModel.objects.all())\n        self.assertTrue(formset_default.can_add)\n    \n    def test_can_add_with_can_delete_combination(self):\n        \"\"\"Test that can_add works correctly in combination with can_delete.\"\"\"\n        FormSet = modelformset_factory(\n            TestModel, \n            form=TestModelForm, \n            can_add=False, \n            can_delete=True\n        )\n        \n        form_data = {\n            'form-TOTAL_FORMS': '3',\n            'form-INITIAL_FORMS': '2',\n            'form-MIN_NUM_FORMS': '0',\n            'form-MAX_NUM_FORMS': '1000',\n            \n            # First object - keep\n            'form-0-id': str(self.test_obj1.id),\n            'form-0-name': 'Object 1',\n            'form-0-value': '10',\n            \n            # Second object - delete\n            'form-1-id': str(self.test_obj2.id),\n            'form-1-name': 'Object 2',\n            'form-1-value': '20',\n            'form-1-DELETE': 'on',\n            \n            # New object - should be ignored due to can_add=False\n            'form-2-name': 'New Object',\n            'form-2-value': '30',\n        }\n        \n        formset = FormSet(data=form_data, queryset=TestModel.objects.all())\n        self.assertTrue(formset.is_valid())\n        \n        initial_count = TestModel.objects.count()\n        saved_objects = formset.save()\n        final_count = TestModel.objects.count()\n        \n        # Should have deleted one object but not created any new ones\n        self.assertEqual(final_count, initial_count - 1)\n        \n        # Only the non-deleted object should be in saved_objects\n        self.assertEqual(len(saved_objects), 1)\n        self.assertEqual(saved_objects[0].id, self.test_obj1.id)\n        \n        # Verify the second object was deleted\n        self.assertFalse(TestModel.objects.filter(id=self.test_obj2.id).exists())\n        \n        # Verify no new object was created\n        self.assertFalse(TestModel.objects.filter(name='New Object').exists())\n</patched>\n</file>\n```",
  "patch": "--- a/tests/forms_tests/test_formsets.py\n+++ b/tests/forms_tests/test_formsets.py\n-# Empty if creating new file\n+import pytest\n+from django.forms import modelformset_factory, ModelForm\n+from django.test import TestCase\n+from django.db import models\n+\n+\n+class TestModel(models.Model):\n+    \"\"\"Test model for formset testing.\"\"\"\n+    name = models.CharField(max_length=100)\n+    value = models.IntegerField(default=0)\n+    \n+    class Meta:\n+        app_label = 'forms_tests'\n+\n+\n+class TestModelForm(ModelForm):\n+    \"\"\"Test form for the test model.\"\"\"\n+    class Meta:\n+        model = TestModel\n+        fields = ['name', 'value']\n+\n+\n+class ModelFormsetCanAddTests(TestCase):\n+    \"\"\"Test suite for the can_add functionality in model formsets.\"\"\"\n+    \n+    def setUp(self):\n+        \"\"\"Set up test data.\"\"\"\n+        self.test_obj1 = TestModel.objects.create(name=\"Object 1\", value=10)\n+        self.test_obj2 = TestModel.objects.create(name=\"Object 2\", value=20)\n+    \n+    def test_can_add_default_true(self):\n+        \"\"\"Test that can_add defaults to True for backward compatibility.\"\"\"\n+        FormSet = modelformset_factory(TestModel, form=TestModelForm)\n+        formset = FormSet(queryset=TestModel.objects.all())\n+        \n+        # Should have can_add attribute set to True by default\n+        self.assertTrue(hasattr(formset, 'can_add'))\n+        self.assertTrue(formset.can_add)\n+    \n+    def test_can_add_false_prevents_new_object_creation(self):\n+        \"\"\"Test that can_add=False prevents new objects from being created.\"\"\"\n+        FormSet = modelformset_factory(TestModel, form=TestModelForm, can_add=False)\n+        formset = FormSet(queryset=TestModel.objects.all())\n+        \n+        # Should have can_add set to False\n+        self.assertFalse(formset.can_add)\n+        \n+        # Simulate form data that would normally create a new object\n+        form_data = {\n+            'form-TOTAL_FORMS': '3',  # 2 existing + 1 new\n+            'form-INITIAL_FORMS': '2',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+            \n+            # Existing objects\n+            'form-0-id': str(self.test_obj1.id),\n+            'form-0-name': 'Updated Object 1',\n+            'form-0-value': '15',\n+            \n+            'form-1-id': str(self.test_obj2.id),\n+            'form-1-name': 'Updated Object 2',\n+            'form-1-value': '25',\n+            \n+            # New object (should be ignored)\n+            'form-2-name': 'New Object',\n+            'form-2-value': '30',\n+        }\n+        \n+        formset = FormSet(data=form_data, queryset=TestModel.objects.all())\n+        \n+        # Formset should be valid\n+        self.assertTrue(formset.is_valid())\n+        \n+        # Save should not create new objects\n+        initial_count = TestModel.objects.count()\n+        saved_objects = formset.save()\n+        final_count = TestModel.objects.count()\n+        \n+        # Count should remain the same (no new objects created)\n+        self.assertEqual(initial_count, final_count)\n+        \n+        # Only existing objects should be in saved_objects\n+        self.assertEqual(len(saved_objects), 2)\n+        \n+        # Verify existing objects were updated\n+        self.test_obj1.refresh_from_db()\n+        self.test_obj2.refresh_from_db()\n+        self.assertEqual(self.test_obj1.name, 'Updated Object 1')\n+        self.assertEqual(self.test_obj1.value, 15)\n+        self.assertEqual(self.test_obj2.name, 'Updated Object 2')\n+        self.assertEqual(self.test_obj2.value, 25)\n+    \n+    def test_can_add_true_allows_new_object_creation(self):\n+        \"\"\"Test that can_add=True allows new objects to be created.\"\"\"\n+        FormSet = modelformset_factory(TestModel, form=TestModelForm, can_add=True)\n+        formset = FormSet(queryset=TestModel.objects.all())\n+        \n+        # Should have can_add set to True\n+        self.assertTrue(formset.can_add)\n+        \n+        # Simulate form data that creates a new object\n+        form_data = {\n+            'form-TOTAL_FORMS': '3',  # 2 existing + 1 new\n+            'form-INITIAL_FORMS': '2',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+            \n+            # Existing objects\n+            'form-0-id': str(self.test_obj1.id),\n+            'form-0-name': 'Updated Object 1',\n+            'form-0-value': '15',\n+            \n+            'form-1-id': str(self.test_obj2.id),\n+            'form-1-name': 'Updated Object 2',\n+            'form-1-value': '25',\n+            \n+            # New object\n+            'form-2-name': 'New Object',\n+            'form-2-value': '30',\n+        }\n+        \n+        formset = FormSet(data=form_data, queryset=TestModel.objects.all())\n+        \n+        # Formset should be valid\n+        self.assertTrue(formset.is_valid())\n+        \n+        # Save should create new objects\n+        initial_count = TestModel.objects.count()\n+        saved_objects = formset.save()\n+        final_count = TestModel.objects.count()\n+        \n+        # Count should increase by 1\n+        self.assertEqual(final_count, initial_count + 1)\n+        \n+        # All objects should be in saved_objects\n+        self.assertEqual(len(saved_objects), 3)\n+        \n+        # Verify new object was created\n+        new_obj = TestModel.objects.get(name='New Object')\n+        self.assertEqual(new_obj.value, 30)\n+    \n+    def test_can_add_false_with_extra_zero(self):\n+        \"\"\"Test that can_add=False works even when extra=0.\"\"\"\n+        FormSet = modelformset_factory(\n+            TestModel, \n+            form=TestModelForm, \n+            can_add=False, \n+            extra=0\n+        )\n+        formset = FormSet(queryset=TestModel.objects.all())\n+        \n+        # Should have can_add set to False\n+        self.assertFalse(formset.can_add)\n+        \n+        # Simulate JavaScript adding extra forms despite extra=0\n+        form_data = {\n+            'form-TOTAL_FORMS': '4',  # 2 existing + 2 extra (simulating JS manipulation)\n+            'form-INITIAL_FORMS': '2',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+            \n+            # Existing objects\n+            'form-0-id': str(self.test_obj1.id),\n+            'form-0-name': 'Object 1',\n+            'form-0-value': '10',\n+            \n+            'form-1-id': str(self.test_obj2.id),\n+            'form-1-name': 'Object 2',\n+            'form-1-value': '20',\n+            \n+            # Extra forms added via JavaScript\n+            'form-2-name': 'JS Added Object 1',\n+            'form-2-value': '100',\n+            \n+            'form-3-name': 'JS Added Object 2',\n+            'form-3-value': '200',\n+        }\n+        \n+        formset = FormSet(data=form_data, queryset=TestModel.objects.all())\n+        \n+        # Formset should be valid\n+        self.assertTrue(formset.is_valid())\n+        \n+        # Save should not create new objects despite the extra form data\n+        initial_count = TestModel.objects.count()\n+        saved_objects = formset.save()\n+        final_count = TestModel.objects.count()\n+        \n+        # Count should remain the same\n+        self.assertEqual(initial_count, final_count)\n+        \n+        # Only existing objects should be saved\n+        self.assertEqual(len(saved_objects), 2)\n+        \n+        # Verify no new objects were created\n+        self.assertFalse(TestModel.objects.filter(name='JS Added Object 1').exists())\n+        self.assertFalse(TestModel.objects.filter(name='JS Added Object 2').exists())\n+    \n+    def test_can_add_false_save_new_objects_returns_empty_list(self):\n+        \"\"\"Test that save_new_objects returns empty list when can_add=False.\"\"\"\n+        FormSet = modelformset_factory(TestModel, form=TestModelForm, can_add=False)\n+        \n+        form_data = {\n+            'form-TOTAL_FORMS': '3',\n+            'form-INITIAL_FORMS': '2',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+            \n+            # Existing objects\n+            'form-0-id': str(self.test_obj1.id),\n+            'form-0-name': 'Object 1',\n+            'form-0-value': '10',\n+            \n+            'form-1-id': str(self.test_obj2.id),\n+            'form-1-name': 'Object 2',\n+            'form-1-value': '20',\n+            \n+            # New object data\n+            'form-2-name': 'New Object',\n+            'form-2-value': '30',\n+        }\n+        \n+        formset = FormSet(data=form_data, queryset=TestModel.objects.all())\n+        self.assertTrue(formset.is_valid())\n+        \n+        # save_new_objects should return empty list\n+        new_objects = formset.save_new_objects()\n+        self.assertEqual(new_objects, [])\n+        self.assertEqual(len(new_objects), 0)\n+    \n+    def test_can_add_true_save_new_objects_creates_objects(self):\n+        \"\"\"Test that save_new_objects creates objects when can_add=True.\"\"\"\n+        FormSet = modelformset_factory(TestModel, form=TestModelForm, can_add=True)\n+        \n+        form_data = {\n+            'form-TOTAL_FORMS': '3',\n+            'form-INITIAL_FORMS': '2',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+            \n+            # Existing objects\n+            'form-0-id': str(self.test_obj1.id),\n+            'form-0-name': 'Object 1',\n+            'form-0-value': '10',\n+            \n+            'form-1-id': str(self.test_obj2.id),\n+            'form-1-name': 'Object 2',\n+            'form-1-value': '20',\n+            \n+            # New object data\n+            'form-2-name': 'New Object',\n+            'form-2-value': '30',\n+        }\n+        \n+        formset = FormSet(data=form_data, queryset=TestModel.objects.all())\n+        self.assertTrue(formset.is_valid())\n+        \n+        # save_new_objects should create and return new objects\n+        initial_count = TestModel.objects.count()\n+        new_objects = formset.save_new_objects()\n+        final_count = TestModel.objects.count()\n+        \n+        self.assertEqual(len(new_objects), 1)\n+        self.assertEqual(final_count, initial_count + 1)\n+        self.assertEqual(new_objects[0].name, 'New Object')\n+        self.assertEqual(new_objects[0].value, 30)\n+    \n+    def test_can_add_parameter_passed_to_formset_factory(self):\n+        \"\"\"Test that can_add parameter is properly passed through formset_factory.\"\"\"\n+        # Test with can_add=False\n+        FormSetFalse = modelformset_factory(TestModel, form=TestModelForm, can_add=False)\n+        formset_false = FormSetFalse(queryset=TestModel.objects.all())\n+        self.assertFalse(formset_false.can_add)\n+        \n+        # Test with can_add=True\n+        FormSetTrue = modelformset_factory(TestModel, form=TestModelForm, can_add=True)\n+        formset_true = FormSetTrue(queryset=TestModel.objects.all())\n+        self.assertTrue(formset_true.can_add)\n+        \n+        # Test default behavior (should be True)\n+        FormSetDefault = modelformset_factory(TestModel, form=TestModelForm)\n+        formset_default = FormSetDefault(queryset=TestModel.objects.all())\n+        self.assertTrue(formset_default.can_add)\n+    \n+    def test_can_add_with_can_delete_combination(self):\n+        \"\"\"Test that can_add works correctly in combination with can_delete.\"\"\"\n+        FormSet = modelformset_factory(\n+            TestModel, \n+            form=TestModelForm, \n+            can_add=False, \n+            can_delete=True\n+        )\n+        \n+        form_data = {\n+            'form-TOTAL_FORMS': '3',\n+            'form-INITIAL_FORMS': '2',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+            \n+            # First object - keep\n+            'form-0-id': str(self.test_obj1.id),\n+            'form-0-name': 'Object 1',\n+            'form-0-value': '10',\n+            \n+            # Second object - delete\n+            'form-1-id': str(self.test_obj2.id),\n+            'form-1-name': 'Object 2',\n+            'form-1-value': '20',\n+            'form-1-DELETE': 'on',\n+            \n+            # New object - should be ignored due to can_add=False\n+            'form-2-name': 'New Object',\n+            'form-2-value': '30',\n+        }\n+        \n+        formset = FormSet(data=form_data, queryset=TestModel.objects.all())\n+        self.assertTrue(formset.is_valid())\n+        \n+        initial_count = TestModel.objects.count()\n+        saved_objects = formset.save()\n+        final_count = TestModel.objects.count()\n+        \n+        # Should have deleted one object but not created any new ones\n+        self.assertEqual(final_count, initial_count - 1)\n+        \n+        # Only the non-deleted object should be in saved_objects\n+        self.assertEqual(len(saved_objects), 1)\n+        self.assertEqual(saved_objects[0].id, self.test_obj1.id)\n+        \n+        # Verify the second object was deleted\n+        self.assertFalse(TestModel.objects.filter(id=self.test_obj2.id).exists())\n+        \n+        # Verify no new object was created\n+        self.assertFalse(TestModel.objects.filter(name='New Object').exists())\n"
}