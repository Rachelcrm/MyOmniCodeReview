{
  "instance_id": "django__django-11790",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/auth_tests/test_forms.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.contrib.auth.forms import AuthenticationForm\nfrom django.contrib.auth import get_user_model\nfrom django.test import TestCase\nfrom django.forms.widgets import TextInput\n\n\nclass AuthenticationFormMaxLengthTests(TestCase):\n    \"\"\"\n    Test that AuthenticationForm's username field properly sets the maxlength HTML attribute.\n    This tests the regression described in the issue where the maxlength attribute\n    was not being set on the username field widget.\n    \"\"\"\n\n    def setUp(self):\n        \"\"\"Set up test data.\"\"\"\n        self.User = get_user_model()\n\n    def test_username_field_has_maxlength_attribute_in_widget_attrs(self):\n        \"\"\"\n        Test that the username field's widget has the maxlength attribute set\n        based on the User model's USERNAME_FIELD max_length.\n        \"\"\"\n        form = AuthenticationForm()\n        username_field = form.fields['username']\n        \n        # Get the expected max_length from the User model\n        username_model_field = self.User._meta.get_field(self.User.USERNAME_FIELD)\n        expected_max_length = username_model_field.max_length or 254\n        \n        # Check that the field's max_length is set correctly\n        self.assertEqual(username_field.max_length, expected_max_length)\n        \n        # Check that the widget's maxlength attribute is set correctly\n        self.assertIn('maxlength', username_field.widget.attrs)\n        self.assertEqual(username_field.widget.attrs['maxlength'], expected_max_length)\n\n    def test_username_field_renders_with_maxlength_attribute(self):\n        \"\"\"\n        Test that the username field renders with the maxlength HTML attribute\n        in the actual HTML output.\n        \"\"\"\n        form = AuthenticationForm()\n        username_field = form.fields['username']\n        \n        # Get the expected max_length\n        username_model_field = self.User._meta.get_field(self.User.USERNAME_FIELD)\n        expected_max_length = username_model_field.max_length or 254\n        \n        # Render the field and check for maxlength attribute\n        rendered_field = str(username_field.widget.render('username', ''))\n        self.assertIn(f'maxlength=\"{expected_max_length}\"', rendered_field)\n\n    def test_username_field_maxlength_with_custom_user_model_max_length(self):\n        \"\"\"\n        Test that the maxlength attribute is correctly set when the User model\n        has a specific max_length for the username field.\n        \"\"\"\n        form = AuthenticationForm()\n        username_field = form.fields['username']\n        \n        # The max_length should be taken from the User model's USERNAME_FIELD\n        username_model_field = self.User._meta.get_field(self.User.USERNAME_FIELD)\n        if username_model_field.max_length:\n            expected_max_length = username_model_field.max_length\n        else:\n            expected_max_length = 254  # Default fallback\n        \n        self.assertEqual(username_field.max_length, expected_max_length)\n        self.assertEqual(username_field.widget.attrs['maxlength'], expected_max_length)\n\n    def test_username_field_preserves_other_widget_attributes(self):\n        \"\"\"\n        Test that setting the maxlength attribute doesn't interfere with\n        other widget attributes like autofocus and autocomplete.\n        \"\"\"\n        form = AuthenticationForm()\n        username_field = form.fields['username']\n        \n        # Check that other attributes are preserved\n        self.assertIn('autofocus', username_field.widget.attrs)\n        self.assertTrue(username_field.widget.attrs['autofocus'])\n        \n        # Check that autocomplete attributes from UsernameField are preserved\n        self.assertIn('autocomplete', username_field.widget.attrs)\n        self.assertEqual(username_field.widget.attrs['autocomplete'], 'username')\n        \n        # Check that autocapitalize is preserved\n        self.assertIn('autocapitalize', username_field.widget.attrs)\n        self.assertEqual(username_field.widget.attrs['autocapitalize'], 'none')\n\n    def test_username_field_widget_attrs_method_includes_maxlength(self):\n        \"\"\"\n        Test that the widget_attrs method of the username field includes\n        the maxlength attribute when called.\n        \"\"\"\n        form = AuthenticationForm()\n        username_field = form.fields['username']\n        \n        # Create a test widget to pass to widget_attrs\n        test_widget = TextInput()\n        attrs = username_field.widget_attrs(test_widget)\n        \n        # The widget_attrs should include maxlength\n        self.assertIn('maxlength', attrs)\n        self.assertEqual(attrs['maxlength'], str(username_field.max_length))\n\n    def test_form_initialization_sets_maxlength_correctly(self):\n        \"\"\"\n        Test that form initialization properly sets both the field's max_length\n        and the widget's maxlength attribute.\n        \"\"\"\n        # Test with a fresh form instance\n        form = AuthenticationForm()\n        \n        # Get expected values\n        username_model_field = self.User._meta.get_field(self.User.USERNAME_FIELD)\n        expected_max_length = username_model_field.max_length or 254\n        \n        # Verify both field and widget attributes are set\n        self.assertEqual(form.fields['username'].max_length, expected_max_length)\n        self.assertEqual(form.fields['username'].widget.attrs['maxlength'], expected_max_length)\n\n    def test_regression_maxlength_attribute_present(self):\n        \"\"\"\n        Regression test to ensure that the maxlength HTML attribute is present\n        in the username field widget. This test specifically addresses the bug\n        where the maxlength attribute was missing.\n        \"\"\"\n        form = AuthenticationForm()\n        username_widget = form.fields['username'].widget\n        \n        # This test should fail before the fix and pass after the fix\n        self.assertIn('maxlength', username_widget.attrs, \n                     \"maxlength attribute should be present in username widget attrs\")\n        \n        # Verify the value is correct\n        username_model_field = self.User._meta.get_field(self.User.USERNAME_FIELD)\n        expected_max_length = username_model_field.max_length or 254\n        self.assertEqual(username_widget.attrs['maxlength'], expected_max_length)\n\n    def test_username_field_html_output_contains_maxlength(self):\n        \"\"\"\n        Test that the actual HTML output of the username field contains\n        the maxlength attribute.\n        \"\"\"\n        form = AuthenticationForm()\n        \n        # Render the entire form and check for maxlength in username field\n        form_html = form.as_p()\n        \n        # Get expected max_length\n        username_model_field = self.User._meta.get_field(self.User.USERNAME_FIELD)\n        expected_max_length = username_model_field.max_length or 254\n        \n        # Check that maxlength appears in the HTML\n        self.assertIn(f'maxlength=\"{expected_max_length}\"', form_html)\n        \n        # Also check that it's specifically in the username field\n        username_field_html = str(form['username'])\n        self.assertIn(f'maxlength=\"{expected_max_length}\"', username_field_html)\n</patched>\n```",
  "patch": "--- a/tests/auth_tests/test_forms.py\n+++ b/tests/auth_tests/test_forms.py\n-# Empty if creating new file\n+import pytest\n+from django.contrib.auth.forms import AuthenticationForm\n+from django.contrib.auth import get_user_model\n+from django.test import TestCase\n+from django.forms.widgets import TextInput\n+\n+\n+class AuthenticationFormMaxLengthTests(TestCase):\n+    \"\"\"\n+    Test that AuthenticationForm's username field properly sets the maxlength HTML attribute.\n+    This tests the regression described in the issue where the maxlength attribute\n+    was not being set on the username field widget.\n+    \"\"\"\n+\n+    def setUp(self):\n+        \"\"\"Set up test data.\"\"\"\n+        self.User = get_user_model()\n+\n+    def test_username_field_has_maxlength_attribute_in_widget_attrs(self):\n+        \"\"\"\n+        Test that the username field's widget has the maxlength attribute set\n+        based on the User model's USERNAME_FIELD max_length.\n+        \"\"\"\n+        form = AuthenticationForm()\n+        username_field = form.fields['username']\n+        \n+        # Get the expected max_length from the User model\n+        username_model_field = self.User._meta.get_field(self.User.USERNAME_FIELD)\n+        expected_max_length = username_model_field.max_length or 254\n+        \n+        # Check that the field's max_length is set correctly\n+        self.assertEqual(username_field.max_length, expected_max_length)\n+        \n+        # Check that the widget's maxlength attribute is set correctly\n+        self.assertIn('maxlength', username_field.widget.attrs)\n+        self.assertEqual(username_field.widget.attrs['maxlength'], expected_max_length)\n+\n+    def test_username_field_renders_with_maxlength_attribute(self):\n+        \"\"\"\n+        Test that the username field renders with the maxlength HTML attribute\n+        in the actual HTML output.\n+        \"\"\"\n+        form = AuthenticationForm()\n+        username_field = form.fields['username']\n+        \n+        # Get the expected max_length\n+        username_model_field = self.User._meta.get_field(self.User.USERNAME_FIELD)\n+        expected_max_length = username_model_field.max_length or 254\n+        \n+        # Render the field and check for maxlength attribute\n+        rendered_field = str(username_field.widget.render('username', ''))\n+        self.assertIn(f'maxlength=\"{expected_max_length}\"', rendered_field)\n+\n+    def test_username_field_maxlength_with_custom_user_model_max_length(self):\n+        \"\"\"\n+        Test that the maxlength attribute is correctly set when the User model\n+        has a specific max_length for the username field.\n+        \"\"\"\n+        form = AuthenticationForm()\n+        username_field = form.fields['username']\n+        \n+        # The max_length should be taken from the User model's USERNAME_FIELD\n+        username_model_field = self.User._meta.get_field(self.User.USERNAME_FIELD)\n+        if username_model_field.max_length:\n+            expected_max_length = username_model_field.max_length\n+        else:\n+            expected_max_length = 254  # Default fallback\n+        \n+        self.assertEqual(username_field.max_length, expected_max_length)\n+        self.assertEqual(username_field.widget.attrs['maxlength'], expected_max_length)\n+\n+    def test_username_field_preserves_other_widget_attributes(self):\n+        \"\"\"\n+        Test that setting the maxlength attribute doesn't interfere with\n+        other widget attributes like autofocus and autocomplete.\n+        \"\"\"\n+        form = AuthenticationForm()\n+        username_field = form.fields['username']\n+        \n+        # Check that other attributes are preserved\n+        self.assertIn('autofocus', username_field.widget.attrs)\n+        self.assertTrue(username_field.widget.attrs['autofocus'])\n+        \n+        # Check that autocomplete attributes from UsernameField are preserved\n+        self.assertIn('autocomplete', username_field.widget.attrs)\n+        self.assertEqual(username_field.widget.attrs['autocomplete'], 'username')\n+        \n+        # Check that autocapitalize is preserved\n+        self.assertIn('autocapitalize', username_field.widget.attrs)\n+        self.assertEqual(username_field.widget.attrs['autocapitalize'], 'none')\n+\n+    def test_username_field_widget_attrs_method_includes_maxlength(self):\n+        \"\"\"\n+        Test that the widget_attrs method of the username field includes\n+        the maxlength attribute when called.\n+        \"\"\"\n+        form = AuthenticationForm()\n+        username_field = form.fields['username']\n+        \n+        # Create a test widget to pass to widget_attrs\n+        test_widget = TextInput()\n+        attrs = username_field.widget_attrs(test_widget)\n+        \n+        # The widget_attrs should include maxlength\n+        self.assertIn('maxlength', attrs)\n+        self.assertEqual(attrs['maxlength'], str(username_field.max_length))\n+\n+    def test_form_initialization_sets_maxlength_correctly(self):\n+        \"\"\"\n+        Test that form initialization properly sets both the field's max_length\n+        and the widget's maxlength attribute.\n+        \"\"\"\n+        # Test with a fresh form instance\n+        form = AuthenticationForm()\n+        \n+        # Get expected values\n+        username_model_field = self.User._meta.get_field(self.User.USERNAME_FIELD)\n+        expected_max_length = username_model_field.max_length or 254\n+        \n+        # Verify both field and widget attributes are set\n+        self.assertEqual(form.fields['username'].max_length, expected_max_length)\n+        self.assertEqual(form.fields['username'].widget.attrs['maxlength'], expected_max_length)\n+\n+    def test_regression_maxlength_attribute_present(self):\n+        \"\"\"\n+        Regression test to ensure that the maxlength HTML attribute is present\n+        in the username field widget. This test specifically addresses the bug\n+        where the maxlength attribute was missing.\n+        \"\"\"\n+        form = AuthenticationForm()\n+        username_widget = form.fields['username'].widget\n+        \n+        # This test should fail before the fix and pass after the fix\n+        self.assertIn('maxlength', username_widget.attrs, \n+                     \"maxlength attribute should be present in username widget attrs\")\n+        \n+        # Verify the value is correct\n+        username_model_field = self.User._meta.get_field(self.User.USERNAME_FIELD)\n+        expected_max_length = username_model_field.max_length or 254\n+        self.assertEqual(username_widget.attrs['maxlength'], expected_max_length)\n+\n+    def test_username_field_html_output_contains_maxlength(self):\n+        \"\"\"\n+        Test that the actual HTML output of the username field contains\n+        the maxlength attribute.\n+        \"\"\"\n+        form = AuthenticationForm()\n+        \n+        # Render the entire form and check for maxlength in username field\n+        form_html = form.as_p()\n+        \n+        # Get expected max_length\n+        username_model_field = self.User._meta.get_field(self.User.USERNAME_FIELD)\n+        expected_max_length = username_model_field.max_length or 254\n+        \n+        # Check that maxlength appears in the HTML\n+        self.assertIn(f'maxlength=\"{expected_max_length}\"', form_html)\n+        \n+        # Also check that it's specifically in the username field\n+        username_field_html = str(form['username'])\n+        self.assertIn(f'maxlength=\"{expected_max_length}\"', username_field_html)\n"
}