{
  "instance_id": "django__django-15022",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/admin_views/test_changelist_search.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.contrib import admin\nfrom django.contrib.admin.views.main import ChangeList\nfrom django.contrib.auth.models import User\nfrom django.db import models, connection\nfrom django.test import TestCase, RequestFactory\nfrom django.utils.translation import gettext_lazy as _\n\n\nclass Client(models.Model):\n    \"\"\"Test model representing a client.\"\"\"\n    name = models.CharField(_('name'), max_length=256)\n    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)\n    contact_person = models.CharField(_('contact person'), max_length=256, blank=True, null=True)\n\n    class Meta:\n        app_label = 'admin_views'\n\n\nclass ClientOffice(models.Model):\n    \"\"\"Test model representing a client office.\"\"\"\n    name = models.CharField(_('name'), max_length=256)\n    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)\n    client = models.ForeignKey(Client, verbose_name=_('client'), on_delete=models.CASCADE)\n\n    class Meta:\n        app_label = 'admin_views'\n\n\nclass ClientAdmin(admin.ModelAdmin):\n    \"\"\"Admin configuration for Client model with search fields including related fields.\"\"\"\n    search_fields = ('name', 'name2', 'contact_person', 'clientoffice__name', 'clientoffice__name2')\n\n\nclass TestChangelistSearchJoins(TestCase):\n    \"\"\"Test suite for admin changelist search query optimization.\"\"\"\n\n    @classmethod\n    def setUpClass(cls):\n        super().setUpClass()\n        # Create tables for our test models\n        with connection.schema_editor() as schema_editor:\n            schema_editor.create_model(Client)\n            schema_editor.create_model(ClientOffice)\n\n    @classmethod\n    def tearDownClass(cls):\n        # Clean up tables\n        with connection.schema_editor() as schema_editor:\n            schema_editor.delete_model(ClientOffice)\n            schema_editor.delete_model(Client)\n        super().tearDownClass()\n\n    def setUp(self):\n        \"\"\"Set up test data and admin configuration.\"\"\"\n        self.factory = RequestFactory()\n        self.user = User.objects.create_superuser('admin', 'admin@test.com', 'password')\n        \n        # Create test data\n        self.client1 = Client.objects.create(\n            name='Test Client One',\n            name2='Alternative Name One',\n            contact_person='John Doe'\n        )\n        self.client2 = Client.objects.create(\n            name='Another Client',\n            name2='Alternative Name Two',\n            contact_person='Jane Smith'\n        )\n        \n        self.office1 = ClientOffice.objects.create(\n            name='Main Office',\n            name2='HQ',\n            client=self.client1\n        )\n        self.office2 = ClientOffice.objects.create(\n            name='Branch Office',\n            name2='Secondary Location',\n            client=self.client1\n        )\n        self.office3 = ClientOffice.objects.create(\n            name='Remote Office',\n            name2='Satellite',\n            client=self.client2\n        )\n\n        self.model_admin = ClientAdmin(Client, admin.site)\n\n    def _create_changelist(self, search_query=''):\n        \"\"\"Helper method to create a ChangeList instance with search query.\"\"\"\n        request = self.factory.get('/admin/admin_views/client/', {'q': search_query})\n        request.user = self.user\n        \n        changelist = ChangeList(\n            request=request,\n            model=Client,\n            list_display=['name'],\n            list_display_links=None,\n            list_filter=[],\n            date_hierarchy=None,\n            search_fields=self.model_admin.search_fields,\n            list_select_related=False,\n            list_per_page=100,\n            list_max_show_all=200,\n            list_editable=[],\n            model_admin=self.model_admin,\n            sortable_by=None,\n            search_help_text=None,\n        )\n        return changelist\n\n    def _count_joins_in_query(self, queryset):\n        \"\"\"Helper method to count the number of JOINs in a queryset's SQL.\"\"\"\n        sql = str(queryset.query)\n        # Count JOIN occurrences (case insensitive)\n        join_count = sql.upper().count('JOIN')\n        return join_count\n\n    def test_single_word_search_creates_minimal_joins(self):\n        \"\"\"Test that single word search creates expected number of joins.\"\"\"\n        changelist = self._create_changelist('Test')\n        queryset = changelist.get_queryset(changelist.request)\n        \n        # Should find client1 which has \"Test\" in name\n        results = list(queryset)\n        self.assertIn(self.client1, results)\n        \n        # Count joins - should be minimal for single word\n        join_count = self._count_joins_in_query(queryset)\n        single_word_joins = join_count\n\n    def test_multiple_words_search_excessive_joins_bug(self):\n        \"\"\"Test that demonstrates the bug: multiple words create excessive joins.\"\"\"\n        # This test should fail before the fix is applied\n        changelist = self._create_changelist('Test Client Main Office')\n        queryset = changelist.get_queryset(changelist.request)\n        \n        # Count joins for multiple words\n        join_count = self._count_joins_in_query(queryset)\n        \n        # Before fix: each word creates additional joins, leading to excessive joins\n        # This assertion will fail before the fix, demonstrating the bug\n        # After fix: joins should be optimized and not multiply with each word\n        \n        # Get single word join count for comparison\n        single_changelist = self._create_changelist('Test')\n        single_queryset = single_changelist.get_queryset(single_changelist.request)\n        single_word_joins = self._count_joins_in_query(single_queryset)\n        \n        # The bug: multiple words should not create significantly more joins than single word\n        # This assertion demonstrates the problem - it will fail before fix\n        self.assertLessEqual(\n            join_count, \n            single_word_joins + 1,  # Allow for at most 1 additional join\n            f\"Multiple word search created {join_count} joins vs {single_word_joins} for single word. \"\n            f\"This indicates unnecessary join multiplication bug.\"\n        )\n\n    def test_search_functionality_preserved_after_fix(self):\n        \"\"\"Test that search functionality works correctly after the fix.\"\"\"\n        # Test various search scenarios to ensure functionality is preserved\n        \n        # Search by client name\n        changelist = self._create_changelist('Test Client')\n        queryset = changelist.get_queryset(changelist.request)\n        results = list(queryset)\n        self.assertIn(self.client1, results)\n        self.assertNotIn(self.client2, results)\n        \n        # Search by contact person\n        changelist = self._create_changelist('John Doe')\n        queryset = changelist.get_queryset(changelist.request)\n        results = list(queryset)\n        self.assertIn(self.client1, results)\n        self.assertNotIn(self.client2, results)\n        \n        # Search by related office name\n        changelist = self._create_changelist('Main Office')\n        queryset = changelist.get_queryset(changelist.request)\n        results = list(queryset)\n        self.assertIn(self.client1, results)\n        self.assertNotIn(self.client2, results)\n        \n        # Search by related office alternative name\n        changelist = self._create_changelist('HQ')\n        queryset = changelist.get_queryset(changelist.request)\n        results = list(queryset)\n        self.assertIn(self.client1, results)\n        self.assertNotIn(self.client2, results)\n\n    def test_multiple_word_search_all_words_must_match(self):\n        \"\"\"Test that all words in search query must match (AND logic between words).\"\"\"\n        # Search for words that should match client1\n        changelist = self._create_changelist('Test Main')\n        queryset = changelist.get_queryset(changelist.request)\n        results = list(queryset)\n        self.assertIn(self.client1, results)  # Has \"Test\" in name and \"Main\" in office name\n        self.assertNotIn(self.client2, results)  # Doesn't have \"Test\" in any field\n        \n        # Search for words where only one matches\n        changelist = self._create_changelist('Test Remote')\n        queryset = changelist.get_queryset(changelist.request)\n        results = list(queryset)\n        # client1 has \"Test\" but no \"Remote\", client2 has \"Remote\" but no \"Test\"\n        # So no results should match\n        self.assertEqual(len(results), 0)\n\n    def test_search_with_quoted_phrases(self):\n        \"\"\"Test that quoted phrases work correctly.\"\"\"\n        changelist = self._create_changelist('\"Test Client\"')\n        queryset = changelist.get_queryset(changelist.request)\n        results = list(queryset)\n        self.assertIn(self.client1, results)\n        self.assertNotIn(self.client2, results)\n\n    def test_search_performance_with_many_words(self):\n        \"\"\"Test that search with many words doesn't create excessive joins.\"\"\"\n        # Create a search with many words to stress test the join optimization\n        many_words_search = 'Test Client Main Office John Doe Alternative'\n        changelist = self._create_changelist(many_words_search)\n        queryset = changelist.get_queryset(changelist.request)\n        \n        # Count joins - should not grow linearly with number of search words\n        join_count = self._count_joins_in_query(queryset)\n        \n        # Get baseline with fewer words\n        few_words_search = 'Test Client'\n        baseline_changelist = self._create_changelist(few_words_search)\n        baseline_queryset = baseline_changelist.get_queryset(baseline_changelist.request)\n        baseline_joins = self._count_joins_in_query(baseline_queryset)\n        \n        # After fix: joins should not multiply with search word count\n        # Allow some reasonable increase but not linear growth\n        max_expected_joins = baseline_joins + 2  # Allow for some reasonable increase\n        self.assertLessEqual(\n            join_count,\n            max_expected_joins,\n            f\"Search with many words created {join_count} joins vs {baseline_joins} baseline. \"\n            f\"Joins should not grow linearly with search word count.\"\n        )\n\n    def test_empty_search_returns_all_results(self):\n        \"\"\"Test that empty search returns all results.\"\"\"\n        changelist = self._create_changelist('')\n        queryset = changelist.get_queryset(changelist.request)\n        results = list(queryset)\n        self.assertIn(self.client1, results)\n        self.assertIn(self.client2, results)\n\n    def test_search_with_special_characters(self):\n        \"\"\"Test that search handles special characters correctly.\"\"\"\n        # Create client with special characters\n        special_client = Client.objects.create(\n            name='Client & Co.',\n            contact_person=\"O'Connor\"\n        )\n        \n        changelist = self._create_changelist(\"O'Connor\")\n        queryset = changelist.get_queryset(changelist.request)\n        results = list(queryset)\n        self.assertIn(special_client, results)\n\n    def test_get_search_results_method_directly(self):\n        \"\"\"Test the get_search_results method directly to verify join optimization.\"\"\"\n        request = self.factory.get('/admin/admin_views/client/')\n        request.user = self.user\n        \n        # Test with multiple words\n        base_queryset = Client.objects.all()\n        search_term = 'Test Client Main Office'\n        \n        result_queryset, may_have_duplicates = self.model_admin.get_search_results(\n            request, base_queryset, search_term\n        )\n        \n        # Verify the search works\n        results = list(result_queryset)\n        self.assertIn(self.client1, results)\n        \n        # Verify join count is reasonable\n        join_count = self._count_joins_in_query(result_queryset)\n        \n        # Compare with single word search\n        single_result_queryset, _ = self.model_admin.get_search_results(\n            request, base_queryset, 'Test'\n        )\n        single_join_count = self._count_joins_in_query(single_result_queryset)\n        \n        # After fix: multiple words should not create significantly more joins\n        self.assertLessEqual(\n            join_count,\n            single_join_count + 1,\n            f\"Multiple word search created {join_count} joins vs {single_join_count} for single word\"\n        )\n</patched>\n</file>\n```",
  "patch": "--- a/tests/admin_views/test_changelist_search.py\n+++ b/tests/admin_views/test_changelist_search.py\n-# Empty if creating new file\n+import pytest\n+from django.contrib import admin\n+from django.contrib.admin.views.main import ChangeList\n+from django.contrib.auth.models import User\n+from django.db import models, connection\n+from django.test import TestCase, RequestFactory\n+from django.utils.translation import gettext_lazy as _\n+\n+\n+class Client(models.Model):\n+    \"\"\"Test model representing a client.\"\"\"\n+    name = models.CharField(_('name'), max_length=256)\n+    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)\n+    contact_person = models.CharField(_('contact person'), max_length=256, blank=True, null=True)\n+\n+    class Meta:\n+        app_label = 'admin_views'\n+\n+\n+class ClientOffice(models.Model):\n+    \"\"\"Test model representing a client office.\"\"\"\n+    name = models.CharField(_('name'), max_length=256)\n+    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)\n+    client = models.ForeignKey(Client, verbose_name=_('client'), on_delete=models.CASCADE)\n+\n+    class Meta:\n+        app_label = 'admin_views'\n+\n+\n+class ClientAdmin(admin.ModelAdmin):\n+    \"\"\"Admin configuration for Client model with search fields including related fields.\"\"\"\n+    search_fields = ('name', 'name2', 'contact_person', 'clientoffice__name', 'clientoffice__name2')\n+\n+\n+class TestChangelistSearchJoins(TestCase):\n+    \"\"\"Test suite for admin changelist search query optimization.\"\"\"\n+\n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        # Create tables for our test models\n+        with connection.schema_editor() as schema_editor:\n+            schema_editor.create_model(Client)\n+            schema_editor.create_model(ClientOffice)\n+\n+    @classmethod\n+    def tearDownClass(cls):\n+        # Clean up tables\n+        with connection.schema_editor() as schema_editor:\n+            schema_editor.delete_model(ClientOffice)\n+            schema_editor.delete_model(Client)\n+        super().tearDownClass()\n+\n+    def setUp(self):\n+        \"\"\"Set up test data and admin configuration.\"\"\"\n+        self.factory = RequestFactory()\n+        self.user = User.objects.create_superuser('admin', 'admin@test.com', 'password')\n+        \n+        # Create test data\n+        self.client1 = Client.objects.create(\n+            name='Test Client One',\n+            name2='Alternative Name One',\n+            contact_person='John Doe'\n+        )\n+        self.client2 = Client.objects.create(\n+            name='Another Client',\n+            name2='Alternative Name Two',\n+            contact_person='Jane Smith'\n+        )\n+        \n+        self.office1 = ClientOffice.objects.create(\n+            name='Main Office',\n+            name2='HQ',\n+            client=self.client1\n+        )\n+        self.office2 = ClientOffice.objects.create(\n+            name='Branch Office',\n+            name2='Secondary Location',\n+            client=self.client1\n+        )\n+        self.office3 = ClientOffice.objects.create(\n+            name='Remote Office',\n+            name2='Satellite',\n+            client=self.client2\n+        )\n+\n+        self.model_admin = ClientAdmin(Client, admin.site)\n+\n+    def _create_changelist(self, search_query=''):\n+        \"\"\"Helper method to create a ChangeList instance with search query.\"\"\"\n+        request = self.factory.get('/admin/admin_views/client/', {'q': search_query})\n+        request.user = self.user\n+        \n+        changelist = ChangeList(\n+            request=request,\n+            model=Client,\n+            list_display=['name'],\n+            list_display_links=None,\n+            list_filter=[],\n+            date_hierarchy=None,\n+            search_fields=self.model_admin.search_fields,\n+            list_select_related=False,\n+            list_per_page=100,\n+            list_max_show_all=200,\n+            list_editable=[],\n+            model_admin=self.model_admin,\n+            sortable_by=None,\n+            search_help_text=None,\n+        )\n+        return changelist\n+\n+    def _count_joins_in_query(self, queryset):\n+        \"\"\"Helper method to count the number of JOINs in a queryset's SQL.\"\"\"\n+        sql = str(queryset.query)\n+        # Count JOIN occurrences (case insensitive)\n+        join_count = sql.upper().count('JOIN')\n+        return join_count\n+\n+    def test_single_word_search_creates_minimal_joins(self):\n+        \"\"\"Test that single word search creates expected number of joins.\"\"\"\n+        changelist = self._create_changelist('Test')\n+        queryset = changelist.get_queryset(changelist.request)\n+        \n+        # Should find client1 which has \"Test\" in name\n+        results = list(queryset)\n+        self.assertIn(self.client1, results)\n+        \n+        # Count joins - should be minimal for single word\n+        join_count = self._count_joins_in_query(queryset)\n+        single_word_joins = join_count\n+\n+    def test_multiple_words_search_excessive_joins_bug(self):\n+        \"\"\"Test that demonstrates the bug: multiple words create excessive joins.\"\"\"\n+        # This test should fail before the fix is applied\n+        changelist = self._create_changelist('Test Client Main Office')\n+        queryset = changelist.get_queryset(changelist.request)\n+        \n+        # Count joins for multiple words\n+        join_count = self._count_joins_in_query(queryset)\n+        \n+        # Before fix: each word creates additional joins, leading to excessive joins\n+        # This assertion will fail before the fix, demonstrating the bug\n+        # After fix: joins should be optimized and not multiply with each word\n+        \n+        # Get single word join count for comparison\n+        single_changelist = self._create_changelist('Test')\n+        single_queryset = single_changelist.get_queryset(single_changelist.request)\n+        single_word_joins = self._count_joins_in_query(single_queryset)\n+        \n+        # The bug: multiple words should not create significantly more joins than single word\n+        # This assertion demonstrates the problem - it will fail before fix\n+        self.assertLessEqual(\n+            join_count, \n+            single_word_joins + 1,  # Allow for at most 1 additional join\n+            f\"Multiple word search created {join_count} joins vs {single_word_joins} for single word. \"\n+            f\"This indicates unnecessary join multiplication bug.\"\n+        )\n+\n+    def test_search_functionality_preserved_after_fix(self):\n+        \"\"\"Test that search functionality works correctly after the fix.\"\"\"\n+        # Test various search scenarios to ensure functionality is preserved\n+        \n+        # Search by client name\n+        changelist = self._create_changelist('Test Client')\n+        queryset = changelist.get_queryset(changelist.request)\n+        results = list(queryset)\n+        self.assertIn(self.client1, results)\n+        self.assertNotIn(self.client2, results)\n+        \n+        # Search by contact person\n+        changelist = self._create_changelist('John Doe')\n+        queryset = changelist.get_queryset(changelist.request)\n+        results = list(queryset)\n+        self.assertIn(self.client1, results)\n+        self.assertNotIn(self.client2, results)\n+        \n+        # Search by related office name\n+        changelist = self._create_changelist('Main Office')\n+        queryset = changelist.get_queryset(changelist.request)\n+        results = list(queryset)\n+        self.assertIn(self.client1, results)\n+        self.assertNotIn(self.client2, results)\n+        \n+        # Search by related office alternative name\n+        changelist = self._create_changelist('HQ')\n+        queryset = changelist.get_queryset(changelist.request)\n+        results = list(queryset)\n+        self.assertIn(self.client1, results)\n+        self.assertNotIn(self.client2, results)\n+\n+    def test_multiple_word_search_all_words_must_match(self):\n+        \"\"\"Test that all words in search query must match (AND logic between words).\"\"\"\n+        # Search for words that should match client1\n+        changelist = self._create_changelist('Test Main')\n+        queryset = changelist.get_queryset(changelist.request)\n+        results = list(queryset)\n+        self.assertIn(self.client1, results)  # Has \"Test\" in name and \"Main\" in office name\n+        self.assertNotIn(self.client2, results)  # Doesn't have \"Test\" in any field\n+        \n+        # Search for words where only one matches\n+        changelist = self._create_changelist('Test Remote')\n+        queryset = changelist.get_queryset(changelist.request)\n+        results = list(queryset)\n+        # client1 has \"Test\" but no \"Remote\", client2 has \"Remote\" but no \"Test\"\n+        # So no results should match\n+        self.assertEqual(len(results), 0)\n+\n+    def test_search_with_quoted_phrases(self):\n+        \"\"\"Test that quoted phrases work correctly.\"\"\"\n+        changelist = self._create_changelist('\"Test Client\"')\n+        queryset = changelist.get_queryset(changelist.request)\n+        results = list(queryset)\n+        self.assertIn(self.client1, results)\n+        self.assertNotIn(self.client2, results)\n+\n+    def test_search_performance_with_many_words(self):\n+        \"\"\"Test that search with many words doesn't create excessive joins.\"\"\"\n+        # Create a search with many words to stress test the join optimization\n+        many_words_search = 'Test Client Main Office John Doe Alternative'\n+        changelist = self._create_changelist(many_words_search)\n+        queryset = changelist.get_queryset(changelist.request)\n+        \n+        # Count joins - should not grow linearly with number of search words\n+        join_count = self._count_joins_in_query(queryset)\n+        \n+        # Get baseline with fewer words\n+        few_words_search = 'Test Client'\n+        baseline_changelist = self._create_changelist(few_words_search)\n+        baseline_queryset = baseline_changelist.get_queryset(baseline_changelist.request)\n+        baseline_joins = self._count_joins_in_query(baseline_queryset)\n+        \n+        # After fix: joins should not multiply with search word count\n+        # Allow some reasonable increase but not linear growth\n+        max_expected_joins = baseline_joins + 2  # Allow for some reasonable increase\n+        self.assertLessEqual(\n+            join_count,\n+            max_expected_joins,\n+            f\"Search with many words created {join_count} joins vs {baseline_joins} baseline. \"\n+            f\"Joins should not grow linearly with search word count.\"\n+        )\n+\n+    def test_empty_search_returns_all_results(self):\n+        \"\"\"Test that empty search returns all results.\"\"\"\n+        changelist = self._create_changelist('')\n+        queryset = changelist.get_queryset(changelist.request)\n+        results = list(queryset)\n+        self.assertIn(self.client1, results)\n+        self.assertIn(self.client2, results)\n+\n+    def test_search_with_special_characters(self):\n+        \"\"\"Test that search handles special characters correctly.\"\"\"\n+        # Create client with special characters\n+        special_client = Client.objects.create(\n+            name='Client & Co.',\n+            contact_person=\"O'Connor\"\n+        )\n+        \n+        changelist = self._create_changelist(\"O'Connor\")\n+        queryset = changelist.get_queryset(changelist.request)\n+        results = list(queryset)\n+        self.assertIn(special_client, results)\n+\n+    def test_get_search_results_method_directly(self):\n+        \"\"\"Test the get_search_results method directly to verify join optimization.\"\"\"\n+        request = self.factory.get('/admin/admin_views/client/')\n+        request.user = self.user\n+        \n+        # Test with multiple words\n+        base_queryset = Client.objects.all()\n+        search_term = 'Test Client Main Office'\n+        \n+        result_queryset, may_have_duplicates = self.model_admin.get_search_results(\n+            request, base_queryset, search_term\n+        )\n+        \n+        # Verify the search works\n+        results = list(result_queryset)\n+        self.assertIn(self.client1, results)\n+        \n+        # Verify join count is reasonable\n+        join_count = self._count_joins_in_query(result_queryset)\n+        \n+        # Compare with single word search\n+        single_result_queryset, _ = self.model_admin.get_search_results(\n+            request, base_queryset, 'Test'\n+        )\n+        single_join_count = self._count_joins_in_query(single_result_queryset)\n+        \n+        # After fix: multiple words should not create significantly more joins\n+        self.assertLessEqual(\n+            join_count,\n+            single_join_count + 1,\n+            f\"Multiple word search created {join_count} joins vs {single_join_count} for single word\"\n+        )\n"
}