{
  "instance_id": "django__django-11532",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/mail/test_unicode_dns.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom unittest.mock import patch\nfrom django.core.mail import EmailMessage\nfrom django.core.mail.utils import CachedDnsName\nfrom django.test import TestCase\n\n\nclass UnicodeHostnameEmailTests(TestCase):\n    \"\"\"Test email handling with non-ASCII hostnames.\"\"\"\n\n    def test_unicode_hostname_with_non_unicode_encoding_fails_before_fix(self):\n        \"\"\"\n        Test that demonstrates the bug: non-ASCII hostname crashes \n        when email encoding is non-unicode (iso-8859-1).\n        This test should fail before the fix is applied.\n        \"\"\"\n        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"\u6b63\u5b97\"):\n            # Clear any cached DNS name to force re-evaluation\n            dns_name = CachedDnsName()\n            if hasattr(dns_name, '_fqdn'):\n                delattr(dns_name, '_fqdn')\n            \n            with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n                email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n                email.encoding = 'iso-8859-1'\n                \n                # This should raise UnicodeEncodeError before the fix\n                with pytest.raises(UnicodeEncodeError):\n                    email.message()\n\n    def test_unicode_hostname_with_unicode_encoding_works(self):\n        \"\"\"\n        Test that unicode hostname works fine with unicode encoding (utf-8).\n        This should work both before and after the fix.\n        \"\"\"\n        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"\u6b63\u5b97\"):\n            # Clear any cached DNS name to force re-evaluation\n            dns_name = CachedDnsName()\n            if hasattr(dns_name, '_fqdn'):\n                delattr(dns_name, '_fqdn')\n            \n            with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n                email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n                email.encoding = 'utf-8'\n                \n                # This should work fine\n                message = email.message()\n                self.assertIn('Message-ID', message)\n\n    def test_unicode_hostname_converts_to_punycode_after_fix(self):\n        \"\"\"\n        Test that after the fix, unicode hostname is converted to punycode\n        and works with non-unicode encoding.\n        This test should pass after the fix is applied.\n        \"\"\"\n        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"\u6b63\u5b97\"):\n            # Clear any cached DNS name to force re-evaluation\n            dns_name = CachedDnsName()\n            if hasattr(dns_name, '_fqdn'):\n                delattr(dns_name, '_fqdn')\n            \n            with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n                email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n                email.encoding = 'iso-8859-1'\n                \n                # After fix, this should work and contain punycode\n                message = email.message()\n                message_id = message['Message-ID']\n                \n                # The Message-ID should contain the punycode version of the hostname\n                # \"\u6b63\u5b97\" should become \"xn--p8s937b\"\n                self.assertIn('xn--p8s937b', message_id)\n\n    def test_ascii_hostname_unchanged(self):\n        \"\"\"\n        Test that ASCII hostnames work unchanged both before and after the fix.\n        \"\"\"\n        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"example.com\"):\n            # Clear any cached DNS name to force re-evaluation\n            dns_name = CachedDnsName()\n            if hasattr(dns_name, '_fqdn'):\n                delattr(dns_name, '_fqdn')\n            \n            with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n                email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n                email.encoding = 'iso-8859-1'\n                \n                message = email.message()\n                message_id = message['Message-ID']\n                \n                # ASCII hostname should remain unchanged\n                self.assertIn('example.com', message_id)\n\n    def test_various_unicode_hostnames_convert_to_punycode(self):\n        \"\"\"\n        Test various unicode hostnames to ensure they all convert properly.\n        \"\"\"\n        test_cases = [\n            (\"\u6f22\u5b57\", \"xn--p8s937b\"),  # Chinese characters\n            (\"\u0442\u0435\u0441\u0442\", \"xn--e1afmkfd\"),  # Cyrillic characters\n            (\"m\u00fcnchen\", \"xn--mnchen-3ya\"),  # German umlaut\n            (\"caf\u00e9\", \"xn--caf-dma\"),  # French accent\n        ]\n        \n        for unicode_hostname, expected_punycode in test_cases:\n            with self.subTest(hostname=unicode_hostname):\n                with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=unicode_hostname):\n                    # Clear any cached DNS name to force re-evaluation\n                    dns_name = CachedDnsName()\n                    if hasattr(dns_name, '_fqdn'):\n                        delattr(dns_name, '_fqdn')\n                    \n                    with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n                        email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n                        email.encoding = 'iso-8859-1'\n                        \n                        message = email.message()\n                        message_id = message['Message-ID']\n                        \n                        # Should contain the punycode version\n                        self.assertIn(expected_punycode, message_id)\n\n    def test_cached_dns_name_caching_behavior(self):\n        \"\"\"\n        Test that the CachedDnsName still caches properly after the fix.\n        \"\"\"\n        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"\u6b63\u5b97\") as mock_getfqdn:\n            dns_name = CachedDnsName()\n            \n            # Clear any existing cache\n            if hasattr(dns_name, '_fqdn'):\n                delattr(dns_name, '_fqdn')\n            \n            # First call should invoke socket.getfqdn\n            result1 = dns_name.get_fqdn()\n            self.assertEqual(mock_getfqdn.call_count, 1)\n            \n            # Second call should use cached value\n            result2 = dns_name.get_fqdn()\n            self.assertEqual(mock_getfqdn.call_count, 1)  # Should still be 1\n            \n            # Results should be the same\n            self.assertEqual(result1, result2)\n\n    def test_edge_case_empty_hostname(self):\n        \"\"\"\n        Test edge case where hostname is empty or None.\n        \"\"\"\n        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"\"):\n            dns_name = CachedDnsName()\n            if hasattr(dns_name, '_fqdn'):\n                delattr(dns_name, '_fqdn')\n            \n            with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n                email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n                email.encoding = 'iso-8859-1'\n                \n                # Should not crash even with empty hostname\n                message = email.message()\n                self.assertIn('Message-ID', message)\n\n    def test_mixed_ascii_unicode_hostname(self):\n        \"\"\"\n        Test hostname that contains both ASCII and Unicode characters.\n        \"\"\"\n        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"test-\u6b63\u5b97.example.com\"):\n            dns_name = CachedDnsName()\n            if hasattr(dns_name, '_fqdn'):\n                delattr(dns_name, '_fqdn')\n            \n            with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n                email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n                email.encoding = 'iso-8859-1'\n                \n                message = email.message()\n                message_id = message['Message-ID']\n                \n                # Should contain punycode for the Unicode part\n                self.assertIn('xn--', message_id)\n</patched>\n```",
  "patch": "--- a/tests/mail/test_unicode_dns.py\n+++ b/tests/mail/test_unicode_dns.py\n-# Empty if creating new file\n+import pytest\n+from unittest.mock import patch\n+from django.core.mail import EmailMessage\n+from django.core.mail.utils import CachedDnsName\n+from django.test import TestCase\n+\n+\n+class UnicodeHostnameEmailTests(TestCase):\n+    \"\"\"Test email handling with non-ASCII hostnames.\"\"\"\n+\n+    def test_unicode_hostname_with_non_unicode_encoding_fails_before_fix(self):\n+        \"\"\"\n+        Test that demonstrates the bug: non-ASCII hostname crashes \n+        when email encoding is non-unicode (iso-8859-1).\n+        This test should fail before the fix is applied.\n+        \"\"\"\n+        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"\u6b63\u5b97\"):\n+            # Clear any cached DNS name to force re-evaluation\n+            dns_name = CachedDnsName()\n+            if hasattr(dns_name, '_fqdn'):\n+                delattr(dns_name, '_fqdn')\n+            \n+            with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n+                email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n+                email.encoding = 'iso-8859-1'\n+                \n+                # This should raise UnicodeEncodeError before the fix\n+                with pytest.raises(UnicodeEncodeError):\n+                    email.message()\n+\n+    def test_unicode_hostname_with_unicode_encoding_works(self):\n+        \"\"\"\n+        Test that unicode hostname works fine with unicode encoding (utf-8).\n+        This should work both before and after the fix.\n+        \"\"\"\n+        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"\u6b63\u5b97\"):\n+            # Clear any cached DNS name to force re-evaluation\n+            dns_name = CachedDnsName()\n+            if hasattr(dns_name, '_fqdn'):\n+                delattr(dns_name, '_fqdn')\n+            \n+            with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n+                email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n+                email.encoding = 'utf-8'\n+                \n+                # This should work fine\n+                message = email.message()\n+                self.assertIn('Message-ID', message)\n+\n+    def test_unicode_hostname_converts_to_punycode_after_fix(self):\n+        \"\"\"\n+        Test that after the fix, unicode hostname is converted to punycode\n+        and works with non-unicode encoding.\n+        This test should pass after the fix is applied.\n+        \"\"\"\n+        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"\u6b63\u5b97\"):\n+            # Clear any cached DNS name to force re-evaluation\n+            dns_name = CachedDnsName()\n+            if hasattr(dns_name, '_fqdn'):\n+                delattr(dns_name, '_fqdn')\n+            \n+            with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n+                email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n+                email.encoding = 'iso-8859-1'\n+                \n+                # After fix, this should work and contain punycode\n+                message = email.message()\n+                message_id = message['Message-ID']\n+                \n+                # The Message-ID should contain the punycode version of the hostname\n+                # \"\u6b63\u5b97\" should become \"xn--p8s937b\"\n+                self.assertIn('xn--p8s937b', message_id)\n+\n+    def test_ascii_hostname_unchanged(self):\n+        \"\"\"\n+        Test that ASCII hostnames work unchanged both before and after the fix.\n+        \"\"\"\n+        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"example.com\"):\n+            # Clear any cached DNS name to force re-evaluation\n+            dns_name = CachedDnsName()\n+            if hasattr(dns_name, '_fqdn'):\n+                delattr(dns_name, '_fqdn')\n+            \n+            with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n+                email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n+                email.encoding = 'iso-8859-1'\n+                \n+                message = email.message()\n+                message_id = message['Message-ID']\n+                \n+                # ASCII hostname should remain unchanged\n+                self.assertIn('example.com', message_id)\n+\n+    def test_various_unicode_hostnames_convert_to_punycode(self):\n+        \"\"\"\n+        Test various unicode hostnames to ensure they all convert properly.\n+        \"\"\"\n+        test_cases = [\n+            (\"\u6f22\u5b57\", \"xn--p8s937b\"),  # Chinese characters\n+            (\"\u0442\u0435\u0441\u0442\", \"xn--e1afmkfd\"),  # Cyrillic characters\n+            (\"m\u00fcnchen\", \"xn--mnchen-3ya\"),  # German umlaut\n+            (\"caf\u00e9\", \"xn--caf-dma\"),  # French accent\n+        ]\n+        \n+        for unicode_hostname, expected_punycode in test_cases:\n+            with self.subTest(hostname=unicode_hostname):\n+                with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=unicode_hostname):\n+                    # Clear any cached DNS name to force re-evaluation\n+                    dns_name = CachedDnsName()\n+                    if hasattr(dns_name, '_fqdn'):\n+                        delattr(dns_name, '_fqdn')\n+                    \n+                    with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n+                        email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n+                        email.encoding = 'iso-8859-1'\n+                        \n+                        message = email.message()\n+                        message_id = message['Message-ID']\n+                        \n+                        # Should contain the punycode version\n+                        self.assertIn(expected_punycode, message_id)\n+\n+    def test_cached_dns_name_caching_behavior(self):\n+        \"\"\"\n+        Test that the CachedDnsName still caches properly after the fix.\n+        \"\"\"\n+        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"\u6b63\u5b97\") as mock_getfqdn:\n+            dns_name = CachedDnsName()\n+            \n+            # Clear any existing cache\n+            if hasattr(dns_name, '_fqdn'):\n+                delattr(dns_name, '_fqdn')\n+            \n+            # First call should invoke socket.getfqdn\n+            result1 = dns_name.get_fqdn()\n+            self.assertEqual(mock_getfqdn.call_count, 1)\n+            \n+            # Second call should use cached value\n+            result2 = dns_name.get_fqdn()\n+            self.assertEqual(mock_getfqdn.call_count, 1)  # Should still be 1\n+            \n+            # Results should be the same\n+            self.assertEqual(result1, result2)\n+\n+    def test_edge_case_empty_hostname(self):\n+        \"\"\"\n+        Test edge case where hostname is empty or None.\n+        \"\"\"\n+        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"\"):\n+            dns_name = CachedDnsName()\n+            if hasattr(dns_name, '_fqdn'):\n+                delattr(dns_name, '_fqdn')\n+            \n+            with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n+                email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n+                email.encoding = 'iso-8859-1'\n+                \n+                # Should not crash even with empty hostname\n+                message = email.message()\n+                self.assertIn('Message-ID', message)\n+\n+    def test_mixed_ascii_unicode_hostname(self):\n+        \"\"\"\n+        Test hostname that contains both ASCII and Unicode characters.\n+        \"\"\"\n+        with patch(\"django.core.mail.utils.socket.getfqdn\", return_value=\"test-\u6b63\u5b97.example.com\"):\n+            dns_name = CachedDnsName()\n+            if hasattr(dns_name, '_fqdn'):\n+                delattr(dns_name, '_fqdn')\n+            \n+            with patch(\"django.core.mail.message.DNS_NAME\", dns_name):\n+                email = EmailMessage('subject', 'body', 'from@example.com', ['to@example.com'])\n+                email.encoding = 'iso-8859-1'\n+                \n+                message = email.message()\n+                message_id = message['Message-ID']\n+                \n+                # Should contain punycode for the Unicode part\n+                self.assertIn('xn--', message_id)\n"
}