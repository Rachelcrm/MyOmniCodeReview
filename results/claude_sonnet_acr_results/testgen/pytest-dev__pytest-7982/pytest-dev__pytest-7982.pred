{
  "instance_id": "pytest-dev__pytest-7982",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>testing/test_symlink_collection.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport os\nimport pytest\nfrom pathlib import Path\n\n\nclass TestSymlinkCollection:\n    \"\"\"Test collection of symlinked directories and files.\"\"\"\n\n    def test_symlinked_directory_is_collected(self, tmp_path):\n        \"\"\"Test that symlinked directories are followed and collected.\"\"\"\n        # Create a real directory with a test file\n        real_dir = tmp_path / \"real_test_dir\"\n        real_dir.mkdir()\n        \n        test_file = real_dir / \"test_example.py\"\n        test_file.write_text(\"\"\"\ndef test_in_symlinked_dir():\n    assert True\n\"\"\")\n        \n        # Create a symlink to the directory\n        symlink_dir = tmp_path / \"symlinked_test_dir\"\n        symlink_dir.symlink_to(real_dir)\n        \n        # Run pytest collection on the symlinked directory\n        result = pytest.main([\n            \"--collect-only\", \n            \"-q\",\n            str(symlink_dir)\n        ])\n        \n        # Should successfully collect the test (exit code 0)\n        assert result == 0\n\n    def test_symlinked_directory_contains_collected_tests(self, tmp_path, pytestconfig):\n        \"\"\"Test that tests in symlinked directories are actually collected.\"\"\"\n        # Create a real directory with a test file\n        real_dir = tmp_path / \"real_test_dir\"\n        real_dir.mkdir()\n        \n        test_file = real_dir / \"test_example.py\"\n        test_file.write_text(\"\"\"\ndef test_in_symlinked_dir():\n    assert True\n\ndef test_another_in_symlinked_dir():\n    assert 1 + 1 == 2\n\"\"\")\n        \n        # Create a symlink to the directory\n        symlink_dir = tmp_path / \"symlinked_test_dir\"\n        symlink_dir.symlink_to(real_dir)\n        \n        # Use pytest's collection mechanism directly\n        from _pytest.main import Session\n        from _pytest.config import Config\n        \n        config = pytestconfig\n        session = Session.from_config(config)\n        \n        # Collect from the symlinked directory\n        collected_items = []\n        for item in session.collect([str(symlink_dir)]):\n            collected_items.extend(item.collect())\n        \n        # Should collect both test functions\n        test_names = [item.name for item in collected_items if hasattr(item, 'name')]\n        assert len([name for name in test_names if 'test_' in name]) >= 2\n\n    def test_nested_symlinked_directories(self, tmp_path):\n        \"\"\"Test that nested symlinked directories are properly collected.\"\"\"\n        # Create nested real directories\n        real_parent = tmp_path / \"real_parent\"\n        real_parent.mkdir()\n        \n        real_child = real_parent / \"child_dir\"\n        real_child.mkdir()\n        \n        # Create test files in both directories\n        parent_test = real_parent / \"test_parent.py\"\n        parent_test.write_text(\"\"\"\ndef test_parent():\n    assert True\n\"\"\")\n        \n        child_test = real_child / \"test_child.py\"\n        child_test.write_text(\"\"\"\ndef test_child():\n    assert True\n\"\"\")\n        \n        # Create symlink to parent directory\n        symlink_parent = tmp_path / \"symlinked_parent\"\n        symlink_parent.symlink_to(real_parent)\n        \n        # Run pytest collection\n        result = pytest.main([\n            \"--collect-only\",\n            \"-q\", \n            str(symlink_parent)\n        ])\n        \n        # Should successfully collect tests from both parent and child\n        assert result == 0\n\n    def test_symlinked_file_is_collected(self, tmp_path):\n        \"\"\"Test that individual symlinked test files are collected.\"\"\"\n        # Create a real test file\n        real_file = tmp_path / \"real_test.py\"\n        real_file.write_text(\"\"\"\ndef test_in_symlinked_file():\n    assert True\n\"\"\")\n        \n        # Create a symlink to the file\n        symlink_file = tmp_path / \"symlinked_test.py\"\n        symlink_file.symlink_to(real_file)\n        \n        # Run pytest collection on the symlinked file\n        result = pytest.main([\n            \"--collect-only\",\n            \"-q\",\n            str(symlink_file)\n        ])\n        \n        # Should successfully collect the test\n        assert result == 0\n\n    def test_broken_symlink_handling(self, tmp_path):\n        \"\"\"Test that broken symlinks don't break collection.\"\"\"\n        # Create a symlink to a non-existent target\n        broken_symlink = tmp_path / \"broken_symlink\"\n        broken_symlink.symlink_to(\"non_existent_target\")\n        \n        # Create a valid test file in the same directory\n        valid_test = tmp_path / \"test_valid.py\"\n        valid_test.write_text(\"\"\"\ndef test_valid():\n    assert True\n\"\"\")\n        \n        # Run pytest collection on the directory\n        result = pytest.main([\n            \"--collect-only\",\n            \"-q\",\n            str(tmp_path)\n        ])\n        \n        # Should still collect the valid test despite broken symlink\n        assert result == 0\n\n    def test_symlink_to_directory_with_conftest(self, tmp_path):\n        \"\"\"Test that symlinked directories with conftest.py work correctly.\"\"\"\n        # Create real directory with conftest.py\n        real_dir = tmp_path / \"real_dir\"\n        real_dir.mkdir()\n        \n        conftest = real_dir / \"conftest.py\"\n        conftest.write_text(\"\"\"\nimport pytest\n\n@pytest.fixture\ndef custom_fixture():\n    return \"from_conftest\"\n\"\"\")\n        \n        test_file = real_dir / \"test_with_conftest.py\"\n        test_file.write_text(\"\"\"\ndef test_uses_conftest_fixture(custom_fixture):\n    assert custom_fixture == \"from_conftest\"\n\"\"\")\n        \n        # Create symlink to directory\n        symlink_dir = tmp_path / \"symlinked_dir\"\n        symlink_dir.symlink_to(real_dir)\n        \n        # Run pytest on symlinked directory\n        result = pytest.main([\n            \"-v\",\n            str(symlink_dir)\n        ])\n        \n        # Should pass (conftest.py should be loaded)\n        assert result == 0\n\n    @pytest.mark.skipif(os.name == \"nt\", reason=\"Symlinks may not work on Windows\")\n    def test_symlink_collection_regression_from_6_1_0(self, tmp_path):\n        \"\"\"\n        Regression test for the specific issue where symlinked directories\n        stopped being collected in pytest 6.1.0 due to follow_symlinks=False.\n        \"\"\"\n        # Create the exact scenario described in the issue\n        test_dir = tmp_path / \"tests\"\n        test_dir.mkdir()\n        \n        # Create a real directory with tests outside the test directory\n        external_tests = tmp_path / \"external_tests\"\n        external_tests.mkdir()\n        \n        external_test_file = external_tests / \"test_external.py\"\n        external_test_file.write_text(\"\"\"\ndef test_external_functionality():\n    '''This test should be collected via symlink'''\n    assert True\n\ndef test_another_external():\n    '''Another test to ensure multiple tests are collected'''\n    assert 42 == 42\n\"\"\")\n        \n        # Create a symlink to the external tests directory inside the test directory\n        symlinked_tests = test_dir / \"external_via_symlink\"\n        symlinked_tests.symlink_to(external_tests)\n        \n        # Also create a regular test file to ensure normal collection still works\n        regular_test = test_dir / \"test_regular.py\"\n        regular_test.write_text(\"\"\"\ndef test_regular_functionality():\n    assert True\n\"\"\")\n        \n        # Run pytest collection on the test directory\n        # This should collect both regular tests and symlinked tests\n        result = pytest.main([\n            \"--collect-only\",\n            \"-v\",\n            str(test_dir)\n        ])\n        \n        # Collection should succeed\n        assert result == 0\n        \n        # Now run the actual tests to ensure they execute properly\n        result = pytest.main([\n            \"-v\",\n            str(test_dir)\n        ])\n        \n        # All tests should pass\n        assert result == 0\n</patched>\n```",
  "patch": "--- a/testing/test_symlink_collection.py\n+++ b/testing/test_symlink_collection.py\n-# Empty if creating new file\n+import os\n+import pytest\n+from pathlib import Path\n+\n+\n+class TestSymlinkCollection:\n+    \"\"\"Test collection of symlinked directories and files.\"\"\"\n+\n+    def test_symlinked_directory_is_collected(self, tmp_path):\n+        \"\"\"Test that symlinked directories are followed and collected.\"\"\"\n+        # Create a real directory with a test file\n+        real_dir = tmp_path / \"real_test_dir\"\n+        real_dir.mkdir()\n+        \n+        test_file = real_dir / \"test_example.py\"\n+        test_file.write_text(\"\"\"\n+def test_in_symlinked_dir():\n+    assert True\n+\"\"\")\n+        \n+        # Create a symlink to the directory\n+        symlink_dir = tmp_path / \"symlinked_test_dir\"\n+        symlink_dir.symlink_to(real_dir)\n+        \n+        # Run pytest collection on the symlinked directory\n+        result = pytest.main([\n+            \"--collect-only\", \n+            \"-q\",\n+            str(symlink_dir)\n+        ])\n+        \n+        # Should successfully collect the test (exit code 0)\n+        assert result == 0\n+\n+    def test_symlinked_directory_contains_collected_tests(self, tmp_path, pytestconfig):\n+        \"\"\"Test that tests in symlinked directories are actually collected.\"\"\"\n+        # Create a real directory with a test file\n+        real_dir = tmp_path / \"real_test_dir\"\n+        real_dir.mkdir()\n+        \n+        test_file = real_dir / \"test_example.py\"\n+        test_file.write_text(\"\"\"\n+def test_in_symlinked_dir():\n+    assert True\n+\n+def test_another_in_symlinked_dir():\n+    assert 1 + 1 == 2\n+\"\"\")\n+        \n+        # Create a symlink to the directory\n+        symlink_dir = tmp_path / \"symlinked_test_dir\"\n+        symlink_dir.symlink_to(real_dir)\n+        \n+        # Use pytest's collection mechanism directly\n+        from _pytest.main import Session\n+        from _pytest.config import Config\n+        \n+        config = pytestconfig\n+        session = Session.from_config(config)\n+        \n+        # Collect from the symlinked directory\n+        collected_items = []\n+        for item in session.collect([str(symlink_dir)]):\n+            collected_items.extend(item.collect())\n+        \n+        # Should collect both test functions\n+        test_names = [item.name for item in collected_items if hasattr(item, 'name')]\n+        assert len([name for name in test_names if 'test_' in name]) >= 2\n+\n+    def test_nested_symlinked_directories(self, tmp_path):\n+        \"\"\"Test that nested symlinked directories are properly collected.\"\"\"\n+        # Create nested real directories\n+        real_parent = tmp_path / \"real_parent\"\n+        real_parent.mkdir()\n+        \n+        real_child = real_parent / \"child_dir\"\n+        real_child.mkdir()\n+        \n+        # Create test files in both directories\n+        parent_test = real_parent / \"test_parent.py\"\n+        parent_test.write_text(\"\"\"\n+def test_parent():\n+    assert True\n+\"\"\")\n+        \n+        child_test = real_child / \"test_child.py\"\n+        child_test.write_text(\"\"\"\n+def test_child():\n+    assert True\n+\"\"\")\n+        \n+        # Create symlink to parent directory\n+        symlink_parent = tmp_path / \"symlinked_parent\"\n+        symlink_parent.symlink_to(real_parent)\n+        \n+        # Run pytest collection\n+        result = pytest.main([\n+            \"--collect-only\",\n+            \"-q\", \n+            str(symlink_parent)\n+        ])\n+        \n+        # Should successfully collect tests from both parent and child\n+        assert result == 0\n+\n+    def test_symlinked_file_is_collected(self, tmp_path):\n+        \"\"\"Test that individual symlinked test files are collected.\"\"\"\n+        # Create a real test file\n+        real_file = tmp_path / \"real_test.py\"\n+        real_file.write_text(\"\"\"\n+def test_in_symlinked_file():\n+    assert True\n+\"\"\")\n+        \n+        # Create a symlink to the file\n+        symlink_file = tmp_path / \"symlinked_test.py\"\n+        symlink_file.symlink_to(real_file)\n+        \n+        # Run pytest collection on the symlinked file\n+        result = pytest.main([\n+            \"--collect-only\",\n+            \"-q\",\n+            str(symlink_file)\n+        ])\n+        \n+        # Should successfully collect the test\n+        assert result == 0\n+\n+    def test_broken_symlink_handling(self, tmp_path):\n+        \"\"\"Test that broken symlinks don't break collection.\"\"\"\n+        # Create a symlink to a non-existent target\n+        broken_symlink = tmp_path / \"broken_symlink\"\n+        broken_symlink.symlink_to(\"non_existent_target\")\n+        \n+        # Create a valid test file in the same directory\n+        valid_test = tmp_path / \"test_valid.py\"\n+        valid_test.write_text(\"\"\"\n+def test_valid():\n+    assert True\n+\"\"\")\n+        \n+        # Run pytest collection on the directory\n+        result = pytest.main([\n+            \"--collect-only\",\n+            \"-q\",\n+            str(tmp_path)\n+        ])\n+        \n+        # Should still collect the valid test despite broken symlink\n+        assert result == 0\n+\n+    def test_symlink_to_directory_with_conftest(self, tmp_path):\n+        \"\"\"Test that symlinked directories with conftest.py work correctly.\"\"\"\n+        # Create real directory with conftest.py\n+        real_dir = tmp_path / \"real_dir\"\n+        real_dir.mkdir()\n+        \n+        conftest = real_dir / \"conftest.py\"\n+        conftest.write_text(\"\"\"\n+import pytest\n+\n+@pytest.fixture\n+def custom_fixture():\n+    return \"from_conftest\"\n+\"\"\")\n+        \n+        test_file = real_dir / \"test_with_conftest.py\"\n+        test_file.write_text(\"\"\"\n+def test_uses_conftest_fixture(custom_fixture):\n+    assert custom_fixture == \"from_conftest\"\n+\"\"\")\n+        \n+        # Create symlink to directory\n+        symlink_dir = tmp_path / \"symlinked_dir\"\n+        symlink_dir.symlink_to(real_dir)\n+        \n+        # Run pytest on symlinked directory\n+        result = pytest.main([\n+            \"-v\",\n+            str(symlink_dir)\n+        ])\n+        \n+        # Should pass (conftest.py should be loaded)\n+        assert result == 0\n+\n+    @pytest.mark.skipif(os.name == \"nt\", reason=\"Symlinks may not work on Windows\")\n+    def test_symlink_collection_regression_from_6_1_0(self, tmp_path):\n+        \"\"\"\n+        Regression test for the specific issue where symlinked directories\n+        stopped being collected in pytest 6.1.0 due to follow_symlinks=False.\n+        \"\"\"\n+        # Create the exact scenario described in the issue\n+        test_dir = tmp_path / \"tests\"\n+        test_dir.mkdir()\n+        \n+        # Create a real directory with tests outside the test directory\n+        external_tests = tmp_path / \"external_tests\"\n+        external_tests.mkdir()\n+        \n+        external_test_file = external_tests / \"test_external.py\"\n+        external_test_file.write_text(\"\"\"\n+def test_external_functionality():\n+    '''This test should be collected via symlink'''\n+    assert True\n+\n+def test_another_external():\n+    '''Another test to ensure multiple tests are collected'''\n+    assert 42 == 42\n+\"\"\")\n+        \n+        # Create a symlink to the external tests directory inside the test directory\n+        symlinked_tests = test_dir / \"external_via_symlink\"\n+        symlinked_tests.symlink_to(external_tests)\n+        \n+        # Also create a regular test file to ensure normal collection still works\n+        regular_test = test_dir / \"test_regular.py\"\n+        regular_test.write_text(\"\"\"\n+def test_regular_functionality():\n+    assert True\n+\"\"\")\n+        \n+        # Run pytest collection on the test directory\n+        # This should collect both regular tests and symlinked tests\n+        result = pytest.main([\n+            \"--collect-only\",\n+            \"-v\",\n+            str(test_dir)\n+        ])\n+        \n+        # Collection should succeed\n+        assert result == 0\n+        \n+        # Now run the actual tests to ensure they execute properly\n+        result = pytest.main([\n+            \"-v\",\n+            str(test_dir)\n+        ])\n+        \n+        # All tests should pass\n+        assert result == 0\n"
}