{
  "instance_id": "django__django-15103",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/utils_tests/test_html.py</file>\n<original>\nimport json\nfrom unittest import mock\n\nfrom django.test import SimpleTestCase\nfrom django.utils.html import (\n    conditional_escape, escape, escapejs, format_html, format_html_join,\n    html_safe, json_script, linebreaks, smart_urlquote, strip_tags, urlize,\n)\nfrom django.utils.safestring import mark_safe\n\n\nclass TestUtilsHtml(SimpleTestCase):\n\n    def test_escape(self):\n        f = escape\n        items = (\n            ('&', '&amp;'),\n            ('<', '&lt;'),\n            ('>', '&gt;'),\n            ('\"', '&quot;'),\n            (\"'\", '&#x27;'),\n        )\n        # Substitution patterns for testing the above items.\n        patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n        for value, output in items:\n            for pattern in patterns:\n                with self.subTest(value=value, output=output, pattern=pattern):\n                    self.assertEqual(f(pattern % value), pattern % output)\n        self.assertEqual(f(\"<<invalid>>\"), \"&lt;&lt;invalid&gt;&gt;\")\n        # Case insensitive.\n        self.assertEqual(f(\"&Aacute;\"), \"&amp;Aacute;\")\n\n    def test_json_script(self):\n        tests = [\n            # Basic usage\n            (\n                {'key': 'value'},\n                'test-id',\n                '<script id=\"test-id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n            ),\n            # Escaping\n            (\n                {'key': '</script><script>alert(\"XSS\")</script>'},\n                'test-id',\n                '<script id=\"test-id\" type=\"application/json\">'\n                '{\"key\": \"\\\\u003C/script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\\\u0022XSS\\\\u0022)\\\\u003C/script\\\\u003E\"}'\n                '</script>'\n            ),\n            # Non-ASCII\n            (\n                {'key': '\u00f1o\u00f1o'},\n                'test-id',\n                '<script id=\"test-id\" type=\"application/json\">{\"key\": \"\u00f1o\u00f1o\"}</script>'\n            ),\n        ]\n        for data, element_id, expected in tests:\n            with self.subTest(data=data, element_id=element_id):\n                self.assertEqual(json_script(data, element_id), expected)\n\n    def test_json_script_without_id(self):\n        \"\"\"\n        json_script() should work without an element_id.\n        \"\"\"\n        tests = [\n            # Basic usage without ID\n            (\n                {'key': 'value'},\n                '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n            ),\n            # Escaping without ID\n            (\n                {'key': '</script><script>alert(\"XSS\")</script>'},\n                '<script type=\"application/json\">'\n                '{\"key\": \"\\\\u003C/script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\\\u0022XSS\\\\u0022)\\\\u003C/script\\\\u003E\"}'\n                '</script>'\n            ),\n            # Non-ASCII without ID\n            (\n                {'key': '\u00f1o\u00f1o'},\n                '<script type=\"application/json\">{\"key\": \"\u00f1o\u00f1o\"}</script>'\n            ),\n            # Empty dict without ID\n            (\n                {},\n                '<script type=\"application/json\">{}</script>'\n            ),\n            # List without ID\n            (\n                [1, 2, 3],\n                '<script type=\"application/json\">[1, 2, 3]</script>'\n            ),\n        ]\n        for data, expected in tests:\n            with self.subTest(data=data):\n                self.assertEqual(json_script(data), expected)\n\n    def test_json_script_with_none_id(self):\n        \"\"\"\n        json_script() should work when element_id is explicitly None.\n        \"\"\"\n        data = {'key': 'value'}\n        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n        self.assertEqual(json_script(data, None), expected)\n\n    def test_json_script_with_empty_string_id(self):\n        \"\"\"\n        json_script() should work when element_id is an empty string.\n        \"\"\"\n        data = {'key': 'value'}\n        expected = '<script id=\"\" type=\"application/json\">{\"key\": \"value\"}</script>'\n        self.assertEqual(json_script(data, \"\"), expected)\n\n    def test_json_script_backwards_compatibility(self):\n        \"\"\"\n        json_script() should maintain backwards compatibility when element_id is provided.\n        \"\"\"\n        data = {'key': 'value'}\n        element_id = 'my-id'\n        expected = '<script id=\"my-id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n        self.assertEqual(json_script(data, element_id), expected)\n</original>\n<patched>\nimport json\nfrom unittest import mock\n\nfrom django.test import SimpleTestCase\nfrom django.utils.html import (\n    conditional_escape, escape, escapejs, format_html, format_html_join,\n    html_safe, json_script, linebreaks, smart_urlquote, strip_tags, urlize,\n)\nfrom django.utils.safestring import mark_safe\n\n\nclass TestUtilsHtml(SimpleTestCase):\n\n    def test_escape(self):\n        f = escape\n        items = (\n            ('&', '&amp;'),\n            ('<', '&lt;'),\n            ('>', '&gt;'),\n            ('\"', '&quot;'),\n            (\"'\", '&#x27;'),\n        )\n        # Substitution patterns for testing the above items.\n        patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n        for value, output in items:\n            for pattern in patterns:\n                with self.subTest(value=value, output=output, pattern=pattern):\n                    self.assertEqual(f(pattern % value), pattern % output)\n        self.assertEqual(f(\"<<invalid>>\"), \"&lt;&lt;invalid&gt;&gt;\")\n        # Case insensitive.\n        self.assertEqual(f(\"&Aacute;\"), \"&amp;Aacute;\")\n\n    def test_json_script(self):\n        tests = [\n            # Basic usage\n            (\n                {'key': 'value'},\n                'test-id',\n                '<script id=\"test-id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n            ),\n            # Escaping\n            (\n                {'key': '</script><script>alert(\"XSS\")</script>'},\n                'test-id',\n                '<script id=\"test-id\" type=\"application/json\">'\n                '{\"key\": \"\\\\u003C/script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\\\u0022XSS\\\\u0022)\\\\u003C/script\\\\u003E\"}'\n                '</script>'\n            ),\n            # Non-ASCII\n            (\n                {'key': '\u00f1o\u00f1o'},\n                'test-id',\n                '<script id=\"test-id\" type=\"application/json\">{\"key\": \"\u00f1o\u00f1o\"}</script>'\n            ),\n        ]\n        for data, element_id, expected in tests:\n            with self.subTest(data=data, element_id=element_id):\n                self.assertEqual(json_script(data, element_id), expected)\n\n    def test_json_script_without_id(self):\n        \"\"\"\n        json_script() should work without an element_id.\n        \"\"\"\n        tests = [\n            # Basic usage without ID\n            (\n                {'key': 'value'},\n                '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n            ),\n            # Escaping without ID\n            (\n                {'key': '</script><script>alert(\"XSS\")</script>'},\n                '<script type=\"application/json\">'\n                '{\"key\": \"\\\\u003C/script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\\\u0022XSS\\\\u0022)\\\\u003C/script\\\\u003E\"}'\n                '</script>'\n            ),\n            # Non-ASCII without ID\n            (\n                {'key': '\u00f1o\u00f1o'},\n                '<script type=\"application/json\">{\"key\": \"\u00f1o\u00f1o\"}</script>'\n            ),\n            # Empty dict without ID\n            (\n                {},\n                '<script type=\"application/json\">{}</script>'\n            ),\n            # List without ID\n            (\n                [1, 2, 3],\n                '<script type=\"application/json\">[1, 2, 3]</script>'\n            ),\n        ]\n        for data, expected in tests:\n            with self.subTest(data=data):\n                self.assertEqual(json_script(data), expected)\n\n    def test_json_script_with_none_id(self):\n        \"\"\"\n        json_script() should work when element_id is explicitly None.\n        \"\"\"\n        data = {'key': 'value'}\n        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n        self.assertEqual(json_script(data, None), expected)\n\n    def test_json_script_with_empty_string_id(self):\n        \"\"\"\n        json_script() should work when element_id is an empty string.\n        \"\"\"\n        data = {'key': 'value'}\n        expected = '<script id=\"\" type=\"application/json\">{\"key\": \"value\"}</script>'\n        self.assertEqual(json_script(data, \"\"), expected)\n\n    def test_json_script_backwards_compatibility(self):\n        \"\"\"\n        json_script() should maintain backwards compatibility when element_id is provided.\n        \"\"\"\n        data = {'key': 'value'}\n        element_id = 'my-id'\n        expected = '<script id=\"my-id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n        self.assertEqual(json_script(data, element_id), expected)\n\n    def test_json_script_optional_element_id_feature(self):\n        \"\"\"\n        Test that json_script works with optional element_id parameter.\n        This test should fail before the fix and pass after the fix.\n        \"\"\"\n        # Test case from the issue description - using json_script inside a template\n        # where no id is needed for reference\n        data = {'message': 'Hello World', 'count': 42}\n        \n        # This should work without requiring an element_id\n        result_without_id = json_script(data)\n        expected_without_id = '<script type=\"application/json\">{\"message\": \"Hello World\", \"count\": 42}</script>'\n        self.assertEqual(result_without_id, expected_without_id)\n        \n        # Verify that providing an id still works (backwards compatibility)\n        result_with_id = json_script(data, 'my-data')\n        expected_with_id = '<script id=\"my-data\" type=\"application/json\">{\"message\": \"Hello World\", \"count\": 42}</script>'\n        self.assertEqual(result_with_id, expected_with_id)\n\n    def test_json_script_complex_data_without_id(self):\n        \"\"\"\n        Test json_script with complex data structures when no element_id is provided.\n        \"\"\"\n        complex_data = {\n            'users': [\n                {'name': 'Alice', 'age': 30},\n                {'name': 'Bob', 'age': 25}\n            ],\n            'settings': {\n                'theme': 'dark',\n                'notifications': True\n            },\n            'special_chars': '<>&\"\\'',\n            'unicode': 'caf\u00e9'\n        }\n        \n        result = json_script(complex_data)\n        \n        # Verify the result contains properly escaped JSON without an id attribute\n        self.assertIn('<script type=\"application/json\">', result)\n        self.assertNotIn('id=', result)\n        self.assertIn('\\\\u003C\\\\u003E\\\\u0026\\\\u0022\\\\u0027', result)  # Escaped special chars\n        self.assertIn('caf\u00e9', result)  # Unicode should be preserved\n        self.assertIn('\"users\":', result)\n        self.assertIn('\"settings\":', result)\n</patched>\n```\n\n```\n<file>tests/template_tests/filter_tests/test_json_script.py</file>\n<original>\nfrom django.template.defaultfilters import json_script\nfrom django.test import SimpleTestCase\nfrom django.utils.safestring import mark_safe\n\n\nclass JsonScriptTests(SimpleTestCase):\n\n    def test_basic(self):\n        self.assertEqual(\n            json_script({'key': 'value'}, 'test_id'),\n            mark_safe('<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>')\n        )\n\n    def test_without_id(self):\n        self.assertEqual(\n            json_script({'key': 'value'}, None),\n            mark_safe('<script type=\"application/json\">{\"key\": \"value\"}</script>')\n        )\n\n    def test_empty_string_id(self):\n        self.assertEqual(\n            json_script({'key': 'value'}, ''),\n            mark_safe('<script id=\"\" type=\"application/json\">{\"key\": \"value\"}</script>')\n        )\n</original>\n<patched>\nfrom django.template.defaultfilters import json_script\nfrom django.test import SimpleTestCase\nfrom django.utils.safestring import mark_safe\n\n\nclass JsonScriptTests(SimpleTestCase):\n\n    def test_basic(self):\n        self.assertEqual(\n            json_script({'key': 'value'}, 'test_id'),\n            mark_safe('<script id=\"test_id\" type=\"application/json\">{\"key\": \"value\"}</script>')\n        )\n\n    def test_without_id(self):\n        self.assertEqual(\n            json_script({'key': 'value'}, None),\n            mark_safe('<script type=\"application/json\">{\"key\": \"value\"}</script>')\n        )\n\n    def test_empty_string_id(self):\n        self.assertEqual(\n            json_script({'key': 'value'}, ''),\n            mark_safe('<script id=\"\" type=\"application/json\">{\"key\": \"value\"}</script>')\n        )\n\n    def test_optional_element_id_parameter(self):\n        \"\"\"\n        Test that the element_id parameter is optional in the template filter.\n        This test should fail before the fix and pass after the fix.\n        \"\"\"\n        # Test calling json_script with only the value parameter\n        data = {'template_data': 'test_value'}\n        result = json_script(data)\n        expected = mark_safe('<script type=\"application/json\">{\"template_data\": \"test_value\"}</script>')\n        self.assertEqual(result, expected)\n\n    def test_template_filter_backwards_compatibility(self):\n        \"\"\"\n        Ensure the template filter maintains backwards compatibility when element_id is provided.\n        \"\"\"\n        data = {'key': 'value'}\n        element_id = 'filter-test-id'\n        result = json_script(data, element_id)\n        expected = mark_safe('<script id=\"filter-test-id\" type=\"application/json\">{\"key\": \"value\"}</script>')\n        self.assertEqual(result, expected)\n\n    def test_template_filter_with_complex_data_no_id(self):\n        \"\"\"\n        Test template filter with complex data when no element_id is provided.\n        \"\"\"\n        data = {\n            'items': ['item1', 'item2', 'item3'],\n            'config': {'debug': True, 'version': '1.0'},\n            'message': 'Template test'\n        }\n        result = json_script(data)\n        \n        # Verify the result is properly formatted without an id\n        self.assertIn('<script type=\"application/json\">', str(result))\n        self.assertNotIn('id=', str(result))\n        self.assertIn('\"items\":', str(result))\n        self.assertIn('\"config\":', str(result))\n        self.assertIn('\"message\":', str(result))\n\n    def test_template_filter_escaping_without_id(self):\n        \"\"\"\n        Test that the template filter properly escapes dangerous content when no id is provided.\n        \"\"\"\n        dangerous_data = {\n            'script_tag': '",
  "patch": "--- a/tests/utils_tests/test_html.py\n+++ b/tests/utils_tests/test_html.py\n-import json\n-from unittest import mock\n-\n-from django.test import SimpleTestCase\n-from django.utils.html import (\n-    conditional_escape, escape, escapejs, format_html, format_html_join,\n-    html_safe, json_script, linebreaks, smart_urlquote, strip_tags, urlize,\n-)\n-from django.utils.safestring import mark_safe\n-\n-\n-class TestUtilsHtml(SimpleTestCase):\n-\n-    def test_escape(self):\n-        f = escape\n-        items = (\n-            ('&', '&amp;'),\n-            ('<', '&lt;'),\n-            ('>', '&gt;'),\n-            ('\"', '&quot;'),\n-            (\"'\", '&#x27;'),\n-        )\n-        # Substitution patterns for testing the above items.\n-        patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n-        for value, output in items:\n-            for pattern in patterns:\n-                with self.subTest(value=value, output=output, pattern=pattern):\n-                    self.assertEqual(f(pattern % value), pattern % output)\n-        self.assertEqual(f(\"<<invalid>>\"), \"&lt;&lt;invalid&gt;&gt;\")\n-        # Case insensitive.\n-        self.assertEqual(f(\"&Aacute;\"), \"&amp;Aacute;\")\n-\n-    def test_json_script(self):\n-        tests = [\n-            # Basic usage\n-            (\n-                {'key': 'value'},\n-                'test-id',\n-                '<script id=\"test-id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n-            ),\n-            # Escaping\n-            (\n-                {'key': '</script><script>alert(\"XSS\")</script>'},\n-                'test-id',\n-                '<script id=\"test-id\" type=\"application/json\">'\n-                '{\"key\": \"\\\\u003C/script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\\\u0022XSS\\\\u0022)\\\\u003C/script\\\\u003E\"}'\n-                '</script>'\n-            ),\n-            # Non-ASCII\n-            (\n-                {'key': '\u00f1o\u00f1o'},\n-                'test-id',\n-                '<script id=\"test-id\" type=\"application/json\">{\"key\": \"\u00f1o\u00f1o\"}</script>'\n-            ),\n-        ]\n-        for data, element_id, expected in tests:\n-            with self.subTest(data=data, element_id=element_id):\n-                self.assertEqual(json_script(data, element_id), expected)\n-\n-    def test_json_script_without_id(self):\n-        \"\"\"\n-        json_script() should work without an element_id.\n-        \"\"\"\n-        tests = [\n-            # Basic usage without ID\n-            (\n-                {'key': 'value'},\n-                '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n-            ),\n-            # Escaping without ID\n-            (\n-                {'key': '</script><script>alert(\"XSS\")</script>'},\n-                '<script type=\"application/json\">'\n-                '{\"key\": \"\\\\u003C/script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\\\u0022XSS\\\\u0022)\\\\u003C/script\\\\u003E\"}'\n-                '</script>'\n-            ),\n-            # Non-ASCII without ID\n-            (\n-                {'key': '\u00f1o\u00f1o'},\n-                '<script type=\"application/json\">{\"key\": \"\u00f1o\u00f1o\"}</script>'\n-            ),\n-            # Empty dict without ID\n-            (\n-                {},\n-                '<script type=\"application/json\">{}</script>'\n-            ),\n-            # List without ID\n-            (\n-                [1, 2, 3],\n-                '<script type=\"application/json\">[1, 2, 3]</script>'\n-            ),\n-        ]\n-        for data, expected in tests:\n-            with self.subTest(data=data):\n-                self.assertEqual(json_script(data), expected)\n-\n-    def test_json_script_with_none_id(self):\n-        \"\"\"\n-        json_script() should work when element_id is explicitly None.\n-        \"\"\"\n-        data = {'key': 'value'}\n-        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n-        self.assertEqual(json_script(data, None), expected)\n-\n-    def test_json_script_with_empty_string_id(self):\n-        \"\"\"\n-        json_script() should work when element_id is an empty string.\n-        \"\"\"\n-        data = {'key': 'value'}\n-        expected = '<script id=\"\" type=\"application/json\">{\"key\": \"value\"}</script>'\n-        self.assertEqual(json_script(data, \"\"), expected)\n-\n-    def test_json_script_backwards_compatibility(self):\n-        \"\"\"\n-        json_script() should maintain backwards compatibility when element_id is provided.\n-        \"\"\"\n-        data = {'key': 'value'}\n-        element_id = 'my-id'\n-        expected = '<script id=\"my-id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n-        self.assertEqual(json_script(data, element_id), expected)\n+import json\n+from unittest import mock\n+\n+from django.test import SimpleTestCase\n+from django.utils.html import (\n+    conditional_escape, escape, escapejs, format_html, format_html_join,\n+    html_safe, json_script, linebreaks, smart_urlquote, strip_tags, urlize,\n+)\n+from django.utils.safestring import mark_safe\n+\n+\n+class TestUtilsHtml(SimpleTestCase):\n+\n+    def test_escape(self):\n+        f = escape\n+        items = (\n+            ('&', '&amp;'),\n+            ('<', '&lt;'),\n+            ('>', '&gt;'),\n+            ('\"', '&quot;'),\n+            (\"'\", '&#x27;'),\n+        )\n+        # Substitution patterns for testing the above items.\n+        patterns = (\"%s\", \"asdf%sfdsa\", \"%s1\", \"1%sb\")\n+        for value, output in items:\n+            for pattern in patterns:\n+                with self.subTest(value=value, output=output, pattern=pattern):\n+                    self.assertEqual(f(pattern % value), pattern % output)\n+        self.assertEqual(f(\"<<invalid>>\"), \"&lt;&lt;invalid&gt;&gt;\")\n+        # Case insensitive.\n+        self.assertEqual(f(\"&Aacute;\"), \"&amp;Aacute;\")\n+\n+    def test_json_script(self):\n+        tests = [\n+            # Basic usage\n+            (\n+                {'key': 'value'},\n+                'test-id',\n+                '<script id=\"test-id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n+            ),\n+            # Escaping\n+            (\n+                {'key': '</script><script>alert(\"XSS\")</script>'},\n+                'test-id',\n+                '<script id=\"test-id\" type=\"application/json\">'\n+                '{\"key\": \"\\\\u003C/script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\\\u0022XSS\\\\u0022)\\\\u003C/script\\\\u003E\"}'\n+                '</script>'\n+            ),\n+            # Non-ASCII\n+            (\n+                {'key': '\u00f1o\u00f1o'},\n+                'test-id',\n+                '<script id=\"test-id\" type=\"application/json\">{\"key\": \"\u00f1o\u00f1o\"}</script>'\n+            ),\n+        ]\n+        for data, element_id, expected in tests:\n+            with self.subTest(data=data, element_id=element_id):\n+                self.assertEqual(json_script(data, element_id), expected)\n+\n+    def test_json_script_without_id(self):\n+        \"\"\"\n+        json_script() should work without an element_id.\n+        \"\"\"\n+        tests = [\n+            # Basic usage without ID\n+            (\n+                {'key': 'value'},\n+                '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+            ),\n+            # Escaping without ID\n+            (\n+                {'key': '</script><script>alert(\"XSS\")</script>'},\n+                '<script type=\"application/json\">'\n+                '{\"key\": \"\\\\u003C/script\\\\u003E\\\\u003Cscript\\\\u003Ealert(\\\\u0022XSS\\\\u0022)\\\\u003C/script\\\\u003E\"}'\n+                '</script>'\n+            ),\n+            # Non-ASCII without ID\n+            (\n+                {'key': '\u00f1o\u00f1o'},\n+                '<script type=\"application/json\">{\"key\": \"\u00f1o\u00f1o\"}</script>'\n+            ),\n+            # Empty dict without ID\n+            (\n+                {},\n+                '<script type=\"application/json\">{}</script>'\n+            ),\n+            # List without ID\n+            (\n+                [1, 2, 3],\n+                '<script type=\"application/json\">[1, 2, 3]</script>'\n+            ),\n+        ]\n+        for data, expected in tests:\n+            with self.subTest(data=data):\n+                self.assertEqual(json_script(data), expected)\n+\n+    def test_json_script_with_none_id(self):\n+        \"\"\"\n+        json_script() should work when element_id is explicitly None.\n+        \"\"\"\n+        data = {'key': 'value'}\n+        expected = '<script type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertEqual(json_script(data, None), expected)\n+\n+    def test_json_script_with_empty_string_id(self):\n+        \"\"\"\n+        json_script() should work when element_id is an empty string.\n+        \"\"\"\n+        data = {'key': 'value'}\n+        expected = '<script id=\"\" type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertEqual(json_script(data, \"\"), expected)\n+\n+    def test_json_script_backwards_compatibility(self):\n+        \"\"\"\n+        json_script() should maintain backwards compatibility when element_id is provided.\n+        \"\"\"\n+        data = {'key': 'value'}\n+        element_id = 'my-id'\n+        expected = '<script id=\"my-id\" type=\"application/json\">{\"key\": \"value\"}</script>'\n+        self.assertEqual(json_script(data, element_id), expected)\n+\n+    def test_json_script_optional_element_id_feature(self):\n+        \"\"\"\n+        Test that json_script works with optional element_id parameter.\n+        This test should fail before the fix and pass after the fix.\n+        \"\"\"\n+        # Test case from the issue description - using json_script inside a template\n+        # where no id is needed for reference\n+        data = {'message': 'Hello World', 'count': 42}\n+        \n+        # This should work without requiring an element_id\n+        result_without_id = json_script(data)\n+        expected_without_id = '<script type=\"application/json\">{\"message\": \"Hello World\", \"count\": 42}</script>'\n+        self.assertEqual(result_without_id, expected_without_id)\n+        \n+        # Verify that providing an id still works (backwards compatibility)\n+        result_with_id = json_script(data, 'my-data')\n+        expected_with_id = '<script id=\"my-data\" type=\"application/json\">{\"message\": \"Hello World\", \"count\": 42}</script>'\n+        self.assertEqual(result_with_id, expected_with_id)\n+\n+    def test_json_script_complex_data_without_id(self):\n+        \"\"\"\n+        Test json_script with complex data structures when no element_id is provided.\n+        \"\"\"\n+        complex_data = {\n+            'users': [\n+                {'name': 'Alice', 'age': 30},\n+                {'name': 'Bob', 'age': 25}\n+            ],\n+            'settings': {\n+                'theme': 'dark',\n+                'notifications': True\n+            },\n+            'special_chars': '<>&\"\\'',\n+            'unicode': 'caf\u00e9'\n+        }\n+        \n+        result = json_script(complex_data)\n+        \n+        # Verify the result contains properly escaped JSON without an id attribute\n+        self.assertIn('<script type=\"application/json\">', result)\n+        self.assertNotIn('id=', result)\n+        self.assertIn('\\\\u003C\\\\u003E\\\\u0026\\\\u0022\\\\u0027', result)  # Escaped special chars\n+        self.assertIn('caf\u00e9', result)  # Unicode should be preserved\n+        self.assertIn('\"users\":', result)\n+        self.assertIn('\"settings\":', result)\n"
}