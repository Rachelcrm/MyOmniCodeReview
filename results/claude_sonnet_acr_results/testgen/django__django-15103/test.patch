--- a/tests/utils_tests/test_html.py
+++ b/tests/utils_tests/test_html.py
-import json
-from unittest import mock
-
-from django.test import SimpleTestCase
-from django.utils.html import (
-    conditional_escape, escape, escapejs, format_html, format_html_join,
-    html_safe, json_script, linebreaks, smart_urlquote, strip_tags, urlize,
-)
-from django.utils.safestring import mark_safe
-
-
-class TestUtilsHtml(SimpleTestCase):
-
-    def test_escape(self):
-        f = escape
-        items = (
-            ('&', '&amp;'),
-            ('<', '&lt;'),
-            ('>', '&gt;'),
-            ('"', '&quot;'),
-            ("'", '&#x27;'),
-        )
-        # Substitution patterns for testing the above items.
-        patterns = ("%s", "asdf%sfdsa", "%s1", "1%sb")
-        for value, output in items:
-            for pattern in patterns:
-                with self.subTest(value=value, output=output, pattern=pattern):
-                    self.assertEqual(f(pattern % value), pattern % output)
-        self.assertEqual(f("<<invalid>>"), "&lt;&lt;invalid&gt;&gt;")
-        # Case insensitive.
-        self.assertEqual(f("&Aacute;"), "&amp;Aacute;")
-
-    def test_json_script(self):
-        tests = [
-            # Basic usage
-            (
-                {'key': 'value'},
-                'test-id',
-                '<script id="test-id" type="application/json">{"key": "value"}</script>'
-            ),
-            # Escaping
-            (
-                {'key': '</script><script>alert("XSS")</script>'},
-                'test-id',
-                '<script id="test-id" type="application/json">'
-                '{"key": "\\u003C/script\\u003E\\u003Cscript\\u003Ealert(\\u0022XSS\\u0022)\\u003C/script\\u003E"}'
-                '</script>'
-            ),
-            # Non-ASCII
-            (
-                {'key': 'ñoño'},
-                'test-id',
-                '<script id="test-id" type="application/json">{"key": "ñoño"}</script>'
-            ),
-        ]
-        for data, element_id, expected in tests:
-            with self.subTest(data=data, element_id=element_id):
-                self.assertEqual(json_script(data, element_id), expected)
-
-    def test_json_script_without_id(self):
-        """
-        json_script() should work without an element_id.
-        """
-        tests = [
-            # Basic usage without ID
-            (
-                {'key': 'value'},
-                '<script type="application/json">{"key": "value"}</script>'
-            ),
-            # Escaping without ID
-            (
-                {'key': '</script><script>alert("XSS")</script>'},
-                '<script type="application/json">'
-                '{"key": "\\u003C/script\\u003E\\u003Cscript\\u003Ealert(\\u0022XSS\\u0022)\\u003C/script\\u003E"}'
-                '</script>'
-            ),
-            # Non-ASCII without ID
-            (
-                {'key': 'ñoño'},
-                '<script type="application/json">{"key": "ñoño"}</script>'
-            ),
-            # Empty dict without ID
-            (
-                {},
-                '<script type="application/json">{}</script>'
-            ),
-            # List without ID
-            (
-                [1, 2, 3],
-                '<script type="application/json">[1, 2, 3]</script>'
-            ),
-        ]
-        for data, expected in tests:
-            with self.subTest(data=data):
-                self.assertEqual(json_script(data), expected)
-
-    def test_json_script_with_none_id(self):
-        """
-        json_script() should work when element_id is explicitly None.
-        """
-        data = {'key': 'value'}
-        expected = '<script type="application/json">{"key": "value"}</script>'
-        self.assertEqual(json_script(data, None), expected)
-
-    def test_json_script_with_empty_string_id(self):
-        """
-        json_script() should work when element_id is an empty string.
-        """
-        data = {'key': 'value'}
-        expected = '<script id="" type="application/json">{"key": "value"}</script>'
-        self.assertEqual(json_script(data, ""), expected)
-
-    def test_json_script_backwards_compatibility(self):
-        """
-        json_script() should maintain backwards compatibility when element_id is provided.
-        """
-        data = {'key': 'value'}
-        element_id = 'my-id'
-        expected = '<script id="my-id" type="application/json">{"key": "value"}</script>'
-        self.assertEqual(json_script(data, element_id), expected)
+import json
+from unittest import mock
+
+from django.test import SimpleTestCase
+from django.utils.html import (
+    conditional_escape, escape, escapejs, format_html, format_html_join,
+    html_safe, json_script, linebreaks, smart_urlquote, strip_tags, urlize,
+)
+from django.utils.safestring import mark_safe
+
+
+class TestUtilsHtml(SimpleTestCase):
+
+    def test_escape(self):
+        f = escape
+        items = (
+            ('&', '&amp;'),
+            ('<', '&lt;'),
+            ('>', '&gt;'),
+            ('"', '&quot;'),
+            ("'", '&#x27;'),
+        )
+        # Substitution patterns for testing the above items.
+        patterns = ("%s", "asdf%sfdsa", "%s1", "1%sb")
+        for value, output in items:
+            for pattern in patterns:
+                with self.subTest(value=value, output=output, pattern=pattern):
+                    self.assertEqual(f(pattern % value), pattern % output)
+        self.assertEqual(f("<<invalid>>"), "&lt;&lt;invalid&gt;&gt;")
+        # Case insensitive.
+        self.assertEqual(f("&Aacute;"), "&amp;Aacute;")
+
+    def test_json_script(self):
+        tests = [
+            # Basic usage
+            (
+                {'key': 'value'},
+                'test-id',
+                '<script id="test-id" type="application/json">{"key": "value"}</script>'
+            ),
+            # Escaping
+            (
+                {'key': '</script><script>alert("XSS")</script>'},
+                'test-id',
+                '<script id="test-id" type="application/json">'
+                '{"key": "\\u003C/script\\u003E\\u003Cscript\\u003Ealert(\\u0022XSS\\u0022)\\u003C/script\\u003E"}'
+                '</script>'
+            ),
+            # Non-ASCII
+            (
+                {'key': 'ñoño'},
+                'test-id',
+                '<script id="test-id" type="application/json">{"key": "ñoño"}</script>'
+            ),
+        ]
+        for data, element_id, expected in tests:
+            with self.subTest(data=data, element_id=element_id):
+                self.assertEqual(json_script(data, element_id), expected)
+
+    def test_json_script_without_id(self):
+        """
+        json_script() should work without an element_id.
+        """
+        tests = [
+            # Basic usage without ID
+            (
+                {'key': 'value'},
+                '<script type="application/json">{"key": "value"}</script>'
+            ),
+            # Escaping without ID
+            (
+                {'key': '</script><script>alert("XSS")</script>'},
+                '<script type="application/json">'
+                '{"key": "\\u003C/script\\u003E\\u003Cscript\\u003Ealert(\\u0022XSS\\u0022)\\u003C/script\\u003E"}'
+                '</script>'
+            ),
+            # Non-ASCII without ID
+            (
+                {'key': 'ñoño'},
+                '<script type="application/json">{"key": "ñoño"}</script>'
+            ),
+            # Empty dict without ID
+            (
+                {},
+                '<script type="application/json">{}</script>'
+            ),
+            # List without ID
+            (
+                [1, 2, 3],
+                '<script type="application/json">[1, 2, 3]</script>'
+            ),
+        ]
+        for data, expected in tests:
+            with self.subTest(data=data):
+                self.assertEqual(json_script(data), expected)
+
+    def test_json_script_with_none_id(self):
+        """
+        json_script() should work when element_id is explicitly None.
+        """
+        data = {'key': 'value'}
+        expected = '<script type="application/json">{"key": "value"}</script>'
+        self.assertEqual(json_script(data, None), expected)
+
+    def test_json_script_with_empty_string_id(self):
+        """
+        json_script() should work when element_id is an empty string.
+        """
+        data = {'key': 'value'}
+        expected = '<script id="" type="application/json">{"key": "value"}</script>'
+        self.assertEqual(json_script(data, ""), expected)
+
+    def test_json_script_backwards_compatibility(self):
+        """
+        json_script() should maintain backwards compatibility when element_id is provided.
+        """
+        data = {'key': 'value'}
+        element_id = 'my-id'
+        expected = '<script id="my-id" type="application/json">{"key": "value"}</script>'
+        self.assertEqual(json_script(data, element_id), expected)
+
+    def test_json_script_optional_element_id_feature(self):
+        """
+        Test that json_script works with optional element_id parameter.
+        This test should fail before the fix and pass after the fix.
+        """
+        # Test case from the issue description - using json_script inside a template
+        # where no id is needed for reference
+        data = {'message': 'Hello World', 'count': 42}
+        
+        # This should work without requiring an element_id
+        result_without_id = json_script(data)
+        expected_without_id = '<script type="application/json">{"message": "Hello World", "count": 42}</script>'
+        self.assertEqual(result_without_id, expected_without_id)
+        
+        # Verify that providing an id still works (backwards compatibility)
+        result_with_id = json_script(data, 'my-data')
+        expected_with_id = '<script id="my-data" type="application/json">{"message": "Hello World", "count": 42}</script>'
+        self.assertEqual(result_with_id, expected_with_id)
+
+    def test_json_script_complex_data_without_id(self):
+        """
+        Test json_script with complex data structures when no element_id is provided.
+        """
+        complex_data = {
+            'users': [
+                {'name': 'Alice', 'age': 30},
+                {'name': 'Bob', 'age': 25}
+            ],
+            'settings': {
+                'theme': 'dark',
+                'notifications': True
+            },
+            'special_chars': '<>&"\'',
+            'unicode': 'café'
+        }
+        
+        result = json_script(complex_data)
+        
+        # Verify the result contains properly escaped JSON without an id attribute
+        self.assertIn('<script type="application/json">', result)
+        self.assertNotIn('id=', result)
+        self.assertIn('\\u003C\\u003E\\u0026\\u0022\\u0027', result)  # Escaped special chars
+        self.assertIn('café', result)  # Unicode should be preserved
+        self.assertIn('"users":', result)
+        self.assertIn('"settings":', result)
