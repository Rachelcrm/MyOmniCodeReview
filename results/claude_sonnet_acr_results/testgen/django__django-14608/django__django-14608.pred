{
  "instance_id": "django__django-14608",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/forms_tests/test_formsets.py</file>\n<original>\n# This will be added to the existing test file\n</original>\n<patched>\nimport pytest\nfrom django.forms import Form, CharField, ValidationError\nfrom django.forms.formsets import formset_factory\nfrom django.forms.utils import ErrorList\nfrom django.test import TestCase\n\n\nclass NonFormErrorCSSClassTests(TestCase):\n    \"\"\"Test that FormSets add 'nonform' CSS class for non-form errors.\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test forms and formsets.\"\"\"\n        class TestForm(Form):\n            name = CharField()\n        \n        self.TestFormSet = formset_factory(TestForm, extra=1)\n    \n    def test_non_form_errors_has_nonform_css_class_when_empty(self):\n        \"\"\"Test that non_form_errors returns ErrorList with 'nonform' CSS class when no errors exist.\"\"\"\n        formset = self.TestFormSet()\n        non_form_errors = formset.non_form_errors()\n        \n        # Should return an ErrorList with 'nonform' CSS class even when empty\n        self.assertIsInstance(non_form_errors, ErrorList)\n        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n        self.assertEqual(len(non_form_errors), 0)\n    \n    def test_non_form_errors_has_nonform_css_class_with_validation_errors(self):\n        \"\"\"Test that non_form_errors has 'nonform' CSS class when validation errors exist.\"\"\"\n        class CustomFormSet(self.TestFormSet):\n            def clean(self):\n                super().clean()\n                raise ValidationError(\"This is a non-form error\")\n        \n        # Create formset with valid form data but formset-level validation error\n        formset = CustomFormSet({\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '0',\n            'form-MIN_NUM_FORMS': '0',\n            'form-MAX_NUM_FORMS': '1000',\n            'form-0-name': 'test'\n        })\n        \n        # Trigger validation\n        self.assertFalse(formset.is_valid())\n        \n        non_form_errors = formset.non_form_errors()\n        self.assertIsInstance(non_form_errors, ErrorList)\n        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n        self.assertEqual(len(non_form_errors), 1)\n        self.assertIn(\"This is a non-form error\", str(non_form_errors))\n    \n    def test_non_form_errors_has_nonform_css_class_with_management_form_errors(self):\n        \"\"\"Test that non_form_errors has 'nonform' CSS class when management form errors exist.\"\"\"\n        # Create formset with invalid management form data\n        formset = self.TestFormSet({\n            'form-TOTAL_FORMS': 'invalid',  # Invalid value\n            'form-INITIAL_FORMS': '0',\n            'form-MIN_NUM_FORMS': '0',\n            'form-MAX_NUM_FORMS': '1000',\n        })\n        \n        # Trigger validation\n        self.assertFalse(formset.is_valid())\n        \n        non_form_errors = formset.non_form_errors()\n        self.assertIsInstance(non_form_errors, ErrorList)\n        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n        self.assertGreater(len(non_form_errors), 0)\n    \n    def test_non_form_errors_has_nonform_css_class_with_too_many_forms_error(self):\n        \"\"\"Test that non_form_errors has 'nonform' CSS class when too many forms are submitted.\"\"\"\n        # Create a formset with max_num=1\n        LimitedFormSet = formset_factory(\n            type('TestForm', (Form,), {'name': CharField()}),\n            extra=0,\n            max_num=1,\n            validate_max=True\n        )\n        \n        # Submit 2 forms when max is 1\n        formset = LimitedFormSet({\n            'form-TOTAL_FORMS': '2',\n            'form-INITIAL_FORMS': '0',\n            'form-MIN_NUM_FORMS': '0',\n            'form-MAX_NUM_FORMS': '1000',\n            'form-0-name': 'test1',\n            'form-1-name': 'test2'\n        })\n        \n        # Trigger validation\n        self.assertFalse(formset.is_valid())\n        \n        non_form_errors = formset.non_form_errors()\n        self.assertIsInstance(non_form_errors, ErrorList)\n        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n        self.assertGreater(len(non_form_errors), 0)\n    \n    def test_non_form_errors_has_nonform_css_class_with_too_few_forms_error(self):\n        \"\"\"Test that non_form_errors has 'nonform' CSS class when too few forms are submitted.\"\"\"\n        # Create a formset with min_num=2\n        LimitedFormSet = formset_factory(\n            type('TestForm', (Form,), {'name': CharField()}),\n            extra=0,\n            min_num=2,\n            validate_min=True\n        )\n        \n        # Submit 1 form when min is 2\n        formset = LimitedFormSet({\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '0',\n            'form-MIN_NUM_FORMS': '0',\n            'form-MAX_NUM_FORMS': '1000',\n            'form-0-name': 'test1'\n        })\n        \n        # Trigger validation\n        self.assertFalse(formset.is_valid())\n        \n        non_form_errors = formset.non_form_errors()\n        self.assertIsInstance(non_form_errors, ErrorList)\n        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n        self.assertGreater(len(non_form_errors), 0)\n    \n    def test_non_form_errors_as_ul_includes_nonform_css_class(self):\n        \"\"\"Test that non_form_errors.as_ul() includes the 'nonform' CSS class in HTML output.\"\"\"\n        class CustomFormSet(self.TestFormSet):\n            def clean(self):\n                super().clean()\n                raise ValidationError(\"This is a non-form error\")\n        \n        formset = CustomFormSet({\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '0',\n            'form-MIN_NUM_FORMS': '0',\n            'form-MAX_NUM_FORMS': '1000',\n            'form-0-name': 'test'\n        })\n        \n        # Trigger validation\n        self.assertFalse(formset.is_valid())\n        \n        non_form_errors = formset.non_form_errors()\n        html_output = non_form_errors.as_ul()\n        \n        # Check that the HTML contains the 'nonform' CSS class\n        self.assertIn('class=\"errorlist nonform\"', html_output)\n        self.assertIn(\"This is a non-form error\", html_output)\n    \n    def test_non_form_errors_consistency_with_forms_non_field_errors(self):\n        \"\"\"Test that FormSet non_form_errors behaves consistently with Form non_field_errors.\"\"\"\n        from django.forms import Form\n        \n        # Test Form non_field_errors for comparison\n        class TestForm(Form):\n            name = CharField()\n            \n            def clean(self):\n                super().clean()\n                raise ValidationError(\"This is a non-field error\")\n        \n        form = TestForm({'name': 'test'})\n        self.assertFalse(form.is_valid())\n        \n        non_field_errors = form.non_field_errors()\n        self.assertEqual(non_field_errors.error_class, 'errorlist nonfield')\n        \n        # Test FormSet non_form_errors\n        class CustomFormSet(self.TestFormSet):\n            def clean(self):\n                super().clean()\n                raise ValidationError(\"This is a non-form error\")\n        \n        formset = CustomFormSet({\n            'form-TOTAL_FORMS': '1',\n            'form-INITIAL_FORMS': '0',\n            'form-MIN_NUM_FORMS': '0',\n            'form-MAX_NUM_FORMS': '1000',\n            'form-0-name': 'test'\n        })\n        \n        self.assertFalse(formset.is_valid())\n        non_form_errors = formset.non_form_errors()\n        \n        # Should have similar structure but with 'nonform' instead of 'nonfield'\n        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n        \n        # Both should have the same base error class structure\n        self.assertTrue(non_field_errors.error_class.startswith('errorlist '))\n        self.assertTrue(non_form_errors.error_class.startswith('errorlist '))\n    \n    def test_custom_error_class_preserves_nonform_css_class(self):\n        \"\"\"Test that custom error_class still includes 'nonform' CSS class.\"\"\"\n        class CustomErrorList(ErrorList):\n            pass\n        \n        class CustomFormSet(self.TestFormSet):\n            def clean(self):\n                super().clean()\n                raise ValidationError(\"This is a non-form error\")\n        \n        formset = CustomFormSet(\n            data={\n                'form-TOTAL_FORMS': '1',\n                'form-INITIAL_FORMS': '0',\n                'form-MIN_NUM_FORMS': '0',\n                'form-MAX_NUM_FORMS': '1000',\n                'form-0-name': 'test'\n            },\n            error_class=CustomErrorList\n        )\n        \n        # Trigger validation\n        self.assertFalse(formset.is_valid())\n        \n        non_form_errors = formset.non_form_errors()\n        self.assertIsInstance(non_form_errors, CustomErrorList)\n        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n</patched>\n```",
  "patch": "--- a/tests/forms_tests/test_formsets.py\n+++ b/tests/forms_tests/test_formsets.py\n-# This will be added to the existing test file\n+import pytest\n+from django.forms import Form, CharField, ValidationError\n+from django.forms.formsets import formset_factory\n+from django.forms.utils import ErrorList\n+from django.test import TestCase\n+\n+\n+class NonFormErrorCSSClassTests(TestCase):\n+    \"\"\"Test that FormSets add 'nonform' CSS class for non-form errors.\"\"\"\n+    \n+    def setUp(self):\n+        \"\"\"Set up test forms and formsets.\"\"\"\n+        class TestForm(Form):\n+            name = CharField()\n+        \n+        self.TestFormSet = formset_factory(TestForm, extra=1)\n+    \n+    def test_non_form_errors_has_nonform_css_class_when_empty(self):\n+        \"\"\"Test that non_form_errors returns ErrorList with 'nonform' CSS class when no errors exist.\"\"\"\n+        formset = self.TestFormSet()\n+        non_form_errors = formset.non_form_errors()\n+        \n+        # Should return an ErrorList with 'nonform' CSS class even when empty\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        self.assertEqual(len(non_form_errors), 0)\n+    \n+    def test_non_form_errors_has_nonform_css_class_with_validation_errors(self):\n+        \"\"\"Test that non_form_errors has 'nonform' CSS class when validation errors exist.\"\"\"\n+        class CustomFormSet(self.TestFormSet):\n+            def clean(self):\n+                super().clean()\n+                raise ValidationError(\"This is a non-form error\")\n+        \n+        # Create formset with valid form data but formset-level validation error\n+        formset = CustomFormSet({\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+            'form-0-name': 'test'\n+        })\n+        \n+        # Trigger validation\n+        self.assertFalse(formset.is_valid())\n+        \n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        self.assertEqual(len(non_form_errors), 1)\n+        self.assertIn(\"This is a non-form error\", str(non_form_errors))\n+    \n+    def test_non_form_errors_has_nonform_css_class_with_management_form_errors(self):\n+        \"\"\"Test that non_form_errors has 'nonform' CSS class when management form errors exist.\"\"\"\n+        # Create formset with invalid management form data\n+        formset = self.TestFormSet({\n+            'form-TOTAL_FORMS': 'invalid',  # Invalid value\n+            'form-INITIAL_FORMS': '0',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+        })\n+        \n+        # Trigger validation\n+        self.assertFalse(formset.is_valid())\n+        \n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        self.assertGreater(len(non_form_errors), 0)\n+    \n+    def test_non_form_errors_has_nonform_css_class_with_too_many_forms_error(self):\n+        \"\"\"Test that non_form_errors has 'nonform' CSS class when too many forms are submitted.\"\"\"\n+        # Create a formset with max_num=1\n+        LimitedFormSet = formset_factory(\n+            type('TestForm', (Form,), {'name': CharField()}),\n+            extra=0,\n+            max_num=1,\n+            validate_max=True\n+        )\n+        \n+        # Submit 2 forms when max is 1\n+        formset = LimitedFormSet({\n+            'form-TOTAL_FORMS': '2',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+            'form-0-name': 'test1',\n+            'form-1-name': 'test2'\n+        })\n+        \n+        # Trigger validation\n+        self.assertFalse(formset.is_valid())\n+        \n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        self.assertGreater(len(non_form_errors), 0)\n+    \n+    def test_non_form_errors_has_nonform_css_class_with_too_few_forms_error(self):\n+        \"\"\"Test that non_form_errors has 'nonform' CSS class when too few forms are submitted.\"\"\"\n+        # Create a formset with min_num=2\n+        LimitedFormSet = formset_factory(\n+            type('TestForm', (Form,), {'name': CharField()}),\n+            extra=0,\n+            min_num=2,\n+            validate_min=True\n+        )\n+        \n+        # Submit 1 form when min is 2\n+        formset = LimitedFormSet({\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+            'form-0-name': 'test1'\n+        })\n+        \n+        # Trigger validation\n+        self.assertFalse(formset.is_valid())\n+        \n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, ErrorList)\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        self.assertGreater(len(non_form_errors), 0)\n+    \n+    def test_non_form_errors_as_ul_includes_nonform_css_class(self):\n+        \"\"\"Test that non_form_errors.as_ul() includes the 'nonform' CSS class in HTML output.\"\"\"\n+        class CustomFormSet(self.TestFormSet):\n+            def clean(self):\n+                super().clean()\n+                raise ValidationError(\"This is a non-form error\")\n+        \n+        formset = CustomFormSet({\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+            'form-0-name': 'test'\n+        })\n+        \n+        # Trigger validation\n+        self.assertFalse(formset.is_valid())\n+        \n+        non_form_errors = formset.non_form_errors()\n+        html_output = non_form_errors.as_ul()\n+        \n+        # Check that the HTML contains the 'nonform' CSS class\n+        self.assertIn('class=\"errorlist nonform\"', html_output)\n+        self.assertIn(\"This is a non-form error\", html_output)\n+    \n+    def test_non_form_errors_consistency_with_forms_non_field_errors(self):\n+        \"\"\"Test that FormSet non_form_errors behaves consistently with Form non_field_errors.\"\"\"\n+        from django.forms import Form\n+        \n+        # Test Form non_field_errors for comparison\n+        class TestForm(Form):\n+            name = CharField()\n+            \n+            def clean(self):\n+                super().clean()\n+                raise ValidationError(\"This is a non-field error\")\n+        \n+        form = TestForm({'name': 'test'})\n+        self.assertFalse(form.is_valid())\n+        \n+        non_field_errors = form.non_field_errors()\n+        self.assertEqual(non_field_errors.error_class, 'errorlist nonfield')\n+        \n+        # Test FormSet non_form_errors\n+        class CustomFormSet(self.TestFormSet):\n+            def clean(self):\n+                super().clean()\n+                raise ValidationError(\"This is a non-form error\")\n+        \n+        formset = CustomFormSet({\n+            'form-TOTAL_FORMS': '1',\n+            'form-INITIAL_FORMS': '0',\n+            'form-MIN_NUM_FORMS': '0',\n+            'form-MAX_NUM_FORMS': '1000',\n+            'form-0-name': 'test'\n+        })\n+        \n+        self.assertFalse(formset.is_valid())\n+        non_form_errors = formset.non_form_errors()\n+        \n+        # Should have similar structure but with 'nonform' instead of 'nonfield'\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n+        \n+        # Both should have the same base error class structure\n+        self.assertTrue(non_field_errors.error_class.startswith('errorlist '))\n+        self.assertTrue(non_form_errors.error_class.startswith('errorlist '))\n+    \n+    def test_custom_error_class_preserves_nonform_css_class(self):\n+        \"\"\"Test that custom error_class still includes 'nonform' CSS class.\"\"\"\n+        class CustomErrorList(ErrorList):\n+            pass\n+        \n+        class CustomFormSet(self.TestFormSet):\n+            def clean(self):\n+                super().clean()\n+                raise ValidationError(\"This is a non-form error\")\n+        \n+        formset = CustomFormSet(\n+            data={\n+                'form-TOTAL_FORMS': '1',\n+                'form-INITIAL_FORMS': '0',\n+                'form-MIN_NUM_FORMS': '0',\n+                'form-MAX_NUM_FORMS': '1000',\n+                'form-0-name': 'test'\n+            },\n+            error_class=CustomErrorList\n+        )\n+        \n+        # Trigger validation\n+        self.assertFalse(formset.is_valid())\n+        \n+        non_form_errors = formset.non_form_errors()\n+        self.assertIsInstance(non_form_errors, CustomErrorList)\n+        self.assertEqual(non_form_errors.error_class, 'errorlist nonform')\n"
}