{
  "instance_id": "django__django-13786",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/migrations/test_operations.py</file>\n<original>\n# This file already exists, we need to add our tests to it\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.db.migrations.operations.models import CreateModel, AlterModelOptions\nfrom django.db.migrations.state import ProjectState\n\n\nclass TestCreateModelReduceAlterModelOptions:\n    \"\"\"Test CreateModel.reduce() behavior with AlterModelOptions operations.\"\"\"\n    \n    def test_create_model_reduce_alter_model_options_empty_clears_options(self):\n        \"\"\"\n        Test that when AlterModelOptions with empty options is reduced into CreateModel,\n        the model options are properly cleared.\n        This test reproduces the bug described in the issue.\n        \"\"\"\n        # Create a CreateModel operation with some initial options\n        create_op = CreateModel(\n            name=\"TestModel\",\n            fields=[\n                (\"id\", models.AutoField(primary_key=True)),\n                (\"name\", models.CharField(max_length=100)),\n            ],\n            options={\n                \"verbose_name\": \"Test Model\",\n                \"ordering\": [\"name\"],\n                \"permissions\": [(\"can_test\", \"Can test\")],\n            }\n        )\n        \n        # Create an AlterModelOptions operation that clears all options\n        alter_op = AlterModelOptions(\n            name=\"TestModel\",\n            options={}\n        )\n        \n        # Reduce the operations\n        result = create_op.reduce(alter_op, \"testapp\")\n        \n        # Should return a single CreateModel operation\n        assert len(result) == 1\n        assert isinstance(result[0], CreateModel)\n        \n        # The resulting CreateModel should have empty options\n        # This assertion will fail before the fix is applied\n        assert result[0].options == {}\n    \n    def test_create_model_reduce_alter_model_options_partial_update(self):\n        \"\"\"\n        Test that when AlterModelOptions with partial options is reduced into CreateModel,\n        only the specified options are kept and others are cleared.\n        \"\"\"\n        # Create a CreateModel operation with multiple options\n        create_op = CreateModel(\n            name=\"TestModel\",\n            fields=[\n                (\"id\", models.AutoField(primary_key=True)),\n                (\"name\", models.CharField(max_length=100)),\n            ],\n            options={\n                \"verbose_name\": \"Test Model\",\n                \"ordering\": [\"name\"],\n                \"permissions\": [(\"can_test\", \"Can test\")],\n                \"managed\": True,\n            }\n        )\n        \n        # Create an AlterModelOptions operation that only sets verbose_name\n        alter_op = AlterModelOptions(\n            name=\"TestModel\",\n            options={\n                \"verbose_name\": \"Updated Test Model\",\n            }\n        )\n        \n        # Reduce the operations\n        result = create_op.reduce(alter_op, \"testapp\")\n        \n        # Should return a single CreateModel operation\n        assert len(result) == 1\n        assert isinstance(result[0], CreateModel)\n        \n        # The resulting CreateModel should only have the verbose_name option\n        # Other ALTER_OPTION_KEYS should be cleared\n        expected_options = {\"verbose_name\": \"Updated Test Model\"}\n        assert result[0].options == expected_options\n    \n    def test_create_model_reduce_alter_model_options_preserves_non_alter_options(self):\n        \"\"\"\n        Test that options not in ALTER_OPTION_KEYS are preserved when reducing\n        AlterModelOptions into CreateModel.\n        \"\"\"\n        # Create a CreateModel operation with both ALTER_OPTION_KEYS and other options\n        create_op = CreateModel(\n            name=\"TestModel\",\n            fields=[\n                (\"id\", models.AutoField(primary_key=True)),\n                (\"name\", models.CharField(max_length=100)),\n            ],\n            options={\n                \"verbose_name\": \"Test Model\",  # This is in ALTER_OPTION_KEYS\n                \"ordering\": [\"name\"],  # This is in ALTER_OPTION_KEYS\n                \"db_table\": \"custom_table\",  # This is NOT in ALTER_OPTION_KEYS\n                \"proxy\": True,  # This is NOT in ALTER_OPTION_KEYS\n            }\n        )\n        \n        # Create an AlterModelOptions operation with empty options\n        alter_op = AlterModelOptions(\n            name=\"TestModel\",\n            options={}\n        )\n        \n        # Reduce the operations\n        result = create_op.reduce(alter_op, \"testapp\")\n        \n        # Should return a single CreateModel operation\n        assert len(result) == 1\n        assert isinstance(result[0], CreateModel)\n        \n        # The resulting CreateModel should preserve non-ALTER_OPTION_KEYS options\n        # but clear ALTER_OPTION_KEYS options\n        expected_options = {\n            \"db_table\": \"custom_table\",\n            \"proxy\": True,\n        }\n        assert result[0].options == expected_options\n    \n    def test_create_model_reduce_alter_model_options_adds_new_options(self):\n        \"\"\"\n        Test that AlterModelOptions can add new options to CreateModel.\n        \"\"\"\n        # Create a CreateModel operation with minimal options\n        create_op = CreateModel(\n            name=\"TestModel\",\n            fields=[\n                (\"id\", models.AutoField(primary_key=True)),\n                (\"name\", models.CharField(max_length=100)),\n            ],\n            options={\n                \"db_table\": \"custom_table\",  # Not in ALTER_OPTION_KEYS\n            }\n        )\n        \n        # Create an AlterModelOptions operation that adds new options\n        alter_op = AlterModelOptions(\n            name=\"TestModel\",\n            options={\n                \"verbose_name\": \"New Test Model\",\n                \"ordering\": [\"name\"],\n                \"managed\": False,\n            }\n        )\n        \n        # Reduce the operations\n        result = create_op.reduce(alter_op, \"testapp\")\n        \n        # Should return a single CreateModel operation\n        assert len(result) == 1\n        assert isinstance(result[0], CreateModel)\n        \n        # The resulting CreateModel should have both the preserved and new options\n        expected_options = {\n            \"db_table\": \"custom_table\",  # Preserved\n            \"verbose_name\": \"New Test Model\",  # Added\n            \"ordering\": [\"name\"],  # Added\n            \"managed\": False,  # Added\n        }\n        assert result[0].options == expected_options\n    \n    def test_create_model_reduce_alter_model_options_different_model_name(self):\n        \"\"\"\n        Test that CreateModel.reduce() doesn't reduce AlterModelOptions for different models.\n        \"\"\"\n        # Create a CreateModel operation\n        create_op = CreateModel(\n            name=\"TestModel\",\n            fields=[\n                (\"id\", models.AutoField(primary_key=True)),\n            ],\n            options={\"verbose_name\": \"Test Model\"}\n        )\n        \n        # Create an AlterModelOptions operation for a different model\n        alter_op = AlterModelOptions(\n            name=\"DifferentModel\",\n            options={}\n        )\n        \n        # Reduce the operations\n        result = create_op.reduce(alter_op, \"testapp\")\n        \n        # Should not reduce - returns None (handled by super().reduce())\n        assert result is None or result is False\n    \n    def test_create_model_reduce_preserves_other_attributes(self):\n        \"\"\"\n        Test that reducing AlterModelOptions into CreateModel preserves\n        all other attributes (fields, bases, managers).\n        \"\"\"\n        # Create a CreateModel operation with various attributes\n        create_op = CreateModel(\n            name=\"TestModel\",\n            fields=[\n                (\"id\", models.AutoField(primary_key=True)),\n                (\"name\", models.CharField(max_length=100)),\n            ],\n            options={\"verbose_name\": \"Test Model\"},\n            bases=(models.Model,),\n            managers=[(\"objects\", models.Manager())],\n        )\n        \n        # Create an AlterModelOptions operation\n        alter_op = AlterModelOptions(\n            name=\"TestModel\",\n            options={\"ordering\": [\"name\"]}\n        )\n        \n        # Reduce the operations\n        result = create_op.reduce(alter_op, \"testapp\")\n        \n        # Should return a single CreateModel operation\n        assert len(result) == 1\n        reduced_op = result[0]\n        \n        # Check that all attributes are preserved\n        assert reduced_op.name == create_op.name\n        assert reduced_op.fields == create_op.fields\n        assert reduced_op.bases == create_op.bases\n        assert reduced_op.managers == create_op.managers\n        \n        # Check that options are correctly updated\n        assert reduced_op.options == {\"ordering\": [\"name\"]}\n\n    def test_alter_model_options_keys_coverage(self):\n        \"\"\"\n        Test that all ALTER_OPTION_KEYS are properly handled in the reduction.\n        This ensures our fix covers all the options that AlterModelOptions manages.\n        \"\"\"\n        # Get all ALTER_OPTION_KEYS\n        alter_option_keys = AlterModelOptions.ALTER_OPTION_KEYS\n        \n        # Create initial options with all ALTER_OPTION_KEYS set\n        initial_options = {}\n        for key in alter_option_keys:\n            if key in [\"permissions\", \"default_permissions\"]:\n                initial_options[key] = [(\"test_perm\", \"Test permission\")]\n            elif key in [\"ordering\"]:\n                initial_options[key] = [\"name\"]\n            elif key in [\"managed\", \"select_on_save\"]:\n                initial_options[key] = True\n            else:\n                initial_options[key] = f\"test_{key}\"\n        \n        # Add a non-ALTER_OPTION_KEYS option\n        initial_options[\"db_table\"] = \"custom_table\"\n        \n        # Create a CreateModel operation\n        create_op = CreateModel(\n            name=\"TestModel\",\n            fields=[(\"id\", models.AutoField(primary_key=True))],\n            options=initial_options\n        )\n        \n        # Create an AlterModelOptions operation that clears all options\n        alter_op = AlterModelOptions(\n            name=\"TestModel\",\n            options={}\n        )\n        \n        # Reduce the operations\n        result = create_op.reduce(alter_op, \"testapp\")\n        \n        # Should return a single CreateModel operation\n        assert len(result) == 1\n        reduced_op = result[0]\n        \n        # All ALTER_OPTION_KEYS should be cleared\n        for key in alter_option_keys:\n            assert key not in reduced_op.options\n        \n        # Non-ALTER_OPTION_KEYS should be preserved\n        assert reduced_op.options.get(\"db_table\") == \"custom_table\"\n</patched>\n```",
  "patch": "--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n-# This file already exists, we need to add our tests to it\n+import pytest\n+from django.db import models\n+from django.db.migrations.operations.models import CreateModel, AlterModelOptions\n+from django.db.migrations.state import ProjectState\n+\n+\n+class TestCreateModelReduceAlterModelOptions:\n+    \"\"\"Test CreateModel.reduce() behavior with AlterModelOptions operations.\"\"\"\n+    \n+    def test_create_model_reduce_alter_model_options_empty_clears_options(self):\n+        \"\"\"\n+        Test that when AlterModelOptions with empty options is reduced into CreateModel,\n+        the model options are properly cleared.\n+        This test reproduces the bug described in the issue.\n+        \"\"\"\n+        # Create a CreateModel operation with some initial options\n+        create_op = CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=100)),\n+            ],\n+            options={\n+                \"verbose_name\": \"Test Model\",\n+                \"ordering\": [\"name\"],\n+                \"permissions\": [(\"can_test\", \"Can test\")],\n+            }\n+        )\n+        \n+        # Create an AlterModelOptions operation that clears all options\n+        alter_op = AlterModelOptions(\n+            name=\"TestModel\",\n+            options={}\n+        )\n+        \n+        # Reduce the operations\n+        result = create_op.reduce(alter_op, \"testapp\")\n+        \n+        # Should return a single CreateModel operation\n+        assert len(result) == 1\n+        assert isinstance(result[0], CreateModel)\n+        \n+        # The resulting CreateModel should have empty options\n+        # This assertion will fail before the fix is applied\n+        assert result[0].options == {}\n+    \n+    def test_create_model_reduce_alter_model_options_partial_update(self):\n+        \"\"\"\n+        Test that when AlterModelOptions with partial options is reduced into CreateModel,\n+        only the specified options are kept and others are cleared.\n+        \"\"\"\n+        # Create a CreateModel operation with multiple options\n+        create_op = CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=100)),\n+            ],\n+            options={\n+                \"verbose_name\": \"Test Model\",\n+                \"ordering\": [\"name\"],\n+                \"permissions\": [(\"can_test\", \"Can test\")],\n+                \"managed\": True,\n+            }\n+        )\n+        \n+        # Create an AlterModelOptions operation that only sets verbose_name\n+        alter_op = AlterModelOptions(\n+            name=\"TestModel\",\n+            options={\n+                \"verbose_name\": \"Updated Test Model\",\n+            }\n+        )\n+        \n+        # Reduce the operations\n+        result = create_op.reduce(alter_op, \"testapp\")\n+        \n+        # Should return a single CreateModel operation\n+        assert len(result) == 1\n+        assert isinstance(result[0], CreateModel)\n+        \n+        # The resulting CreateModel should only have the verbose_name option\n+        # Other ALTER_OPTION_KEYS should be cleared\n+        expected_options = {\"verbose_name\": \"Updated Test Model\"}\n+        assert result[0].options == expected_options\n+    \n+    def test_create_model_reduce_alter_model_options_preserves_non_alter_options(self):\n+        \"\"\"\n+        Test that options not in ALTER_OPTION_KEYS are preserved when reducing\n+        AlterModelOptions into CreateModel.\n+        \"\"\"\n+        # Create a CreateModel operation with both ALTER_OPTION_KEYS and other options\n+        create_op = CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=100)),\n+            ],\n+            options={\n+                \"verbose_name\": \"Test Model\",  # This is in ALTER_OPTION_KEYS\n+                \"ordering\": [\"name\"],  # This is in ALTER_OPTION_KEYS\n+                \"db_table\": \"custom_table\",  # This is NOT in ALTER_OPTION_KEYS\n+                \"proxy\": True,  # This is NOT in ALTER_OPTION_KEYS\n+            }\n+        )\n+        \n+        # Create an AlterModelOptions operation with empty options\n+        alter_op = AlterModelOptions(\n+            name=\"TestModel\",\n+            options={}\n+        )\n+        \n+        # Reduce the operations\n+        result = create_op.reduce(alter_op, \"testapp\")\n+        \n+        # Should return a single CreateModel operation\n+        assert len(result) == 1\n+        assert isinstance(result[0], CreateModel)\n+        \n+        # The resulting CreateModel should preserve non-ALTER_OPTION_KEYS options\n+        # but clear ALTER_OPTION_KEYS options\n+        expected_options = {\n+            \"db_table\": \"custom_table\",\n+            \"proxy\": True,\n+        }\n+        assert result[0].options == expected_options\n+    \n+    def test_create_model_reduce_alter_model_options_adds_new_options(self):\n+        \"\"\"\n+        Test that AlterModelOptions can add new options to CreateModel.\n+        \"\"\"\n+        # Create a CreateModel operation with minimal options\n+        create_op = CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=100)),\n+            ],\n+            options={\n+                \"db_table\": \"custom_table\",  # Not in ALTER_OPTION_KEYS\n+            }\n+        )\n+        \n+        # Create an AlterModelOptions operation that adds new options\n+        alter_op = AlterModelOptions(\n+            name=\"TestModel\",\n+            options={\n+                \"verbose_name\": \"New Test Model\",\n+                \"ordering\": [\"name\"],\n+                \"managed\": False,\n+            }\n+        )\n+        \n+        # Reduce the operations\n+        result = create_op.reduce(alter_op, \"testapp\")\n+        \n+        # Should return a single CreateModel operation\n+        assert len(result) == 1\n+        assert isinstance(result[0], CreateModel)\n+        \n+        # The resulting CreateModel should have both the preserved and new options\n+        expected_options = {\n+            \"db_table\": \"custom_table\",  # Preserved\n+            \"verbose_name\": \"New Test Model\",  # Added\n+            \"ordering\": [\"name\"],  # Added\n+            \"managed\": False,  # Added\n+        }\n+        assert result[0].options == expected_options\n+    \n+    def test_create_model_reduce_alter_model_options_different_model_name(self):\n+        \"\"\"\n+        Test that CreateModel.reduce() doesn't reduce AlterModelOptions for different models.\n+        \"\"\"\n+        # Create a CreateModel operation\n+        create_op = CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+            ],\n+            options={\"verbose_name\": \"Test Model\"}\n+        )\n+        \n+        # Create an AlterModelOptions operation for a different model\n+        alter_op = AlterModelOptions(\n+            name=\"DifferentModel\",\n+            options={}\n+        )\n+        \n+        # Reduce the operations\n+        result = create_op.reduce(alter_op, \"testapp\")\n+        \n+        # Should not reduce - returns None (handled by super().reduce())\n+        assert result is None or result is False\n+    \n+    def test_create_model_reduce_preserves_other_attributes(self):\n+        \"\"\"\n+        Test that reducing AlterModelOptions into CreateModel preserves\n+        all other attributes (fields, bases, managers).\n+        \"\"\"\n+        # Create a CreateModel operation with various attributes\n+        create_op = CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"id\", models.AutoField(primary_key=True)),\n+                (\"name\", models.CharField(max_length=100)),\n+            ],\n+            options={\"verbose_name\": \"Test Model\"},\n+            bases=(models.Model,),\n+            managers=[(\"objects\", models.Manager())],\n+        )\n+        \n+        # Create an AlterModelOptions operation\n+        alter_op = AlterModelOptions(\n+            name=\"TestModel\",\n+            options={\"ordering\": [\"name\"]}\n+        )\n+        \n+        # Reduce the operations\n+        result = create_op.reduce(alter_op, \"testapp\")\n+        \n+        # Should return a single CreateModel operation\n+        assert len(result) == 1\n+        reduced_op = result[0]\n+        \n+        # Check that all attributes are preserved\n+        assert reduced_op.name == create_op.name\n+        assert reduced_op.fields == create_op.fields\n+        assert reduced_op.bases == create_op.bases\n+        assert reduced_op.managers == create_op.managers\n+        \n+        # Check that options are correctly updated\n+        assert reduced_op.options == {\"ordering\": [\"name\"]}\n+\n+    def test_alter_model_options_keys_coverage(self):\n+        \"\"\"\n+        Test that all ALTER_OPTION_KEYS are properly handled in the reduction.\n+        This ensures our fix covers all the options that AlterModelOptions manages.\n+        \"\"\"\n+        # Get all ALTER_OPTION_KEYS\n+        alter_option_keys = AlterModelOptions.ALTER_OPTION_KEYS\n+        \n+        # Create initial options with all ALTER_OPTION_KEYS set\n+        initial_options = {}\n+        for key in alter_option_keys:\n+            if key in [\"permissions\", \"default_permissions\"]:\n+                initial_options[key] = [(\"test_perm\", \"Test permission\")]\n+            elif key in [\"ordering\"]:\n+                initial_options[key] = [\"name\"]\n+            elif key in [\"managed\", \"select_on_save\"]:\n+                initial_options[key] = True\n+            else:\n+                initial_options[key] = f\"test_{key}\"\n+        \n+        # Add a non-ALTER_OPTION_KEYS option\n+        initial_options[\"db_table\"] = \"custom_table\"\n+        \n+        # Create a CreateModel operation\n+        create_op = CreateModel(\n+            name=\"TestModel\",\n+            fields=[(\"id\", models.AutoField(primary_key=True))],\n+            options=initial_options\n+        )\n+        \n+        # Create an AlterModelOptions operation that clears all options\n+        alter_op = AlterModelOptions(\n+            name=\"TestModel\",\n+            options={}\n+        )\n+        \n+        # Reduce the operations\n+        result = create_op.reduce(alter_op, \"testapp\")\n+        \n+        # Should return a single CreateModel operation\n+        assert len(result) == 1\n+        reduced_op = result[0]\n+        \n+        # All ALTER_OPTION_KEYS should be cleared\n+        for key in alter_option_keys:\n+            assert key not in reduced_op.options\n+        \n+        # Non-ALTER_OPTION_KEYS should be preserved\n+        assert reduced_op.options.get(\"db_table\") == \"custom_table\"\n"
}