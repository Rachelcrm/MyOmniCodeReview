{
  "instance_id": "django__django-14034",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/forms_tests/test_fields.py</file>\n<original>\n# This will be added to the existing test file\n</original>\n<patched>\nimport pytest\nfrom django.core.exceptions import ValidationError\nfrom django.forms import (\n    Form,\n    CharField,\n    MultiValueField,\n    MultiWidget,\n)\n\n\nclass TestMultiValueField(MultiValueField):\n    \"\"\"Test MultiValueField with mixed required/optional sub-fields.\"\"\"\n    widget = MultiWidget\n    \n    def __init__(self, require_all_fields=False, required=False):\n        fields = [\n            CharField(required=False),\n            CharField(required=True),\n        ]\n        widget = self.widget(widgets=[\n            f.widget for f in fields\n        ], attrs={})\n        super().__init__(\n            fields=fields,\n            widget=widget,\n            require_all_fields=require_all_fields,\n            required=required,\n        )\n    \n    def compress(self, value):\n        return value if value else []\n\n\nclass TestForm(Form):\n    \"\"\"Test form with MultiValueField.\"\"\"\n    mf = TestMultiValueField()\n\n\nclass TestMultiValueFieldRequiredSubfields:\n    \"\"\"Test suite for MultiValueField required sub-field validation bug.\"\"\"\n    \n    def test_multivalue_field_with_empty_required_subfield_should_fail(self):\n        \"\"\"\n        Test that MultiValueField validation fails when a required sub-field is empty,\n        even when require_all_fields=False.\n        \n        This test reproduces the bug described in the issue.\n        \"\"\"\n        form = TestForm({\n            'mf_0': '',  # optional field - empty\n            'mf_1': '',  # required field - empty (should cause validation to fail)\n        })\n        \n        # This should fail because the second sub-field is required\n        assert not form.is_valid()\n        assert 'mf' in form.errors\n        \n    def test_multivalue_field_with_partial_data_should_fail(self):\n        \"\"\"\n        Test that MultiValueField validation fails when only optional field has data\n        but required field is empty.\n        \"\"\"\n        form = TestForm({\n            'mf_0': 'some_value',  # optional field - has value\n            'mf_1': '',            # required field - empty (should cause validation to fail)\n        })\n        \n        # This should fail because the second sub-field is required\n        assert not form.is_valid()\n        assert 'mf' in form.errors\n        \n    def test_multivalue_field_with_required_subfield_filled_should_pass(self):\n        \"\"\"\n        Test that MultiValueField validation passes when required sub-field has value.\n        \"\"\"\n        form = TestForm({\n            'mf_0': '',           # optional field - empty (OK)\n            'mf_1': 'required_value',  # required field - has value\n        })\n        \n        # This should pass because the required sub-field has a value\n        assert form.is_valid()\n        \n    def test_multivalue_field_with_all_fields_filled_should_pass(self):\n        \"\"\"\n        Test that MultiValueField validation passes when all sub-fields have values.\n        \"\"\"\n        form = TestForm({\n            'mf_0': 'optional_value',  # optional field - has value\n            'mf_1': 'required_value',  # required field - has value\n        })\n        \n        # This should pass because all fields have values\n        assert form.is_valid()\n        \n    def test_multivalue_field_error_message_type(self):\n        \"\"\"\n        Test that the correct error message type is used for required sub-fields.\n        The error should be 'required' not 'incomplete'.\n        \"\"\"\n        form = TestForm({\n            'mf_0': '',\n            'mf_1': '',\n        })\n        \n        assert not form.is_valid()\n        \n        # Get the actual error messages\n        field_errors = form.errors['mf']\n        \n        # The error should mention that the field is required, not incomplete\n        error_message = str(field_errors[0])\n        assert 'required' in error_message.lower()\n        \n    def test_multivalue_field_direct_validation(self):\n        \"\"\"\n        Test MultiValueField validation directly (not through a form).\n        \"\"\"\n        field = TestMultiValueField()\n        \n        # Test with empty required sub-field - should raise ValidationError\n        with pytest.raises(ValidationError):\n            field.clean(['', ''])  # second field is required but empty\n            \n        # Test with filled required sub-field - should not raise\n        try:\n            result = field.clean(['', 'required_value'])\n            # Should not raise an exception\n        except ValidationError:\n            pytest.fail(\"ValidationError should not be raised when required field has value\")\n            \n    def test_multivalue_field_require_all_fields_true_behavior(self):\n        \"\"\"\n        Test that require_all_fields=True behavior is preserved.\n        When require_all_fields=True, the MultiValueField itself handles validation.\n        \"\"\"\n        class RequireAllForm(Form):\n            mf = TestMultiValueField(require_all_fields=True, required=True)\n            \n        # With require_all_fields=True and required=True, empty values should fail\n        form = RequireAllForm({\n            'mf_0': '',\n            'mf_1': '',\n        })\n        assert not form.is_valid()\n        \n        # With require_all_fields=True, partial data should also fail\n        form = RequireAllForm({\n            'mf_0': 'value',\n            'mf_1': '',\n        })\n        assert not form.is_valid()\n        \n    def test_multivalue_field_not_required_with_empty_values(self):\n        \"\"\"\n        Test that when MultiValueField itself is not required and all sub-fields are empty,\n        validation should pass if no sub-fields are individually required.\n        \"\"\"\n        class OptionalSubfieldsForm(Form):\n            class OptionalMultiValueField(MultiValueField):\n                def __init__(self):\n                    fields = [\n                        CharField(required=False),\n                        CharField(required=False),  # Both fields optional\n                    ]\n                    widget = MultiWidget(widgets=[f.widget for f in fields])\n                    super().__init__(\n                        fields=fields,\n                        widget=widget,\n                        require_all_fields=False,\n                        required=False,\n                    )\n                \n                def compress(self, value):\n                    return value if value else []\n                    \n            mf = OptionalMultiValueField()\n            \n        form = OptionalSubfieldsForm({\n            'mf_0': '',\n            'mf_1': '',\n        })\n        \n        # Should pass because no sub-fields are required\n        assert form.is_valid()\n</patched>\n```",
  "patch": "--- a/tests/forms_tests/test_fields.py\n+++ b/tests/forms_tests/test_fields.py\n-# This will be added to the existing test file\n+import pytest\n+from django.core.exceptions import ValidationError\n+from django.forms import (\n+    Form,\n+    CharField,\n+    MultiValueField,\n+    MultiWidget,\n+)\n+\n+\n+class TestMultiValueField(MultiValueField):\n+    \"\"\"Test MultiValueField with mixed required/optional sub-fields.\"\"\"\n+    widget = MultiWidget\n+    \n+    def __init__(self, require_all_fields=False, required=False):\n+        fields = [\n+            CharField(required=False),\n+            CharField(required=True),\n+        ]\n+        widget = self.widget(widgets=[\n+            f.widget for f in fields\n+        ], attrs={})\n+        super().__init__(\n+            fields=fields,\n+            widget=widget,\n+            require_all_fields=require_all_fields,\n+            required=required,\n+        )\n+    \n+    def compress(self, value):\n+        return value if value else []\n+\n+\n+class TestForm(Form):\n+    \"\"\"Test form with MultiValueField.\"\"\"\n+    mf = TestMultiValueField()\n+\n+\n+class TestMultiValueFieldRequiredSubfields:\n+    \"\"\"Test suite for MultiValueField required sub-field validation bug.\"\"\"\n+    \n+    def test_multivalue_field_with_empty_required_subfield_should_fail(self):\n+        \"\"\"\n+        Test that MultiValueField validation fails when a required sub-field is empty,\n+        even when require_all_fields=False.\n+        \n+        This test reproduces the bug described in the issue.\n+        \"\"\"\n+        form = TestForm({\n+            'mf_0': '',  # optional field - empty\n+            'mf_1': '',  # required field - empty (should cause validation to fail)\n+        })\n+        \n+        # This should fail because the second sub-field is required\n+        assert not form.is_valid()\n+        assert 'mf' in form.errors\n+        \n+    def test_multivalue_field_with_partial_data_should_fail(self):\n+        \"\"\"\n+        Test that MultiValueField validation fails when only optional field has data\n+        but required field is empty.\n+        \"\"\"\n+        form = TestForm({\n+            'mf_0': 'some_value',  # optional field - has value\n+            'mf_1': '',            # required field - empty (should cause validation to fail)\n+        })\n+        \n+        # This should fail because the second sub-field is required\n+        assert not form.is_valid()\n+        assert 'mf' in form.errors\n+        \n+    def test_multivalue_field_with_required_subfield_filled_should_pass(self):\n+        \"\"\"\n+        Test that MultiValueField validation passes when required sub-field has value.\n+        \"\"\"\n+        form = TestForm({\n+            'mf_0': '',           # optional field - empty (OK)\n+            'mf_1': 'required_value',  # required field - has value\n+        })\n+        \n+        # This should pass because the required sub-field has a value\n+        assert form.is_valid()\n+        \n+    def test_multivalue_field_with_all_fields_filled_should_pass(self):\n+        \"\"\"\n+        Test that MultiValueField validation passes when all sub-fields have values.\n+        \"\"\"\n+        form = TestForm({\n+            'mf_0': 'optional_value',  # optional field - has value\n+            'mf_1': 'required_value',  # required field - has value\n+        })\n+        \n+        # This should pass because all fields have values\n+        assert form.is_valid()\n+        \n+    def test_multivalue_field_error_message_type(self):\n+        \"\"\"\n+        Test that the correct error message type is used for required sub-fields.\n+        The error should be 'required' not 'incomplete'.\n+        \"\"\"\n+        form = TestForm({\n+            'mf_0': '',\n+            'mf_1': '',\n+        })\n+        \n+        assert not form.is_valid()\n+        \n+        # Get the actual error messages\n+        field_errors = form.errors['mf']\n+        \n+        # The error should mention that the field is required, not incomplete\n+        error_message = str(field_errors[0])\n+        assert 'required' in error_message.lower()\n+        \n+    def test_multivalue_field_direct_validation(self):\n+        \"\"\"\n+        Test MultiValueField validation directly (not through a form).\n+        \"\"\"\n+        field = TestMultiValueField()\n+        \n+        # Test with empty required sub-field - should raise ValidationError\n+        with pytest.raises(ValidationError):\n+            field.clean(['', ''])  # second field is required but empty\n+            \n+        # Test with filled required sub-field - should not raise\n+        try:\n+            result = field.clean(['', 'required_value'])\n+            # Should not raise an exception\n+        except ValidationError:\n+            pytest.fail(\"ValidationError should not be raised when required field has value\")\n+            \n+    def test_multivalue_field_require_all_fields_true_behavior(self):\n+        \"\"\"\n+        Test that require_all_fields=True behavior is preserved.\n+        When require_all_fields=True, the MultiValueField itself handles validation.\n+        \"\"\"\n+        class RequireAllForm(Form):\n+            mf = TestMultiValueField(require_all_fields=True, required=True)\n+            \n+        # With require_all_fields=True and required=True, empty values should fail\n+        form = RequireAllForm({\n+            'mf_0': '',\n+            'mf_1': '',\n+        })\n+        assert not form.is_valid()\n+        \n+        # With require_all_fields=True, partial data should also fail\n+        form = RequireAllForm({\n+            'mf_0': 'value',\n+            'mf_1': '',\n+        })\n+        assert not form.is_valid()\n+        \n+    def test_multivalue_field_not_required_with_empty_values(self):\n+        \"\"\"\n+        Test that when MultiValueField itself is not required and all sub-fields are empty,\n+        validation should pass if no sub-fields are individually required.\n+        \"\"\"\n+        class OptionalSubfieldsForm(Form):\n+            class OptionalMultiValueField(MultiValueField):\n+                def __init__(self):\n+                    fields = [\n+                        CharField(required=False),\n+                        CharField(required=False),  # Both fields optional\n+                    ]\n+                    widget = MultiWidget(widgets=[f.widget for f in fields])\n+                    super().__init__(\n+                        fields=fields,\n+                        widget=widget,\n+                        require_all_fields=False,\n+                        required=False,\n+                    )\n+                \n+                def compress(self, value):\n+                    return value if value else []\n+                    \n+            mf = OptionalMultiValueField()\n+            \n+        form = OptionalSubfieldsForm({\n+            'mf_0': '',\n+            'mf_1': '',\n+        })\n+        \n+        # Should pass because no sub-fields are required\n+        assert form.is_valid()\n"
}