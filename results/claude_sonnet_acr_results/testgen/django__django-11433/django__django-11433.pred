{
  "instance_id": "django__django-11433",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/forms_tests/test_models.py</file>\n<original>\n# This will be added to the existing test file\n</original>\n<patched>\nimport pytest\nfrom django import forms\nfrom django.db import models\nfrom django.test import TestCase\nfrom django.forms.models import construct_instance\n\n\nclass TestModel(models.Model):\n    \"\"\"Test model with a field that has a default value.\"\"\"\n    name = models.CharField(max_length=100)\n    status = models.CharField(max_length=20, default='pending')\n    priority = models.IntegerField(default=1)\n    \n    class Meta:\n        app_label = 'forms_tests'\n\n\nclass TestModelForm(forms.ModelForm):\n    \"\"\"Basic ModelForm for TestModel.\"\"\"\n    class Meta:\n        model = TestModel\n        fields = ['name', 'status', 'priority']\n\n\nclass TestModelFormWithCleanedDataOverride(forms.ModelForm):\n    \"\"\"ModelForm that modifies cleaned_data to override default values.\"\"\"\n    class Meta:\n        model = TestModel\n        fields = ['name']  # Only include name field, status has default\n    \n    def clean(self):\n        cleaned_data = super().clean()\n        # Override the default status value in cleaned_data\n        cleaned_data['status'] = 'processed'\n        # Override the default priority value in cleaned_data\n        cleaned_data['priority'] = 5\n        return cleaned_data\n\n\nclass TestModelFormWithFieldClean(forms.ModelForm):\n    \"\"\"ModelForm that uses field-specific clean method to set default field.\"\"\"\n    class Meta:\n        model = TestModel\n        fields = ['name']\n    \n    def clean_status(self):\n        # This should set the status even though it's not in the form\n        return 'custom_status'\n\n\nclass CleanedDataOverrideDefaultsTest(TestCase):\n    \"\"\"Test that cleaned_data can overwrite fields' default values.\"\"\"\n    \n    def test_cleaned_data_overrides_default_value_bug_reproduction(self):\n        \"\"\"\n        Test that reproduces the bug where cleaned_data cannot override\n        default values for fields not in the form data.\n        \n        This test should FAIL before the fix is applied.\n        \"\"\"\n        # Create form with only 'name' field, 'status' has default 'pending'\n        form_data = {'name': 'Test Item'}\n        form = TestModelFormWithCleanedDataOverride(data=form_data)\n        \n        # Form should be valid\n        self.assertTrue(form.is_valid())\n        \n        # cleaned_data should contain our override\n        self.assertEqual(form.cleaned_data['status'], 'processed')\n        self.assertEqual(form.cleaned_data['priority'], 5)\n        \n        # Create instance using construct_instance\n        instance = TestModel()\n        constructed_instance = construct_instance(form, instance)\n        \n        # BUG: Before fix, this will fail because cleaned_data override is ignored\n        # The status will remain 'pending' (default) instead of 'processed'\n        self.assertEqual(constructed_instance.status, 'processed')\n        self.assertEqual(constructed_instance.priority, 5)\n    \n    def test_cleaned_data_overrides_default_after_fix(self):\n        \"\"\"\n        Test that cleaned_data can successfully override default values\n        after the fix is applied.\n        \n        This test should PASS after the fix is applied.\n        \"\"\"\n        form_data = {'name': 'Test Item'}\n        form = TestModelFormWithCleanedDataOverride(data=form_data)\n        \n        self.assertTrue(form.is_valid())\n        \n        # Verify cleaned_data contains our overrides\n        self.assertEqual(form.cleaned_data['name'], 'Test Item')\n        self.assertEqual(form.cleaned_data['status'], 'processed')\n        self.assertEqual(form.cleaned_data['priority'], 5)\n        \n        # Save the form and verify the overrides are applied\n        instance = form.save()\n        self.assertEqual(instance.name, 'Test Item')\n        self.assertEqual(instance.status, 'processed')\n        self.assertEqual(instance.priority, 5)\n    \n    def test_field_clean_method_overrides_default(self):\n        \"\"\"\n        Test that field-specific clean methods can override default values\n        for fields not in the form.\n        \"\"\"\n        form_data = {'name': 'Test Item'}\n        form = TestModelFormWithFieldClean(data=form_data)\n        \n        self.assertTrue(form.is_valid())\n        \n        # The clean_status method should have set the status\n        self.assertEqual(form.cleaned_data['status'], 'custom_status')\n        \n        # Save and verify the override is applied\n        instance = form.save()\n        self.assertEqual(instance.status, 'custom_status')\n    \n    def test_normal_form_behavior_preserved(self):\n        \"\"\"\n        Test that normal form behavior is preserved - fields with defaults\n        that aren't in cleaned_data should still use their defaults.\n        \"\"\"\n        form_data = {'name': 'Test Item', 'status': 'active'}\n        form = TestModelForm(data=form_data)\n        \n        self.assertTrue(form.is_valid())\n        \n        instance = form.save()\n        self.assertEqual(instance.name, 'Test Item')\n        self.assertEqual(instance.status, 'active')\n        self.assertEqual(instance.priority, 1)  # Should use default\n    \n    def test_construct_instance_with_cleaned_data_override(self):\n        \"\"\"\n        Test construct_instance directly with cleaned_data containing\n        fields not in the original form data.\n        \"\"\"\n        # Create a form with minimal data\n        form_data = {'name': 'Direct Test'}\n        form = TestModelForm(data=form_data)\n        \n        self.assertTrue(form.is_valid())\n        \n        # Manually add to cleaned_data (simulating what clean() method would do)\n        form.cleaned_data['status'] = 'manually_set'\n        form.cleaned_data['priority'] = 10\n        \n        # Use construct_instance directly\n        instance = TestModel()\n        constructed_instance = construct_instance(form, instance)\n        \n        # Verify the manually set values are applied\n        self.assertEqual(constructed_instance.name, 'Direct Test')\n        self.assertEqual(constructed_instance.status, 'manually_set')\n        self.assertEqual(constructed_instance.priority, 10)\n    \n    def test_edge_case_empty_form_with_cleaned_data_override(self):\n        \"\"\"\n        Test edge case where form has no fields but cleaned_data is populated\n        in the clean() method.\n        \"\"\"\n        class EmptyForm(forms.ModelForm):\n            class Meta:\n                model = TestModel\n                fields = []\n            \n            def clean(self):\n                cleaned_data = super().clean()\n                cleaned_data['name'] = 'Generated Name'\n                cleaned_data['status'] = 'auto_generated'\n                cleaned_data['priority'] = 99\n                return cleaned_data\n        \n        form = EmptyForm(data={})\n        self.assertTrue(form.is_valid())\n        \n        instance = form.save()\n        self.assertEqual(instance.name, 'Generated Name')\n        self.assertEqual(instance.status, 'auto_generated')\n        self.assertEqual(instance.priority, 99)\n    \n    def test_partial_override_preserves_other_defaults(self):\n        \"\"\"\n        Test that overriding some default fields preserves others.\n        \"\"\"\n        class PartialOverrideForm(forms.ModelForm):\n            class Meta:\n                model = TestModel\n                fields = ['name']\n            \n            def clean(self):\n                cleaned_data = super().clean()\n                # Only override status, leave priority as default\n                cleaned_data['status'] = 'partial_override'\n                return cleaned_data\n        \n        form_data = {'name': 'Partial Test'}\n        form = PartialOverrideForm(data=form_data)\n        \n        self.assertTrue(form.is_valid())\n        \n        instance = form.save()\n        self.assertEqual(instance.name, 'Partial Test')\n        self.assertEqual(instance.status, 'partial_override')\n        self.assertEqual(instance.priority, 1)  # Should remain default\n    \n    def test_widget_value_omitted_behavior_preserved(self):\n        \"\"\"\n        Test that the widget's value_omitted_from_data behavior is preserved\n        for fields that are not in cleaned_data.\n        \"\"\"\n        # Test with checkbox widget which has specific omitted behavior\n        class TestFormWithCheckbox(forms.ModelForm):\n            is_active = forms.BooleanField(required=False)\n            \n            class Meta:\n                model = TestModel\n                fields = ['name']\n        \n        # Checkbox not checked (omitted from data)\n        form_data = {'name': 'Checkbox Test'}\n        form = TestFormWithCheckbox(data=form_data)\n        \n        self.assertTrue(form.is_valid())\n        \n        # is_active should not be in cleaned_data since it was omitted\n        self.assertNotIn('is_active', form.cleaned_data)\n</patched>\n```",
  "patch": "--- a/tests/forms_tests/test_models.py\n+++ b/tests/forms_tests/test_models.py\n-# This will be added to the existing test file\n+import pytest\n+from django import forms\n+from django.db import models\n+from django.test import TestCase\n+from django.forms.models import construct_instance\n+\n+\n+class TestModel(models.Model):\n+    \"\"\"Test model with a field that has a default value.\"\"\"\n+    name = models.CharField(max_length=100)\n+    status = models.CharField(max_length=20, default='pending')\n+    priority = models.IntegerField(default=1)\n+    \n+    class Meta:\n+        app_label = 'forms_tests'\n+\n+\n+class TestModelForm(forms.ModelForm):\n+    \"\"\"Basic ModelForm for TestModel.\"\"\"\n+    class Meta:\n+        model = TestModel\n+        fields = ['name', 'status', 'priority']\n+\n+\n+class TestModelFormWithCleanedDataOverride(forms.ModelForm):\n+    \"\"\"ModelForm that modifies cleaned_data to override default values.\"\"\"\n+    class Meta:\n+        model = TestModel\n+        fields = ['name']  # Only include name field, status has default\n+    \n+    def clean(self):\n+        cleaned_data = super().clean()\n+        # Override the default status value in cleaned_data\n+        cleaned_data['status'] = 'processed'\n+        # Override the default priority value in cleaned_data\n+        cleaned_data['priority'] = 5\n+        return cleaned_data\n+\n+\n+class TestModelFormWithFieldClean(forms.ModelForm):\n+    \"\"\"ModelForm that uses field-specific clean method to set default field.\"\"\"\n+    class Meta:\n+        model = TestModel\n+        fields = ['name']\n+    \n+    def clean_status(self):\n+        # This should set the status even though it's not in the form\n+        return 'custom_status'\n+\n+\n+class CleanedDataOverrideDefaultsTest(TestCase):\n+    \"\"\"Test that cleaned_data can overwrite fields' default values.\"\"\"\n+    \n+    def test_cleaned_data_overrides_default_value_bug_reproduction(self):\n+        \"\"\"\n+        Test that reproduces the bug where cleaned_data cannot override\n+        default values for fields not in the form data.\n+        \n+        This test should FAIL before the fix is applied.\n+        \"\"\"\n+        # Create form with only 'name' field, 'status' has default 'pending'\n+        form_data = {'name': 'Test Item'}\n+        form = TestModelFormWithCleanedDataOverride(data=form_data)\n+        \n+        # Form should be valid\n+        self.assertTrue(form.is_valid())\n+        \n+        # cleaned_data should contain our override\n+        self.assertEqual(form.cleaned_data['status'], 'processed')\n+        self.assertEqual(form.cleaned_data['priority'], 5)\n+        \n+        # Create instance using construct_instance\n+        instance = TestModel()\n+        constructed_instance = construct_instance(form, instance)\n+        \n+        # BUG: Before fix, this will fail because cleaned_data override is ignored\n+        # The status will remain 'pending' (default) instead of 'processed'\n+        self.assertEqual(constructed_instance.status, 'processed')\n+        self.assertEqual(constructed_instance.priority, 5)\n+    \n+    def test_cleaned_data_overrides_default_after_fix(self):\n+        \"\"\"\n+        Test that cleaned_data can successfully override default values\n+        after the fix is applied.\n+        \n+        This test should PASS after the fix is applied.\n+        \"\"\"\n+        form_data = {'name': 'Test Item'}\n+        form = TestModelFormWithCleanedDataOverride(data=form_data)\n+        \n+        self.assertTrue(form.is_valid())\n+        \n+        # Verify cleaned_data contains our overrides\n+        self.assertEqual(form.cleaned_data['name'], 'Test Item')\n+        self.assertEqual(form.cleaned_data['status'], 'processed')\n+        self.assertEqual(form.cleaned_data['priority'], 5)\n+        \n+        # Save the form and verify the overrides are applied\n+        instance = form.save()\n+        self.assertEqual(instance.name, 'Test Item')\n+        self.assertEqual(instance.status, 'processed')\n+        self.assertEqual(instance.priority, 5)\n+    \n+    def test_field_clean_method_overrides_default(self):\n+        \"\"\"\n+        Test that field-specific clean methods can override default values\n+        for fields not in the form.\n+        \"\"\"\n+        form_data = {'name': 'Test Item'}\n+        form = TestModelFormWithFieldClean(data=form_data)\n+        \n+        self.assertTrue(form.is_valid())\n+        \n+        # The clean_status method should have set the status\n+        self.assertEqual(form.cleaned_data['status'], 'custom_status')\n+        \n+        # Save and verify the override is applied\n+        instance = form.save()\n+        self.assertEqual(instance.status, 'custom_status')\n+    \n+    def test_normal_form_behavior_preserved(self):\n+        \"\"\"\n+        Test that normal form behavior is preserved - fields with defaults\n+        that aren't in cleaned_data should still use their defaults.\n+        \"\"\"\n+        form_data = {'name': 'Test Item', 'status': 'active'}\n+        form = TestModelForm(data=form_data)\n+        \n+        self.assertTrue(form.is_valid())\n+        \n+        instance = form.save()\n+        self.assertEqual(instance.name, 'Test Item')\n+        self.assertEqual(instance.status, 'active')\n+        self.assertEqual(instance.priority, 1)  # Should use default\n+    \n+    def test_construct_instance_with_cleaned_data_override(self):\n+        \"\"\"\n+        Test construct_instance directly with cleaned_data containing\n+        fields not in the original form data.\n+        \"\"\"\n+        # Create a form with minimal data\n+        form_data = {'name': 'Direct Test'}\n+        form = TestModelForm(data=form_data)\n+        \n+        self.assertTrue(form.is_valid())\n+        \n+        # Manually add to cleaned_data (simulating what clean() method would do)\n+        form.cleaned_data['status'] = 'manually_set'\n+        form.cleaned_data['priority'] = 10\n+        \n+        # Use construct_instance directly\n+        instance = TestModel()\n+        constructed_instance = construct_instance(form, instance)\n+        \n+        # Verify the manually set values are applied\n+        self.assertEqual(constructed_instance.name, 'Direct Test')\n+        self.assertEqual(constructed_instance.status, 'manually_set')\n+        self.assertEqual(constructed_instance.priority, 10)\n+    \n+    def test_edge_case_empty_form_with_cleaned_data_override(self):\n+        \"\"\"\n+        Test edge case where form has no fields but cleaned_data is populated\n+        in the clean() method.\n+        \"\"\"\n+        class EmptyForm(forms.ModelForm):\n+            class Meta:\n+                model = TestModel\n+                fields = []\n+            \n+            def clean(self):\n+                cleaned_data = super().clean()\n+                cleaned_data['name'] = 'Generated Name'\n+                cleaned_data['status'] = 'auto_generated'\n+                cleaned_data['priority'] = 99\n+                return cleaned_data\n+        \n+        form = EmptyForm(data={})\n+        self.assertTrue(form.is_valid())\n+        \n+        instance = form.save()\n+        self.assertEqual(instance.name, 'Generated Name')\n+        self.assertEqual(instance.status, 'auto_generated')\n+        self.assertEqual(instance.priority, 99)\n+    \n+    def test_partial_override_preserves_other_defaults(self):\n+        \"\"\"\n+        Test that overriding some default fields preserves others.\n+        \"\"\"\n+        class PartialOverrideForm(forms.ModelForm):\n+            class Meta:\n+                model = TestModel\n+                fields = ['name']\n+            \n+            def clean(self):\n+                cleaned_data = super().clean()\n+                # Only override status, leave priority as default\n+                cleaned_data['status'] = 'partial_override'\n+                return cleaned_data\n+        \n+        form_data = {'name': 'Partial Test'}\n+        form = PartialOverrideForm(data=form_data)\n+        \n+        self.assertTrue(form.is_valid())\n+        \n+        instance = form.save()\n+        self.assertEqual(instance.name, 'Partial Test')\n+        self.assertEqual(instance.status, 'partial_override')\n+        self.assertEqual(instance.priority, 1)  # Should remain default\n+    \n+    def test_widget_value_omitted_behavior_preserved(self):\n+        \"\"\"\n+        Test that the widget's value_omitted_from_data behavior is preserved\n+        for fields that are not in cleaned_data.\n+        \"\"\"\n+        # Test with checkbox widget which has specific omitted behavior\n+        class TestFormWithCheckbox(forms.ModelForm):\n+            is_active = forms.BooleanField(required=False)\n+            \n+            class Meta:\n+                model = TestModel\n+                fields = ['name']\n+        \n+        # Checkbox not checked (omitted from data)\n+        form_data = {'name': 'Checkbox Test'}\n+        form = TestFormWithCheckbox(data=form_data)\n+        \n+        self.assertTrue(form.is_valid())\n+        \n+        # is_active should not be in cleaned_data since it was omitted\n+        self.assertNotIn('is_active', form.cleaned_data)\n"
}