{
  "instance_id": "sympy__sympy-15345",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>sympy/printing/tests/test_mathematica.py</file>\n<original>\nfrom sympy import symbols, sin, cos, tan, cot, asin, acos, atan, acot, \\\n    sinh, cosh, tanh, coth, asinh, acosh, atanh, acoth, sech, csch, \\\n    asech, acsch, exp, log, pi, E, I, oo, zoo, nan, Rational, \\\n    Function, Integral, Derivative, conjugate, Max, Min\nfrom sympy.printing.mathematica import mathematica_code\n\n\ndef test_Integer():\n    assert mathematica_code(5) == \"5\"\n\n\ndef test_Rational():\n    assert mathematica_code(Rational(1, 2)) == \"1/2\"\n    assert mathematica_code(Rational(-1, 2)) == \"-1/2\"\n\n\ndef test_Function():\n    f = Function('f')\n    assert mathematica_code(f(5)) == \"f[5]\"\n    assert mathematica_code(sin(5)) == \"Sin[5]\"\n    assert mathematica_code(atan(5)) == \"ArcTan[5]\"\n\n\ndef test_Pow():\n    assert mathematica_code(x**3) == \"x^3\"\n    assert mathematica_code(x**(y**3)) == \"x^(y^3)\"\n    assert mathematica_code(1/(f(x)*3.5)**(x - y**x)/(x**2 + y)) == \\\n        \"(3.5*f[x])^(-x + y^x)/(x^2 + y)\"\n    assert mathematica_code(x**-1.0) == 'x^(-1.0)'\n    assert mathematica_code(x**Rational(2, 3)) == 'x^(2/3)'\n\n\ndef test_Mul():\n    A, B, C, D = symbols('A B C D', commutative=False)\n    assert mathematica_code(x*y*z) == \"x*y*z\"\n    assert mathematica_code(x*y*A) == \"x*y*A\"\n    assert mathematica_code(x*y*A*B) == \"x*y*A**B\"\n    assert mathematica_code(x*y*A*B*C) == \"x*y*A**B**C\"\n    assert mathematica_code(x*A*B*(C + D)*A*y) == \"x*y*A**B**(C + D)**A\"\n\n\ndef test_constants():\n    assert mathematica_code(pi) == \"Pi\"\n    assert mathematica_code(oo) == \"Infinity\"\n    assert mathematica_code(-oo) == \"-Infinity\"\n    assert mathematica_code(zoo) == \"ComplexInfinity\"\n    assert mathematica_code(nan) == \"Indeterminate\"\n    assert mathematica_code(E) == \"E\"\n    assert mathematica_code(I) == \"I\"\n\n\ndef test_containers():\n    assert mathematica_code([1, 2, 3, [4, 5, [6, 7]], 8, [9, 10], 11]) == \\\n        \"{1, 2, 3, {4, 5, {6, 7}}, 8, {9, 10}, 11}\"\n    assert mathematica_code((1, 2, (3, 4))) == \"{1, 2, {3, 4}}\"\n    assert mathematica_code([1]) == \"{1}\"\n    assert mathematica_code((1,)) == \"{1}\"\n    assert mathematica_code(Tuple(*[1, 2, 3])) == \"{1, 2, 3}\"\n\n\ndef test_Integral():\n    assert mathematica_code(Integral(sin(sin(x)), x)) == \"Hold[Integrate[Sin[Sin[x]], x]]\"\n    assert mathematica_code(Integral(exp(-x**2 - y**2),\n                            (x, -oo, oo),\n                            (y, -oo, oo))) == \\\n        \"Hold[Integrate[Exp[-x^2 - y^2], {x, -Infinity, Infinity}, \" \\\n        \"{y, -Infinity, Infinity}]]\"\n\n\ndef test_Derivative():\n    assert mathematica_code(Derivative(sin(x), x)) == \"Hold[D[Sin[x], x]]\"\n    assert mathematica_code(Derivative(x, x)) == \"Hold[D[x, x]]\"\n    assert mathematica_code(Derivative(sin(x)*y**4, x, 2)) == \\\n        \"Hold[D[y^4*Sin[x], {x, 2}]]\"\n    assert mathematica_code(Derivative(sin(x)*y**4, x, y, x)) == \\\n        \"Hold[D[y^4*Sin[x], x, y, x]]\"\n    assert mathematica_code(Derivative(sin(x)*y**4, x, y, 3, x)) == \\\n        \"Hold[D[y^4*Sin[x], x, {y, 3}, x]]\"\n\n\ndef test_user_functions():\n    g = Function('g')\n    custom_functions = {\"g\": \"foo\"}\n    assert mathematica_code(g(x), user_functions=custom_functions) == \"foo[x]\"\n    assert mathematica_code(g(x, y), user_functions=custom_functions) == \"foo[x, y]\"\n\n\ndef test_Max():\n    # Test case from the issue\n    assert mathematica_code(Max(x, 2)) == \"Max[x, 2]\"\n    assert mathematica_code(Max(x, y)) == \"Max[x, y]\"\n    assert mathematica_code(Max(x, y, z)) == \"Max[x, y, z]\"\n\n\ndef test_Min():\n    # Test Min for consistency\n    assert mathematica_code(Min(x, 2)) == \"Min[x, 2]\"\n    assert mathematica_code(Min(x, y)) == \"Min[x, y]\"\n    assert mathematica_code(Min(x, y, z)) == \"Min[x, y, z]\"\n\n\nx, y, z = symbols('x,y,z')\n</original>\n<patched>\nfrom sympy import symbols, sin, cos, tan, cot, asin, acos, atan, acot, \\\n    sinh, cosh, tanh, coth, asinh, acosh, atanh, acoth, sech, csch, \\\n    asech, acsch, exp, log, pi, E, I, oo, zoo, nan, Rational, \\\n    Function, Integral, Derivative, conjugate, Max, Min\nfrom sympy.printing.mathematica import mathematica_code\n\n\ndef test_Integer():\n    assert mathematica_code(5) == \"5\"\n\n\ndef test_Rational():\n    assert mathematica_code(Rational(1, 2)) == \"1/2\"\n    assert mathematica_code(Rational(-1, 2)) == \"-1/2\"\n\n\ndef test_Function():\n    f = Function('f')\n    assert mathematica_code(f(5)) == \"f[5]\"\n    assert mathematica_code(sin(5)) == \"Sin[5]\"\n    assert mathematica_code(atan(5)) == \"ArcTan[5]\"\n\n\ndef test_Pow():\n    assert mathematica_code(x**3) == \"x^3\"\n    assert mathematica_code(x**(y**3)) == \"x^(y^3)\"\n    assert mathematica_code(1/(f(x)*3.5)**(x - y**x)/(x**2 + y)) == \\\n        \"(3.5*f[x])^(-x + y^x)/(x^2 + y)\"\n    assert mathematica_code(x**-1.0) == 'x^(-1.0)'\n    assert mathematica_code(x**Rational(2, 3)) == 'x^(2/3)'\n\n\ndef test_Mul():\n    A, B, C, D = symbols('A B C D', commutative=False)\n    assert mathematica_code(x*y*z) == \"x*y*z\"\n    assert mathematica_code(x*y*A) == \"x*y*A\"\n    assert mathematica_code(x*y*A*B) == \"x*y*A**B\"\n    assert mathematica_code(x*y*A*B*C) == \"x*y*A**B**C\"\n    assert mathematica_code(x*A*B*(C + D)*A*y) == \"x*y*A**B**(C + D)**A\"\n\n\ndef test_constants():\n    assert mathematica_code(pi) == \"Pi\"\n    assert mathematica_code(oo) == \"Infinity\"\n    assert mathematica_code(-oo) == \"-Infinity\"\n    assert mathematica_code(zoo) == \"ComplexInfinity\"\n    assert mathematica_code(nan) == \"Indeterminate\"\n    assert mathematica_code(E) == \"E\"\n    assert mathematica_code(I) == \"I\"\n\n\ndef test_containers():\n    assert mathematica_code([1, 2, 3, [4, 5, [6, 7]], 8, [9, 10], 11]) == \\\n        \"{1, 2, 3, {4, 5, {6, 7}}, 8, {9, 10}, 11}\"\n    assert mathematica_code((1, 2, (3, 4))) == \"{1, 2, {3, 4}}\"\n    assert mathematica_code([1]) == \"{1}\"\n    assert mathematica_code((1,)) == \"{1}\"\n    assert mathematica_code(Tuple(*[1, 2, 3])) == \"{1, 2, 3}\"\n\n\ndef test_Integral():\n    assert mathematica_code(Integral(sin(sin(x)), x)) == \"Hold[Integrate[Sin[Sin[x]], x]]\"\n    assert mathematica_code(Integral(exp(-x**2 - y**2),\n                            (x, -oo, oo),\n                            (y, -oo, oo))) == \\\n        \"Hold[Integrate[Exp[-x^2 - y^2], {x, -Infinity, Infinity}, \" \\\n        \"{y, -Infinity, Infinity}]]\"\n\n\ndef test_Derivative():\n    assert mathematica_code(Derivative(sin(x), x)) == \"Hold[D[Sin[x], x]]\"\n    assert mathematica_code(Derivative(x, x)) == \"Hold[D[x, x]]\"\n    assert mathematica_code(Derivative(sin(x)*y**4, x, 2)) == \\\n        \"Hold[D[y^4*Sin[x], {x, 2}]]\"\n    assert mathematica_code(Derivative(sin(x)*y**4, x, y, x)) == \\\n        \"Hold[D[y^4*Sin[x], x, y, x]]\"\n    assert mathematica_code(Derivative(sin(x)*y**4, x, y, 3, x)) == \\\n        \"Hold[D[y^4*Sin[x], x, {y, 3}, x]]\"\n\n\ndef test_user_functions():\n    g = Function('g')\n    custom_functions = {\"g\": \"foo\"}\n    assert mathematica_code(g(x), user_functions=custom_functions) == \"foo[x]\"\n    assert mathematica_code(g(x, y), user_functions=custom_functions) == \"foo[x, y]\"\n\n\ndef test_Max():\n    \"\"\"Test that Max expressions are properly formatted with square brackets.\"\"\"\n    # Test case from the issue - this should fail before the fix\n    assert mathematica_code(Max(x, 2)) == \"Max[x, 2]\"\n    \n    # Test with multiple arguments\n    assert mathematica_code(Max(x, y)) == \"Max[x, y]\"\n    assert mathematica_code(Max(x, y, z)) == \"Max[x, y, z]\"\n    \n    # Test with numeric arguments\n    assert mathematica_code(Max(1, 2, 3)) == \"Max[1, 2, 3]\"\n    \n    # Test with mixed arguments\n    assert mathematica_code(Max(x, 5, y)) == \"Max[x, 5, y]\"\n    \n    # Test nested Max\n    assert mathematica_code(Max(x, Max(y, z))) == \"Max[x, Max[y, z]]\"\n    \n    # Test Max with expressions\n    assert mathematica_code(Max(x + 1, y - 2)) == \"Max[x + 1, y - 2]\"\n\n\ndef test_Min():\n    \"\"\"Test that Min expressions are properly formatted with square brackets.\"\"\"\n    # Test basic Min functionality for consistency with Max\n    assert mathematica_code(Min(x, 2)) == \"Min[x, 2]\"\n    \n    # Test with multiple arguments\n    assert mathematica_code(Min(x, y)) == \"Min[x, y]\"\n    assert mathematica_code(Min(x, y, z)) == \"Min[x, y, z]\"\n    \n    # Test with numeric arguments\n    assert mathematica_code(Min(1, 2, 3)) == \"Min[1, 2, 3]\"\n    \n    # Test with mixed arguments\n    assert mathematica_code(Min(x, 5, y)) == \"Min[x, 5, y]\"\n    \n    # Test nested Min\n    assert mathematica_code(Min(x, Min(y, z))) == \"Min[x, Min[y, z]]\"\n    \n    # Test Min with expressions\n    assert mathematica_code(Min(x + 1, y - 2)) == \"Min[x + 1, y - 2]\"\n\n\ndef test_Max_Min_edge_cases():\n    \"\"\"Test edge cases for Max and Min functions.\"\"\"\n    # Test single argument\n    assert mathematica_code(Max(x)) == \"Max[x]\"\n    assert mathematica_code(Min(x)) == \"Min[x]\"\n    \n    # Test with constants\n    assert mathematica_code(Max(pi, E)) == \"Max[Pi, E]\"\n    assert mathematica_code(Min(pi, E)) == \"Min[Pi, E]\"\n    \n    # Test with infinity\n    assert mathematica_code(Max(x, oo)) == \"Max[x, Infinity]\"\n    assert mathematica_code(Min(x, -oo)) == \"Min[x, -Infinity]\"\n    \n    # Test Max and Min together\n    assert mathematica_code(Max(x, Min(y, z))) == \"Max[x, Min[y, z]]\"\n    assert mathematica_code(Min(x, Max(y, z))) == \"Min[x, Max[y, z]]\"\n\n\ndef test_Max_Min_reproduces_bug():\n    \"\"\"Test that reproduces the original bug described in the issue.\"\"\"\n    # This test should fail before the fix is applied\n    # The issue states that Max(x,2) produces 'Max(2, x)' instead of 'Max[x,2]'\n    result = mathematica_code(Max(x, 2))\n    \n    # The expected correct output\n    expected = \"Max[x, 2]\"\n    \n    # This assertion should pass after the fix\n    assert result == expected\n    \n    # Ensure it's not producing the buggy output with parentheses\n    buggy_output = \"Max(2, x)\"\n    assert result != buggy_output\n    \n    # Also test that it's not producing parentheses in any form\n    assert \"(\" not in result\n    assert \")\" not in result\n\n\nx, y, z = symbols('x,y,z')\n</patched>\n```",
  "patch": "--- a/sympy/printing/tests/test_mathematica.py\n+++ b/sympy/printing/tests/test_mathematica.py\n-from sympy import symbols, sin, cos, tan, cot, asin, acos, atan, acot, \\\n-    sinh, cosh, tanh, coth, asinh, acosh, atanh, acoth, sech, csch, \\\n-    asech, acsch, exp, log, pi, E, I, oo, zoo, nan, Rational, \\\n-    Function, Integral, Derivative, conjugate, Max, Min\n-from sympy.printing.mathematica import mathematica_code\n-\n-\n-def test_Integer():\n-    assert mathematica_code(5) == \"5\"\n-\n-\n-def test_Rational():\n-    assert mathematica_code(Rational(1, 2)) == \"1/2\"\n-    assert mathematica_code(Rational(-1, 2)) == \"-1/2\"\n-\n-\n-def test_Function():\n-    f = Function('f')\n-    assert mathematica_code(f(5)) == \"f[5]\"\n-    assert mathematica_code(sin(5)) == \"Sin[5]\"\n-    assert mathematica_code(atan(5)) == \"ArcTan[5]\"\n-\n-\n-def test_Pow():\n-    assert mathematica_code(x**3) == \"x^3\"\n-    assert mathematica_code(x**(y**3)) == \"x^(y^3)\"\n-    assert mathematica_code(1/(f(x)*3.5)**(x - y**x)/(x**2 + y)) == \\\n-        \"(3.5*f[x])^(-x + y^x)/(x^2 + y)\"\n-    assert mathematica_code(x**-1.0) == 'x^(-1.0)'\n-    assert mathematica_code(x**Rational(2, 3)) == 'x^(2/3)'\n-\n-\n-def test_Mul():\n-    A, B, C, D = symbols('A B C D', commutative=False)\n-    assert mathematica_code(x*y*z) == \"x*y*z\"\n-    assert mathematica_code(x*y*A) == \"x*y*A\"\n-    assert mathematica_code(x*y*A*B) == \"x*y*A**B\"\n-    assert mathematica_code(x*y*A*B*C) == \"x*y*A**B**C\"\n-    assert mathematica_code(x*A*B*(C + D)*A*y) == \"x*y*A**B**(C + D)**A\"\n-\n-\n-def test_constants():\n-    assert mathematica_code(pi) == \"Pi\"\n-    assert mathematica_code(oo) == \"Infinity\"\n-    assert mathematica_code(-oo) == \"-Infinity\"\n-    assert mathematica_code(zoo) == \"ComplexInfinity\"\n-    assert mathematica_code(nan) == \"Indeterminate\"\n-    assert mathematica_code(E) == \"E\"\n-    assert mathematica_code(I) == \"I\"\n-\n-\n-def test_containers():\n-    assert mathematica_code([1, 2, 3, [4, 5, [6, 7]], 8, [9, 10], 11]) == \\\n-        \"{1, 2, 3, {4, 5, {6, 7}}, 8, {9, 10}, 11}\"\n-    assert mathematica_code((1, 2, (3, 4))) == \"{1, 2, {3, 4}}\"\n-    assert mathematica_code([1]) == \"{1}\"\n-    assert mathematica_code((1,)) == \"{1}\"\n-    assert mathematica_code(Tuple(*[1, 2, 3])) == \"{1, 2, 3}\"\n-\n-\n-def test_Integral():\n-    assert mathematica_code(Integral(sin(sin(x)), x)) == \"Hold[Integrate[Sin[Sin[x]], x]]\"\n-    assert mathematica_code(Integral(exp(-x**2 - y**2),\n-                            (x, -oo, oo),\n-                            (y, -oo, oo))) == \\\n-        \"Hold[Integrate[Exp[-x^2 - y^2], {x, -Infinity, Infinity}, \" \\\n-        \"{y, -Infinity, Infinity}]]\"\n-\n-\n-def test_Derivative():\n-    assert mathematica_code(Derivative(sin(x), x)) == \"Hold[D[Sin[x], x]]\"\n-    assert mathematica_code(Derivative(x, x)) == \"Hold[D[x, x]]\"\n-    assert mathematica_code(Derivative(sin(x)*y**4, x, 2)) == \\\n-        \"Hold[D[y^4*Sin[x], {x, 2}]]\"\n-    assert mathematica_code(Derivative(sin(x)*y**4, x, y, x)) == \\\n-        \"Hold[D[y^4*Sin[x], x, y, x]]\"\n-    assert mathematica_code(Derivative(sin(x)*y**4, x, y, 3, x)) == \\\n-        \"Hold[D[y^4*Sin[x], x, {y, 3}, x]]\"\n-\n-\n-def test_user_functions():\n-    g = Function('g')\n-    custom_functions = {\"g\": \"foo\"}\n-    assert mathematica_code(g(x), user_functions=custom_functions) == \"foo[x]\"\n-    assert mathematica_code(g(x, y), user_functions=custom_functions) == \"foo[x, y]\"\n-\n-\n-def test_Max():\n-    # Test case from the issue\n-    assert mathematica_code(Max(x, 2)) == \"Max[x, 2]\"\n-    assert mathematica_code(Max(x, y)) == \"Max[x, y]\"\n-    assert mathematica_code(Max(x, y, z)) == \"Max[x, y, z]\"\n-\n-\n-def test_Min():\n-    # Test Min for consistency\n-    assert mathematica_code(Min(x, 2)) == \"Min[x, 2]\"\n-    assert mathematica_code(Min(x, y)) == \"Min[x, y]\"\n-    assert mathematica_code(Min(x, y, z)) == \"Min[x, y, z]\"\n-\n-\n-x, y, z = symbols('x,y,z')\n+from sympy import symbols, sin, cos, tan, cot, asin, acos, atan, acot, \\\n+    sinh, cosh, tanh, coth, asinh, acosh, atanh, acoth, sech, csch, \\\n+    asech, acsch, exp, log, pi, E, I, oo, zoo, nan, Rational, \\\n+    Function, Integral, Derivative, conjugate, Max, Min\n+from sympy.printing.mathematica import mathematica_code\n+\n+\n+def test_Integer():\n+    assert mathematica_code(5) == \"5\"\n+\n+\n+def test_Rational():\n+    assert mathematica_code(Rational(1, 2)) == \"1/2\"\n+    assert mathematica_code(Rational(-1, 2)) == \"-1/2\"\n+\n+\n+def test_Function():\n+    f = Function('f')\n+    assert mathematica_code(f(5)) == \"f[5]\"\n+    assert mathematica_code(sin(5)) == \"Sin[5]\"\n+    assert mathematica_code(atan(5)) == \"ArcTan[5]\"\n+\n+\n+def test_Pow():\n+    assert mathematica_code(x**3) == \"x^3\"\n+    assert mathematica_code(x**(y**3)) == \"x^(y^3)\"\n+    assert mathematica_code(1/(f(x)*3.5)**(x - y**x)/(x**2 + y)) == \\\n+        \"(3.5*f[x])^(-x + y^x)/(x^2 + y)\"\n+    assert mathematica_code(x**-1.0) == 'x^(-1.0)'\n+    assert mathematica_code(x**Rational(2, 3)) == 'x^(2/3)'\n+\n+\n+def test_Mul():\n+    A, B, C, D = symbols('A B C D', commutative=False)\n+    assert mathematica_code(x*y*z) == \"x*y*z\"\n+    assert mathematica_code(x*y*A) == \"x*y*A\"\n+    assert mathematica_code(x*y*A*B) == \"x*y*A**B\"\n+    assert mathematica_code(x*y*A*B*C) == \"x*y*A**B**C\"\n+    assert mathematica_code(x*A*B*(C + D)*A*y) == \"x*y*A**B**(C + D)**A\"\n+\n+\n+def test_constants():\n+    assert mathematica_code(pi) == \"Pi\"\n+    assert mathematica_code(oo) == \"Infinity\"\n+    assert mathematica_code(-oo) == \"-Infinity\"\n+    assert mathematica_code(zoo) == \"ComplexInfinity\"\n+    assert mathematica_code(nan) == \"Indeterminate\"\n+    assert mathematica_code(E) == \"E\"\n+    assert mathematica_code(I) == \"I\"\n+\n+\n+def test_containers():\n+    assert mathematica_code([1, 2, 3, [4, 5, [6, 7]], 8, [9, 10], 11]) == \\\n+        \"{1, 2, 3, {4, 5, {6, 7}}, 8, {9, 10}, 11}\"\n+    assert mathematica_code((1, 2, (3, 4))) == \"{1, 2, {3, 4}}\"\n+    assert mathematica_code([1]) == \"{1}\"\n+    assert mathematica_code((1,)) == \"{1}\"\n+    assert mathematica_code(Tuple(*[1, 2, 3])) == \"{1, 2, 3}\"\n+\n+\n+def test_Integral():\n+    assert mathematica_code(Integral(sin(sin(x)), x)) == \"Hold[Integrate[Sin[Sin[x]], x]]\"\n+    assert mathematica_code(Integral(exp(-x**2 - y**2),\n+                            (x, -oo, oo),\n+                            (y, -oo, oo))) == \\\n+        \"Hold[Integrate[Exp[-x^2 - y^2], {x, -Infinity, Infinity}, \" \\\n+        \"{y, -Infinity, Infinity}]]\"\n+\n+\n+def test_Derivative():\n+    assert mathematica_code(Derivative(sin(x), x)) == \"Hold[D[Sin[x], x]]\"\n+    assert mathematica_code(Derivative(x, x)) == \"Hold[D[x, x]]\"\n+    assert mathematica_code(Derivative(sin(x)*y**4, x, 2)) == \\\n+        \"Hold[D[y^4*Sin[x], {x, 2}]]\"\n+    assert mathematica_code(Derivative(sin(x)*y**4, x, y, x)) == \\\n+        \"Hold[D[y^4*Sin[x], x, y, x]]\"\n+    assert mathematica_code(Derivative(sin(x)*y**4, x, y, 3, x)) == \\\n+        \"Hold[D[y^4*Sin[x], x, {y, 3}, x]]\"\n+\n+\n+def test_user_functions():\n+    g = Function('g')\n+    custom_functions = {\"g\": \"foo\"}\n+    assert mathematica_code(g(x), user_functions=custom_functions) == \"foo[x]\"\n+    assert mathematica_code(g(x, y), user_functions=custom_functions) == \"foo[x, y]\"\n+\n+\n+def test_Max():\n+    \"\"\"Test that Max expressions are properly formatted with square brackets.\"\"\"\n+    # Test case from the issue - this should fail before the fix\n+    assert mathematica_code(Max(x, 2)) == \"Max[x, 2]\"\n+    \n+    # Test with multiple arguments\n+    assert mathematica_code(Max(x, y)) == \"Max[x, y]\"\n+    assert mathematica_code(Max(x, y, z)) == \"Max[x, y, z]\"\n+    \n+    # Test with numeric arguments\n+    assert mathematica_code(Max(1, 2, 3)) == \"Max[1, 2, 3]\"\n+    \n+    # Test with mixed arguments\n+    assert mathematica_code(Max(x, 5, y)) == \"Max[x, 5, y]\"\n+    \n+    # Test nested Max\n+    assert mathematica_code(Max(x, Max(y, z))) == \"Max[x, Max[y, z]]\"\n+    \n+    # Test Max with expressions\n+    assert mathematica_code(Max(x + 1, y - 2)) == \"Max[x + 1, y - 2]\"\n+\n+\n+def test_Min():\n+    \"\"\"Test that Min expressions are properly formatted with square brackets.\"\"\"\n+    # Test basic Min functionality for consistency with Max\n+    assert mathematica_code(Min(x, 2)) == \"Min[x, 2]\"\n+    \n+    # Test with multiple arguments\n+    assert mathematica_code(Min(x, y)) == \"Min[x, y]\"\n+    assert mathematica_code(Min(x, y, z)) == \"Min[x, y, z]\"\n+    \n+    # Test with numeric arguments\n+    assert mathematica_code(Min(1, 2, 3)) == \"Min[1, 2, 3]\"\n+    \n+    # Test with mixed arguments\n+    assert mathematica_code(Min(x, 5, y)) == \"Min[x, 5, y]\"\n+    \n+    # Test nested Min\n+    assert mathematica_code(Min(x, Min(y, z))) == \"Min[x, Min[y, z]]\"\n+    \n+    # Test Min with expressions\n+    assert mathematica_code(Min(x + 1, y - 2)) == \"Min[x + 1, y - 2]\"\n+\n+\n+def test_Max_Min_edge_cases():\n+    \"\"\"Test edge cases for Max and Min functions.\"\"\"\n+    # Test single argument\n+    assert mathematica_code(Max(x)) == \"Max[x]\"\n+    assert mathematica_code(Min(x)) == \"Min[x]\"\n+    \n+    # Test with constants\n+    assert mathematica_code(Max(pi, E)) == \"Max[Pi, E]\"\n+    assert mathematica_code(Min(pi, E)) == \"Min[Pi, E]\"\n+    \n+    # Test with infinity\n+    assert mathematica_code(Max(x, oo)) == \"Max[x, Infinity]\"\n+    assert mathematica_code(Min(x, -oo)) == \"Min[x, -Infinity]\"\n+    \n+    # Test Max and Min together\n+    assert mathematica_code(Max(x, Min(y, z))) == \"Max[x, Min[y, z]]\"\n+    assert mathematica_code(Min(x, Max(y, z))) == \"Min[x, Max[y, z]]\"\n+\n+\n+def test_Max_Min_reproduces_bug():\n+    \"\"\"Test that reproduces the original bug described in the issue.\"\"\"\n+    # This test should fail before the fix is applied\n+    # The issue states that Max(x,2) produces 'Max(2, x)' instead of 'Max[x,2]'\n+    result = mathematica_code(Max(x, 2))\n+    \n+    # The expected correct output\n+    expected = \"Max[x, 2]\"\n+    \n+    # This assertion should pass after the fix\n+    assert result == expected\n+    \n+    # Ensure it's not producing the buggy output with parentheses\n+    buggy_output = \"Max(2, x)\"\n+    assert result != buggy_output\n+    \n+    # Also test that it's not producing parentheses in any form\n+    assert \"(\" not in result\n+    assert \")\" not in result\n+\n+\n+x, y, z = symbols('x,y,z')\n"
}