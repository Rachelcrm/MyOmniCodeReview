{
  "instance_id": "pytest-dev__pytest-10081",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>testing/test_unittest_skip_class_pdb.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\n\"\"\"Test for unittest.TestCase.tearDown executed for classes marked with unittest.skip when running --pdb\"\"\"\nimport pytest\nimport unittest\nimport textwrap\n\n\nclass TestUnittestSkipClassPdb:\n    \"\"\"Test that tearDown is not executed for classes marked with @unittest.skip when using --pdb.\"\"\"\n\n    def test_unittest_skip_class_teardown_not_executed_with_pdb(self, pytester):\n        \"\"\"Test that tearDown is not executed for @unittest.skip decorated classes when using --pdb.\"\"\"\n        # Create a test file with a class decorated with @unittest.skip\n        # The tearDown method contains invalid code that would raise NameError if executed\n        pytester.makepyfile(\n            test_skip_class=textwrap.dedent(\n                \"\"\"\n                import unittest\n\n                @unittest.skip(\"skip entire class\")\n                class TestSkippedClass(unittest.TestCase):\n                    def setUp(self):\n                        # This should not be executed\n                        xxx\n                    \n                    def test_one(self):\n                        # This should not be executed\n                        pass\n                    \n                    def tearDown(self):\n                        # This should not be executed - would raise NameError if it runs\n                        xxx\n                \"\"\"\n            )\n        )\n\n        # Run with --pdb - this should NOT execute tearDown and should not raise NameError\n        result = pytester.runpytest(\"--pdb\", \"-s\")\n        \n        # The test should be skipped without any errors\n        result.assert_outcomes(skipped=1)\n        \n        # Should not contain NameError in the output\n        assert \"NameError\" not in result.stdout.str()\n        assert \"xxx\" not in result.stdout.str()\n\n    def test_unittest_skip_class_teardown_not_executed_without_pdb(self, pytester):\n        \"\"\"Test that tearDown is not executed for @unittest.skip decorated classes without --pdb (baseline).\"\"\"\n        # Create a test file with a class decorated with @unittest.skip\n        pytester.makepyfile(\n            test_skip_class=textwrap.dedent(\n                \"\"\"\n                import unittest\n\n                @unittest.skip(\"skip entire class\")\n                class TestSkippedClass(unittest.TestCase):\n                    def setUp(self):\n                        # This should not be executed\n                        xxx\n                    \n                    def test_one(self):\n                        # This should not be executed\n                        pass\n                    \n                    def tearDown(self):\n                        # This should not be executed\n                        xxx\n                \"\"\"\n            )\n        )\n\n        # Run without --pdb - this should work fine (baseline test)\n        result = pytester.runpytest()\n        \n        # The test should be skipped without any errors\n        result.assert_outcomes(skipped=1)\n        \n        # Should not contain NameError in the output\n        assert \"NameError\" not in result.stdout.str()\n\n    def test_unittest_skip_method_teardown_not_executed_with_pdb(self, pytester):\n        \"\"\"Test that tearDown is not executed for @unittest.skip decorated methods when using --pdb (existing behavior).\"\"\"\n        # Create a test file with a method decorated with @unittest.skip\n        pytester.makepyfile(\n            test_skip_method=textwrap.dedent(\n                \"\"\"\n                import unittest\n\n                class TestSkippedMethod(unittest.TestCase):\n                    def setUp(self):\n                        # This should not be executed for skipped method\n                        xxx\n                    \n                    @unittest.skip(\"skip this method\")\n                    def test_one(self):\n                        # This should not be executed\n                        pass\n                    \n                    def tearDown(self):\n                        # This should not be executed for skipped method\n                        xxx\n                \"\"\"\n            )\n        )\n\n        # Run with --pdb - this should NOT execute tearDown for skipped method\n        result = pytester.runpytest(\"--pdb\", \"-s\")\n        \n        # The test should be skipped without any errors\n        result.assert_outcomes(skipped=1)\n        \n        # Should not contain NameError in the output\n        assert \"NameError\" not in result.stdout.str()\n\n    def test_unittest_normal_class_teardown_executed_with_pdb(self, pytester):\n        \"\"\"Test that tearDown IS executed for normal (non-skipped) classes when using --pdb.\"\"\"\n        # Create a test file with a normal class (not skipped)\n        pytester.makepyfile(\n            test_normal_class=textwrap.dedent(\n                \"\"\"\n                import unittest\n\n                class TestNormalClass(unittest.TestCase):\n                    def setUp(self):\n                        self.setup_called = True\n                    \n                    def test_one(self):\n                        assert self.setup_called\n                    \n                    def tearDown(self):\n                        # This should be executed for normal tests\n                        # We'll write to a file to verify it was called\n                        with open(\"teardown_called.txt\", \"w\") as f:\n                            f.write(\"teardown executed\")\n                \"\"\"\n            )\n        )\n\n        # Run with --pdb\n        result = pytester.runpytest(\"--pdb\", \"-s\")\n        \n        # The test should pass\n        result.assert_outcomes(passed=1)\n        \n        # Verify tearDown was called by checking if the file was created\n        teardown_file = pytester.path / \"teardown_called.txt\"\n        assert teardown_file.exists()\n        assert teardown_file.read_text() == \"teardown executed\"\n\n    def test_unittest_skip_class_with_inheritance_pdb(self, pytester):\n        \"\"\"Test that tearDown is not executed for @unittest.skip decorated classes with inheritance when using --pdb.\"\"\"\n        # Create a test file with inheritance where the child class is skipped\n        pytester.makepyfile(\n            test_skip_inheritance=textwrap.dedent(\n                \"\"\"\n                import unittest\n\n                class BaseTestCase(unittest.TestCase):\n                    def setUp(self):\n                        # This should not be executed\n                        xxx\n                    \n                    def tearDown(self):\n                        # This should not be executed\n                        xxx\n\n                @unittest.skip(\"skip child class\")\n                class TestSkippedChild(BaseTestCase):\n                    def test_one(self):\n                        # This should not be executed\n                        pass\n                \"\"\"\n            )\n        )\n\n        # Run with --pdb - this should NOT execute tearDown and should not raise NameError\n        result = pytester.runpytest(\"--pdb\", \"-s\")\n        \n        # The test should be skipped without any errors\n        result.assert_outcomes(skipped=1)\n        \n        # Should not contain NameError in the output\n        assert \"NameError\" not in result.stdout.str()\n\n    def test_unittest_skip_class_multiple_tests_pdb(self, pytester):\n        \"\"\"Test that tearDown is not executed for @unittest.skip decorated classes with multiple test methods when using --pdb.\"\"\"\n        # Create a test file with multiple test methods in a skipped class\n        pytester.makepyfile(\n            test_skip_multiple=textwrap.dedent(\n                \"\"\"\n                import unittest\n\n                @unittest.skip(\"skip entire class with multiple tests\")\n                class TestSkippedMultiple(unittest.TestCase):\n                    def setUp(self):\n                        # This should not be executed\n                        xxx\n                    \n                    def test_one(self):\n                        # This should not be executed\n                        pass\n                    \n                    def test_two(self):\n                        # This should not be executed\n                        pass\n                    \n                    def test_three(self):\n                        # This should not be executed\n                        pass\n                    \n                    def tearDown(self):\n                        # This should not be executed for any test\n                        xxx\n                \"\"\"\n            )\n        )\n\n        # Run with --pdb - this should NOT execute tearDown for any test\n        result = pytester.runpytest(\"--pdb\", \"-s\")\n        \n        # All tests should be skipped without any errors\n        result.assert_outcomes(skipped=3)\n        \n        # Should not contain NameError in the output\n        assert \"NameError\" not in result.stdout.str()\n\n    def test_unittest_mixed_skip_scenarios_pdb(self, pytester):\n        \"\"\"Test mixed scenarios with both class-level and method-level skips when using --pdb.\"\"\"\n        # Create a test file with mixed skip scenarios\n        pytester.makepyfile(\n            test_mixed_skip=textwrap.dedent(\n                \"\"\"\n                import unittest\n\n                @unittest.skip(\"skip entire class\")\n                class TestSkippedClass(unittest.TestCase):\n                    def tearDown(self):\n                        # This should not be executed\n                        xxx_class\n                    \n                    def test_one(self):\n                        pass\n\n                class TestNormalClass(unittest.TestCase):\n                    def setUp(self):\n                        self.setup_called = True\n                    \n                    @unittest.skip(\"skip this method\")\n                    def test_skipped_method(self):\n                        pass\n                    \n                    def test_normal_method(self):\n                        assert self.setup_called\n                    \n                    def tearDown(self):\n                        # This should only be executed for test_normal_method\n                        if hasattr(self, 'setup_called'):\n                            with open(\"teardown_normal.txt\", \"w\") as f:\n                                f.write(\"teardown for normal test\")\n                \"\"\"\n            )\n        )\n\n        # Run with --pdb\n        result = pytester.runpytest(\"--pdb\", \"-s\")\n        \n        # Should have 1 passed, 2 skipped\n        result.assert_outcomes(passed=1, skipped=2)\n        \n        # Should not contain NameError for the skipped class\n        assert \"xxx_class\" not in result.stdout.str()\n        assert \"NameError\" not in result.stdout.str()\n        \n        # Verify tearDown was called only for the normal test\n        teardown_file = pytester.path / \"teardown_normal.txt\"\n        assert teardown_file.exists()\n        assert teardown_file.read_text() == \"teardown for normal test\"\n</patched>\n```",
  "patch": "--- a/testing/test_unittest_skip_class_pdb.py\n+++ b/testing/test_unittest_skip_class_pdb.py\n-# Empty if creating new file\n+\"\"\"Test for unittest.TestCase.tearDown executed for classes marked with unittest.skip when running --pdb\"\"\"\n+import pytest\n+import unittest\n+import textwrap\n+\n+\n+class TestUnittestSkipClassPdb:\n+    \"\"\"Test that tearDown is not executed for classes marked with @unittest.skip when using --pdb.\"\"\"\n+\n+    def test_unittest_skip_class_teardown_not_executed_with_pdb(self, pytester):\n+        \"\"\"Test that tearDown is not executed for @unittest.skip decorated classes when using --pdb.\"\"\"\n+        # Create a test file with a class decorated with @unittest.skip\n+        # The tearDown method contains invalid code that would raise NameError if executed\n+        pytester.makepyfile(\n+            test_skip_class=textwrap.dedent(\n+                \"\"\"\n+                import unittest\n+\n+                @unittest.skip(\"skip entire class\")\n+                class TestSkippedClass(unittest.TestCase):\n+                    def setUp(self):\n+                        # This should not be executed\n+                        xxx\n+                    \n+                    def test_one(self):\n+                        # This should not be executed\n+                        pass\n+                    \n+                    def tearDown(self):\n+                        # This should not be executed - would raise NameError if it runs\n+                        xxx\n+                \"\"\"\n+            )\n+        )\n+\n+        # Run with --pdb - this should NOT execute tearDown and should not raise NameError\n+        result = pytester.runpytest(\"--pdb\", \"-s\")\n+        \n+        # The test should be skipped without any errors\n+        result.assert_outcomes(skipped=1)\n+        \n+        # Should not contain NameError in the output\n+        assert \"NameError\" not in result.stdout.str()\n+        assert \"xxx\" not in result.stdout.str()\n+\n+    def test_unittest_skip_class_teardown_not_executed_without_pdb(self, pytester):\n+        \"\"\"Test that tearDown is not executed for @unittest.skip decorated classes without --pdb (baseline).\"\"\"\n+        # Create a test file with a class decorated with @unittest.skip\n+        pytester.makepyfile(\n+            test_skip_class=textwrap.dedent(\n+                \"\"\"\n+                import unittest\n+\n+                @unittest.skip(\"skip entire class\")\n+                class TestSkippedClass(unittest.TestCase):\n+                    def setUp(self):\n+                        # This should not be executed\n+                        xxx\n+                    \n+                    def test_one(self):\n+                        # This should not be executed\n+                        pass\n+                    \n+                    def tearDown(self):\n+                        # This should not be executed\n+                        xxx\n+                \"\"\"\n+            )\n+        )\n+\n+        # Run without --pdb - this should work fine (baseline test)\n+        result = pytester.runpytest()\n+        \n+        # The test should be skipped without any errors\n+        result.assert_outcomes(skipped=1)\n+        \n+        # Should not contain NameError in the output\n+        assert \"NameError\" not in result.stdout.str()\n+\n+    def test_unittest_skip_method_teardown_not_executed_with_pdb(self, pytester):\n+        \"\"\"Test that tearDown is not executed for @unittest.skip decorated methods when using --pdb (existing behavior).\"\"\"\n+        # Create a test file with a method decorated with @unittest.skip\n+        pytester.makepyfile(\n+            test_skip_method=textwrap.dedent(\n+                \"\"\"\n+                import unittest\n+\n+                class TestSkippedMethod(unittest.TestCase):\n+                    def setUp(self):\n+                        # This should not be executed for skipped method\n+                        xxx\n+                    \n+                    @unittest.skip(\"skip this method\")\n+                    def test_one(self):\n+                        # This should not be executed\n+                        pass\n+                    \n+                    def tearDown(self):\n+                        # This should not be executed for skipped method\n+                        xxx\n+                \"\"\"\n+            )\n+        )\n+\n+        # Run with --pdb - this should NOT execute tearDown for skipped method\n+        result = pytester.runpytest(\"--pdb\", \"-s\")\n+        \n+        # The test should be skipped without any errors\n+        result.assert_outcomes(skipped=1)\n+        \n+        # Should not contain NameError in the output\n+        assert \"NameError\" not in result.stdout.str()\n+\n+    def test_unittest_normal_class_teardown_executed_with_pdb(self, pytester):\n+        \"\"\"Test that tearDown IS executed for normal (non-skipped) classes when using --pdb.\"\"\"\n+        # Create a test file with a normal class (not skipped)\n+        pytester.makepyfile(\n+            test_normal_class=textwrap.dedent(\n+                \"\"\"\n+                import unittest\n+\n+                class TestNormalClass(unittest.TestCase):\n+                    def setUp(self):\n+                        self.setup_called = True\n+                    \n+                    def test_one(self):\n+                        assert self.setup_called\n+                    \n+                    def tearDown(self):\n+                        # This should be executed for normal tests\n+                        # We'll write to a file to verify it was called\n+                        with open(\"teardown_called.txt\", \"w\") as f:\n+                            f.write(\"teardown executed\")\n+                \"\"\"\n+            )\n+        )\n+\n+        # Run with --pdb\n+        result = pytester.runpytest(\"--pdb\", \"-s\")\n+        \n+        # The test should pass\n+        result.assert_outcomes(passed=1)\n+        \n+        # Verify tearDown was called by checking if the file was created\n+        teardown_file = pytester.path / \"teardown_called.txt\"\n+        assert teardown_file.exists()\n+        assert teardown_file.read_text() == \"teardown executed\"\n+\n+    def test_unittest_skip_class_with_inheritance_pdb(self, pytester):\n+        \"\"\"Test that tearDown is not executed for @unittest.skip decorated classes with inheritance when using --pdb.\"\"\"\n+        # Create a test file with inheritance where the child class is skipped\n+        pytester.makepyfile(\n+            test_skip_inheritance=textwrap.dedent(\n+                \"\"\"\n+                import unittest\n+\n+                class BaseTestCase(unittest.TestCase):\n+                    def setUp(self):\n+                        # This should not be executed\n+                        xxx\n+                    \n+                    def tearDown(self):\n+                        # This should not be executed\n+                        xxx\n+\n+                @unittest.skip(\"skip child class\")\n+                class TestSkippedChild(BaseTestCase):\n+                    def test_one(self):\n+                        # This should not be executed\n+                        pass\n+                \"\"\"\n+            )\n+        )\n+\n+        # Run with --pdb - this should NOT execute tearDown and should not raise NameError\n+        result = pytester.runpytest(\"--pdb\", \"-s\")\n+        \n+        # The test should be skipped without any errors\n+        result.assert_outcomes(skipped=1)\n+        \n+        # Should not contain NameError in the output\n+        assert \"NameError\" not in result.stdout.str()\n+\n+    def test_unittest_skip_class_multiple_tests_pdb(self, pytester):\n+        \"\"\"Test that tearDown is not executed for @unittest.skip decorated classes with multiple test methods when using --pdb.\"\"\"\n+        # Create a test file with multiple test methods in a skipped class\n+        pytester.makepyfile(\n+            test_skip_multiple=textwrap.dedent(\n+                \"\"\"\n+                import unittest\n+\n+                @unittest.skip(\"skip entire class with multiple tests\")\n+                class TestSkippedMultiple(unittest.TestCase):\n+                    def setUp(self):\n+                        # This should not be executed\n+                        xxx\n+                    \n+                    def test_one(self):\n+                        # This should not be executed\n+                        pass\n+                    \n+                    def test_two(self):\n+                        # This should not be executed\n+                        pass\n+                    \n+                    def test_three(self):\n+                        # This should not be executed\n+                        pass\n+                    \n+                    def tearDown(self):\n+                        # This should not be executed for any test\n+                        xxx\n+                \"\"\"\n+            )\n+        )\n+\n+        # Run with --pdb - this should NOT execute tearDown for any test\n+        result = pytester.runpytest(\"--pdb\", \"-s\")\n+        \n+        # All tests should be skipped without any errors\n+        result.assert_outcomes(skipped=3)\n+        \n+        # Should not contain NameError in the output\n+        assert \"NameError\" not in result.stdout.str()\n+\n+    def test_unittest_mixed_skip_scenarios_pdb(self, pytester):\n+        \"\"\"Test mixed scenarios with both class-level and method-level skips when using --pdb.\"\"\"\n+        # Create a test file with mixed skip scenarios\n+        pytester.makepyfile(\n+            test_mixed_skip=textwrap.dedent(\n+                \"\"\"\n+                import unittest\n+\n+                @unittest.skip(\"skip entire class\")\n+                class TestSkippedClass(unittest.TestCase):\n+                    def tearDown(self):\n+                        # This should not be executed\n+                        xxx_class\n+                    \n+                    def test_one(self):\n+                        pass\n+\n+                class TestNormalClass(unittest.TestCase):\n+                    def setUp(self):\n+                        self.setup_called = True\n+                    \n+                    @unittest.skip(\"skip this method\")\n+                    def test_skipped_method(self):\n+                        pass\n+                    \n+                    def test_normal_method(self):\n+                        assert self.setup_called\n+                    \n+                    def tearDown(self):\n+                        # This should only be executed for test_normal_method\n+                        if hasattr(self, 'setup_called'):\n+                            with open(\"teardown_normal.txt\", \"w\") as f:\n+                                f.write(\"teardown for normal test\")\n+                \"\"\"\n+            )\n+        )\n+\n+        # Run with --pdb\n+        result = pytester.runpytest(\"--pdb\", \"-s\")\n+        \n+        # Should have 1 passed, 2 skipped\n+        result.assert_outcomes(passed=1, skipped=2)\n+        \n+        # Should not contain NameError for the skipped class\n+        assert \"xxx_class\" not in result.stdout.str()\n+        assert \"NameError\" not in result.stdout.str()\n+        \n+        # Verify tearDown was called only for the normal test\n+        teardown_file = pytester.path / \"teardown_normal.txt\"\n+        assert teardown_file.exists()\n+        assert teardown_file.read_text() == \"teardown for normal test\"\n"
}