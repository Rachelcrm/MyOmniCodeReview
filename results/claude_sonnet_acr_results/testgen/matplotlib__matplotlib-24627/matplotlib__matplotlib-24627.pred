{
  "instance_id": "matplotlib__matplotlib-24627",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>lib/matplotlib/tests/test_artist_axes_clearing.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nfrom matplotlib.lines import Line2D\nfrom matplotlib.text import Text\nfrom matplotlib.collections import LineCollection\nimport numpy as np\n\n\nclass TestArtistAxesClearing:\n    \"\"\"Test that cla() and clf() properly unset .axes and .figure attributes of deparented artists.\"\"\"\n    \n    def test_artist_remove_unsets_axes_attribute(self):\n        \"\"\"Test that artist.remove() properly unsets the .axes attribute (baseline behavior).\"\"\"\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [1, 2, 3])\n        \n        # Verify the line has axes reference\n        assert line.axes is ax\n        \n        # Remove the line\n        line.remove()\n        \n        # Verify the axes attribute is unset\n        assert line.axes is None\n        \n        plt.close(fig)\n    \n    def test_axes_cla_unsets_axes_attribute_for_lines(self):\n        \"\"\"Test that axes.cla() unsets .axes attribute for line artists.\"\"\"\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [1, 2, 3])\n        \n        # Verify the line has axes reference\n        assert line.axes is ax\n        \n        # Clear the axes\n        ax.cla()\n        \n        # The line's axes attribute should be unset\n        assert line.axes is None\n        \n        plt.close(fig)\n    \n    def test_axes_clear_unsets_axes_attribute_for_lines(self):\n        \"\"\"Test that axes.clear() unsets .axes attribute for line artists.\"\"\"\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [1, 2, 3])\n        \n        # Verify the line has axes reference\n        assert line.axes is ax\n        \n        # Clear the axes\n        ax.clear()\n        \n        # The line's axes attribute should be unset\n        assert line.axes is None\n        \n        plt.close(fig)\n    \n    def test_axes_cla_unsets_axes_attribute_for_patches(self):\n        \"\"\"Test that axes.cla() unsets .axes attribute for patch artists.\"\"\"\n        fig, ax = plt.subplots()\n        patch = patches.Rectangle((0, 0), 1, 1)\n        ax.add_patch(patch)\n        \n        # Verify the patch has axes reference\n        assert patch.axes is ax\n        \n        # Clear the axes\n        ax.cla()\n        \n        # The patch's axes attribute should be unset\n        assert patch.axes is None\n        \n        plt.close(fig)\n    \n    def test_axes_cla_unsets_axes_attribute_for_text(self):\n        \"\"\"Test that axes.cla() unsets .axes attribute for text artists.\"\"\"\n        fig, ax = plt.subplots()\n        text = ax.text(0.5, 0.5, \"Test text\")\n        \n        # Verify the text has axes reference\n        assert text.axes is ax\n        \n        # Clear the axes\n        ax.cla()\n        \n        # The text's axes attribute should be unset\n        assert text.axes is None\n        \n        plt.close(fig)\n    \n    def test_axes_cla_unsets_axes_attribute_for_collections(self):\n        \"\"\"Test that axes.cla() unsets .axes attribute for collection artists.\"\"\"\n        fig, ax = plt.subplots()\n        x = np.array([0, 1, 2])\n        y = np.array([0, 1, 0])\n        points = np.array([x, y]).T.reshape(-1, 1, 2)\n        segments = np.concatenate([points[:-1], points[1:]], axis=1)\n        collection = LineCollection(segments)\n        ax.add_collection(collection)\n        \n        # Verify the collection has axes reference\n        assert collection.axes is ax\n        \n        # Clear the axes\n        ax.cla()\n        \n        # The collection's axes attribute should be unset\n        assert collection.axes is None\n        \n        plt.close(fig)\n    \n    def test_multiple_artists_cla_unsets_all_axes_attributes(self):\n        \"\"\"Test that axes.cla() unsets .axes attribute for multiple artists.\"\"\"\n        fig, ax = plt.subplots()\n        \n        # Create multiple artists\n        line, = ax.plot([1, 2, 3], [1, 2, 3])\n        patch = patches.Circle((0.5, 0.5), 0.2)\n        ax.add_patch(patch)\n        text = ax.text(0.1, 0.1, \"Test\")\n        \n        # Verify all have axes references\n        assert line.axes is ax\n        assert patch.axes is ax\n        assert text.axes is ax\n        \n        # Clear the axes\n        ax.cla()\n        \n        # All axes attributes should be unset\n        assert line.axes is None\n        assert patch.axes is None\n        assert text.axes is None\n        \n        plt.close(fig)\n    \n    def test_figure_clf_unsets_axes_attributes(self):\n        \"\"\"Test that figure.clf() unsets .axes attributes of all artists.\"\"\"\n        fig, ax = plt.subplots()\n        line, = ax.plot([1, 2, 3], [1, 2, 3])\n        patch = patches.Rectangle((0, 0), 1, 1)\n        ax.add_patch(patch)\n        \n        # Verify artists have axes references\n        assert line.axes is ax\n        assert patch.axes is ax\n        \n        # Clear the figure\n        fig.clf()\n        \n        # All axes attributes should be unset\n        assert line.axes is None\n        assert patch.axes is None\n        \n        plt.close(fig)\n    \n    def test_pyplot_cla_unsets_axes_attributes(self):\n        \"\"\"Test that pyplot.cla() unsets .axes attributes.\"\"\"\n        plt.figure()\n        line, = plt.plot([1, 2, 3], [1, 2, 3])\n        \n        # Get current axes\n        ax = plt.gca()\n        assert line.axes is ax\n        \n        # Clear using pyplot\n        plt.cla()\n        \n        # The line's axes attribute should be unset\n        assert line.axes is None\n        \n        plt.close()\n    \n    def test_pyplot_clf_unsets_axes_attributes(self):\n        \"\"\"Test that pyplot.clf() unsets .axes attributes.\"\"\"\n        plt.figure()\n        line, = plt.plot([1, 2, 3], [1, 2, 3])\n        \n        # Get current axes\n        ax = plt.gca()\n        assert line.axes is ax\n        \n        # Clear using pyplot\n        plt.clf()\n        \n        # The line's axes attribute should be unset\n        assert line.axes is None\n        \n        plt.close()\n    \n    def test_axes_cla_preserves_functionality(self):\n        \"\"\"Test that axes.cla() still works correctly after the fix.\"\"\"\n        fig, ax = plt.subplots()\n        \n        # Add some content\n        line, = ax.plot([1, 2, 3], [1, 2, 3])\n        ax.set_title(\"Test Title\")\n        ax.set_xlabel(\"X Label\")\n        \n        # Clear the axes\n        ax.cla()\n        \n        # Verify axes is cleared (no children)\n        assert len(ax.get_children()) > 0  # Still has spines, ticks, etc.\n        assert len([child for child in ax.get_children() if isinstance(child, Line2D)]) == 0\n        \n        # Verify we can still use the axes\n        new_line, = ax.plot([4, 5, 6], [4, 5, 6])\n        assert new_line.axes is ax\n        \n        plt.close(fig)\n    \n    def test_edge_case_artist_without_axes_attribute(self):\n        \"\"\"Test that clearing works even if some artists don't have .axes attribute.\"\"\"\n        fig, ax = plt.subplots()\n        \n        # Create a custom artist without axes attribute\n        class CustomArtist:\n            def __init__(self):\n                pass\n        \n        custom = CustomArtist()\n        \n        # Add normal artist\n        line, = ax.plot([1, 2, 3], [1, 2, 3])\n        \n        # Manually add custom artist to children (this is unusual but possible)\n        ax._children.append(custom)\n        \n        assert line.axes is ax\n        \n        # This should not raise an error\n        ax.cla()\n        \n        # Normal artist should have axes unset\n        assert line.axes is None\n        \n        plt.close(fig)\n    \n    def test_consistency_between_remove_and_cla(self):\n        \"\"\"Test that remove() and cla() have consistent behavior for axes attribute.\"\"\"\n        # Test with remove()\n        fig1, ax1 = plt.subplots()\n        line1, = ax1.plot([1, 2, 3], [1, 2, 3])\n        line1.remove()\n        remove_result = line1.axes\n        \n        # Test with cla()\n        fig2, ax2 = plt.subplots()\n        line2, = ax2.plot([1, 2, 3], [1, 2, 3])\n        ax2.cla()\n        cla_result = line2.axes\n        \n        # Both should be None\n        assert remove_result is None\n        assert cla_result is None\n        assert remove_result == cla_result\n        \n        plt.close(fig1)\n        plt.close(fig2)\n</patched>\n```",
  "patch": "--- a/lib/matplotlib/tests/test_artist_axes_clearing.py\n+++ b/lib/matplotlib/tests/test_artist_axes_clearing.py\n-# Empty if creating new file\n+import pytest\n+import matplotlib.pyplot as plt\n+import matplotlib.patches as patches\n+from matplotlib.lines import Line2D\n+from matplotlib.text import Text\n+from matplotlib.collections import LineCollection\n+import numpy as np\n+\n+\n+class TestArtistAxesClearing:\n+    \"\"\"Test that cla() and clf() properly unset .axes and .figure attributes of deparented artists.\"\"\"\n+    \n+    def test_artist_remove_unsets_axes_attribute(self):\n+        \"\"\"Test that artist.remove() properly unsets the .axes attribute (baseline behavior).\"\"\"\n+        fig, ax = plt.subplots()\n+        line, = ax.plot([1, 2, 3], [1, 2, 3])\n+        \n+        # Verify the line has axes reference\n+        assert line.axes is ax\n+        \n+        # Remove the line\n+        line.remove()\n+        \n+        # Verify the axes attribute is unset\n+        assert line.axes is None\n+        \n+        plt.close(fig)\n+    \n+    def test_axes_cla_unsets_axes_attribute_for_lines(self):\n+        \"\"\"Test that axes.cla() unsets .axes attribute for line artists.\"\"\"\n+        fig, ax = plt.subplots()\n+        line, = ax.plot([1, 2, 3], [1, 2, 3])\n+        \n+        # Verify the line has axes reference\n+        assert line.axes is ax\n+        \n+        # Clear the axes\n+        ax.cla()\n+        \n+        # The line's axes attribute should be unset\n+        assert line.axes is None\n+        \n+        plt.close(fig)\n+    \n+    def test_axes_clear_unsets_axes_attribute_for_lines(self):\n+        \"\"\"Test that axes.clear() unsets .axes attribute for line artists.\"\"\"\n+        fig, ax = plt.subplots()\n+        line, = ax.plot([1, 2, 3], [1, 2, 3])\n+        \n+        # Verify the line has axes reference\n+        assert line.axes is ax\n+        \n+        # Clear the axes\n+        ax.clear()\n+        \n+        # The line's axes attribute should be unset\n+        assert line.axes is None\n+        \n+        plt.close(fig)\n+    \n+    def test_axes_cla_unsets_axes_attribute_for_patches(self):\n+        \"\"\"Test that axes.cla() unsets .axes attribute for patch artists.\"\"\"\n+        fig, ax = plt.subplots()\n+        patch = patches.Rectangle((0, 0), 1, 1)\n+        ax.add_patch(patch)\n+        \n+        # Verify the patch has axes reference\n+        assert patch.axes is ax\n+        \n+        # Clear the axes\n+        ax.cla()\n+        \n+        # The patch's axes attribute should be unset\n+        assert patch.axes is None\n+        \n+        plt.close(fig)\n+    \n+    def test_axes_cla_unsets_axes_attribute_for_text(self):\n+        \"\"\"Test that axes.cla() unsets .axes attribute for text artists.\"\"\"\n+        fig, ax = plt.subplots()\n+        text = ax.text(0.5, 0.5, \"Test text\")\n+        \n+        # Verify the text has axes reference\n+        assert text.axes is ax\n+        \n+        # Clear the axes\n+        ax.cla()\n+        \n+        # The text's axes attribute should be unset\n+        assert text.axes is None\n+        \n+        plt.close(fig)\n+    \n+    def test_axes_cla_unsets_axes_attribute_for_collections(self):\n+        \"\"\"Test that axes.cla() unsets .axes attribute for collection artists.\"\"\"\n+        fig, ax = plt.subplots()\n+        x = np.array([0, 1, 2])\n+        y = np.array([0, 1, 0])\n+        points = np.array([x, y]).T.reshape(-1, 1, 2)\n+        segments = np.concatenate([points[:-1], points[1:]], axis=1)\n+        collection = LineCollection(segments)\n+        ax.add_collection(collection)\n+        \n+        # Verify the collection has axes reference\n+        assert collection.axes is ax\n+        \n+        # Clear the axes\n+        ax.cla()\n+        \n+        # The collection's axes attribute should be unset\n+        assert collection.axes is None\n+        \n+        plt.close(fig)\n+    \n+    def test_multiple_artists_cla_unsets_all_axes_attributes(self):\n+        \"\"\"Test that axes.cla() unsets .axes attribute for multiple artists.\"\"\"\n+        fig, ax = plt.subplots()\n+        \n+        # Create multiple artists\n+        line, = ax.plot([1, 2, 3], [1, 2, 3])\n+        patch = patches.Circle((0.5, 0.5), 0.2)\n+        ax.add_patch(patch)\n+        text = ax.text(0.1, 0.1, \"Test\")\n+        \n+        # Verify all have axes references\n+        assert line.axes is ax\n+        assert patch.axes is ax\n+        assert text.axes is ax\n+        \n+        # Clear the axes\n+        ax.cla()\n+        \n+        # All axes attributes should be unset\n+        assert line.axes is None\n+        assert patch.axes is None\n+        assert text.axes is None\n+        \n+        plt.close(fig)\n+    \n+    def test_figure_clf_unsets_axes_attributes(self):\n+        \"\"\"Test that figure.clf() unsets .axes attributes of all artists.\"\"\"\n+        fig, ax = plt.subplots()\n+        line, = ax.plot([1, 2, 3], [1, 2, 3])\n+        patch = patches.Rectangle((0, 0), 1, 1)\n+        ax.add_patch(patch)\n+        \n+        # Verify artists have axes references\n+        assert line.axes is ax\n+        assert patch.axes is ax\n+        \n+        # Clear the figure\n+        fig.clf()\n+        \n+        # All axes attributes should be unset\n+        assert line.axes is None\n+        assert patch.axes is None\n+        \n+        plt.close(fig)\n+    \n+    def test_pyplot_cla_unsets_axes_attributes(self):\n+        \"\"\"Test that pyplot.cla() unsets .axes attributes.\"\"\"\n+        plt.figure()\n+        line, = plt.plot([1, 2, 3], [1, 2, 3])\n+        \n+        # Get current axes\n+        ax = plt.gca()\n+        assert line.axes is ax\n+        \n+        # Clear using pyplot\n+        plt.cla()\n+        \n+        # The line's axes attribute should be unset\n+        assert line.axes is None\n+        \n+        plt.close()\n+    \n+    def test_pyplot_clf_unsets_axes_attributes(self):\n+        \"\"\"Test that pyplot.clf() unsets .axes attributes.\"\"\"\n+        plt.figure()\n+        line, = plt.plot([1, 2, 3], [1, 2, 3])\n+        \n+        # Get current axes\n+        ax = plt.gca()\n+        assert line.axes is ax\n+        \n+        # Clear using pyplot\n+        plt.clf()\n+        \n+        # The line's axes attribute should be unset\n+        assert line.axes is None\n+        \n+        plt.close()\n+    \n+    def test_axes_cla_preserves_functionality(self):\n+        \"\"\"Test that axes.cla() still works correctly after the fix.\"\"\"\n+        fig, ax = plt.subplots()\n+        \n+        # Add some content\n+        line, = ax.plot([1, 2, 3], [1, 2, 3])\n+        ax.set_title(\"Test Title\")\n+        ax.set_xlabel(\"X Label\")\n+        \n+        # Clear the axes\n+        ax.cla()\n+        \n+        # Verify axes is cleared (no children)\n+        assert len(ax.get_children()) > 0  # Still has spines, ticks, etc.\n+        assert len([child for child in ax.get_children() if isinstance(child, Line2D)]) == 0\n+        \n+        # Verify we can still use the axes\n+        new_line, = ax.plot([4, 5, 6], [4, 5, 6])\n+        assert new_line.axes is ax\n+        \n+        plt.close(fig)\n+    \n+    def test_edge_case_artist_without_axes_attribute(self):\n+        \"\"\"Test that clearing works even if some artists don't have .axes attribute.\"\"\"\n+        fig, ax = plt.subplots()\n+        \n+        # Create a custom artist without axes attribute\n+        class CustomArtist:\n+            def __init__(self):\n+                pass\n+        \n+        custom = CustomArtist()\n+        \n+        # Add normal artist\n+        line, = ax.plot([1, 2, 3], [1, 2, 3])\n+        \n+        # Manually add custom artist to children (this is unusual but possible)\n+        ax._children.append(custom)\n+        \n+        assert line.axes is ax\n+        \n+        # This should not raise an error\n+        ax.cla()\n+        \n+        # Normal artist should have axes unset\n+        assert line.axes is None\n+        \n+        plt.close(fig)\n+    \n+    def test_consistency_between_remove_and_cla(self):\n+        \"\"\"Test that remove() and cla() have consistent behavior for axes attribute.\"\"\"\n+        # Test with remove()\n+        fig1, ax1 = plt.subplots()\n+        line1, = ax1.plot([1, 2, 3], [1, 2, 3])\n+        line1.remove()\n+        remove_result = line1.axes\n+        \n+        # Test with cla()\n+        fig2, ax2 = plt.subplots()\n+        line2, = ax2.plot([1, 2, 3], [1, 2, 3])\n+        ax2.cla()\n+        cla_result = line2.axes\n+        \n+        # Both should be None\n+        assert remove_result is None\n+        assert cla_result is None\n+        assert remove_result == cla_result\n+        \n+        plt.close(fig1)\n+        plt.close(fig2)\n"
}