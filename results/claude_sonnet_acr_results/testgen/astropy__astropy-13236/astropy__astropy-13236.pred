{
  "instance_id": "astropy__astropy-13236",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>astropy/table/tests/test_structured_array_warning.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nimport warnings\nimport numpy as np\nfrom astropy.table import Table, Column\nfrom astropy.table.ndarray_mixin import NdarrayMixin\n\n\nclass TestStructuredArrayWarning:\n    \"\"\"Test FutureWarning for automatic conversion of structured arrays to NdarrayMixin.\"\"\"\n    \n    def setup_method(self):\n        \"\"\"Set up test data.\"\"\"\n        # Create a structured numpy array\n        self.structured_array = np.array(\n            [(1, 2.5, 'a'), (3, 4.5, 'b'), (5, 6.5, 'c')],\n            dtype=[('x', 'i4'), ('y', 'f8'), ('z', 'U1')]\n        )\n        \n        # Create a regular numpy array for comparison\n        self.regular_array = np.array([1, 2, 3])\n    \n    def test_convert_col_for_table_structured_array_warning(self):\n        \"\"\"Test that _convert_col_for_table issues FutureWarning for structured arrays.\"\"\"\n        t = Table()\n        \n        # This should trigger the FutureWarning\n        with pytest.warns(FutureWarning, match=\"Automatic conversion of structured numpy arrays to NdarrayMixin is deprecated\"):\n            data, is_mixin = t._convert_col_for_table(self.structured_array)\n        \n        # Verify the data was converted to NdarrayMixin\n        assert isinstance(data, NdarrayMixin)\n        assert is_mixin is True\n        \n        # Verify the data content is preserved\n        assert len(data) == 3\n        assert data.dtype == self.structured_array.dtype\n        np.testing.assert_array_equal(data, self.structured_array)\n    \n    def test_convert_col_for_table_regular_array_no_warning(self):\n        \"\"\"Test that _convert_col_for_table does not warn for regular arrays.\"\"\"\n        t = Table()\n        \n        # This should NOT trigger any warning\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")  # Turn warnings into errors\n            data, is_mixin = t._convert_col_for_table(self.regular_array)\n        \n        # Regular arrays should not be converted to mixins\n        assert not isinstance(data, NdarrayMixin)\n        assert is_mixin is False\n    \n    def test_convert_col_for_table_column_no_warning(self):\n        \"\"\"Test that _convert_col_for_table does not warn for Column objects.\"\"\"\n        t = Table()\n        col = Column(self.structured_array)\n        \n        # This should NOT trigger any warning\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")  # Turn warnings into errors\n            data, is_mixin = t._convert_col_for_table(col)\n        \n        # Column objects should pass through unchanged\n        assert isinstance(data, Column)\n        assert is_mixin is False\n    \n    def test_convert_col_for_table_existing_mixin_no_warning(self):\n        \"\"\"Test that _convert_col_for_table does not warn for existing mixins.\"\"\"\n        t = Table()\n        mixin = self.structured_array.view(NdarrayMixin)\n        \n        # This should NOT trigger any warning\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")  # Turn warnings into errors\n            data, is_mixin = t._convert_col_for_table(mixin)\n        \n        # Existing mixins should pass through unchanged\n        assert isinstance(data, NdarrayMixin)\n        assert is_mixin is True\n    \n    def test_add_column_structured_array_warning(self):\n        \"\"\"Test that add_column issues FutureWarning for structured arrays.\"\"\"\n        t = Table()\n        \n        # This should trigger the FutureWarning\n        with pytest.warns(FutureWarning, match=\"Automatic conversion of structured numpy arrays to NdarrayMixin is deprecated\"):\n            t.add_column(self.structured_array, name='test_col')\n        \n        # Verify the column was added as NdarrayMixin\n        assert 'test_col' in t.colnames\n        assert isinstance(t['test_col'], NdarrayMixin)\n        \n        # Verify the data content is preserved\n        assert len(t['test_col']) == 3\n        assert t['test_col'].dtype == self.structured_array.dtype\n        np.testing.assert_array_equal(t['test_col'], self.structured_array)\n    \n    def test_add_column_regular_array_no_warning(self):\n        \"\"\"Test that add_column does not warn for regular arrays.\"\"\"\n        t = Table()\n        \n        # This should NOT trigger any warning\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")  # Turn warnings into errors\n            t.add_column(self.regular_array, name='test_col')\n        \n        # Regular arrays should be converted to Column\n        assert 'test_col' in t.colnames\n        assert isinstance(t['test_col'], Column)\n        assert not isinstance(t['test_col'], NdarrayMixin)\n    \n    def test_add_column_column_no_warning(self):\n        \"\"\"Test that add_column does not warn for Column objects.\"\"\"\n        t = Table()\n        col = Column(self.structured_array, name='test_col')\n        \n        # This should NOT trigger any warning\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")  # Turn warnings into errors\n            t.add_column(col)\n        \n        # Column objects should be added as-is\n        assert 'test_col' in t.colnames\n        assert isinstance(t['test_col'], Column)\n    \n    def test_add_column_existing_mixin_no_warning(self):\n        \"\"\"Test that add_column does not warn for existing mixins.\"\"\"\n        t = Table()\n        mixin = self.structured_array.view(NdarrayMixin)\n        \n        # This should NOT trigger any warning\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")  # Turn warnings into errors\n            t.add_column(mixin, name='test_col')\n        \n        # Existing mixins should be added as-is\n        assert 'test_col' in t.colnames\n        assert isinstance(t['test_col'], NdarrayMixin)\n    \n    def test_warning_message_content(self):\n        \"\"\"Test that the warning message contains the expected content.\"\"\"\n        t = Table()\n        \n        with pytest.warns(FutureWarning) as warning_info:\n            t._convert_col_for_table(self.structured_array)\n        \n        warning_message = str(warning_info[0].message)\n        assert \"Automatic conversion of structured numpy arrays to NdarrayMixin is deprecated\" in warning_message\n        assert \"Please wrap the array in a Column object explicitly\" in warning_message\n        assert \"In astropy 5.2, structured arrays will be added as Column objects\" in warning_message\n    \n    def test_warning_stacklevel_convert_col_for_table(self):\n        \"\"\"Test that the warning has appropriate stacklevel for _convert_col_for_table.\"\"\"\n        t = Table()\n        \n        # Capture the warning and check it points to this test function\n        with pytest.warns(FutureWarning) as warning_info:\n            t._convert_col_for_table(self.structured_array)\n        \n        # The warning should be issued and captured\n        assert len(warning_info) == 1\n        assert warning_info[0].category == FutureWarning\n    \n    def test_warning_stacklevel_add_column(self):\n        \"\"\"Test that the warning has appropriate stacklevel for add_column.\"\"\"\n        t = Table()\n        \n        # Capture the warning and check it points to this test function\n        with pytest.warns(FutureWarning) as warning_info:\n            t.add_column(self.structured_array, name='test_col')\n        \n        # The warning should be issued and captured\n        assert len(warning_info) == 1\n        assert warning_info[0].category == FutureWarning\n    \n    def test_multiple_structured_arrays_multiple_warnings(self):\n        \"\"\"Test that multiple structured arrays trigger multiple warnings.\"\"\"\n        t = Table()\n        \n        # Create another structured array\n        structured_array2 = np.array(\n            [(10, 20.5), (30, 40.5)],\n            dtype=[('a', 'i4'), ('b', 'f8')]\n        )\n        \n        # Each structured array should trigger its own warning\n        with pytest.warns(FutureWarning) as warning_info:\n            t.add_column(self.structured_array, name='col1')\n            t.add_column(structured_array2, name='col2')\n        \n        # Should have two warnings\n        assert len(warning_info) == 2\n        for warning in warning_info:\n            assert warning.category == FutureWarning\n            assert \"Automatic conversion of structured numpy arrays to NdarrayMixin is deprecated\" in str(warning.message)\n    \n    def test_no_warning_for_empty_dtype(self):\n        \"\"\"Test that arrays with empty dtype (len(dtype) == 0) don't trigger warning.\"\"\"\n        t = Table()\n        \n        # Create an array with empty dtype\n        empty_dtype_array = np.array([1, 2, 3])  # Regular array has len(dtype) == 0\n        \n        # This should NOT trigger any warning\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")  # Turn warnings into errors\n            data, is_mixin = t._convert_col_for_table(empty_dtype_array)\n        \n        # Should not be converted to mixin\n        assert not isinstance(data, NdarrayMixin)\n        assert is_mixin is False\n    \n    def test_no_warning_for_single_field_dtype(self):\n        \"\"\"Test that arrays with single field dtype (len(dtype) == 1) don't trigger warning.\"\"\"\n        t = Table()\n        \n        # Create an array with single field dtype\n        single_field_array = np.array(\n            [(1,), (2,), (3,)],\n            dtype=[('x', 'i4')]\n        )\n        \n        # This SHOULD trigger warning since len(dtype) > 1 is False but len(dtype.names) > 0\n        # Actually, let's check what len(dtype) returns for single field\n        assert len(single_field_array.dtype) == 1\n        \n        # This should NOT trigger warning since len(dtype) == 1, not > 1\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")  # Turn warnings into errors\n            data, is_mixin = t._convert_col_for_table(single_field_array)\n        \n        # Should not be converted to mixin\n        assert not isinstance(data, NdarrayMixin)\n        assert is_mixin is False\n\n\nclass TestStructuredArrayWarningIntegration:\n    \"\"\"Integration tests for structured array warning in real usage scenarios.\"\"\"\n    \n    def test_table_initialization_with_structured_array(self):\n        \"\"\"Test that table initialization handles structured arrays correctly.\"\"\"\n        structured_array = np.array(\n            [(1, 2.5, 'a'), (3, 4.5, 'b')],\n            dtype=[('x', 'i4'), ('y', 'f8'), ('z', 'U1')]\n        )\n        \n        # Table initialization should not trigger the warning since it uses different code path\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")\n            t = Table(structured_array)\n        \n        # Should create separate columns for each field\n        assert 'x' in t.colnames\n        assert 'y' in t.colnames\n        assert 'z' in t.colnames\n    \n    def test_workaround_with_column_wrapper(self):\n        \"\"\"Test that wrapping in Column avoids the warning.\"\"\"\n        structured_array = np.array(\n            [(1, 2.5, 'a'), (3, 4.5, 'b')],\n            dtype=[('x', 'i4'), ('y', 'f8'), ('z', 'U1')]\n        )\n        \n        t = Table()\n        col = Column(structured_array)\n        \n        # This should NOT trigger any warning\n        with warnings.catch_warnings():\n            warnings.simplefilter(\"error\")\n            t.add_column(col, name='structured_col')\n        \n        # Should be added as Column, not NdarrayMixin\n        assert 'structured_col' in t.colnames\n        assert isinstance(t['structured_col'], Column)\n        assert not isinstance(t['structured_col'], NdarrayMixin)\n</patched>\n</file>\n```",
  "patch": "--- a/astropy/table/tests/test_structured_array_warning.py\n+++ b/astropy/table/tests/test_structured_array_warning.py\n-# Empty if creating new file\n+import pytest\n+import warnings\n+import numpy as np\n+from astropy.table import Table, Column\n+from astropy.table.ndarray_mixin import NdarrayMixin\n+\n+\n+class TestStructuredArrayWarning:\n+    \"\"\"Test FutureWarning for automatic conversion of structured arrays to NdarrayMixin.\"\"\"\n+    \n+    def setup_method(self):\n+        \"\"\"Set up test data.\"\"\"\n+        # Create a structured numpy array\n+        self.structured_array = np.array(\n+            [(1, 2.5, 'a'), (3, 4.5, 'b'), (5, 6.5, 'c')],\n+            dtype=[('x', 'i4'), ('y', 'f8'), ('z', 'U1')]\n+        )\n+        \n+        # Create a regular numpy array for comparison\n+        self.regular_array = np.array([1, 2, 3])\n+    \n+    def test_convert_col_for_table_structured_array_warning(self):\n+        \"\"\"Test that _convert_col_for_table issues FutureWarning for structured arrays.\"\"\"\n+        t = Table()\n+        \n+        # This should trigger the FutureWarning\n+        with pytest.warns(FutureWarning, match=\"Automatic conversion of structured numpy arrays to NdarrayMixin is deprecated\"):\n+            data, is_mixin = t._convert_col_for_table(self.structured_array)\n+        \n+        # Verify the data was converted to NdarrayMixin\n+        assert isinstance(data, NdarrayMixin)\n+        assert is_mixin is True\n+        \n+        # Verify the data content is preserved\n+        assert len(data) == 3\n+        assert data.dtype == self.structured_array.dtype\n+        np.testing.assert_array_equal(data, self.structured_array)\n+    \n+    def test_convert_col_for_table_regular_array_no_warning(self):\n+        \"\"\"Test that _convert_col_for_table does not warn for regular arrays.\"\"\"\n+        t = Table()\n+        \n+        # This should NOT trigger any warning\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\")  # Turn warnings into errors\n+            data, is_mixin = t._convert_col_for_table(self.regular_array)\n+        \n+        # Regular arrays should not be converted to mixins\n+        assert not isinstance(data, NdarrayMixin)\n+        assert is_mixin is False\n+    \n+    def test_convert_col_for_table_column_no_warning(self):\n+        \"\"\"Test that _convert_col_for_table does not warn for Column objects.\"\"\"\n+        t = Table()\n+        col = Column(self.structured_array)\n+        \n+        # This should NOT trigger any warning\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\")  # Turn warnings into errors\n+            data, is_mixin = t._convert_col_for_table(col)\n+        \n+        # Column objects should pass through unchanged\n+        assert isinstance(data, Column)\n+        assert is_mixin is False\n+    \n+    def test_convert_col_for_table_existing_mixin_no_warning(self):\n+        \"\"\"Test that _convert_col_for_table does not warn for existing mixins.\"\"\"\n+        t = Table()\n+        mixin = self.structured_array.view(NdarrayMixin)\n+        \n+        # This should NOT trigger any warning\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\")  # Turn warnings into errors\n+            data, is_mixin = t._convert_col_for_table(mixin)\n+        \n+        # Existing mixins should pass through unchanged\n+        assert isinstance(data, NdarrayMixin)\n+        assert is_mixin is True\n+    \n+    def test_add_column_structured_array_warning(self):\n+        \"\"\"Test that add_column issues FutureWarning for structured arrays.\"\"\"\n+        t = Table()\n+        \n+        # This should trigger the FutureWarning\n+        with pytest.warns(FutureWarning, match=\"Automatic conversion of structured numpy arrays to NdarrayMixin is deprecated\"):\n+            t.add_column(self.structured_array, name='test_col')\n+        \n+        # Verify the column was added as NdarrayMixin\n+        assert 'test_col' in t.colnames\n+        assert isinstance(t['test_col'], NdarrayMixin)\n+        \n+        # Verify the data content is preserved\n+        assert len(t['test_col']) == 3\n+        assert t['test_col'].dtype == self.structured_array.dtype\n+        np.testing.assert_array_equal(t['test_col'], self.structured_array)\n+    \n+    def test_add_column_regular_array_no_warning(self):\n+        \"\"\"Test that add_column does not warn for regular arrays.\"\"\"\n+        t = Table()\n+        \n+        # This should NOT trigger any warning\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\")  # Turn warnings into errors\n+            t.add_column(self.regular_array, name='test_col')\n+        \n+        # Regular arrays should be converted to Column\n+        assert 'test_col' in t.colnames\n+        assert isinstance(t['test_col'], Column)\n+        assert not isinstance(t['test_col'], NdarrayMixin)\n+    \n+    def test_add_column_column_no_warning(self):\n+        \"\"\"Test that add_column does not warn for Column objects.\"\"\"\n+        t = Table()\n+        col = Column(self.structured_array, name='test_col')\n+        \n+        # This should NOT trigger any warning\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\")  # Turn warnings into errors\n+            t.add_column(col)\n+        \n+        # Column objects should be added as-is\n+        assert 'test_col' in t.colnames\n+        assert isinstance(t['test_col'], Column)\n+    \n+    def test_add_column_existing_mixin_no_warning(self):\n+        \"\"\"Test that add_column does not warn for existing mixins.\"\"\"\n+        t = Table()\n+        mixin = self.structured_array.view(NdarrayMixin)\n+        \n+        # This should NOT trigger any warning\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\")  # Turn warnings into errors\n+            t.add_column(mixin, name='test_col')\n+        \n+        # Existing mixins should be added as-is\n+        assert 'test_col' in t.colnames\n+        assert isinstance(t['test_col'], NdarrayMixin)\n+    \n+    def test_warning_message_content(self):\n+        \"\"\"Test that the warning message contains the expected content.\"\"\"\n+        t = Table()\n+        \n+        with pytest.warns(FutureWarning) as warning_info:\n+            t._convert_col_for_table(self.structured_array)\n+        \n+        warning_message = str(warning_info[0].message)\n+        assert \"Automatic conversion of structured numpy arrays to NdarrayMixin is deprecated\" in warning_message\n+        assert \"Please wrap the array in a Column object explicitly\" in warning_message\n+        assert \"In astropy 5.2, structured arrays will be added as Column objects\" in warning_message\n+    \n+    def test_warning_stacklevel_convert_col_for_table(self):\n+        \"\"\"Test that the warning has appropriate stacklevel for _convert_col_for_table.\"\"\"\n+        t = Table()\n+        \n+        # Capture the warning and check it points to this test function\n+        with pytest.warns(FutureWarning) as warning_info:\n+            t._convert_col_for_table(self.structured_array)\n+        \n+        # The warning should be issued and captured\n+        assert len(warning_info) == 1\n+        assert warning_info[0].category == FutureWarning\n+    \n+    def test_warning_stacklevel_add_column(self):\n+        \"\"\"Test that the warning has appropriate stacklevel for add_column.\"\"\"\n+        t = Table()\n+        \n+        # Capture the warning and check it points to this test function\n+        with pytest.warns(FutureWarning) as warning_info:\n+            t.add_column(self.structured_array, name='test_col')\n+        \n+        # The warning should be issued and captured\n+        assert len(warning_info) == 1\n+        assert warning_info[0].category == FutureWarning\n+    \n+    def test_multiple_structured_arrays_multiple_warnings(self):\n+        \"\"\"Test that multiple structured arrays trigger multiple warnings.\"\"\"\n+        t = Table()\n+        \n+        # Create another structured array\n+        structured_array2 = np.array(\n+            [(10, 20.5), (30, 40.5)],\n+            dtype=[('a', 'i4'), ('b', 'f8')]\n+        )\n+        \n+        # Each structured array should trigger its own warning\n+        with pytest.warns(FutureWarning) as warning_info:\n+            t.add_column(self.structured_array, name='col1')\n+            t.add_column(structured_array2, name='col2')\n+        \n+        # Should have two warnings\n+        assert len(warning_info) == 2\n+        for warning in warning_info:\n+            assert warning.category == FutureWarning\n+            assert \"Automatic conversion of structured numpy arrays to NdarrayMixin is deprecated\" in str(warning.message)\n+    \n+    def test_no_warning_for_empty_dtype(self):\n+        \"\"\"Test that arrays with empty dtype (len(dtype) == 0) don't trigger warning.\"\"\"\n+        t = Table()\n+        \n+        # Create an array with empty dtype\n+        empty_dtype_array = np.array([1, 2, 3])  # Regular array has len(dtype) == 0\n+        \n+        # This should NOT trigger any warning\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\")  # Turn warnings into errors\n+            data, is_mixin = t._convert_col_for_table(empty_dtype_array)\n+        \n+        # Should not be converted to mixin\n+        assert not isinstance(data, NdarrayMixin)\n+        assert is_mixin is False\n+    \n+    def test_no_warning_for_single_field_dtype(self):\n+        \"\"\"Test that arrays with single field dtype (len(dtype) == 1) don't trigger warning.\"\"\"\n+        t = Table()\n+        \n+        # Create an array with single field dtype\n+        single_field_array = np.array(\n+            [(1,), (2,), (3,)],\n+            dtype=[('x', 'i4')]\n+        )\n+        \n+        # This SHOULD trigger warning since len(dtype) > 1 is False but len(dtype.names) > 0\n+        # Actually, let's check what len(dtype) returns for single field\n+        assert len(single_field_array.dtype) == 1\n+        \n+        # This should NOT trigger warning since len(dtype) == 1, not > 1\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\")  # Turn warnings into errors\n+            data, is_mixin = t._convert_col_for_table(single_field_array)\n+        \n+        # Should not be converted to mixin\n+        assert not isinstance(data, NdarrayMixin)\n+        assert is_mixin is False\n+\n+\n+class TestStructuredArrayWarningIntegration:\n+    \"\"\"Integration tests for structured array warning in real usage scenarios.\"\"\"\n+    \n+    def test_table_initialization_with_structured_array(self):\n+        \"\"\"Test that table initialization handles structured arrays correctly.\"\"\"\n+        structured_array = np.array(\n+            [(1, 2.5, 'a'), (3, 4.5, 'b')],\n+            dtype=[('x', 'i4'), ('y', 'f8'), ('z', 'U1')]\n+        )\n+        \n+        # Table initialization should not trigger the warning since it uses different code path\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\")\n+            t = Table(structured_array)\n+        \n+        # Should create separate columns for each field\n+        assert 'x' in t.colnames\n+        assert 'y' in t.colnames\n+        assert 'z' in t.colnames\n+    \n+    def test_workaround_with_column_wrapper(self):\n+        \"\"\"Test that wrapping in Column avoids the warning.\"\"\"\n+        structured_array = np.array(\n+            [(1, 2.5, 'a'), (3, 4.5, 'b')],\n+            dtype=[('x', 'i4'), ('y', 'f8'), ('z', 'U1')]\n+        )\n+        \n+        t = Table()\n+        col = Column(structured_array)\n+        \n+        # This should NOT trigger any warning\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\")\n+            t.add_column(col, name='structured_col')\n+        \n+        # Should be added as Column, not NdarrayMixin\n+        assert 'structured_col' in t.colnames\n+        assert isinstance(t['structured_col'], Column)\n+        assert not isinstance(t['structured_col'], NdarrayMixin)\n"
}