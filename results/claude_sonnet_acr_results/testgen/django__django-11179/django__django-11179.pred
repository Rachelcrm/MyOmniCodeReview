{
  "instance_id": "django__django-11179",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/delete_regress/test_pk_clearing.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.test import TestCase, TransactionTestCase\nfrom django.test.utils import override_settings\n\n\nclass SimpleModel(models.Model):\n    \"\"\"A simple model with no dependencies for testing PK clearing on delete.\"\"\"\n    name = models.CharField(max_length=100)\n    \n    class Meta:\n        app_label = 'delete_regress'\n\n\nclass ModelWithDependencies(models.Model):\n    \"\"\"A model with dependencies to test normal deletion path.\"\"\"\n    name = models.CharField(max_length=100)\n    \n    class Meta:\n        app_label = 'delete_regress'\n\n\nclass DependentModel(models.Model):\n    \"\"\"A model that depends on ModelWithDependencies.\"\"\"\n    parent = models.ForeignKey(ModelWithDependencies, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    \n    class Meta:\n        app_label = 'delete_regress'\n\n\nclass PKClearingTestCase(TransactionTestCase):\n    \"\"\"Test that primary keys are cleared after deletion for all deletion paths.\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test data.\"\"\"\n        # Create tables for our test models\n        from django.db import connection\n        with connection.schema_editor() as schema_editor:\n            schema_editor.create_model(SimpleModel)\n            schema_editor.create_model(ModelWithDependencies)\n            schema_editor.create_model(DependentModel)\n    \n    def tearDown(self):\n        \"\"\"Clean up test data.\"\"\"\n        from django.db import connection\n        with connection.schema_editor() as schema_editor:\n            schema_editor.delete_model(DependentModel)\n            schema_editor.delete_model(ModelWithDependencies)\n            schema_editor.delete_model(SimpleModel)\n    \n    def test_simple_model_pk_cleared_after_delete(self):\n        \"\"\"Test that PK is cleared for simple model with no dependencies (fast path).\"\"\"\n        # Create a simple model instance\n        instance = SimpleModel.objects.create(name=\"test\")\n        original_pk = instance.pk\n        \n        # Verify the instance has a PK before deletion\n        self.assertIsNotNone(instance.pk)\n        self.assertEqual(instance.pk, original_pk)\n        \n        # Delete the instance\n        deleted_count, deleted_models = instance.delete()\n        \n        # Verify deletion was successful\n        self.assertEqual(deleted_count, 1)\n        self.assertEqual(deleted_models, {'delete_regress.SimpleModel': 1})\n        \n        # BUG: This test should pass but currently fails because PK is not cleared in fast path\n        # The PK should be set to None after deletion\n        self.assertIsNone(instance.pk, \n                         \"Primary key should be None after deletion for models with no dependencies\")\n    \n    def test_model_with_dependencies_pk_cleared_after_delete(self):\n        \"\"\"Test that PK is cleared for model with dependencies (normal path).\"\"\"\n        # Create a model with dependencies\n        parent = ModelWithDependencies.objects.create(name=\"parent\")\n        dependent = DependentModel.objects.create(parent=parent, name=\"child\")\n        \n        original_parent_pk = parent.pk\n        original_dependent_pk = dependent.pk\n        \n        # Verify instances have PKs before deletion\n        self.assertIsNotNone(parent.pk)\n        self.assertIsNotNone(dependent.pk)\n        \n        # Delete the parent (should cascade to dependent)\n        deleted_count, deleted_models = parent.delete()\n        \n        # Verify deletion was successful\n        self.assertEqual(deleted_count, 2)  # Parent + dependent\n        self.assertIn('delete_regress.ModelWithDependencies', deleted_models)\n        self.assertIn('delete_regress.DependentModel', deleted_models)\n        \n        # This should pass - normal deletion path clears PKs correctly\n        self.assertIsNone(parent.pk, \n                         \"Primary key should be None after deletion for models with dependencies\")\n    \n    def test_multiple_simple_models_pk_cleared_after_delete(self):\n        \"\"\"Test PK clearing when deleting multiple instances of simple models.\"\"\"\n        # Create multiple simple model instances\n        instance1 = SimpleModel.objects.create(name=\"test1\")\n        instance2 = SimpleModel.objects.create(name=\"test2\")\n        \n        original_pk1 = instance1.pk\n        original_pk2 = instance2.pk\n        \n        # Verify instances have PKs before deletion\n        self.assertIsNotNone(instance1.pk)\n        self.assertIsNotNone(instance2.pk)\n        \n        # Delete first instance\n        deleted_count1, _ = instance1.delete()\n        self.assertEqual(deleted_count1, 1)\n        \n        # Delete second instance\n        deleted_count2, _ = instance2.delete()\n        self.assertEqual(deleted_count2, 1)\n        \n        # Both PKs should be cleared\n        self.assertIsNone(instance1.pk, \n                         \"First instance PK should be None after deletion\")\n        self.assertIsNone(instance2.pk, \n                         \"Second instance PK should be None after deletion\")\n    \n    def test_pk_clearing_with_custom_pk_field(self):\n        \"\"\"Test PK clearing works with custom primary key fields.\"\"\"\n        \n        class CustomPKModel(models.Model):\n            custom_id = models.AutoField(primary_key=True)\n            name = models.CharField(max_length=100)\n            \n            class Meta:\n                app_label = 'delete_regress'\n        \n        # Create table for custom PK model\n        from django.db import connection\n        with connection.schema_editor() as schema_editor:\n            schema_editor.create_model(CustomPKModel)\n        \n        try:\n            # Create instance with custom PK\n            instance = CustomPKModel.objects.create(name=\"custom_pk_test\")\n            original_pk = instance.custom_id\n            \n            # Verify the instance has a custom PK before deletion\n            self.assertIsNotNone(instance.custom_id)\n            self.assertEqual(instance.pk, original_pk)  # pk property should work\n            \n            # Delete the instance\n            deleted_count, _ = instance.delete()\n            self.assertEqual(deleted_count, 1)\n            \n            # Custom PK should be cleared\n            self.assertIsNone(instance.custom_id, \n                             \"Custom primary key should be None after deletion\")\n            self.assertIsNone(instance.pk, \n                             \"pk property should be None after deletion\")\n        \n        finally:\n            # Clean up custom PK model table\n            with connection.schema_editor() as schema_editor:\n                schema_editor.delete_model(CustomPKModel)\n    \n    def test_pk_clearing_preserves_other_fields(self):\n        \"\"\"Test that PK clearing doesn't affect other model fields.\"\"\"\n        # Create a simple model instance\n        instance = SimpleModel.objects.create(name=\"preserve_test\")\n        original_name = instance.name\n        original_pk = instance.pk\n        \n        # Delete the instance\n        deleted_count, _ = instance.delete()\n        self.assertEqual(deleted_count, 1)\n        \n        # PK should be cleared but other fields should remain\n        self.assertIsNone(instance.pk, \"Primary key should be None after deletion\")\n        self.assertEqual(instance.name, original_name, \n                        \"Other fields should be preserved after deletion\")\n    \n    def test_deleted_instance_cannot_be_deleted_again(self):\n        \"\"\"Test that attempting to delete an already deleted instance raises an error.\"\"\"\n        # Create a simple model instance\n        instance = SimpleModel.objects.create(name=\"delete_twice_test\")\n        \n        # Delete the instance once\n        deleted_count, _ = instance.delete()\n        self.assertEqual(deleted_count, 1)\n        self.assertIsNone(instance.pk)\n        \n        # Attempting to delete again should raise an assertion error\n        with self.assertRaises(AssertionError) as cm:\n            instance.delete()\n        \n        self.assertIn(\"can't be deleted because its\", str(cm.exception))\n        self.assertIn(\"attribute is set to None\", str(cm.exception))\n\n\nclass PKClearingEdgeCasesTestCase(TransactionTestCase):\n    \"\"\"Test edge cases for PK clearing behavior.\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test data.\"\"\"\n        from django.db import connection\n        with connection.schema_editor() as schema_editor:\n            schema_editor.create_model(SimpleModel)\n    \n    def tearDown(self):\n        \"\"\"Clean up test data.\"\"\"\n        from django.db import connection\n        with connection.schema_editor() as schema_editor:\n            schema_editor.delete_model(SimpleModel)\n    \n    def test_pk_clearing_with_keep_parents_true(self):\n        \"\"\"Test PK clearing behavior when keep_parents=True.\"\"\"\n        instance = SimpleModel.objects.create(name=\"keep_parents_test\")\n        original_pk = instance.pk\n        \n        # Delete with keep_parents=True (should still clear PK for simple model)\n        deleted_count, _ = instance.delete(keep_parents=True)\n        self.assertEqual(deleted_count, 1)\n        \n        # PK should still be cleared even with keep_parents=True\n        self.assertIsNone(instance.pk, \n                         \"Primary key should be None after deletion even with keep_parents=True\")\n    \n    def test_pk_clearing_with_specific_using_database(self):\n        \"\"\"Test PK clearing when specifying a database connection.\"\"\"\n        instance = SimpleModel.objects.create(name=\"using_db_test\")\n        original_pk = instance.pk\n        \n        # Delete specifying the default database\n        deleted_count, _ = instance.delete(using='default')\n        self.assertEqual(deleted_count, 1)\n        \n        # PK should be cleared regardless of using parameter\n        self.assertIsNone(instance.pk, \n                         \"Primary key should be None after deletion when using specific database\")\n</patched>\n</file>\n```",
  "patch": "--- a/tests/delete_regress/test_pk_clearing.py\n+++ b/tests/delete_regress/test_pk_clearing.py\n-# Empty if creating new file\n+import pytest\n+from django.db import models\n+from django.test import TestCase, TransactionTestCase\n+from django.test.utils import override_settings\n+\n+\n+class SimpleModel(models.Model):\n+    \"\"\"A simple model with no dependencies for testing PK clearing on delete.\"\"\"\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'delete_regress'\n+\n+\n+class ModelWithDependencies(models.Model):\n+    \"\"\"A model with dependencies to test normal deletion path.\"\"\"\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'delete_regress'\n+\n+\n+class DependentModel(models.Model):\n+    \"\"\"A model that depends on ModelWithDependencies.\"\"\"\n+    parent = models.ForeignKey(ModelWithDependencies, on_delete=models.CASCADE)\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'delete_regress'\n+\n+\n+class PKClearingTestCase(TransactionTestCase):\n+    \"\"\"Test that primary keys are cleared after deletion for all deletion paths.\"\"\"\n+    \n+    def setUp(self):\n+        \"\"\"Set up test data.\"\"\"\n+        # Create tables for our test models\n+        from django.db import connection\n+        with connection.schema_editor() as schema_editor:\n+            schema_editor.create_model(SimpleModel)\n+            schema_editor.create_model(ModelWithDependencies)\n+            schema_editor.create_model(DependentModel)\n+    \n+    def tearDown(self):\n+        \"\"\"Clean up test data.\"\"\"\n+        from django.db import connection\n+        with connection.schema_editor() as schema_editor:\n+            schema_editor.delete_model(DependentModel)\n+            schema_editor.delete_model(ModelWithDependencies)\n+            schema_editor.delete_model(SimpleModel)\n+    \n+    def test_simple_model_pk_cleared_after_delete(self):\n+        \"\"\"Test that PK is cleared for simple model with no dependencies (fast path).\"\"\"\n+        # Create a simple model instance\n+        instance = SimpleModel.objects.create(name=\"test\")\n+        original_pk = instance.pk\n+        \n+        # Verify the instance has a PK before deletion\n+        self.assertIsNotNone(instance.pk)\n+        self.assertEqual(instance.pk, original_pk)\n+        \n+        # Delete the instance\n+        deleted_count, deleted_models = instance.delete()\n+        \n+        # Verify deletion was successful\n+        self.assertEqual(deleted_count, 1)\n+        self.assertEqual(deleted_models, {'delete_regress.SimpleModel': 1})\n+        \n+        # BUG: This test should pass but currently fails because PK is not cleared in fast path\n+        # The PK should be set to None after deletion\n+        self.assertIsNone(instance.pk, \n+                         \"Primary key should be None after deletion for models with no dependencies\")\n+    \n+    def test_model_with_dependencies_pk_cleared_after_delete(self):\n+        \"\"\"Test that PK is cleared for model with dependencies (normal path).\"\"\"\n+        # Create a model with dependencies\n+        parent = ModelWithDependencies.objects.create(name=\"parent\")\n+        dependent = DependentModel.objects.create(parent=parent, name=\"child\")\n+        \n+        original_parent_pk = parent.pk\n+        original_dependent_pk = dependent.pk\n+        \n+        # Verify instances have PKs before deletion\n+        self.assertIsNotNone(parent.pk)\n+        self.assertIsNotNone(dependent.pk)\n+        \n+        # Delete the parent (should cascade to dependent)\n+        deleted_count, deleted_models = parent.delete()\n+        \n+        # Verify deletion was successful\n+        self.assertEqual(deleted_count, 2)  # Parent + dependent\n+        self.assertIn('delete_regress.ModelWithDependencies', deleted_models)\n+        self.assertIn('delete_regress.DependentModel', deleted_models)\n+        \n+        # This should pass - normal deletion path clears PKs correctly\n+        self.assertIsNone(parent.pk, \n+                         \"Primary key should be None after deletion for models with dependencies\")\n+    \n+    def test_multiple_simple_models_pk_cleared_after_delete(self):\n+        \"\"\"Test PK clearing when deleting multiple instances of simple models.\"\"\"\n+        # Create multiple simple model instances\n+        instance1 = SimpleModel.objects.create(name=\"test1\")\n+        instance2 = SimpleModel.objects.create(name=\"test2\")\n+        \n+        original_pk1 = instance1.pk\n+        original_pk2 = instance2.pk\n+        \n+        # Verify instances have PKs before deletion\n+        self.assertIsNotNone(instance1.pk)\n+        self.assertIsNotNone(instance2.pk)\n+        \n+        # Delete first instance\n+        deleted_count1, _ = instance1.delete()\n+        self.assertEqual(deleted_count1, 1)\n+        \n+        # Delete second instance\n+        deleted_count2, _ = instance2.delete()\n+        self.assertEqual(deleted_count2, 1)\n+        \n+        # Both PKs should be cleared\n+        self.assertIsNone(instance1.pk, \n+                         \"First instance PK should be None after deletion\")\n+        self.assertIsNone(instance2.pk, \n+                         \"Second instance PK should be None after deletion\")\n+    \n+    def test_pk_clearing_with_custom_pk_field(self):\n+        \"\"\"Test PK clearing works with custom primary key fields.\"\"\"\n+        \n+        class CustomPKModel(models.Model):\n+            custom_id = models.AutoField(primary_key=True)\n+            name = models.CharField(max_length=100)\n+            \n+            class Meta:\n+                app_label = 'delete_regress'\n+        \n+        # Create table for custom PK model\n+        from django.db import connection\n+        with connection.schema_editor() as schema_editor:\n+            schema_editor.create_model(CustomPKModel)\n+        \n+        try:\n+            # Create instance with custom PK\n+            instance = CustomPKModel.objects.create(name=\"custom_pk_test\")\n+            original_pk = instance.custom_id\n+            \n+            # Verify the instance has a custom PK before deletion\n+            self.assertIsNotNone(instance.custom_id)\n+            self.assertEqual(instance.pk, original_pk)  # pk property should work\n+            \n+            # Delete the instance\n+            deleted_count, _ = instance.delete()\n+            self.assertEqual(deleted_count, 1)\n+            \n+            # Custom PK should be cleared\n+            self.assertIsNone(instance.custom_id, \n+                             \"Custom primary key should be None after deletion\")\n+            self.assertIsNone(instance.pk, \n+                             \"pk property should be None after deletion\")\n+        \n+        finally:\n+            # Clean up custom PK model table\n+            with connection.schema_editor() as schema_editor:\n+                schema_editor.delete_model(CustomPKModel)\n+    \n+    def test_pk_clearing_preserves_other_fields(self):\n+        \"\"\"Test that PK clearing doesn't affect other model fields.\"\"\"\n+        # Create a simple model instance\n+        instance = SimpleModel.objects.create(name=\"preserve_test\")\n+        original_name = instance.name\n+        original_pk = instance.pk\n+        \n+        # Delete the instance\n+        deleted_count, _ = instance.delete()\n+        self.assertEqual(deleted_count, 1)\n+        \n+        # PK should be cleared but other fields should remain\n+        self.assertIsNone(instance.pk, \"Primary key should be None after deletion\")\n+        self.assertEqual(instance.name, original_name, \n+                        \"Other fields should be preserved after deletion\")\n+    \n+    def test_deleted_instance_cannot_be_deleted_again(self):\n+        \"\"\"Test that attempting to delete an already deleted instance raises an error.\"\"\"\n+        # Create a simple model instance\n+        instance = SimpleModel.objects.create(name=\"delete_twice_test\")\n+        \n+        # Delete the instance once\n+        deleted_count, _ = instance.delete()\n+        self.assertEqual(deleted_count, 1)\n+        self.assertIsNone(instance.pk)\n+        \n+        # Attempting to delete again should raise an assertion error\n+        with self.assertRaises(AssertionError) as cm:\n+            instance.delete()\n+        \n+        self.assertIn(\"can't be deleted because its\", str(cm.exception))\n+        self.assertIn(\"attribute is set to None\", str(cm.exception))\n+\n+\n+class PKClearingEdgeCasesTestCase(TransactionTestCase):\n+    \"\"\"Test edge cases for PK clearing behavior.\"\"\"\n+    \n+    def setUp(self):\n+        \"\"\"Set up test data.\"\"\"\n+        from django.db import connection\n+        with connection.schema_editor() as schema_editor:\n+            schema_editor.create_model(SimpleModel)\n+    \n+    def tearDown(self):\n+        \"\"\"Clean up test data.\"\"\"\n+        from django.db import connection\n+        with connection.schema_editor() as schema_editor:\n+            schema_editor.delete_model(SimpleModel)\n+    \n+    def test_pk_clearing_with_keep_parents_true(self):\n+        \"\"\"Test PK clearing behavior when keep_parents=True.\"\"\"\n+        instance = SimpleModel.objects.create(name=\"keep_parents_test\")\n+        original_pk = instance.pk\n+        \n+        # Delete with keep_parents=True (should still clear PK for simple model)\n+        deleted_count, _ = instance.delete(keep_parents=True)\n+        self.assertEqual(deleted_count, 1)\n+        \n+        # PK should still be cleared even with keep_parents=True\n+        self.assertIsNone(instance.pk, \n+                         \"Primary key should be None after deletion even with keep_parents=True\")\n+    \n+    def test_pk_clearing_with_specific_using_database(self):\n+        \"\"\"Test PK clearing when specifying a database connection.\"\"\"\n+        instance = SimpleModel.objects.create(name=\"using_db_test\")\n+        original_pk = instance.pk\n+        \n+        # Delete specifying the default database\n+        deleted_count, _ = instance.delete(using='default')\n+        self.assertEqual(deleted_count, 1)\n+        \n+        # PK should be cleared regardless of using parameter\n+        self.assertIsNone(instance.pk, \n+                         \"Primary key should be None after deletion when using specific database\")\n"
}