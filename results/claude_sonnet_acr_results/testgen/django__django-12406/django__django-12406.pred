{
  "instance_id": "django__django-12406",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/forms_tests/test_models.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.forms import ModelForm\nfrom django.forms.widgets import RadioSelect, Select\nfrom django.test import TestCase\n\n\nclass BatchData(models.Model):\n    \"\"\"Test model for foreign key relationships.\"\"\"\n    name = models.CharField(max_length=100)\n    \n    def __str__(self):\n        return self.name\n    \n    class Meta:\n        app_label = 'forms_tests'\n\n\nclass TestRun(models.Model):\n    \"\"\"Test model with foreign key field that has blank=False.\"\"\"\n    # Foreign key with null=True, blank=False - this should not show blank option with RadioSelect\n    data_file = models.ForeignKey(BatchData, on_delete=models.SET_NULL, null=True, blank=False)\n    \n    class Meta:\n        app_label = 'forms_tests'\n\n\nclass TestRunOptional(models.Model):\n    \"\"\"Test model with foreign key field that has blank=True.\"\"\"\n    # Foreign key with null=True, blank=True - this should show blank option with RadioSelect\n    data_file = models.ForeignKey(BatchData, on_delete=models.SET_NULL, null=True, blank=True)\n    \n    class Meta:\n        app_label = 'forms_tests'\n\n\nclass TestRunForm(ModelForm):\n    \"\"\"Form using RadioSelect widget for foreign key field.\"\"\"\n    class Meta:\n        model = TestRun\n        fields = ['data_file']\n        widgets = {'data_file': RadioSelect()}\n\n\nclass TestRunOptionalForm(ModelForm):\n    \"\"\"Form using RadioSelect widget for optional foreign key field.\"\"\"\n    class Meta:\n        model = TestRunOptional\n        fields = ['data_file']\n        widgets = {'data_file': RadioSelect()}\n\n\nclass TestRunSelectForm(ModelForm):\n    \"\"\"Form using default Select widget for foreign key field.\"\"\"\n    class Meta:\n        model = TestRun\n        fields = ['data_file']\n        widgets = {'data_file': Select()}\n\n\nclass RadioSelectForeignKeyTests(TestCase):\n    \"\"\"Test suite for RadioSelect widget behavior with foreign key fields.\"\"\"\n    \n    @classmethod\n    def setUpTestData(cls):\n        \"\"\"Create test data for foreign key relationships.\"\"\"\n        cls.batch_data1 = BatchData.objects.create(name=\"First Data File\")\n        cls.batch_data2 = BatchData.objects.create(name=\"Second Data File\")\n    \n    def test_radioselect_required_field_no_blank_option_before_fix(self):\n        \"\"\"\n        Test that demonstrates the bug: RadioSelect shows blank option for required fields.\n        This test should FAIL before the fix is applied.\n        \"\"\"\n        form = TestRunForm()\n        field = form.fields['data_file']\n        \n        # Get the choices from the field\n        choices = list(field.choices)\n        \n        # Before fix: this assertion should FAIL because blank choice is present\n        # The bug is that choices will include ('', '---------') even though blank=False\n        choice_values = [choice[0] for choice in choices]\n        \n        # This assertion will fail before the fix because '' will be in choice_values\n        with self.assertRaises(AssertionError):\n            self.assertNotIn('', choice_values, \n                           \"Blank choice should not be present for required RadioSelect field\")\n    \n    def test_radioselect_required_field_no_blank_option_after_fix(self):\n        \"\"\"\n        Test that verifies the fix: RadioSelect should not show blank option for required fields.\n        This test should PASS after the fix is applied.\n        \"\"\"\n        form = TestRunForm()\n        field = form.fields['data_file']\n        \n        # Get the choices from the field\n        choices = list(field.choices)\n        choice_values = [choice[0] for choice in choices]\n        \n        # After fix: blank choice should not be present\n        self.assertNotIn('', choice_values, \n                        \"Blank choice should not be present for required RadioSelect field\")\n        \n        # Verify that actual data choices are present\n        self.assertIn(self.batch_data1.pk, choice_values)\n        self.assertIn(self.batch_data2.pk, choice_values)\n        \n        # Verify the number of choices (should be 2, not 3)\n        self.assertEqual(len(choices), 2, \n                        \"Should only have choices for actual data, no blank choice\")\n    \n    def test_radioselect_optional_field_has_blank_option(self):\n        \"\"\"\n        Test that RadioSelect still shows blank option for optional fields (blank=True).\n        This ensures the fix doesn't break existing functionality.\n        \"\"\"\n        form = TestRunOptionalForm()\n        field = form.fields['data_file']\n        \n        # Get the choices from the field\n        choices = list(field.choices)\n        choice_values = [choice[0] for choice in choices]\n        \n        # Optional field should still have blank choice\n        self.assertIn('', choice_values, \n                     \"Blank choice should be present for optional RadioSelect field\")\n        \n        # Verify that actual data choices are also present\n        self.assertIn(self.batch_data1.pk, choice_values)\n        self.assertIn(self.batch_data2.pk, choice_values)\n        \n        # Verify the number of choices (should be 3: blank + 2 data choices)\n        self.assertEqual(len(choices), 3, \n                        \"Should have blank choice plus choices for actual data\")\n    \n    def test_select_widget_still_has_blank_option_for_required_field(self):\n        \"\"\"\n        Test that Select widget behavior is unchanged - it should still show blank option\n        even for required fields. This ensures the fix only affects RadioSelect.\n        \"\"\"\n        form = TestRunSelectForm()\n        field = form.fields['data_file']\n        \n        # Get the choices from the field\n        choices = list(field.choices)\n        choice_values = [choice[0] for choice in choices]\n        \n        # Select widget should still have blank choice even for required fields\n        self.assertIn('', choice_values, \n                     \"Select widget should still have blank choice for required field\")\n        \n        # Verify that actual data choices are also present\n        self.assertIn(self.batch_data1.pk, choice_values)\n        self.assertIn(self.batch_data2.pk, choice_values)\n    \n    def test_radioselect_form_rendering_no_checked_option(self):\n        \"\"\"\n        Test that RadioSelect form rendering doesn't have any pre-selected option\n        for required fields when no initial value is provided.\n        \"\"\"\n        form = TestRunForm()\n        \n        # Render the form field\n        rendered_html = str(form['data_file'])\n        \n        # After fix: no radio button should be checked by default\n        self.assertNotIn('checked=\"checked\"', rendered_html,\n                        \"No radio button should be checked by default for required field\")\n        \n        # Verify that radio buttons for actual choices are present\n        self.assertIn(f'value=\"{self.batch_data1.pk}\"', rendered_html)\n        self.assertIn(f'value=\"{self.batch_data2.pk}\"', rendered_html)\n        \n        # Verify that no blank value radio button exists\n        self.assertNotIn('value=\"\"', rendered_html,\n                        \"No blank value radio button should exist for required field\")\n    \n    def test_radioselect_form_rendering_with_initial_value(self):\n        \"\"\"\n        Test that RadioSelect form rendering works correctly when initial value is provided.\n        \"\"\"\n        form = TestRunForm(initial={'data_file': self.batch_data1.pk})\n        \n        # Render the form field\n        rendered_html = str(form['data_file'])\n        \n        # The radio button for the initial value should be checked\n        self.assertIn('checked=\"checked\"', rendered_html,\n                     \"Radio button for initial value should be checked\")\n        \n        # Verify that the correct radio button is checked\n        # Look for the pattern: value=\"<pk>\" and checked=\"checked\" in the same input\n        import re\n        checked_pattern = rf'value=\"{self.batch_data1.pk}\"[^>]*checked=\"checked\"'\n        self.assertTrue(re.search(checked_pattern, rendered_html),\n                       \"The radio button for the initial value should be checked\")\n    \n    def test_radioselect_empty_label_property(self):\n        \"\"\"\n        Test that the empty_label property is correctly set to None for required RadioSelect fields.\n        \"\"\"\n        form = TestRunForm()\n        field = form.fields['data_file']\n        \n        # After fix: empty_label should be None for required RadioSelect fields\n        self.assertIsNone(field.empty_label,\n                         \"empty_label should be None for required RadioSelect field\")\n    \n    def test_radioselect_optional_empty_label_property(self):\n        \"\"\"\n        Test that the empty_label property is correctly set for optional RadioSelect fields.\n        \"\"\"\n        form = TestRunOptionalForm()\n        field = form.fields['data_file']\n        \n        # Optional field should still have empty_label\n        self.assertIsNotNone(field.empty_label,\n                           \"empty_label should not be None for optional RadioSelect field\")\n        self.assertEqual(field.empty_label, \"---------\",\n                        \"empty_label should be default dash string for optional field\")\n    \n    def test_select_widget_empty_label_property(self):\n        \"\"\"\n        Test that Select widget empty_label behavior is unchanged.\n        \"\"\"\n        form = TestRunSelectForm()\n        field = form.fields['data_file']\n        \n        # Select widget should still have empty_label even for required fields\n        self.assertIsNotNone(field.empty_label,\n                           \"Select widget should still have empty_label for required field\")\n    \n    def test_edge_case_radioselect_with_explicit_empty_label(self):\n        \"\"\"\n        Test edge case where empty_label is explicitly set in form field definition.\n        \"\"\"\n        class CustomTestRunForm(ModelForm):\n            class Meta:\n                model = TestRun\n                fields = ['data_file']\n                widgets = {'data_file': RadioSelect()}\n            \n            def __init__(self, *args, **kwargs):\n                super().__init__(*args, **kwargs)\n                # Explicitly set empty_label after form initialization\n                self.fields['data_file'].empty_label = \"Custom Empty\"\n        \n        form = CustomTestRunForm()\n        field = form.fields['data_file']\n        \n        # When explicitly set, the custom empty_label should be respected\n        # even for RadioSelect with required field\n        self.assertEqual(field.empty_label, \"Custom Empty\",\n                        \"Explicitly set empty_label should be respected\")\n        \n        choices = list(field.choices)\n        choice_values = [choice[0] for choice in choices]\n        self.assertIn('', choice_values,\n                     \"Blank choice should be present when empty_label is explicitly set\")\n</patched>\n</file>\n```",
  "patch": "--- a/tests/forms_tests/test_models.py\n+++ b/tests/forms_tests/test_models.py\n-# Empty if creating new file\n+import pytest\n+from django.db import models\n+from django.forms import ModelForm\n+from django.forms.widgets import RadioSelect, Select\n+from django.test import TestCase\n+\n+\n+class BatchData(models.Model):\n+    \"\"\"Test model for foreign key relationships.\"\"\"\n+    name = models.CharField(max_length=100)\n+    \n+    def __str__(self):\n+        return self.name\n+    \n+    class Meta:\n+        app_label = 'forms_tests'\n+\n+\n+class TestRun(models.Model):\n+    \"\"\"Test model with foreign key field that has blank=False.\"\"\"\n+    # Foreign key with null=True, blank=False - this should not show blank option with RadioSelect\n+    data_file = models.ForeignKey(BatchData, on_delete=models.SET_NULL, null=True, blank=False)\n+    \n+    class Meta:\n+        app_label = 'forms_tests'\n+\n+\n+class TestRunOptional(models.Model):\n+    \"\"\"Test model with foreign key field that has blank=True.\"\"\"\n+    # Foreign key with null=True, blank=True - this should show blank option with RadioSelect\n+    data_file = models.ForeignKey(BatchData, on_delete=models.SET_NULL, null=True, blank=True)\n+    \n+    class Meta:\n+        app_label = 'forms_tests'\n+\n+\n+class TestRunForm(ModelForm):\n+    \"\"\"Form using RadioSelect widget for foreign key field.\"\"\"\n+    class Meta:\n+        model = TestRun\n+        fields = ['data_file']\n+        widgets = {'data_file': RadioSelect()}\n+\n+\n+class TestRunOptionalForm(ModelForm):\n+    \"\"\"Form using RadioSelect widget for optional foreign key field.\"\"\"\n+    class Meta:\n+        model = TestRunOptional\n+        fields = ['data_file']\n+        widgets = {'data_file': RadioSelect()}\n+\n+\n+class TestRunSelectForm(ModelForm):\n+    \"\"\"Form using default Select widget for foreign key field.\"\"\"\n+    class Meta:\n+        model = TestRun\n+        fields = ['data_file']\n+        widgets = {'data_file': Select()}\n+\n+\n+class RadioSelectForeignKeyTests(TestCase):\n+    \"\"\"Test suite for RadioSelect widget behavior with foreign key fields.\"\"\"\n+    \n+    @classmethod\n+    def setUpTestData(cls):\n+        \"\"\"Create test data for foreign key relationships.\"\"\"\n+        cls.batch_data1 = BatchData.objects.create(name=\"First Data File\")\n+        cls.batch_data2 = BatchData.objects.create(name=\"Second Data File\")\n+    \n+    def test_radioselect_required_field_no_blank_option_before_fix(self):\n+        \"\"\"\n+        Test that demonstrates the bug: RadioSelect shows blank option for required fields.\n+        This test should FAIL before the fix is applied.\n+        \"\"\"\n+        form = TestRunForm()\n+        field = form.fields['data_file']\n+        \n+        # Get the choices from the field\n+        choices = list(field.choices)\n+        \n+        # Before fix: this assertion should FAIL because blank choice is present\n+        # The bug is that choices will include ('', '---------') even though blank=False\n+        choice_values = [choice[0] for choice in choices]\n+        \n+        # This assertion will fail before the fix because '' will be in choice_values\n+        with self.assertRaises(AssertionError):\n+            self.assertNotIn('', choice_values, \n+                           \"Blank choice should not be present for required RadioSelect field\")\n+    \n+    def test_radioselect_required_field_no_blank_option_after_fix(self):\n+        \"\"\"\n+        Test that verifies the fix: RadioSelect should not show blank option for required fields.\n+        This test should PASS after the fix is applied.\n+        \"\"\"\n+        form = TestRunForm()\n+        field = form.fields['data_file']\n+        \n+        # Get the choices from the field\n+        choices = list(field.choices)\n+        choice_values = [choice[0] for choice in choices]\n+        \n+        # After fix: blank choice should not be present\n+        self.assertNotIn('', choice_values, \n+                        \"Blank choice should not be present for required RadioSelect field\")\n+        \n+        # Verify that actual data choices are present\n+        self.assertIn(self.batch_data1.pk, choice_values)\n+        self.assertIn(self.batch_data2.pk, choice_values)\n+        \n+        # Verify the number of choices (should be 2, not 3)\n+        self.assertEqual(len(choices), 2, \n+                        \"Should only have choices for actual data, no blank choice\")\n+    \n+    def test_radioselect_optional_field_has_blank_option(self):\n+        \"\"\"\n+        Test that RadioSelect still shows blank option for optional fields (blank=True).\n+        This ensures the fix doesn't break existing functionality.\n+        \"\"\"\n+        form = TestRunOptionalForm()\n+        field = form.fields['data_file']\n+        \n+        # Get the choices from the field\n+        choices = list(field.choices)\n+        choice_values = [choice[0] for choice in choices]\n+        \n+        # Optional field should still have blank choice\n+        self.assertIn('', choice_values, \n+                     \"Blank choice should be present for optional RadioSelect field\")\n+        \n+        # Verify that actual data choices are also present\n+        self.assertIn(self.batch_data1.pk, choice_values)\n+        self.assertIn(self.batch_data2.pk, choice_values)\n+        \n+        # Verify the number of choices (should be 3: blank + 2 data choices)\n+        self.assertEqual(len(choices), 3, \n+                        \"Should have blank choice plus choices for actual data\")\n+    \n+    def test_select_widget_still_has_blank_option_for_required_field(self):\n+        \"\"\"\n+        Test that Select widget behavior is unchanged - it should still show blank option\n+        even for required fields. This ensures the fix only affects RadioSelect.\n+        \"\"\"\n+        form = TestRunSelectForm()\n+        field = form.fields['data_file']\n+        \n+        # Get the choices from the field\n+        choices = list(field.choices)\n+        choice_values = [choice[0] for choice in choices]\n+        \n+        # Select widget should still have blank choice even for required fields\n+        self.assertIn('', choice_values, \n+                     \"Select widget should still have blank choice for required field\")\n+        \n+        # Verify that actual data choices are also present\n+        self.assertIn(self.batch_data1.pk, choice_values)\n+        self.assertIn(self.batch_data2.pk, choice_values)\n+    \n+    def test_radioselect_form_rendering_no_checked_option(self):\n+        \"\"\"\n+        Test that RadioSelect form rendering doesn't have any pre-selected option\n+        for required fields when no initial value is provided.\n+        \"\"\"\n+        form = TestRunForm()\n+        \n+        # Render the form field\n+        rendered_html = str(form['data_file'])\n+        \n+        # After fix: no radio button should be checked by default\n+        self.assertNotIn('checked=\"checked\"', rendered_html,\n+                        \"No radio button should be checked by default for required field\")\n+        \n+        # Verify that radio buttons for actual choices are present\n+        self.assertIn(f'value=\"{self.batch_data1.pk}\"', rendered_html)\n+        self.assertIn(f'value=\"{self.batch_data2.pk}\"', rendered_html)\n+        \n+        # Verify that no blank value radio button exists\n+        self.assertNotIn('value=\"\"', rendered_html,\n+                        \"No blank value radio button should exist for required field\")\n+    \n+    def test_radioselect_form_rendering_with_initial_value(self):\n+        \"\"\"\n+        Test that RadioSelect form rendering works correctly when initial value is provided.\n+        \"\"\"\n+        form = TestRunForm(initial={'data_file': self.batch_data1.pk})\n+        \n+        # Render the form field\n+        rendered_html = str(form['data_file'])\n+        \n+        # The radio button for the initial value should be checked\n+        self.assertIn('checked=\"checked\"', rendered_html,\n+                     \"Radio button for initial value should be checked\")\n+        \n+        # Verify that the correct radio button is checked\n+        # Look for the pattern: value=\"<pk>\" and checked=\"checked\" in the same input\n+        import re\n+        checked_pattern = rf'value=\"{self.batch_data1.pk}\"[^>]*checked=\"checked\"'\n+        self.assertTrue(re.search(checked_pattern, rendered_html),\n+                       \"The radio button for the initial value should be checked\")\n+    \n+    def test_radioselect_empty_label_property(self):\n+        \"\"\"\n+        Test that the empty_label property is correctly set to None for required RadioSelect fields.\n+        \"\"\"\n+        form = TestRunForm()\n+        field = form.fields['data_file']\n+        \n+        # After fix: empty_label should be None for required RadioSelect fields\n+        self.assertIsNone(field.empty_label,\n+                         \"empty_label should be None for required RadioSelect field\")\n+    \n+    def test_radioselect_optional_empty_label_property(self):\n+        \"\"\"\n+        Test that the empty_label property is correctly set for optional RadioSelect fields.\n+        \"\"\"\n+        form = TestRunOptionalForm()\n+        field = form.fields['data_file']\n+        \n+        # Optional field should still have empty_label\n+        self.assertIsNotNone(field.empty_label,\n+                           \"empty_label should not be None for optional RadioSelect field\")\n+        self.assertEqual(field.empty_label, \"---------\",\n+                        \"empty_label should be default dash string for optional field\")\n+    \n+    def test_select_widget_empty_label_property(self):\n+        \"\"\"\n+        Test that Select widget empty_label behavior is unchanged.\n+        \"\"\"\n+        form = TestRunSelectForm()\n+        field = form.fields['data_file']\n+        \n+        # Select widget should still have empty_label even for required fields\n+        self.assertIsNotNone(field.empty_label,\n+                           \"Select widget should still have empty_label for required field\")\n+    \n+    def test_edge_case_radioselect_with_explicit_empty_label(self):\n+        \"\"\"\n+        Test edge case where empty_label is explicitly set in form field definition.\n+        \"\"\"\n+        class CustomTestRunForm(ModelForm):\n+            class Meta:\n+                model = TestRun\n+                fields = ['data_file']\n+                widgets = {'data_file': RadioSelect()}\n+            \n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                # Explicitly set empty_label after form initialization\n+                self.fields['data_file'].empty_label = \"Custom Empty\"\n+        \n+        form = CustomTestRunForm()\n+        field = form.fields['data_file']\n+        \n+        # When explicitly set, the custom empty_label should be respected\n+        # even for RadioSelect with required field\n+        self.assertEqual(field.empty_label, \"Custom Empty\",\n+                        \"Explicitly set empty_label should be respected\")\n+        \n+        choices = list(field.choices)\n+        choice_values = [choice[0] for choice in choices]\n+        self.assertIn('', choice_values,\n+                     \"Blank choice should be present when empty_label is explicitly set\")\n"
}