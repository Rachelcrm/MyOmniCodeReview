{
  "instance_id": "django__django-13212",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/test_validators.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.core.exceptions import ValidationError\nfrom django.core.validators import (\n    RegexValidator, EmailValidator, URLValidator,\n    validate_ipv4_address, validate_ipv6_address, validate_ipv46_address\n)\n\n\nclass TestValidatorValueInParams:\n    \"\"\"Test that validators include the provided value in ValidationError params.\"\"\"\n\n    def test_regex_validator_includes_value_in_params_before_fix(self):\n        \"\"\"Test that RegexValidator fails to include value in params before fix.\"\"\"\n        validator = RegexValidator(r'^\\d+$', message='%(value)s is not a valid number.')\n        \n        with pytest.raises(ValidationError) as exc_info:\n            validator('abc123')\n        \n        # Before fix: This should fail because params is None\n        error = exc_info.value\n        assert error.params is None\n        \n        # The error message should not be interpolated\n        assert str(error) == \"['%(value)s is not a valid number.']\"\n\n    def test_regex_validator_includes_value_in_params_after_fix(self):\n        \"\"\"Test that RegexValidator includes value in params after fix.\"\"\"\n        validator = RegexValidator(r'^\\d+$', message='%(value)s is not a valid number.')\n        \n        with pytest.raises(ValidationError) as exc_info:\n            validator('abc123')\n        \n        # After fix: This should pass because params includes value\n        error = exc_info.value\n        assert error.params is not None\n        assert 'value' in error.params\n        assert error.params['value'] == 'abc123'\n        \n        # The error message should be interpolated when accessed\n        messages = list(error)\n        assert 'abc123 is not a valid number.' in messages[0]\n\n    def test_email_validator_includes_value_in_params_before_fix(self):\n        \"\"\"Test that EmailValidator fails to include value in params before fix.\"\"\"\n        validator = EmailValidator(message='%(value)s is not a valid email.')\n        \n        with pytest.raises(ValidationError) as exc_info:\n            validator('invalid-email')\n        \n        # Before fix: This should fail because params is None\n        error = exc_info.value\n        assert error.params is None\n        \n        # The error message should not be interpolated\n        assert str(error) == \"['%(value)s is not a valid email.']\"\n\n    def test_email_validator_includes_value_in_params_after_fix(self):\n        \"\"\"Test that EmailValidator includes value in params after fix.\"\"\"\n        validator = EmailValidator(message='%(value)s is not a valid email.')\n        \n        with pytest.raises(ValidationError) as exc_info:\n            validator('invalid-email')\n        \n        # After fix: This should pass because params includes value\n        error = exc_info.value\n        assert error.params is not None\n        assert 'value' in error.params\n        assert error.params['value'] == 'invalid-email'\n        \n        # The error message should be interpolated when accessed\n        messages = list(error)\n        assert 'invalid-email is not a valid email.' in messages[0]\n\n    def test_email_validator_multiple_validation_points(self):\n        \"\"\"Test that EmailValidator includes value in params for all validation points.\"\"\"\n        validator = EmailValidator(message='%(value)s is not valid.')\n        \n        # Test empty value\n        with pytest.raises(ValidationError) as exc_info:\n            validator('')\n        error = exc_info.value\n        assert error.params is not None\n        assert error.params['value'] == ''\n        \n        # Test no @ symbol\n        with pytest.raises(ValidationError) as exc_info:\n            validator('invalid')\n        error = exc_info.value\n        assert error.params is not None\n        assert error.params['value'] == 'invalid'\n        \n        # Test invalid user part\n        with pytest.raises(ValidationError) as exc_info:\n            validator('invalid..user@example.com')\n        error = exc_info.value\n        assert error.params is not None\n        assert error.params['value'] == 'invalid..user@example.com'\n\n    def test_url_validator_includes_value_in_params_before_fix(self):\n        \"\"\"Test that URLValidator fails to include value in params before fix.\"\"\"\n        validator = URLValidator(message='%(value)s is not a valid URL.')\n        \n        with pytest.raises(ValidationError) as exc_info:\n            validator('invalid-url')\n        \n        # Before fix: This should fail because params is None\n        error = exc_info.value\n        assert error.params is None\n        \n        # The error message should not be interpolated\n        assert str(error) == \"['%(value)s is not a valid URL.']\"\n\n    def test_url_validator_includes_value_in_params_after_fix(self):\n        \"\"\"Test that URLValidator includes value in params after fix.\"\"\"\n        validator = URLValidator(message='%(value)s is not a valid URL.')\n        \n        with pytest.raises(ValidationError) as exc_info:\n            validator('invalid-url')\n        \n        # After fix: This should pass because params includes value\n        error = exc_info.value\n        assert error.params is not None\n        assert 'value' in error.params\n        assert error.params['value'] == 'invalid-url'\n        \n        # The error message should be interpolated when accessed\n        messages = list(error)\n        assert 'invalid-url is not a valid URL.' in messages[0]\n\n    def test_url_validator_multiple_validation_points(self):\n        \"\"\"Test that URLValidator includes value in params for all validation points.\"\"\"\n        validator = URLValidator(message='%(value)s is invalid.')\n        \n        # Test non-string value\n        with pytest.raises(ValidationError) as exc_info:\n            validator(123)\n        error = exc_info.value\n        assert error.params is not None\n        assert error.params['value'] == 123\n        \n        # Test invalid scheme\n        with pytest.raises(ValidationError) as exc_info:\n            validator('invalid://example.com')\n        error = exc_info.value\n        assert error.params is not None\n        assert error.params['value'] == 'invalid://example.com'\n\n    def test_validate_ipv4_address_includes_value_in_params_before_fix(self):\n        \"\"\"Test that validate_ipv4_address fails to include value in params before fix.\"\"\"\n        with pytest.raises(ValidationError) as exc_info:\n            validate_ipv4_address('invalid-ip')\n        \n        # Before fix: This should fail because params is None\n        error = exc_info.value\n        assert error.params is None\n\n    def test_validate_ipv4_address_includes_value_in_params_after_fix(self):\n        \"\"\"Test that validate_ipv4_address includes value in params after fix.\"\"\"\n        with pytest.raises(ValidationError) as exc_info:\n            validate_ipv4_address('invalid-ip')\n        \n        # After fix: This should pass because params includes value\n        error = exc_info.value\n        assert error.params is not None\n        assert 'value' in error.params\n        assert error.params['value'] == 'invalid-ip'\n\n    def test_validate_ipv6_address_includes_value_in_params_before_fix(self):\n        \"\"\"Test that validate_ipv6_address fails to include value in params before fix.\"\"\"\n        with pytest.raises(ValidationError) as exc_info:\n            validate_ipv6_address('invalid-ipv6')\n        \n        # Before fix: This should fail because params is None\n        error = exc_info.value\n        assert error.params is None\n\n    def test_validate_ipv6_address_includes_value_in_params_after_fix(self):\n        \"\"\"Test that validate_ipv6_address includes value in params after fix.\"\"\"\n        with pytest.raises(ValidationError) as exc_info:\n            validate_ipv6_address('invalid-ipv6')\n        \n        # After fix: This should pass because params includes value\n        error = exc_info.value\n        assert error.params is not None\n        assert 'value' in error.params\n        assert error.params['value'] == 'invalid-ipv6'\n\n    def test_validate_ipv46_address_includes_value_in_params_before_fix(self):\n        \"\"\"Test that validate_ipv46_address fails to include value in params before fix.\"\"\"\n        with pytest.raises(ValidationError) as exc_info:\n            validate_ipv46_address('invalid-ip')\n        \n        # Before fix: This should fail because params is None\n        error = exc_info.value\n        assert error.params is None\n\n    def test_validate_ipv46_address_includes_value_in_params_after_fix(self):\n        \"\"\"Test that validate_ipv46_address includes value in params after fix.\"\"\"\n        with pytest.raises(ValidationError) as exc_info:\n            validate_ipv46_address('invalid-ip')\n        \n        # After fix: This should pass because params includes value\n        error = exc_info.value\n        assert error.params is not None\n        assert 'value' in error.params\n        assert error.params['value'] == 'invalid-ip'\n\n    def test_custom_error_message_with_value_placeholder(self):\n        \"\"\"Test that custom error messages can use %(value)s placeholder after fix.\"\"\"\n        # Test with RegexValidator\n        validator = RegexValidator(\n            r'^\\d+$', \n            message='The value \"%(value)s\" contains non-numeric characters.'\n        )\n        \n        with pytest.raises(ValidationError) as exc_info:\n            validator('abc123')\n        \n        error = exc_info.value\n        messages = list(error)\n        assert 'The value \"abc123\" contains non-numeric characters.' in messages[0]\n\n    def test_existing_functionality_preserved(self):\n        \"\"\"Test that existing functionality is preserved after the fix.\"\"\"\n        # Test that validators still work with default messages\n        regex_validator = RegexValidator(r'^\\d+$')\n        email_validator = EmailValidator()\n        url_validator = URLValidator()\n        \n        # These should still raise ValidationError with default messages\n        with pytest.raises(ValidationError):\n            regex_validator('abc')\n        \n        with pytest.raises(ValidationError):\n            email_validator('invalid-email')\n        \n        with pytest.raises(ValidationError):\n            url_validator('invalid-url')\n        \n        with pytest.raises(ValidationError):\n            validate_ipv4_address('invalid')\n        \n        with pytest.raises(ValidationError):\n            validate_ipv6_address('invalid')\n        \n        with pytest.raises(ValidationError):\n            validate_ipv46_address('invalid')\n\n    def test_valid_values_still_pass(self):\n        \"\"\"Test that valid values still pass validation after the fix.\"\"\"\n        regex_validator = RegexValidator(r'^\\d+$')\n        email_validator = EmailValidator()\n        url_validator = URLValidator()\n        \n        # These should not raise any exceptions\n        regex_validator('123')\n        email_validator('test@example.com')\n        url_validator('http://example.com')\n        validate_ipv4_address('192.168.1.1')\n        validate_ipv6_address('2001:db8::1')\n        validate_ipv46_address('192.168.1.1')\n        validate_ipv46_address('2001:db8::1')\n\n    def test_edge_cases_with_value_parameter(self):\n        \"\"\"Test edge cases to ensure value parameter is always included.\"\"\"\n        validator = RegexValidator(r'^\\d+$', message='%(value)s failed validation.')\n        \n        # Test with None (should be converted to string)\n        with pytest.raises(ValidationError) as exc_info:\n            validator(None)\n        error = exc_info.value\n        assert error.params['value'] is None\n        \n        # Test with empty string\n        with pytest.raises(ValidationError) as exc_info:\n            validator('')\n        error = exc_info.value\n        assert error.params['value'] == ''\n        \n        # Test with special characters\n        with pytest.raises(ValidationError) as exc_info:\n            validator('!@#$%')\n        error = exc_info.value\n        assert error.params['value'] == '!@#$%'\n</patched>\n```",
  "patch": "--- a/tests/test_validators.py\n+++ b/tests/test_validators.py\n-# Empty if creating new file\n+import pytest\n+from django.core.exceptions import ValidationError\n+from django.core.validators import (\n+    RegexValidator, EmailValidator, URLValidator,\n+    validate_ipv4_address, validate_ipv6_address, validate_ipv46_address\n+)\n+\n+\n+class TestValidatorValueInParams:\n+    \"\"\"Test that validators include the provided value in ValidationError params.\"\"\"\n+\n+    def test_regex_validator_includes_value_in_params_before_fix(self):\n+        \"\"\"Test that RegexValidator fails to include value in params before fix.\"\"\"\n+        validator = RegexValidator(r'^\\d+$', message='%(value)s is not a valid number.')\n+        \n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('abc123')\n+        \n+        # Before fix: This should fail because params is None\n+        error = exc_info.value\n+        assert error.params is None\n+        \n+        # The error message should not be interpolated\n+        assert str(error) == \"['%(value)s is not a valid number.']\"\n+\n+    def test_regex_validator_includes_value_in_params_after_fix(self):\n+        \"\"\"Test that RegexValidator includes value in params after fix.\"\"\"\n+        validator = RegexValidator(r'^\\d+$', message='%(value)s is not a valid number.')\n+        \n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('abc123')\n+        \n+        # After fix: This should pass because params includes value\n+        error = exc_info.value\n+        assert error.params is not None\n+        assert 'value' in error.params\n+        assert error.params['value'] == 'abc123'\n+        \n+        # The error message should be interpolated when accessed\n+        messages = list(error)\n+        assert 'abc123 is not a valid number.' in messages[0]\n+\n+    def test_email_validator_includes_value_in_params_before_fix(self):\n+        \"\"\"Test that EmailValidator fails to include value in params before fix.\"\"\"\n+        validator = EmailValidator(message='%(value)s is not a valid email.')\n+        \n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('invalid-email')\n+        \n+        # Before fix: This should fail because params is None\n+        error = exc_info.value\n+        assert error.params is None\n+        \n+        # The error message should not be interpolated\n+        assert str(error) == \"['%(value)s is not a valid email.']\"\n+\n+    def test_email_validator_includes_value_in_params_after_fix(self):\n+        \"\"\"Test that EmailValidator includes value in params after fix.\"\"\"\n+        validator = EmailValidator(message='%(value)s is not a valid email.')\n+        \n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('invalid-email')\n+        \n+        # After fix: This should pass because params includes value\n+        error = exc_info.value\n+        assert error.params is not None\n+        assert 'value' in error.params\n+        assert error.params['value'] == 'invalid-email'\n+        \n+        # The error message should be interpolated when accessed\n+        messages = list(error)\n+        assert 'invalid-email is not a valid email.' in messages[0]\n+\n+    def test_email_validator_multiple_validation_points(self):\n+        \"\"\"Test that EmailValidator includes value in params for all validation points.\"\"\"\n+        validator = EmailValidator(message='%(value)s is not valid.')\n+        \n+        # Test empty value\n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('')\n+        error = exc_info.value\n+        assert error.params is not None\n+        assert error.params['value'] == ''\n+        \n+        # Test no @ symbol\n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('invalid')\n+        error = exc_info.value\n+        assert error.params is not None\n+        assert error.params['value'] == 'invalid'\n+        \n+        # Test invalid user part\n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('invalid..user@example.com')\n+        error = exc_info.value\n+        assert error.params is not None\n+        assert error.params['value'] == 'invalid..user@example.com'\n+\n+    def test_url_validator_includes_value_in_params_before_fix(self):\n+        \"\"\"Test that URLValidator fails to include value in params before fix.\"\"\"\n+        validator = URLValidator(message='%(value)s is not a valid URL.')\n+        \n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('invalid-url')\n+        \n+        # Before fix: This should fail because params is None\n+        error = exc_info.value\n+        assert error.params is None\n+        \n+        # The error message should not be interpolated\n+        assert str(error) == \"['%(value)s is not a valid URL.']\"\n+\n+    def test_url_validator_includes_value_in_params_after_fix(self):\n+        \"\"\"Test that URLValidator includes value in params after fix.\"\"\"\n+        validator = URLValidator(message='%(value)s is not a valid URL.')\n+        \n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('invalid-url')\n+        \n+        # After fix: This should pass because params includes value\n+        error = exc_info.value\n+        assert error.params is not None\n+        assert 'value' in error.params\n+        assert error.params['value'] == 'invalid-url'\n+        \n+        # The error message should be interpolated when accessed\n+        messages = list(error)\n+        assert 'invalid-url is not a valid URL.' in messages[0]\n+\n+    def test_url_validator_multiple_validation_points(self):\n+        \"\"\"Test that URLValidator includes value in params for all validation points.\"\"\"\n+        validator = URLValidator(message='%(value)s is invalid.')\n+        \n+        # Test non-string value\n+        with pytest.raises(ValidationError) as exc_info:\n+            validator(123)\n+        error = exc_info.value\n+        assert error.params is not None\n+        assert error.params['value'] == 123\n+        \n+        # Test invalid scheme\n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('invalid://example.com')\n+        error = exc_info.value\n+        assert error.params is not None\n+        assert error.params['value'] == 'invalid://example.com'\n+\n+    def test_validate_ipv4_address_includes_value_in_params_before_fix(self):\n+        \"\"\"Test that validate_ipv4_address fails to include value in params before fix.\"\"\"\n+        with pytest.raises(ValidationError) as exc_info:\n+            validate_ipv4_address('invalid-ip')\n+        \n+        # Before fix: This should fail because params is None\n+        error = exc_info.value\n+        assert error.params is None\n+\n+    def test_validate_ipv4_address_includes_value_in_params_after_fix(self):\n+        \"\"\"Test that validate_ipv4_address includes value in params after fix.\"\"\"\n+        with pytest.raises(ValidationError) as exc_info:\n+            validate_ipv4_address('invalid-ip')\n+        \n+        # After fix: This should pass because params includes value\n+        error = exc_info.value\n+        assert error.params is not None\n+        assert 'value' in error.params\n+        assert error.params['value'] == 'invalid-ip'\n+\n+    def test_validate_ipv6_address_includes_value_in_params_before_fix(self):\n+        \"\"\"Test that validate_ipv6_address fails to include value in params before fix.\"\"\"\n+        with pytest.raises(ValidationError) as exc_info:\n+            validate_ipv6_address('invalid-ipv6')\n+        \n+        # Before fix: This should fail because params is None\n+        error = exc_info.value\n+        assert error.params is None\n+\n+    def test_validate_ipv6_address_includes_value_in_params_after_fix(self):\n+        \"\"\"Test that validate_ipv6_address includes value in params after fix.\"\"\"\n+        with pytest.raises(ValidationError) as exc_info:\n+            validate_ipv6_address('invalid-ipv6')\n+        \n+        # After fix: This should pass because params includes value\n+        error = exc_info.value\n+        assert error.params is not None\n+        assert 'value' in error.params\n+        assert error.params['value'] == 'invalid-ipv6'\n+\n+    def test_validate_ipv46_address_includes_value_in_params_before_fix(self):\n+        \"\"\"Test that validate_ipv46_address fails to include value in params before fix.\"\"\"\n+        with pytest.raises(ValidationError) as exc_info:\n+            validate_ipv46_address('invalid-ip')\n+        \n+        # Before fix: This should fail because params is None\n+        error = exc_info.value\n+        assert error.params is None\n+\n+    def test_validate_ipv46_address_includes_value_in_params_after_fix(self):\n+        \"\"\"Test that validate_ipv46_address includes value in params after fix.\"\"\"\n+        with pytest.raises(ValidationError) as exc_info:\n+            validate_ipv46_address('invalid-ip')\n+        \n+        # After fix: This should pass because params includes value\n+        error = exc_info.value\n+        assert error.params is not None\n+        assert 'value' in error.params\n+        assert error.params['value'] == 'invalid-ip'\n+\n+    def test_custom_error_message_with_value_placeholder(self):\n+        \"\"\"Test that custom error messages can use %(value)s placeholder after fix.\"\"\"\n+        # Test with RegexValidator\n+        validator = RegexValidator(\n+            r'^\\d+$', \n+            message='The value \"%(value)s\" contains non-numeric characters.'\n+        )\n+        \n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('abc123')\n+        \n+        error = exc_info.value\n+        messages = list(error)\n+        assert 'The value \"abc123\" contains non-numeric characters.' in messages[0]\n+\n+    def test_existing_functionality_preserved(self):\n+        \"\"\"Test that existing functionality is preserved after the fix.\"\"\"\n+        # Test that validators still work with default messages\n+        regex_validator = RegexValidator(r'^\\d+$')\n+        email_validator = EmailValidator()\n+        url_validator = URLValidator()\n+        \n+        # These should still raise ValidationError with default messages\n+        with pytest.raises(ValidationError):\n+            regex_validator('abc')\n+        \n+        with pytest.raises(ValidationError):\n+            email_validator('invalid-email')\n+        \n+        with pytest.raises(ValidationError):\n+            url_validator('invalid-url')\n+        \n+        with pytest.raises(ValidationError):\n+            validate_ipv4_address('invalid')\n+        \n+        with pytest.raises(ValidationError):\n+            validate_ipv6_address('invalid')\n+        \n+        with pytest.raises(ValidationError):\n+            validate_ipv46_address('invalid')\n+\n+    def test_valid_values_still_pass(self):\n+        \"\"\"Test that valid values still pass validation after the fix.\"\"\"\n+        regex_validator = RegexValidator(r'^\\d+$')\n+        email_validator = EmailValidator()\n+        url_validator = URLValidator()\n+        \n+        # These should not raise any exceptions\n+        regex_validator('123')\n+        email_validator('test@example.com')\n+        url_validator('http://example.com')\n+        validate_ipv4_address('192.168.1.1')\n+        validate_ipv6_address('2001:db8::1')\n+        validate_ipv46_address('192.168.1.1')\n+        validate_ipv46_address('2001:db8::1')\n+\n+    def test_edge_cases_with_value_parameter(self):\n+        \"\"\"Test edge cases to ensure value parameter is always included.\"\"\"\n+        validator = RegexValidator(r'^\\d+$', message='%(value)s failed validation.')\n+        \n+        # Test with None (should be converted to string)\n+        with pytest.raises(ValidationError) as exc_info:\n+            validator(None)\n+        error = exc_info.value\n+        assert error.params['value'] is None\n+        \n+        # Test with empty string\n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('')\n+        error = exc_info.value\n+        assert error.params['value'] == ''\n+        \n+        # Test with special characters\n+        with pytest.raises(ValidationError) as exc_info:\n+            validator('!@#$%')\n+        error = exc_info.value\n+        assert error.params['value'] == '!@#$%'\n"
}