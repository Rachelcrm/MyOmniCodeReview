{
  "instance_id": "django__django-14376",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/backends/mysql/test_deprecated_kwargs.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom unittest import mock\nfrom django.db import connection\nfrom django.db.backends.mysql.base import DatabaseWrapper\nfrom django.test import TestCase, override_settings\n\n\nclass TestMySQLDeprecatedKwargs(TestCase):\n    \"\"\"Test that MySQL backend uses non-deprecated connection parameters.\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test database settings.\"\"\"\n        self.test_settings = {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'test_database',\n            'USER': 'test_user',\n            'PASSWORD': 'test_password',\n            'HOST': 'localhost',\n            'PORT': '3306',\n            'OPTIONS': {},\n        }\n    \n    def test_get_connection_params_uses_database_not_db(self):\n        \"\"\"Test that get_connection_params uses 'database' instead of deprecated 'db'.\"\"\"\n        wrapper = DatabaseWrapper(self.test_settings)\n        params = wrapper.get_connection_params()\n        \n        # Should use 'database' parameter, not deprecated 'db'\n        assert 'database' in params\n        assert 'db' not in params\n        assert params['database'] == 'test_database'\n    \n    def test_get_connection_params_uses_password_not_passwd(self):\n        \"\"\"Test that get_connection_params uses 'password' instead of deprecated 'passwd'.\"\"\"\n        wrapper = DatabaseWrapper(self.test_settings)\n        params = wrapper.get_connection_params()\n        \n        # Should use 'password' parameter, not deprecated 'passwd'\n        assert 'password' in params\n        assert 'passwd' not in params\n        assert params['password'] == 'test_password'\n    \n    def test_get_connection_params_with_empty_name(self):\n        \"\"\"Test that no database parameter is set when NAME is empty.\"\"\"\n        settings_empty_name = self.test_settings.copy()\n        settings_empty_name['NAME'] = ''\n        \n        wrapper = DatabaseWrapper(settings_empty_name)\n        params = wrapper.get_connection_params()\n        \n        # Neither 'database' nor 'db' should be present when NAME is empty\n        assert 'database' not in params\n        assert 'db' not in params\n    \n    def test_get_connection_params_with_empty_password(self):\n        \"\"\"Test that no password parameter is set when PASSWORD is empty.\"\"\"\n        settings_empty_password = self.test_settings.copy()\n        settings_empty_password['PASSWORD'] = ''\n        \n        wrapper = DatabaseWrapper(settings_empty_password)\n        params = wrapper.get_connection_params()\n        \n        # Neither 'password' nor 'passwd' should be present when PASSWORD is empty\n        assert 'password' not in params\n        assert 'passwd' not in params\n    \n    def test_get_connection_params_preserves_other_parameters(self):\n        \"\"\"Test that other connection parameters are preserved correctly.\"\"\"\n        wrapper = DatabaseWrapper(self.test_settings)\n        params = wrapper.get_connection_params()\n        \n        # Verify other parameters are still present and correct\n        assert params['user'] == 'test_user'\n        assert params['host'] == 'localhost'\n        assert params['port'] == 3306\n        assert 'conv' in params\n        assert 'charset' in params\n        assert params['charset'] == 'utf8'\n    \n    @mock.patch('django.db.backends.mysql.base.Database.connect')\n    def test_connection_uses_non_deprecated_params(self, mock_connect):\n        \"\"\"Test that actual connection uses non-deprecated parameters.\"\"\"\n        mock_connect.return_value = mock.MagicMock()\n        \n        wrapper = DatabaseWrapper(self.test_settings)\n        conn_params = wrapper.get_connection_params()\n        wrapper.get_new_connection(conn_params)\n        \n        # Verify that Database.connect was called with non-deprecated parameters\n        mock_connect.assert_called_once()\n        call_kwargs = mock_connect.call_args[1]\n        \n        # Should use new parameter names\n        assert 'database' in call_kwargs\n        assert 'password' in call_kwargs\n        \n        # Should NOT use deprecated parameter names\n        assert 'db' not in call_kwargs\n        assert 'passwd' not in call_kwargs\n        \n        # Verify values are correct\n        assert call_kwargs['database'] == 'test_database'\n        assert call_kwargs['password'] == 'test_password'\n    \n    def test_backward_compatibility_functionality(self):\n        \"\"\"Test that the fix doesn't break existing functionality.\"\"\"\n        wrapper = DatabaseWrapper(self.test_settings)\n        params = wrapper.get_connection_params()\n        \n        # Verify all expected parameters are present with correct values\n        expected_params = {\n            'database': 'test_database',\n            'password': 'test_password',\n            'user': 'test_user',\n            'host': 'localhost',\n            'port': 3306,\n            'charset': 'utf8',\n        }\n        \n        for key, expected_value in expected_params.items():\n            assert key in params\n            assert params[key] == expected_value\n    \n    def test_unix_socket_connection_params(self):\n        \"\"\"Test connection parameters when using Unix socket.\"\"\"\n        settings_unix_socket = self.test_settings.copy()\n        settings_unix_socket['HOST'] = '/var/run/mysqld/mysqld.sock'\n        \n        wrapper = DatabaseWrapper(settings_unix_socket)\n        params = wrapper.get_connection_params()\n        \n        # Should still use non-deprecated parameters with Unix socket\n        assert 'database' in params\n        assert 'password' in params\n        assert 'db' not in params\n        assert 'passwd' not in params\n        \n        # Unix socket specific parameter should be present\n        assert params['unix_socket'] == '/var/run/mysqld/mysqld.sock'\n        assert 'host' not in params  # host should not be set when using unix socket\n\n\nclass TestMySQLDeprecatedKwargsFailingCase(TestCase):\n    \"\"\"Test case that would fail before the fix is applied.\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test database settings.\"\"\"\n        self.test_settings = {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'test_database',\n            'USER': 'test_user', \n            'PASSWORD': 'test_password',\n            'HOST': 'localhost',\n            'PORT': '3306',\n            'OPTIONS': {},\n        }\n    \n    def test_deprecated_params_not_used_before_fix(self):\n        \"\"\"\n        This test demonstrates the bug - it would fail before the fix.\n        After the fix, deprecated parameters should not be present.\n        \"\"\"\n        wrapper = DatabaseWrapper(self.test_settings)\n        params = wrapper.get_connection_params()\n        \n        # This test will fail BEFORE the fix because the old code uses 'db' and 'passwd'\n        # After the fix, these assertions should pass\n        with pytest.raises(AssertionError, match=\"Deprecated parameter 'db' should not be used\"):\n            if 'db' in params:\n                raise AssertionError(\"Deprecated parameter 'db' should not be used\")\n        \n        with pytest.raises(AssertionError, match=\"Deprecated parameter 'passwd' should not be used\"):\n            if 'passwd' in params:\n                raise AssertionError(\"Deprecated parameter 'passwd' should not be used\")\n    \n    def test_new_params_present_after_fix(self):\n        \"\"\"\n        This test verifies the fix works - new parameters should be present.\n        \"\"\"\n        wrapper = DatabaseWrapper(self.test_settings)\n        params = wrapper.get_connection_params()\n        \n        # After the fix, these should be present\n        assert 'database' in params, \"New parameter 'database' should be present\"\n        assert 'password' in params, \"New parameter 'password' should be present\"\n        \n        # And have correct values\n        assert params['database'] == 'test_database'\n        assert params['password'] == 'test_password'\n</patched>\n```",
  "patch": "--- a/tests/backends/mysql/test_deprecated_kwargs.py\n+++ b/tests/backends/mysql/test_deprecated_kwargs.py\n-# Empty if creating new file\n+import pytest\n+from unittest import mock\n+from django.db import connection\n+from django.db.backends.mysql.base import DatabaseWrapper\n+from django.test import TestCase, override_settings\n+\n+\n+class TestMySQLDeprecatedKwargs(TestCase):\n+    \"\"\"Test that MySQL backend uses non-deprecated connection parameters.\"\"\"\n+    \n+    def setUp(self):\n+        \"\"\"Set up test database settings.\"\"\"\n+        self.test_settings = {\n+            'ENGINE': 'django.db.backends.mysql',\n+            'NAME': 'test_database',\n+            'USER': 'test_user',\n+            'PASSWORD': 'test_password',\n+            'HOST': 'localhost',\n+            'PORT': '3306',\n+            'OPTIONS': {},\n+        }\n+    \n+    def test_get_connection_params_uses_database_not_db(self):\n+        \"\"\"Test that get_connection_params uses 'database' instead of deprecated 'db'.\"\"\"\n+        wrapper = DatabaseWrapper(self.test_settings)\n+        params = wrapper.get_connection_params()\n+        \n+        # Should use 'database' parameter, not deprecated 'db'\n+        assert 'database' in params\n+        assert 'db' not in params\n+        assert params['database'] == 'test_database'\n+    \n+    def test_get_connection_params_uses_password_not_passwd(self):\n+        \"\"\"Test that get_connection_params uses 'password' instead of deprecated 'passwd'.\"\"\"\n+        wrapper = DatabaseWrapper(self.test_settings)\n+        params = wrapper.get_connection_params()\n+        \n+        # Should use 'password' parameter, not deprecated 'passwd'\n+        assert 'password' in params\n+        assert 'passwd' not in params\n+        assert params['password'] == 'test_password'\n+    \n+    def test_get_connection_params_with_empty_name(self):\n+        \"\"\"Test that no database parameter is set when NAME is empty.\"\"\"\n+        settings_empty_name = self.test_settings.copy()\n+        settings_empty_name['NAME'] = ''\n+        \n+        wrapper = DatabaseWrapper(settings_empty_name)\n+        params = wrapper.get_connection_params()\n+        \n+        # Neither 'database' nor 'db' should be present when NAME is empty\n+        assert 'database' not in params\n+        assert 'db' not in params\n+    \n+    def test_get_connection_params_with_empty_password(self):\n+        \"\"\"Test that no password parameter is set when PASSWORD is empty.\"\"\"\n+        settings_empty_password = self.test_settings.copy()\n+        settings_empty_password['PASSWORD'] = ''\n+        \n+        wrapper = DatabaseWrapper(settings_empty_password)\n+        params = wrapper.get_connection_params()\n+        \n+        # Neither 'password' nor 'passwd' should be present when PASSWORD is empty\n+        assert 'password' not in params\n+        assert 'passwd' not in params\n+    \n+    def test_get_connection_params_preserves_other_parameters(self):\n+        \"\"\"Test that other connection parameters are preserved correctly.\"\"\"\n+        wrapper = DatabaseWrapper(self.test_settings)\n+        params = wrapper.get_connection_params()\n+        \n+        # Verify other parameters are still present and correct\n+        assert params['user'] == 'test_user'\n+        assert params['host'] == 'localhost'\n+        assert params['port'] == 3306\n+        assert 'conv' in params\n+        assert 'charset' in params\n+        assert params['charset'] == 'utf8'\n+    \n+    @mock.patch('django.db.backends.mysql.base.Database.connect')\n+    def test_connection_uses_non_deprecated_params(self, mock_connect):\n+        \"\"\"Test that actual connection uses non-deprecated parameters.\"\"\"\n+        mock_connect.return_value = mock.MagicMock()\n+        \n+        wrapper = DatabaseWrapper(self.test_settings)\n+        conn_params = wrapper.get_connection_params()\n+        wrapper.get_new_connection(conn_params)\n+        \n+        # Verify that Database.connect was called with non-deprecated parameters\n+        mock_connect.assert_called_once()\n+        call_kwargs = mock_connect.call_args[1]\n+        \n+        # Should use new parameter names\n+        assert 'database' in call_kwargs\n+        assert 'password' in call_kwargs\n+        \n+        # Should NOT use deprecated parameter names\n+        assert 'db' not in call_kwargs\n+        assert 'passwd' not in call_kwargs\n+        \n+        # Verify values are correct\n+        assert call_kwargs['database'] == 'test_database'\n+        assert call_kwargs['password'] == 'test_password'\n+    \n+    def test_backward_compatibility_functionality(self):\n+        \"\"\"Test that the fix doesn't break existing functionality.\"\"\"\n+        wrapper = DatabaseWrapper(self.test_settings)\n+        params = wrapper.get_connection_params()\n+        \n+        # Verify all expected parameters are present with correct values\n+        expected_params = {\n+            'database': 'test_database',\n+            'password': 'test_password',\n+            'user': 'test_user',\n+            'host': 'localhost',\n+            'port': 3306,\n+            'charset': 'utf8',\n+        }\n+        \n+        for key, expected_value in expected_params.items():\n+            assert key in params\n+            assert params[key] == expected_value\n+    \n+    def test_unix_socket_connection_params(self):\n+        \"\"\"Test connection parameters when using Unix socket.\"\"\"\n+        settings_unix_socket = self.test_settings.copy()\n+        settings_unix_socket['HOST'] = '/var/run/mysqld/mysqld.sock'\n+        \n+        wrapper = DatabaseWrapper(settings_unix_socket)\n+        params = wrapper.get_connection_params()\n+        \n+        # Should still use non-deprecated parameters with Unix socket\n+        assert 'database' in params\n+        assert 'password' in params\n+        assert 'db' not in params\n+        assert 'passwd' not in params\n+        \n+        # Unix socket specific parameter should be present\n+        assert params['unix_socket'] == '/var/run/mysqld/mysqld.sock'\n+        assert 'host' not in params  # host should not be set when using unix socket\n+\n+\n+class TestMySQLDeprecatedKwargsFailingCase(TestCase):\n+    \"\"\"Test case that would fail before the fix is applied.\"\"\"\n+    \n+    def setUp(self):\n+        \"\"\"Set up test database settings.\"\"\"\n+        self.test_settings = {\n+            'ENGINE': 'django.db.backends.mysql',\n+            'NAME': 'test_database',\n+            'USER': 'test_user', \n+            'PASSWORD': 'test_password',\n+            'HOST': 'localhost',\n+            'PORT': '3306',\n+            'OPTIONS': {},\n+        }\n+    \n+    def test_deprecated_params_not_used_before_fix(self):\n+        \"\"\"\n+        This test demonstrates the bug - it would fail before the fix.\n+        After the fix, deprecated parameters should not be present.\n+        \"\"\"\n+        wrapper = DatabaseWrapper(self.test_settings)\n+        params = wrapper.get_connection_params()\n+        \n+        # This test will fail BEFORE the fix because the old code uses 'db' and 'passwd'\n+        # After the fix, these assertions should pass\n+        with pytest.raises(AssertionError, match=\"Deprecated parameter 'db' should not be used\"):\n+            if 'db' in params:\n+                raise AssertionError(\"Deprecated parameter 'db' should not be used\")\n+        \n+        with pytest.raises(AssertionError, match=\"Deprecated parameter 'passwd' should not be used\"):\n+            if 'passwd' in params:\n+                raise AssertionError(\"Deprecated parameter 'passwd' should not be used\")\n+    \n+    def test_new_params_present_after_fix(self):\n+        \"\"\"\n+        This test verifies the fix works - new parameters should be present.\n+        \"\"\"\n+        wrapper = DatabaseWrapper(self.test_settings)\n+        params = wrapper.get_connection_params()\n+        \n+        # After the fix, these should be present\n+        assert 'database' in params, \"New parameter 'database' should be present\"\n+        assert 'password' in params, \"New parameter 'password' should be present\"\n+        \n+        # And have correct values\n+        assert params['database'] == 'test_database'\n+        assert params['password'] == 'test_password'\n"
}