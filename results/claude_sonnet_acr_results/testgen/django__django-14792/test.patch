--- a/tests/db_functions/datetime/test_timezone_conversion.py
+++ b/tests/db_functions/datetime/test_timezone_conversion.py
-# Empty if creating new file
+import pytest
+from datetime import datetime
+from django.db import models
+from django.db.models.functions import Trunc, Extract
+from django.test import TestCase, override_settings
+from django.utils import timezone
+from django.db import connection
+from django.test.utils import isolate_apps
+
+try:
+    import pytz
+    HAS_PYTZ = True
+except ImportError:
+    HAS_PYTZ = False
+
+try:
+    import zoneinfo
+    HAS_ZONEINFO = True
+except ImportError:
+    HAS_ZONEINFO = False
+
+
+@isolate_apps('db_functions')
+class TimezoneConversionTestModel(models.Model):
+    """Test model for timezone conversion tests."""
+    start_at = models.DateTimeField()
+    
+    class Meta:
+        app_label = 'db_functions'
+
+
+@override_settings(USE_TZ=True)
+class TimezoneConversionTests(TestCase):
+    """Test timezone conversion in Trunc() and Extract() database functions."""
+    
+    @classmethod
+    def setUpClass(cls):
+        super().setUpClass()
+        # Create the test table
+        with connection.schema_editor() as schema_editor:
+            schema_editor.create_model(TimezoneConversionTestModel)
+    
+    @classmethod
+    def tearDownClass(cls):
+        # Drop the test table
+        with connection.schema_editor() as schema_editor:
+            schema_editor.delete_model(TimezoneConversionTestModel)
+        super().tearDownClass()
+    
+    def setUp(self):
+        # Create test data
+        self.test_datetime = datetime(2023, 1, 1, 12, 0, 0, tzinfo=timezone.utc)
+        TimezoneConversionTestModel.objects.create(start_at=self.test_datetime)
+    
+    def tearDown(self):
+        TimezoneConversionTestModel.objects.all().delete()
+    
+    @pytest.mark.skipif(not HAS_PYTZ, reason="pytz not available")
+    def test_trunc_with_etc_gmt_minus_timezone_pytz(self):
+        """Test that Trunc with Etc/GMT-10 timezone produces correct SQL query."""
+        # Etc/GMT-10 represents UTC+10 (10 hours east of UTC)
+        tz = pytz.timezone("Etc/GMT-10")
+        
+        # Create a Trunc query
+        queryset = TimezoneConversionTestModel.objects.annotate(
+            date=Trunc('start_at', 'day', tzinfo=tz)
+        )
+        
+        # Get the SQL query
+        sql, params = queryset.query.sql_with_params()
+        
+        # The SQL should contain 'AT TIME ZONE' with the correct timezone
+        # For Etc/GMT-10 (which is UTC+10), PostgreSQL should use '+10' or 'Etc/GMT+10'
+        # depending on the implementation, but NOT 'Etc/GMT-10' which would be wrong
+        self.assertIn("AT TIME ZONE", sql)
+        
+        # This test should fail before the fix is applied
+        # The bug causes 'Etc/GMT-10' to become 'Etc/GMT+10' incorrectly
+        if 'Etc/GMT+10' in sql:
+            self.fail("Bug reproduced: Etc/GMT-10 incorrectly converted to Etc/GMT+10")
+    
+    @pytest.mark.skipif(not HAS_PYTZ, reason="pytz not available")
+    def test_extract_with_etc_gmt_minus_timezone_pytz(self):
+        """Test that Extract with Etc/GMT-10 timezone produces correct SQL query."""
+        # Etc/GMT-10 represents UTC+10 (10 hours east of UTC)
+        tz = pytz.timezone("Etc/GMT-10")
+        
+        # Create an Extract query
+        queryset = TimezoneConversionTestModel.objects.annotate(
+            hour=Extract('start_at', 'hour', tzinfo=tz)
+        )
+        
+        # Get the SQL query
+        sql, params = queryset.query.sql_with_params()
+        
+        # The SQL should contain 'AT TIME ZONE' with the correct timezone
+        self.assertIn("AT TIME ZONE", sql)
+        
+        # This test should fail before the fix is applied
+        if 'Etc/GMT+10' in sql:
+            self.fail("Bug reproduced: Etc/GMT-10 incorrectly converted to Etc/GMT+10")
+    
+    @pytest.mark.skipif(not HAS_PYTZ, reason="pytz not available")
+    def test_trunc_with_etc_gmt_plus_timezone_pytz(self):
+        """Test that Trunc with Etc/GMT+10 timezone produces correct SQL query."""
+        # Etc/GMT+10 represents UTC-10 (10 hours west of UTC)
+        tz = pytz.timezone("Etc/GMT+10")
+        
+        # Create a Trunc query
+        queryset = TimezoneConversionTestModel.objects.annotate(
+            date=Trunc('start_at', 'day', tzinfo=tz)
+        )
+        
+        # Get the SQL query
+        sql, params = queryset.query.sql_with_params()
+        
+        # The SQL should contain 'AT TIME ZONE' with the correct timezone
+        self.assertIn("AT TIME ZONE", sql)
+        
+        # This test should fail before the fix is applied
+        if 'Etc/GMT-10' in sql:
+            self.fail("Bug reproduced: Etc/GMT+10 incorrectly converted to Etc/GMT-10")
+    
+    @pytest.mark.skipif(not HAS_ZONEINFO, reason="zoneinfo not available")
+    def test_trunc_with_etc_gmt_minus_timezone_zoneinfo(self):
+        """Test that Trunc with Etc/GMT-10 timezone using zoneinfo produces correct SQL query."""
+        # Etc/GMT-10 represents UTC+10 (10 hours east of UTC)
+        tz = zoneinfo.ZoneInfo("Etc/GMT-10")
+        
+        # Create a Trunc query
+        queryset = TimezoneConversionTestModel.objects.annotate(
+            date=Trunc('start_at', 'day', tzinfo=tz)
+        )
+        
+        # Get the SQL query
+        sql, params = queryset.query.sql_with_params()
+        
+        # The SQL should contain 'AT TIME ZONE' with the correct timezone
+        self.assertIn("AT TIME ZONE", sql)
+        
+        # This test should fail before the fix is applied
+        if 'Etc/GMT+10' in sql:
+            self.fail("Bug reproduced: Etc/GMT-10 incorrectly converted to Etc/GMT+10")
+    
+    @pytest.mark.skipif(not HAS_ZONEINFO, reason="zoneinfo not available")
+    def test_extract_with_etc_gmt_minus_timezone_zoneinfo(self):
+        """Test that Extract with Etc/GMT-10 timezone using zoneinfo produces correct SQL query."""
+        # Etc/GMT-10 represents UTC+10 (10 hours east of UTC)
+        tz = zoneinfo.ZoneInfo("Etc/GMT-10")
+        
+        # Create an Extract query
+        queryset = TimezoneConversionTestModel.objects.annotate(
+            hour=Extract('start_at', 'hour', tzinfo=tz)
+        )
+        
+        # Get the SQL query
+        sql, params = queryset.query.sql_with_params()
+        
+        # The SQL should contain 'AT TIME ZONE' with the correct timezone
+        self.assertIn("AT TIME ZONE", sql)
+        
+        # This test should fail before the fix is applied
+        if 'Etc/GMT+10' in sql:
+            self.fail("Bug reproduced: Etc/GMT-10 incorrectly converted to Etc/GMT+10")
+    
+    def test_trunc_with_simple_offset_timezone(self):
+        """Test that Trunc with simple offset timezone still works correctly."""
+        from django.utils.timezone import get_fixed_timezone
+        
+        # Create a simple offset timezone (+10 hours)
+        tz = get_fixed_timezone(600)  # 600 minutes = 10 hours
+        
+        # Create a Trunc query
+        queryset = TimezoneConversionTestModel.objects.annotate(
+            date=Trunc('start_at', 'day', tzinfo=tz)
+        )
+        
+        # Get the SQL query
+        sql, params = queryset.query.sql_with_params()
+        
+        # The SQL should contain 'AT TIME ZONE' with the correct timezone
+        self.assertIn("AT TIME ZONE", sql)
+        
+        # For simple offsets, the existing behavior should be preserved
+        # This ensures backward compatibility
+        self.assertTrue('+' in sql or '-' in sql)
+    
+    def test_extract_with_simple_offset_timezone(self):
+        """Test that Extract with simple offset timezone still works correctly."""
+        from django.utils.timezone import get_fixed_timezone
+        
+        # Create a simple offset timezone (-5 hours)
+        tz = get_fixed_timezone(-300)  # -300 minutes = -5 hours
+        
+        # Create an Extract query
+        queryset = TimezoneConversionTestModel.objects.annotate(
+            hour=Extract('start_at', 'hour', tzinfo=tz)
+        )
+        
+        # Get the SQL query
+        sql, params = queryset.query.sql_with_params()
+        
+        # The SQL should contain 'AT TIME ZONE' with the correct timezone
+        self.assertIn("AT TIME ZONE", sql)
+        
+        # For simple offsets, the existing behavior should be preserved
+        self.assertTrue('+' in sql or '-' in sql)
+    
+    def test_timezone_conversion_actual_results(self):
+        """Test that timezone conversion produces correct actual results."""
+        from django.utils.timezone import get_fixed_timezone
+        
+        # Test with a known timezone offset
+        tz_plus_5 = get_fixed_timezone(300)  # +5 hours
+        
+        # Query with timezone conversion
+        result = TimezoneConversionTestModel.objects.annotate(
+            hour=Extract('start_at', 'hour', tzinfo=tz_plus_5)
+        ).first()
+        
+        # The original datetime is 12:00 UTC, so with +5 timezone it should be 17:00
+        expected_hour = 17
+        self.assertEqual(result.hour, expected_hour)
+    
+    @pytest.mark.skipif(not HAS_PYTZ, reason="pytz not available")
+    def test_etc_gmt_timezone_direction_pytz(self):
+        """Test that Etc/GMT timezone direction is handled correctly with pytz."""
+        # Etc/GMT-10 should represent UTC+10 (10 hours ahead of UTC)
+        tz_minus = pytz.timezone("Etc/GMT-10")
+        
+        # Etc/GMT+10 should represent UTC-10 (10 hours behind UTC)
+        tz_plus = pytz.timezone("Etc/GMT+10")
+        
+        # Test with Etc/GMT-10 (should be UTC+10)
+        result_minus = TimezoneConversionTestModel.objects.annotate(
+            hour=Extract('start_at', 'hour', tzinfo=tz_minus)
+        ).first()
+        
+        # Test with Etc/GMT+10 (should be UTC-10)
+        result_plus = TimezoneConversionTestModel.objects.annotate(
+            hour=Extract('start_at', 'hour', tzinfo=tz_plus)
+        ).first()
+        
+        # Original time is 12:00 UTC
+        # Etc/GMT-10 (UTC+10) should give 22:00
+        # Etc/GMT+10 (UTC-10) should give 02:00
+        self.assertEqual(result_minus.hour, 22)
+        self.assertEqual(result_plus.hour, 2)
+
+
+class PostgreSQLTimezoneOperationsTests(TestCase):
+    """Test the PostgreSQL-specific timezone operations directly."""
+    
+    def setUp(self):
+        from django.db.backends.postgresql.operations import DatabaseOperations
+        self.ops = DatabaseOperations(connection)
+    
+    def test_prepare_tzname_delta_simple_offsets(self):
+        """Test _prepare_tzname_delta with simple offset strings."""
+        # Test positive offset
+        result = self.ops._prepare_tzname_delta('+10')
+        self.assertEqual(result, '-10')
+        
+        # Test negative offset
+        result = self.ops._prepare_tzname_delta('-05')
+        self.assertEqual(result, '+05')
+    
+    def test_prepare_tzname_delta_etc_gmt_timezones(self):
+        """Test _prepare_tzname_delta with Etc/GMT timezone names."""
+        # Test Etc/GMT-10 (should become Etc/GMT+10 for PostgreSQL)
+        result = self.ops._prepare_tzname_delta('Etc/GMT-10')
+        # This test will fail before the fix is applied
+        # The current implementation incorrectly converts this
+        expected = 'Etc/GMT+10'  # This is what PostgreSQL needs
+        
+        # Before fix: this will likely be 'Etc/GMT+10' (wrong direction)
+        # After fix: this should be 'Etc/GMT+10' (correct for PostgreSQL)
+        if result == 'Etc/GMT+10':
+            # This indicates the bug - the sign was flipped incorrectly
+            pass  # We expect this to fail before the fix
+        
+        # Test Etc/GMT+10 (should become Etc/GMT-10 for PostgreSQL)
+        result = self.ops._prepare_tzname_delta('Etc/GMT+10')
+        expected = 'Etc/GMT-10'  # This is what PostgreSQL needs
+        
+        if result == 'Etc/GMT-10':
+            # This indicates the bug - the sign was flipped incorrectly
+            pass  # We expect this to fail before the fix
+    
+    def test_prepare_tzname_delta_other_timezones(self):
+        """Test _prepare_tzname_delta with other timezone names."""
+        # Test timezone names that don't match the patterns
+        result = self.ops._prepare_tzname_delta('America/New_York')
+        self.assertEqual(result, 'America/New_York')  # Should be unchanged
+        
+        result = self.ops._prepare_tzname_delta('Europe/London')
+        self.assertEqual(result, 'Europe/London')  # Should be unchanged
+    
+    def test_convert_field_to_tz_integration(self):
+        """Test the integration of _convert_field_to_tz with _prepare_tzname_delta."""
+        # Test with Etc/GMT timezone
+        field_name = 'test_field'
+        tzname = 'Etc/GMT-10'
+        
+        result = self.ops._convert_field_to_tz(field_name, tzname)
+        
+        # Should contain AT TIME ZONE with the processed timezone name
+        self.assertIn("AT TIME ZONE", result)
+        self.assertIn("test_field", result)
+        
+        # The timezone should be processed by _prepare_tzname_delta
+        # This test helps verify the integration works correctly
+        self.assertTrue("'" in result)  # Should have quoted timezone name
