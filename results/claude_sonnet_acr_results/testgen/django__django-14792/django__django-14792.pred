{
  "instance_id": "django__django-14792",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/db_functions/datetime/test_timezone_conversion.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom datetime import datetime\nfrom django.db import models\nfrom django.db.models.functions import Trunc, Extract\nfrom django.test import TestCase, override_settings\nfrom django.utils import timezone\nfrom django.db import connection\nfrom django.test.utils import isolate_apps\n\ntry:\n    import pytz\n    HAS_PYTZ = True\nexcept ImportError:\n    HAS_PYTZ = False\n\ntry:\n    import zoneinfo\n    HAS_ZONEINFO = True\nexcept ImportError:\n    HAS_ZONEINFO = False\n\n\n@isolate_apps('db_functions')\nclass TimezoneConversionTestModel(models.Model):\n    \"\"\"Test model for timezone conversion tests.\"\"\"\n    start_at = models.DateTimeField()\n    \n    class Meta:\n        app_label = 'db_functions'\n\n\n@override_settings(USE_TZ=True)\nclass TimezoneConversionTests(TestCase):\n    \"\"\"Test timezone conversion in Trunc() and Extract() database functions.\"\"\"\n    \n    @classmethod\n    def setUpClass(cls):\n        super().setUpClass()\n        # Create the test table\n        with connection.schema_editor() as schema_editor:\n            schema_editor.create_model(TimezoneConversionTestModel)\n    \n    @classmethod\n    def tearDownClass(cls):\n        # Drop the test table\n        with connection.schema_editor() as schema_editor:\n            schema_editor.delete_model(TimezoneConversionTestModel)\n        super().tearDownClass()\n    \n    def setUp(self):\n        # Create test data\n        self.test_datetime = datetime(2023, 1, 1, 12, 0, 0, tzinfo=timezone.utc)\n        TimezoneConversionTestModel.objects.create(start_at=self.test_datetime)\n    \n    def tearDown(self):\n        TimezoneConversionTestModel.objects.all().delete()\n    \n    @pytest.mark.skipif(not HAS_PYTZ, reason=\"pytz not available\")\n    def test_trunc_with_etc_gmt_minus_timezone_pytz(self):\n        \"\"\"Test that Trunc with Etc/GMT-10 timezone produces correct SQL query.\"\"\"\n        # Etc/GMT-10 represents UTC+10 (10 hours east of UTC)\n        tz = pytz.timezone(\"Etc/GMT-10\")\n        \n        # Create a Trunc query\n        queryset = TimezoneConversionTestModel.objects.annotate(\n            date=Trunc('start_at', 'day', tzinfo=tz)\n        )\n        \n        # Get the SQL query\n        sql, params = queryset.query.sql_with_params()\n        \n        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n        # For Etc/GMT-10 (which is UTC+10), PostgreSQL should use '+10' or 'Etc/GMT+10'\n        # depending on the implementation, but NOT 'Etc/GMT-10' which would be wrong\n        self.assertIn(\"AT TIME ZONE\", sql)\n        \n        # This test should fail before the fix is applied\n        # The bug causes 'Etc/GMT-10' to become 'Etc/GMT+10' incorrectly\n        if 'Etc/GMT+10' in sql:\n            self.fail(\"Bug reproduced: Etc/GMT-10 incorrectly converted to Etc/GMT+10\")\n    \n    @pytest.mark.skipif(not HAS_PYTZ, reason=\"pytz not available\")\n    def test_extract_with_etc_gmt_minus_timezone_pytz(self):\n        \"\"\"Test that Extract with Etc/GMT-10 timezone produces correct SQL query.\"\"\"\n        # Etc/GMT-10 represents UTC+10 (10 hours east of UTC)\n        tz = pytz.timezone(\"Etc/GMT-10\")\n        \n        # Create an Extract query\n        queryset = TimezoneConversionTestModel.objects.annotate(\n            hour=Extract('start_at', 'hour', tzinfo=tz)\n        )\n        \n        # Get the SQL query\n        sql, params = queryset.query.sql_with_params()\n        \n        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n        self.assertIn(\"AT TIME ZONE\", sql)\n        \n        # This test should fail before the fix is applied\n        if 'Etc/GMT+10' in sql:\n            self.fail(\"Bug reproduced: Etc/GMT-10 incorrectly converted to Etc/GMT+10\")\n    \n    @pytest.mark.skipif(not HAS_PYTZ, reason=\"pytz not available\")\n    def test_trunc_with_etc_gmt_plus_timezone_pytz(self):\n        \"\"\"Test that Trunc with Etc/GMT+10 timezone produces correct SQL query.\"\"\"\n        # Etc/GMT+10 represents UTC-10 (10 hours west of UTC)\n        tz = pytz.timezone(\"Etc/GMT+10\")\n        \n        # Create a Trunc query\n        queryset = TimezoneConversionTestModel.objects.annotate(\n            date=Trunc('start_at', 'day', tzinfo=tz)\n        )\n        \n        # Get the SQL query\n        sql, params = queryset.query.sql_with_params()\n        \n        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n        self.assertIn(\"AT TIME ZONE\", sql)\n        \n        # This test should fail before the fix is applied\n        if 'Etc/GMT-10' in sql:\n            self.fail(\"Bug reproduced: Etc/GMT+10 incorrectly converted to Etc/GMT-10\")\n    \n    @pytest.mark.skipif(not HAS_ZONEINFO, reason=\"zoneinfo not available\")\n    def test_trunc_with_etc_gmt_minus_timezone_zoneinfo(self):\n        \"\"\"Test that Trunc with Etc/GMT-10 timezone using zoneinfo produces correct SQL query.\"\"\"\n        # Etc/GMT-10 represents UTC+10 (10 hours east of UTC)\n        tz = zoneinfo.ZoneInfo(\"Etc/GMT-10\")\n        \n        # Create a Trunc query\n        queryset = TimezoneConversionTestModel.objects.annotate(\n            date=Trunc('start_at', 'day', tzinfo=tz)\n        )\n        \n        # Get the SQL query\n        sql, params = queryset.query.sql_with_params()\n        \n        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n        self.assertIn(\"AT TIME ZONE\", sql)\n        \n        # This test should fail before the fix is applied\n        if 'Etc/GMT+10' in sql:\n            self.fail(\"Bug reproduced: Etc/GMT-10 incorrectly converted to Etc/GMT+10\")\n    \n    @pytest.mark.skipif(not HAS_ZONEINFO, reason=\"zoneinfo not available\")\n    def test_extract_with_etc_gmt_minus_timezone_zoneinfo(self):\n        \"\"\"Test that Extract with Etc/GMT-10 timezone using zoneinfo produces correct SQL query.\"\"\"\n        # Etc/GMT-10 represents UTC+10 (10 hours east of UTC)\n        tz = zoneinfo.ZoneInfo(\"Etc/GMT-10\")\n        \n        # Create an Extract query\n        queryset = TimezoneConversionTestModel.objects.annotate(\n            hour=Extract('start_at', 'hour', tzinfo=tz)\n        )\n        \n        # Get the SQL query\n        sql, params = queryset.query.sql_with_params()\n        \n        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n        self.assertIn(\"AT TIME ZONE\", sql)\n        \n        # This test should fail before the fix is applied\n        if 'Etc/GMT+10' in sql:\n            self.fail(\"Bug reproduced: Etc/GMT-10 incorrectly converted to Etc/GMT+10\")\n    \n    def test_trunc_with_simple_offset_timezone(self):\n        \"\"\"Test that Trunc with simple offset timezone still works correctly.\"\"\"\n        from django.utils.timezone import get_fixed_timezone\n        \n        # Create a simple offset timezone (+10 hours)\n        tz = get_fixed_timezone(600)  # 600 minutes = 10 hours\n        \n        # Create a Trunc query\n        queryset = TimezoneConversionTestModel.objects.annotate(\n            date=Trunc('start_at', 'day', tzinfo=tz)\n        )\n        \n        # Get the SQL query\n        sql, params = queryset.query.sql_with_params()\n        \n        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n        self.assertIn(\"AT TIME ZONE\", sql)\n        \n        # For simple offsets, the existing behavior should be preserved\n        # This ensures backward compatibility\n        self.assertTrue('+' in sql or '-' in sql)\n    \n    def test_extract_with_simple_offset_timezone(self):\n        \"\"\"Test that Extract with simple offset timezone still works correctly.\"\"\"\n        from django.utils.timezone import get_fixed_timezone\n        \n        # Create a simple offset timezone (-5 hours)\n        tz = get_fixed_timezone(-300)  # -300 minutes = -5 hours\n        \n        # Create an Extract query\n        queryset = TimezoneConversionTestModel.objects.annotate(\n            hour=Extract('start_at', 'hour', tzinfo=tz)\n        )\n        \n        # Get the SQL query\n        sql, params = queryset.query.sql_with_params()\n        \n        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n        self.assertIn(\"AT TIME ZONE\", sql)\n        \n        # For simple offsets, the existing behavior should be preserved\n        self.assertTrue('+' in sql or '-' in sql)\n    \n    def test_timezone_conversion_actual_results(self):\n        \"\"\"Test that timezone conversion produces correct actual results.\"\"\"\n        from django.utils.timezone import get_fixed_timezone\n        \n        # Test with a known timezone offset\n        tz_plus_5 = get_fixed_timezone(300)  # +5 hours\n        \n        # Query with timezone conversion\n        result = TimezoneConversionTestModel.objects.annotate(\n            hour=Extract('start_at', 'hour', tzinfo=tz_plus_5)\n        ).first()\n        \n        # The original datetime is 12:00 UTC, so with +5 timezone it should be 17:00\n        expected_hour = 17\n        self.assertEqual(result.hour, expected_hour)\n    \n    @pytest.mark.skipif(not HAS_PYTZ, reason=\"pytz not available\")\n    def test_etc_gmt_timezone_direction_pytz(self):\n        \"\"\"Test that Etc/GMT timezone direction is handled correctly with pytz.\"\"\"\n        # Etc/GMT-10 should represent UTC+10 (10 hours ahead of UTC)\n        tz_minus = pytz.timezone(\"Etc/GMT-10\")\n        \n        # Etc/GMT+10 should represent UTC-10 (10 hours behind UTC)\n        tz_plus = pytz.timezone(\"Etc/GMT+10\")\n        \n        # Test with Etc/GMT-10 (should be UTC+10)\n        result_minus = TimezoneConversionTestModel.objects.annotate(\n            hour=Extract('start_at', 'hour', tzinfo=tz_minus)\n        ).first()\n        \n        # Test with Etc/GMT+10 (should be UTC-10)\n        result_plus = TimezoneConversionTestModel.objects.annotate(\n            hour=Extract('start_at', 'hour', tzinfo=tz_plus)\n        ).first()\n        \n        # Original time is 12:00 UTC\n        # Etc/GMT-10 (UTC+10) should give 22:00\n        # Etc/GMT+10 (UTC-10) should give 02:00\n        self.assertEqual(result_minus.hour, 22)\n        self.assertEqual(result_plus.hour, 2)\n\n\nclass PostgreSQLTimezoneOperationsTests(TestCase):\n    \"\"\"Test the PostgreSQL-specific timezone operations directly.\"\"\"\n    \n    def setUp(self):\n        from django.db.backends.postgresql.operations import DatabaseOperations\n        self.ops = DatabaseOperations(connection)\n    \n    def test_prepare_tzname_delta_simple_offsets(self):\n        \"\"\"Test _prepare_tzname_delta with simple offset strings.\"\"\"\n        # Test positive offset\n        result = self.ops._prepare_tzname_delta('+10')\n        self.assertEqual(result, '-10')\n        \n        # Test negative offset\n        result = self.ops._prepare_tzname_delta('-05')\n        self.assertEqual(result, '+05')\n    \n    def test_prepare_tzname_delta_etc_gmt_timezones(self):\n        \"\"\"Test _prepare_tzname_delta with Etc/GMT timezone names.\"\"\"\n        # Test Etc/GMT-10 (should become Etc/GMT+10 for PostgreSQL)\n        result = self.ops._prepare_tzname_delta('Etc/GMT-10')\n        # This test will fail before the fix is applied\n        # The current implementation incorrectly converts this\n        expected = 'Etc/GMT+10'  # This is what PostgreSQL needs\n        \n        # Before fix: this will likely be 'Etc/GMT+10' (wrong direction)\n        # After fix: this should be 'Etc/GMT+10' (correct for PostgreSQL)\n        if result == 'Etc/GMT+10':\n            # This indicates the bug - the sign was flipped incorrectly\n            pass  # We expect this to fail before the fix\n        \n        # Test Etc/GMT+10 (should become Etc/GMT-10 for PostgreSQL)\n        result = self.ops._prepare_tzname_delta('Etc/GMT+10')\n        expected = 'Etc/GMT-10'  # This is what PostgreSQL needs\n        \n        if result == 'Etc/GMT-10':\n            # This indicates the bug - the sign was flipped incorrectly\n            pass  # We expect this to fail before the fix\n    \n    def test_prepare_tzname_delta_other_timezones(self):\n        \"\"\"Test _prepare_tzname_delta with other timezone names.\"\"\"\n        # Test timezone names that don't match the patterns\n        result = self.ops._prepare_tzname_delta('America/New_York')\n        self.assertEqual(result, 'America/New_York')  # Should be unchanged\n        \n        result = self.ops._prepare_tzname_delta('Europe/London')\n        self.assertEqual(result, 'Europe/London')  # Should be unchanged\n    \n    def test_convert_field_to_tz_integration(self):\n        \"\"\"Test the integration of _convert_field_to_tz with _prepare_tzname_delta.\"\"\"\n        # Test with Etc/GMT timezone\n        field_name = 'test_field'\n        tzname = 'Etc/GMT-10'\n        \n        result = self.ops._convert_field_to_tz(field_name, tzname)\n        \n        # Should contain AT TIME ZONE with the processed timezone name\n        self.assertIn(\"AT TIME ZONE\", result)\n        self.assertIn(\"test_field\", result)\n        \n        # The timezone should be processed by _prepare_tzname_delta\n        # This test helps verify the integration works correctly\n        self.assertTrue(\"'\" in result)  # Should have quoted timezone name\n</patched>\n```",
  "patch": "--- a/tests/db_functions/datetime/test_timezone_conversion.py\n+++ b/tests/db_functions/datetime/test_timezone_conversion.py\n-# Empty if creating new file\n+import pytest\n+from datetime import datetime\n+from django.db import models\n+from django.db.models.functions import Trunc, Extract\n+from django.test import TestCase, override_settings\n+from django.utils import timezone\n+from django.db import connection\n+from django.test.utils import isolate_apps\n+\n+try:\n+    import pytz\n+    HAS_PYTZ = True\n+except ImportError:\n+    HAS_PYTZ = False\n+\n+try:\n+    import zoneinfo\n+    HAS_ZONEINFO = True\n+except ImportError:\n+    HAS_ZONEINFO = False\n+\n+\n+@isolate_apps('db_functions')\n+class TimezoneConversionTestModel(models.Model):\n+    \"\"\"Test model for timezone conversion tests.\"\"\"\n+    start_at = models.DateTimeField()\n+    \n+    class Meta:\n+        app_label = 'db_functions'\n+\n+\n+@override_settings(USE_TZ=True)\n+class TimezoneConversionTests(TestCase):\n+    \"\"\"Test timezone conversion in Trunc() and Extract() database functions.\"\"\"\n+    \n+    @classmethod\n+    def setUpClass(cls):\n+        super().setUpClass()\n+        # Create the test table\n+        with connection.schema_editor() as schema_editor:\n+            schema_editor.create_model(TimezoneConversionTestModel)\n+    \n+    @classmethod\n+    def tearDownClass(cls):\n+        # Drop the test table\n+        with connection.schema_editor() as schema_editor:\n+            schema_editor.delete_model(TimezoneConversionTestModel)\n+        super().tearDownClass()\n+    \n+    def setUp(self):\n+        # Create test data\n+        self.test_datetime = datetime(2023, 1, 1, 12, 0, 0, tzinfo=timezone.utc)\n+        TimezoneConversionTestModel.objects.create(start_at=self.test_datetime)\n+    \n+    def tearDown(self):\n+        TimezoneConversionTestModel.objects.all().delete()\n+    \n+    @pytest.mark.skipif(not HAS_PYTZ, reason=\"pytz not available\")\n+    def test_trunc_with_etc_gmt_minus_timezone_pytz(self):\n+        \"\"\"Test that Trunc with Etc/GMT-10 timezone produces correct SQL query.\"\"\"\n+        # Etc/GMT-10 represents UTC+10 (10 hours east of UTC)\n+        tz = pytz.timezone(\"Etc/GMT-10\")\n+        \n+        # Create a Trunc query\n+        queryset = TimezoneConversionTestModel.objects.annotate(\n+            date=Trunc('start_at', 'day', tzinfo=tz)\n+        )\n+        \n+        # Get the SQL query\n+        sql, params = queryset.query.sql_with_params()\n+        \n+        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n+        # For Etc/GMT-10 (which is UTC+10), PostgreSQL should use '+10' or 'Etc/GMT+10'\n+        # depending on the implementation, but NOT 'Etc/GMT-10' which would be wrong\n+        self.assertIn(\"AT TIME ZONE\", sql)\n+        \n+        # This test should fail before the fix is applied\n+        # The bug causes 'Etc/GMT-10' to become 'Etc/GMT+10' incorrectly\n+        if 'Etc/GMT+10' in sql:\n+            self.fail(\"Bug reproduced: Etc/GMT-10 incorrectly converted to Etc/GMT+10\")\n+    \n+    @pytest.mark.skipif(not HAS_PYTZ, reason=\"pytz not available\")\n+    def test_extract_with_etc_gmt_minus_timezone_pytz(self):\n+        \"\"\"Test that Extract with Etc/GMT-10 timezone produces correct SQL query.\"\"\"\n+        # Etc/GMT-10 represents UTC+10 (10 hours east of UTC)\n+        tz = pytz.timezone(\"Etc/GMT-10\")\n+        \n+        # Create an Extract query\n+        queryset = TimezoneConversionTestModel.objects.annotate(\n+            hour=Extract('start_at', 'hour', tzinfo=tz)\n+        )\n+        \n+        # Get the SQL query\n+        sql, params = queryset.query.sql_with_params()\n+        \n+        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n+        self.assertIn(\"AT TIME ZONE\", sql)\n+        \n+        # This test should fail before the fix is applied\n+        if 'Etc/GMT+10' in sql:\n+            self.fail(\"Bug reproduced: Etc/GMT-10 incorrectly converted to Etc/GMT+10\")\n+    \n+    @pytest.mark.skipif(not HAS_PYTZ, reason=\"pytz not available\")\n+    def test_trunc_with_etc_gmt_plus_timezone_pytz(self):\n+        \"\"\"Test that Trunc with Etc/GMT+10 timezone produces correct SQL query.\"\"\"\n+        # Etc/GMT+10 represents UTC-10 (10 hours west of UTC)\n+        tz = pytz.timezone(\"Etc/GMT+10\")\n+        \n+        # Create a Trunc query\n+        queryset = TimezoneConversionTestModel.objects.annotate(\n+            date=Trunc('start_at', 'day', tzinfo=tz)\n+        )\n+        \n+        # Get the SQL query\n+        sql, params = queryset.query.sql_with_params()\n+        \n+        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n+        self.assertIn(\"AT TIME ZONE\", sql)\n+        \n+        # This test should fail before the fix is applied\n+        if 'Etc/GMT-10' in sql:\n+            self.fail(\"Bug reproduced: Etc/GMT+10 incorrectly converted to Etc/GMT-10\")\n+    \n+    @pytest.mark.skipif(not HAS_ZONEINFO, reason=\"zoneinfo not available\")\n+    def test_trunc_with_etc_gmt_minus_timezone_zoneinfo(self):\n+        \"\"\"Test that Trunc with Etc/GMT-10 timezone using zoneinfo produces correct SQL query.\"\"\"\n+        # Etc/GMT-10 represents UTC+10 (10 hours east of UTC)\n+        tz = zoneinfo.ZoneInfo(\"Etc/GMT-10\")\n+        \n+        # Create a Trunc query\n+        queryset = TimezoneConversionTestModel.objects.annotate(\n+            date=Trunc('start_at', 'day', tzinfo=tz)\n+        )\n+        \n+        # Get the SQL query\n+        sql, params = queryset.query.sql_with_params()\n+        \n+        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n+        self.assertIn(\"AT TIME ZONE\", sql)\n+        \n+        # This test should fail before the fix is applied\n+        if 'Etc/GMT+10' in sql:\n+            self.fail(\"Bug reproduced: Etc/GMT-10 incorrectly converted to Etc/GMT+10\")\n+    \n+    @pytest.mark.skipif(not HAS_ZONEINFO, reason=\"zoneinfo not available\")\n+    def test_extract_with_etc_gmt_minus_timezone_zoneinfo(self):\n+        \"\"\"Test that Extract with Etc/GMT-10 timezone using zoneinfo produces correct SQL query.\"\"\"\n+        # Etc/GMT-10 represents UTC+10 (10 hours east of UTC)\n+        tz = zoneinfo.ZoneInfo(\"Etc/GMT-10\")\n+        \n+        # Create an Extract query\n+        queryset = TimezoneConversionTestModel.objects.annotate(\n+            hour=Extract('start_at', 'hour', tzinfo=tz)\n+        )\n+        \n+        # Get the SQL query\n+        sql, params = queryset.query.sql_with_params()\n+        \n+        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n+        self.assertIn(\"AT TIME ZONE\", sql)\n+        \n+        # This test should fail before the fix is applied\n+        if 'Etc/GMT+10' in sql:\n+            self.fail(\"Bug reproduced: Etc/GMT-10 incorrectly converted to Etc/GMT+10\")\n+    \n+    def test_trunc_with_simple_offset_timezone(self):\n+        \"\"\"Test that Trunc with simple offset timezone still works correctly.\"\"\"\n+        from django.utils.timezone import get_fixed_timezone\n+        \n+        # Create a simple offset timezone (+10 hours)\n+        tz = get_fixed_timezone(600)  # 600 minutes = 10 hours\n+        \n+        # Create a Trunc query\n+        queryset = TimezoneConversionTestModel.objects.annotate(\n+            date=Trunc('start_at', 'day', tzinfo=tz)\n+        )\n+        \n+        # Get the SQL query\n+        sql, params = queryset.query.sql_with_params()\n+        \n+        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n+        self.assertIn(\"AT TIME ZONE\", sql)\n+        \n+        # For simple offsets, the existing behavior should be preserved\n+        # This ensures backward compatibility\n+        self.assertTrue('+' in sql or '-' in sql)\n+    \n+    def test_extract_with_simple_offset_timezone(self):\n+        \"\"\"Test that Extract with simple offset timezone still works correctly.\"\"\"\n+        from django.utils.timezone import get_fixed_timezone\n+        \n+        # Create a simple offset timezone (-5 hours)\n+        tz = get_fixed_timezone(-300)  # -300 minutes = -5 hours\n+        \n+        # Create an Extract query\n+        queryset = TimezoneConversionTestModel.objects.annotate(\n+            hour=Extract('start_at', 'hour', tzinfo=tz)\n+        )\n+        \n+        # Get the SQL query\n+        sql, params = queryset.query.sql_with_params()\n+        \n+        # The SQL should contain 'AT TIME ZONE' with the correct timezone\n+        self.assertIn(\"AT TIME ZONE\", sql)\n+        \n+        # For simple offsets, the existing behavior should be preserved\n+        self.assertTrue('+' in sql or '-' in sql)\n+    \n+    def test_timezone_conversion_actual_results(self):\n+        \"\"\"Test that timezone conversion produces correct actual results.\"\"\"\n+        from django.utils.timezone import get_fixed_timezone\n+        \n+        # Test with a known timezone offset\n+        tz_plus_5 = get_fixed_timezone(300)  # +5 hours\n+        \n+        # Query with timezone conversion\n+        result = TimezoneConversionTestModel.objects.annotate(\n+            hour=Extract('start_at', 'hour', tzinfo=tz_plus_5)\n+        ).first()\n+        \n+        # The original datetime is 12:00 UTC, so with +5 timezone it should be 17:00\n+        expected_hour = 17\n+        self.assertEqual(result.hour, expected_hour)\n+    \n+    @pytest.mark.skipif(not HAS_PYTZ, reason=\"pytz not available\")\n+    def test_etc_gmt_timezone_direction_pytz(self):\n+        \"\"\"Test that Etc/GMT timezone direction is handled correctly with pytz.\"\"\"\n+        # Etc/GMT-10 should represent UTC+10 (10 hours ahead of UTC)\n+        tz_minus = pytz.timezone(\"Etc/GMT-10\")\n+        \n+        # Etc/GMT+10 should represent UTC-10 (10 hours behind UTC)\n+        tz_plus = pytz.timezone(\"Etc/GMT+10\")\n+        \n+        # Test with Etc/GMT-10 (should be UTC+10)\n+        result_minus = TimezoneConversionTestModel.objects.annotate(\n+            hour=Extract('start_at', 'hour', tzinfo=tz_minus)\n+        ).first()\n+        \n+        # Test with Etc/GMT+10 (should be UTC-10)\n+        result_plus = TimezoneConversionTestModel.objects.annotate(\n+            hour=Extract('start_at', 'hour', tzinfo=tz_plus)\n+        ).first()\n+        \n+        # Original time is 12:00 UTC\n+        # Etc/GMT-10 (UTC+10) should give 22:00\n+        # Etc/GMT+10 (UTC-10) should give 02:00\n+        self.assertEqual(result_minus.hour, 22)\n+        self.assertEqual(result_plus.hour, 2)\n+\n+\n+class PostgreSQLTimezoneOperationsTests(TestCase):\n+    \"\"\"Test the PostgreSQL-specific timezone operations directly.\"\"\"\n+    \n+    def setUp(self):\n+        from django.db.backends.postgresql.operations import DatabaseOperations\n+        self.ops = DatabaseOperations(connection)\n+    \n+    def test_prepare_tzname_delta_simple_offsets(self):\n+        \"\"\"Test _prepare_tzname_delta with simple offset strings.\"\"\"\n+        # Test positive offset\n+        result = self.ops._prepare_tzname_delta('+10')\n+        self.assertEqual(result, '-10')\n+        \n+        # Test negative offset\n+        result = self.ops._prepare_tzname_delta('-05')\n+        self.assertEqual(result, '+05')\n+    \n+    def test_prepare_tzname_delta_etc_gmt_timezones(self):\n+        \"\"\"Test _prepare_tzname_delta with Etc/GMT timezone names.\"\"\"\n+        # Test Etc/GMT-10 (should become Etc/GMT+10 for PostgreSQL)\n+        result = self.ops._prepare_tzname_delta('Etc/GMT-10')\n+        # This test will fail before the fix is applied\n+        # The current implementation incorrectly converts this\n+        expected = 'Etc/GMT+10'  # This is what PostgreSQL needs\n+        \n+        # Before fix: this will likely be 'Etc/GMT+10' (wrong direction)\n+        # After fix: this should be 'Etc/GMT+10' (correct for PostgreSQL)\n+        if result == 'Etc/GMT+10':\n+            # This indicates the bug - the sign was flipped incorrectly\n+            pass  # We expect this to fail before the fix\n+        \n+        # Test Etc/GMT+10 (should become Etc/GMT-10 for PostgreSQL)\n+        result = self.ops._prepare_tzname_delta('Etc/GMT+10')\n+        expected = 'Etc/GMT-10'  # This is what PostgreSQL needs\n+        \n+        if result == 'Etc/GMT-10':\n+            # This indicates the bug - the sign was flipped incorrectly\n+            pass  # We expect this to fail before the fix\n+    \n+    def test_prepare_tzname_delta_other_timezones(self):\n+        \"\"\"Test _prepare_tzname_delta with other timezone names.\"\"\"\n+        # Test timezone names that don't match the patterns\n+        result = self.ops._prepare_tzname_delta('America/New_York')\n+        self.assertEqual(result, 'America/New_York')  # Should be unchanged\n+        \n+        result = self.ops._prepare_tzname_delta('Europe/London')\n+        self.assertEqual(result, 'Europe/London')  # Should be unchanged\n+    \n+    def test_convert_field_to_tz_integration(self):\n+        \"\"\"Test the integration of _convert_field_to_tz with _prepare_tzname_delta.\"\"\"\n+        # Test with Etc/GMT timezone\n+        field_name = 'test_field'\n+        tzname = 'Etc/GMT-10'\n+        \n+        result = self.ops._convert_field_to_tz(field_name, tzname)\n+        \n+        # Should contain AT TIME ZONE with the processed timezone name\n+        self.assertIn(\"AT TIME ZONE\", result)\n+        self.assertIn(\"test_field\", result)\n+        \n+        # The timezone should be processed by _prepare_tzname_delta\n+        # This test helps verify the integration works correctly\n+        self.assertTrue(\"'\" in result)  # Should have quoted timezone name\n"
}