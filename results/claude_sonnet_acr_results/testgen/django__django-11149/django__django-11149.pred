{
  "instance_id": "django__django-11149",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/admin_inlines/test_permissions.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.contrib.admin import TabularInline\nfrom django.contrib.auth import get_user_model\nfrom django.contrib.auth.models import Permission\nfrom django.contrib.contenttypes.models import ContentType\nfrom django.db import models\nfrom django.test import TestCase, RequestFactory\nfrom django.contrib.admin.sites import AdminSite\n\n\n# Test models for ManyToManyField inline permissions\nclass Photo(models.Model):\n    name = models.CharField(max_length=100)\n    \n    class Meta:\n        app_label = 'admin_inlines'\n\n\nclass Report(models.Model):\n    title = models.CharField(max_length=100)\n    photos = models.ManyToManyField(Photo)\n    \n    class Meta:\n        app_label = 'admin_inlines'\n\n\nclass ReportPhotoInlineModelAdmin(TabularInline):\n    model = Report.photos.through\n    show_change_link = True\n\n\nUser = get_user_model()\n\n\nclass TestManyToManyInlinePermissions(TestCase):\n    \"\"\"Test permissions for auto-created ManyToManyField inlines.\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test data and users.\"\"\"\n        self.factory = RequestFactory()\n        self.admin_site = AdminSite()\n        \n        # Create test models\n        self.photo = Photo.objects.create(name=\"Test Photo\")\n        self.report = Report.objects.create(title=\"Test Report\")\n        \n        # Create users\n        self.view_only_user = User.objects.create_user(\n            username='viewonly', \n            password='test'\n        )\n        self.add_user = User.objects.create_user(\n            username='adduser', \n            password='test'\n        )\n        self.change_user = User.objects.create_user(\n            username='changeuser', \n            password='test'\n        )\n        self.delete_user = User.objects.create_user(\n            username='deleteuser', \n            password='test'\n        )\n        self.full_user = User.objects.create_user(\n            username='fulluser', \n            password='test'\n        )\n        \n        # Get content types and permissions\n        photo_ct = ContentType.objects.get_for_model(Photo)\n        report_ct = ContentType.objects.get_for_model(Report)\n        \n        # Assign permissions\n        view_photo_perm = Permission.objects.get(\n            content_type=photo_ct, \n            codename='view_photo'\n        )\n        add_photo_perm = Permission.objects.get(\n            content_type=photo_ct, \n            codename='add_photo'\n        )\n        change_photo_perm = Permission.objects.get(\n            content_type=photo_ct, \n            codename='change_photo'\n        )\n        delete_photo_perm = Permission.objects.get(\n            content_type=photo_ct, \n            codename='delete_photo'\n        )\n        \n        # View only user - only has view permission\n        self.view_only_user.user_permissions.add(view_photo_perm)\n        \n        # Add user - has view and add permissions\n        self.add_user.user_permissions.add(view_photo_perm, add_photo_perm)\n        \n        # Change user - has view and change permissions\n        self.change_user.user_permissions.add(view_photo_perm, change_photo_perm)\n        \n        # Delete user - has view and delete permissions\n        self.delete_user.user_permissions.add(view_photo_perm, delete_photo_perm)\n        \n        # Full user - has all permissions\n        self.full_user.user_permissions.add(\n            view_photo_perm, \n            add_photo_perm, \n            change_photo_perm, \n            delete_photo_perm\n        )\n        \n        # Create inline admin instance\n        self.inline_admin = ReportPhotoInlineModelAdmin(Report, self.admin_site)\n    \n    def test_view_only_user_cannot_add_inline_items(self):\n        \"\"\"Test that user with only view permission cannot add inline items.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.view_only_user\n        \n        # This should fail before the fix is applied\n        has_add_perm = self.inline_admin.has_add_permission(request, self.report)\n        self.assertFalse(\n            has_add_perm,\n            \"User with only view permission should not be able to add inline items\"\n        )\n    \n    def test_view_only_user_cannot_change_inline_items(self):\n        \"\"\"Test that user with only view permission cannot change inline items.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.view_only_user\n        \n        # This should fail before the fix is applied\n        has_change_perm = self.inline_admin.has_change_permission(request, self.report)\n        self.assertFalse(\n            has_change_perm,\n            \"User with only view permission should not be able to change inline items\"\n        )\n    \n    def test_view_only_user_cannot_delete_inline_items(self):\n        \"\"\"Test that user with only view permission cannot delete inline items.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.view_only_user\n        \n        # This should fail before the fix is applied\n        has_delete_perm = self.inline_admin.has_delete_permission(request, self.report)\n        self.assertFalse(\n            has_delete_perm,\n            \"User with only view permission should not be able to delete inline items\"\n        )\n    \n    def test_add_user_can_add_inline_items(self):\n        \"\"\"Test that user with add permission can add inline items.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.add_user\n        \n        has_add_perm = self.inline_admin.has_add_permission(request, self.report)\n        self.assertTrue(\n            has_add_perm,\n            \"User with add permission should be able to add inline items\"\n        )\n    \n    def test_add_user_cannot_change_inline_items(self):\n        \"\"\"Test that user with only add permission cannot change inline items.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.add_user\n        \n        has_change_perm = self.inline_admin.has_change_permission(request, self.report)\n        self.assertFalse(\n            has_change_perm,\n            \"User with only add permission should not be able to change inline items\"\n        )\n    \n    def test_add_user_cannot_delete_inline_items(self):\n        \"\"\"Test that user with only add permission cannot delete inline items.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.add_user\n        \n        has_delete_perm = self.inline_admin.has_delete_permission(request, self.report)\n        self.assertFalse(\n            has_delete_perm,\n            \"User with only add permission should not be able to delete inline items\"\n        )\n    \n    def test_change_user_can_change_inline_items(self):\n        \"\"\"Test that user with change permission can change inline items.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.change_user\n        \n        has_change_perm = self.inline_admin.has_change_permission(request, self.report)\n        self.assertTrue(\n            has_change_perm,\n            \"User with change permission should be able to change inline items\"\n        )\n    \n    def test_change_user_cannot_add_inline_items(self):\n        \"\"\"Test that user with only change permission cannot add inline items.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.change_user\n        \n        has_add_perm = self.inline_admin.has_add_permission(request, self.report)\n        self.assertFalse(\n            has_add_perm,\n            \"User with only change permission should not be able to add inline items\"\n        )\n    \n    def test_change_user_cannot_delete_inline_items(self):\n        \"\"\"Test that user with only change permission cannot delete inline items.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.change_user\n        \n        has_delete_perm = self.inline_admin.has_delete_permission(request, self.report)\n        self.assertFalse(\n            has_delete_perm,\n            \"User with only change permission should not be able to delete inline items\"\n        )\n    \n    def test_delete_user_can_delete_inline_items(self):\n        \"\"\"Test that user with delete permission can delete inline items.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.delete_user\n        \n        has_delete_perm = self.inline_admin.has_delete_permission(request, self.report)\n        self.assertTrue(\n            has_delete_perm,\n            \"User with delete permission should be able to delete inline items\"\n        )\n    \n    def test_delete_user_cannot_add_inline_items(self):\n        \"\"\"Test that user with only delete permission cannot add inline items.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.delete_user\n        \n        has_add_perm = self.inline_admin.has_add_permission(request, self.report)\n        self.assertFalse(\n            has_add_perm,\n            \"User with only delete permission should not be able to add inline items\"\n        )\n    \n    def test_delete_user_cannot_change_inline_items(self):\n        \"\"\"Test that user with only delete permission cannot change inline items.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.delete_user\n        \n        has_change_perm = self.inline_admin.has_change_permission(request, self.report)\n        self.assertFalse(\n            has_change_perm,\n            \"User with only delete permission should not be able to change inline items\"\n        )\n    \n    def test_full_user_has_all_permissions(self):\n        \"\"\"Test that user with all permissions can perform all operations.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.full_user\n        \n        has_add_perm = self.inline_admin.has_add_permission(request, self.report)\n        has_change_perm = self.inline_admin.has_change_permission(request, self.report)\n        has_delete_perm = self.inline_admin.has_delete_permission(request, self.report)\n        \n        self.assertTrue(has_add_perm, \"User with all permissions should be able to add\")\n        self.assertTrue(has_change_perm, \"User with all permissions should be able to change\")\n        self.assertTrue(has_delete_perm, \"User with all permissions should be able to delete\")\n    \n    def test_view_permission_still_works(self):\n        \"\"\"Test that view permission still works correctly for all users.\"\"\"\n        request = self.factory.get('/')\n        \n        # All users should have view permission since they all have view_photo permission\n        for user in [self.view_only_user, self.add_user, self.change_user, \n                     self.delete_user, self.full_user]:\n            request.user = user\n            has_view_perm = self.inline_admin.has_view_permission(request, self.report)\n            self.assertTrue(\n                has_view_perm,\n                f\"User {user.username} should have view permission\"\n            )\n    \n    def test_auto_created_model_detection(self):\n        \"\"\"Test that the inline correctly detects auto-created models.\"\"\"\n        # The through model should be auto-created\n        self.assertTrue(\n            self.inline_admin.opts.auto_created,\n            \"ManyToManyField through model should be auto-created\"\n        )\n    \n    def test_permissions_without_obj_parameter(self):\n        \"\"\"Test permissions when obj parameter is None.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.view_only_user\n        \n        # Test with obj=None (should still respect permissions)\n        has_add_perm = self.inline_admin.has_add_permission(request, None)\n        has_change_perm = self.inline_admin.has_change_permission(request, None)\n        has_delete_perm = self.inline_admin.has_delete_permission(request, None)\n        \n        self.assertFalse(has_add_perm, \"View-only user should not have add permission\")\n        self.assertFalse(has_change_perm, \"View-only user should not have change permission\")\n        self.assertFalse(has_delete_perm, \"View-only user should not have delete permission\")\n\n\nclass TestNonAutoCreatedInlinePermissions(TestCase):\n    \"\"\"Test that non-auto-created inlines still work correctly.\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test data for non-auto-created inline.\"\"\"\n        self.factory = RequestFactory()\n        self.admin_site = AdminSite()\n        \n        # Create a user\n        self.user = User.objects.create_user(username='testuser', password='test')\n        \n        # Create a non-auto-created inline (using a regular model)\n        class RegularInline(TabularInline):\n            model = Photo\n        \n        self.inline_admin = RegularInline(Report, self.admin_site)\n    \n    def test_non_auto_created_inline_uses_super_methods(self):\n        \"\"\"Test that non-auto-created inlines delegate to parent class methods.\"\"\"\n        request = self.factory.get('/')\n        request.user = self.user\n        \n        # For non-auto-created models, should call super() methods\n        # These will check permissions on the Photo model itself\n        has_add_perm = self.inline_admin.has_add_permission(request, None)\n        has_change_perm = self.inline_admin.has_change_permission(request, None)\n        has_delete_perm = self.inline_admin.has_delete_permission(request, None)\n        \n        # Without specific permissions, these should be False\n        self.assertFalse(has_add_perm)\n        self.assertFalse(has_change_perm)\n        self.assertFalse(has_delete_perm)\n</patched>\n```",
  "patch": "--- a/tests/admin_inlines/test_permissions.py\n+++ b/tests/admin_inlines/test_permissions.py\n-# Empty if creating new file\n+import pytest\n+from django.contrib.admin import TabularInline\n+from django.contrib.auth import get_user_model\n+from django.contrib.auth.models import Permission\n+from django.contrib.contenttypes.models import ContentType\n+from django.db import models\n+from django.test import TestCase, RequestFactory\n+from django.contrib.admin.sites import AdminSite\n+\n+\n+# Test models for ManyToManyField inline permissions\n+class Photo(models.Model):\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'admin_inlines'\n+\n+\n+class Report(models.Model):\n+    title = models.CharField(max_length=100)\n+    photos = models.ManyToManyField(Photo)\n+    \n+    class Meta:\n+        app_label = 'admin_inlines'\n+\n+\n+class ReportPhotoInlineModelAdmin(TabularInline):\n+    model = Report.photos.through\n+    show_change_link = True\n+\n+\n+User = get_user_model()\n+\n+\n+class TestManyToManyInlinePermissions(TestCase):\n+    \"\"\"Test permissions for auto-created ManyToManyField inlines.\"\"\"\n+    \n+    def setUp(self):\n+        \"\"\"Set up test data and users.\"\"\"\n+        self.factory = RequestFactory()\n+        self.admin_site = AdminSite()\n+        \n+        # Create test models\n+        self.photo = Photo.objects.create(name=\"Test Photo\")\n+        self.report = Report.objects.create(title=\"Test Report\")\n+        \n+        # Create users\n+        self.view_only_user = User.objects.create_user(\n+            username='viewonly', \n+            password='test'\n+        )\n+        self.add_user = User.objects.create_user(\n+            username='adduser', \n+            password='test'\n+        )\n+        self.change_user = User.objects.create_user(\n+            username='changeuser', \n+            password='test'\n+        )\n+        self.delete_user = User.objects.create_user(\n+            username='deleteuser', \n+            password='test'\n+        )\n+        self.full_user = User.objects.create_user(\n+            username='fulluser', \n+            password='test'\n+        )\n+        \n+        # Get content types and permissions\n+        photo_ct = ContentType.objects.get_for_model(Photo)\n+        report_ct = ContentType.objects.get_for_model(Report)\n+        \n+        # Assign permissions\n+        view_photo_perm = Permission.objects.get(\n+            content_type=photo_ct, \n+            codename='view_photo'\n+        )\n+        add_photo_perm = Permission.objects.get(\n+            content_type=photo_ct, \n+            codename='add_photo'\n+        )\n+        change_photo_perm = Permission.objects.get(\n+            content_type=photo_ct, \n+            codename='change_photo'\n+        )\n+        delete_photo_perm = Permission.objects.get(\n+            content_type=photo_ct, \n+            codename='delete_photo'\n+        )\n+        \n+        # View only user - only has view permission\n+        self.view_only_user.user_permissions.add(view_photo_perm)\n+        \n+        # Add user - has view and add permissions\n+        self.add_user.user_permissions.add(view_photo_perm, add_photo_perm)\n+        \n+        # Change user - has view and change permissions\n+        self.change_user.user_permissions.add(view_photo_perm, change_photo_perm)\n+        \n+        # Delete user - has view and delete permissions\n+        self.delete_user.user_permissions.add(view_photo_perm, delete_photo_perm)\n+        \n+        # Full user - has all permissions\n+        self.full_user.user_permissions.add(\n+            view_photo_perm, \n+            add_photo_perm, \n+            change_photo_perm, \n+            delete_photo_perm\n+        )\n+        \n+        # Create inline admin instance\n+        self.inline_admin = ReportPhotoInlineModelAdmin(Report, self.admin_site)\n+    \n+    def test_view_only_user_cannot_add_inline_items(self):\n+        \"\"\"Test that user with only view permission cannot add inline items.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.view_only_user\n+        \n+        # This should fail before the fix is applied\n+        has_add_perm = self.inline_admin.has_add_permission(request, self.report)\n+        self.assertFalse(\n+            has_add_perm,\n+            \"User with only view permission should not be able to add inline items\"\n+        )\n+    \n+    def test_view_only_user_cannot_change_inline_items(self):\n+        \"\"\"Test that user with only view permission cannot change inline items.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.view_only_user\n+        \n+        # This should fail before the fix is applied\n+        has_change_perm = self.inline_admin.has_change_permission(request, self.report)\n+        self.assertFalse(\n+            has_change_perm,\n+            \"User with only view permission should not be able to change inline items\"\n+        )\n+    \n+    def test_view_only_user_cannot_delete_inline_items(self):\n+        \"\"\"Test that user with only view permission cannot delete inline items.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.view_only_user\n+        \n+        # This should fail before the fix is applied\n+        has_delete_perm = self.inline_admin.has_delete_permission(request, self.report)\n+        self.assertFalse(\n+            has_delete_perm,\n+            \"User with only view permission should not be able to delete inline items\"\n+        )\n+    \n+    def test_add_user_can_add_inline_items(self):\n+        \"\"\"Test that user with add permission can add inline items.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.add_user\n+        \n+        has_add_perm = self.inline_admin.has_add_permission(request, self.report)\n+        self.assertTrue(\n+            has_add_perm,\n+            \"User with add permission should be able to add inline items\"\n+        )\n+    \n+    def test_add_user_cannot_change_inline_items(self):\n+        \"\"\"Test that user with only add permission cannot change inline items.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.add_user\n+        \n+        has_change_perm = self.inline_admin.has_change_permission(request, self.report)\n+        self.assertFalse(\n+            has_change_perm,\n+            \"User with only add permission should not be able to change inline items\"\n+        )\n+    \n+    def test_add_user_cannot_delete_inline_items(self):\n+        \"\"\"Test that user with only add permission cannot delete inline items.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.add_user\n+        \n+        has_delete_perm = self.inline_admin.has_delete_permission(request, self.report)\n+        self.assertFalse(\n+            has_delete_perm,\n+            \"User with only add permission should not be able to delete inline items\"\n+        )\n+    \n+    def test_change_user_can_change_inline_items(self):\n+        \"\"\"Test that user with change permission can change inline items.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.change_user\n+        \n+        has_change_perm = self.inline_admin.has_change_permission(request, self.report)\n+        self.assertTrue(\n+            has_change_perm,\n+            \"User with change permission should be able to change inline items\"\n+        )\n+    \n+    def test_change_user_cannot_add_inline_items(self):\n+        \"\"\"Test that user with only change permission cannot add inline items.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.change_user\n+        \n+        has_add_perm = self.inline_admin.has_add_permission(request, self.report)\n+        self.assertFalse(\n+            has_add_perm,\n+            \"User with only change permission should not be able to add inline items\"\n+        )\n+    \n+    def test_change_user_cannot_delete_inline_items(self):\n+        \"\"\"Test that user with only change permission cannot delete inline items.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.change_user\n+        \n+        has_delete_perm = self.inline_admin.has_delete_permission(request, self.report)\n+        self.assertFalse(\n+            has_delete_perm,\n+            \"User with only change permission should not be able to delete inline items\"\n+        )\n+    \n+    def test_delete_user_can_delete_inline_items(self):\n+        \"\"\"Test that user with delete permission can delete inline items.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.delete_user\n+        \n+        has_delete_perm = self.inline_admin.has_delete_permission(request, self.report)\n+        self.assertTrue(\n+            has_delete_perm,\n+            \"User with delete permission should be able to delete inline items\"\n+        )\n+    \n+    def test_delete_user_cannot_add_inline_items(self):\n+        \"\"\"Test that user with only delete permission cannot add inline items.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.delete_user\n+        \n+        has_add_perm = self.inline_admin.has_add_permission(request, self.report)\n+        self.assertFalse(\n+            has_add_perm,\n+            \"User with only delete permission should not be able to add inline items\"\n+        )\n+    \n+    def test_delete_user_cannot_change_inline_items(self):\n+        \"\"\"Test that user with only delete permission cannot change inline items.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.delete_user\n+        \n+        has_change_perm = self.inline_admin.has_change_permission(request, self.report)\n+        self.assertFalse(\n+            has_change_perm,\n+            \"User with only delete permission should not be able to change inline items\"\n+        )\n+    \n+    def test_full_user_has_all_permissions(self):\n+        \"\"\"Test that user with all permissions can perform all operations.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.full_user\n+        \n+        has_add_perm = self.inline_admin.has_add_permission(request, self.report)\n+        has_change_perm = self.inline_admin.has_change_permission(request, self.report)\n+        has_delete_perm = self.inline_admin.has_delete_permission(request, self.report)\n+        \n+        self.assertTrue(has_add_perm, \"User with all permissions should be able to add\")\n+        self.assertTrue(has_change_perm, \"User with all permissions should be able to change\")\n+        self.assertTrue(has_delete_perm, \"User with all permissions should be able to delete\")\n+    \n+    def test_view_permission_still_works(self):\n+        \"\"\"Test that view permission still works correctly for all users.\"\"\"\n+        request = self.factory.get('/')\n+        \n+        # All users should have view permission since they all have view_photo permission\n+        for user in [self.view_only_user, self.add_user, self.change_user, \n+                     self.delete_user, self.full_user]:\n+            request.user = user\n+            has_view_perm = self.inline_admin.has_view_permission(request, self.report)\n+            self.assertTrue(\n+                has_view_perm,\n+                f\"User {user.username} should have view permission\"\n+            )\n+    \n+    def test_auto_created_model_detection(self):\n+        \"\"\"Test that the inline correctly detects auto-created models.\"\"\"\n+        # The through model should be auto-created\n+        self.assertTrue(\n+            self.inline_admin.opts.auto_created,\n+            \"ManyToManyField through model should be auto-created\"\n+        )\n+    \n+    def test_permissions_without_obj_parameter(self):\n+        \"\"\"Test permissions when obj parameter is None.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.view_only_user\n+        \n+        # Test with obj=None (should still respect permissions)\n+        has_add_perm = self.inline_admin.has_add_permission(request, None)\n+        has_change_perm = self.inline_admin.has_change_permission(request, None)\n+        has_delete_perm = self.inline_admin.has_delete_permission(request, None)\n+        \n+        self.assertFalse(has_add_perm, \"View-only user should not have add permission\")\n+        self.assertFalse(has_change_perm, \"View-only user should not have change permission\")\n+        self.assertFalse(has_delete_perm, \"View-only user should not have delete permission\")\n+\n+\n+class TestNonAutoCreatedInlinePermissions(TestCase):\n+    \"\"\"Test that non-auto-created inlines still work correctly.\"\"\"\n+    \n+    def setUp(self):\n+        \"\"\"Set up test data for non-auto-created inline.\"\"\"\n+        self.factory = RequestFactory()\n+        self.admin_site = AdminSite()\n+        \n+        # Create a user\n+        self.user = User.objects.create_user(username='testuser', password='test')\n+        \n+        # Create a non-auto-created inline (using a regular model)\n+        class RegularInline(TabularInline):\n+            model = Photo\n+        \n+        self.inline_admin = RegularInline(Report, self.admin_site)\n+    \n+    def test_non_auto_created_inline_uses_super_methods(self):\n+        \"\"\"Test that non-auto-created inlines delegate to parent class methods.\"\"\"\n+        request = self.factory.get('/')\n+        request.user = self.user\n+        \n+        # For non-auto-created models, should call super() methods\n+        # These will check permissions on the Photo model itself\n+        has_add_perm = self.inline_admin.has_add_permission(request, None)\n+        has_change_perm = self.inline_admin.has_change_permission(request, None)\n+        has_delete_perm = self.inline_admin.has_delete_permission(request, None)\n+        \n+        # Without specific permissions, these should be False\n+        self.assertFalse(has_add_perm)\n+        self.assertFalse(has_change_perm)\n+        self.assertFalse(has_delete_perm)\n"
}