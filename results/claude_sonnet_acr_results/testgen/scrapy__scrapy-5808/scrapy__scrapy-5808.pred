{
  "instance_id": "scrapy__scrapy-5808",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/test_commands_genspider.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport os\nimport tempfile\nimport shutil\nfrom pathlib import Path\nfrom unittest.mock import patch, MagicMock\nimport pytest\n\nfrom scrapy.commands.genspider import Command, extract_domain\nfrom scrapy.utils.test import get_crawler\nfrom scrapy.utils.url import add_http_if_no_scheme\n\n\nclass TestGenspiderCommand:\n    \"\"\"Test suite for the genspider command bug fix.\"\"\"\n\n    def setup_method(self):\n        \"\"\"Set up test environment for each test.\"\"\"\n        self.crawler = get_crawler()\n        self.command = Command()\n        self.command.settings = self.crawler.settings\n        self.command.crawler_process = MagicMock()\n        \n        # Create a temporary directory for templates\n        self.temp_dir = tempfile.mkdtemp()\n        self.templates_dir = Path(self.temp_dir) / \"templates\"\n        self.templates_dir.mkdir()\n        \n        # Create a basic template file\n        basic_template = self.templates_dir / \"basic.tmpl\"\n        basic_template.write_text(\"\"\"\nimport scrapy\n\nclass $classname(scrapy.Spider):\n    name = '$name'\n    allowed_domains = ['$domain']\n    start_urls = ['$start_urls']\n\n    def parse(self, response):\n        pass\n\"\"\")\n        \n        # Mock the templates_dir property\n        self.command.templates_dir = self.templates_dir\n\n    def teardown_method(self):\n        \"\"\"Clean up after each test.\"\"\"\n        shutil.rmtree(self.temp_dir)\n\n    def test_extract_domain_with_https_scheme(self):\n        \"\"\"Test that extract_domain works correctly with https URLs.\"\"\"\n        # This test demonstrates the current behavior - it extracts domain correctly\n        # but doesn't preserve the scheme information\n        domain = extract_domain(\"https://example.com\")\n        assert domain == \"example.com\"\n\n    def test_extract_domain_with_http_scheme(self):\n        \"\"\"Test that extract_domain works correctly with http URLs.\"\"\"\n        domain = extract_domain(\"http://example.com\")\n        assert domain == \"example.com\"\n\n    def test_extract_domain_without_scheme(self):\n        \"\"\"Test that extract_domain works correctly without scheme.\"\"\"\n        domain = extract_domain(\"example.com\")\n        assert domain == \"example.com\"\n\n    def test_extract_domain_with_path(self):\n        \"\"\"Test that extract_domain extracts only domain from URL with path.\"\"\"\n        domain = extract_domain(\"https://example.com/path/to/page\")\n        assert domain == \"example.com\"\n\n    def test_add_http_if_no_scheme_preserves_https(self):\n        \"\"\"Test that add_http_if_no_scheme preserves existing https scheme.\"\"\"\n        url = \"https://example.com\"\n        result = add_http_if_no_scheme(url)\n        assert result == \"https://example.com\"\n\n    def test_add_http_if_no_scheme_preserves_http(self):\n        \"\"\"Test that add_http_if_no_scheme preserves existing http scheme.\"\"\"\n        url = \"http://example.com\"\n        result = add_http_if_no_scheme(url)\n        assert result == \"http://example.com\"\n\n    def test_add_http_if_no_scheme_adds_http_when_missing(self):\n        \"\"\"Test that add_http_if_no_scheme adds http when no scheme is present.\"\"\"\n        url = \"example.com\"\n        result = add_http_if_no_scheme(url)\n        assert result == \"http://example.com\"\n\n    def test_add_http_if_no_scheme_handles_other_schemes(self):\n        \"\"\"Test that add_http_if_no_scheme preserves other schemes like ftp.\"\"\"\n        url = \"ftp://example.com\"\n        result = add_http_if_no_scheme(url)\n        assert result == \"ftp://example.com\"\n\n    @patch('scrapy.commands.genspider.render_templatefile')\n    @patch('shutil.copyfile')\n    def test_genspider_run_with_https_url_before_fix(self, mock_copyfile, mock_render):\n        \"\"\"Test that demonstrates the bug: https URLs cause issues before fix.\"\"\"\n        # This test shows the current problematic behavior\n        # The domain extraction works but the URL scheme information is lost\n        \n        # Mock the spider existence check\n        self.command._spider_exists = MagicMock(return_value=False)\n        \n        # Create a temporary spider file path\n        spider_file = Path(self.temp_dir) / \"testspider.py\"\n        \n        with patch('scrapy.commands.genspider.Path') as mock_path:\n            mock_path.return_value = spider_file\n            \n            # Run the command with https URL\n            args = [\"testspider\", \"https://example.com\"]\n            opts = MagicMock()\n            opts.list = False\n            opts.dump = None\n            opts.force = False\n            opts.template = \"basic\"\n            opts.edit = False\n            \n            self.command.run(args, opts)\n            \n            # Verify that render_templatefile was called\n            assert mock_render.called\n            \n            # Get the template variables that were passed\n            call_args = mock_render.call_args\n            tvars = call_args[1]  # keyword arguments\n            \n            # The bug: domain should be 'example.com' but start_urls is not properly handled\n            assert tvars['domain'] == 'example.com'\n            assert tvars['name'] == 'testspider'\n            \n            # This test demonstrates that the current implementation doesn't handle\n            # the URL scheme properly in template variables\n\n    @patch('scrapy.commands.genspider.render_templatefile')\n    @patch('shutil.copyfile')\n    def test_genspider_run_with_http_url_before_fix(self, mock_copyfile, mock_render):\n        \"\"\"Test genspider with http URL - should work correctly.\"\"\"\n        # Mock the spider existence check\n        self.command._spider_exists = MagicMock(return_value=False)\n        \n        # Create a temporary spider file path\n        spider_file = Path(self.temp_dir) / \"testspider.py\"\n        \n        with patch('scrapy.commands.genspider.Path') as mock_path:\n            mock_path.return_value = spider_file\n            \n            # Run the command with http URL\n            args = [\"testspider\", \"http://example.com\"]\n            opts = MagicMock()\n            opts.list = False\n            opts.dump = None\n            opts.force = False\n            opts.template = \"basic\"\n            opts.edit = False\n            \n            self.command.run(args, opts)\n            \n            # Verify that render_templatefile was called\n            assert mock_render.called\n            \n            # Get the template variables that were passed\n            call_args = mock_render.call_args\n            tvars = call_args[1]  # keyword arguments\n            \n            assert tvars['domain'] == 'example.com'\n            assert tvars['name'] == 'testspider'\n\n    @patch('scrapy.commands.genspider.render_templatefile')\n    @patch('shutil.copyfile')\n    def test_genspider_run_without_scheme_before_fix(self, mock_copyfile, mock_render):\n        \"\"\"Test genspider without URL scheme - should work correctly.\"\"\"\n        # Mock the spider existence check\n        self.command._spider_exists = MagicMock(return_value=False)\n        \n        # Create a temporary spider file path\n        spider_file = Path(self.temp_dir) / \"testspider.py\"\n        \n        with patch('scrapy.commands.genspider.Path') as mock_path:\n            mock_path.return_value = spider_file\n            \n            # Run the command without scheme\n            args = [\"testspider\", \"example.com\"]\n            opts = MagicMock()\n            opts.list = False\n            opts.dump = None\n            opts.force = False\n            opts.template = \"basic\"\n            opts.edit = False\n            \n            self.command.run(args, opts)\n            \n            # Verify that render_templatefile was called\n            assert mock_render.called\n            \n            # Get the template variables that were passed\n            call_args = mock_render.call_args\n            tvars = call_args[1]  # keyword arguments\n            \n            assert tvars['domain'] == 'example.com'\n            assert tvars['name'] == 'testspider'\n\n    def test_genspider_run_with_invalid_args(self):\n        \"\"\"Test that genspider raises UsageError with invalid arguments.\"\"\"\n        from scrapy.exceptions import UsageError\n        \n        opts = MagicMock()\n        opts.list = False\n        opts.dump = None\n        \n        # Test with no arguments\n        with pytest.raises(UsageError):\n            self.command.run([], opts)\n        \n        # Test with only one argument\n        with pytest.raises(UsageError):\n            self.command.run([\"testspider\"], opts)\n        \n        # Test with too many arguments\n        with pytest.raises(UsageError):\n            self.command.run([\"testspider\", \"example.com\", \"extra\"], opts)\n\n    def test_genspider_list_templates(self):\n        \"\"\"Test that list templates functionality works.\"\"\"\n        opts = MagicMock()\n        opts.list = True\n        \n        with patch('builtins.print') as mock_print:\n            self.command.run([], opts)\n            \n            # Verify that print was called to list templates\n            assert mock_print.called\n            # Should print \"Available templates:\" and the basic template\n            calls = [str(call) for call in mock_print.call_args_list]\n            assert any(\"Available templates:\" in call for call in calls)\n            assert any(\"basic\" in call for call in calls)\n\n    def test_genspider_dump_template(self):\n        \"\"\"Test that dump template functionality works.\"\"\"\n        opts = MagicMock()\n        opts.list = False\n        opts.dump = \"basic\"\n        \n        with patch('builtins.print') as mock_print:\n            self.command.run([], opts)\n            \n            # Verify that the template content was printed\n            assert mock_print.called\n            printed_content = str(mock_print.call_args[0][0])\n            assert \"$classname\" in printed_content\n            assert \"$name\" in printed_content\n            assert \"$domain\" in printed_content\n\n    def test_genspider_dump_nonexistent_template(self):\n        \"\"\"Test dumping a template that doesn't exist.\"\"\"\n        opts = MagicMock()\n        opts.list = False\n        opts.dump = \"nonexistent\"\n        \n        with patch('builtins.print') as mock_print:\n            self.command.run([], opts)\n            \n            # Should print error message about template not found\n            calls = [str(call) for call in mock_print.call_args_list]\n            assert any(\"Unable to find template\" in call for call in calls)\n\n    @patch('scrapy.commands.genspider.render_templatefile')\n    @patch('shutil.copyfile')\n    def test_genspider_with_complex_urls(self, mock_copyfile, mock_render):\n        \"\"\"Test genspider with complex URLs containing paths, queries, etc.\"\"\"\n        # Mock the spider existence check\n        self.command._spider_exists = MagicMock(return_value=False)\n        \n        # Create a temporary spider file path\n        spider_file = Path(self.temp_dir) / \"testspider.py\"\n        \n        with patch('scrapy.commands.genspider.Path') as mock_path:\n            mock_path.return_value = spider_file\n            \n            # Test with complex URL\n            args = [\"testspider\", \"https://subdomain.example.com/path?query=value#fragment\"]\n            opts = MagicMock()\n            opts.list = False\n            opts.dump = None\n            opts.force = False\n            opts.template = \"basic\"\n            opts.edit = False\n            \n            self.command.run(args, opts)\n            \n            # Verify that render_templatefile was called\n            assert mock_render.called\n            \n            # Get the template variables that were passed\n            call_args = mock_render.call_args\n            tvars = call_args[1]  # keyword arguments\n            \n            # Domain should be extracted correctly\n            assert tvars['domain'] == 'subdomain.example.com'\n            assert tvars['name'] == 'testspider'\n\n    def test_url_scheme_preservation_requirement(self):\n        \"\"\"Test that demonstrates the requirement for URL scheme preservation.\n        \n        This test shows what the fix should accomplish:\n        - URLs with schemes should preserve their schemes\n        - URLs without schemes should get http:// added\n        - The genspider command should use add_http_if_no_scheme utility\n        \"\"\"\n        # Test cases that show the expected behavior after fix\n        test_cases = [\n            (\"https://example.com\", \"https://example.com\"),\n            (\"http://example.com\", \"http://example.com\"),\n            (\"example.com\", \"http://example.com\"),\n            (\"ftp://example.com\", \"ftp://example.com\"),\n            (\"https://subdomain.example.com/path\", \"https://subdomain.example.com/path\"),\n        ]\n        \n        for input_url, expected_output in test_cases:\n            result = add_http_if_no_scheme(input_url)\n            assert result == expected_output, f\"Failed for input: {input_url}\"\n\n    def test_extract_domain_edge_cases(self):\n        \"\"\"Test extract_domain with various edge cases.\"\"\"\n        # Test with port numbers\n        assert extract_domain(\"https://example.com:8080\") == \"example.com:8080\"\n        \n        # Test with IP addresses\n        assert extract_domain(\"http://192.168.1.1\") == \"192.168.1.1\"\n        \n        # Test with localhost\n        assert extract_domain(\"http://localhost:8000\") == \"localhost:8000\"\n        \n        # Test with just domain and port\n        assert extract_domain(\"example.com:8080\") == \"example.com:8080\"\n</patched>\n```",
  "patch": "--- a/tests/test_commands_genspider.py\n+++ b/tests/test_commands_genspider.py\n-# Empty if creating new file\n+import os\n+import tempfile\n+import shutil\n+from pathlib import Path\n+from unittest.mock import patch, MagicMock\n+import pytest\n+\n+from scrapy.commands.genspider import Command, extract_domain\n+from scrapy.utils.test import get_crawler\n+from scrapy.utils.url import add_http_if_no_scheme\n+\n+\n+class TestGenspiderCommand:\n+    \"\"\"Test suite for the genspider command bug fix.\"\"\"\n+\n+    def setup_method(self):\n+        \"\"\"Set up test environment for each test.\"\"\"\n+        self.crawler = get_crawler()\n+        self.command = Command()\n+        self.command.settings = self.crawler.settings\n+        self.command.crawler_process = MagicMock()\n+        \n+        # Create a temporary directory for templates\n+        self.temp_dir = tempfile.mkdtemp()\n+        self.templates_dir = Path(self.temp_dir) / \"templates\"\n+        self.templates_dir.mkdir()\n+        \n+        # Create a basic template file\n+        basic_template = self.templates_dir / \"basic.tmpl\"\n+        basic_template.write_text(\"\"\"\n+import scrapy\n+\n+class $classname(scrapy.Spider):\n+    name = '$name'\n+    allowed_domains = ['$domain']\n+    start_urls = ['$start_urls']\n+\n+    def parse(self, response):\n+        pass\n+\"\"\")\n+        \n+        # Mock the templates_dir property\n+        self.command.templates_dir = self.templates_dir\n+\n+    def teardown_method(self):\n+        \"\"\"Clean up after each test.\"\"\"\n+        shutil.rmtree(self.temp_dir)\n+\n+    def test_extract_domain_with_https_scheme(self):\n+        \"\"\"Test that extract_domain works correctly with https URLs.\"\"\"\n+        # This test demonstrates the current behavior - it extracts domain correctly\n+        # but doesn't preserve the scheme information\n+        domain = extract_domain(\"https://example.com\")\n+        assert domain == \"example.com\"\n+\n+    def test_extract_domain_with_http_scheme(self):\n+        \"\"\"Test that extract_domain works correctly with http URLs.\"\"\"\n+        domain = extract_domain(\"http://example.com\")\n+        assert domain == \"example.com\"\n+\n+    def test_extract_domain_without_scheme(self):\n+        \"\"\"Test that extract_domain works correctly without scheme.\"\"\"\n+        domain = extract_domain(\"example.com\")\n+        assert domain == \"example.com\"\n+\n+    def test_extract_domain_with_path(self):\n+        \"\"\"Test that extract_domain extracts only domain from URL with path.\"\"\"\n+        domain = extract_domain(\"https://example.com/path/to/page\")\n+        assert domain == \"example.com\"\n+\n+    def test_add_http_if_no_scheme_preserves_https(self):\n+        \"\"\"Test that add_http_if_no_scheme preserves existing https scheme.\"\"\"\n+        url = \"https://example.com\"\n+        result = add_http_if_no_scheme(url)\n+        assert result == \"https://example.com\"\n+\n+    def test_add_http_if_no_scheme_preserves_http(self):\n+        \"\"\"Test that add_http_if_no_scheme preserves existing http scheme.\"\"\"\n+        url = \"http://example.com\"\n+        result = add_http_if_no_scheme(url)\n+        assert result == \"http://example.com\"\n+\n+    def test_add_http_if_no_scheme_adds_http_when_missing(self):\n+        \"\"\"Test that add_http_if_no_scheme adds http when no scheme is present.\"\"\"\n+        url = \"example.com\"\n+        result = add_http_if_no_scheme(url)\n+        assert result == \"http://example.com\"\n+\n+    def test_add_http_if_no_scheme_handles_other_schemes(self):\n+        \"\"\"Test that add_http_if_no_scheme preserves other schemes like ftp.\"\"\"\n+        url = \"ftp://example.com\"\n+        result = add_http_if_no_scheme(url)\n+        assert result == \"ftp://example.com\"\n+\n+    @patch('scrapy.commands.genspider.render_templatefile')\n+    @patch('shutil.copyfile')\n+    def test_genspider_run_with_https_url_before_fix(self, mock_copyfile, mock_render):\n+        \"\"\"Test that demonstrates the bug: https URLs cause issues before fix.\"\"\"\n+        # This test shows the current problematic behavior\n+        # The domain extraction works but the URL scheme information is lost\n+        \n+        # Mock the spider existence check\n+        self.command._spider_exists = MagicMock(return_value=False)\n+        \n+        # Create a temporary spider file path\n+        spider_file = Path(self.temp_dir) / \"testspider.py\"\n+        \n+        with patch('scrapy.commands.genspider.Path') as mock_path:\n+            mock_path.return_value = spider_file\n+            \n+            # Run the command with https URL\n+            args = [\"testspider\", \"https://example.com\"]\n+            opts = MagicMock()\n+            opts.list = False\n+            opts.dump = None\n+            opts.force = False\n+            opts.template = \"basic\"\n+            opts.edit = False\n+            \n+            self.command.run(args, opts)\n+            \n+            # Verify that render_templatefile was called\n+            assert mock_render.called\n+            \n+            # Get the template variables that were passed\n+            call_args = mock_render.call_args\n+            tvars = call_args[1]  # keyword arguments\n+            \n+            # The bug: domain should be 'example.com' but start_urls is not properly handled\n+            assert tvars['domain'] == 'example.com'\n+            assert tvars['name'] == 'testspider'\n+            \n+            # This test demonstrates that the current implementation doesn't handle\n+            # the URL scheme properly in template variables\n+\n+    @patch('scrapy.commands.genspider.render_templatefile')\n+    @patch('shutil.copyfile')\n+    def test_genspider_run_with_http_url_before_fix(self, mock_copyfile, mock_render):\n+        \"\"\"Test genspider with http URL - should work correctly.\"\"\"\n+        # Mock the spider existence check\n+        self.command._spider_exists = MagicMock(return_value=False)\n+        \n+        # Create a temporary spider file path\n+        spider_file = Path(self.temp_dir) / \"testspider.py\"\n+        \n+        with patch('scrapy.commands.genspider.Path') as mock_path:\n+            mock_path.return_value = spider_file\n+            \n+            # Run the command with http URL\n+            args = [\"testspider\", \"http://example.com\"]\n+            opts = MagicMock()\n+            opts.list = False\n+            opts.dump = None\n+            opts.force = False\n+            opts.template = \"basic\"\n+            opts.edit = False\n+            \n+            self.command.run(args, opts)\n+            \n+            # Verify that render_templatefile was called\n+            assert mock_render.called\n+            \n+            # Get the template variables that were passed\n+            call_args = mock_render.call_args\n+            tvars = call_args[1]  # keyword arguments\n+            \n+            assert tvars['domain'] == 'example.com'\n+            assert tvars['name'] == 'testspider'\n+\n+    @patch('scrapy.commands.genspider.render_templatefile')\n+    @patch('shutil.copyfile')\n+    def test_genspider_run_without_scheme_before_fix(self, mock_copyfile, mock_render):\n+        \"\"\"Test genspider without URL scheme - should work correctly.\"\"\"\n+        # Mock the spider existence check\n+        self.command._spider_exists = MagicMock(return_value=False)\n+        \n+        # Create a temporary spider file path\n+        spider_file = Path(self.temp_dir) / \"testspider.py\"\n+        \n+        with patch('scrapy.commands.genspider.Path') as mock_path:\n+            mock_path.return_value = spider_file\n+            \n+            # Run the command without scheme\n+            args = [\"testspider\", \"example.com\"]\n+            opts = MagicMock()\n+            opts.list = False\n+            opts.dump = None\n+            opts.force = False\n+            opts.template = \"basic\"\n+            opts.edit = False\n+            \n+            self.command.run(args, opts)\n+            \n+            # Verify that render_templatefile was called\n+            assert mock_render.called\n+            \n+            # Get the template variables that were passed\n+            call_args = mock_render.call_args\n+            tvars = call_args[1]  # keyword arguments\n+            \n+            assert tvars['domain'] == 'example.com'\n+            assert tvars['name'] == 'testspider'\n+\n+    def test_genspider_run_with_invalid_args(self):\n+        \"\"\"Test that genspider raises UsageError with invalid arguments.\"\"\"\n+        from scrapy.exceptions import UsageError\n+        \n+        opts = MagicMock()\n+        opts.list = False\n+        opts.dump = None\n+        \n+        # Test with no arguments\n+        with pytest.raises(UsageError):\n+            self.command.run([], opts)\n+        \n+        # Test with only one argument\n+        with pytest.raises(UsageError):\n+            self.command.run([\"testspider\"], opts)\n+        \n+        # Test with too many arguments\n+        with pytest.raises(UsageError):\n+            self.command.run([\"testspider\", \"example.com\", \"extra\"], opts)\n+\n+    def test_genspider_list_templates(self):\n+        \"\"\"Test that list templates functionality works.\"\"\"\n+        opts = MagicMock()\n+        opts.list = True\n+        \n+        with patch('builtins.print') as mock_print:\n+            self.command.run([], opts)\n+            \n+            # Verify that print was called to list templates\n+            assert mock_print.called\n+            # Should print \"Available templates:\" and the basic template\n+            calls = [str(call) for call in mock_print.call_args_list]\n+            assert any(\"Available templates:\" in call for call in calls)\n+            assert any(\"basic\" in call for call in calls)\n+\n+    def test_genspider_dump_template(self):\n+        \"\"\"Test that dump template functionality works.\"\"\"\n+        opts = MagicMock()\n+        opts.list = False\n+        opts.dump = \"basic\"\n+        \n+        with patch('builtins.print') as mock_print:\n+            self.command.run([], opts)\n+            \n+            # Verify that the template content was printed\n+            assert mock_print.called\n+            printed_content = str(mock_print.call_args[0][0])\n+            assert \"$classname\" in printed_content\n+            assert \"$name\" in printed_content\n+            assert \"$domain\" in printed_content\n+\n+    def test_genspider_dump_nonexistent_template(self):\n+        \"\"\"Test dumping a template that doesn't exist.\"\"\"\n+        opts = MagicMock()\n+        opts.list = False\n+        opts.dump = \"nonexistent\"\n+        \n+        with patch('builtins.print') as mock_print:\n+            self.command.run([], opts)\n+            \n+            # Should print error message about template not found\n+            calls = [str(call) for call in mock_print.call_args_list]\n+            assert any(\"Unable to find template\" in call for call in calls)\n+\n+    @patch('scrapy.commands.genspider.render_templatefile')\n+    @patch('shutil.copyfile')\n+    def test_genspider_with_complex_urls(self, mock_copyfile, mock_render):\n+        \"\"\"Test genspider with complex URLs containing paths, queries, etc.\"\"\"\n+        # Mock the spider existence check\n+        self.command._spider_exists = MagicMock(return_value=False)\n+        \n+        # Create a temporary spider file path\n+        spider_file = Path(self.temp_dir) / \"testspider.py\"\n+        \n+        with patch('scrapy.commands.genspider.Path') as mock_path:\n+            mock_path.return_value = spider_file\n+            \n+            # Test with complex URL\n+            args = [\"testspider\", \"https://subdomain.example.com/path?query=value#fragment\"]\n+            opts = MagicMock()\n+            opts.list = False\n+            opts.dump = None\n+            opts.force = False\n+            opts.template = \"basic\"\n+            opts.edit = False\n+            \n+            self.command.run(args, opts)\n+            \n+            # Verify that render_templatefile was called\n+            assert mock_render.called\n+            \n+            # Get the template variables that were passed\n+            call_args = mock_render.call_args\n+            tvars = call_args[1]  # keyword arguments\n+            \n+            # Domain should be extracted correctly\n+            assert tvars['domain'] == 'subdomain.example.com'\n+            assert tvars['name'] == 'testspider'\n+\n+    def test_url_scheme_preservation_requirement(self):\n+        \"\"\"Test that demonstrates the requirement for URL scheme preservation.\n+        \n+        This test shows what the fix should accomplish:\n+        - URLs with schemes should preserve their schemes\n+        - URLs without schemes should get http:// added\n+        - The genspider command should use add_http_if_no_scheme utility\n+        \"\"\"\n+        # Test cases that show the expected behavior after fix\n+        test_cases = [\n+            (\"https://example.com\", \"https://example.com\"),\n+            (\"http://example.com\", \"http://example.com\"),\n+            (\"example.com\", \"http://example.com\"),\n+            (\"ftp://example.com\", \"ftp://example.com\"),\n+            (\"https://subdomain.example.com/path\", \"https://subdomain.example.com/path\"),\n+        ]\n+        \n+        for input_url, expected_output in test_cases:\n+            result = add_http_if_no_scheme(input_url)\n+            assert result == expected_output, f\"Failed for input: {input_url}\"\n+\n+    def test_extract_domain_edge_cases(self):\n+        \"\"\"Test extract_domain with various edge cases.\"\"\"\n+        # Test with port numbers\n+        assert extract_domain(\"https://example.com:8080\") == \"example.com:8080\"\n+        \n+        # Test with IP addresses\n+        assert extract_domain(\"http://192.168.1.1\") == \"192.168.1.1\"\n+        \n+        # Test with localhost\n+        assert extract_domain(\"http://localhost:8000\") == \"localhost:8000\"\n+        \n+        # Test with just domain and port\n+        assert extract_domain(\"example.com:8080\") == \"example.com:8080\"\n"
}