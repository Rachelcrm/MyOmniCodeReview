--- a/tests/admin_docs/test_utils.py
+++ b/tests/admin_docs/test_utils.py
+import pytest
+from django.contrib.admindocs.utils import trim_docstring, parse_rst
+from django.test import TestCase
+
+
+class TrimDocstringTests(TestCase):
+    """Tests for the trim_docstring function."""
+
+    def test_trim_docstring_with_empty_first_line(self):
+        """Test that trim_docstring works correctly with empty first line (current Django style)."""
+        docstring = '''
+        This is a docstring with empty first line.
+        
+        It has multiple lines with proper indentation.
+        '''
+        result = trim_docstring(docstring)
+        expected = "This is a docstring with empty first line.\n\nIt has multiple lines with proper indentation."
+        self.assertEqual(result, expected)
+
+    def test_trim_docstring_with_content_on_first_line_bug_reproduction(self):
+        """Test that reproduces the bug when first line has content."""
+        docstring = '''test tests something.
+        
+        This is additional content.
+        More content here.
+        '''
+        # This should not raise an exception when processed by parse_rst
+        result = trim_docstring(docstring)
+        
+        # The result should be properly formatted for docutils
+        # Before the fix, this would cause issues in parse_rst due to incorrect indentation
+        self.assertIsInstance(result, str)
+        self.assertTrue(result.startswith("test tests something."))
+
+    def test_trim_docstring_with_content_on_first_line_expected_behavior(self):
+        """Test the expected behavior after the fix for first line with content."""
+        docstring = '''test tests something.
+        
+        This is additional content.
+        More content here.
+        '''
+        result = trim_docstring(docstring)
+        expected = "test tests something.\n\nThis is additional content.\nMore content here."
+        self.assertEqual(result, expected)
+
+    def test_trim_docstring_single_line_with_content(self):
+        """Test trim_docstring with single line docstring."""
+        docstring = '''Single line docstring.'''
+        result = trim_docstring(docstring)
+        expected = "Single line docstring."
+        self.assertEqual(result, expected)
+
+    def test_trim_docstring_first_line_only_with_content(self):
+        """Test trim_docstring when only first line has content."""
+        docstring = '''Only first line has content.
+        
+        '''
+        result = trim_docstring(docstring)
+        expected = "Only first line has content."
+        self.assertEqual(result, expected)
+
+    def test_trim_docstring_mixed_indentation_with_first_line_content(self):
+        """Test trim_docstring with mixed indentation and first line content."""
+        docstring = '''First line content.
+            Second line with 4 spaces.
+                Third line with 8 spaces.
+            Fourth line with 4 spaces.
+        '''
+        result = trim_docstring(docstring)
+        # After fix, indentation should be calculated from lines[1:] only
+        expected = "First line content.\nSecond line with 4 spaces.\n    Third line with 8 spaces.\nFourth line with 4 spaces."
+        self.assertEqual(result, expected)
+
+    def test_trim_docstring_tabs_and_spaces_with_first_line_content(self):
+        """Test trim_docstring handles tabs correctly with first line content."""
+        docstring = '''First line content.
+\t\tSecond line with tabs.
+\t\t\tThird line with more tabs.
+        '''
+        result = trim_docstring(docstring)
+        # Tabs should be converted to spaces (8 spaces per tab by default)
+        self.assertIsInstance(result, str)
+        self.assertTrue(result.startswith("First line content."))
+
+    def test_trim_docstring_empty_or_none(self):
+        """Test trim_docstring with empty or None input."""
+        self.assertEqual(trim_docstring(None), '')
+        self.assertEqual(trim_docstring(''), '')
+        self.assertEqual(trim_docstring('   '), '')
+
+    def test_trim_docstring_only_whitespace_lines(self):
+        """Test trim_docstring with only whitespace lines after first line."""
+        docstring = '''First line content.
+        
+            
+        '''
+        result = trim_docstring(docstring)
+        expected = "First line content."
+        self.assertEqual(result, expected)
+
+
+class ParseRstIntegrationTests(TestCase):
+    """Integration tests for parse_rst with trim_docstring output."""
+
+    def test_parse_rst_with_trimmed_docstring_first_line_content(self):
+        """Test that parse_rst works correctly with trim_docstring output when first line has content."""
+        # This test verifies the fix prevents the "Error in default-role directive" issue
+        docstring = '''test tests something.
+        
+        This is additional content with `code` references.
+        '''
+        trimmed = trim_docstring(docstring)
+        
+        # This should not raise an exception after the fix
+        try:
+            result = parse_rst(trimmed, 'model')
+            self.assertIsInstance(result, str)
+            # Should contain the processed content
+            self.assertIn('test tests something', result)
+        except Exception as e:
+            # Before the fix, this would raise an error about default-role directive
+            self.fail(f"parse_rst raised an exception: {e}")
+
+    def test_parse_rst_with_trimmed_docstring_empty_first_line(self):
+        """Test that parse_rst continues to work with empty first line docstrings."""
+        docstring = '''
+        This is a docstring with empty first line.
+        
+        It has `code` references.
+        '''
+        trimmed = trim_docstring(docstring)
+        
+        # This should work both before and after the fix
+        result = parse_rst(trimmed, 'model')
+        self.assertIsInstance(result, str)
+        self.assertIn('This is a docstring with empty first line', result)
+
+    def test_parse_rst_with_complex_rst_content_first_line(self):
+        """Test parse_rst with complex reStructuredText content starting on first line."""
+        docstring = '''Complex function with **bold** text.
+        
+        This function does:
+        
+        * Item 1
+        * Item 2
+        
+        Example::
+        
+            code_example()
+        '''
+        trimmed = trim_docstring(docstring)
+        
+        # Should handle complex RST without errors
+        result = parse_rst(trimmed, 'view')
+        self.assertIsInstance(result, str)
+        self.assertIn('Complex function', result)
+
+
+class EdgeCaseTests(TestCase):
+    """Tests for edge cases in trim_docstring."""
+
+    def test_trim_docstring_all_lines_same_indentation_with_first_line_content(self):
+        """Test when all lines after first have same indentation."""
+        docstring = '''First line.
+    Second line.
+    Third line.
+    Fourth line.'''
+        result = trim_docstring(docstring)
+        expected = "First line.\nSecond line.\nThird line.\nFourth line."
+        self.assertEqual(result, expected)
+
+    def test_trim_docstring_no_content_after_first_line(self):
+        """Test when there's no meaningful content after first line."""
+        docstring = '''Only first line.
+        
+        
+        '''
+        result = trim_docstring(docstring)
+        expected = "Only first line."
+        self.assertEqual(result, expected)
+
+    def test_trim_docstring_first_line_with_trailing_spaces(self):
+        """Test first line with trailing spaces."""
+        docstring = '''First line with trailing spaces.   
+        Second line.
+        Third line.'''
+        result = trim_docstring(docstring)
+        # First line should be lstripped, trailing spaces removed
+        expected = "First line with trailing spaces.\nSecond line.\nThird line."
+        self.assertEqual(result, expected)
+
+    def test_trim_docstring_minimum_indentation_calculation(self):
+        """Test that minimum indentation is calculated correctly from lines[1:] only."""
+        docstring = '''No indentation on first line.
+            Four spaces here.
+                Eight spaces here.
+            Back to four spaces.
+        '''
+        result = trim_docstring(docstring)
+        # Minimum indentation should be 4 (from lines[1:]), not 0 (from first line)
+        expected = "No indentation on first line.\nFour spaces here.\n    Eight spaces here.\nBack to four spaces."
+        self.assertEqual(result, expected)
