{
  "instance_id": "django__django-12155",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/admin_docs/test_utils.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom django.contrib.admindocs.utils import trim_docstring, parse_rst\nfrom django.test import TestCase\n\n\nclass TrimDocstringTests(TestCase):\n    \"\"\"Tests for the trim_docstring function.\"\"\"\n\n    def test_trim_docstring_with_empty_first_line(self):\n        \"\"\"Test that trim_docstring works correctly with empty first line (current Django style).\"\"\"\n        docstring = '''\n        This is a docstring with empty first line.\n        \n        It has multiple lines with proper indentation.\n        '''\n        result = trim_docstring(docstring)\n        expected = \"This is a docstring with empty first line.\\n\\nIt has multiple lines with proper indentation.\"\n        self.assertEqual(result, expected)\n\n    def test_trim_docstring_with_content_on_first_line_bug_reproduction(self):\n        \"\"\"Test that reproduces the bug when first line has content.\"\"\"\n        docstring = '''test tests something.\n        \n        This is additional content.\n        More content here.\n        '''\n        # This should not raise an exception when processed by parse_rst\n        result = trim_docstring(docstring)\n        \n        # The result should be properly formatted for docutils\n        # Before the fix, this would cause issues in parse_rst due to incorrect indentation\n        self.assertIsInstance(result, str)\n        self.assertTrue(result.startswith(\"test tests something.\"))\n\n    def test_trim_docstring_with_content_on_first_line_expected_behavior(self):\n        \"\"\"Test the expected behavior after the fix for first line with content.\"\"\"\n        docstring = '''test tests something.\n        \n        This is additional content.\n        More content here.\n        '''\n        result = trim_docstring(docstring)\n        expected = \"test tests something.\\n\\nThis is additional content.\\nMore content here.\"\n        self.assertEqual(result, expected)\n\n    def test_trim_docstring_single_line_with_content(self):\n        \"\"\"Test trim_docstring with single line docstring.\"\"\"\n        docstring = '''Single line docstring.'''\n        result = trim_docstring(docstring)\n        expected = \"Single line docstring.\"\n        self.assertEqual(result, expected)\n\n    def test_trim_docstring_first_line_only_with_content(self):\n        \"\"\"Test trim_docstring when only first line has content.\"\"\"\n        docstring = '''Only first line has content.\n        \n        '''\n        result = trim_docstring(docstring)\n        expected = \"Only first line has content.\"\n        self.assertEqual(result, expected)\n\n    def test_trim_docstring_mixed_indentation_with_first_line_content(self):\n        \"\"\"Test trim_docstring with mixed indentation and first line content.\"\"\"\n        docstring = '''First line content.\n            Second line with 4 spaces.\n                Third line with 8 spaces.\n            Fourth line with 4 spaces.\n        '''\n        result = trim_docstring(docstring)\n        # After fix, indentation should be calculated from lines[1:] only\n        expected = \"First line content.\\nSecond line with 4 spaces.\\n    Third line with 8 spaces.\\nFourth line with 4 spaces.\"\n        self.assertEqual(result, expected)\n\n    def test_trim_docstring_tabs_and_spaces_with_first_line_content(self):\n        \"\"\"Test trim_docstring handles tabs correctly with first line content.\"\"\"\n        docstring = '''First line content.\n\\t\\tSecond line with tabs.\n\\t\\t\\tThird line with more tabs.\n        '''\n        result = trim_docstring(docstring)\n        # Tabs should be converted to spaces (8 spaces per tab by default)\n        self.assertIsInstance(result, str)\n        self.assertTrue(result.startswith(\"First line content.\"))\n\n    def test_trim_docstring_empty_or_none(self):\n        \"\"\"Test trim_docstring with empty or None input.\"\"\"\n        self.assertEqual(trim_docstring(None), '')\n        self.assertEqual(trim_docstring(''), '')\n        self.assertEqual(trim_docstring('   '), '')\n\n    def test_trim_docstring_only_whitespace_lines(self):\n        \"\"\"Test trim_docstring with only whitespace lines after first line.\"\"\"\n        docstring = '''First line content.\n        \n            \n        '''\n        result = trim_docstring(docstring)\n        expected = \"First line content.\"\n        self.assertEqual(result, expected)\n\n\nclass ParseRstIntegrationTests(TestCase):\n    \"\"\"Integration tests for parse_rst with trim_docstring output.\"\"\"\n\n    def test_parse_rst_with_trimmed_docstring_first_line_content(self):\n        \"\"\"Test that parse_rst works correctly with trim_docstring output when first line has content.\"\"\"\n        # This test verifies the fix prevents the \"Error in default-role directive\" issue\n        docstring = '''test tests something.\n        \n        This is additional content with `code` references.\n        '''\n        trimmed = trim_docstring(docstring)\n        \n        # This should not raise an exception after the fix\n        try:\n            result = parse_rst(trimmed, 'model')\n            self.assertIsInstance(result, str)\n            # Should contain the processed content\n            self.assertIn('test tests something', result)\n        except Exception as e:\n            # Before the fix, this would raise an error about default-role directive\n            self.fail(f\"parse_rst raised an exception: {e}\")\n\n    def test_parse_rst_with_trimmed_docstring_empty_first_line(self):\n        \"\"\"Test that parse_rst continues to work with empty first line docstrings.\"\"\"\n        docstring = '''\n        This is a docstring with empty first line.\n        \n        It has `code` references.\n        '''\n        trimmed = trim_docstring(docstring)\n        \n        # This should work both before and after the fix\n        result = parse_rst(trimmed, 'model')\n        self.assertIsInstance(result, str)\n        self.assertIn('This is a docstring with empty first line', result)\n\n    def test_parse_rst_with_complex_rst_content_first_line(self):\n        \"\"\"Test parse_rst with complex reStructuredText content starting on first line.\"\"\"\n        docstring = '''Complex function with **bold** text.\n        \n        This function does:\n        \n        * Item 1\n        * Item 2\n        \n        Example::\n        \n            code_example()\n        '''\n        trimmed = trim_docstring(docstring)\n        \n        # Should handle complex RST without errors\n        result = parse_rst(trimmed, 'view')\n        self.assertIsInstance(result, str)\n        self.assertIn('Complex function', result)\n\n\nclass EdgeCaseTests(TestCase):\n    \"\"\"Tests for edge cases in trim_docstring.\"\"\"\n\n    def test_trim_docstring_all_lines_same_indentation_with_first_line_content(self):\n        \"\"\"Test when all lines after first have same indentation.\"\"\"\n        docstring = '''First line.\n    Second line.\n    Third line.\n    Fourth line.'''\n        result = trim_docstring(docstring)\n        expected = \"First line.\\nSecond line.\\nThird line.\\nFourth line.\"\n        self.assertEqual(result, expected)\n\n    def test_trim_docstring_no_content_after_first_line(self):\n        \"\"\"Test when there's no meaningful content after first line.\"\"\"\n        docstring = '''Only first line.\n        \n        \n        '''\n        result = trim_docstring(docstring)\n        expected = \"Only first line.\"\n        self.assertEqual(result, expected)\n\n    def test_trim_docstring_first_line_with_trailing_spaces(self):\n        \"\"\"Test first line with trailing spaces.\"\"\"\n        docstring = '''First line with trailing spaces.   \n        Second line.\n        Third line.'''\n        result = trim_docstring(docstring)\n        # First line should be lstripped, trailing spaces removed\n        expected = \"First line with trailing spaces.\\nSecond line.\\nThird line.\"\n        self.assertEqual(result, expected)\n\n    def test_trim_docstring_minimum_indentation_calculation(self):\n        \"\"\"Test that minimum indentation is calculated correctly from lines[1:] only.\"\"\"\n        docstring = '''No indentation on first line.\n            Four spaces here.\n                Eight spaces here.\n            Back to four spaces.\n        '''\n        result = trim_docstring(docstring)\n        # Minimum indentation should be 4 (from lines[1:]), not 0 (from first line)\n        expected = \"No indentation on first line.\\nFour spaces here.\\n    Eight spaces here.\\nBack to four spaces.\"\n        self.assertEqual(result, expected)\n</patched>\n</file>\n```",
  "patch": "--- a/tests/admin_docs/test_utils.py\n+++ b/tests/admin_docs/test_utils.py\n+import pytest\n+from django.contrib.admindocs.utils import trim_docstring, parse_rst\n+from django.test import TestCase\n+\n+\n+class TrimDocstringTests(TestCase):\n+    \"\"\"Tests for the trim_docstring function.\"\"\"\n+\n+    def test_trim_docstring_with_empty_first_line(self):\n+        \"\"\"Test that trim_docstring works correctly with empty first line (current Django style).\"\"\"\n+        docstring = '''\n+        This is a docstring with empty first line.\n+        \n+        It has multiple lines with proper indentation.\n+        '''\n+        result = trim_docstring(docstring)\n+        expected = \"This is a docstring with empty first line.\\n\\nIt has multiple lines with proper indentation.\"\n+        self.assertEqual(result, expected)\n+\n+    def test_trim_docstring_with_content_on_first_line_bug_reproduction(self):\n+        \"\"\"Test that reproduces the bug when first line has content.\"\"\"\n+        docstring = '''test tests something.\n+        \n+        This is additional content.\n+        More content here.\n+        '''\n+        # This should not raise an exception when processed by parse_rst\n+        result = trim_docstring(docstring)\n+        \n+        # The result should be properly formatted for docutils\n+        # Before the fix, this would cause issues in parse_rst due to incorrect indentation\n+        self.assertIsInstance(result, str)\n+        self.assertTrue(result.startswith(\"test tests something.\"))\n+\n+    def test_trim_docstring_with_content_on_first_line_expected_behavior(self):\n+        \"\"\"Test the expected behavior after the fix for first line with content.\"\"\"\n+        docstring = '''test tests something.\n+        \n+        This is additional content.\n+        More content here.\n+        '''\n+        result = trim_docstring(docstring)\n+        expected = \"test tests something.\\n\\nThis is additional content.\\nMore content here.\"\n+        self.assertEqual(result, expected)\n+\n+    def test_trim_docstring_single_line_with_content(self):\n+        \"\"\"Test trim_docstring with single line docstring.\"\"\"\n+        docstring = '''Single line docstring.'''\n+        result = trim_docstring(docstring)\n+        expected = \"Single line docstring.\"\n+        self.assertEqual(result, expected)\n+\n+    def test_trim_docstring_first_line_only_with_content(self):\n+        \"\"\"Test trim_docstring when only first line has content.\"\"\"\n+        docstring = '''Only first line has content.\n+        \n+        '''\n+        result = trim_docstring(docstring)\n+        expected = \"Only first line has content.\"\n+        self.assertEqual(result, expected)\n+\n+    def test_trim_docstring_mixed_indentation_with_first_line_content(self):\n+        \"\"\"Test trim_docstring with mixed indentation and first line content.\"\"\"\n+        docstring = '''First line content.\n+            Second line with 4 spaces.\n+                Third line with 8 spaces.\n+            Fourth line with 4 spaces.\n+        '''\n+        result = trim_docstring(docstring)\n+        # After fix, indentation should be calculated from lines[1:] only\n+        expected = \"First line content.\\nSecond line with 4 spaces.\\n    Third line with 8 spaces.\\nFourth line with 4 spaces.\"\n+        self.assertEqual(result, expected)\n+\n+    def test_trim_docstring_tabs_and_spaces_with_first_line_content(self):\n+        \"\"\"Test trim_docstring handles tabs correctly with first line content.\"\"\"\n+        docstring = '''First line content.\n+\\t\\tSecond line with tabs.\n+\\t\\t\\tThird line with more tabs.\n+        '''\n+        result = trim_docstring(docstring)\n+        # Tabs should be converted to spaces (8 spaces per tab by default)\n+        self.assertIsInstance(result, str)\n+        self.assertTrue(result.startswith(\"First line content.\"))\n+\n+    def test_trim_docstring_empty_or_none(self):\n+        \"\"\"Test trim_docstring with empty or None input.\"\"\"\n+        self.assertEqual(trim_docstring(None), '')\n+        self.assertEqual(trim_docstring(''), '')\n+        self.assertEqual(trim_docstring('   '), '')\n+\n+    def test_trim_docstring_only_whitespace_lines(self):\n+        \"\"\"Test trim_docstring with only whitespace lines after first line.\"\"\"\n+        docstring = '''First line content.\n+        \n+            \n+        '''\n+        result = trim_docstring(docstring)\n+        expected = \"First line content.\"\n+        self.assertEqual(result, expected)\n+\n+\n+class ParseRstIntegrationTests(TestCase):\n+    \"\"\"Integration tests for parse_rst with trim_docstring output.\"\"\"\n+\n+    def test_parse_rst_with_trimmed_docstring_first_line_content(self):\n+        \"\"\"Test that parse_rst works correctly with trim_docstring output when first line has content.\"\"\"\n+        # This test verifies the fix prevents the \"Error in default-role directive\" issue\n+        docstring = '''test tests something.\n+        \n+        This is additional content with `code` references.\n+        '''\n+        trimmed = trim_docstring(docstring)\n+        \n+        # This should not raise an exception after the fix\n+        try:\n+            result = parse_rst(trimmed, 'model')\n+            self.assertIsInstance(result, str)\n+            # Should contain the processed content\n+            self.assertIn('test tests something', result)\n+        except Exception as e:\n+            # Before the fix, this would raise an error about default-role directive\n+            self.fail(f\"parse_rst raised an exception: {e}\")\n+\n+    def test_parse_rst_with_trimmed_docstring_empty_first_line(self):\n+        \"\"\"Test that parse_rst continues to work with empty first line docstrings.\"\"\"\n+        docstring = '''\n+        This is a docstring with empty first line.\n+        \n+        It has `code` references.\n+        '''\n+        trimmed = trim_docstring(docstring)\n+        \n+        # This should work both before and after the fix\n+        result = parse_rst(trimmed, 'model')\n+        self.assertIsInstance(result, str)\n+        self.assertIn('This is a docstring with empty first line', result)\n+\n+    def test_parse_rst_with_complex_rst_content_first_line(self):\n+        \"\"\"Test parse_rst with complex reStructuredText content starting on first line.\"\"\"\n+        docstring = '''Complex function with **bold** text.\n+        \n+        This function does:\n+        \n+        * Item 1\n+        * Item 2\n+        \n+        Example::\n+        \n+            code_example()\n+        '''\n+        trimmed = trim_docstring(docstring)\n+        \n+        # Should handle complex RST without errors\n+        result = parse_rst(trimmed, 'view')\n+        self.assertIsInstance(result, str)\n+        self.assertIn('Complex function', result)\n+\n+\n+class EdgeCaseTests(TestCase):\n+    \"\"\"Tests for edge cases in trim_docstring.\"\"\"\n+\n+    def test_trim_docstring_all_lines_same_indentation_with_first_line_content(self):\n+        \"\"\"Test when all lines after first have same indentation.\"\"\"\n+        docstring = '''First line.\n+    Second line.\n+    Third line.\n+    Fourth line.'''\n+        result = trim_docstring(docstring)\n+        expected = \"First line.\\nSecond line.\\nThird line.\\nFourth line.\"\n+        self.assertEqual(result, expected)\n+\n+    def test_trim_docstring_no_content_after_first_line(self):\n+        \"\"\"Test when there's no meaningful content after first line.\"\"\"\n+        docstring = '''Only first line.\n+        \n+        \n+        '''\n+        result = trim_docstring(docstring)\n+        expected = \"Only first line.\"\n+        self.assertEqual(result, expected)\n+\n+    def test_trim_docstring_first_line_with_trailing_spaces(self):\n+        \"\"\"Test first line with trailing spaces.\"\"\"\n+        docstring = '''First line with trailing spaces.   \n+        Second line.\n+        Third line.'''\n+        result = trim_docstring(docstring)\n+        # First line should be lstripped, trailing spaces removed\n+        expected = \"First line with trailing spaces.\\nSecond line.\\nThird line.\"\n+        self.assertEqual(result, expected)\n+\n+    def test_trim_docstring_minimum_indentation_calculation(self):\n+        \"\"\"Test that minimum indentation is calculated correctly from lines[1:] only.\"\"\"\n+        docstring = '''No indentation on first line.\n+            Four spaces here.\n+                Eight spaces here.\n+            Back to four spaces.\n+        '''\n+        result = trim_docstring(docstring)\n+        # Minimum indentation should be 4 (from lines[1:]), not 0 (from first line)\n+        expected = \"No indentation on first line.\\nFour spaces here.\\n    Eight spaces here.\\nBack to four spaces.\"\n+        self.assertEqual(result, expected)\n"
}