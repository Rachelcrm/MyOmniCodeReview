{
  "instance_id": "astropy__astropy-7166",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>astropy/utils/tests/test_misc.py</file>\n<original>\ndef test_inherit_docstrings_property():\n    \"\"\"\n    Test that the InheritDocstrings metaclass works correctly for properties\n    \"\"\"\n\n    class A(object):\n        @property\n        def wiggle(self):\n            \"Wiggle the thingamajig\"\n            pass\n\n    class B(A, metaclass=InheritDocstrings):\n        @property\n        def wiggle(self):\n            pass\n\n    assert isinstance(B.wiggle, property)\n    assert B.wiggle.__doc__ == \"Wiggle the thingamajig\"\n</original>\n<patched>\ndef test_inherit_docstrings_property():\n    \"\"\"\n    Test that the InheritDocstrings metaclass works correctly for properties\n    \"\"\"\n\n    class A(object):\n        @property\n        def wiggle(self):\n            \"Wiggle the thingamajig\"\n            pass\n\n    class B(A, metaclass=InheritDocstrings):\n        @property\n        def wiggle(self):\n            pass\n\n    assert isinstance(B.wiggle, property)\n    assert B.wiggle.__doc__ == \"Wiggle the thingamajig\"\n\n\ndef test_inherit_docstrings_property_fails_before_fix():\n    \"\"\"\n    Test that demonstrates the bug - properties don't inherit docstrings\n    This test should fail before the fix is applied\n    \"\"\"\n    \n    class A(object):\n        @property\n        def wiggle(self):\n            \"Wiggle the thingamajig\"\n            pass\n\n    class B(A, metaclass=InheritDocstrings):\n        @property\n        def wiggle(self):\n            pass\n\n    # This assertion will fail before the fix because properties\n    # are not handled by the current implementation\n    assert isinstance(B.wiggle, property)\n    # This is the key assertion that fails - property docstring is not inherited\n    assert B.wiggle.__doc__ == \"Wiggle the thingamajig\"\n\n\ndef test_inherit_docstrings_property_with_existing_docstring():\n    \"\"\"\n    Test that properties with existing docstrings are preserved\n    \"\"\"\n    \n    class A(object):\n        @property\n        def wiggle(self):\n            \"Wiggle the thingamajig\"\n            pass\n\n    class B(A, metaclass=InheritDocstrings):\n        @property\n        def wiggle(self):\n            \"Custom wiggle implementation\"\n            pass\n\n    assert isinstance(B.wiggle, property)\n    # Should preserve the existing docstring, not inherit from parent\n    assert B.wiggle.__doc__ == \"Custom wiggle implementation\"\n\n\ndef test_inherit_docstrings_property_setter_getter():\n    \"\"\"\n    Test that property inheritance works with getter/setter properties\n    \"\"\"\n    \n    class A(object):\n        @property\n        def value(self):\n            \"Get the value\"\n            return self._value\n            \n        @value.setter\n        def value(self, val):\n            \"Set the value\"\n            self._value = val\n\n    class B(A, metaclass=InheritDocstrings):\n        @property\n        def value(self):\n            # No docstring - should inherit from parent\n            return self._value * 2\n            \n        @value.setter\n        def value(self, val):\n            # No docstring - should inherit from parent\n            self._value = val\n\n    assert isinstance(B.value, property)\n    assert B.value.__doc__ == \"Get the value\"\n\n\ndef test_inherit_docstrings_mixed_functions_and_properties():\n    \"\"\"\n    Test that both functions and properties work together in inheritance\n    \"\"\"\n    \n    class A(object):\n        def method(self):\n            \"A method that does something\"\n            pass\n            \n        @property\n        def prop(self):\n            \"A property that returns something\"\n            return 42\n\n    class B(A, metaclass=InheritDocstrings):\n        def method(self):\n            # No docstring - should inherit\n            pass\n            \n        @property\n        def prop(self):\n            # No docstring - should inherit\n            return 84\n\n    # Test function inheritance still works\n    assert inspect.isfunction(B.method)\n    assert B.method.__doc__ == \"A method that does something\"\n    \n    # Test property inheritance works\n    assert isinstance(B.prop, property)\n    assert B.prop.__doc__ == \"A property that returns something\"\n\n\ndef test_inherit_docstrings_property_multiple_inheritance():\n    \"\"\"\n    Test property docstring inheritance with multiple inheritance\n    \"\"\"\n    \n    class A(object):\n        @property\n        def wiggle(self):\n            \"Wiggle from A\"\n            pass\n\n    class C(object):\n        @property\n        def wiggle(self):\n            \"Wiggle from C\"\n            pass\n\n    class B(A, C, metaclass=InheritDocstrings):\n        @property\n        def wiggle(self):\n            # Should inherit from first base class (A)\n            pass\n\n    assert isinstance(B.wiggle, property)\n    assert B.wiggle.__doc__ == \"Wiggle from A\"\n\n\ndef test_inherit_docstrings_property_private_members():\n    \"\"\"\n    Test that private properties are not affected by inheritance\n    \"\"\"\n    \n    class A(object):\n        @property\n        def _private_prop(self):\n            \"Private property docstring\"\n            pass\n            \n        @property\n        def __very_private_prop(self):\n            \"Very private property docstring\"\n            pass\n\n    class B(A, metaclass=InheritDocstrings):\n        @property\n        def _private_prop(self):\n            # Should inherit because it starts with single underscore\n            pass\n            \n        @property\n        def __very_private_prop(self):\n            # Should NOT inherit because it starts with double underscore\n            pass\n\n    # Private properties with single underscore should inherit\n    assert isinstance(B._private_prop, property)\n    assert B._private_prop.__doc__ == \"Private property docstring\"\n    \n    # Very private properties with double underscore should not inherit\n    assert isinstance(B.__very_private_prop, property)\n    assert B.__very_private_prop.__doc__ is None\n\n\ndef test_inherit_docstrings_property_edge_cases():\n    \"\"\"\n    Test edge cases for property docstring inheritance\n    \"\"\"\n    \n    class A(object):\n        @property\n        def empty_docstring_prop(self):\n            \"\"\n            pass\n            \n        @property\n        def none_docstring_prop(self):\n            pass\n\n    class B(A, metaclass=InheritDocstrings):\n        @property\n        def empty_docstring_prop(self):\n            # Should inherit empty string\n            pass\n            \n        @property\n        def none_docstring_prop(self):\n            # Should inherit None (no docstring)\n            pass\n\n    assert isinstance(B.empty_docstring_prop, property)\n    # Empty string should be inherited\n    assert B.empty_docstring_prop.__doc__ == \"\"\n    \n    assert isinstance(B.none_docstring_prop, property)\n    # None docstring should remain None (no inheritance happens)\n    assert B.none_docstring_prop.__doc__ is None\n</patched>\n```",
  "patch": "--- a/astropy/utils/tests/test_misc.py\n+++ b/astropy/utils/tests/test_misc.py\n-def test_inherit_docstrings_property():\n-    \"\"\"\n-    Test that the InheritDocstrings metaclass works correctly for properties\n-    \"\"\"\n-\n-    class A(object):\n-        @property\n-        def wiggle(self):\n-            \"Wiggle the thingamajig\"\n-            pass\n-\n-    class B(A, metaclass=InheritDocstrings):\n-        @property\n-        def wiggle(self):\n-            pass\n-\n-    assert isinstance(B.wiggle, property)\n-    assert B.wiggle.__doc__ == \"Wiggle the thingamajig\"\n+def test_inherit_docstrings_property():\n+    \"\"\"\n+    Test that the InheritDocstrings metaclass works correctly for properties\n+    \"\"\"\n+\n+    class A(object):\n+        @property\n+        def wiggle(self):\n+            \"Wiggle the thingamajig\"\n+            pass\n+\n+    class B(A, metaclass=InheritDocstrings):\n+        @property\n+        def wiggle(self):\n+            pass\n+\n+    assert isinstance(B.wiggle, property)\n+    assert B.wiggle.__doc__ == \"Wiggle the thingamajig\"\n+\n+\n+def test_inherit_docstrings_property_fails_before_fix():\n+    \"\"\"\n+    Test that demonstrates the bug - properties don't inherit docstrings\n+    This test should fail before the fix is applied\n+    \"\"\"\n+    \n+    class A(object):\n+        @property\n+        def wiggle(self):\n+            \"Wiggle the thingamajig\"\n+            pass\n+\n+    class B(A, metaclass=InheritDocstrings):\n+        @property\n+        def wiggle(self):\n+            pass\n+\n+    # This assertion will fail before the fix because properties\n+    # are not handled by the current implementation\n+    assert isinstance(B.wiggle, property)\n+    # This is the key assertion that fails - property docstring is not inherited\n+    assert B.wiggle.__doc__ == \"Wiggle the thingamajig\"\n+\n+\n+def test_inherit_docstrings_property_with_existing_docstring():\n+    \"\"\"\n+    Test that properties with existing docstrings are preserved\n+    \"\"\"\n+    \n+    class A(object):\n+        @property\n+        def wiggle(self):\n+            \"Wiggle the thingamajig\"\n+            pass\n+\n+    class B(A, metaclass=InheritDocstrings):\n+        @property\n+        def wiggle(self):\n+            \"Custom wiggle implementation\"\n+            pass\n+\n+    assert isinstance(B.wiggle, property)\n+    # Should preserve the existing docstring, not inherit from parent\n+    assert B.wiggle.__doc__ == \"Custom wiggle implementation\"\n+\n+\n+def test_inherit_docstrings_property_setter_getter():\n+    \"\"\"\n+    Test that property inheritance works with getter/setter properties\n+    \"\"\"\n+    \n+    class A(object):\n+        @property\n+        def value(self):\n+            \"Get the value\"\n+            return self._value\n+            \n+        @value.setter\n+        def value(self, val):\n+            \"Set the value\"\n+            self._value = val\n+\n+    class B(A, metaclass=InheritDocstrings):\n+        @property\n+        def value(self):\n+            # No docstring - should inherit from parent\n+            return self._value * 2\n+            \n+        @value.setter\n+        def value(self, val):\n+            # No docstring - should inherit from parent\n+            self._value = val\n+\n+    assert isinstance(B.value, property)\n+    assert B.value.__doc__ == \"Get the value\"\n+\n+\n+def test_inherit_docstrings_mixed_functions_and_properties():\n+    \"\"\"\n+    Test that both functions and properties work together in inheritance\n+    \"\"\"\n+    \n+    class A(object):\n+        def method(self):\n+            \"A method that does something\"\n+            pass\n+            \n+        @property\n+        def prop(self):\n+            \"A property that returns something\"\n+            return 42\n+\n+    class B(A, metaclass=InheritDocstrings):\n+        def method(self):\n+            # No docstring - should inherit\n+            pass\n+            \n+        @property\n+        def prop(self):\n+            # No docstring - should inherit\n+            return 84\n+\n+    # Test function inheritance still works\n+    assert inspect.isfunction(B.method)\n+    assert B.method.__doc__ == \"A method that does something\"\n+    \n+    # Test property inheritance works\n+    assert isinstance(B.prop, property)\n+    assert B.prop.__doc__ == \"A property that returns something\"\n+\n+\n+def test_inherit_docstrings_property_multiple_inheritance():\n+    \"\"\"\n+    Test property docstring inheritance with multiple inheritance\n+    \"\"\"\n+    \n+    class A(object):\n+        @property\n+        def wiggle(self):\n+            \"Wiggle from A\"\n+            pass\n+\n+    class C(object):\n+        @property\n+        def wiggle(self):\n+            \"Wiggle from C\"\n+            pass\n+\n+    class B(A, C, metaclass=InheritDocstrings):\n+        @property\n+        def wiggle(self):\n+            # Should inherit from first base class (A)\n+            pass\n+\n+    assert isinstance(B.wiggle, property)\n+    assert B.wiggle.__doc__ == \"Wiggle from A\"\n+\n+\n+def test_inherit_docstrings_property_private_members():\n+    \"\"\"\n+    Test that private properties are not affected by inheritance\n+    \"\"\"\n+    \n+    class A(object):\n+        @property\n+        def _private_prop(self):\n+            \"Private property docstring\"\n+            pass\n+            \n+        @property\n+        def __very_private_prop(self):\n+            \"Very private property docstring\"\n+            pass\n+\n+    class B(A, metaclass=InheritDocstrings):\n+        @property\n+        def _private_prop(self):\n+            # Should inherit because it starts with single underscore\n+            pass\n+            \n+        @property\n+        def __very_private_prop(self):\n+            # Should NOT inherit because it starts with double underscore\n+            pass\n+\n+    # Private properties with single underscore should inherit\n+    assert isinstance(B._private_prop, property)\n+    assert B._private_prop.__doc__ == \"Private property docstring\"\n+    \n+    # Very private properties with double underscore should not inherit\n+    assert isinstance(B.__very_private_prop, property)\n+    assert B.__very_private_prop.__doc__ is None\n+\n+\n+def test_inherit_docstrings_property_edge_cases():\n+    \"\"\"\n+    Test edge cases for property docstring inheritance\n+    \"\"\"\n+    \n+    class A(object):\n+        @property\n+        def empty_docstring_prop(self):\n+            \"\"\n+            pass\n+            \n+        @property\n+        def none_docstring_prop(self):\n+            pass\n+\n+    class B(A, metaclass=InheritDocstrings):\n+        @property\n+        def empty_docstring_prop(self):\n+            # Should inherit empty string\n+            pass\n+            \n+        @property\n+        def none_docstring_prop(self):\n+            # Should inherit None (no docstring)\n+            pass\n+\n+    assert isinstance(B.empty_docstring_prop, property)\n+    # Empty string should be inherited\n+    assert B.empty_docstring_prop.__doc__ == \"\"\n+    \n+    assert isinstance(B.none_docstring_prop, property)\n+    # None docstring should remain None (no inheritance happens)\n+    assert B.none_docstring_prop.__doc__ is None\n"
}