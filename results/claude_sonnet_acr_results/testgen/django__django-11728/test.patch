--- a/tests/admin_docs/test_utils.py
+++ b/tests/admin_docs/test_utils.py
-import unittest
-
-from django.contrib.admindocs import utils
-from django.test import SimpleTestCase
-
-
-class TestFieldType(SimpleTestCase):
-
-    def test_field_name(self):
-        self.assertEqual(utils.get_readable_field_data_type('BooleanField'), 'Boolean (Either True or False)')
-
-
-class TestUtils(SimpleTestCase):
-
-    def test_parse_docstring(self):
-        docstring = utils.parse_docstring("This\nis\na\ndocstring")
-        self.assertEqual(docstring['body'], 'This\nis\na\ndocstring')
-        self.assertEqual(docstring['metadata'], {})
-
-    def test_parse_docstring_with_metadata(self):
-        docstring = utils.parse_docstring("This\nis\na\ndocstring\n\n"
-                                          "**Metadata**\n\n"
-                                          ":param foo: bar\n"
-                                          ":returns: foobar\n")
-        self.assertEqual(docstring['body'], 'This\nis\na\ndocstring')
-        self.assertEqual(docstring['metadata'], {'param foo': 'bar', 'returns': 'foobar'})
-
-    def test_title_case(self):
-        self.assertEqual(utils.title_case('hello_world'), 'Hello World')
-        self.assertEqual(utils.title_case('hello world'), 'Hello World')
-        self.assertEqual(utils.title_case('hello-world'), 'Hello World')
-        self.assertEqual(utils.title_case('hello.world'), 'Hello World')
-
-    def test_replace_named_groups(self):
-        """
-        Test that named groups are replaced with their group names.
-        """
-        pattern = r'^(?P<a>\w+)/b/(?P<c>\w+)/$'
-        expected = r'^<a>/b/<c>/$'
-        self.assertEqual(utils.replace_named_groups(pattern), expected)
-
-    def test_replace_unnamed_groups(self):
-        """
-        Test that unnamed groups are replaced with '<var>'.
-        """
-        pattern = r'^(?P<a>\w+)/b/(\w+)/$'
-        expected = r'^(?P<a>\w+)/b/<var>/$'
-        self.assertEqual(utils.replace_unnamed_groups(pattern), expected)
+import unittest
+
+from django.contrib.admindocs import utils
+from django.test import SimpleTestCase
+
+
+class TestFieldType(SimpleTestCase):
+
+    def test_field_name(self):
+        self.assertEqual(utils.get_readable_field_data_type('BooleanField'), 'Boolean (Either True or False)')
+
+
+class TestUtils(SimpleTestCase):
+
+    def test_parse_docstring(self):
+        docstring = utils.parse_docstring("This\nis\na\ndocstring")
+        self.assertEqual(docstring['body'], 'This\nis\na\ndocstring')
+        self.assertEqual(docstring['metadata'], {})
+
+    def test_parse_docstring_with_metadata(self):
+        docstring = utils.parse_docstring("This\nis\na\ndocstring\n\n"
+                                          "**Metadata**\n\n"
+                                          ":param foo: bar\n"
+                                          ":returns: foobar\n")
+        self.assertEqual(docstring['body'], 'This\nis\na\ndocstring')
+        self.assertEqual(docstring['metadata'], {'param foo': 'bar', 'returns': 'foobar'})
+
+    def test_title_case(self):
+        self.assertEqual(utils.title_case('hello_world'), 'Hello World')
+        self.assertEqual(utils.title_case('hello world'), 'Hello World')
+        self.assertEqual(utils.title_case('hello-world'), 'Hello World')
+        self.assertEqual(utils.title_case('hello.world'), 'Hello World')
+
+    def test_replace_named_groups(self):
+        """
+        Test that named groups are replaced with their group names.
+        """
+        pattern = r'^(?P<a>\w+)/b/(?P<c>\w+)/$'
+        expected = r'^<a>/b/<c>/$'
+        self.assertEqual(utils.replace_named_groups(pattern), expected)
+
+    def test_replace_named_groups_trailing_group_bug(self):
+        """
+        Test that trailing named groups are properly replaced.
+        This reproduces the bug where the final named group is not replaced
+        when the pattern doesn't end with a trailing '/'.
+        """
+        # This is the exact case from the bug report
+        pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)'
+        expected = r'entries/<pk>/relationships/<related_field>'
+        result = utils.replace_named_groups(pattern)
+        self.assertEqual(result, expected, 
+                        f"Expected '{expected}' but got '{result}'. "
+                        f"The trailing named group 'related_field' was not replaced.")
+
+    def test_replace_named_groups_trailing_group_with_slash(self):
+        """
+        Test that trailing named groups work when pattern ends with '/'.
+        This is the workaround mentioned in the bug report.
+        """
+        pattern = r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)/'
+        expected = r'entries/<pk>/relationships/<related_field>/'
+        result = utils.replace_named_groups(pattern)
+        self.assertEqual(result, expected)
+
+    def test_replace_named_groups_single_trailing_group(self):
+        """
+        Test a simple case with just one trailing named group.
+        """
+        pattern = r'api/(?P<version>\d+)'
+        expected = r'api/<version>'
+        result = utils.replace_named_groups(pattern)
+        self.assertEqual(result, expected)
+
+    def test_replace_named_groups_multiple_trailing_groups(self):
+        """
+        Test multiple consecutive trailing named groups.
+        """
+        pattern = r'api/(?P<version>\d+)/(?P<format>\w+)'
+        expected = r'api/<version>/<format>'
+        result = utils.replace_named_groups(pattern)
+        self.assertEqual(result, expected)
+
+    def test_replace_named_groups_complex_trailing_pattern(self):
+        """
+        Test trailing named group with complex regex pattern.
+        """
+        pattern = r'users/(?P<user_id>[0-9a-f-]+)/posts/(?P<post_slug>[a-z0-9-]+)'
+        expected = r'users/<user_id>/posts/<post_slug>'
+        result = utils.replace_named_groups(pattern)
+        self.assertEqual(result, expected)
+
+    def test_replace_named_groups_nested_parentheses_trailing(self):
+        """
+        Test trailing named group with nested parentheses.
+        """
+        pattern = r'items/(?P<item_id>(abc|def)\d+)'
+        expected = r'items/<item_id>'
+        result = utils.replace_named_groups(pattern)
+        self.assertEqual(result, expected)
+
+    def test_replace_named_groups_mixed_groups_trailing(self):
+        """
+        Test pattern with both named and unnamed groups, ending with named group.
+        """
+        pattern = r'(?P<category>\w+)/(\d+)/(?P<slug>[a-z-]+)'
+        expected = r'<category>/(\d+)/<slug>'
+        result = utils.replace_named_groups(pattern)
+        self.assertEqual(result, expected)
+
+    def test_replace_named_groups_no_trailing_groups(self):
+        """
+        Test that existing functionality still works for non-trailing groups.
+        """
+        pattern = r'^(?P<a>\w+)/b/(?P<c>\w+)/end$'
+        expected = r'^<a>/b/<c>/end$'
+        result = utils.replace_named_groups(pattern)
+        self.assertEqual(result, expected)
+
+    def test_replace_named_groups_empty_pattern(self):
+        """
+        Test edge case with empty pattern.
+        """
+        pattern = r''
+        expected = r''
+        result = utils.replace_named_groups(pattern)
+        self.assertEqual(result, expected)
+
+    def test_replace_named_groups_no_groups(self):
+        """
+        Test pattern with no named groups.
+        """
+        pattern = r'simple/path/without/groups'
+        expected = r'simple/path/without/groups'
+        result = utils.replace_named_groups(pattern)
+        self.assertEqual(result, expected)
+
+    def test_replace_unnamed_groups(self):
+        """
+        Test that unnamed groups are replaced with '<var>'.
+        """
+        pattern = r'^(?P<a>\w+)/b/(\w+)/$'
+        expected = r'^(?P<a>\w+)/b/<var>/$'
+        self.assertEqual(utils.replace_unnamed_groups(pattern), expected)
+
+    def test_simplify_regex_with_trailing_named_group(self):
+        """
+        Test the complete simplify_regex function with trailing named groups.
+        This tests the integration of replace_named_groups with the full simplification.
+        """
+        from django.contrib.admindocs.views import simplify_regex
+        
+        # Test the exact pattern from the bug report
+        pattern = r'^entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)$'
+        expected = r'/entries/<pk>/relationships/<related_field>'
+        result = simplify_regex(pattern)
+        self.assertEqual(result, expected)
+
+    def test_simplify_regex_complex_trailing_pattern(self):
+        """
+        Test simplify_regex with a more complex trailing pattern.
+        """
+        from django.contrib.admindocs.views import simplify_regex
+        
+        pattern = r'^api/v(?P<version>\d+)/users/(?P<user_id>[0-9a-f-]+)/posts/(?P<post_slug>[a-z0-9-]+)$'
+        expected = r'/api/v<version>/users/<user_id>/posts/<post_slug>'
+        result = simplify_regex(pattern)
+        self.assertEqual(result, expected)
