{
  "instance_id": "sympy__sympy-17139",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>sympy/simplify/tests/test_fu_complex_exponent.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom sympy import *\nfrom sympy.simplify.fu import _TR56, TR6\n\n\ndef test_simplify_cos_complex_exponent_bug():\n    \"\"\"Test that reproduces the original bug with cos(x)**I.\"\"\"\n    x = Symbol('x')\n    \n    # This should raise TypeError before the fix\n    with pytest.raises(TypeError, match=\"Invalid comparison of complex\"):\n        simplify(cos(x)**I)\n\n\ndef test_simplify_cos_complex_exponent_fixed():\n    \"\"\"Test that cos(x)**I works after the fix.\"\"\"\n    x = Symbol('x')\n    \n    # After the fix, this should not raise an error\n    # The expression should be returned unchanged since complex exponents\n    # are not handled by trigonometric simplifications\n    result = simplify(cos(x)**I)\n    expected = cos(x)**I\n    assert result == expected\n\n\ndef test_tr6_complex_exponent():\n    \"\"\"Test TR6 function directly with complex exponent.\"\"\"\n    x = Symbol('x')\n    \n    # TR6 should handle complex exponents gracefully\n    result = TR6(cos(x)**I)\n    expected = cos(x)**I  # Should be unchanged\n    assert result == expected\n\n\ndef test_tr56_complex_exponent():\n    \"\"\"Test _TR56 helper function directly with complex exponent.\"\"\"\n    x = Symbol('x')\n    \n    # _TR56 should handle complex exponents gracefully\n    result = _TR56(cos(x)**I, cos, sin, lambda x: 1 - x, max=4, pow=False)\n    expected = cos(x)**I  # Should be unchanged\n    assert result == expected\n\n\ndef test_tr6_real_negative_exponent():\n    \"\"\"Test that TR6 still works correctly with real negative exponents.\"\"\"\n    x = Symbol('x')\n    \n    # Negative real exponents should be unchanged (existing behavior)\n    result = TR6(cos(x)**(-2))\n    expected = cos(x)**(-2)\n    assert result == expected\n\n\ndef test_tr6_real_positive_exponent():\n    \"\"\"Test that TR6 still works correctly with real positive exponents.\"\"\"\n    x = Symbol('x')\n    \n    # Positive real exponents should be transformed (existing behavior)\n    result = TR6(cos(x)**2)\n    expected = 1 - sin(x)**2\n    assert result == expected\n    \n    result = TR6(cos(x)**4)\n    expected = (1 - sin(x)**2)**2\n    assert result == expected\n\n\ndef test_tr6_large_real_exponent():\n    \"\"\"Test that TR6 respects max parameter with real exponents.\"\"\"\n    x = Symbol('x')\n    \n    # Exponents larger than max should be unchanged\n    result = TR6(cos(x)**6, max=4)\n    expected = cos(x)**6\n    assert result == expected\n    \n    # Exponents within max should be transformed\n    result = TR6(cos(x)**4, max=4)\n    expected = (1 - sin(x)**2)**2\n    assert result == expected\n\n\ndef test_complex_exponents_various_forms():\n    \"\"\"Test various forms of complex exponents.\"\"\"\n    x = Symbol('x')\n    \n    # Pure imaginary exponent\n    result = simplify(cos(x)**I)\n    assert result == cos(x)**I\n    \n    # Complex exponent with real and imaginary parts\n    result = simplify(cos(x)**(1 + I))\n    assert result == cos(x)**(1 + I)\n    \n    # Multiple of I\n    result = simplify(cos(x)**(2*I))\n    assert result == cos(x)**(2*I)\n    \n    # Negative imaginary\n    result = simplify(cos(x)**(-I))\n    assert result == cos(x)**(-I)\n\n\ndef test_sin_complex_exponent():\n    \"\"\"Test that sin with complex exponents also works.\"\"\"\n    x = Symbol('x')\n    \n    # sin should also handle complex exponents gracefully\n    result = simplify(sin(x)**I)\n    assert result == sin(x)**I\n    \n    result = simplify(sin(x)**(1 + I))\n    assert result == sin(x)**(1 + I)\n\n\ndef test_mixed_expressions_with_complex_exponents():\n    \"\"\"Test expressions mixing real and complex exponents.\"\"\"\n    x = Symbol('x')\n    \n    # Expression with both real and complex exponents\n    expr = cos(x)**2 + cos(x)**I\n    result = simplify(expr)\n    \n    # The real exponent part should be simplified, complex part unchanged\n    expected = 1 - sin(x)**2 + cos(x)**I\n    assert result == expected\n\n\ndef test_nested_complex_exponents():\n    \"\"\"Test nested expressions with complex exponents.\"\"\"\n    x = Symbol('x')\n    \n    # Nested expression\n    expr = cos(cos(x)**I)\n    result = simplify(expr)\n    \n    # Should not raise error and return unchanged\n    assert result == cos(cos(x)**I)\n\n\ndef test_symbolic_complex_exponent():\n    \"\"\"Test with symbolic complex exponents.\"\"\"\n    x, y = symbols('x y')\n    \n    # Symbolic complex exponent\n    expr = cos(x)**(y*I)\n    result = simplify(expr)\n    \n    # Should not raise error and return unchanged\n    assert result == cos(x)**(y*I)\n\n\ndef test_edge_case_zero_complex():\n    \"\"\"Test edge case with zero times I.\"\"\"\n    x = Symbol('x')\n    \n    # 0*I should be treated as 0 (real)\n    expr = cos(x)**(0*I)\n    result = simplify(expr)\n    expected = 1  # cos(x)**0 = 1\n    assert result == expected\n</patched>\n```",
  "patch": "--- a/sympy/simplify/tests/test_fu_complex_exponent.py\n+++ b/sympy/simplify/tests/test_fu_complex_exponent.py\n-# Empty if creating new file\n+import pytest\n+from sympy import *\n+from sympy.simplify.fu import _TR56, TR6\n+\n+\n+def test_simplify_cos_complex_exponent_bug():\n+    \"\"\"Test that reproduces the original bug with cos(x)**I.\"\"\"\n+    x = Symbol('x')\n+    \n+    # This should raise TypeError before the fix\n+    with pytest.raises(TypeError, match=\"Invalid comparison of complex\"):\n+        simplify(cos(x)**I)\n+\n+\n+def test_simplify_cos_complex_exponent_fixed():\n+    \"\"\"Test that cos(x)**I works after the fix.\"\"\"\n+    x = Symbol('x')\n+    \n+    # After the fix, this should not raise an error\n+    # The expression should be returned unchanged since complex exponents\n+    # are not handled by trigonometric simplifications\n+    result = simplify(cos(x)**I)\n+    expected = cos(x)**I\n+    assert result == expected\n+\n+\n+def test_tr6_complex_exponent():\n+    \"\"\"Test TR6 function directly with complex exponent.\"\"\"\n+    x = Symbol('x')\n+    \n+    # TR6 should handle complex exponents gracefully\n+    result = TR6(cos(x)**I)\n+    expected = cos(x)**I  # Should be unchanged\n+    assert result == expected\n+\n+\n+def test_tr56_complex_exponent():\n+    \"\"\"Test _TR56 helper function directly with complex exponent.\"\"\"\n+    x = Symbol('x')\n+    \n+    # _TR56 should handle complex exponents gracefully\n+    result = _TR56(cos(x)**I, cos, sin, lambda x: 1 - x, max=4, pow=False)\n+    expected = cos(x)**I  # Should be unchanged\n+    assert result == expected\n+\n+\n+def test_tr6_real_negative_exponent():\n+    \"\"\"Test that TR6 still works correctly with real negative exponents.\"\"\"\n+    x = Symbol('x')\n+    \n+    # Negative real exponents should be unchanged (existing behavior)\n+    result = TR6(cos(x)**(-2))\n+    expected = cos(x)**(-2)\n+    assert result == expected\n+\n+\n+def test_tr6_real_positive_exponent():\n+    \"\"\"Test that TR6 still works correctly with real positive exponents.\"\"\"\n+    x = Symbol('x')\n+    \n+    # Positive real exponents should be transformed (existing behavior)\n+    result = TR6(cos(x)**2)\n+    expected = 1 - sin(x)**2\n+    assert result == expected\n+    \n+    result = TR6(cos(x)**4)\n+    expected = (1 - sin(x)**2)**2\n+    assert result == expected\n+\n+\n+def test_tr6_large_real_exponent():\n+    \"\"\"Test that TR6 respects max parameter with real exponents.\"\"\"\n+    x = Symbol('x')\n+    \n+    # Exponents larger than max should be unchanged\n+    result = TR6(cos(x)**6, max=4)\n+    expected = cos(x)**6\n+    assert result == expected\n+    \n+    # Exponents within max should be transformed\n+    result = TR6(cos(x)**4, max=4)\n+    expected = (1 - sin(x)**2)**2\n+    assert result == expected\n+\n+\n+def test_complex_exponents_various_forms():\n+    \"\"\"Test various forms of complex exponents.\"\"\"\n+    x = Symbol('x')\n+    \n+    # Pure imaginary exponent\n+    result = simplify(cos(x)**I)\n+    assert result == cos(x)**I\n+    \n+    # Complex exponent with real and imaginary parts\n+    result = simplify(cos(x)**(1 + I))\n+    assert result == cos(x)**(1 + I)\n+    \n+    # Multiple of I\n+    result = simplify(cos(x)**(2*I))\n+    assert result == cos(x)**(2*I)\n+    \n+    # Negative imaginary\n+    result = simplify(cos(x)**(-I))\n+    assert result == cos(x)**(-I)\n+\n+\n+def test_sin_complex_exponent():\n+    \"\"\"Test that sin with complex exponents also works.\"\"\"\n+    x = Symbol('x')\n+    \n+    # sin should also handle complex exponents gracefully\n+    result = simplify(sin(x)**I)\n+    assert result == sin(x)**I\n+    \n+    result = simplify(sin(x)**(1 + I))\n+    assert result == sin(x)**(1 + I)\n+\n+\n+def test_mixed_expressions_with_complex_exponents():\n+    \"\"\"Test expressions mixing real and complex exponents.\"\"\"\n+    x = Symbol('x')\n+    \n+    # Expression with both real and complex exponents\n+    expr = cos(x)**2 + cos(x)**I\n+    result = simplify(expr)\n+    \n+    # The real exponent part should be simplified, complex part unchanged\n+    expected = 1 - sin(x)**2 + cos(x)**I\n+    assert result == expected\n+\n+\n+def test_nested_complex_exponents():\n+    \"\"\"Test nested expressions with complex exponents.\"\"\"\n+    x = Symbol('x')\n+    \n+    # Nested expression\n+    expr = cos(cos(x)**I)\n+    result = simplify(expr)\n+    \n+    # Should not raise error and return unchanged\n+    assert result == cos(cos(x)**I)\n+\n+\n+def test_symbolic_complex_exponent():\n+    \"\"\"Test with symbolic complex exponents.\"\"\"\n+    x, y = symbols('x y')\n+    \n+    # Symbolic complex exponent\n+    expr = cos(x)**(y*I)\n+    result = simplify(expr)\n+    \n+    # Should not raise error and return unchanged\n+    assert result == cos(x)**(y*I)\n+\n+\n+def test_edge_case_zero_complex():\n+    \"\"\"Test edge case with zero times I.\"\"\"\n+    x = Symbol('x')\n+    \n+    # 0*I should be treated as 0 (real)\n+    expr = cos(x)**(0*I)\n+    result = simplify(expr)\n+    expected = 1  # cos(x)**0 = 1\n+    assert result == expected\n"
}