{
  "instance_id": "scikit-learn__scikit-learn-14141",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>sklearn/utils/tests/test_show_versions.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nimport sys\nfrom unittest.mock import patch, MagicMock\nfrom sklearn.utils._show_versions import _get_deps_info, show_versions\n\n\ndef test_get_deps_info_includes_joblib():\n    \"\"\"Test that _get_deps_info includes joblib in the dependencies list.\"\"\"\n    deps_info = _get_deps_info()\n    \n    # joblib should be included in the dependencies\n    assert 'joblib' in deps_info\n    \n    # The result should be either a version string or None (if not installed)\n    joblib_version = deps_info['joblib']\n    assert joblib_version is None or isinstance(joblib_version, str)\n\n\ndef test_get_deps_info_joblib_when_installed():\n    \"\"\"Test that _get_deps_info correctly reports joblib version when installed.\"\"\"\n    # Mock joblib module with a version\n    mock_joblib = MagicMock()\n    mock_joblib.__version__ = \"1.0.0\"\n    \n    with patch.dict('sys.modules', {'joblib': mock_joblib}):\n        deps_info = _get_deps_info()\n        assert deps_info['joblib'] == \"1.0.0\"\n\n\ndef test_get_deps_info_joblib_when_not_installed():\n    \"\"\"Test that _get_deps_info handles missing joblib gracefully.\"\"\"\n    # Remove joblib from sys.modules if it exists and mock import failure\n    original_modules = sys.modules.copy()\n    \n    # Remove joblib from sys.modules\n    if 'joblib' in sys.modules:\n        del sys.modules['joblib']\n    \n    # Mock importlib.import_module to raise ImportError for joblib\n    def mock_import_module(name):\n        if name == 'joblib':\n            raise ImportError(\"No module named 'joblib'\")\n        return original_modules.get(name)\n    \n    with patch('importlib.import_module', side_effect=mock_import_module):\n        deps_info = _get_deps_info()\n        assert deps_info['joblib'] is None\n    \n    # Restore original sys.modules\n    sys.modules.clear()\n    sys.modules.update(original_modules)\n\n\ndef test_get_deps_info_preserves_existing_dependencies():\n    \"\"\"Test that adding joblib doesn't break existing dependency checking.\"\"\"\n    deps_info = _get_deps_info()\n    \n    # Check that all expected dependencies are still present\n    expected_deps = [\n        \"pip\", \"setuptools\", \"sklearn\", \"numpy\", \"scipy\", \n        \"Cython\", \"pandas\", \"matplotlib\", \"joblib\"\n    ]\n    \n    for dep in expected_deps:\n        assert dep in deps_info\n        # Each dependency should have either a version string or None\n        assert deps_info[dep] is None or isinstance(deps_info[dep], str)\n\n\ndef test_show_versions_includes_joblib_output(capsys):\n    \"\"\"Test that show_versions() includes joblib in its output.\"\"\"\n    # Call show_versions and capture output\n    show_versions()\n    captured = capsys.readouterr()\n    \n    # Check that joblib appears in the output\n    assert 'joblib' in captured.out\n    \n    # Check that the output has the expected structure\n    assert 'Python deps:' in captured.out\n    assert 'System:' in captured.out\n    assert 'BLAS:' in captured.out\n\n\ndef test_show_versions_joblib_formatting(capsys):\n    \"\"\"Test that joblib version is properly formatted in show_versions output.\"\"\"\n    # Mock joblib with a known version\n    mock_joblib = MagicMock()\n    mock_joblib.__version__ = \"1.2.3\"\n    \n    with patch.dict('sys.modules', {'joblib': mock_joblib}):\n        show_versions()\n        captured = capsys.readouterr()\n        \n        # Check that joblib version is properly formatted\n        assert 'joblib:      1.2.3' in captured.out or 'joblib: 1.2.3' in captured.out\n\n\ndef test_show_versions_joblib_none_formatting(capsys):\n    \"\"\"Test that missing joblib is properly formatted in show_versions output.\"\"\"\n    # Remove joblib and mock import failure\n    original_modules = sys.modules.copy()\n    \n    if 'joblib' in sys.modules:\n        del sys.modules['joblib']\n    \n    def mock_import_module(name):\n        if name == 'joblib':\n            raise ImportError(\"No module named 'joblib'\")\n        return original_modules.get(name)\n    \n    with patch('importlib.import_module', side_effect=mock_import_module):\n        show_versions()\n        captured = capsys.readouterr()\n        \n        # Check that joblib None is properly formatted\n        assert 'joblib:      None' in captured.out or 'joblib: None' in captured.out\n    \n    # Restore original sys.modules\n    sys.modules.clear()\n    sys.modules.update(original_modules)\n\n\ndef test_joblib_position_in_deps_list():\n    \"\"\"Test that joblib is positioned appropriately in the dependencies list.\"\"\"\n    from sklearn.utils._show_versions import _get_deps_info\n    import inspect\n    \n    # Get the source code of _get_deps_info to check deps list order\n    source = inspect.getsource(_get_deps_info)\n    \n    # Extract the deps list from the source (this is a bit hacky but works for testing)\n    deps_info = _get_deps_info()\n    deps_keys = list(deps_info.keys())\n    \n    # joblib should be in the list\n    assert 'joblib' in deps_keys\n    \n    # joblib should come after core dependencies but before optional ones\n    joblib_idx = deps_keys.index('joblib')\n    \n    # Core dependencies that should come before joblib\n    core_deps = ['sklearn', 'numpy', 'scipy']\n    for dep in core_deps:\n        if dep in deps_keys:\n            assert deps_keys.index(dep) < joblib_idx, f\"{dep} should come before joblib\"\n</patched>\n```",
  "patch": "--- a/sklearn/utils/tests/test_show_versions.py\n+++ b/sklearn/utils/tests/test_show_versions.py\n-# Empty if creating new file\n+import pytest\n+import sys\n+from unittest.mock import patch, MagicMock\n+from sklearn.utils._show_versions import _get_deps_info, show_versions\n+\n+\n+def test_get_deps_info_includes_joblib():\n+    \"\"\"Test that _get_deps_info includes joblib in the dependencies list.\"\"\"\n+    deps_info = _get_deps_info()\n+    \n+    # joblib should be included in the dependencies\n+    assert 'joblib' in deps_info\n+    \n+    # The result should be either a version string or None (if not installed)\n+    joblib_version = deps_info['joblib']\n+    assert joblib_version is None or isinstance(joblib_version, str)\n+\n+\n+def test_get_deps_info_joblib_when_installed():\n+    \"\"\"Test that _get_deps_info correctly reports joblib version when installed.\"\"\"\n+    # Mock joblib module with a version\n+    mock_joblib = MagicMock()\n+    mock_joblib.__version__ = \"1.0.0\"\n+    \n+    with patch.dict('sys.modules', {'joblib': mock_joblib}):\n+        deps_info = _get_deps_info()\n+        assert deps_info['joblib'] == \"1.0.0\"\n+\n+\n+def test_get_deps_info_joblib_when_not_installed():\n+    \"\"\"Test that _get_deps_info handles missing joblib gracefully.\"\"\"\n+    # Remove joblib from sys.modules if it exists and mock import failure\n+    original_modules = sys.modules.copy()\n+    \n+    # Remove joblib from sys.modules\n+    if 'joblib' in sys.modules:\n+        del sys.modules['joblib']\n+    \n+    # Mock importlib.import_module to raise ImportError for joblib\n+    def mock_import_module(name):\n+        if name == 'joblib':\n+            raise ImportError(\"No module named 'joblib'\")\n+        return original_modules.get(name)\n+    \n+    with patch('importlib.import_module', side_effect=mock_import_module):\n+        deps_info = _get_deps_info()\n+        assert deps_info['joblib'] is None\n+    \n+    # Restore original sys.modules\n+    sys.modules.clear()\n+    sys.modules.update(original_modules)\n+\n+\n+def test_get_deps_info_preserves_existing_dependencies():\n+    \"\"\"Test that adding joblib doesn't break existing dependency checking.\"\"\"\n+    deps_info = _get_deps_info()\n+    \n+    # Check that all expected dependencies are still present\n+    expected_deps = [\n+        \"pip\", \"setuptools\", \"sklearn\", \"numpy\", \"scipy\", \n+        \"Cython\", \"pandas\", \"matplotlib\", \"joblib\"\n+    ]\n+    \n+    for dep in expected_deps:\n+        assert dep in deps_info\n+        # Each dependency should have either a version string or None\n+        assert deps_info[dep] is None or isinstance(deps_info[dep], str)\n+\n+\n+def test_show_versions_includes_joblib_output(capsys):\n+    \"\"\"Test that show_versions() includes joblib in its output.\"\"\"\n+    # Call show_versions and capture output\n+    show_versions()\n+    captured = capsys.readouterr()\n+    \n+    # Check that joblib appears in the output\n+    assert 'joblib' in captured.out\n+    \n+    # Check that the output has the expected structure\n+    assert 'Python deps:' in captured.out\n+    assert 'System:' in captured.out\n+    assert 'BLAS:' in captured.out\n+\n+\n+def test_show_versions_joblib_formatting(capsys):\n+    \"\"\"Test that joblib version is properly formatted in show_versions output.\"\"\"\n+    # Mock joblib with a known version\n+    mock_joblib = MagicMock()\n+    mock_joblib.__version__ = \"1.2.3\"\n+    \n+    with patch.dict('sys.modules', {'joblib': mock_joblib}):\n+        show_versions()\n+        captured = capsys.readouterr()\n+        \n+        # Check that joblib version is properly formatted\n+        assert 'joblib:      1.2.3' in captured.out or 'joblib: 1.2.3' in captured.out\n+\n+\n+def test_show_versions_joblib_none_formatting(capsys):\n+    \"\"\"Test that missing joblib is properly formatted in show_versions output.\"\"\"\n+    # Remove joblib and mock import failure\n+    original_modules = sys.modules.copy()\n+    \n+    if 'joblib' in sys.modules:\n+        del sys.modules['joblib']\n+    \n+    def mock_import_module(name):\n+        if name == 'joblib':\n+            raise ImportError(\"No module named 'joblib'\")\n+        return original_modules.get(name)\n+    \n+    with patch('importlib.import_module', side_effect=mock_import_module):\n+        show_versions()\n+        captured = capsys.readouterr()\n+        \n+        # Check that joblib None is properly formatted\n+        assert 'joblib:      None' in captured.out or 'joblib: None' in captured.out\n+    \n+    # Restore original sys.modules\n+    sys.modules.clear()\n+    sys.modules.update(original_modules)\n+\n+\n+def test_joblib_position_in_deps_list():\n+    \"\"\"Test that joblib is positioned appropriately in the dependencies list.\"\"\"\n+    from sklearn.utils._show_versions import _get_deps_info\n+    import inspect\n+    \n+    # Get the source code of _get_deps_info to check deps list order\n+    source = inspect.getsource(_get_deps_info)\n+    \n+    # Extract the deps list from the source (this is a bit hacky but works for testing)\n+    deps_info = _get_deps_info()\n+    deps_keys = list(deps_info.keys())\n+    \n+    # joblib should be in the list\n+    assert 'joblib' in deps_keys\n+    \n+    # joblib should come after core dependencies but before optional ones\n+    joblib_idx = deps_keys.index('joblib')\n+    \n+    # Core dependencies that should come before joblib\n+    core_deps = ['sklearn', 'numpy', 'scipy']\n+    for dep in core_deps:\n+        if dep in deps_keys:\n+            assert deps_keys.index(dep) < joblib_idx, f\"{dep} should come before joblib\"\n"
}