{
  "instance_id": "astropy__astropy-13453",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>astropy/io/ascii/tests/test_html_formats.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom io import StringIO\nimport numpy as np\nfrom astropy.table import Table\nfrom astropy.io import ascii\n\n\nclass TestHTMLFormats:\n    \"\"\"Test that HTML table output respects the formats parameter.\"\"\"\n    \n    def test_html_formats_basic(self):\n        \"\"\"Test that formats parameter works for basic HTML output.\"\"\"\n        # Create test table with float values that need formatting\n        t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n        \n        # Write HTML table with \"a\" column formatted to show 2 decimal places\n        with StringIO() as sp:\n            t.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.2e}\"})\n            html_output = sp.getvalue()\n        \n        # Check that the formatted values appear in the HTML output\n        assert \"1.24e-24\" in html_output\n        assert \"3.23e-15\" in html_output\n        # Check that unformatted values don't appear\n        assert \"1.23875234858e-24\" not in html_output\n        assert \"3.2348748432e-15\" not in html_output\n        # Check that column b is unaffected\n        assert \"<td>2</td>\" in html_output\n        assert \"<td>4</td>\" in html_output\n    \n    def test_html_formats_multiple_columns(self):\n        \"\"\"Test formats parameter with multiple columns.\"\"\"\n        t = Table([\n            [1.23456789, 2.34567890],\n            [123.456789, 234.567890],\n            ['foo', 'bar']\n        ], names=('a', 'b', 'c'))\n        \n        # Format both numeric columns differently\n        formats = {\n            'a': lambda x: f\"{x:.2f}\",\n            'b': lambda x: f\"{x:.1f}\"\n        }\n        \n        with StringIO() as sp:\n            t.write(sp, format=\"html\", formats=formats)\n            html_output = sp.getvalue()\n        \n        # Check formatted values\n        assert \"1.23\" in html_output  # column a formatted to 2 decimal places\n        assert \"2.35\" in html_output  # column a formatted to 2 decimal places\n        assert \"123.5\" in html_output  # column b formatted to 1 decimal place\n        assert \"234.6\" in html_output  # column b formatted to 1 decimal place\n        # Check that string column is unaffected\n        assert \"<td>foo</td>\" in html_output\n        assert \"<td>bar</td>\" in html_output\n    \n    def test_html_formats_string_format(self):\n        \"\"\"Test formats parameter with string format specifiers.\"\"\"\n        t = Table([[1.23456789, 2.34567890]], names=['values'])\n        \n        with StringIO() as sp:\n            t.write(sp, format=\"html\", formats={\"values\": \"%.3f\"})\n            html_output = sp.getvalue()\n        \n        # Check that string format is applied\n        assert \"1.235\" in html_output\n        assert \"2.346\" in html_output\n    \n    def test_html_formats_integer_column(self):\n        \"\"\"Test formats parameter with integer formatting.\"\"\"\n        t = Table([[1234, 5678]], names=['numbers'])\n        \n        with StringIO() as sp:\n            t.write(sp, format=\"html\", formats={\"numbers\": lambda x: f\"{x:,}\"})\n            html_output = sp.getvalue()\n        \n        # Check that comma formatting is applied\n        assert \"1,234\" in html_output\n        assert \"5,678\" in html_output\n    \n    def test_html_formats_no_formats_parameter(self):\n        \"\"\"Test that HTML output works normally without formats parameter.\"\"\"\n        t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n        \n        with StringIO() as sp:\n            t.write(sp, format=\"html\")\n            html_output = sp.getvalue()\n        \n        # Check that original values appear (no formatting applied)\n        assert \"1.23875234858e-24\" in html_output\n        assert \"3.2348748432e-15\" in html_output\n        assert \"<td>2</td>\" in html_output\n        assert \"<td>4</td>\" in html_output\n    \n    def test_html_formats_partial_column_formatting(self):\n        \"\"\"Test that only specified columns are formatted.\"\"\"\n        t = Table([\n            [1.23456789, 2.34567890],\n            [9.87654321, 8.76543210]\n        ], names=('a', 'b'))\n        \n        # Only format column 'a'\n        with StringIO() as sp:\n            t.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.1f}\"})\n            html_output = sp.getvalue()\n        \n        # Check that only column 'a' is formatted\n        assert \"1.2\" in html_output  # column a formatted\n        assert \"2.3\" in html_output  # column a formatted\n        # Column b should remain unformatted\n        assert \"9.87654321\" in html_output\n        assert \"8.76543210\" in html_output\n    \n    def test_html_formats_with_masked_values(self):\n        \"\"\"Test formats parameter with masked table values.\"\"\"\n        t = Table([[1.23456789, np.ma.masked], [3.45678901, 4.56789012]], \n                  names=('a', 'b'), masked=True)\n        \n        with StringIO() as sp:\n            t.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.2f}\", \"b\": lambda x: f\"{x:.1f}\"})\n            html_output = sp.getvalue()\n        \n        # Check formatted values\n        assert \"1.23\" in html_output\n        assert \"3.5\" in html_output\n        assert \"4.6\" in html_output\n        # Masked value should appear as empty or masked indicator\n        assert \"--\" in html_output or \"\" in html_output\n    \n    def test_html_formats_comparison_with_other_formats(self):\n        \"\"\"Test that HTML formats work consistently with other ASCII formats.\"\"\"\n        t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n        format_func = lambda x: f\"{x:.2e}\"\n        \n        # Test CSV output (known to work)\n        with StringIO() as sp:\n            t.write(sp, format=\"csv\", formats={\"a\": format_func})\n            csv_output = sp.getvalue()\n        \n        # Test HTML output (should work the same way)\n        with StringIO() as sp:\n            t.write(sp, format=\"html\", formats={\"a\": format_func})\n            html_output = sp.getvalue()\n        \n        # Both should contain the same formatted values\n        assert \"1.24e-24\" in csv_output\n        assert \"3.23e-15\" in csv_output\n        assert \"1.24e-24\" in html_output\n        assert \"3.23e-15\" in html_output\n    \n    def test_html_formats_with_multidimensional_columns(self):\n        \"\"\"Test formats parameter with 2D columns (HTML supports 2D).\"\"\"\n        # Create table with 2D column\n        data_2d = np.array([[1.23456, 2.34567], [3.45678, 4.56789]])\n        t = Table([data_2d], names=['matrix'])\n        \n        with StringIO() as sp:\n            t.write(sp, format=\"html\", formats={\"matrix\": lambda x: f\"{x:.2f}\"})\n            html_output = sp.getvalue()\n        \n        # Check that 2D values are formatted\n        assert \"1.23\" in html_output\n        assert \"2.35\" in html_output\n        assert \"3.46\" in html_output\n        assert \"4.57\" in html_output\n    \n    def test_html_formats_edge_cases(self):\n        \"\"\"Test edge cases for HTML formats parameter.\"\"\"\n        t = Table([[1.0, 2.0, 3.0]], names=['values'])\n        \n        # Test with empty formats dict\n        with StringIO() as sp:\n            t.write(sp, format=\"html\", formats={})\n            html_output = sp.getvalue()\n        assert \"1.0\" in html_output\n        \n        # Test with non-existent column in formats\n        with StringIO() as sp:\n            t.write(sp, format=\"html\", formats={\"nonexistent\": lambda x: f\"{x:.2f}\"})\n            html_output = sp.getvalue()\n        assert \"1.0\" in html_output  # Should work normally\n        \n        # Test with None format function (should be ignored)\n        with StringIO() as sp:\n            t.write(sp, format=\"html\", formats={\"values\": None})\n            html_output = sp.getvalue()\n        assert \"1.0\" in html_output\n</patched>\n```",
  "patch": "--- a/astropy/io/ascii/tests/test_html_formats.py\n+++ b/astropy/io/ascii/tests/test_html_formats.py\n-# Empty if creating new file\n+import pytest\n+from io import StringIO\n+import numpy as np\n+from astropy.table import Table\n+from astropy.io import ascii\n+\n+\n+class TestHTMLFormats:\n+    \"\"\"Test that HTML table output respects the formats parameter.\"\"\"\n+    \n+    def test_html_formats_basic(self):\n+        \"\"\"Test that formats parameter works for basic HTML output.\"\"\"\n+        # Create test table with float values that need formatting\n+        t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n+        \n+        # Write HTML table with \"a\" column formatted to show 2 decimal places\n+        with StringIO() as sp:\n+            t.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.2e}\"})\n+            html_output = sp.getvalue()\n+        \n+        # Check that the formatted values appear in the HTML output\n+        assert \"1.24e-24\" in html_output\n+        assert \"3.23e-15\" in html_output\n+        # Check that unformatted values don't appear\n+        assert \"1.23875234858e-24\" not in html_output\n+        assert \"3.2348748432e-15\" not in html_output\n+        # Check that column b is unaffected\n+        assert \"<td>2</td>\" in html_output\n+        assert \"<td>4</td>\" in html_output\n+    \n+    def test_html_formats_multiple_columns(self):\n+        \"\"\"Test formats parameter with multiple columns.\"\"\"\n+        t = Table([\n+            [1.23456789, 2.34567890],\n+            [123.456789, 234.567890],\n+            ['foo', 'bar']\n+        ], names=('a', 'b', 'c'))\n+        \n+        # Format both numeric columns differently\n+        formats = {\n+            'a': lambda x: f\"{x:.2f}\",\n+            'b': lambda x: f\"{x:.1f}\"\n+        }\n+        \n+        with StringIO() as sp:\n+            t.write(sp, format=\"html\", formats=formats)\n+            html_output = sp.getvalue()\n+        \n+        # Check formatted values\n+        assert \"1.23\" in html_output  # column a formatted to 2 decimal places\n+        assert \"2.35\" in html_output  # column a formatted to 2 decimal places\n+        assert \"123.5\" in html_output  # column b formatted to 1 decimal place\n+        assert \"234.6\" in html_output  # column b formatted to 1 decimal place\n+        # Check that string column is unaffected\n+        assert \"<td>foo</td>\" in html_output\n+        assert \"<td>bar</td>\" in html_output\n+    \n+    def test_html_formats_string_format(self):\n+        \"\"\"Test formats parameter with string format specifiers.\"\"\"\n+        t = Table([[1.23456789, 2.34567890]], names=['values'])\n+        \n+        with StringIO() as sp:\n+            t.write(sp, format=\"html\", formats={\"values\": \"%.3f\"})\n+            html_output = sp.getvalue()\n+        \n+        # Check that string format is applied\n+        assert \"1.235\" in html_output\n+        assert \"2.346\" in html_output\n+    \n+    def test_html_formats_integer_column(self):\n+        \"\"\"Test formats parameter with integer formatting.\"\"\"\n+        t = Table([[1234, 5678]], names=['numbers'])\n+        \n+        with StringIO() as sp:\n+            t.write(sp, format=\"html\", formats={\"numbers\": lambda x: f\"{x:,}\"})\n+            html_output = sp.getvalue()\n+        \n+        # Check that comma formatting is applied\n+        assert \"1,234\" in html_output\n+        assert \"5,678\" in html_output\n+    \n+    def test_html_formats_no_formats_parameter(self):\n+        \"\"\"Test that HTML output works normally without formats parameter.\"\"\"\n+        t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n+        \n+        with StringIO() as sp:\n+            t.write(sp, format=\"html\")\n+            html_output = sp.getvalue()\n+        \n+        # Check that original values appear (no formatting applied)\n+        assert \"1.23875234858e-24\" in html_output\n+        assert \"3.2348748432e-15\" in html_output\n+        assert \"<td>2</td>\" in html_output\n+        assert \"<td>4</td>\" in html_output\n+    \n+    def test_html_formats_partial_column_formatting(self):\n+        \"\"\"Test that only specified columns are formatted.\"\"\"\n+        t = Table([\n+            [1.23456789, 2.34567890],\n+            [9.87654321, 8.76543210]\n+        ], names=('a', 'b'))\n+        \n+        # Only format column 'a'\n+        with StringIO() as sp:\n+            t.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.1f}\"})\n+            html_output = sp.getvalue()\n+        \n+        # Check that only column 'a' is formatted\n+        assert \"1.2\" in html_output  # column a formatted\n+        assert \"2.3\" in html_output  # column a formatted\n+        # Column b should remain unformatted\n+        assert \"9.87654321\" in html_output\n+        assert \"8.76543210\" in html_output\n+    \n+    def test_html_formats_with_masked_values(self):\n+        \"\"\"Test formats parameter with masked table values.\"\"\"\n+        t = Table([[1.23456789, np.ma.masked], [3.45678901, 4.56789012]], \n+                  names=('a', 'b'), masked=True)\n+        \n+        with StringIO() as sp:\n+            t.write(sp, format=\"html\", formats={\"a\": lambda x: f\"{x:.2f}\", \"b\": lambda x: f\"{x:.1f}\"})\n+            html_output = sp.getvalue()\n+        \n+        # Check formatted values\n+        assert \"1.23\" in html_output\n+        assert \"3.5\" in html_output\n+        assert \"4.6\" in html_output\n+        # Masked value should appear as empty or masked indicator\n+        assert \"--\" in html_output or \"\" in html_output\n+    \n+    def test_html_formats_comparison_with_other_formats(self):\n+        \"\"\"Test that HTML formats work consistently with other ASCII formats.\"\"\"\n+        t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\n+        format_func = lambda x: f\"{x:.2e}\"\n+        \n+        # Test CSV output (known to work)\n+        with StringIO() as sp:\n+            t.write(sp, format=\"csv\", formats={\"a\": format_func})\n+            csv_output = sp.getvalue()\n+        \n+        # Test HTML output (should work the same way)\n+        with StringIO() as sp:\n+            t.write(sp, format=\"html\", formats={\"a\": format_func})\n+            html_output = sp.getvalue()\n+        \n+        # Both should contain the same formatted values\n+        assert \"1.24e-24\" in csv_output\n+        assert \"3.23e-15\" in csv_output\n+        assert \"1.24e-24\" in html_output\n+        assert \"3.23e-15\" in html_output\n+    \n+    def test_html_formats_with_multidimensional_columns(self):\n+        \"\"\"Test formats parameter with 2D columns (HTML supports 2D).\"\"\"\n+        # Create table with 2D column\n+        data_2d = np.array([[1.23456, 2.34567], [3.45678, 4.56789]])\n+        t = Table([data_2d], names=['matrix'])\n+        \n+        with StringIO() as sp:\n+            t.write(sp, format=\"html\", formats={\"matrix\": lambda x: f\"{x:.2f}\"})\n+            html_output = sp.getvalue()\n+        \n+        # Check that 2D values are formatted\n+        assert \"1.23\" in html_output\n+        assert \"2.35\" in html_output\n+        assert \"3.46\" in html_output\n+        assert \"4.57\" in html_output\n+    \n+    def test_html_formats_edge_cases(self):\n+        \"\"\"Test edge cases for HTML formats parameter.\"\"\"\n+        t = Table([[1.0, 2.0, 3.0]], names=['values'])\n+        \n+        # Test with empty formats dict\n+        with StringIO() as sp:\n+            t.write(sp, format=\"html\", formats={})\n+            html_output = sp.getvalue()\n+        assert \"1.0\" in html_output\n+        \n+        # Test with non-existent column in formats\n+        with StringIO() as sp:\n+            t.write(sp, format=\"html\", formats={\"nonexistent\": lambda x: f\"{x:.2f}\"})\n+            html_output = sp.getvalue()\n+        assert \"1.0\" in html_output  # Should work normally\n+        \n+        # Test with None format function (should be ignored)\n+        with StringIO() as sp:\n+            t.write(sp, format=\"html\", formats={\"values\": None})\n+            html_output = sp.getvalue()\n+        assert \"1.0\" in html_output\n"
}