{
  "instance_id": "psf__requests-1921",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/test_session_headers.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nimport requests\nfrom requests.sessions import Session\nfrom requests.structures import CaseInsensitiveDict\nfrom requests.sessions import merge_setting\n\n\nclass TestSessionHeaderRemoval:\n    \"\"\"Test suite for session header removal functionality.\"\"\"\n    \n    def test_session_header_set_to_none_should_be_removed(self):\n        \"\"\"Test that setting a session header to None removes it from requests.\"\"\"\n        session = Session()\n        \n        # Set a header to None - this should prevent it from being sent\n        session.headers['Accept-Encoding'] = None\n        \n        # Create a mock request to test header merging\n        request_headers = {}\n        merged_headers = merge_setting(request_headers, session.headers, dict_class=CaseInsensitiveDict)\n        \n        # The header should not be present in the merged result\n        assert 'Accept-Encoding' not in merged_headers\n        assert 'accept-encoding' not in merged_headers  # Case insensitive check\n    \n    def test_session_header_none_with_request_override(self):\n        \"\"\"Test that request headers can override session headers set to None.\"\"\"\n        session = Session()\n        \n        # Set session header to None\n        session.headers['Accept-Encoding'] = None\n        \n        # Override with request header\n        request_headers = {'Accept-Encoding': 'gzip, deflate'}\n        merged_headers = merge_setting(request_headers, session.headers, dict_class=CaseInsensitiveDict)\n        \n        # The request header should be present\n        assert merged_headers['Accept-Encoding'] == 'gzip, deflate'\n    \n    def test_request_header_none_overrides_session_header(self):\n        \"\"\"Test that request headers set to None override session headers.\"\"\"\n        session = Session()\n        \n        # Set session header to a value\n        session.headers['Accept-Encoding'] = 'gzip, deflate'\n        \n        # Override with None in request\n        request_headers = {'Accept-Encoding': None}\n        merged_headers = merge_setting(request_headers, session.headers, dict_class=CaseInsensitiveDict)\n        \n        # The header should not be present (existing behavior)\n        assert 'Accept-Encoding' not in merged_headers\n    \n    def test_multiple_session_headers_with_none_values(self):\n        \"\"\"Test that multiple session headers set to None are all removed.\"\"\"\n        session = Session()\n        \n        # Set multiple headers, some to None\n        session.headers['Accept-Encoding'] = None\n        session.headers['User-Agent'] = 'test-agent'\n        session.headers['Accept-Language'] = None\n        session.headers['Content-Type'] = 'application/json'\n        \n        request_headers = {}\n        merged_headers = merge_setting(request_headers, session.headers, dict_class=CaseInsensitiveDict)\n        \n        # Only non-None headers should be present\n        assert 'Accept-Encoding' not in merged_headers\n        assert 'Accept-Language' not in merged_headers\n        assert merged_headers['User-Agent'] == 'test-agent'\n        assert merged_headers['Content-Type'] == 'application/json'\n    \n    def test_session_header_none_preserves_other_functionality(self):\n        \"\"\"Test that setting headers to None doesn't break other merge_setting functionality.\"\"\"\n        # Test with non-dictionary settings (should return request_setting)\n        result = merge_setting('request_value', 'session_value')\n        assert result == 'request_value'\n        \n        # Test with None session_setting\n        result = merge_setting({'key': 'value'}, None)\n        assert result == {'key': 'value'}\n        \n        # Test with None request_setting\n        result = merge_setting(None, {'key': 'value'})\n        assert result == {'key': 'value'}\n    \n    def test_case_insensitive_header_none_removal(self):\n        \"\"\"Test that None header removal works with case-insensitive headers.\"\"\"\n        session = Session()\n        \n        # Set header with different case to None\n        session.headers['accept-encoding'] = None\n        session.headers['CONTENT-TYPE'] = None\n        session.headers['User-Agent'] = 'test'\n        \n        request_headers = {}\n        merged_headers = merge_setting(request_headers, session.headers, dict_class=CaseInsensitiveDict)\n        \n        # None headers should be removed regardless of case\n        assert 'accept-encoding' not in merged_headers\n        assert 'Accept-Encoding' not in merged_headers\n        assert 'CONTENT-TYPE' not in merged_headers\n        assert 'content-type' not in merged_headers\n        assert 'User-Agent' in merged_headers\n    \n    def test_session_header_none_with_mixed_request_headers(self):\n        \"\"\"Test complex scenario with mixed None and non-None headers.\"\"\"\n        session = Session()\n        \n        # Session headers: some None, some with values\n        session.headers['Accept-Encoding'] = None\n        session.headers['User-Agent'] = 'session-agent'\n        session.headers['Accept-Language'] = 'en-US'\n        session.headers['Authorization'] = None\n        \n        # Request headers: override some, add new ones\n        request_headers = {\n            'User-Agent': 'request-agent',  # Override session\n            'Content-Type': 'application/json',  # New header\n            'Accept-Charset': None,  # Request-level None\n        }\n        \n        merged_headers = merge_setting(request_headers, session.headers, dict_class=CaseInsensitiveDict)\n        \n        # Verify expected behavior\n        assert 'Accept-Encoding' not in merged_headers  # Session None removed\n        assert 'Authorization' not in merged_headers    # Session None removed\n        assert 'Accept-Charset' not in merged_headers   # Request None removed\n        assert merged_headers['User-Agent'] == 'request-agent'  # Request overrides session\n        assert merged_headers['Accept-Language'] == 'en-US'     # Session value preserved\n        assert merged_headers['Content-Type'] == 'application/json'  # Request value added\n\n\nclass TestSessionHeaderRemovalIntegration:\n    \"\"\"Integration tests for session header removal with actual Session objects.\"\"\"\n    \n    def test_session_prepare_request_removes_none_headers(self):\n        \"\"\"Test that Session.prepare_request properly handles None headers.\"\"\"\n        session = Session()\n        \n        # Set some headers to None\n        session.headers['Accept-Encoding'] = None\n        session.headers['User-Agent'] = 'test-agent'\n        \n        # Create a request\n        from requests.models import Request\n        req = Request('GET', 'http://example.com')\n        \n        # Prepare the request\n        prepared = session.prepare_request(req)\n        \n        # Check that None headers are not present\n        assert 'Accept-Encoding' not in prepared.headers\n        assert prepared.headers['User-Agent'] == 'test-agent'\n    \n    def test_session_request_with_none_headers_integration(self):\n        \"\"\"Test that None headers work correctly in the full request flow.\"\"\"\n        session = Session()\n        \n        # Set a default header to None\n        session.headers['Accept-Encoding'] = None\n        session.headers['User-Agent'] = 'test-session'\n        \n        # Mock the actual request sending to avoid network calls\n        original_send = session.send\n        captured_request = None\n        \n        def mock_send(request, **kwargs):\n            nonlocal captured_request\n            captured_request = request\n            # Return a mock response\n            from requests.models import Response\n            response = Response()\n            response.status_code = 200\n            response._content = b'{\"test\": \"response\"}'\n            return response\n        \n        session.send = mock_send\n        \n        try:\n            # Make a request\n            session.get('http://example.com')\n            \n            # Verify the prepared request doesn't have the None header\n            assert captured_request is not None\n            assert 'Accept-Encoding' not in captured_request.headers\n            assert captured_request.headers['User-Agent'] == 'test-session'\n        finally:\n            session.send = original_send\n\n\nclass TestMergeSettingEdgeCases:\n    \"\"\"Test edge cases for the merge_setting function.\"\"\"\n    \n    def test_merge_setting_with_empty_dicts(self):\n        \"\"\"Test merge_setting with empty dictionaries.\"\"\"\n        result = merge_setting({}, {})\n        assert result == {}\n        \n        result = merge_setting({'key': None}, {})\n        assert result == {}\n        \n        result = merge_setting({}, {'key': None})\n        assert result == {}\n    \n    def test_merge_setting_preserves_non_none_values(self):\n        \"\"\"Test that merge_setting preserves all non-None values correctly.\"\"\"\n        session_setting = {\n            'header1': 'value1',\n            'header2': None,\n            'header3': 'value3',\n        }\n        request_setting = {\n            'header1': 'override1',\n            'header4': 'value4',\n            'header5': None,\n        }\n        \n        result = merge_setting(request_setting, session_setting, dict_class=CaseInsensitiveDict)\n        \n        expected = {\n            'header1': 'override1',  # Request overrides session\n            'header3': 'value3',     # Session value preserved\n            'header4': 'value4',     # Request value added\n            # header2 and header5 should be absent (None values removed)\n        }\n        \n        assert dict(result) == expected\n        assert 'header2' not in result\n        assert 'header5' not in result\n</patched>\n</file>\n```",
  "patch": "--- a/tests/test_session_headers.py\n+++ b/tests/test_session_headers.py\n-# Empty if creating new file\n+import pytest\n+import requests\n+from requests.sessions import Session\n+from requests.structures import CaseInsensitiveDict\n+from requests.sessions import merge_setting\n+\n+\n+class TestSessionHeaderRemoval:\n+    \"\"\"Test suite for session header removal functionality.\"\"\"\n+    \n+    def test_session_header_set_to_none_should_be_removed(self):\n+        \"\"\"Test that setting a session header to None removes it from requests.\"\"\"\n+        session = Session()\n+        \n+        # Set a header to None - this should prevent it from being sent\n+        session.headers['Accept-Encoding'] = None\n+        \n+        # Create a mock request to test header merging\n+        request_headers = {}\n+        merged_headers = merge_setting(request_headers, session.headers, dict_class=CaseInsensitiveDict)\n+        \n+        # The header should not be present in the merged result\n+        assert 'Accept-Encoding' not in merged_headers\n+        assert 'accept-encoding' not in merged_headers  # Case insensitive check\n+    \n+    def test_session_header_none_with_request_override(self):\n+        \"\"\"Test that request headers can override session headers set to None.\"\"\"\n+        session = Session()\n+        \n+        # Set session header to None\n+        session.headers['Accept-Encoding'] = None\n+        \n+        # Override with request header\n+        request_headers = {'Accept-Encoding': 'gzip, deflate'}\n+        merged_headers = merge_setting(request_headers, session.headers, dict_class=CaseInsensitiveDict)\n+        \n+        # The request header should be present\n+        assert merged_headers['Accept-Encoding'] == 'gzip, deflate'\n+    \n+    def test_request_header_none_overrides_session_header(self):\n+        \"\"\"Test that request headers set to None override session headers.\"\"\"\n+        session = Session()\n+        \n+        # Set session header to a value\n+        session.headers['Accept-Encoding'] = 'gzip, deflate'\n+        \n+        # Override with None in request\n+        request_headers = {'Accept-Encoding': None}\n+        merged_headers = merge_setting(request_headers, session.headers, dict_class=CaseInsensitiveDict)\n+        \n+        # The header should not be present (existing behavior)\n+        assert 'Accept-Encoding' not in merged_headers\n+    \n+    def test_multiple_session_headers_with_none_values(self):\n+        \"\"\"Test that multiple session headers set to None are all removed.\"\"\"\n+        session = Session()\n+        \n+        # Set multiple headers, some to None\n+        session.headers['Accept-Encoding'] = None\n+        session.headers['User-Agent'] = 'test-agent'\n+        session.headers['Accept-Language'] = None\n+        session.headers['Content-Type'] = 'application/json'\n+        \n+        request_headers = {}\n+        merged_headers = merge_setting(request_headers, session.headers, dict_class=CaseInsensitiveDict)\n+        \n+        # Only non-None headers should be present\n+        assert 'Accept-Encoding' not in merged_headers\n+        assert 'Accept-Language' not in merged_headers\n+        assert merged_headers['User-Agent'] == 'test-agent'\n+        assert merged_headers['Content-Type'] == 'application/json'\n+    \n+    def test_session_header_none_preserves_other_functionality(self):\n+        \"\"\"Test that setting headers to None doesn't break other merge_setting functionality.\"\"\"\n+        # Test with non-dictionary settings (should return request_setting)\n+        result = merge_setting('request_value', 'session_value')\n+        assert result == 'request_value'\n+        \n+        # Test with None session_setting\n+        result = merge_setting({'key': 'value'}, None)\n+        assert result == {'key': 'value'}\n+        \n+        # Test with None request_setting\n+        result = merge_setting(None, {'key': 'value'})\n+        assert result == {'key': 'value'}\n+    \n+    def test_case_insensitive_header_none_removal(self):\n+        \"\"\"Test that None header removal works with case-insensitive headers.\"\"\"\n+        session = Session()\n+        \n+        # Set header with different case to None\n+        session.headers['accept-encoding'] = None\n+        session.headers['CONTENT-TYPE'] = None\n+        session.headers['User-Agent'] = 'test'\n+        \n+        request_headers = {}\n+        merged_headers = merge_setting(request_headers, session.headers, dict_class=CaseInsensitiveDict)\n+        \n+        # None headers should be removed regardless of case\n+        assert 'accept-encoding' not in merged_headers\n+        assert 'Accept-Encoding' not in merged_headers\n+        assert 'CONTENT-TYPE' not in merged_headers\n+        assert 'content-type' not in merged_headers\n+        assert 'User-Agent' in merged_headers\n+    \n+    def test_session_header_none_with_mixed_request_headers(self):\n+        \"\"\"Test complex scenario with mixed None and non-None headers.\"\"\"\n+        session = Session()\n+        \n+        # Session headers: some None, some with values\n+        session.headers['Accept-Encoding'] = None\n+        session.headers['User-Agent'] = 'session-agent'\n+        session.headers['Accept-Language'] = 'en-US'\n+        session.headers['Authorization'] = None\n+        \n+        # Request headers: override some, add new ones\n+        request_headers = {\n+            'User-Agent': 'request-agent',  # Override session\n+            'Content-Type': 'application/json',  # New header\n+            'Accept-Charset': None,  # Request-level None\n+        }\n+        \n+        merged_headers = merge_setting(request_headers, session.headers, dict_class=CaseInsensitiveDict)\n+        \n+        # Verify expected behavior\n+        assert 'Accept-Encoding' not in merged_headers  # Session None removed\n+        assert 'Authorization' not in merged_headers    # Session None removed\n+        assert 'Accept-Charset' not in merged_headers   # Request None removed\n+        assert merged_headers['User-Agent'] == 'request-agent'  # Request overrides session\n+        assert merged_headers['Accept-Language'] == 'en-US'     # Session value preserved\n+        assert merged_headers['Content-Type'] == 'application/json'  # Request value added\n+\n+\n+class TestSessionHeaderRemovalIntegration:\n+    \"\"\"Integration tests for session header removal with actual Session objects.\"\"\"\n+    \n+    def test_session_prepare_request_removes_none_headers(self):\n+        \"\"\"Test that Session.prepare_request properly handles None headers.\"\"\"\n+        session = Session()\n+        \n+        # Set some headers to None\n+        session.headers['Accept-Encoding'] = None\n+        session.headers['User-Agent'] = 'test-agent'\n+        \n+        # Create a request\n+        from requests.models import Request\n+        req = Request('GET', 'http://example.com')\n+        \n+        # Prepare the request\n+        prepared = session.prepare_request(req)\n+        \n+        # Check that None headers are not present\n+        assert 'Accept-Encoding' not in prepared.headers\n+        assert prepared.headers['User-Agent'] == 'test-agent'\n+    \n+    def test_session_request_with_none_headers_integration(self):\n+        \"\"\"Test that None headers work correctly in the full request flow.\"\"\"\n+        session = Session()\n+        \n+        # Set a default header to None\n+        session.headers['Accept-Encoding'] = None\n+        session.headers['User-Agent'] = 'test-session'\n+        \n+        # Mock the actual request sending to avoid network calls\n+        original_send = session.send\n+        captured_request = None\n+        \n+        def mock_send(request, **kwargs):\n+            nonlocal captured_request\n+            captured_request = request\n+            # Return a mock response\n+            from requests.models import Response\n+            response = Response()\n+            response.status_code = 200\n+            response._content = b'{\"test\": \"response\"}'\n+            return response\n+        \n+        session.send = mock_send\n+        \n+        try:\n+            # Make a request\n+            session.get('http://example.com')\n+            \n+            # Verify the prepared request doesn't have the None header\n+            assert captured_request is not None\n+            assert 'Accept-Encoding' not in captured_request.headers\n+            assert captured_request.headers['User-Agent'] == 'test-session'\n+        finally:\n+            session.send = original_send\n+\n+\n+class TestMergeSettingEdgeCases:\n+    \"\"\"Test edge cases for the merge_setting function.\"\"\"\n+    \n+    def test_merge_setting_with_empty_dicts(self):\n+        \"\"\"Test merge_setting with empty dictionaries.\"\"\"\n+        result = merge_setting({}, {})\n+        assert result == {}\n+        \n+        result = merge_setting({'key': None}, {})\n+        assert result == {}\n+        \n+        result = merge_setting({}, {'key': None})\n+        assert result == {}\n+    \n+    def test_merge_setting_preserves_non_none_values(self):\n+        \"\"\"Test that merge_setting preserves all non-None values correctly.\"\"\"\n+        session_setting = {\n+            'header1': 'value1',\n+            'header2': None,\n+            'header3': 'value3',\n+        }\n+        request_setting = {\n+            'header1': 'override1',\n+            'header4': 'value4',\n+            'header5': None,\n+        }\n+        \n+        result = merge_setting(request_setting, session_setting, dict_class=CaseInsensitiveDict)\n+        \n+        expected = {\n+            'header1': 'override1',  # Request overrides session\n+            'header3': 'value3',     # Session value preserved\n+            'header4': 'value4',     # Request value added\n+            # header2 and header5 should be absent (None values removed)\n+        }\n+        \n+        assert dict(result) == expected\n+        assert 'header2' not in result\n+        assert 'header5' not in result\n"
}