--- a/lib/matplotlib/tests/test_figure_pickle.py
+++ b/lib/matplotlib/tests/test_figure_pickle.py
-# Empty if creating new file
+import pickle
+import pytest
+import matplotlib.pyplot as plt
+import matplotlib.figure as mfigure
+import numpy as np
+
+
+class TestFigurePickle:
+    """Test pickling of figures, especially with aligned labels."""
+
+    def test_pickle_figure_without_align_labels(self):
+        """Test that a figure can be pickled without calling align_labels."""
+        fig = plt.figure()
+        ax1 = fig.add_subplot(211)
+        ax2 = fig.add_subplot(212)
+        
+        time = [0, 1, 2, 3, 4]
+        speed = [40000, 4300, 4500, 4700, 4800]
+        acc = [10, 11, 12, 13, 14]
+        
+        ax1.plot(time, speed)
+        ax1.set_ylabel('speed')
+        ax2.plot(time, acc)
+        ax2.set_ylabel('acc')
+        
+        # This should work without issues
+        pickled_data = pickle.dumps(fig)
+        unpickled_fig = pickle.loads(pickled_data)
+        
+        assert isinstance(unpickled_fig, mfigure.Figure)
+        assert len(unpickled_fig.axes) == 2
+        plt.close(fig)
+        plt.close(unpickled_fig)
+
+    def test_pickle_figure_with_align_labels_fails(self):
+        """Test that demonstrates the bug: figure cannot be pickled after align_labels."""
+        fig = plt.figure()
+        ax1 = fig.add_subplot(211)
+        ax2 = fig.add_subplot(212)
+        
+        time = [0, 1, 2, 3, 4]
+        speed = [40000, 4300, 4500, 4700, 4800]
+        acc = [10, 11, 12, 13, 14]
+        
+        ax1.plot(time, speed)
+        ax1.set_ylabel('speed')
+        ax2.plot(time, acc)
+        ax2.set_ylabel('acc')
+        
+        # This is the problematic call
+        fig.align_labels()
+        
+        # This should fail with TypeError about weakref
+        with pytest.raises(TypeError, match="cannot pickle.*weakref"):
+            pickle.dumps(fig)
+        
+        plt.close(fig)
+
+    def test_pickle_figure_with_align_xlabels_fails(self):
+        """Test that align_xlabels alone causes pickle failure."""
+        fig = plt.figure()
+        ax1 = fig.add_subplot(121)
+        ax2 = fig.add_subplot(122)
+        
+        ax1.set_xlabel('X Label 1')
+        ax2.set_xlabel('X Label 2')
+        
+        fig.align_xlabels()
+        
+        with pytest.raises(TypeError, match="cannot pickle.*weakref"):
+            pickle.dumps(fig)
+        
+        plt.close(fig)
+
+    def test_pickle_figure_with_align_ylabels_fails(self):
+        """Test that align_ylabels alone causes pickle failure."""
+        fig = plt.figure()
+        ax1 = fig.add_subplot(211)
+        ax2 = fig.add_subplot(212)
+        
+        ax1.set_ylabel('Y Label 1')
+        ax2.set_ylabel('Y Label 2')
+        
+        fig.align_ylabels()
+        
+        with pytest.raises(TypeError, match="cannot pickle.*weakref"):
+            pickle.dumps(fig)
+        
+        plt.close(fig)
+
+    def test_pickle_figure_with_align_labels_after_fix(self):
+        """Test that figure can be pickled after align_labels when fix is applied."""
+        fig = plt.figure()
+        ax1 = fig.add_subplot(211)
+        ax2 = fig.add_subplot(212)
+        
+        time = [0, 1, 2, 3, 4]
+        speed = [40000, 4300, 4500, 4700, 4800]
+        acc = [10, 11, 12, 13, 14]
+        
+        ax1.plot(time, speed)
+        ax1.set_ylabel('speed')
+        ax2.plot(time, acc)
+        ax2.set_ylabel('acc')
+        
+        fig.align_labels()
+        
+        # After fix, this should work
+        try:
+            pickled_data = pickle.dumps(fig)
+            unpickled_fig = pickle.loads(pickled_data)
+            
+            assert isinstance(unpickled_fig, mfigure.Figure)
+            assert len(unpickled_fig.axes) == 2
+            
+            # Verify that the alignment groups are properly restored
+            assert hasattr(unpickled_fig, '_align_label_groups')
+            assert 'x' in unpickled_fig._align_label_groups
+            assert 'y' in unpickled_fig._align_label_groups
+            
+            plt.close(unpickled_fig)
+        except TypeError as e:
+            if "weakref" in str(e):
+                pytest.skip("Fix not yet implemented - this test will pass after fix")
+            else:
+                raise
+        
+        plt.close(fig)
+
+    def test_pickle_figure_complex_alignment_scenario(self):
+        """Test pickling with a more complex alignment scenario."""
+        fig = plt.figure(figsize=(10, 8))
+        
+        # Create a 2x2 grid of subplots
+        ax1 = fig.add_subplot(221)
+        ax2 = fig.add_subplot(222)
+        ax3 = fig.add_subplot(223)
+        ax4 = fig.add_subplot(224)
+        
+        # Add some data and labels
+        x = np.linspace(0, 10, 100)
+        for i, ax in enumerate([ax1, ax2, ax3, ax4]):
+            ax.plot(x, np.sin(x + i))
+            ax.set_xlabel(f'X Label {i+1}')
+            ax.set_ylabel(f'Y Label {i+1}')
+        
+        # Align all labels
+        fig.align_labels()
+        
+        # Test that this can be pickled after fix
+        try:
+            pickled_data = pickle.dumps(fig)
+            unpickled_fig = pickle.loads(pickled_data)
+            
+            assert isinstance(unpickled_fig, mfigure.Figure)
+            assert len(unpickled_fig.axes) == 4
+            
+            plt.close(unpickled_fig)
+        except TypeError as e:
+            if "weakref" in str(e):
+                pytest.skip("Fix not yet implemented - this test will pass after fix")
+            else:
+                raise
+        
+        plt.close(fig)
+
+    def test_align_label_groups_state_preservation(self):
+        """Test that _align_label_groups state is properly preserved through pickle."""
+        fig = plt.figure()
+        ax1 = fig.add_subplot(211)
+        ax2 = fig.add_subplot(212)
+        
+        ax1.set_ylabel('Label 1')
+        ax2.set_ylabel('Label 2')
+        
+        # Before alignment, groups should be empty
+        assert len(fig._align_label_groups['x']._mapping) == 0
+        assert len(fig._align_label_groups['y']._mapping) == 0
+        
+        fig.align_ylabels()
+        
+        # After alignment, y group should have entries
+        assert len(fig._align_label_groups['y']._mapping) > 0
+        
+        try:
+            pickled_data = pickle.dumps(fig)
+            unpickled_fig = pickle.loads(pickled_data)
+            
+            # Verify the alignment groups are restored
+            assert hasattr(unpickled_fig, '_align_label_groups')
+            assert 'x' in unpickled_fig._align_label_groups
+            assert 'y' in unpickled_fig._align_label_groups
+            
+            plt.close(unpickled_fig)
+        except TypeError as e:
+            if "weakref" in str(e):
+                pytest.skip("Fix not yet implemented - this test will pass after fix")
+            else:
+                raise
+        
+        plt.close(fig)
+
+    def test_empty_figure_pickle_with_align_labels(self):
+        """Test edge case: empty figure with align_labels call."""
+        fig = plt.figure()
+        
+        # Call align_labels on empty figure
+        fig.align_labels()
+        
+        # Should still be able to pickle
+        try:
+            pickled_data = pickle.dumps(fig)
+            unpickled_fig = pickle.loads(pickled_data)
+            
+            assert isinstance(unpickled_fig, mfigure.Figure)
+            assert len(unpickled_fig.axes) == 0
+            
+            plt.close(unpickled_fig)
+        except TypeError as e:
+            if "weakref" in str(e):
+                pytest.skip("Fix not yet implemented - this test will pass after fix")
+            else:
+                raise
+        
+        plt.close(fig)
+
+    def test_single_subplot_align_labels_pickle(self):
+        """Test edge case: single subplot with align_labels."""
+        fig = plt.figure()
+        ax = fig.add_subplot(111)
+        
+        ax.set_xlabel('X Label')
+        ax.set_ylabel('Y Label')
+        
+        fig.align_labels()
+        
+        try:
+            pickled_data = pickle.dumps(fig)
+            unpickled_fig = pickle.loads(pickled_data)
+            
+            assert isinstance(unpickled_fig, mfigure.Figure)
+            assert len(unpickled_fig.axes) == 1
+            
+            plt.close(unpickled_fig)
+        except TypeError as e:
+            if "weakref" in str(e):
+                pytest.skip("Fix not yet implemented - this test will pass after fix")
+            else:
+                raise
+        
+        plt.close(fig)
