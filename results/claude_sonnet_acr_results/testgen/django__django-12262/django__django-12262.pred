{
  "instance_id": "django__django-12262",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/template_tests/test_custom_tags.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.template import Context, Template, TemplateSyntaxError\nfrom django.template.library import Library\nfrom django.test import TestCase\n\n\nclass CustomTagsKwargsTest(TestCase):\n    \"\"\"Test custom template tags with keyword-only arguments.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up test library and register test tags.\"\"\"\n        self.library = Library()\n\n    def test_simple_tag_kwonly_arg_with_default_works(self):\n        \"\"\"Test that simple_tag with keyword-only arg with default accepts the argument.\"\"\"\n        @self.library.simple_tag\n        def hello(*, greeting='hello'):\n            return f'{greeting} world'\n\n        # Register the tag\n        self.library.tag('hello', hello)\n\n        # Test that providing the keyword argument works\n        template = Template(\"{% load custom_tags %}{% hello greeting='hi' %}\")\n        context = Context({})\n        \n        # This should work and not raise TemplateSyntaxError\n        result = template.render(context)\n        self.assertEqual(result.strip(), 'hi world')\n\n    def test_simple_tag_kwonly_arg_with_default_uses_default(self):\n        \"\"\"Test that simple_tag with keyword-only arg uses default when not provided.\"\"\"\n        @self.library.simple_tag\n        def hello(*, greeting='hello'):\n            return f'{greeting} world'\n\n        # Register the tag\n        self.library.tag('hello', hello)\n\n        # Test that not providing the keyword argument uses default\n        template = Template(\"{% load custom_tags %}{% hello %}\")\n        context = Context({})\n        \n        result = template.render(context)\n        self.assertEqual(result.strip(), 'hello world')\n\n    def test_simple_tag_kwonly_required_arg_works(self):\n        \"\"\"Test that simple_tag with required keyword-only arg works correctly.\"\"\"\n        @self.library.simple_tag\n        def hi(*, greeting):\n            return f'{greeting} world'\n\n        # Register the tag\n        self.library.tag('hi', hi)\n\n        # Test that providing the required keyword argument works\n        template = Template(\"{% load custom_tags %}{% hi greeting='hello' %}\")\n        context = Context({})\n        \n        result = template.render(context)\n        self.assertEqual(result.strip(), 'hello world')\n\n    def test_simple_tag_kwonly_required_arg_missing_raises_error(self):\n        \"\"\"Test that simple_tag with required keyword-only arg raises error when missing.\"\"\"\n        @self.library.simple_tag\n        def hi(*, greeting):\n            return f'{greeting} world'\n\n        # Register the tag\n        self.library.tag('hi', hi)\n\n        # Test that not providing the required keyword argument raises error\n        template = Template(\"{% load custom_tags %}{% hi %}\")\n        context = Context({})\n        \n        with self.assertRaises(TemplateSyntaxError) as cm:\n            template.render(context)\n        \n        self.assertIn(\"did not receive value(s) for the argument(s): 'greeting'\", str(cm.exception))\n\n    def test_simple_tag_duplicate_kwarg_correct_error_message(self):\n        \"\"\"Test that duplicate keyword arguments show correct error message.\"\"\"\n        @self.library.simple_tag\n        def hi(*, greeting):\n            return f'{greeting} world'\n\n        # Register the tag\n        self.library.tag('hi', hi)\n\n        # Test that providing duplicate keyword arguments shows correct error\n        with self.assertRaises(TemplateSyntaxError) as cm:\n            Template(\"{% load custom_tags %}{% hi greeting='hi' greeting='hello' %}\")\n        \n        # Should show \"multiple values\" error, not \"unexpected keyword argument\"\n        self.assertIn(\"received multiple values for keyword argument 'greeting'\", str(cm.exception))\n        self.assertNotIn(\"unexpected keyword argument\", str(cm.exception))\n\n    def test_simple_tag_unexpected_kwarg_error_message(self):\n        \"\"\"Test that truly unexpected keyword arguments show correct error message.\"\"\"\n        @self.library.simple_tag\n        def hello(*, greeting='hello'):\n            return f'{greeting} world'\n\n        # Register the tag\n        self.library.tag('hello', hello)\n\n        # Test that providing unexpected keyword arguments shows correct error\n        with self.assertRaises(TemplateSyntaxError) as cm:\n            Template(\"{% load custom_tags %}{% hello unknown='value' %}\")\n        \n        self.assertIn(\"received unexpected keyword argument 'unknown'\", str(cm.exception))\n\n    def test_simple_tag_mixed_args_and_kwargs(self):\n        \"\"\"Test simple_tag with mix of positional and keyword-only arguments.\"\"\"\n        @self.library.simple_tag\n        def greet(name, *, greeting='hello', punctuation='!'):\n            return f'{greeting} {name}{punctuation}'\n\n        # Register the tag\n        self.library.tag('greet', greet)\n\n        # Test with positional arg and keyword args\n        template = Template(\"{% load custom_tags %}{% greet 'world' greeting='hi' punctuation='.' %}\")\n        context = Context({})\n        \n        result = template.render(context)\n        self.assertEqual(result.strip(), 'hi world.')\n\n    def test_simple_tag_mixed_args_with_defaults(self):\n        \"\"\"Test simple_tag with positional args and keyword-only args with defaults.\"\"\"\n        @self.library.simple_tag\n        def greet(name, *, greeting='hello'):\n            return f'{greeting} {name}'\n\n        # Register the tag\n        self.library.tag('greet', greet)\n\n        # Test with positional arg only (using default for keyword arg)\n        template = Template(\"{% load custom_tags %}{% greet 'world' %}\")\n        context = Context({})\n        \n        result = template.render(context)\n        self.assertEqual(result.strip(), 'hello world')\n\n        # Test with positional arg and explicit keyword arg\n        template = Template(\"{% load custom_tags %}{% greet 'world' greeting='hi' %}\")\n        context = Context({})\n        \n        result = template.render(context)\n        self.assertEqual(result.strip(), 'hi world')\n\n    def test_inclusion_tag_kwonly_arg_with_default_works(self):\n        \"\"\"Test that inclusion_tag with keyword-only arg with default accepts the argument.\"\"\"\n        @self.library.inclusion_tag('test_template.html')\n        def show_greeting(*, greeting='hello'):\n            return {'greeting': f'{greeting} world'}\n\n        # Register the tag\n        self.library.tag('show_greeting', show_greeting)\n\n        # Test that providing the keyword argument works\n        # Note: This test focuses on the parsing, not the actual template rendering\n        template = Template(\"{% load custom_tags %}{% show_greeting greeting='hi' %}\")\n        context = Context({})\n        \n        # The parsing should not raise TemplateSyntaxError\n        # The actual rendering might fail due to missing template, but parsing should work\n        try:\n            template.render(context)\n        except Exception as e:\n            # If it fails, it should not be due to unexpected keyword argument\n            self.assertNotIn(\"unexpected keyword argument\", str(e))\n\n    def test_inclusion_tag_duplicate_kwarg_correct_error_message(self):\n        \"\"\"Test that inclusion_tag duplicate keyword arguments show correct error message.\"\"\"\n        @self.library.inclusion_tag('test_template.html')\n        def show_greeting(*, greeting):\n            return {'greeting': f'{greeting} world'}\n\n        # Register the tag\n        self.library.tag('show_greeting', show_greeting)\n\n        # Test that providing duplicate keyword arguments shows correct error\n        with self.assertRaises(TemplateSyntaxError) as cm:\n            Template(\"{% load custom_tags %}{% show_greeting greeting='hi' greeting='hello' %}\")\n        \n        # Should show \"multiple values\" error, not \"unexpected keyword argument\"\n        self.assertIn(\"received multiple values for keyword argument 'greeting'\", str(cm.exception))\n        self.assertNotIn(\"unexpected keyword argument\", str(cm.exception))\n\n    def test_simple_tag_with_varkw_accepts_any_kwarg(self):\n        \"\"\"Test that simple_tag with **kwargs accepts any keyword argument.\"\"\"\n        @self.library.simple_tag\n        def flexible(*, greeting='hello', **kwargs):\n            extra = ', '.join(f'{k}={v}' for k, v in kwargs.items())\n            result = f'{greeting} world'\n            if extra:\n                result += f' ({extra})'\n            return result\n\n        # Register the tag\n        self.library.tag('flexible', flexible)\n\n        # Test that any keyword arguments are accepted\n        template = Template(\"{% load custom_tags %}{% flexible greeting='hi' extra='value' another='test' %}\")\n        context = Context({})\n        \n        result = template.render(context)\n        # Should not raise TemplateSyntaxError for \"unexpected\" arguments\n        self.assertIn('hi world', result)\n\n    def test_edge_case_kwonly_with_context(self):\n        \"\"\"Test keyword-only args work with takes_context=True.\"\"\"\n        @self.library.simple_tag(takes_context=True)\n        def context_greet(context, *, greeting='hello'):\n            return f'{greeting} from context'\n\n        # Register the tag\n        self.library.tag('context_greet', context_greet)\n\n        # Test that keyword argument works with context\n        template = Template(\"{% load custom_tags %}{% context_greet greeting='hi' %}\")\n        context = Context({})\n        \n        result = template.render(context)\n        self.assertEqual(result.strip(), 'hi from context')\n\n    def test_edge_case_empty_kwonly_defaults(self):\n        \"\"\"Test edge case where kwonly_defaults might be None or empty.\"\"\"\n        # This tests the condition in parse_bits where kwonly_defaults might be None\n        @self.library.simple_tag\n        def no_defaults(*, required_arg):\n            return f'got {required_arg}'\n\n        # Register the tag\n        self.library.tag('no_defaults', no_defaults)\n\n        # Test that required keyword-only arg works\n        template = Template(\"{% load custom_tags %}{% no_defaults required_arg='value' %}\")\n        context = Context({})\n        \n        result = template.render(context)\n        self.assertEqual(result.strip(), 'got value')\n\n        # Test that missing required arg raises appropriate error\n        with self.assertRaises(TemplateSyntaxError) as cm:\n            Template(\"{% load custom_tags %}{% no_defaults %}\")\n        \n        self.assertIn(\"did not receive value(s) for the argument(s): 'required_arg'\", str(cm.exception))\n</patched>\n```\n\n```\n<file>tests/template_tests/test_library_parse_bits.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.template import TemplateSyntaxError\nfrom django.template.library import parse_bits\nfrom django.template.base import Parser, Token\nfrom django.test import TestCase\nfrom unittest.mock import Mock\n\n\nclass ParseBitsKwargsTest(TestCase):\n    \"\"\"Test parse_bits function with keyword-only arguments.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up mock parser for testing.\"\"\"\n        self.parser = Mock(spec=Parser)\n        self.parser.compile_filter = Mock(side_effect=lambda x: x)\n\n    def test_parse_bits_kwonly_with_default_accepts_kwarg(self):\n        \"\"\"Test that parse_bits accepts keyword-only args with defaults.\"\"\"\n        # Function signature: def func(*, greeting='hello'): pass\n        params = []\n        varargs = None\n        varkw = None\n        defaults = None\n        kwonly = ['greeting']\n        kwonly_defaults = {'greeting': 'hello'}\n        takes_context = False\n        name = 'test_func'\n\n        # Test providing the keyword argument\n        bits = ['greeting=hi']\n        \n        # Mock token_kwargs to return the parsed kwarg\n        from django.template.library import token_kwargs\n        original_token_kwargs = token_kwargs\n        \n        def mock_token_kwargs(bits, parser):\n            if bits == ['greeting=hi']:\n                return {'greeting': 'hi'}\n            return {}\n        \n        # Patch token_kwargs temporarily\n        import django.template.library\n        django.template.library.token_kwargs = mock_token_kwargs\n        \n        try:\n            args, kwargs = parse_bits(\n                self.parser, bits, params, varargs, varkw, defaults,\n                kwonly, kwonly_defaults, takes_context, name\n            )\n            \n            # Should successfully parse without raising TemplateSyntaxError\n            self.assertEqual(args, [])\n            self.assertEqual(kwargs, {'greeting': 'hi'})\n        finally:\n            # Restore original function\n            django.template.library.token_kwargs = original_token_kwargs\n\n    def test_parse_bits_kwonly_with_default_uses_default(self):\n        \"\"\"Test that parse_bits uses default for keyword-only args when not provided.\"\"\"\n        # Function signature: def func(*, greeting='hello'): pass\n        params = []\n        varargs = None\n        varkw = None\n        defaults = None\n        kwonly = ['greeting']\n        kwonly_defaults = {'greeting': 'hello'}\n        takes_context = False\n        name = 'test_func'\n\n        # Test not providing the keyword argument\n        bits = []\n        \n        args, kwargs = parse_bits(\n            self.parser, bits, params, varargs, varkw, defaults,\n            kwonly, kwonly_defaults, takes_context, name\n        )\n        \n        # Should successfully parse without raising TemplateSyntaxError\n        self.assertEqual(args, [])\n        self.assertEqual(kwargs, {})\n\n    def test_parse_bits_kwonly_required_missing_raises_error(self):\n        \"\"\"Test that parse_bits raises error for missing required keyword-only args.\"\"\"\n        # Function signature: def func(*, greeting): pass\n        params = []\n        varargs = None\n        varkw = None\n        defaults = None\n        kwonly = ['greeting']\n        kwonly_defaults = None\n        takes_context = False\n        name = 'test_func'\n\n        # Test not providing the required keyword argument\n        bits = []\n        \n        with self.assertRaises(TemplateSyntaxError) as cm:\n            parse_bits(\n                self.parser, bits, params, varargs, varkw, defaults,\n                kwonly, kwonly_defaults, takes_context, name\n            )\n        \n        self.assertIn(\"did not receive value(s) for the argument(s): 'greeting'\", str(cm.exception))\n\n    def test_parse_bits_duplicate_kwarg_correct_error(self):\n        \"\"\"Test that parse_bits shows correct error for duplicate keyword args.\"\"\"\n        # Function signature: def func(*, greeting): pass\n        params = []\n        varargs = None\n        varkw = None\n        defaults = None\n        kwonly = ['greeting']\n        kwonly_defaults = None\n        takes_context = False\n        name = 'test_func'\n\n        # Test providing duplicate keyword arguments\n        bits = ['greeting=hi', 'greeting=hello']\n        \n        # Mock token_kwargs to return the parsed kwargs\n        from django.template.library import token_kwargs\n        original_token_kwargs = token_kwargs\n        \n        call_count = 0\n        def mock_token_kwargs(bits, parser):\n            nonlocal call_count\n            call_count += 1\n            if call_count == 1 and bits == ['greeting=hi']:\n                return {'greeting': 'hi'}\n            elif call_count == 2 and bits == ['greeting=hello']:\n                return {'greeting': 'hello'}\n            return {}\n        \n        # Patch token_kwargs temporarily\n        import django.template.library\n        django.template.library.token_kwargs = mock_token_kwargs\n        \n        try:\n            with self.assertRaises(TemplateSyntaxError) as cm:\n                parse_bits(\n                    self.parser, bits, params, varargs, varkw, defaults,\n                    kwonly, kwonly_defaults, takes_context, name\n                )\n            \n            # Should show \"multiple values\" error, not \"unexpected keyword argument\"\n            self.assertIn(\"received multiple values for keyword argument 'greeting'\", str(cm.exception))\n            self.assertNotIn(\"unexpected keyword argument\", str(cm.exception))\n        finally:\n            # Restore original function\n            django.template.",
  "patch": "--- a/tests/template_tests/test_custom_tags.py\n+++ b/tests/template_tests/test_custom_tags.py\n-# Empty if creating new file\n+import pytest\n+from django.template import Context, Template, TemplateSyntaxError\n+from django.template.library import Library\n+from django.test import TestCase\n+\n+\n+class CustomTagsKwargsTest(TestCase):\n+    \"\"\"Test custom template tags with keyword-only arguments.\"\"\"\n+\n+    def setUp(self):\n+        \"\"\"Set up test library and register test tags.\"\"\"\n+        self.library = Library()\n+\n+    def test_simple_tag_kwonly_arg_with_default_works(self):\n+        \"\"\"Test that simple_tag with keyword-only arg with default accepts the argument.\"\"\"\n+        @self.library.simple_tag\n+        def hello(*, greeting='hello'):\n+            return f'{greeting} world'\n+\n+        # Register the tag\n+        self.library.tag('hello', hello)\n+\n+        # Test that providing the keyword argument works\n+        template = Template(\"{% load custom_tags %}{% hello greeting='hi' %}\")\n+        context = Context({})\n+        \n+        # This should work and not raise TemplateSyntaxError\n+        result = template.render(context)\n+        self.assertEqual(result.strip(), 'hi world')\n+\n+    def test_simple_tag_kwonly_arg_with_default_uses_default(self):\n+        \"\"\"Test that simple_tag with keyword-only arg uses default when not provided.\"\"\"\n+        @self.library.simple_tag\n+        def hello(*, greeting='hello'):\n+            return f'{greeting} world'\n+\n+        # Register the tag\n+        self.library.tag('hello', hello)\n+\n+        # Test that not providing the keyword argument uses default\n+        template = Template(\"{% load custom_tags %}{% hello %}\")\n+        context = Context({})\n+        \n+        result = template.render(context)\n+        self.assertEqual(result.strip(), 'hello world')\n+\n+    def test_simple_tag_kwonly_required_arg_works(self):\n+        \"\"\"Test that simple_tag with required keyword-only arg works correctly.\"\"\"\n+        @self.library.simple_tag\n+        def hi(*, greeting):\n+            return f'{greeting} world'\n+\n+        # Register the tag\n+        self.library.tag('hi', hi)\n+\n+        # Test that providing the required keyword argument works\n+        template = Template(\"{% load custom_tags %}{% hi greeting='hello' %}\")\n+        context = Context({})\n+        \n+        result = template.render(context)\n+        self.assertEqual(result.strip(), 'hello world')\n+\n+    def test_simple_tag_kwonly_required_arg_missing_raises_error(self):\n+        \"\"\"Test that simple_tag with required keyword-only arg raises error when missing.\"\"\"\n+        @self.library.simple_tag\n+        def hi(*, greeting):\n+            return f'{greeting} world'\n+\n+        # Register the tag\n+        self.library.tag('hi', hi)\n+\n+        # Test that not providing the required keyword argument raises error\n+        template = Template(\"{% load custom_tags %}{% hi %}\")\n+        context = Context({})\n+        \n+        with self.assertRaises(TemplateSyntaxError) as cm:\n+            template.render(context)\n+        \n+        self.assertIn(\"did not receive value(s) for the argument(s): 'greeting'\", str(cm.exception))\n+\n+    def test_simple_tag_duplicate_kwarg_correct_error_message(self):\n+        \"\"\"Test that duplicate keyword arguments show correct error message.\"\"\"\n+        @self.library.simple_tag\n+        def hi(*, greeting):\n+            return f'{greeting} world'\n+\n+        # Register the tag\n+        self.library.tag('hi', hi)\n+\n+        # Test that providing duplicate keyword arguments shows correct error\n+        with self.assertRaises(TemplateSyntaxError) as cm:\n+            Template(\"{% load custom_tags %}{% hi greeting='hi' greeting='hello' %}\")\n+        \n+        # Should show \"multiple values\" error, not \"unexpected keyword argument\"\n+        self.assertIn(\"received multiple values for keyword argument 'greeting'\", str(cm.exception))\n+        self.assertNotIn(\"unexpected keyword argument\", str(cm.exception))\n+\n+    def test_simple_tag_unexpected_kwarg_error_message(self):\n+        \"\"\"Test that truly unexpected keyword arguments show correct error message.\"\"\"\n+        @self.library.simple_tag\n+        def hello(*, greeting='hello'):\n+            return f'{greeting} world'\n+\n+        # Register the tag\n+        self.library.tag('hello', hello)\n+\n+        # Test that providing unexpected keyword arguments shows correct error\n+        with self.assertRaises(TemplateSyntaxError) as cm:\n+            Template(\"{% load custom_tags %}{% hello unknown='value' %}\")\n+        \n+        self.assertIn(\"received unexpected keyword argument 'unknown'\", str(cm.exception))\n+\n+    def test_simple_tag_mixed_args_and_kwargs(self):\n+        \"\"\"Test simple_tag with mix of positional and keyword-only arguments.\"\"\"\n+        @self.library.simple_tag\n+        def greet(name, *, greeting='hello', punctuation='!'):\n+            return f'{greeting} {name}{punctuation}'\n+\n+        # Register the tag\n+        self.library.tag('greet', greet)\n+\n+        # Test with positional arg and keyword args\n+        template = Template(\"{% load custom_tags %}{% greet 'world' greeting='hi' punctuation='.' %}\")\n+        context = Context({})\n+        \n+        result = template.render(context)\n+        self.assertEqual(result.strip(), 'hi world.')\n+\n+    def test_simple_tag_mixed_args_with_defaults(self):\n+        \"\"\"Test simple_tag with positional args and keyword-only args with defaults.\"\"\"\n+        @self.library.simple_tag\n+        def greet(name, *, greeting='hello'):\n+            return f'{greeting} {name}'\n+\n+        # Register the tag\n+        self.library.tag('greet', greet)\n+\n+        # Test with positional arg only (using default for keyword arg)\n+        template = Template(\"{% load custom_tags %}{% greet 'world' %}\")\n+        context = Context({})\n+        \n+        result = template.render(context)\n+        self.assertEqual(result.strip(), 'hello world')\n+\n+        # Test with positional arg and explicit keyword arg\n+        template = Template(\"{% load custom_tags %}{% greet 'world' greeting='hi' %}\")\n+        context = Context({})\n+        \n+        result = template.render(context)\n+        self.assertEqual(result.strip(), 'hi world')\n+\n+    def test_inclusion_tag_kwonly_arg_with_default_works(self):\n+        \"\"\"Test that inclusion_tag with keyword-only arg with default accepts the argument.\"\"\"\n+        @self.library.inclusion_tag('test_template.html')\n+        def show_greeting(*, greeting='hello'):\n+            return {'greeting': f'{greeting} world'}\n+\n+        # Register the tag\n+        self.library.tag('show_greeting', show_greeting)\n+\n+        # Test that providing the keyword argument works\n+        # Note: This test focuses on the parsing, not the actual template rendering\n+        template = Template(\"{% load custom_tags %}{% show_greeting greeting='hi' %}\")\n+        context = Context({})\n+        \n+        # The parsing should not raise TemplateSyntaxError\n+        # The actual rendering might fail due to missing template, but parsing should work\n+        try:\n+            template.render(context)\n+        except Exception as e:\n+            # If it fails, it should not be due to unexpected keyword argument\n+            self.assertNotIn(\"unexpected keyword argument\", str(e))\n+\n+    def test_inclusion_tag_duplicate_kwarg_correct_error_message(self):\n+        \"\"\"Test that inclusion_tag duplicate keyword arguments show correct error message.\"\"\"\n+        @self.library.inclusion_tag('test_template.html')\n+        def show_greeting(*, greeting):\n+            return {'greeting': f'{greeting} world'}\n+\n+        # Register the tag\n+        self.library.tag('show_greeting', show_greeting)\n+\n+        # Test that providing duplicate keyword arguments shows correct error\n+        with self.assertRaises(TemplateSyntaxError) as cm:\n+            Template(\"{% load custom_tags %}{% show_greeting greeting='hi' greeting='hello' %}\")\n+        \n+        # Should show \"multiple values\" error, not \"unexpected keyword argument\"\n+        self.assertIn(\"received multiple values for keyword argument 'greeting'\", str(cm.exception))\n+        self.assertNotIn(\"unexpected keyword argument\", str(cm.exception))\n+\n+    def test_simple_tag_with_varkw_accepts_any_kwarg(self):\n+        \"\"\"Test that simple_tag with **kwargs accepts any keyword argument.\"\"\"\n+        @self.library.simple_tag\n+        def flexible(*, greeting='hello', **kwargs):\n+            extra = ', '.join(f'{k}={v}' for k, v in kwargs.items())\n+            result = f'{greeting} world'\n+            if extra:\n+                result += f' ({extra})'\n+            return result\n+\n+        # Register the tag\n+        self.library.tag('flexible', flexible)\n+\n+        # Test that any keyword arguments are accepted\n+        template = Template(\"{% load custom_tags %}{% flexible greeting='hi' extra='value' another='test' %}\")\n+        context = Context({})\n+        \n+        result = template.render(context)\n+        # Should not raise TemplateSyntaxError for \"unexpected\" arguments\n+        self.assertIn('hi world', result)\n+\n+    def test_edge_case_kwonly_with_context(self):\n+        \"\"\"Test keyword-only args work with takes_context=True.\"\"\"\n+        @self.library.simple_tag(takes_context=True)\n+        def context_greet(context, *, greeting='hello'):\n+            return f'{greeting} from context'\n+\n+        # Register the tag\n+        self.library.tag('context_greet', context_greet)\n+\n+        # Test that keyword argument works with context\n+        template = Template(\"{% load custom_tags %}{% context_greet greeting='hi' %}\")\n+        context = Context({})\n+        \n+        result = template.render(context)\n+        self.assertEqual(result.strip(), 'hi from context')\n+\n+    def test_edge_case_empty_kwonly_defaults(self):\n+        \"\"\"Test edge case where kwonly_defaults might be None or empty.\"\"\"\n+        # This tests the condition in parse_bits where kwonly_defaults might be None\n+        @self.library.simple_tag\n+        def no_defaults(*, required_arg):\n+            return f'got {required_arg}'\n+\n+        # Register the tag\n+        self.library.tag('no_defaults', no_defaults)\n+\n+        # Test that required keyword-only arg works\n+        template = Template(\"{% load custom_tags %}{% no_defaults required_arg='value' %}\")\n+        context = Context({})\n+        \n+        result = template.render(context)\n+        self.assertEqual(result.strip(), 'got value')\n+\n+        # Test that missing required arg raises appropriate error\n+        with self.assertRaises(TemplateSyntaxError) as cm:\n+            Template(\"{% load custom_tags %}{% no_defaults %}\")\n+        \n+        self.assertIn(\"did not receive value(s) for the argument(s): 'required_arg'\", str(cm.exception))\n"
}