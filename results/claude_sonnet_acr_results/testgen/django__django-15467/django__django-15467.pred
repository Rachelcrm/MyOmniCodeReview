{
  "instance_id": "django__django-15467",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/admin_tests/test_radio_fields_empty_label.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.contrib import admin\nfrom django.contrib.admin.options import BaseModelAdmin\nfrom django.db import models\nfrom django.forms import ModelForm\nfrom django.test import TestCase, RequestFactory\nfrom django.contrib.auth.models import User\nfrom django.contrib.admin.sites import AdminSite\n\n\nclass TestModel(models.Model):\n    \"\"\"Test model with a ForeignKey field for testing radio_fields.\"\"\"\n    name = models.CharField(max_length=100)\n    \n    class Meta:\n        app_label = 'admin_tests'\n\n\nclass RelatedModel(models.Model):\n    \"\"\"Related model for ForeignKey testing.\"\"\"\n    title = models.CharField(max_length=100)\n    related = models.ForeignKey(TestModel, on_delete=models.CASCADE, blank=True, null=True)\n    \n    class Meta:\n        app_label = 'admin_tests'\n\n\nclass CustomEmptyLabelModelAdmin(admin.ModelAdmin):\n    \"\"\"ModelAdmin that sets custom empty_label for radio fields.\"\"\"\n    radio_fields = {'related': admin.VERTICAL}\n    \n    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n        if db_field.name == 'related':\n            kwargs['empty_label'] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n\n\nclass DefaultEmptyLabelModelAdmin(admin.ModelAdmin):\n    \"\"\"ModelAdmin that uses default empty_label for radio fields.\"\"\"\n    radio_fields = {'related': admin.VERTICAL}\n\n\nclass NoRadioFieldsModelAdmin(admin.ModelAdmin):\n    \"\"\"ModelAdmin without radio_fields to test normal behavior.\"\"\"\n    pass\n\n\nclass TestRadioFieldsEmptyLabel(TestCase):\n    \"\"\"Test suite for radio_fields empty_label override issue.\"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test environment.\"\"\"\n        self.factory = RequestFactory()\n        self.site = AdminSite()\n        self.request = self.factory.get('/')\n        self.request.user = User.objects.create_superuser(\n            'admin', 'admin@example.com', 'password'\n        )\n        \n        # Create test instances\n        self.test_obj = TestModel.objects.create(name='Test Object')\n        self.related_obj = RelatedModel.objects.create(\n            title='Related Object',\n            related=self.test_obj\n        )\n    \n    def test_custom_empty_label_preserved_with_radio_fields(self):\n        \"\"\"\n        Test that custom empty_label is preserved when radio_fields is defined.\n        This is the main bug being fixed - custom empty_label should not be overridden.\n        \"\"\"\n        admin_instance = CustomEmptyLabelModelAdmin(RelatedModel, self.site)\n        \n        # Get the form field for the ForeignKey with radio_fields\n        db_field = RelatedModel._meta.get_field('related')\n        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n        \n        # The custom empty_label should be preserved\n        self.assertEqual(formfield.empty_label, \"I WANT TO SET MY OWN EMPTY LABEL\")\n    \n    def test_default_empty_label_with_radio_fields_blank_true(self):\n        \"\"\"\n        Test that default empty_label is used when no custom one is provided\n        and the field allows blank values.\n        \"\"\"\n        admin_instance = DefaultEmptyLabelModelAdmin(RelatedModel, self.site)\n        \n        # Get the form field for the ForeignKey with radio_fields\n        db_field = RelatedModel._meta.get_field('related')\n        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n        \n        # Should use default \"None\" for blank=True fields\n        self.assertEqual(formfield.empty_label, \"None\")\n    \n    def test_no_empty_label_with_radio_fields_blank_false(self):\n        \"\"\"\n        Test that no empty_label is set when field doesn't allow blank values.\n        \"\"\"\n        # Create a model with blank=False ForeignKey for this test\n        class NonBlankRelatedModel(models.Model):\n            title = models.CharField(max_length=100)\n            related = models.ForeignKey(TestModel, on_delete=models.CASCADE, blank=False)\n            \n            class Meta:\n                app_label = 'admin_tests'\n        \n        class NonBlankModelAdmin(admin.ModelAdmin):\n            radio_fields = {'related': admin.VERTICAL}\n        \n        admin_instance = NonBlankModelAdmin(NonBlankRelatedModel, self.site)\n        \n        # Get the form field for the ForeignKey with radio_fields\n        db_field = NonBlankRelatedModel._meta.get_field('related')\n        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n        \n        # Should be None for blank=False fields\n        self.assertIsNone(formfield.empty_label)\n    \n    def test_no_radio_fields_preserves_normal_behavior(self):\n        \"\"\"\n        Test that fields not in radio_fields maintain normal behavior.\n        \"\"\"\n        admin_instance = NoRadioFieldsModelAdmin(RelatedModel, self.site)\n        \n        # Get the form field for the ForeignKey without radio_fields\n        db_field = RelatedModel._meta.get_field('related')\n        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n        \n        # Should use the default form field behavior (typically \"---------\")\n        self.assertEqual(formfield.empty_label, \"---------\")\n    \n    def test_custom_empty_label_with_none_value(self):\n        \"\"\"\n        Test that explicitly setting empty_label to None is preserved.\n        \"\"\"\n        class NoneEmptyLabelModelAdmin(admin.ModelAdmin):\n            radio_fields = {'related': admin.VERTICAL}\n            \n            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n                if db_field.name == 'related':\n                    kwargs['empty_label'] = None\n                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n        \n        admin_instance = NoneEmptyLabelModelAdmin(RelatedModel, self.site)\n        \n        # Get the form field for the ForeignKey with radio_fields\n        db_field = RelatedModel._meta.get_field('related')\n        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n        \n        # Should preserve the explicitly set None value\n        self.assertIsNone(formfield.empty_label)\n    \n    def test_custom_empty_label_with_empty_string(self):\n        \"\"\"\n        Test that explicitly setting empty_label to empty string is preserved.\n        \"\"\"\n        class EmptyStringLabelModelAdmin(admin.ModelAdmin):\n            radio_fields = {'related': admin.VERTICAL}\n            \n            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n                if db_field.name == 'related':\n                    kwargs['empty_label'] = \"\"\n                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n        \n        admin_instance = EmptyStringLabelModelAdmin(RelatedModel, self.site)\n        \n        # Get the form field for the ForeignKey with radio_fields\n        db_field = RelatedModel._meta.get_field('related')\n        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n        \n        # Should preserve the explicitly set empty string\n        self.assertEqual(formfield.empty_label, \"\")\n    \n    def test_widget_is_admin_radio_select_with_radio_fields(self):\n        \"\"\"\n        Test that the widget is correctly set to AdminRadioSelect when using radio_fields.\n        \"\"\"\n        admin_instance = CustomEmptyLabelModelAdmin(RelatedModel, self.site)\n        \n        # Get the form field for the ForeignKey with radio_fields\n        db_field = RelatedModel._meta.get_field('related')\n        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n        \n        # Should use AdminRadioSelect widget\n        from django.contrib.admin import widgets\n        self.assertIsInstance(formfield.widget, widgets.AdminRadioSelect)\n    \n    def test_multiple_fields_with_different_empty_labels(self):\n        \"\"\"\n        Test that multiple fields can have different custom empty labels.\n        \"\"\"\n        # Create a model with multiple ForeignKey fields\n        class MultiFieldModel(models.Model):\n            title = models.CharField(max_length=100)\n            related1 = models.ForeignKey(TestModel, on_delete=models.CASCADE, blank=True, null=True, related_name='multi1')\n            related2 = models.ForeignKey(TestModel, on_delete=models.CASCADE, blank=True, null=True, related_name='multi2')\n            \n            class Meta:\n                app_label = 'admin_tests'\n        \n        class MultiFieldModelAdmin(admin.ModelAdmin):\n            radio_fields = {'related1': admin.VERTICAL, 'related2': admin.HORIZONTAL}\n            \n            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n                if db_field.name == 'related1':\n                    kwargs['empty_label'] = \"Custom Label 1\"\n                elif db_field.name == 'related2':\n                    kwargs['empty_label'] = \"Custom Label 2\"\n                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n        \n        admin_instance = MultiFieldModelAdmin(MultiFieldModel, self.site)\n        \n        # Test first field\n        db_field1 = MultiFieldModel._meta.get_field('related1')\n        formfield1 = admin_instance.formfield_for_foreignkey(db_field1, self.request)\n        self.assertEqual(formfield1.empty_label, \"Custom Label 1\")\n        \n        # Test second field\n        db_field2 = MultiFieldModel._meta.get_field('related2')\n        formfield2 = admin_instance.formfield_for_foreignkey(db_field2, self.request)\n        self.assertEqual(formfield2.empty_label, \"Custom Label 2\")\n\n\nclass TestRadioFieldsEmptyLabelBugReproduction(TestCase):\n    \"\"\"\n    Test case that specifically reproduces the bug described in the issue.\n    This test should fail before the fix and pass after the fix.\n    \"\"\"\n    \n    def setUp(self):\n        \"\"\"Set up test environment.\"\"\"\n        self.factory = RequestFactory()\n        self.site = AdminSite()\n        self.request = self.factory.get('/')\n        self.request.user = User.objects.create_superuser(\n            'admin', 'admin@example.com', 'password'\n        )\n    \n    def test_bug_reproduction_custom_empty_label_overridden(self):\n        \"\"\"\n        This test reproduces the exact bug described in the issue.\n        Before the fix: This test should fail because custom empty_label is overridden.\n        After the fix: This test should pass because custom empty_label is preserved.\n        \"\"\"\n        # This is the exact example from the issue description\n        class MyModelAdmin(admin.ModelAdmin):\n            radio_fields = {'related': admin.VERTICAL}\n            \n            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n                if db_field.name == 'related':\n                    kwargs['empty_label'] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n        \n        admin_instance = MyModelAdmin(RelatedModel, self.site)\n        \n        # Get the form field for the ForeignKey with radio_fields\n        db_field = RelatedModel._meta.get_field('related')\n        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n        \n        # Before fix: This assertion would fail because the custom label gets overridden\n        # After fix: This assertion should pass because the custom label is preserved\n        self.assertEqual(\n            formfield.empty_label, \n            \"I WANT TO SET MY OWN EMPTY LABEL\",\n            \"Custom empty_label should be preserved and not overridden by default 'None'\"\n        )\n        \n        # Additional assertion to ensure it's not the default\n        self.assertNotEqual(\n            formfield.empty_label,\n            \"None\",\n            \"Custom empty_label should not be overridden with default 'None'\"\n        )\n</patched>\n</file>\n```",
  "patch": "--- a/tests/admin_tests/test_radio_fields_empty_label.py\n+++ b/tests/admin_tests/test_radio_fields_empty_label.py\n-# Empty if creating new file\n+import pytest\n+from django.contrib import admin\n+from django.contrib.admin.options import BaseModelAdmin\n+from django.db import models\n+from django.forms import ModelForm\n+from django.test import TestCase, RequestFactory\n+from django.contrib.auth.models import User\n+from django.contrib.admin.sites import AdminSite\n+\n+\n+class TestModel(models.Model):\n+    \"\"\"Test model with a ForeignKey field for testing radio_fields.\"\"\"\n+    name = models.CharField(max_length=100)\n+    \n+    class Meta:\n+        app_label = 'admin_tests'\n+\n+\n+class RelatedModel(models.Model):\n+    \"\"\"Related model for ForeignKey testing.\"\"\"\n+    title = models.CharField(max_length=100)\n+    related = models.ForeignKey(TestModel, on_delete=models.CASCADE, blank=True, null=True)\n+    \n+    class Meta:\n+        app_label = 'admin_tests'\n+\n+\n+class CustomEmptyLabelModelAdmin(admin.ModelAdmin):\n+    \"\"\"ModelAdmin that sets custom empty_label for radio fields.\"\"\"\n+    radio_fields = {'related': admin.VERTICAL}\n+    \n+    def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+        if db_field.name == 'related':\n+            kwargs['empty_label'] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n+        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+\n+\n+class DefaultEmptyLabelModelAdmin(admin.ModelAdmin):\n+    \"\"\"ModelAdmin that uses default empty_label for radio fields.\"\"\"\n+    radio_fields = {'related': admin.VERTICAL}\n+\n+\n+class NoRadioFieldsModelAdmin(admin.ModelAdmin):\n+    \"\"\"ModelAdmin without radio_fields to test normal behavior.\"\"\"\n+    pass\n+\n+\n+class TestRadioFieldsEmptyLabel(TestCase):\n+    \"\"\"Test suite for radio_fields empty_label override issue.\"\"\"\n+    \n+    def setUp(self):\n+        \"\"\"Set up test environment.\"\"\"\n+        self.factory = RequestFactory()\n+        self.site = AdminSite()\n+        self.request = self.factory.get('/')\n+        self.request.user = User.objects.create_superuser(\n+            'admin', 'admin@example.com', 'password'\n+        )\n+        \n+        # Create test instances\n+        self.test_obj = TestModel.objects.create(name='Test Object')\n+        self.related_obj = RelatedModel.objects.create(\n+            title='Related Object',\n+            related=self.test_obj\n+        )\n+    \n+    def test_custom_empty_label_preserved_with_radio_fields(self):\n+        \"\"\"\n+        Test that custom empty_label is preserved when radio_fields is defined.\n+        This is the main bug being fixed - custom empty_label should not be overridden.\n+        \"\"\"\n+        admin_instance = CustomEmptyLabelModelAdmin(RelatedModel, self.site)\n+        \n+        # Get the form field for the ForeignKey with radio_fields\n+        db_field = RelatedModel._meta.get_field('related')\n+        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n+        \n+        # The custom empty_label should be preserved\n+        self.assertEqual(formfield.empty_label, \"I WANT TO SET MY OWN EMPTY LABEL\")\n+    \n+    def test_default_empty_label_with_radio_fields_blank_true(self):\n+        \"\"\"\n+        Test that default empty_label is used when no custom one is provided\n+        and the field allows blank values.\n+        \"\"\"\n+        admin_instance = DefaultEmptyLabelModelAdmin(RelatedModel, self.site)\n+        \n+        # Get the form field for the ForeignKey with radio_fields\n+        db_field = RelatedModel._meta.get_field('related')\n+        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n+        \n+        # Should use default \"None\" for blank=True fields\n+        self.assertEqual(formfield.empty_label, \"None\")\n+    \n+    def test_no_empty_label_with_radio_fields_blank_false(self):\n+        \"\"\"\n+        Test that no empty_label is set when field doesn't allow blank values.\n+        \"\"\"\n+        # Create a model with blank=False ForeignKey for this test\n+        class NonBlankRelatedModel(models.Model):\n+            title = models.CharField(max_length=100)\n+            related = models.ForeignKey(TestModel, on_delete=models.CASCADE, blank=False)\n+            \n+            class Meta:\n+                app_label = 'admin_tests'\n+        \n+        class NonBlankModelAdmin(admin.ModelAdmin):\n+            radio_fields = {'related': admin.VERTICAL}\n+        \n+        admin_instance = NonBlankModelAdmin(NonBlankRelatedModel, self.site)\n+        \n+        # Get the form field for the ForeignKey with radio_fields\n+        db_field = NonBlankRelatedModel._meta.get_field('related')\n+        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n+        \n+        # Should be None for blank=False fields\n+        self.assertIsNone(formfield.empty_label)\n+    \n+    def test_no_radio_fields_preserves_normal_behavior(self):\n+        \"\"\"\n+        Test that fields not in radio_fields maintain normal behavior.\n+        \"\"\"\n+        admin_instance = NoRadioFieldsModelAdmin(RelatedModel, self.site)\n+        \n+        # Get the form field for the ForeignKey without radio_fields\n+        db_field = RelatedModel._meta.get_field('related')\n+        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n+        \n+        # Should use the default form field behavior (typically \"---------\")\n+        self.assertEqual(formfield.empty_label, \"---------\")\n+    \n+    def test_custom_empty_label_with_none_value(self):\n+        \"\"\"\n+        Test that explicitly setting empty_label to None is preserved.\n+        \"\"\"\n+        class NoneEmptyLabelModelAdmin(admin.ModelAdmin):\n+            radio_fields = {'related': admin.VERTICAL}\n+            \n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == 'related':\n+                    kwargs['empty_label'] = None\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+        \n+        admin_instance = NoneEmptyLabelModelAdmin(RelatedModel, self.site)\n+        \n+        # Get the form field for the ForeignKey with radio_fields\n+        db_field = RelatedModel._meta.get_field('related')\n+        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n+        \n+        # Should preserve the explicitly set None value\n+        self.assertIsNone(formfield.empty_label)\n+    \n+    def test_custom_empty_label_with_empty_string(self):\n+        \"\"\"\n+        Test that explicitly setting empty_label to empty string is preserved.\n+        \"\"\"\n+        class EmptyStringLabelModelAdmin(admin.ModelAdmin):\n+            radio_fields = {'related': admin.VERTICAL}\n+            \n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == 'related':\n+                    kwargs['empty_label'] = \"\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+        \n+        admin_instance = EmptyStringLabelModelAdmin(RelatedModel, self.site)\n+        \n+        # Get the form field for the ForeignKey with radio_fields\n+        db_field = RelatedModel._meta.get_field('related')\n+        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n+        \n+        # Should preserve the explicitly set empty string\n+        self.assertEqual(formfield.empty_label, \"\")\n+    \n+    def test_widget_is_admin_radio_select_with_radio_fields(self):\n+        \"\"\"\n+        Test that the widget is correctly set to AdminRadioSelect when using radio_fields.\n+        \"\"\"\n+        admin_instance = CustomEmptyLabelModelAdmin(RelatedModel, self.site)\n+        \n+        # Get the form field for the ForeignKey with radio_fields\n+        db_field = RelatedModel._meta.get_field('related')\n+        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n+        \n+        # Should use AdminRadioSelect widget\n+        from django.contrib.admin import widgets\n+        self.assertIsInstance(formfield.widget, widgets.AdminRadioSelect)\n+    \n+    def test_multiple_fields_with_different_empty_labels(self):\n+        \"\"\"\n+        Test that multiple fields can have different custom empty labels.\n+        \"\"\"\n+        # Create a model with multiple ForeignKey fields\n+        class MultiFieldModel(models.Model):\n+            title = models.CharField(max_length=100)\n+            related1 = models.ForeignKey(TestModel, on_delete=models.CASCADE, blank=True, null=True, related_name='multi1')\n+            related2 = models.ForeignKey(TestModel, on_delete=models.CASCADE, blank=True, null=True, related_name='multi2')\n+            \n+            class Meta:\n+                app_label = 'admin_tests'\n+        \n+        class MultiFieldModelAdmin(admin.ModelAdmin):\n+            radio_fields = {'related1': admin.VERTICAL, 'related2': admin.HORIZONTAL}\n+            \n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == 'related1':\n+                    kwargs['empty_label'] = \"Custom Label 1\"\n+                elif db_field.name == 'related2':\n+                    kwargs['empty_label'] = \"Custom Label 2\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+        \n+        admin_instance = MultiFieldModelAdmin(MultiFieldModel, self.site)\n+        \n+        # Test first field\n+        db_field1 = MultiFieldModel._meta.get_field('related1')\n+        formfield1 = admin_instance.formfield_for_foreignkey(db_field1, self.request)\n+        self.assertEqual(formfield1.empty_label, \"Custom Label 1\")\n+        \n+        # Test second field\n+        db_field2 = MultiFieldModel._meta.get_field('related2')\n+        formfield2 = admin_instance.formfield_for_foreignkey(db_field2, self.request)\n+        self.assertEqual(formfield2.empty_label, \"Custom Label 2\")\n+\n+\n+class TestRadioFieldsEmptyLabelBugReproduction(TestCase):\n+    \"\"\"\n+    Test case that specifically reproduces the bug described in the issue.\n+    This test should fail before the fix and pass after the fix.\n+    \"\"\"\n+    \n+    def setUp(self):\n+        \"\"\"Set up test environment.\"\"\"\n+        self.factory = RequestFactory()\n+        self.site = AdminSite()\n+        self.request = self.factory.get('/')\n+        self.request.user = User.objects.create_superuser(\n+            'admin', 'admin@example.com', 'password'\n+        )\n+    \n+    def test_bug_reproduction_custom_empty_label_overridden(self):\n+        \"\"\"\n+        This test reproduces the exact bug described in the issue.\n+        Before the fix: This test should fail because custom empty_label is overridden.\n+        After the fix: This test should pass because custom empty_label is preserved.\n+        \"\"\"\n+        # This is the exact example from the issue description\n+        class MyModelAdmin(admin.ModelAdmin):\n+            radio_fields = {'related': admin.VERTICAL}\n+            \n+            def formfield_for_foreignkey(self, db_field, request, **kwargs):\n+                if db_field.name == 'related':\n+                    kwargs['empty_label'] = \"I WANT TO SET MY OWN EMPTY LABEL\"\n+                return super().formfield_for_foreignkey(db_field, request, **kwargs)\n+        \n+        admin_instance = MyModelAdmin(RelatedModel, self.site)\n+        \n+        # Get the form field for the ForeignKey with radio_fields\n+        db_field = RelatedModel._meta.get_field('related')\n+        formfield = admin_instance.formfield_for_foreignkey(db_field, self.request)\n+        \n+        # Before fix: This assertion would fail because the custom label gets overridden\n+        # After fix: This assertion should pass because the custom label is preserved\n+        self.assertEqual(\n+            formfield.empty_label, \n+            \"I WANT TO SET MY OWN EMPTY LABEL\",\n+            \"Custom empty_label should be preserved and not overridden by default 'None'\"\n+        )\n+        \n+        # Additional assertion to ensure it's not the default\n+        self.assertNotEqual(\n+            formfield.empty_label,\n+            \"None\",\n+            \"Custom empty_label should not be overridden with default 'None'\"\n+        )\n"
}