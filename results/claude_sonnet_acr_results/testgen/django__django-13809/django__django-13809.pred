{
  "instance_id": "django__django-13809",
  "model": "openrouter/anthropic/claude-sonnet-4",
  "response": "```\n<file>tests/management/commands/test_runserver.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nimport sys\nfrom io import StringIO\nfrom unittest import mock\n\nfrom django.core.management import call_command\nfrom django.core.management.base import CommandError\nfrom django.core.management.commands.runserver import Command as RunserverCommand\nfrom django.test import TestCase, override_settings\n\n\nclass RunserverSkipChecksTests(TestCase):\n    \"\"\"Test suite for the --skip-checks option in runserver command.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.command = RunserverCommand()\n        self.stdout = StringIO()\n        self.stderr = StringIO()\n\n    def test_runserver_has_requires_system_checks_enabled(self):\n        \"\"\"Test that runserver command has system checks enabled by default.\"\"\"\n        # Before the fix, requires_system_checks was []\n        # After the fix, it should be a non-empty list to enable system checks\n        self.assertNotEqual(self.command.requires_system_checks, [])\n        self.assertTrue(self.command.requires_system_checks)\n\n    def test_runserver_skip_checks_option_available(self):\n        \"\"\"Test that --skip-checks option is available in runserver command.\"\"\"\n        parser = self.command.create_parser('manage.py', 'runserver')\n        \n        # Check that --skip-checks is in the help text\n        help_text = parser.format_help()\n        self.assertIn('--skip-checks', help_text)\n        self.assertIn('Skip system checks', help_text)\n\n    @mock.patch('django.core.management.commands.runserver.Command.run')\n    @mock.patch('django.core.management.base.BaseCommand.check')\n    def test_runserver_runs_system_checks_by_default(self, mock_check, mock_run):\n        \"\"\"Test that system checks are run by default when starting runserver.\"\"\"\n        # Mock the run method to prevent actual server startup\n        mock_run.return_value = None\n        \n        # Call runserver without --skip-checks\n        call_command('runserver', '--noreload', stdout=self.stdout, stderr=self.stderr)\n        \n        # Verify that system checks were called\n        mock_check.assert_called_once()\n\n    @mock.patch('django.core.management.commands.runserver.Command.run')\n    @mock.patch('django.core.management.base.BaseCommand.check')\n    def test_runserver_skips_checks_with_skip_checks_option(self, mock_check, mock_run):\n        \"\"\"Test that system checks are skipped when --skip-checks is used.\"\"\"\n        # Mock the run method to prevent actual server startup\n        mock_run.return_value = None\n        \n        # Call runserver with --skip-checks\n        call_command('runserver', '--skip-checks', '--noreload', stdout=self.stdout, stderr=self.stderr)\n        \n        # Verify that system checks were NOT called\n        mock_check.assert_not_called()\n\n    def test_runserver_skip_checks_option_parsing(self):\n        \"\"\"Test that --skip-checks option is properly parsed.\"\"\"\n        parser = self.command.create_parser('manage.py', 'runserver')\n        \n        # Test parsing with --skip-checks\n        options = parser.parse_args(['--skip-checks', '--noreload'])\n        self.assertTrue(options.skip_checks)\n        \n        # Test parsing without --skip-checks\n        options = parser.parse_args(['--noreload'])\n        self.assertFalse(options.skip_checks)\n\n    @mock.patch('django.core.management.commands.runserver.Command.run')\n    @mock.patch('django.core.management.base.BaseCommand.check')\n    def test_runserver_skip_checks_with_address_and_port(self, mock_check, mock_run):\n        \"\"\"Test that --skip-checks works with address and port arguments.\"\"\"\n        # Mock the run method to prevent actual server startup\n        mock_run.return_value = None\n        \n        # Call runserver with --skip-checks and address:port\n        call_command('runserver', '127.0.0.1:8080', '--skip-checks', '--noreload', \n                    stdout=self.stdout, stderr=self.stderr)\n        \n        # Verify that system checks were NOT called\n        mock_check.assert_not_called()\n\n    @mock.patch('django.core.management.commands.runserver.Command.run')\n    @mock.patch('django.core.management.base.BaseCommand.check')\n    def test_runserver_skip_checks_with_other_options(self, mock_check, mock_run):\n        \"\"\"Test that --skip-checks works with other runserver options.\"\"\"\n        # Mock the run method to prevent actual server startup\n        mock_run.return_value = None\n        \n        # Call runserver with --skip-checks and other options\n        call_command('runserver', '--skip-checks', '--noreload', '--nothreading',\n                    stdout=self.stdout, stderr=self.stderr)\n        \n        # Verify that system checks were NOT called\n        mock_check.assert_not_called()\n\n    def test_runserver_command_consistency_with_other_commands(self):\n        \"\"\"Test that runserver is consistent with other commands that support --skip-checks.\"\"\"\n        from django.core.management.commands.migrate import Command as MigrateCommand\n        \n        migrate_command = MigrateCommand()\n        runserver_command = RunserverCommand()\n        \n        # Both commands should have requires_system_checks enabled\n        self.assertTrue(migrate_command.requires_system_checks)\n        self.assertTrue(runserver_command.requires_system_checks)\n        \n        # Both should support --skip-checks option\n        migrate_parser = migrate_command.create_parser('manage.py', 'migrate')\n        runserver_parser = runserver_command.create_parser('manage.py', 'runserver')\n        \n        migrate_help = migrate_parser.format_help()\n        runserver_help = runserver_parser.format_help()\n        \n        self.assertIn('--skip-checks', migrate_help)\n        self.assertIn('--skip-checks', runserver_help)\n\n    @mock.patch('django.core.management.commands.runserver.Command.run')\n    def test_runserver_preserves_existing_functionality(self, mock_run):\n        \"\"\"Test that existing runserver functionality is preserved.\"\"\"\n        # Mock the run method to prevent actual server startup\n        mock_run.return_value = None\n        \n        # Test that runserver still works with existing options\n        call_command('runserver', '--noreload', '--skip-checks', \n                    stdout=self.stdout, stderr=self.stderr)\n        \n        # Verify run was called (server would start)\n        mock_run.assert_called_once()\n\n    @mock.patch('django.core.management.commands.runserver.Command.run')\n    @mock.patch('django.core.management.base.BaseCommand.check')\n    def test_runserver_check_failure_behavior(self, mock_check, mock_run):\n        \"\"\"Test behavior when system checks fail and --skip-checks is not used.\"\"\"\n        from django.core.management.base import SystemCheckError\n        \n        # Mock check to raise SystemCheckError\n        mock_check.side_effect = SystemCheckError('Test check failure')\n        mock_run.return_value = None\n        \n        # Verify that SystemCheckError is raised when checks fail\n        with self.assertRaises(SystemCheckError):\n            call_command('runserver', '--noreload', stdout=self.stdout, stderr=self.stderr)\n        \n        # Verify that run was NOT called (server should not start)\n        mock_run.assert_not_called()\n\n    @mock.patch('django.core.management.commands.runserver.Command.run')\n    @mock.patch('django.core.management.base.BaseCommand.check')\n    def test_runserver_skip_checks_bypasses_check_failures(self, mock_check, mock_run):\n        \"\"\"Test that --skip-checks bypasses system check failures.\"\"\"\n        from django.core.management.base import SystemCheckError\n        \n        # Mock check to raise SystemCheckError (but it shouldn't be called)\n        mock_check.side_effect = SystemCheckError('Test check failure')\n        mock_run.return_value = None\n        \n        # With --skip-checks, no exception should be raised\n        call_command('runserver', '--skip-checks', '--noreload', \n                    stdout=self.stdout, stderr=self.stderr)\n        \n        # Verify that check was NOT called\n        mock_check.assert_not_called()\n        # Verify that run WAS called (server should start)\n        mock_run.assert_called_once()\n\n    def test_runserver_help_text_includes_skip_checks(self):\n        \"\"\"Test that runserver help text includes --skip-checks option.\"\"\"\n        parser = self.command.create_parser('manage.py', 'runserver')\n        help_text = parser.format_help()\n        \n        # Verify --skip-checks is documented\n        self.assertIn('--skip-checks', help_text)\n        self.assertIn('Skip system checks', help_text)\n        \n        # Verify other existing options are still there\n        self.assertIn('--noreload', help_text)\n        self.assertIn('--nothreading', help_text)\n        self.assertIn('--ipv6', help_text)\n</patched>\n</file>\n```\n\n```\n<file>tests/management/commands/test_runserver_staticfiles.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom io import StringIO\nfrom unittest import mock\n\nfrom django.contrib.staticfiles.management.commands.runserver import Command as StaticFilesRunserverCommand\nfrom django.core.management import call_command\nfrom django.test import TestCase\n\n\nclass StaticFilesRunserverSkipChecksTests(TestCase):\n    \"\"\"Test suite for the --skip-checks option in staticfiles runserver command.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.command = StaticFilesRunserverCommand()\n        self.stdout = StringIO()\n        self.stderr = StringIO()\n\n    def test_staticfiles_runserver_inherits_skip_checks_functionality(self):\n        \"\"\"Test that staticfiles runserver inherits --skip-checks from base runserver.\"\"\"\n        # The staticfiles runserver inherits from the core runserver command\n        # so it should automatically get the --skip-checks functionality\n        \n        # Check that it has system checks enabled (inherited from parent)\n        self.assertTrue(self.command.requires_system_checks)\n\n    def test_staticfiles_runserver_skip_checks_option_available(self):\n        \"\"\"Test that --skip-checks option is available in staticfiles runserver command.\"\"\"\n        parser = self.command.create_parser('manage.py', 'runserver')\n        \n        # Check that --skip-checks is in the help text\n        help_text = parser.format_help()\n        self.assertIn('--skip-checks', help_text)\n        self.assertIn('Skip system checks', help_text)\n\n    @mock.patch('django.contrib.staticfiles.management.commands.runserver.Command.run')\n    @mock.patch('django.core.management.base.BaseCommand.check')\n    def test_staticfiles_runserver_runs_system_checks_by_default(self, mock_check, mock_run):\n        \"\"\"Test that system checks are run by default in staticfiles runserver.\"\"\"\n        # Mock the run method to prevent actual server startup\n        mock_run.return_value = None\n        \n        # Call runserver without --skip-checks\n        call_command('runserver', '--noreload', stdout=self.stdout, stderr=self.stderr)\n        \n        # Verify that system checks were called\n        mock_check.assert_called_once()\n\n    @mock.patch('django.contrib.staticfiles.management.commands.runserver.Command.run')\n    @mock.patch('django.core.management.base.BaseCommand.check')\n    def test_staticfiles_runserver_skips_checks_with_skip_checks_option(self, mock_check, mock_run):\n        \"\"\"Test that system checks are skipped when --skip-checks is used in staticfiles runserver.\"\"\"\n        # Mock the run method to prevent actual server startup\n        mock_run.return_value = None\n        \n        # Call runserver with --skip-checks\n        call_command('runserver', '--skip-checks', '--noreload', stdout=self.stdout, stderr=self.stderr)\n        \n        # Verify that system checks were NOT called\n        mock_check.assert_not_called()\n\n    @mock.patch('django.contrib.staticfiles.management.commands.runserver.Command.run')\n    @mock.patch('django.core.management.base.BaseCommand.check')\n    def test_staticfiles_runserver_skip_checks_with_staticfiles_options(self, mock_check, mock_run):\n        \"\"\"Test that --skip-checks works with staticfiles-specific options.\"\"\"\n        # Mock the run method to prevent actual server startup\n        mock_run.return_value = None\n        \n        # Call runserver with --skip-checks and staticfiles options\n        call_command('runserver', '--skip-checks', '--nostatic', '--noreload',\n                    stdout=self.stdout, stderr=self.stderr)\n        \n        # Verify that system checks were NOT called\n        mock_check.assert_not_called()\n\n    def test_staticfiles_runserver_option_parsing_with_skip_checks(self):\n        \"\"\"Test that --skip-checks option is properly parsed with other staticfiles options.\"\"\"\n        parser = self.command.create_parser('manage.py', 'runserver')\n        \n        # Test parsing with --skip-checks and staticfiles options\n        options = parser.parse_args(['--skip-checks', '--nostatic', '--noreload'])\n        self.assertTrue(options.skip_checks)\n        self.assertFalse(options.use_static_handler)\n        \n        # Test parsing with --skip-checks and --insecure\n        options = parser.parse_args(['--skip-checks', '--insecure', '--noreload'])\n        self.assertTrue(options.skip_checks)\n        self.assertTrue(options.insecure_serving)\n\n    def test_staticfiles_runserver_help_includes_all_options(self):\n        \"\"\"Test that staticfiles runserver help includes both --skip-checks and staticfiles options.\"\"\"\n        parser = self.command.create_parser('manage.py', 'runserver')\n        help_text = parser.format_help()\n        \n        # Verify --skip-checks is documented\n        self.assertIn('--skip-checks', help_text)\n        self.assertIn('Skip system checks', help_text)\n        \n        # Verify staticfiles options are still there\n        self.assertIn('--nostatic', help_text)\n        self.assertIn('--insecure', help_text)\n        \n        # Verify core runserver options are still there\n        self.assertIn('--noreload', help_text)\n        self.assertIn('--nothreading', help_text)\n</patched>\n</file>\n```\n\n```\n<file>tests/management/test_runserver_integration.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nimport subprocess\nimport sys\nimport tempfile\nimport os\nfrom unittest import mock\n\nfrom django.test import TestCase, override_settings\nfrom django.core.management import call_command\nfrom django.core.management.base import SystemCheckError\nfrom io import StringIO\n\n\nclass RunserverIntegrationTests(TestCase):\n    \"\"\"Integration tests for runserver --skip-checks functionality.\"\"\"\n\n    def setUp(self):\n        \"\"\"Set up test fixtures.\"\"\"\n        self.stdout = StringIO()\n        self.stderr = StringIO()\n\n    @mock.patch('django.core.management.commands.runserver.Command.run')\n    def test_runserver_integration_with_real_checks(self, mock_run):\n        \"\"\"Test runserver integration with real system checks.\"\"\"\n        # Mock the run method to prevent actual server startup\n        mock_run.return_value = None\n        \n        # This should run real system checks (not mocked)\n        try:\n            call_command('runserver', '--noreload', stdout=self.stdout, stderr=self.stderr)\n            # If we get here, checks passed\n            checks_passed = True\n        except SystemCheckError:\n            # If checks failed, that's also a valid test outcome",
  "patch": "--- a/tests/management/commands/test_runserver.py\n+++ b/tests/management/commands/test_runserver.py\n-# Empty if creating new file\n+import pytest\n+import sys\n+from io import StringIO\n+from unittest import mock\n+\n+from django.core.management import call_command\n+from django.core.management.base import CommandError\n+from django.core.management.commands.runserver import Command as RunserverCommand\n+from django.test import TestCase, override_settings\n+\n+\n+class RunserverSkipChecksTests(TestCase):\n+    \"\"\"Test suite for the --skip-checks option in runserver command.\"\"\"\n+\n+    def setUp(self):\n+        \"\"\"Set up test fixtures.\"\"\"\n+        self.command = RunserverCommand()\n+        self.stdout = StringIO()\n+        self.stderr = StringIO()\n+\n+    def test_runserver_has_requires_system_checks_enabled(self):\n+        \"\"\"Test that runserver command has system checks enabled by default.\"\"\"\n+        # Before the fix, requires_system_checks was []\n+        # After the fix, it should be a non-empty list to enable system checks\n+        self.assertNotEqual(self.command.requires_system_checks, [])\n+        self.assertTrue(self.command.requires_system_checks)\n+\n+    def test_runserver_skip_checks_option_available(self):\n+        \"\"\"Test that --skip-checks option is available in runserver command.\"\"\"\n+        parser = self.command.create_parser('manage.py', 'runserver')\n+        \n+        # Check that --skip-checks is in the help text\n+        help_text = parser.format_help()\n+        self.assertIn('--skip-checks', help_text)\n+        self.assertIn('Skip system checks', help_text)\n+\n+    @mock.patch('django.core.management.commands.runserver.Command.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_runs_system_checks_by_default(self, mock_check, mock_run):\n+        \"\"\"Test that system checks are run by default when starting runserver.\"\"\"\n+        # Mock the run method to prevent actual server startup\n+        mock_run.return_value = None\n+        \n+        # Call runserver without --skip-checks\n+        call_command('runserver', '--noreload', stdout=self.stdout, stderr=self.stderr)\n+        \n+        # Verify that system checks were called\n+        mock_check.assert_called_once()\n+\n+    @mock.patch('django.core.management.commands.runserver.Command.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_skips_checks_with_skip_checks_option(self, mock_check, mock_run):\n+        \"\"\"Test that system checks are skipped when --skip-checks is used.\"\"\"\n+        # Mock the run method to prevent actual server startup\n+        mock_run.return_value = None\n+        \n+        # Call runserver with --skip-checks\n+        call_command('runserver', '--skip-checks', '--noreload', stdout=self.stdout, stderr=self.stderr)\n+        \n+        # Verify that system checks were NOT called\n+        mock_check.assert_not_called()\n+\n+    def test_runserver_skip_checks_option_parsing(self):\n+        \"\"\"Test that --skip-checks option is properly parsed.\"\"\"\n+        parser = self.command.create_parser('manage.py', 'runserver')\n+        \n+        # Test parsing with --skip-checks\n+        options = parser.parse_args(['--skip-checks', '--noreload'])\n+        self.assertTrue(options.skip_checks)\n+        \n+        # Test parsing without --skip-checks\n+        options = parser.parse_args(['--noreload'])\n+        self.assertFalse(options.skip_checks)\n+\n+    @mock.patch('django.core.management.commands.runserver.Command.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_skip_checks_with_address_and_port(self, mock_check, mock_run):\n+        \"\"\"Test that --skip-checks works with address and port arguments.\"\"\"\n+        # Mock the run method to prevent actual server startup\n+        mock_run.return_value = None\n+        \n+        # Call runserver with --skip-checks and address:port\n+        call_command('runserver', '127.0.0.1:8080', '--skip-checks', '--noreload', \n+                    stdout=self.stdout, stderr=self.stderr)\n+        \n+        # Verify that system checks were NOT called\n+        mock_check.assert_not_called()\n+\n+    @mock.patch('django.core.management.commands.runserver.Command.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_skip_checks_with_other_options(self, mock_check, mock_run):\n+        \"\"\"Test that --skip-checks works with other runserver options.\"\"\"\n+        # Mock the run method to prevent actual server startup\n+        mock_run.return_value = None\n+        \n+        # Call runserver with --skip-checks and other options\n+        call_command('runserver', '--skip-checks', '--noreload', '--nothreading',\n+                    stdout=self.stdout, stderr=self.stderr)\n+        \n+        # Verify that system checks were NOT called\n+        mock_check.assert_not_called()\n+\n+    def test_runserver_command_consistency_with_other_commands(self):\n+        \"\"\"Test that runserver is consistent with other commands that support --skip-checks.\"\"\"\n+        from django.core.management.commands.migrate import Command as MigrateCommand\n+        \n+        migrate_command = MigrateCommand()\n+        runserver_command = RunserverCommand()\n+        \n+        # Both commands should have requires_system_checks enabled\n+        self.assertTrue(migrate_command.requires_system_checks)\n+        self.assertTrue(runserver_command.requires_system_checks)\n+        \n+        # Both should support --skip-checks option\n+        migrate_parser = migrate_command.create_parser('manage.py', 'migrate')\n+        runserver_parser = runserver_command.create_parser('manage.py', 'runserver')\n+        \n+        migrate_help = migrate_parser.format_help()\n+        runserver_help = runserver_parser.format_help()\n+        \n+        self.assertIn('--skip-checks', migrate_help)\n+        self.assertIn('--skip-checks', runserver_help)\n+\n+    @mock.patch('django.core.management.commands.runserver.Command.run')\n+    def test_runserver_preserves_existing_functionality(self, mock_run):\n+        \"\"\"Test that existing runserver functionality is preserved.\"\"\"\n+        # Mock the run method to prevent actual server startup\n+        mock_run.return_value = None\n+        \n+        # Test that runserver still works with existing options\n+        call_command('runserver', '--noreload', '--skip-checks', \n+                    stdout=self.stdout, stderr=self.stderr)\n+        \n+        # Verify run was called (server would start)\n+        mock_run.assert_called_once()\n+\n+    @mock.patch('django.core.management.commands.runserver.Command.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_check_failure_behavior(self, mock_check, mock_run):\n+        \"\"\"Test behavior when system checks fail and --skip-checks is not used.\"\"\"\n+        from django.core.management.base import SystemCheckError\n+        \n+        # Mock check to raise SystemCheckError\n+        mock_check.side_effect = SystemCheckError('Test check failure')\n+        mock_run.return_value = None\n+        \n+        # Verify that SystemCheckError is raised when checks fail\n+        with self.assertRaises(SystemCheckError):\n+            call_command('runserver', '--noreload', stdout=self.stdout, stderr=self.stderr)\n+        \n+        # Verify that run was NOT called (server should not start)\n+        mock_run.assert_not_called()\n+\n+    @mock.patch('django.core.management.commands.runserver.Command.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_runserver_skip_checks_bypasses_check_failures(self, mock_check, mock_run):\n+        \"\"\"Test that --skip-checks bypasses system check failures.\"\"\"\n+        from django.core.management.base import SystemCheckError\n+        \n+        # Mock check to raise SystemCheckError (but it shouldn't be called)\n+        mock_check.side_effect = SystemCheckError('Test check failure')\n+        mock_run.return_value = None\n+        \n+        # With --skip-checks, no exception should be raised\n+        call_command('runserver', '--skip-checks', '--noreload', \n+                    stdout=self.stdout, stderr=self.stderr)\n+        \n+        # Verify that check was NOT called\n+        mock_check.assert_not_called()\n+        # Verify that run WAS called (server should start)\n+        mock_run.assert_called_once()\n+\n+    def test_runserver_help_text_includes_skip_checks(self):\n+        \"\"\"Test that runserver help text includes --skip-checks option.\"\"\"\n+        parser = self.command.create_parser('manage.py', 'runserver')\n+        help_text = parser.format_help()\n+        \n+        # Verify --skip-checks is documented\n+        self.assertIn('--skip-checks', help_text)\n+        self.assertIn('Skip system checks', help_text)\n+        \n+        # Verify other existing options are still there\n+        self.assertIn('--noreload', help_text)\n+        self.assertIn('--nothreading', help_text)\n+        self.assertIn('--ipv6', help_text)\n\n--- a/tests/management/commands/test_runserver_staticfiles.py\n+++ b/tests/management/commands/test_runserver_staticfiles.py\n-# Empty if creating new file\n+import pytest\n+from io import StringIO\n+from unittest import mock\n+\n+from django.contrib.staticfiles.management.commands.runserver import Command as StaticFilesRunserverCommand\n+from django.core.management import call_command\n+from django.test import TestCase\n+\n+\n+class StaticFilesRunserverSkipChecksTests(TestCase):\n+    \"\"\"Test suite for the --skip-checks option in staticfiles runserver command.\"\"\"\n+\n+    def setUp(self):\n+        \"\"\"Set up test fixtures.\"\"\"\n+        self.command = StaticFilesRunserverCommand()\n+        self.stdout = StringIO()\n+        self.stderr = StringIO()\n+\n+    def test_staticfiles_runserver_inherits_skip_checks_functionality(self):\n+        \"\"\"Test that staticfiles runserver inherits --skip-checks from base runserver.\"\"\"\n+        # The staticfiles runserver inherits from the core runserver command\n+        # so it should automatically get the --skip-checks functionality\n+        \n+        # Check that it has system checks enabled (inherited from parent)\n+        self.assertTrue(self.command.requires_system_checks)\n+\n+    def test_staticfiles_runserver_skip_checks_option_available(self):\n+        \"\"\"Test that --skip-checks option is available in staticfiles runserver command.\"\"\"\n+        parser = self.command.create_parser('manage.py', 'runserver')\n+        \n+        # Check that --skip-checks is in the help text\n+        help_text = parser.format_help()\n+        self.assertIn('--skip-checks', help_text)\n+        self.assertIn('Skip system checks', help_text)\n+\n+    @mock.patch('django.contrib.staticfiles.management.commands.runserver.Command.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_staticfiles_runserver_runs_system_checks_by_default(self, mock_check, mock_run):\n+        \"\"\"Test that system checks are run by default in staticfiles runserver.\"\"\"\n+        # Mock the run method to prevent actual server startup\n+        mock_run.return_value = None\n+        \n+        # Call runserver without --skip-checks\n+        call_command('runserver', '--noreload', stdout=self.stdout, stderr=self.stderr)\n+        \n+        # Verify that system checks were called\n+        mock_check.assert_called_once()\n+\n+    @mock.patch('django.contrib.staticfiles.management.commands.runserver.Command.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_staticfiles_runserver_skips_checks_with_skip_checks_option(self, mock_check, mock_run):\n+        \"\"\"Test that system checks are skipped when --skip-checks is used in staticfiles runserver.\"\"\"\n+        # Mock the run method to prevent actual server startup\n+        mock_run.return_value = None\n+        \n+        # Call runserver with --skip-checks\n+        call_command('runserver', '--skip-checks', '--noreload', stdout=self.stdout, stderr=self.stderr)\n+        \n+        # Verify that system checks were NOT called\n+        mock_check.assert_not_called()\n+\n+    @mock.patch('django.contrib.staticfiles.management.commands.runserver.Command.run')\n+    @mock.patch('django.core.management.base.BaseCommand.check')\n+    def test_staticfiles_runserver_skip_checks_with_staticfiles_options(self, mock_check, mock_run):\n+        \"\"\"Test that --skip-checks works with staticfiles-specific options.\"\"\"\n+        # Mock the run method to prevent actual server startup\n+        mock_run.return_value = None\n+        \n+        # Call runserver with --skip-checks and staticfiles options\n+        call_command('runserver', '--skip-checks', '--nostatic', '--noreload',\n+                    stdout=self.stdout, stderr=self.stderr)\n+        \n+        # Verify that system checks were NOT called\n+        mock_check.assert_not_called()\n+\n+    def test_staticfiles_runserver_option_parsing_with_skip_checks(self):\n+        \"\"\"Test that --skip-checks option is properly parsed with other staticfiles options.\"\"\"\n+        parser = self.command.create_parser('manage.py', 'runserver')\n+        \n+        # Test parsing with --skip-checks and staticfiles options\n+        options = parser.parse_args(['--skip-checks', '--nostatic', '--noreload'])\n+        self.assertTrue(options.skip_checks)\n+        self.assertFalse(options.use_static_handler)\n+        \n+        # Test parsing with --skip-checks and --insecure\n+        options = parser.parse_args(['--skip-checks', '--insecure', '--noreload'])\n+        self.assertTrue(options.skip_checks)\n+        self.assertTrue(options.insecure_serving)\n+\n+    def test_staticfiles_runserver_help_includes_all_options(self):\n+        \"\"\"Test that staticfiles runserver help includes both --skip-checks and staticfiles options.\"\"\"\n+        parser = self.command.create_parser('manage.py', 'runserver')\n+        help_text = parser.format_help()\n+        \n+        # Verify --skip-checks is documented\n+        self.assertIn('--skip-checks', help_text)\n+        self.assertIn('Skip system checks', help_text)\n+        \n+        # Verify staticfiles options are still there\n+        self.assertIn('--nostatic', help_text)\n+        self.assertIn('--insecure', help_text)\n+        \n+        # Verify core runserver options are still there\n+        self.assertIn('--noreload', help_text)\n+        self.assertIn('--nothreading', help_text)\n"
}