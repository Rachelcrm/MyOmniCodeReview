{
  "patch": "diff --git a/camel/loaders/firecrawl_reader.py b/camel/loaders/firecrawl_reader.py\nindex 27b02019..3e9da7d5 100644\n--- a/camel/loaders/firecrawl_reader.py\n+++ b/camel/loaders/firecrawl_reader.py\n@@ -96,10 +96,18 @@ class Firecrawl:\n                 url,\n                 {'formats': ['markdown']},\n             )\n-            if not isinstance(crawl_result, list):\n+            \n+            # Handle new API response format with \"data\" key\n+            if isinstance(crawl_result, dict) and 'data' in crawl_result:\n+                data_list = crawl_result['data']\n+            elif isinstance(crawl_result, list):\n+                # Backward compatibility with old API format\n+                data_list = crawl_result\n+            else:\n                 raise ValueError(\"Unexpected response format\")\n+            \n             markdown_contents = [\n-                result.get('markdown', '') for result in crawl_result\n+                result.get('markdown', '') for result in data_list\n             ]\n             return '\\n'.join(markdown_contents)\n         except Exception as e:\n@@ -176,7 +184,14 @@ class Firecrawl:\n                     'extract': {'schema': response_format.model_json_schema()},\n                 },\n             )\n-            return data.get(\"extract\", {})\n+            \n+            # Handle new API response format - check if data is nested under \"data\" key\n+            if isinstance(data, dict) and 'data' in data:\n+                # New API format: extract from data.extract\n+                return data.get('data', {}).get(\"extract\", {})\n+            else:\n+                # Backward compatibility: extract directly\n+                return data.get(\"extract\", {})\n         except Exception as e:\n             raise RuntimeError(f\"Failed to perform structured scrape: {e}\")\n \n"
}