{
  "patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..76d409b6e5 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -528,6 +528,23 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n     def migration_name_fragment(self):\n         return 'alter_%s_%s' % (self.name_lower, self.option_name)\n \n+    def reduce(self, operation, app_label):\n+        # First try the parent's reduce method\n+        result = super().reduce(operation, app_label)\n+        if result is not None:\n+            return result\n+        \n+        # Handle the specific optimization case: clear then set pattern\n+        if (isinstance(operation, self.__class__) and \n+            self.name_lower == operation.name_lower and\n+            not self.option_value and operation.option_value):\n+            # If this operation clears the option (sets to empty) and the next\n+            # operation sets it to a non-empty value, we can skip the clear\n+            # and just use the set operation\n+            return [operation]\n+        \n+        return None\n+\n \n class AlterUniqueTogether(AlterTogetherOptionOperation):\n     \"\"\"\n"
}