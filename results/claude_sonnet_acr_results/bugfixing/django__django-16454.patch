{
  "patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex abc6f79a15..f3f5a73036 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -71,6 +71,71 @@ class CommandParser(ArgumentParser):\n         else:\n             raise CommandError(\"Error: %s\" % message)\n \n+    def add_subparsers(self, **kwargs):\n+        if self._subparsers is not None:\n+            self.error(_('cannot have multiple subparser arguments'))\n+\n+        # add the parser class to the arguments if it's not present\n+        kwargs.setdefault('parser_class', CommandParser)\n+\n+        if 'title' in kwargs or 'description' in kwargs:\n+            title = kwargs.pop('title', 'subcommands')\n+            description = kwargs.pop('description', None)\n+            self._subparsers = self.add_argument_group(title, description)\n+        else:\n+            self._subparsers = self._mutually_exclusive_groups[-1]\n+\n+        # prog defaults to the usage message of this parser, skipping\n+        # optional arguments and with no \"usage:\" prefix\n+        if kwargs.get('prog') is None:\n+            formatter = self._get_formatter()\n+            positionals = self._get_positional_actions()\n+            groups = self._mutually_exclusive_groups\n+            formatter.add_usage(self.usage, positionals, groups, '')\n+            kwargs['prog'] = formatter.format_help().strip()\n+\n+        # create the parsers action and add it to the positionals list\n+        parsers_class = self._pop_action_class(kwargs, 'action')\n+        action = parsers_class(option_strings=[], dest=kwargs.pop('dest', None), **kwargs)\n+        \n+        # Create a custom action that preserves CommandParser parameters\n+        class CommandSubParsersAction(action.__class__):\n+            def __init__(self, *args, **kwargs):\n+                self._parent_missing_args_message = self._parent_parser.missing_args_message\n+                self._parent_called_from_command_line = self._parent_parser.called_from_command_line\n+                super().__init__(*args, **kwargs)\n+            \n+            def add_parser(self, name, **kwargs):\n+                # Set parser_class to CommandParser if not specified\n+                if 'parser_class' not in kwargs:\n+                    kwargs['parser_class'] = CommandParser\n+                \n+                # If using CommandParser, pass through the parent's parameters\n+                if kwargs.get('parser_class') is CommandParser:\n+                    kwargs.setdefault('missing_args_message', self._parent_missing_args_message)\n+                    kwargs.setdefault('called_from_command_line', self._parent_called_from_command_line)\n+                \n+                return super().add_parser(name, **kwargs)\n+        \n+        # Replace the action with our custom one\n+        custom_action = CommandSubParsersAction(\n+            option_strings=action.option_strings,\n+            dest=action.dest,\n+            nargs=action.nargs,\n+            const=action.const,\n+            default=action.default,\n+            type=action.type,\n+            choices=action.choices,\n+            help=action.help,\n+            metavar=action.metavar\n+        )\n+        custom_action._parent_parser = self\n+        \n+        self._subparsers.add_action(custom_action)\n+\n+        # return the created parsers action\n+        return custom_action\n+\n \n def handle_default_options(options):\n     \"\"\"\n"
}