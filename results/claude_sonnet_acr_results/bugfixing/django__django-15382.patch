{
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 81f8f79c71..9e38466c74 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1210,17 +1210,28 @@ class Exists(Subquery):\n         return clone\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n-        query = self.query.exists(using=connection.alias)\n-        sql, params = super().as_sql(\n-            compiler,\n-            connection,\n-            template=template,\n-            query=query,\n-            **extra_context,\n-        )\n-        if self.negated:\n-            sql = 'NOT {}'.format(sql)\n-        return sql, params\n+        from django.db.models.sql.datastructures import EmptyResultSet\n+        \n+        try:\n+            query = self.query.exists(using=connection.alias)\n+            sql, params = super().as_sql(\n+                compiler,\n+                connection,\n+                template=template,\n+                query=query,\n+                **extra_context,\n+            )\n+            if self.negated:\n+                sql = 'NOT {}'.format(sql)\n+            return sql, params\n+        except EmptyResultSet:\n+            # Handle empty querysets appropriately\n+            if self.negated:\n+                # NOT EXISTS of empty set is TRUE\n+                return 'NOT EXISTS(SELECT 1 WHERE 1=0)', []\n+            else:\n+                # EXISTS of empty set is FALSE\n+                return 'EXISTS(SELECT 1 WHERE 1=0)', []\n \n     def select_format(self, compiler, sql, params):\n         # Wrap EXISTS() with a CASE WHEN expression if a database backend\n"
}