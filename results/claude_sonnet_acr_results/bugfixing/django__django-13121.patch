{
  "patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex af8cfd86b5..75853b8838 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -315,6 +315,22 @@ class DatabaseOperations(BaseDatabaseOperations):\n             value = uuid.UUID(value)\n         return value\n \n+    def convert_durationfield_value(self, value, expression, connection):\n+        if value is not None:\n+            # MySQL stores durations as integers (microseconds) or strings\n+            # Handle the case where value might not be a valid numeric string\n+            try:\n+                # Try to convert to int first (for microsecond values)\n+                if isinstance(value, str):\n+                    # Check if it's a numeric string\n+                    int(value)\n+                return super().convert_durationfield_value(value, expression, connection)\n+            except (ValueError, TypeError, decimal.InvalidOperation):\n+                # If conversion fails, return the value as-is\n+                # This handles cases where the value is already a timedelta or other format\n+                return value\n+        return value\n+\n     def binary_placeholder_sql(self, value):\n         return '_binary %s' if value is not None and not hasattr(value, 'as_sql') else '%s'\n \ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex 9510b5edd9..23f5820391 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -321,6 +321,22 @@ class DatabaseOperations(BaseDatabaseOperations):\n     def convert_booleanfield_value(self, value, expression, connection):\n         return bool(value) if value in (1, 0) else value\n \n+    def convert_durationfield_value(self, value, expression, connection):\n+        if value is not None:\n+            # SQLite stores durations as integers (microseconds) or strings\n+            # Handle the case where value might not be a valid numeric string\n+            try:\n+                # Try to convert to int first (for microsecond values)\n+                if isinstance(value, str):\n+                    # Check if it's a numeric string\n+                    int(value)\n+                return super().convert_durationfield_value(value, expression, connection)\n+            except (ValueError, TypeError, decimal.InvalidOperation):\n+                # If conversion fails, return the value as-is\n+                # This handles cases where the value is already a timedelta or other format\n+                return value\n+        return value\n+\n     def bulk_insert_sql(self, fields, placeholder_rows):\n         return \" UNION ALL \".join(\n             \"SELECT %s\" % \", \".join(row)\n"
}