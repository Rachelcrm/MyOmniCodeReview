{
  "patch": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..803544c66 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -376,7 +376,44 @@ class Include(BaseInclude, SphinxDirective):\n         rel_filename, filename = self.env.relfn2path(self.arguments[0])\n         self.arguments[0] = filename\n         self.env.note_included(filename)\n-        return super().run()\n+        \n+        # Read the included file content and emit source-read event\n+        try:\n+            with open(filename, 'r', encoding='utf-8') as f:\n+                content = f.read()\n+            \n+            # Create a list with the content (source-read event expects a list)\n+            source = [content]\n+            \n+            # Emit the source-read event for the included file\n+            self.env.app.emit('source-read', rel_filename, source)\n+            \n+            # Temporarily write the modified content to a temp file or use a different approach\n+            # We need to modify the file content that docutils will read\n+            import tempfile\n+            import os\n+            \n+            # Create a temporary file with the modified content\n+            with tempfile.NamedTemporaryFile(mode='w', suffix='.rst', delete=False, encoding='utf-8') as tmp_file:\n+                tmp_file.write(source[0])\n+                tmp_filename = tmp_file.name\n+            \n+            # Temporarily change the argument to point to the temp file\n+            original_arg = self.arguments[0]\n+            self.arguments[0] = tmp_filename\n+            \n+            try:\n+                result = super().run()\n+            finally:\n+                # Restore original argument and clean up temp file\n+                self.arguments[0] = original_arg\n+                os.unlink(tmp_filename)\n+            \n+            return result\n+            \n+        except (IOError, OSError):\n+            # If we can't read the file, fall back to original behavior\n+            return super().run()\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\n"
}