{
  "patch": "Looking at the issue, I need to analyze the backward compatibility code in the `build_component_list` function. The issue mentions that there's code from 2015 marked as \"backward compatibility for old (base, custom) call signature\" that should either be properly deprecated with a warning or have the comments removed if it's a supported code path.\n\nLooking at the code, I can see that lines 53-55 handle the case where `custom` is passed as a list or tuple:\n\n```python\nif isinstance(custom, (list, tuple)):\n    _check_components(custom)\n    return type(custom)(convert(c) for c in custom)\n```\n\nThis appears to be the backward compatibility code mentioned in the issue. The intended behavior states that this should issue a `ScrapyDeprecationWarning` to inform users that this usage is deprecated and they should migrate to the dictionary-based signature.\n\nI need to:\n1. Import the `ScrapyDeprecationWarning` class\n2. Add a deprecation warning when `custom` is passed as a list or tuple\n3. Keep the existing functionality intact for now\n\nLet me write the patch:\n\n```\n<file>scrapy/utils/conf.py</file>\n<original>\nfrom operator import itemgetter\nimport numbers\n\nfrom scrapy.settings import BaseSettings\nfrom scrapy.utils.misc import without_none_values, update_classpath\n</original>\n<patched>\nfrom operator import itemgetter\nimport numbers\nimport warnings\n\nfrom scrapy.settings import BaseSettings\nfrom scrapy.utils.misc import without_none_values, update_classpath\nfrom scrapy.exceptions import ScrapyDeprecationWarning\n</patched>\n```\n\n```\n<file>scrapy/utils/conf.py</file>\n<original>\n    if isinstance(custom, (list, tuple)):\n        _check_components(custom)\n        return type(custom)(convert(c) for c in custom)\n</original>\n<patched>\n    if isinstance(custom, (list, tuple)):\n        warnings.warn(\n            \"Passing 'custom' as a list or tuple is deprecated. \"\n            \"Please use a dictionary instead.\",\n            ScrapyDeprecationWarning,\n            stacklevel=2\n        )\n        _check_components(custom)\n        return type(custom)(convert(c) for c in custom)\n</patched>\n```\n\nThe reasoning behind this patch:\n\n1. I imported the necessary modules (`warnings` and `ScrapyDeprecationWarning`) to enable deprecation warnings.\n\n2. I added a deprecation warning when the backward compatibility code path is triggered (when `custom` is passed as a list or tuple). This warns users that this usage pattern is deprecated and they should migrate to using a dictionary instead.\n\n3. I used `stacklevel=2` to ensure the warning points to the caller of `build_component_list` rather than the line inside the function where the warning is issued.\n\n4. The existing functionality is preserved - the code still works with list/tuple inputs, but now users are warned that this is deprecated behavior.\n\nThis addresses the issue by properly deprecating the backward compatibility code with an appropriate warning message, making it clear to users that they should migrate to the dictionary-based signature."
}