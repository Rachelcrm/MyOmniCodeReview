{
  "patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex ae82d26340..0b65b23522 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -310,9 +310,39 @@ class Collector:\n                     )\n \n             # fast deletes\n+            # Group querysets by model to combine queries targeting the same table\n+            fast_deletes_by_model = {}\n             for qs in self.fast_deletes:\n-                count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                model = qs.model\n+                if model not in fast_deletes_by_model:\n+                    fast_deletes_by_model[model] = []\n+                fast_deletes_by_model[model].append(qs)\n+            \n+            # Execute combined queries for each model\n+            for model, querysets in fast_deletes_by_model.items():\n+                if len(querysets) == 1:\n+                    # Single queryset, execute as before\n+                    count = querysets[0]._raw_delete(using=self.using)\n+                    deleted_counter[model._meta.label] += count\n+                else:\n+                    # Multiple querysets for same model, combine with OR\n+                    from django.db.models import Q\n+                    combined_q = Q()\n+                    for qs in querysets:\n+                        # Extract the WHERE condition from each queryset\n+                        if hasattr(qs.query, 'where') and qs.query.where:\n+                            combined_q |= Q(pk__in=qs.values_list('pk', flat=True))\n+                        else:\n+                            # Fallback: if we can't extract conditions, execute separately\n+                            count = qs._raw_delete(using=self.using)\n+                            deleted_counter[model._meta.label] += count\n+                            continue\n+                    \n+                    if combined_q.children:\n+                        # Create a new queryset with combined conditions and execute\n+                        combined_qs = model._base_manager.using(self.using).filter(combined_q)\n+                        count = combined_qs._raw_delete(using=self.using)\n+                        deleted_counter[model._meta.label] += count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n"
}