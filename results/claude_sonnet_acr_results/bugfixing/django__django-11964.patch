{
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex d610dc86f0..6fb8f2674e 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,6 +1010,10 @@ class CharField(Field):\n     def to_python(self, value):\n         if isinstance(value, str) or value is None:\n             return value\n+        # Handle Django Choice enums by extracting their value\n+        if hasattr(value, '_name_') and hasattr(value, '_value_'):\n+            # This is likely an enum instance, extract its value\n+            value = value.value\n         return str(value)\n \n     def get_prep_value(self, value):\n@@ -1769,6 +1773,10 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        # Handle Django Choice enums by extracting their value\n+        if hasattr(value, '_name_') and hasattr(value, '_value_'):\n+            # This is likely an enum instance, extract its value\n+            value = value.value\n         try:\n             return int(value)\n         except (TypeError, ValueError):\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 36ec634929..dda031d9f3 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -220,6 +220,10 @@ class CharField(Field):\n     def to_python(self, value):\n         \"\"\"Return a string.\"\"\"\n         if value not in self.empty_values:\n+            # Handle Django Choice enums by extracting their value\n+            if hasattr(value, '_name_') and hasattr(value, '_value_'):\n+                # This is likely an enum instance, extract its value\n+                value = value.value\n             value = str(value)\n             if self.strip:\n                 value = value.strip()\n@@ -265,6 +269,10 @@ class IntegerField(Field):\n         value = super().to_python(value)\n         if value in self.empty_values:\n             return None\n+        # Handle Django Choice enums by extracting their value\n+        if hasattr(value, '_name_') and hasattr(value, '_value_'):\n+            # This is likely an enum instance, extract its value\n+            value = value.value\n         if self.localize:\n             value = formats.sanitize_separators(value)\n         # Strip trailing decimal and zeros.\n"
}