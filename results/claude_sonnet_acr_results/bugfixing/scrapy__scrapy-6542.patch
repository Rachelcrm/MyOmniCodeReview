{
  "patch": "diff --git a/scrapy/contracts/__init__.py b/scrapy/contracts/__init__.py\nindex 9071395e3..7e2581612 100644\n--- a/scrapy/contracts/__init__.py\n+++ b/scrapy/contracts/__init__.py\n@@ -38,9 +38,16 @@ class Contract:\n             assert cb is not None\n \n             @wraps(cb)\n-            def wrapper(  # pylint: disable=inconsistent-return-statements\n+            def wrapper(\n                 response: Response, **cb_kwargs: Any\n             ) -> list[Any]:\n+                # Execute the original callback first\n+                cb_result = cb(response, **cb_kwargs)\n+                if isinstance(cb_result, (AsyncGenerator, CoroutineType)):\n+                    raise TypeError(\"Contracts don't support async callbacks\")\n+                output = list(cast(Iterable[Any], iterate_spider_output(cb_result)))\n+                \n+                # Run the pre-processing tests\n                 try:\n                     results.startTest(self.testcase_pre)\n                     self.pre_process(response)\n@@ -51,13 +58,8 @@ class Contract:\n                     results.addError(self.testcase_pre, sys.exc_info())\n                 else:\n                     results.addSuccess(self.testcase_pre)\n-                finally:\n-                    cb_result = cb(response, **cb_kwargs)\n-                    if isinstance(cb_result, (AsyncGenerator, CoroutineType)):\n-                        raise TypeError(\"Contracts don't support async callbacks\")\n-                    return list(  # pylint: disable=return-in-finally\n-                        cast(Iterable[Any], iterate_spider_output(cb_result))\n-                    )\n+                \n+                return output\n \n             request.callback = wrapper\n \n@@ -69,13 +71,15 @@ class Contract:\n             assert cb is not None\n \n             @wraps(cb)\n-            def wrapper(  # pylint: disable=inconsistent-return-statements\n+            def wrapper(\n                 response: Response, **cb_kwargs: Any\n             ) -> list[Any]:\n                 cb_result = cb(response, **cb_kwargs)\n                 if isinstance(cb_result, (AsyncGenerator, CoroutineType)):\n                     raise TypeError(\"Contracts don't support async callbacks\")\n                 output = list(cast(Iterable[Any], iterate_spider_output(cb_result)))\n+                \n+                # Run the post-processing tests\n                 try:\n                     results.startTest(self.testcase_post)\n                     self.post_process(output)\n@@ -86,8 +90,8 @@ class Contract:\n                     results.addError(self.testcase_post, sys.exc_info())\n                 else:\n                     results.addSuccess(self.testcase_post)\n-                finally:\n-                    return output  # pylint: disable=return-in-finally\n+                \n+                return output\n \n             request.callback = wrapper\n \n"
}