{
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex de49e1c58c..86484d6577 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -622,7 +622,65 @@ class QuerySet(AltersData):\n         if self._result_cache is not None:\n             return len(self._result_cache)\n \n-        return self.query.get_count(using=self.db)\n+        # Clone the query to strip unused annotations for optimization\n+        query = self.query.chain()\n+        \n+        # Find annotations that are actually referenced\n+        used_annotations = set()\n+        \n+        # Check annotations referenced in WHERE clauses\n+        if hasattr(query, 'where') and query.where:\n+            for child in query.where.children:\n+                self._collect_annotation_refs(child, used_annotations, query.annotations)\n+        \n+        # Check annotations referenced in ORDER BY clauses\n+        for order_expr in query.order_by:\n+            if isinstance(order_expr, str):\n+                # Handle string-based ordering like 'field_name' or '-field_name'\n+                field_name = order_expr.lstrip('-')\n+                if field_name in query.annotations:\n+                    used_annotations.add(field_name)\n+            elif hasattr(order_expr, 'resolve_expression'):\n+                self._collect_annotation_refs(order_expr, used_annotations, query.annotations)\n+        \n+        # Check for annotation dependencies (annotations that reference other annotations)\n+        changed = True\n+        while changed:\n+            changed = False\n+            for alias, annotation in query.annotations.items():\n+                if alias not in used_annotations:\n+                    continue\n+                # Check if this annotation references other annotations\n+                refs = set()\n+                self._collect_annotation_refs(annotation, refs, query.annotations)\n+                new_refs = refs - used_annotations\n+                if new_refs:\n+                    used_annotations.update(new_refs)\n+                    changed = True\n+        \n+        # Remove unused annotations\n+        unused_annotations = set(query.annotations.keys()) - used_annotations\n+        for alias in unused_annotations:\n+            del query.annotations[alias]\n+        \n+        return query.get_count(using=self.db)\n+\n+    def _collect_annotation_refs(self, expr, refs, annotations):\n+        \"\"\"\n+        Recursively collect annotation references from an expression.\n+        \"\"\"\n+        if hasattr(expr, 'refs') and expr.refs in annotations:\n+            refs.add(expr.refs)\n+        elif hasattr(expr, 'source_expressions'):\n+            for source_expr in expr.source_expressions:\n+                self._collect_annotation_refs(source_expr, refs, annotations)\n+        elif hasattr(expr, 'children'):\n+            for child in expr.children:\n+                self._collect_annotation_refs(child, refs, annotations)\n+        elif hasattr(expr, 'lhs'):\n+            self._collect_annotation_refs(expr.lhs, refs, annotations)\n+        elif hasattr(expr, 'rhs'):\n+            self._collect_annotation_refs(expr.rhs, refs, annotations)\n \n     async def acount(self):\n         return await sync_to_async(self.count)()\n"
}