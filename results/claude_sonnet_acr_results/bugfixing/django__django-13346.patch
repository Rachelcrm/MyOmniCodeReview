{
  "patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fafc1beee8..1f0a654a55 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -294,11 +294,20 @@ class KeyTransform(Transform):\n     def as_mysql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        # Check if this is being used with an In lookup\n+        if hasattr(compiler, 'lookup') and getattr(compiler.lookup, 'lookup_name', None) == 'in':\n+            return 'JSON_UNQUOTE(JSON_EXTRACT(%s, %%s))' % lhs, tuple(params) + (json_path,)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n     def as_oracle(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        # Check if this is being used with an In lookup\n+        if hasattr(compiler, 'lookup') and getattr(compiler.lookup, 'lookup_name', None) == 'in':\n+            return (\n+                \"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s' RETURNING VARCHAR2(4000)))\" %\n+                ((lhs, json_path) * 2)\n+            ), tuple(params) * 2\n         return (\n             \"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\" %\n             ((lhs, json_path) * 2)\n@@ -317,6 +326,11 @@ class KeyTransform(Transform):\n     def as_sqlite(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        # Check if this is being used with an In lookup\n+        if hasattr(compiler, 'lookup') and getattr(compiler.lookup, 'lookup_name', None) == 'in':\n+            # SQLite doesn't have JSON_UNQUOTE, but we can use JSON_EXTRACT with ->> operator behavior\n+            # by casting to TEXT to remove quotes for string values\n+            return 'CAST(JSON_EXTRACT(%s, %%s) AS TEXT)' % lhs, tuple(params) + (json_path,)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n \n"
}