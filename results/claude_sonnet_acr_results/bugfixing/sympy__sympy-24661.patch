{
  "patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 52711d1324..57adf398c2 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1110,6 +1110,14 @@ class EvaluateFalseTransformer(ast.NodeTransformer):\n         ast.BitAnd: 'And',\n         ast.BitXor: 'Not',\n     }\n+    comparisons = {\n+        ast.Lt: 'Lt',\n+        ast.LtE: 'Le',\n+        ast.Gt: 'Gt',\n+        ast.GtE: 'Ge',\n+        ast.Eq: 'Eq',\n+        ast.NotEq: 'Ne',\n+    }\n     functions = (\n         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',\n         'acos', 'acot', 'acsc', 'asec', 'asin', 'atan',\n@@ -1192,6 +1200,23 @@ def visit_Call(self, node):\n             new_node.keywords.append(ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load())))\n         return new_node\n \n+    def visit_Compare(self, node):\n+        # Handle comparison operations like <, >, <=, >=, ==, !=\n+        if len(node.ops) == 1 and node.ops[0].__class__ in self.comparisons:\n+            sympy_class = self.comparisons[node.ops[0].__class__]\n+            left = self.visit(node.left)\n+            right = self.visit(node.comparators[0])\n+            \n+            new_node = ast.Call(\n+                func=ast.Name(id=sympy_class, ctx=ast.Load()),\n+                args=[left, right],\n+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],\n+                starargs=None,\n+                kwargs=None\n+            )\n+            return new_node\n+        return node\n+\n \n _transformation = {  # items can be added but never re-ordered\n 0: lambda_notation,\n"
}