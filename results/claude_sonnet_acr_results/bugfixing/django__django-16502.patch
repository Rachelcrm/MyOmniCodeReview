{
  "patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex fef5532e58..b457c0b687 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -155,6 +155,32 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n         # Short-circuit parent method to not call socket.getfqdn\n         return self.client_address[0]\n \n+    def do_HEAD(self):\n+        \"\"\"Handle HEAD requests by processing as GET but stripping response body.\"\"\"\n+        # Store original command and change to GET for processing\n+        original_command = self.command\n+        self.command = 'GET'\n+        \n+        try:\n+            # Process as GET request to generate proper headers\n+            self.handle_one_request()\n+        finally:\n+            # Restore original command\n+            self.command = original_command\n+\n+    def do_HEAD(self):\n+        \"\"\"Handle HEAD requests by processing as GET but stripping response body.\"\"\"\n+        # Temporarily change the command to GET to process the request normally\n+        original_command = self.command\n+        self.command = 'GET'\n+        \n+        try:\n+            # Process the request as a GET request\n+            self.do_GET()\n+        finally:\n+            # Restore the original command\n+            self.command = original_command\n+\n     def log_message(self, format, *args):\n         extra = {\n             \"request\": self.request,\n@@ -220,10 +246,28 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n         if not self.parse_request():  # An error code has been sent, just exit\n             return\n \n+        # Handle HEAD requests by temporarily changing to GET\n+        original_command = self.command\n+        if self.command == 'HEAD':\n+            self.command = 'GET'\n+\n         handler = ServerHandler(\n             self.rfile, self.wfile, self.get_stderr(), self.get_environ()\n         )\n         handler.request_handler = self  # backpointer for logging & connection closing\n+        \n+        # For HEAD requests, we need to strip the response body\n+        if original_command == 'HEAD':\n+            # Create a custom write method that ignores the body\n+            original_write = handler.write\n+            def head_write(data):\n+                # Don't write any response body for HEAD requests\n+                pass\n+            handler.write = head_write\n+        \n+        # Restore the original command for proper environ\n+        self.command = original_command\n+        \n         handler.run(self.server.get_app())\n \n \n"
}