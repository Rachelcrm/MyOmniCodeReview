{
  "patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..0f4871443f 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1025,8 +1025,10 @@ class MultiValueField(Field):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n+                elif self.require_all_fields:\n                     return self.compress([])\n+                # If require_all_fields=False, we need to check individual field requirements\n+                # even when all values are empty, so don't return early\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n         for i, field in enumerate(self.fields):\n@@ -1044,8 +1046,8 @@ class MultiValueField(Field):\n                     # Otherwise, add an 'incomplete' error to the list of\n                     # collected errors and skip field cleaning, if a required\n                     # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n+                    if self.error_messages['incomplete'] not in errors:\n+                        errors.append(self.error_messages['incomplete'])\n                     continue\n             try:\n                 clean_data.append(field.clean(field_value))\n"
}