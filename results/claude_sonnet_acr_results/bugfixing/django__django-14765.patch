{
  "patch": "Looking at the issue, I need to understand what's happening:\n\n1. PR #14760 made all calls to `ProjectState.__init__()` pass `real_apps` as a set\n2. The current code in `ProjectState.__init__()` checks if `real_apps` is a set and converts it if not\n3. Since all callers now pass `real_apps` as either `None` or a set, we can simplify this by asserting it's a set when non-None instead of doing the conversion\n\nLet me examine the current code in the `__init__` method:\n\n```python\ndef __init__(self, models=None, real_apps=None):\n    self.models = models or {}\n    # Apps to include from main registry, usually unmigrated ones\n    if real_apps:\n        self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n    else:\n        self.real_apps = set()\n    self.is_delayed = False\n    # {remote_model_key: {model_key: [(field_name, field)]}}\n    self.relations = None\n```\n\nThe lines 94-97 currently handle the `real_apps` parameter by:\n1. Checking if `real_apps` is truthy\n2. If it is, checking if it's already a set, and if not, converting it to a set\n3. If it's falsy, setting `self.real_apps` to an empty set\n\nSince all callers now pass `real_apps` as either `None` or a set, I can simplify this to:\n1. If `real_apps` is not None, assert it's a set and assign it directly\n2. If it's None, set `self.real_apps` to an empty set\n\n```\n<file>django/db/migrations/state.py</file>\n<original>\n    def __init__(self, models=None, real_apps=None):\n        self.models = models or {}\n        # Apps to include from main registry, usually unmigrated ones\n        if real_apps:\n            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n        else:\n            self.real_apps = set()\n        self.is_delayed = False\n        # {remote_model_key: {model_key: [(field_name, field)]}}\n        self.relations = None\n</original>\n<patched>\n    def __init__(self, models=None, real_apps=None):\n        self.models = models or {}\n        # Apps to include from main registry, usually unmigrated ones\n        if real_apps is not None:\n            assert isinstance(real_apps, set), \"real_apps must be a set when not None\"\n            self.real_apps = real_apps\n        else:\n            self.real_apps = set()\n        self.is_delayed = False\n        # {remote_model_key: {model_key: [(field_name, field)]}}\n        self.relations = None\n</patched>\n```\n\nThe key changes I made:\n\n1. Changed `if real_apps:` to `if real_apps is not None:` to be more explicit about checking for None vs falsy values\n2. Added an assertion `assert isinstance(real_apps, set), \"real_apps must be a set when not None\"` to ensure the contract is met\n3. Directly assigned `self.real_apps = real_apps` instead of the conditional check and conversion\n4. The `else` clause remains the same, setting `self.real_apps = set()` when `real_apps` is None\n\nThis change makes the code simpler and more explicit about the expected contract while providing a clear error message if the assumption is violated."
}