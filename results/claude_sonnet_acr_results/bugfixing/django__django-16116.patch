{
  "patch": "Looking at the issue, I need to understand what's happening. The problem is that `makemigrations --check` is inconsistent with other Django commands that use `--check`. Specifically:\n\n1. `migrate --check` and `optimizemigration --check` just exit after checking (without performing their main actions)\n2. `makemigrations --check` currently still writes migration files, which is inconsistent\n\nThe issue is asking for `makemigrations --check` to behave like the other commands - it should just check for missing migrations and exit without actually creating the migration files.\n\nHowever, I notice that the code locations provided don't seem to be related to the `makemigrations` command. They show `changepassword`, `createsuperuser`, and `remove_stale_contenttypes` commands. This suggests I need to find the actual `makemigrations` command code.\n\nBased on the issue description and the intended behavior, I need to find the `makemigrations` command and modify it so that when `--check` is used, it:\n1. Detects if there are changes that would require migrations\n2. If changes are detected and `--check` is True, exit with status code 1 without writing files\n3. If no changes are detected and `--check` is True, exit with status code 0 without writing files\n4. If `--check` is False, preserve current behavior (write migration files)\n\nLet me look for the makemigrations command. It would typically be in `django/core/management/commands/makemigrations.py`.\n\nSince the provided locations don't contain the makemigrations command, I'll need to work with what's likely the correct file path and structure based on Django's conventions.\n\n```\n<file>django/core/management/commands/makemigrations.py</file>\n<original>\n        # If they want to make an empty migration, make one for each app\n        if self.empty:\n            if not app_labels:\n                raise CommandError(\n                    \"You must supply at least one app label when using --empty.\"\n                )\n            # Make a fake changes dict with the specified app labels\n            changes = {app: None for app in app_labels}\n        else:\n            changes = autodetector.changes(\n                graph=loader.graph,\n                trim_to_apps=app_labels or None,\n                convert_apps=app_labels or None,\n                migration_name=self.migration_name,\n            )\n\n        if not changes:\n            # No changes? Tell them.\n            if self.verbosity >= 1:\n                if app_labels:\n                    if len(app_labels) == 1:\n                        self.stdout.write(\n                            \"No changes detected in app '%s'\" % app_labels.pop()\n                        )\n                    else:\n                        self.stdout.write(\n                            \"No changes detected in apps '%s'\"\n                            % (\"', '\".join(app_labels))\n                        )\n                else:\n                    self.stdout.write(\"No changes detected\")\n        else:\n            self.write_migration_files(changes)\n            if self.update:\n                self.write_to_last_migration_files(changes)\n</original>\n<patched>\n        # If they want to make an empty migration, make one for each app\n        if self.empty:\n            if not app_labels:\n                raise CommandError(\n                    \"You must supply at least one app label when using --empty.\"\n                )\n            # Make a fake changes dict with the specified app labels\n            changes = {app: None for app in app_labels}\n        else:\n            changes = autodetector.changes(\n                graph=loader.graph,\n                trim_to_apps=app_labels or None,\n                convert_apps=app_labels or None,\n                migration_name=self.migration_name,\n            )\n\n        if not changes:\n            # No changes? Tell them.\n            if self.verbosity >= 1:\n                if app_labels:\n                    if len(app_labels) == 1:\n                        self.stdout.write(\n                            \"No changes detected in app '%s'\" % app_labels.pop()\n                        )\n                    else:\n                        self.stdout.write(\n                            \"No changes detected in apps '%s'\"\n                            % (\"', '\".join(app_labels))\n                        )\n                else:\n                    self.stdout.write(\"No changes detected\")\n            # If --check is used and no changes detected, exit with code 0\n            if self.check_changes:\n                sys.exit(0)\n        else:\n            # If --check is used and changes are detected, exit with code 1 without writing files\n            if self.check_changes:\n                sys.exit(1)\n            self.write_migration_files(changes)\n            if self.update:\n                self.write_to_last_migration_files(changes)\n</patched>\n```\n\nI also need to make sure the `sys` module is imported at the top of the file:\n\n```\n<file>django/core/management/commands/makemigrations.py</file>\n<original>\nimport os\nimport sys\nfrom itertools import takewhile\n\nfrom django.apps import apps\nfrom django.conf import settings\nfrom django.core.management.base import BaseCommand, CommandError\nfrom django.core.management.utils import run_formatters\nfrom django.db import DEFAULT_DB_ALIAS, connections, router\nfrom django.db.migrations import Migration\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.loader import MigrationLoader\nfrom django.db.migrations.questioner import (\n    InteractiveMigrationQuestioner,\n    MigrationQuestioner,\n    NonInteractiveMigrationQuestioner,\n)\nfrom django.db.migrations.state import ProjectState\nfrom django.db.migrations.utils import get_migration_name_timestamp\nfrom django.db.migrations.writer import MigrationWriter</original>\n<patched>\nimport os\nimport sys\nfrom itertools import takewhile\n\nfrom django.apps import apps\nfrom django.conf import settings\nfrom django.core.management.base import BaseCommand, CommandError\nfrom django.core.management.utils import run_formatters\nfrom django.db import DEFAULT_DB_ALIAS, connections, router\nfrom django.db.migrations import Migration\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.loader import MigrationLoader\nfrom django.db.migrations.questioner import (\n    InteractiveMigrationQuestioner,\n    MigrationQuestioner,\n    NonInteractiveMigrationQuestioner,\n)\nfrom django.db.migrations.state import ProjectState\nfrom django.db.migrations.utils import get_migration_name_timestamp\nfrom django.db.migrations.writer import MigrationWriter</patched>\n```\n\nActually, looking at the imports, `sys` is already imported, so I don't need to modify the imports. Let me focus on just the main logic change:\n\n```\n<file>django/core/management/commands/makemigrations.py</file>\n<original>\n        if not changes:\n            # No changes? Tell them.\n            if self.verbosity >= 1:\n                if app_labels:\n                    if len(app_labels) == 1:\n                        self.stdout.write(\n                            \"No changes detected in app '%s'\" % app_labels.pop()\n                        )\n                    else:\n                        self.stdout.write(\n                            \"No changes detected in apps '%s'\"\n                            % (\"', '\".join(app_labels))\n                        )\n                else:\n                    self.stdout.write(\"No changes detected\")\n        else:\n            self.write_migration_files(changes)\n            if self.update:\n                self.write_to_last_migration_files(changes)</original>\n<patched>\n        if not changes:\n            # No changes? Tell them.\n            if self.verbosity >= 1:\n                if app_labels:\n                    if len(app_labels) == 1:\n                        self.stdout.write(\n                            \"No changes detected in app '%s'\" % app_labels.pop()\n                        )\n                    else:\n                        self.stdout.write(\n                            \"No changes detected in apps '%s'\"\n                            % (\"', '\".join(app_labels))\n                        )\n                else:\n                    self.stdout.write(\"No changes detected\")\n            # If --check is used and no changes detected, exit with code 0\n            if self.check_changes:\n                sys.exit(0)\n        else:\n            # If --check is used and changes are detected, exit with code 1 without writing files\n            if self.check_changes:\n                sys.exit(1)\n            self.write_migration_files(changes)\n            if self.update:\n                self.write_to_last_migration_files(changes)</patched>\n```"
}