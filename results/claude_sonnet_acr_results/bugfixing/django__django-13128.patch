{
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d913658291..fe9ee11471 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -298,18 +298,36 @@ class BaseExpression:\n         If all sources are None, then an error is raised higher up the stack in\n         the output_field property.\n         \"\"\"\n-        sources_iter = (source for source in self.get_source_fields() if source is not None)\n-        for output_field in sources_iter:\n-            for source in sources_iter:\n-                if not isinstance(output_field, source.__class__):\n-                    raise FieldError(\n-                        'Expression contains mixed types: %s, %s. You must '\n-                        'set output_field.' % (\n-                            output_field.__class__.__name__,\n-                            source.__class__.__name__,\n-                        )\n-                    )\n-            return output_field\n+        from django.db import models\n+        \n+        sources = [source for source in self.get_source_fields() if source is not None]\n+        if not sources:\n+            return None\n+            \n+        # Check if all sources are the same type\n+        first_source = sources[0]\n+        if all(isinstance(source, first_source.__class__) for source in sources):\n+            return first_source\n+            \n+        # Special handling for temporal arithmetic: allow mixing DateTimeField and DurationField\n+        source_types = {type(source) for source in sources}\n+        datetime_fields = {models.DateField, models.DateTimeField, models.TimeField}\n+        \n+        # If we have a mix of datetime fields and duration fields, this is likely temporal arithmetic\n+        has_datetime = any(isinstance(source, tuple(datetime_fields)) for source in sources)\n+        has_duration = any(isinstance(source, models.DurationField) for source in sources)\n+        \n+        if has_datetime and has_duration:\n+            # For temporal arithmetic expressions, the result should be a DurationField\n+            # This handles cases like: datetime - datetime + duration = duration\n+            return models.DurationField()\n+            \n+        # If we reach here, we have mixed types that aren't valid temporal arithmetic\n+        source_names = [source.__class__.__name__ for source in sources]\n+        raise FieldError(\n+            'Expression contains mixed types: %s. You must '\n+            'set output_field.' % ', '.join(source_names)\n+        )\n \n     @staticmethod\n     def _convert_value_noop(value, expression, connection):\n"
}