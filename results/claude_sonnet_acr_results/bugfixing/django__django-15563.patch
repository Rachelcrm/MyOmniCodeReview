{
  "patch": "diff --git a/django/db/models/sql/subqueries.py b/django/db/models/sql/subqueries.py\nindex 04063f73bc..c9bf62ea3b 100644\n--- a/django/db/models/sql/subqueries.py\n+++ b/django/db/models/sql/subqueries.py\n@@ -134,10 +134,46 @@ class UpdateQuery(Query):\n             query = UpdateQuery(model)\n             query.values = values\n             if self.related_ids is not None:\n-                query.add_filter(\"pk__in\", self.related_ids)\n+                # For multiple inheritance, we need to map the child model's primary keys\n+                # to the appropriate parent model's primary keys\n+                parent_ids = self._get_parent_ids_for_model(model)\n+                query.add_filter(\"pk__in\", parent_ids)\n             result.append(query)\n         return result\n \n+    def _get_parent_ids_for_model(self, parent_model):\n+        \"\"\"\n+        Get the appropriate primary key values for the given parent model\n+        from the child model instances.\n+        \"\"\"\n+        if self.related_ids is None:\n+            return None\n+            \n+        # Find the field that links the child model to this parent model\n+        child_model = self.get_meta().model\n+        parent_link_field = None\n+        \n+        # Look for the parent link field in the child model's fields\n+        for field in child_model._meta.get_fields():\n+            if (hasattr(field, 'related_model') and \n+                field.related_model is parent_model and \n+                getattr(field, 'parent_link', False)):\n+                parent_link_field = field\n+                break\n+        \n+        if parent_link_field is None:\n+            # Fallback: if no explicit parent link found, use the related_ids as-is\n+            # This maintains backward compatibility for single inheritance\n+            return self.related_ids\n+            \n+        # Get the parent primary key values by querying the child model\n+        # and extracting the parent link field values\n+        parent_ids = list(child_model.objects.filter(\n+            pk__in=self.related_ids\n+        ).values_list(parent_link_field.name, flat=True))\n+        \n+        return parent_ids\n+\n \n class InsertQuery(Query):\n     compiler = \"SQLInsertCompiler\"\n"
}