{
  "patch": "diff --git a/scrapy/middleware.py b/scrapy/middleware.py\nindex b6a427895..155d7983a 100644\n--- a/scrapy/middleware.py\n+++ b/scrapy/middleware.py\n@@ -7,7 +7,7 @@ from typing import TYPE_CHECKING, Any, TypeVar, cast\n \n from scrapy.exceptions import NotConfigured\n from scrapy.utils.defer import process_chain, process_parallel\n-from scrapy.utils.misc import build_from_crawler, build_from_settings, load_object\n+from scrapy.utils.misc import build_from_crawler, load_object\n \n if TYPE_CHECKING:\n     from collections.abc import Callable, Iterable\n@@ -51,17 +51,14 @@ class MiddlewareManager:\n         raise NotImplementedError\n \n     @classmethod\n-    def from_settings(cls, settings: Settings, crawler: Crawler | None = None) -> Self:\n+    def from_settings(cls, settings: Settings, crawler: Crawler) -> Self:\n         mwlist = cls._get_mwlist_from_settings(settings)\n         middlewares = []\n         enabled = []\n         for clspath in mwlist:\n             try:\n                 mwcls = load_object(clspath)\n-                if crawler is not None:\n-                    mw = build_from_crawler(mwcls, crawler)\n-                else:\n-                    mw = build_from_settings(mwcls, settings)\n+                mw = build_from_crawler(mwcls, crawler)\n                 middlewares.append(mw)\n                 enabled.append(clspath)\n             except NotConfigured as e:\ndiff --git a/scrapy/utils/misc.py b/scrapy/utils/misc.py\nindex 12c09839f..ee7d832b7 100644\n--- a/scrapy/utils/misc.py\n+++ b/scrapy/utils/misc.py\n@@ -150,7 +150,7 @@ def create_instance(objcls, settings, crawler, *args, **kwargs):\n     \"\"\"\n     warnings.warn(\n         \"The create_instance() function is deprecated. \"\n-        \"Please use build_from_crawler() or build_from_settings() instead.\",\n+        \"Please use build_from_crawler() instead.\",\n         category=ScrapyDeprecationWarning,\n         stacklevel=2,\n     )\n@@ -178,6 +178,9 @@ def build_from_crawler(\n ) -> T:\n     \"\"\"Construct a class instance using its ``from_crawler`` constructor.\n \n+    If the class does not have a ``from_crawler`` method, falls back to\n+    ``from_settings`` using ``crawler.settings``.\n+\n     ``*args`` and ``**kwargs`` are forwarded to the constructor.\n \n     Raises ``TypeError`` if the resulting instance is ``None``.\n@@ -196,24 +199,7 @@ def build_from_crawler(\n     return cast(T, instance)\n \n \n-def build_from_settings(\n-    objcls: type[T], settings: BaseSettings, /, *args: Any, **kwargs: Any\n-) -> T:\n-    \"\"\"Construct a class instance using its ``from_settings`` constructor.\n-\n-    ``*args`` and ``**kwargs`` are forwarded to the constructor.\n \n-    Raises ``TypeError`` if the resulting instance is ``None``.\n-    \"\"\"\n-    if hasattr(objcls, \"from_settings\"):\n-        instance = objcls.from_settings(settings, *args, **kwargs)  # type: ignore[attr-defined]\n-        method_name = \"from_settings\"\n-    else:\n-        instance = objcls(*args, **kwargs)\n-        method_name = \"__new__\"\n-    if instance is None:\n-        raise TypeError(f\"{objcls.__qualname__}.{method_name} returned None\")\n-    return cast(T, instance)\n \n \n @contextmanager\n"
}