{
  "patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 88adadb37d..e2c715a5a2 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -228,6 +228,29 @@ class BoundField:\n             attrs['disabled'] = True\n         return attrs\n \n+    def did_change(self):\n+        \"\"\"\n+        Return True if data differs from initial for this field.\n+        \"\"\"\n+        from django.core.exceptions import ValidationError\n+        \n+        data_value = self.data\n+        if not self.field.show_hidden_initial:\n+            # Use the BoundField's initial as this is the value passed to\n+            # the widget.\n+            initial_value = self.initial\n+        else:\n+            initial_prefixed_name = self.form.add_initial_prefix(self.name)\n+            hidden_widget = self.field.hidden_widget()\n+            try:\n+                initial_value = self.field.to_python(\n+                    self.form._widget_data_value(hidden_widget, initial_prefixed_name)\n+                )\n+            except ValidationError:\n+                # Always assume data has changed if validation fails.\n+                return True\n+        return self.field.has_changed(initial_value, data_value)\n+\n     @property\n     def widget_type(self):\n         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())\ndiff --git a/django/forms/forms.py b/django/forms/forms.py\nindex d14037bfe9..523bb8b7e5 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -387,17 +387,17 @@ class BaseForm:\n         self._post_clean()\n \n     def _clean_fields(self):\n-        for name, field in self.fields.items():\n-            if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n+        for name, bf in self._bound_items():\n+            if bf.field.disabled:\n+                value = bf.initial\n             else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+                value = bf.data\n             try:\n-                if isinstance(field, FileField):\n-                    initial = self.get_initial_for_field(field, name)\n-                    value = field.clean(value, initial)\n+                if isinstance(bf.field, FileField):\n+                    initial = bf.initial\n+                    value = bf.field.clean(value, initial)\n                 else:\n-                    value = field.clean(value)\n+                    value = bf.field.clean(value)\n                 self.cleaned_data[name] = value\n                 if hasattr(self, 'clean_%s' % name):\n                     value = getattr(self, 'clean_%s' % name)()\n@@ -487,6 +487,13 @@ class BaseForm:\n         \"\"\"\n         return [field for field in self if not field.is_hidden]\n \n+    def _bound_items(self):\n+        \"\"\"\n+        Yield (name, BoundField) pairs for all fields in this form.\n+        \"\"\"\n+        for name in self.fields:\n+            yield name, self[name]\n+\n     def get_initial_for_field(self, field, field_name):\n         \"\"\"\n         Return initial data for field on form. Use initial data from the form\n"
}