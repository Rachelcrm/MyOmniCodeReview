{
  "patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..6c716cd91b 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -231,6 +231,34 @@ def _cstack(left, right):\n         Result from this operation.\n \n     \"\"\"\n+    from .core import CompoundModel\n+    \n+    # Flatten nested CompoundModels with the same '&' operator\n+    models_to_stack = []\n+    \n+    # Handle left operand\n+    if isinstance(left, CompoundModel) and left.op == np.bitwise_and:\n+        # If left is a CompoundModel with '&' operator, add its constituent models\n+        models_to_stack.extend([left.left, left.right])\n+    else:\n+        models_to_stack.append(left)\n+    \n+    # Handle right operand  \n+    if isinstance(right, CompoundModel) and right.op == np.bitwise_and:\n+        # If right is a CompoundModel with '&' operator, add its constituent models\n+        models_to_stack.extend([right.left, right.right])\n+    else:\n+        models_to_stack.append(right)\n+    \n+    # If we have more than 2 models after flattening, recursively apply _cstack\n+    if len(models_to_stack) > 2:\n+        result = _cstack(models_to_stack[0], models_to_stack[1])\n+        for model in models_to_stack[2:]:\n+            result = _cstack(result, model)\n+        return result\n+    \n+    # Original logic for the case of exactly 2 models\n+    left, right = models_to_stack[0], models_to_stack[1]\n     noutp = _compute_n_outputs(left, right)\n \n     if isinstance(left, Model):\n"
}