{
  "patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 76ca815765..f89a5ec7f7 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -435,6 +435,12 @@ class DatabaseOperations(BaseDatabaseOperations):\n \n     def on_conflict_suffix_sql(self, fields, on_conflict, update_fields, unique_fields):\n         if on_conflict == OnConflict.UPDATE:\n+            # Create mapping from field names to database column names\n+            field_name_to_column = {field.name: field.column for field in fields}\n+            \n+            # Convert field names to column names\n+            update_columns = [field_name_to_column.get(field, field) for field in update_fields]\n+            \n             conflict_suffix_sql = \"ON DUPLICATE KEY UPDATE %(fields)s\"\n             # The use of VALUES() is deprecated in MySQL 8.0.20+. Instead, use\n             # aliases for the new row and its columns available in MySQL\n@@ -452,7 +458,7 @@ class DatabaseOperations(BaseDatabaseOperations):\n             fields = \", \".join(\n                 [\n                     field_sql % {\"field\": field}\n-                    for field in map(self.quote_name, update_fields)\n+                    for field in map(self.quote_name, update_columns)\n                 ]\n             )\n             return conflict_suffix_sql % {\"fields\": fields}\ndiff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 62273fc43c..4a50684aea 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -353,12 +353,19 @@ class DatabaseOperations(BaseDatabaseOperations):\n         if on_conflict == OnConflict.IGNORE:\n             return \"ON CONFLICT DO NOTHING\"\n         if on_conflict == OnConflict.UPDATE:\n+            # Create mapping from field names to database column names\n+            field_name_to_column = {field.name: field.column for field in fields}\n+            \n+            # Convert field names to column names\n+            unique_columns = [field_name_to_column.get(field, field) for field in unique_fields]\n+            update_columns = [field_name_to_column.get(field, field) for field in update_fields]\n+            \n             return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n-                \", \".join(map(self.quote_name, unique_fields)),\n+                \", \".join(map(self.quote_name, unique_columns)),\n                 \", \".join(\n                     [\n                         f\"{field} = EXCLUDED.{field}\"\n-                        for field in map(self.quote_name, update_fields)\n+                        for field in map(self.quote_name, update_columns)\n                     ]\n                 ),\n             )\ndiff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex bb84d52071..5483934417 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -417,12 +417,19 @@ class DatabaseOperations(BaseDatabaseOperations):\n             on_conflict == OnConflict.UPDATE\n             and self.connection.features.supports_update_conflicts_with_target\n         ):\n+            # Create mapping from field names to database column names\n+            field_name_to_column = {field.name: field.column for field in fields}\n+            \n+            # Convert field names to column names\n+            unique_columns = [field_name_to_column.get(field, field) for field in unique_fields]\n+            update_columns = [field_name_to_column.get(field, field) for field in update_fields]\n+            \n             return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n-                \", \".join(map(self.quote_name, unique_fields)),\n+                \", \".join(map(self.quote_name, unique_columns)),\n                 \", \".join(\n                     [\n                         f\"{field} = EXCLUDED.{field}\"\n-                        for field in map(self.quote_name, update_fields)\n+                        for field in map(self.quote_name, update_columns)\n                     ]\n                 ),\n             )\n"
}