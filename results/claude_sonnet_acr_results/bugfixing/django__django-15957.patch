{
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb90b0..5e386d9103 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -2520,7 +2520,24 @@ def prefetch_one_level(instances, prefetcher, lookup, level):\n             else:\n                 manager = getattr(obj, to_attr)\n                 if leaf and lookup.queryset is not None:\n-                    qs = manager._apply_rel_filters(lookup.queryset)\n+                    # Handle sliced querysets in prefetch\n+                    if lookup.queryset.query.is_sliced:\n+                        # Create a new unsliced queryset from the same model\n+                        base_qs = lookup.queryset.model._default_manager.get_queryset()\n+                        # Copy the filters from the sliced queryset to the new one\n+                        base_qs.query = lookup.queryset.query.clone()\n+                        # Clear the slice limits to make it unsliced\n+                        base_qs.query.clear_limits()\n+                        # Apply relation filters to the unsliced queryset\n+                        filtered_qs = manager._apply_rel_filters(base_qs)\n+                        # Now apply the original slice limits to the filtered queryset\n+                        if lookup.queryset.query.low_mark is not None:\n+                            filtered_qs.query.low_mark = lookup.queryset.query.low_mark\n+                        if lookup.queryset.query.high_mark is not None:\n+                            filtered_qs.query.high_mark = lookup.queryset.query.high_mark\n+                        qs = filtered_qs\n+                    else:\n+                        qs = manager._apply_rel_filters(lookup.queryset)\n                 else:\n                     qs = manager.get_queryset()\n                 qs._result_cache = vals\n"
}