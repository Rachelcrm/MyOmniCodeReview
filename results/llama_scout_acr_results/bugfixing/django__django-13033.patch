{
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..b3503b18a5 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -312,24 +312,26 @@ class SQLCompiler:\n \n             col, order = get_order_dir(field, asc)\n             descending = order == 'DESC'\n-\n-            if col in self.query.annotation_select:\n-                # Reference to expression in SELECT clause\n-                order_by.append((\n-                    OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),\n-                    True))\n-                continue\n-            if col in self.query.annotations:\n-                # References to an expression which is masked out of the SELECT\n-                # clause.\n-                expr = self.query.annotations[col]\n-                if isinstance(expr, Value):\n-                    # output_field must be resolved for constants.\n-                    expr = Cast(expr, expr.output_field)\n-                order_by.append((OrderBy(expr, descending=descending), False))\n-                continue\n-\n-            if '.' in field:\n+ \n+            expr = self.query.resolve_ref(col, self.model)\n+            if expr is None:\n+                # If we can't resolve the column, assume it's an annotation\n+                if col in self.query.annotation_select:\n+                    # Reference to expression in SELECT clause\n+                    order_by.append((\n+                        OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),\n+                        True))\n+                    continue\n+                if col in self.query.annotations:\n+                    # References to an expression which is masked out of the SELECT\n+                    # clause.\n+                    expr = self.query.annotations[col]\n+                    if isinstance(expr, Value):\n+                        # output_field must be resolved for constants.\n+                        expr = Cast(expr, expr.output_field)\n+                    order_by.append((OrderBy(expr, descending=descending), False))\n+                    continue\n+ \n                 # This came in through an extra(order_by=...) addition. Pass it\n                 # on verbatim.\n                 table, col = col.split('.', 1)\n@@ -339,21 +341,13 @@ class SQLCompiler:\n                         descending=descending\n                     ), False))\n                 continue\n-\n-            if not self.query.extra or col not in self.query.extra:\n-                # 'col' is of the form 'field' or 'field1__field2' or\n-                # '-field1__field2__field', etc.\n-                order_by.extend(self.find_ordering_name(\n-                    field, self.query.get_meta(), default_order=asc))\n-            else:\n-                if col not in self.query.extra_select:\n-                    order_by.append((\n-                        OrderBy(RawSQL(*self.query.extra[col]), descending=descending),\n-                        False))\n-                else:\n-                    order_by.append((\n-                        OrderBy(Ref(col, RawSQL(*self.query.extra[col])), descending=descending),\n-                        True))\n+ \n+            if isinstance(expr, F):\n+                # Add column used in ORDER BY clause without an alias to\n+                # the selected columns.\n+                self.query.add_select_col(expr)\n+                expr = Ref(expr.name, expr)\n+            order_by.append((OrderBy(expr, descending=descending), True))\n         result = []\n         seen = set()\n \n"
}