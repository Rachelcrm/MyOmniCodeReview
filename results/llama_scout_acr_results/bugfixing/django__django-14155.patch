{
  "patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..722bfeae0b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -30,28 +30,36 @@ from .utils import get_callable\n \n \n class ResolverMatch:\n+    import functools\n+    \n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n-        self.args = args\n-        self.kwargs = kwargs\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.args = func.args + args\n+            self.kwargs = dict(func.keywords, **kwargs)\n+        else:\n+            self.func = func\n+            self.args = args\n+            self.kwargs = kwargs\n+    \n         self.url_name = url_name\n         self.route = route\n         self.tried = tried\n-\n+    \n         # If a URLRegexResolver doesn't have a namespace or app_name, it passes\n         # in an empty value.\n         self.app_names = [x for x in app_names if x] if app_names else []\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n-\n-        if not hasattr(func, '__name__'):\n+    \n+        if not hasattr(self.func, '__name__'):\n             # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            self._func_path = self.func.__class__.__module__ + '.' + self.func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n-\n+            self._func_path = self.func.__module__ + '.' + self.func.__name__\n+    \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n \n"
}