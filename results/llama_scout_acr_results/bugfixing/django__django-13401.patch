{
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 28374272f4..f6508311f7 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -516,17 +516,25 @@ class Field(RegisterLookupMixin):\n     def __eq__(self, other):\n         # Needed for @total_ordering\n         if isinstance(other, Field):\n-            return self.creation_counter == other.creation_counter\n+            return (\n+                self.creation_counter == other.creation_counter and\n+                (self.model is other.model or self.model == other.model)\n+            )\n         return NotImplemented\n \n     def __lt__(self, other):\n         # This is needed because bisect does not take a comparison function.\n         if isinstance(other, Field):\n-            return self.creation_counter < other.creation_counter\n+            return (\n+                self.creation_counter < other.creation_counter or\n+                (self.creation_counter == other.creation_counter and\n+                 (self.model is not other.model and self.model < other.model))\n+            )\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash(self.creation_counter)\n+        model_hash = hash(self.model) if self.model is not None else 0\n+        return hash((self.creation_counter, model_hash))\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n"
}