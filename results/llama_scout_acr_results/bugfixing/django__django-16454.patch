{
  "patch": "To address the issue of management command subparsers not retaining error formatting, we need to modify the `CommandParser` class in Django's `django/core/management/base.py` file. The goal is to ensure that subparsers created via `add_subparsers()` have the same arguments as the parent parser, specifically `missing_args_message` and `called_from_command_line`, to prevent stack traces and provide human-facing usage messages instead.\n\nThe `CommandParser` class is a customized `ArgumentParser` that improves error messages and prevents `SystemExit` when a command is called programmatically. However, when creating subparsers, these custom arguments are not being passed down, leading to the issue.\n\nHere's the step-by-step reasoning:\n\n1. **Identify the Issue**: The problem lies in how subparsers are created and how they inherit arguments from their parent parser.\n2. **Understand `CommandParser`**: This class customizes `ArgumentParser` for management commands, improving error handling.\n3. **Locate Relevant Code**: The `add_subparsers` method in `ArgumentParser` is where subparsers are created. We need to ensure that when a subparser is created, it receives the `missing_args_message` and `called_from_command_line` arguments.\n\nGiven this understanding, we need to adjust the `CommandParser` class to properly pass its custom arguments to subparsers.\n\n```\n<file>django/core/management/base.py</file>\n<original>\n53 def __init__(\n54 self, *, missing_args_message=None, called_from_command_line=None, **kwargs\n55 ):\n56 self.missing_args_message = missing_args_message\n57 self.called_from_command_line = called_from_command_line\n58 super().__init__(**kwargs)\n59 \n60 def parse_args(self, args=None, namespace=None):\n61 # Catch missing argument for a better error message\n62 if self.missing_args_message and not (\n63 args or any(not arg.startswith(\"-\") for arg in args)\n64 ):\n65 self.error(self.missing_args_message)\n66 return super().parse_args(args, namespace)\n67 \n68 def error(self, message):\n69 if self.called_from_command_line:\n70 super().error(message)\n71 else:\n72 raise CommandError(\"Error: %s\" % message)\n</original>\n<patched>\n53 def __init__(\n54 self, *, missing_args_message=None, called_from_command_line=None, **kwargs\n55 ):\n56 self.missing_args_message = missing_args_message\n57 self.called_from_command_line = called_from_command_line\n58 super().__init__(**kwargs)\n\n59 def add_subparsers(self, *args, **kwargs):\n60 subparsers = super().add_subparsers(*args, **kwargs)\n61 subparsers.required = self.required\n62 subparsers.dest = self.dest\n63 subparsers.missing_args_message = self.missing_args_message\n64 subparsers.called_from_command_line = self.called_from_command_line\n65 return subparsers\n\n66 def parse_args(self, args=None, namespace=None):\n67 # Catch missing argument for a better error message\n68 if self.missing_args_message and not (\n69 args or any(not arg.startswith(\"-\") for arg in args)\n70 ):\n71 self.error(self.missing_args_message)\n72 return super().parse_args(args, namespace)\n\n73 def error(self, message):\n74 if self.called_from_command_line:\n75 super().error(message)\n76 else:\n77 raise CommandError(\"Error: %s\" % message)\n</patched>\n```"
}