{
  "patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 397146a354..7a7a88f104 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -414,9 +414,10 @@ class RelatedField(FieldCacheMixin, Field):\n             limit_choices_to = self.remote_field.limit_choices_to\n             defaults.update({\n                 'limit_choices_to': limit_choices_to,\n+                'queryset': self.remote_field.model._default_manager.distinct().all(),\n             })\n-        defaults.update(kwargs)\n-        return super().formfield(**defaults)\n+            defaults.update(kwargs)\n+            return super().formfield(**defaults)\n \n     def related_query_name(self):\n         \"\"\"\n@@ -988,7 +989,7 @@ class ForeignKey(ForeignObject):\n                              (self.name, self.remote_field.model))\n         return super().formfield(**{\n             'form_class': forms.ModelChoiceField,\n-            'queryset': self.remote_field.model._default_manager.using(using),\n+            'queryset': self.remote_field.model._default_manager.using(using).distinct(),\n             'to_field_name': self.remote_field.field_name,\n             **kwargs,\n             'blank': self.blank,\n@@ -1672,7 +1673,7 @@ class ManyToManyField(RelatedField):\n     def formfield(self, *, using=None, **kwargs):\n         defaults = {\n             'form_class': forms.ModelMultipleChoiceField,\n-            'queryset': self.remote_field.model._default_manager.using(using),\n+            'queryset': self.remote_field.model._default_manager.using(using).distinct(),\n             **kwargs,\n         }\n         # If initial is passed in, it's a list of related objects, but the\n"
}