{
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 278e47d88..cc928fcd0 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1506,7 +1506,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if sig is None:\n             return None\n \n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        return stringify_signature(sig, show_return_annotation=False, type_aliases=app.config.autodoc_type_aliases, **kwargs)\n \n     def format_signature(self, **kwargs: Any) -> str:\n         if self.doc_as_attr:\ndiff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 70cbc3ba1..1a7f9c1ff 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -40,8 +40,13 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n     if domain != 'py':\n         return\n-    if app.config.autodoc_typehints != 'description':\n+\n+    # The type alias feature is only applied when the configuration is set to\n+    # 'description' or 'none'.  In the case of 'signature', it is handled by\n+    # inspect.signature() invoked in the documenters.\n+    if app.config.autodoc_typehints not in ('description', 'none'):\n         return\n+\n     if objtype == 'class' and app.config.autoclass_content not in ('init', 'both'):\n         return\n \n"
}