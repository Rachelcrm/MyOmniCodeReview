{
  "patch": "To address the issue of `autodoc_typehints = \"description\"` causing Sphinx's `autoclass` to include the class's \"return type\" for code such as:\n\n```python\nclass Square:\n    \"\"\"A class representing a square figure.\"\"\"\n    def __init__(self, width: int, height: int) -> None:\n        self.width = width\n        self.height = height\n```\n\nThe solution involves modifying the `sphinx/ext/autodoc/typehints.py` file.\n\n```\n<file>sphinx/ext/autodoc/typehints.py</file>\n<original>\n    def merge_typehints(*typehints: Type) -> Type:\n        \"\"\"Merge typehints into a single typehint.\"\"\"\n        if not typehints:\n            return None\n\n        if len(typehints) == 1:\n            return typehints[0]\n\n        return Union[typehints]\n</original>\n<patched>\n    def merge_typehints(*typehints: Type) -> Type:\n        \"\"\"Merge typehints into a single typehint.\"\"\"\n        if autodoc_typehints == \"description\":\n            return None\n\n        if not typehints:\n            return None\n\n        if len(typehints) == 1:\n            return typehints[0]\n\n        return Union[typehints]\n</patched>\n```\n\nHowever, a more accurate solution would be to modify the `sphinx/ext/autodoc/__init__.py` file to handle the `autodoc_typehints` option when it is set to `\"description\"`.\n\n```\n<file>sphinx/ext/autodoc/__init__.py</file>\n<original>\n    def add_content(self, lines: List[str]) -> None:\n        \"\"\"Add content to the docstring.\"\"\"\n        # ... existing code ...\n</original>\n<patched>\n    def add_content(self, lines: List[str]) -> None:\n        \"\"\"Add content to the docstring.\"\"\"\n        if autodoc_typehints == \"description\":\n            # Omit return type\n            pass\n        # ... existing code ...\n</patched>\n```\n\nBut actually we need to change `sphinx/ext/autodoc/typehints.py`\n\n```\n<file>sphinx/ext/autodoc/typehints.py</file>\n<original>\n            type_hint = self.typehints[param.name]\n            if type_hint is not None:\n                param_docs.append(f\":{param.name}: {type_hint}\")\n</original>\n<patched>\n            type_hint = self.typehints[param.name]\n            if type_hint is not None and autodoc_typehints != \"description\":\n                param_docs.append(f\":{param.name}: {type_hint}\")\n</patched>\n```"
}