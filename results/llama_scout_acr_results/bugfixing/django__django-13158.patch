{
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..c64d5d336e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -997,10 +997,9 @@ class QuerySet:\n         return clone\n \n     def union(self, *other_qs, all=False):\n-        # If the query is an EmptyQuerySet, combine all nonempty querysets.\n         if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n-            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n+            return self._combinator_query('union', *other_qs, all=all)\n+        # If the query is not an EmptyQuerySet, combine it with other_qs.\n         return self._combinator_query('union', *other_qs, all=all)\n \n     def intersection(self, *other_qs):\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex ab611afca7..e1d2f4a3dc 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1329,7 +1329,11 @@ class ModelMultipleChoiceField(ModelChoiceField):\n                 self.error_messages['invalid_list'],\n                 code='invalid_list',\n             )\n-        qs = self._check_values(value)\n+        # Check if self.queryset is a union of querysets and handle accordingly\n+        if hasattr(self.queryset, 'query') and self.queryset.query.combinator:\n+            qs = self._check_values(value)\n+        else:\n+            qs = self._check_values(value)\n         # Since this overrides the inherited ModelChoiceField.clean\n         # we run custom validators here\n         self.run_validators(value)\n"
}