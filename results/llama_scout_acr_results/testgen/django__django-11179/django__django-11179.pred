{
  "instance_id": "django__django-11179",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_models.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.db.models.deletion import Collector\n\n@pytest.fixture\ndef simple_model():\n    class SimpleModel(models.Model):\n        name = models.CharField(max_length=100)\n    return SimpleModel\n\ndef test_delete_clears_pk(simple_model):\n    instance = simple_model.objects.create(name=\"Test Instance\")\n    assert instance.pk is not None\n    instance.delete()\n    # After deletion, pk should be None for instances without dependencies\n    assert instance.pk is None\n\ndef test_delete_does_not_clear_pk_for_dependent_instances(simple_model):\n    class DependentModel(models.Model):\n        simple_model = models.ForeignKey(simple_model, on_delete=models.CASCADE)\n        detail = models.CharField(max_length=100)\n    \n    instance = simple_model.objects.create(name=\"Test Instance\")\n    DependentModel.objects.create(simple_model=instance, detail=\"Dependent Instance\")\n    \n    assert instance.pk is not None\n    instance.delete()\n    # pk should not be cleared for instances with dependencies\n    assert instance.pk is not None\n\ndef test_collector_delete_clears_pk():\n    class TestModel(models.Model):\n        pass\n    \n    instance = TestModel.objects.create()\n    collector = Collector(using=instance._state.db)\n    collector.collect([instance])\n    collector.delete()\n    # After deletion by collector, pk should be None\n    assert instance.pk is None\n\ndef test_fast_delete_clears_pk(simple_model):\n    instance = simple_model.objects.create(name=\"Test Fast Delete Instance\")\n    assert instance.pk is not None\n    sql.DeleteQuery(simple_model).delete_batch([instance.pk], using='default')\n    # After fast deletion, pk should be None\n    assert instance.pk is None\n</patched>\n```",
  "patch": "--- a/tests/test_models.py\n+++ b/tests/test_models.py\n-# Empty if creating new file\n+import pytest\n+from django.db import models\n+from django.db.models.deletion import Collector\n+\n+@pytest.fixture\n+def simple_model():\n+    class SimpleModel(models.Model):\n+        name = models.CharField(max_length=100)\n+    return SimpleModel\n+\n+def test_delete_clears_pk(simple_model):\n+    instance = simple_model.objects.create(name=\"Test Instance\")\n+    assert instance.pk is not None\n+    instance.delete()\n+    # After deletion, pk should be None for instances without dependencies\n+    assert instance.pk is None\n+\n+def test_delete_does_not_clear_pk_for_dependent_instances(simple_model):\n+    class DependentModel(models.Model):\n+        simple_model = models.ForeignKey(simple_model, on_delete=models.CASCADE)\n+        detail = models.CharField(max_length=100)\n+    \n+    instance = simple_model.objects.create(name=\"Test Instance\")\n+    DependentModel.objects.create(simple_model=instance, detail=\"Dependent Instance\")\n+    \n+    assert instance.pk is not None\n+    instance.delete()\n+    # pk should not be cleared for instances with dependencies\n+    assert instance.pk is not None\n+\n+def test_collector_delete_clears_pk():\n+    class TestModel(models.Model):\n+        pass\n+    \n+    instance = TestModel.objects.create()\n+    collector = Collector(using=instance._state.db)\n+    collector.collect([instance])\n+    collector.delete()\n+    # After deletion by collector, pk should be None\n+    assert instance.pk is None\n+\n+def test_fast_delete_clears_pk(simple_model):\n+    instance = simple_model.objects.create(name=\"Test Fast Delete Instance\")\n+    assert instance.pk is not None\n+    sql.DeleteQuery(simple_model).delete_batch([instance.pk], using='default')\n+    # After fast deletion, pk should be None\n+    assert instance.pk is None\n"
}