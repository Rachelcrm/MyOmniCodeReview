{
  "instance_id": "django__django-12774",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of allowing `QuerySet.in_bulk()` for fields with total `UniqueConstraints`, we need to modify the `in_bulk()` method to consider `UniqueConstraint` instances. \n\nHere is a test suite that thoroughly covers the described issue:\n\n```\n<file>tests/test_query.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.db.models import UniqueConstraint\n\n@pytest.mark.test_field_name_with_total_unique_constraint\ndef test_field_name_with_total_unique_constraint():\n    class Article(models.Model):\n        slug = models.CharField(max_length=255)\n\n        class Meta:\n            constraints = [\n                models.UniqueConstraint(fields=[\"slug\"], name=\"%(app_label)s_%(class)s_slug_unq\")\n            ]\n\n    article = Article.objects.create(slug=\"test-slug\")\n\n    result = Article.objects.in_bulk(field_name=\"slug\")\n    assert result == {\"test-slug\": article}\n\n@pytest.mark.test_field_name_with_unique_true\ndef test_field_name_with_unique_true():\n    class Article(models.Model):\n        slug = models.CharField(max_length=255, unique=True)\n\n    article = Article.objects.create(slug=\"test-slug\")\n\n    result = Article.objects.in_bulk(field_name=\"slug\")\n    assert result == {\"test-slug\": article}\n\n@pytest.mark.test_field_name_with_unique_constraint_and_condition\ndef test_field_name_with_unique_constraint_and_condition():\n    class Article(models.Model):\n        published = models.BooleanField(default=False)\n        slug = models.CharField(max_length=255)\n\n        class Meta:\n            constraints = [\n                models.UniqueConstraint(fields=[\"slug\"], name=\"%(app_label)s_%(class)s_slug_unq\", condition=models.Q(published=True))\n            ]\n\n    article = Article.objects.create(published=True, slug=\"test-slug\")\n\n    result = Article.objects.in_bulk(field_name=\"slug\")\n    assert result == {\"test-slug\": article}\n\n@pytest.mark.test_invalid_field_name\ndef test_invalid_field_name():\n    class Article(models.Model):\n        slug = models.CharField(max_length=255)\n\n    with pytest.raises(ValueError):\n        Article.objects.in_bulk(field_name=\"slug\")\n\n@pytest.mark.test_in_bulk_with_id_list\ndef test_in_bulk_with_id_list():\n    class Article(models.Model):\n        id = models.AutoField(primary_key=True)\n        slug = models.CharField(max_length=255)\n\n        class Meta:\n            constraints = [\n                models.UniqueConstraint(fields=[\"slug\"], name=\"%(app_label)s_%(class)s_slug_unq\")\n            ]\n\n    article1 = Article.objects.create(slug=\"test-slug-1\")\n    article2 = Article.objects.create(slug=\"test-slug-2\")\n\n    result = Article.objects.in_bulk(field_name=\"slug\", id_list=[\"test-slug-1\", \"test-slug-2\"])\n    assert result == {\"test-slug-1\": article1, \"test-slug-2\": article2}\n</patched>\n```",
  "patch": "--- a/tests/test_query.py\n+++ b/tests/test_query.py\n-# Empty if creating new file\n+import pytest\n+from django.db import models\n+from django.db.models import UniqueConstraint\n+\n+@pytest.mark.test_field_name_with_total_unique_constraint\n+def test_field_name_with_total_unique_constraint():\n+    class Article(models.Model):\n+        slug = models.CharField(max_length=255)\n+\n+        class Meta:\n+            constraints = [\n+                models.UniqueConstraint(fields=[\"slug\"], name=\"%(app_label)s_%(class)s_slug_unq\")\n+            ]\n+\n+    article = Article.objects.create(slug=\"test-slug\")\n+\n+    result = Article.objects.in_bulk(field_name=\"slug\")\n+    assert result == {\"test-slug\": article}\n+\n+@pytest.mark.test_field_name_with_unique_true\n+def test_field_name_with_unique_true():\n+    class Article(models.Model):\n+        slug = models.CharField(max_length=255, unique=True)\n+\n+    article = Article.objects.create(slug=\"test-slug\")\n+\n+    result = Article.objects.in_bulk(field_name=\"slug\")\n+    assert result == {\"test-slug\": article}\n+\n+@pytest.mark.test_field_name_with_unique_constraint_and_condition\n+def test_field_name_with_unique_constraint_and_condition():\n+    class Article(models.Model):\n+        published = models.BooleanField(default=False)\n+        slug = models.CharField(max_length=255)\n+\n+        class Meta:\n+            constraints = [\n+                models.UniqueConstraint(fields=[\"slug\"], name=\"%(app_label)s_%(class)s_slug_unq\", condition=models.Q(published=True))\n+            ]\n+\n+    article = Article.objects.create(published=True, slug=\"test-slug\")\n+\n+    result = Article.objects.in_bulk(field_name=\"slug\")\n+    assert result == {\"test-slug\": article}\n+\n+@pytest.mark.test_invalid_field_name\n+def test_invalid_field_name():\n+    class Article(models.Model):\n+        slug = models.CharField(max_length=255)\n+\n+    with pytest.raises(ValueError):\n+        Article.objects.in_bulk(field_name=\"slug\")\n+\n+@pytest.mark.test_in_bulk_with_id_list\n+def test_in_bulk_with_id_list():\n+    class Article(models.Model):\n+        id = models.AutoField(primary_key=True)\n+        slug = models.CharField(max_length=255)\n+\n+        class Meta:\n+            constraints = [\n+                models.UniqueConstraint(fields=[\"slug\"], name=\"%(app_label)s_%(class)s_slug_unq\")\n+            ]\n+\n+    article1 = Article.objects.create(slug=\"test-slug-1\")\n+    article2 = Article.objects.create(slug=\"test-slug-2\")\n+\n+    result = Article.objects.in_bulk(field_name=\"slug\", id_list=[\"test-slug-1\", \"test-slug-2\"])\n+    assert result == {\"test-slug-1\": article1, \"test-slug-2\": article2}\n"
}