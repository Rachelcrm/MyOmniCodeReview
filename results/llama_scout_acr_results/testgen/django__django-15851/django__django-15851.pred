{
  "instance_id": "django__django-15851",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of `dbshell` additional parameters not being passed before the database name on PostgreSQL, we need to create comprehensive tests that cover the described functionality. \n\nThe tests should be written as a git patch that can be applied to the repository. We will create or modify test files as needed. The tests will be comprehensive, covering the described functionality, and will use pytest fixtures and assertions appropriately.\n\nHere is the test suite:\n\n```\n<file>tests/test_management_commands.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.core.management import call_command\nfrom django.db import connections\n\n@pytest.mark.skipif(\n    not connections.allowed_names,\n    reason=\"No database configured\",\n)\ndef test_dbshell_passes_parameters_before_dbname():\n    # Arrange\n    database = connections.allowed_names[0]\n    params = [\"-c\", \"SELECT * FROM some_table;\"]\n\n    # Act\n    try:\n        call_command(\"dbshell\", *params, database)\n    except Exception as e:\n        pytest.fail(f\"Command failed: {e}\")\n\n    # Assert\n    # We can't directly assert the output, but we can check if the command runs without errors\n    pass\n\n@pytest.mark.skipif(\n    not connections.allowed_names,\n    reason=\"No database configured\",\n)\ndef test_dbshell_fails_with_extra_command_line_arguments():\n    # Arrange\n    database = connections.allowed_names[0]\n    params = [\"--\", \"-c\", \"SELECT * FROM some_table;\"]\n\n    # Act and Assert\n    with pytest.raises(SystemExit):\n        call_command(\"dbshell\", *params, database)\n\n</patched>\n```",
  "patch": "--- a/tests/test_management_commands.py\n+++ b/tests/test_management_commands.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.core.management import call_command\n+from django.db import connections\n+\n+@pytest.mark.skipif(\n+    not connections.allowed_names,\n+    reason=\"No database configured\",\n+)\n+def test_dbshell_passes_parameters_before_dbname():\n+    # Arrange\n+    database = connections.allowed_names[0]\n+    params = [\"-c\", \"SELECT * FROM some_table;\"]\n+\n+    # Act\n+    try:\n+        call_command(\"dbshell\", *params, database)\n+    except Exception as e:\n+        pytest.fail(f\"Command failed: {e}\")\n+\n+    # Assert\n+    # We can't directly assert the output, but we can check if the command runs without errors\n+    pass\n+\n+@pytest.mark.skipif(\n+    not connections.allowed_names,\n+    reason=\"No database configured\",\n+)\n+def test_dbshell_fails_with_extra_command_line_arguments():\n+    # Arrange\n+    database = connections.allowed_names[0]\n+    params = [\"--\", \"-c\", \"SELECT * FROM some_table;\"]\n+\n+    # Act and Assert\n+    with pytest.raises(SystemExit):\n+        call_command(\"dbshell\", *params, database)\n"
}