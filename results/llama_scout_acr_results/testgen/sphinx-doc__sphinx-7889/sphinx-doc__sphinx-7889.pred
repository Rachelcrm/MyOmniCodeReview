{
  "instance_id": "sphinx-doc__sphinx-7889",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of the Autodoc extension's mock file throwing a TypeError for generic-typed classes, we need to write comprehensive pytest unit tests. \n\nThe tests should be placed in the appropriate test file within the existing test suite. \n\nLet's assume that we have a test file `test_mock.py` in the `tests` directory.\n\n```\n<file>tests/test_mock.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom sphinx.ext.autodoc import mock\nfrom typing import TypeVar, Generic\n\nT = TypeVar('T')\n\nclass GenericClass(Generic[T]):\n    pass\n\ndef test_make_subclass_with_generic_type():\n    # Given\n    name = 'GenericClass'\n    module = 'tests.test_mock'\n    superclass = GenericClass\n\n    # When\n    subclass = mock._make_subclass(name, module, superclass)\n\n    # Then\n    assert subclass.__module__ == module\n    assert subclass.__display_name__ == f'{module}.{name}'\n\ndef test_make_subclass_with_non_generic_type():\n    # Given\n    name = 'NonGenericClass'\n    module = 'tests.test_mock'\n    superclass = object\n\n    # When\n    subclass = mock._make_subclass(name, module, superclass)\n\n    # Then\n    assert subclass.__module__ == module\n    assert subclass.__display_name__ == f'{module}.{name}'\n\ndef test_make_subclass_with_typevar():\n    # Given\n    name = 'TypeVarClass'\n    module = 'tests.test_mock'\n    superclass = T\n\n    # When\n    with pytest.raises(TypeError):\n        mock._make_subclass(name, module, superclass)\n\n    # After the fix\n    # When\n    subclass = mock._make_subclass(name, module, str)\n\n    # Then\n    assert subclass.__module__ == module\n    assert subclass.__display_name__ == f'{module}.{name}'\n\n</patched>\n```\n\nIn the test above, we test the `_make_subclass` method with a generic type, a non-generic type, and a `TypeVar`. \n\nBefore the fix, the test with `TypeVar` will fail with a TypeError. \n\nAfter the fix, the test should pass. \n\nThe fix involves modifying the `_make_subclass` method to handle `TypeVar` objects correctly.\n\nWe also need to test the fix with a real use case.\n\nLet's assume that we have a documentation configuration file `conf.py`.\n\n```\n<file>doc/conf.py</file>\n<original>\nextensions = ['sphinx.ext.autodoc']\n</original>\n<patched>\nextensions = ['sphinx.ext.autodoc']\n\nautodoc_mock_imports = ['screenpy']\n</patched>\n```\n\nIn the patched version, we add the `autodoc_mock_imports` option to mock the `screenpy` module.\n\nWe also need to test the documentation build process.\n\nLet's assume that we have a test file `test_docs.py`.\n\n```\n<file>tests/test_docs.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom docutils.nodes import document\nfrom sphinx.addnodes import only\nfrom sphinx.builders.html import HTMLBuilder\nfrom sphinx.cmd.build import build_main\nfrom sphinx.config import Config\n\n@pytest.mark.sphinx\ndef test_build_docs(app: Config, builder: HTMLBuilder):\n    # Given\n    app.config.html_per_page = 0\n\n    # When\n    build_main(['-b', 'html', '-d', 'build/doctrees', 'doc'], app)\n\n    # Then\n    assert only.has_content(builder.result)\n</patched>\n```\n\nIn the test above, we test the documentation build process using the `build_main` function.\n\nThe test should pass after the fix. \n\nNote that these tests are just examples and may need to be adapted to the specific use case. \n\nAlso, the fix involves modifying the `_make_subclass` method to handle `TypeVar` objects correctly.\n\nThe modified method should look like this:\n\n```python\ndef _make_subclass(name: str, module: str, superclass: Any = _MockObject,\n                   attributes: Any = None) -> Any:\n    if hasattr(superclass, '__origin__'): # check if superclass is a typing._GenericAlias\n        module = str(superclass.__origin__)\n    attrs = {'__module__': module, '__display_name__': module + '.' + name}\n    attrs.update(attributes or {})\n    return type(name, (superclass,), attrs)\n```",
  "patch": "--- a/tests/test_mock.py\n+++ b/tests/test_mock.py\n-# Empty if creating new file\n+import pytest\n+from sphinx.ext.autodoc import mock\n+from typing import TypeVar, Generic\n+\n+T = TypeVar('T')\n+\n+class GenericClass(Generic[T]):\n+    pass\n+\n+def test_make_subclass_with_generic_type():\n+    # Given\n+    name = 'GenericClass'\n+    module = 'tests.test_mock'\n+    superclass = GenericClass\n+\n+    # When\n+    subclass = mock._make_subclass(name, module, superclass)\n+\n+    # Then\n+    assert subclass.__module__ == module\n+    assert subclass.__display_name__ == f'{module}.{name}'\n+\n+def test_make_subclass_with_non_generic_type():\n+    # Given\n+    name = 'NonGenericClass'\n+    module = 'tests.test_mock'\n+    superclass = object\n+\n+    # When\n+    subclass = mock._make_subclass(name, module, superclass)\n+\n+    # Then\n+    assert subclass.__module__ == module\n+    assert subclass.__display_name__ == f'{module}.{name}'\n+\n+def test_make_subclass_with_typevar():\n+    # Given\n+    name = 'TypeVarClass'\n+    module = 'tests.test_mock'\n+    superclass = T\n+\n+    # When\n+    with pytest.raises(TypeError):\n+        mock._make_subclass(name, module, superclass)\n+\n+    # After the fix\n+    # When\n+    subclass = mock._make_subclass(name, module, str)\n+\n+    # Then\n+    assert subclass.__module__ == module\n+    assert subclass.__display_name__ == f'{module}.{name}'\n\n--- a/doc/conf.py\n+++ b/doc/conf.py\n-extensions = ['sphinx.ext.autodoc']\n+extensions = ['sphinx.ext.autodoc']\n+\n+autodoc_mock_imports = ['screenpy']\n\n--- a/tests/test_docs.py\n+++ b/tests/test_docs.py\n-# Empty if creating new file\n+import pytest\n+from docutils.nodes import document\n+from sphinx.addnodes import only\n+from sphinx.builders.html import HTMLBuilder\n+from sphinx.cmd.build import build_main\n+from sphinx.config import Config\n+\n+@pytest.mark.sphinx\n+def test_build_docs(app: Config, builder: HTMLBuilder):\n+    # Given\n+    app.config.html_per_page = 0\n+\n+    # When\n+    build_main(['-b', 'html', '-d', 'build/doctrees', 'doc'], app)\n+\n+    # Then\n+    assert only.has_content(builder.result)\n\n--- a/\n+++ b/\n-ke_subc\n+\n\n--- a/_subc\n+++ b/_subc\n-ss(\n+k\n\n--- a/: str, modu\n+++ b/: str, modu\n-me: st\n+l\n\n--- a/: str, sup\n+++ b/: str, sup\n-du\n+m\n\n--- a/ass: Any = _MockObj\n+++ b/ass: Any = _MockObj\n-, supe\n+r, mo\n\n--- a/but\n+++ b/but\n+: s\n\n--- a/) -> Any:\n+++ b/) -> Any:\n-y = _M\n+\n\n--- a/hasattr(sup\n+++ b/hasattr(sup\n-tt\n+l\n\n--- a/ass, '__or\n+++ b/ass, '__or\n-butes: A\n+kObj\n\n--- a/n__'): # ch\n+++ b/n__'): # ch\n+\n\n--- a/\n+++ b/\n-y:\n-    \n+\n\n--- a/rc\n+++ b/rc\n-s\n+ribu\n\n--- a/s a typ\n+++ b/s a typ\n-(supe\n+s: Any = Non\n\n--- a/n\n+++ b/n\n+\n\n--- a/cA\n+++ b/cA\n+\n\n--- a/as\n        modu\n+++ b/as\n        modu\n+r(su\n\n--- a/= str(sup\n+++ b/= str(sup\n+r\n\n--- a/ass.__or\n+++ b/ass.__or\n-f supe\n+ss, '__origin__'): # \n\n--- a/n__)\n    attrs = {'__modu\n+++ b/n__)\n    attrs = {'__modu\n+\n\n--- a/__': modu\n+++ b/__': modu\n-s \n+k if su\n\n--- a/, '__d\n+++ b/, '__d\n+r\n\n--- a/ay_nam\n+++ b/ay_nam\n-._Ge\n+ss is \n\n--- a/\n+++ b/\n+y\n\n--- a/}\n    attrs.updat\n+++ b/}\n    attrs.updat\n+n\n\n--- a/but\n+++ b/but\n-s\n-        m\n+Ali\n\n--- a/turn typ\n+++ b/turn typ\n-e = st\n+ul\n\n--- a/, (sup\n+++ b/, (sup\n-c\n+r(su\n"
}