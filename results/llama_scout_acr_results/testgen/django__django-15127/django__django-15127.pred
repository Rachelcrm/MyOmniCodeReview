{
  "instance_id": "django__django-15127",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_message_tags.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.contrib.messages import constants, storage\nfrom django.contrib.messages.utils import get_level_tags\nfrom django.test import TestCase, override_settings\n\ndef test_get_level_tags_defaults():\n default_tags = get_level_tags()\n assert default_tags[constants.INFO] == 'info'\n assert default_tags[constants.WARNING] == 'warning'\n # Add more assertions for other levels\n\n@override_settings(MESSAGE_TAGS={'20': 'custom_tag'})\ndef test_get_level_tags_with_override():\n overridden_tags = get_level_tags()\n assert overridden_tags[20] == 'custom_tag'\n\nclass MessageTagsTest(TestCase):\n def test_default_message_tags(self):\n message = storage.Message(constants.INFO, \"Test message\")\n assert message.level_tag == 'info'\n\n @override_settings(MESSAGE_TAGS={'20': 'custom_tag'})\n def test_message_tags_override(self):\n message = storage.Message(20, \"Test message\")\n assert message.level_tag == 'custom_tag'\n\nclass TestMessageLevelTags:\n @pytest.fixture\n def message(self):\n return storage.Message(constants.INFO, \"Test message\")\n\n def test_level_tag_property(self, message):\n assert message.level_tag == 'info'\n\n @override_settings(MESSAGE_TAGS={constants.INFO: 'custom_info'})\n def test_level_tag_with_override(self, message):\n assert message.level_tag == 'custom_info'\n</patched>\n```",
  "patch": "--- a/tests/test_message_tags.py\n+++ b/tests/test_message_tags.py\n-# Empty if creating new file\n+import pytest\n+from django.contrib.messages import constants, storage\n+from django.contrib.messages.utils import get_level_tags\n+from django.test import TestCase, override_settings\n+\n+def test_get_level_tags_defaults():\n+ default_tags = get_level_tags()\n+ assert default_tags[constants.INFO] == 'info'\n+ assert default_tags[constants.WARNING] == 'warning'\n+ # Add more assertions for other levels\n+\n+@override_settings(MESSAGE_TAGS={'20': 'custom_tag'})\n+def test_get_level_tags_with_override():\n+ overridden_tags = get_level_tags()\n+ assert overridden_tags[20] == 'custom_tag'\n+\n+class MessageTagsTest(TestCase):\n+ def test_default_message_tags(self):\n+ message = storage.Message(constants.INFO, \"Test message\")\n+ assert message.level_tag == 'info'\n+\n+ @override_settings(MESSAGE_TAGS={'20': 'custom_tag'})\n+ def test_message_tags_override(self):\n+ message = storage.Message(20, \"Test message\")\n+ assert message.level_tag == 'custom_tag'\n+\n+class TestMessageLevelTags:\n+ @pytest.fixture\n+ def message(self):\n+ return storage.Message(constants.INFO, \"Test message\")\n+\n+ def test_level_tag_property(self, message):\n+ assert message.level_tag == 'info'\n+\n+ @override_settings(MESSAGE_TAGS={constants.INFO: 'custom_info'})\n+ def test_level_tag_with_override(self, message):\n+ assert message.level_tag == 'custom_info'\n"
}