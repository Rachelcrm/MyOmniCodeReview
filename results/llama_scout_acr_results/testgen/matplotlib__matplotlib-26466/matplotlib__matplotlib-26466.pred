{
  "instance_id": "matplotlib__matplotlib-26466",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_axes.py</file>\n<original>\n# Original code here\n</original>\n<patched>\nimport pytest\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef test_annotate_xy_array_modification():\n    # Test that modifying the xy array does not affect the annotation\n    fig, ax = plt.subplots()\n    xy_0 = np.array((-4, 1))\n    xy_f = np.array((-1, 1))\n    ax.annotate(s='', xy=xy_0, xytext=xy_f, arrowprops=dict(arrowstyle='<->'))\n    xy_0[1] = 3\n    assert np.array_equal(xy_0, np.array((-4, 3)))\n\ndef test_annotate_xy_array_copy():\n    # Test that using a copy of the xy array does not affect the annotation\n    fig, ax = plt.subplots()\n    xy_0 = np.array((1, 1))\n    xy_f = np.array((4, 1))\n    ax.annotate(s='', xy=xy_0.copy(), xytext=xy_f, arrowprops=dict(arrowstyle='<->'))\n    xy_0[1] = 3\n    assert np.array_equal(xy_0, np.array((1, 3)))\n\ndef test_annotate_default_xy():\n    # Test default xy\n    fig, ax = plt.subplots()\n    ax.annotate(\"text\")\n\ndef test_annotate_xy_none_xytext():\n    # Test xy and xytext\n    fig, ax = plt.subplots()\n    ax.annotate(\"text\", xy=(0, 0), xytext=(1, 1))\n\ndef test_annotate_arrowprops():\n    # Test arrowprops\n    fig, ax = plt.subplots()\n    ax.annotate(\"text\", xy=(0, 0), xytext=(1, 1), arrowprops=dict(arrowstyle='<->'))\n\ndef test_annotate_clip_on():\n    # Test clip_on\n    fig, ax = plt.subplots()\n    ax.annotate(\"text\", xy=(0, 0), xytext=(1, 1), clip_on=True)\n</patched>\n```",
  "patch": "--- a/tests/test_axes.py\n+++ b/tests/test_axes.py\n-# Original code here\n+import pytest\n+import numpy as np\n+import matplotlib.pyplot as plt\n+\n+def test_annotate_xy_array_modification():\n+    # Test that modifying the xy array does not affect the annotation\n+    fig, ax = plt.subplots()\n+    xy_0 = np.array((-4, 1))\n+    xy_f = np.array((-1, 1))\n+    ax.annotate(s='', xy=xy_0, xytext=xy_f, arrowprops=dict(arrowstyle='<->'))\n+    xy_0[1] = 3\n+    assert np.array_equal(xy_0, np.array((-4, 3)))\n+\n+def test_annotate_xy_array_copy():\n+    # Test that using a copy of the xy array does not affect the annotation\n+    fig, ax = plt.subplots()\n+    xy_0 = np.array((1, 1))\n+    xy_f = np.array((4, 1))\n+    ax.annotate(s='', xy=xy_0.copy(), xytext=xy_f, arrowprops=dict(arrowstyle='<->'))\n+    xy_0[1] = 3\n+    assert np.array_equal(xy_0, np.array((1, 3)))\n+\n+def test_annotate_default_xy():\n+    # Test default xy\n+    fig, ax = plt.subplots()\n+    ax.annotate(\"text\")\n+\n+def test_annotate_xy_none_xytext():\n+    # Test xy and xytext\n+    fig, ax = plt.subplots()\n+    ax.annotate(\"text\", xy=(0, 0), xytext=(1, 1))\n+\n+def test_annotate_arrowprops():\n+    # Test arrowprops\n+    fig, ax = plt.subplots()\n+    ax.annotate(\"text\", xy=(0, 0), xytext=(1, 1), arrowprops=dict(arrowstyle='<->'))\n+\n+def test_annotate_clip_on():\n+    # Test clip_on\n+    fig, ax = plt.subplots()\n+    ax.annotate(\"text\", xy=(0, 0), xytext=(1, 1), clip_on=True)\n"
}