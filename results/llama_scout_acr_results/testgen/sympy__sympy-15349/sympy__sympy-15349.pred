{
  "instance_id": "sympy__sympy-15349",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```<file>tests/test_quaternion.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom sympy.algebras.quaternion import Quaternion\nfrom sympy import symbols, trigsimp, cos, sin, Matrix\n\ndef test_to_rotation_matrix_basics():\n    x = symbols('x')\n    q = Quaternion(cos(x/2), sin(x/2), 0, 0)\n    rotation_matrix = trigsimp(q.to_rotation_matrix())\n    expected_matrix = Matrix([\n        [cos(x), -sin(x), 0],\n        [sin(x), cos(x), 0],\n        [0, 0, 1]])\n    assert rotation_matrix == expected_matrix\n\ndef test_to_rotation_matrix_quaternion_v():\n    x = symbols('x')\n    q = Quaternion(cos(x/2), 0, 0, sin(x/2))\n    rotation_matrix = trigsimp(q.to_rotation_matrix())\n    expected_matrix = Matrix([\n        [1, 0, 0],\n        [0, cos(x), -sin(x)],\n        [0, sin(x), cos(x)]])\n    assert rotation_matrix == expected_matrix\n\ndef test_to_rotation_matrix_v_point():\n    x = symbols('x')\n    q = Quaternion(cos(x/2), 0, 0, sin(x/2))\n    v = (1, 1, 1)\n    transformation_matrix = trigsimp(q.to_rotation_matrix(v))\n    expected_matrix = Matrix([\n        [1, 0, 0, 0],\n        [0, cos(x), -sin(x), 0],\n        [0, sin(x), cos(x), 0],\n        [0, 0, 0, 1]])\n    assert transformation_matrix == expected_matrix\n\ndef test_to_rotation_matrix_invalid_quaternion():\n    with pytest.raises(ValueError):\n        Quaternion(0, 0, 0, 0).to_rotation_matrix()\n\ndef test_to_rotation_matrix_not_normalized_quaternion():\n    q = Quaternion(2, 0, 0, 0)\n    rotation_matrix = trigsimp(q.to_rotation_matrix())\n    expected_matrix = Matrix([\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n    assert rotation_matrix == expected_matrix\n</patched>\n```",
  "patch": "--- a/g\n+++ b/g\n+l>\n+<\n\n--- a/>\n<\n+++ b/>\n<\n+l>\n+<\n\n--- a/g\n+++ b/g\n+\n\n--- a/>\n<patch\n+++ b/>\n<patch\n+\n\n--- a/mport pyt\n+++ b/mport pyt\n+\n\n--- a/rom sympy.a\n+++ b/rom sympy.a\n+or\n\n--- a/bras.quat\n+++ b/bras.quat\n+y\n\n--- a/on\n+++ b/on\n+s\n\n--- a/rn\n+++ b/rn\n-tched>\n+y.\n\n--- a/rom sympy\n+++ b/rom sympy\n+br\n\n--- a/s, tr\n+++ b/s, tr\n+\n\n--- a/mp, cos, s\n+++ b/mp, cos, s\n+rnion im\n\n--- a/x\n\nd\n+++ b/x\n\nd\n-eb\n+ Qu\n\n--- a/t\n+++ b/t\n-s.qu\n+\n\n--- a/on_matr\n+++ b/on_matr\n+y im\n\n--- a/cs():\n    x = symbo\n+++ b/cs():\n    x = symbo\n+ symbols, \n\n--- a/rn\n+++ b/rn\n+, \n\n--- a/n(x\n+++ b/n(x\n+\n\n--- a/on_matr\n+++ b/on_matr\n-te\n+\n\n--- a/gs\n+++ b/gs\n+\n\n--- a/on_matr\n+++ b/on_matr\n+_\n\n--- a/xp\n+++ b/xp\n+\n\n--- a/d_matr\n+++ b/d_matr\n-mp\n+ion_m\n\n--- a/x([\n        [cos(x), -s\n+++ b/x([\n        [cos(x), -s\n-t symb\n+rix_b\n\n--- a/n(x), cos(x), 0],\n        [0, 0, 1]])\n    ass\n+++ b/n(x), cos(x), 0],\n        [0, 0, 1]])\n    ass\n-s, t\n+s():\n+    x = symbols('x')\n+    q = Qu\n\n--- a/on_matr\n+++ b/on_matr\n+\n\n--- a/xp\n+++ b/xp\n-mp, c\n+os(x\n\n--- a/d_matr\n+++ b/d_matr\n+\n\n--- a/\n+++ b/\n-t\n+ion_m\n\n--- a/st_to_rotat\n+++ b/st_to_rotat\n-x\n-\n-def test_t\n+rix = \n\n--- a/x_quat\n+++ b/x_quat\n+(q.\n\n--- a/on_v():\n    x = symbo\n+++ b/on_v():\n    x = symbo\n-t\n+\n\n--- a/rn\n+++ b/rn\n+ion_m\n\n--- a/n(x\n+++ b/n(x\n-t\n+rix())\n+    \n\n--- a/on_matr\n+++ b/on_matr\n-x_b\n+\n\n--- a/gs\n+++ b/gs\n-cs():\n-    x = symb\n+\n\n--- a/on_matr\n+++ b/on_matr\n-s('x')\n-    q = Qu\n+\n\n--- a/xp\n+++ b/xp\n+\n\n--- a/d_matr\n+++ b/d_matr\n+\n\n--- a/x([\n        [1, 0, 0],\n        [0, cos(x), -s\n+++ b/x([\n        [1, 0, 0],\n        [0, cos(x), -s\n-(c\n+os(x), -sin(x), 0],\n+        [sin(x), \n\n--- a/n(x), cos(x)]])\n    ass\n+++ b/n(x), cos(x)]])\n    ass\n+ss\n\n--- a/on_matr\n+++ b/on_matr\n+ ro\n\n--- a/xp\n+++ b/xp\n-t\n+\n\n--- a/d_matr\n+++ b/d_matr\n+\n\n--- a/\n+++ b/\n-t\n+x\n\n--- a/st_to_rotat\n+++ b/st_to_rotat\n-x = t\n+\n\n--- a/x_v_po\n+++ b/x_v_po\n+\n\n--- a/s('x')\n    q = Quat\n+++ b/s('x')\n    q = Quat\n-mp(q.t\n+_m\n\n--- a/on(cos(x\n+++ b/on(cos(x\n+rix\n\n--- a/n(x\n+++ b/n(x\n-t\n+f \n\n--- a/ormat\n+++ b/ormat\n+s\n\n--- a/x = tr\n+++ b/x = tr\n-t\n+o_ro\n\n--- a/mp(q.to_rotat\n+++ b/mp(q.to_rotat\n-x())\n-    expected_m\n+\n\n--- a/x(v))\n+++ b/x(v))\n+\n\n--- a/ct\n+++ b/ct\n-t\n+\n\n--- a/x = Matr\n+++ b/x = Matr\n-x([\n-        [c\n+rnion_v():\n+    x = symbols('x')\n+    q = Qu\n\n--- a/n(x), 0],\n        [0, s\n+++ b/n(x), 0],\n        [0, s\n+\n\n--- a/rt trans\n+++ b/rt trans\n+os(x\n\n--- a/on_matr\n+++ b/on_matr\n-s(x), 0],\n-        [0, 0, 1]])\n-    \n+\n\n--- a/xp\n+++ b/xp\n-t \n+ion_m\n\n--- a/d_matr\n+++ b/d_matr\n-t\n+rix = \n\n--- a/\n+++ b/\n+(q.\n\n--- a/st_to_rotat\n+++ b/st_to_rotat\n-_m\n+\n\n--- a/x_\n+++ b/x_\n+ion_m\n\n--- a/\n+++ b/\n-t\n+rix())\n+    \n\n--- a/rn\n+++ b/rn\n-x\n-\n-def test_t\n+\n\n--- a/th pyt\n+++ b/th pyt\n+\n\n--- a/s\n+++ b/s\n-t\n+\n\n--- a/u\n+++ b/u\n+\n\n--- a/rn\n+++ b/rn\n-t\n+\n\n--- a/on_matr\n+++ b/on_matr\n-x_qu\n+os(x), -sin(x)],\n+        [0, sin(x), \n\n--- a/\n+++ b/\n+ss\n\n--- a/st_to_rotat\n+++ b/st_to_rotat\n+ ro\n\n--- a/x_not_norma\n+++ b/x_not_norma\n-_v():\n-    x = symb\n+\n\n--- a/z\n+++ b/z\n-s('x')\n-    q = Qu\n+\n\n--- a/rn\n+++ b/rn\n+x\n\n--- a/rn\n+++ b/rn\n+\n\n--- a/on_matr\n+++ b/on_matr\n-(c\n+\n\n--- a/gs\n+++ b/gs\n+_m\n\n--- a/on_matr\n+++ b/on_matr\n+rix\n\n--- a/xp\n+++ b/xp\n-t\n+f \n\n--- a/d_matr\n+++ b/d_matr\n+s\n\n--- a/x([\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n    ass\n+++ b/x([\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n    ass\n-t\n+o_ro\n\n--- a/on_matr\n+++ b/on_matr\n-x = t\n+\n\n--- a/xp\n+++ b/xp\n+\n\n--- a/d_matr\n+++ b/d_matr\n-mp(q.t\n+oin\n"
}