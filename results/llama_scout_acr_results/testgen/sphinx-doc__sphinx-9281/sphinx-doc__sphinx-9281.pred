{
  "instance_id": "sphinx-doc__sphinx-9281",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_autodoc.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom sphinx import addnodes\nfrom sphinx.ext.autodoc import FunctionDocumenter\nfrom sphinx.testing import util\nfrom sphinx.testing.util import Mock\n\n@pytest.fixture\ndef app():\n    return Mock()\n\ndef test_merge_default_value_enum(app):\n    # Given\n    class Dummy:\n        pass\n\n    class MyEnum(int, Enum):\n        ValueA = 10\n        ValueB = 20\n\n    def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n        ...\n\n    # When\n    documenter = FunctionDocumenter(app, '')\n    documenter.object = ugly_enum_func\n    documenter.objpath = ['ugly_enum_func']\n\n    # Then\n    signature = inspect.signature(ugly_enum_func)\n    actual = signature.parameters['e'].default\n    assert isinstance(actual, MyEnum)\n    assert actual == MyEnum.ValueA\n\n    overload = inspect.Signature(\n        parameters=[\n            inspect.Parameter('e', inspect.Parameter.POSITIONAL_OR_KEYWORD, default=MyEnum.ValueA)\n        ]\n    )\n\n    merged = documenter.merge_default_value(signature, overload)\n    assert str(merged.parameters['e'].default) == \"MyEnum.ValueA\"\n\n</patched>\n</file>\n\n<file>tests/test_type_comment.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom sphinx.ext.autodoc import type_comment\n\ndef test_type_comment_enum():\n    # Given\n    class MyEnum(Enum):\n        ValueA = 10\n        ValueB = 20\n\n    # When\n    type_comment_ = type_comment.TypeComment(MyEnum)\n\n    # Then\n    assert type_comment_.render() == \"MyEnum\"\n\n</patched>\n</file>",
  "patch": "--- a/tests/test_autodoc.py\n+++ b/tests/test_autodoc.py\n+import pytest\n+from sphinx import addnodes\n+from sphinx.ext.autodoc import FunctionDocumenter\n+from sphinx.testing import util\n+from sphinx.testing.util import Mock\n+\n+@pytest.fixture\n+def app():\n+    return Mock()\n+\n+def test_merge_default_value_enum(app):\n+    # Given\n+    class Dummy:\n+        pass\n+\n+    class MyEnum(int, Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:\n+        ...\n+\n+    # When\n+    documenter = FunctionDocumenter(app, '')\n+    documenter.object = ugly_enum_func\n+    documenter.objpath = ['ugly_enum_func']\n+\n+    # Then\n+    signature = inspect.signature(ugly_enum_func)\n+    actual = signature.parameters['e'].default\n+    assert isinstance(actual, MyEnum)\n+    assert actual == MyEnum.ValueA\n+\n+    overload = inspect.Signature(\n+        parameters=[\n+            inspect.Parameter('e', inspect.Parameter.POSITIONAL_OR_KEYWORD, default=MyEnum.ValueA)\n+        ]\n+    )\n+\n+    merged = documenter.merge_default_value(signature, overload)\n+    assert str(merged.parameters['e'].default) == \"MyEnum.ValueA\"\n\n--- a/tests/test_type_comment.py\n+++ b/tests/test_type_comment.py\n+import pytest\n+from sphinx.ext.autodoc import type_comment\n+\n+def test_type_comment_enum():\n+    # Given\n+    class MyEnum(Enum):\n+        ValueA = 10\n+        ValueB = 20\n+\n+    # When\n+    type_comment_ = type_comment.TypeComment(MyEnum)\n+\n+    # Then\n+    assert type_comment_.render() == \"MyEnum\"\n"
}