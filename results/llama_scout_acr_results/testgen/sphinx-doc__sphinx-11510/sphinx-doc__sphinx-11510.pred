{
  "instance_id": "sphinx-doc__sphinx-11510",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_source_read_event.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom sphinx.application import Sphinx\nfrom sphinx.events import EventManager\n\n@pytest.fixture\ndef app():\n    return Sphinx(\"\", \"\", \"\", \"\", \"\")\n\ndef test_source_read_event(app):\n    # GIVEN\n    source = [\"This is a test &REPLACE_ME;\"]\n\n    # WHEN\n    app.events.emit('source-read', 'test_doc', source)\n\n    # THEN\n    assert source[0] == \"This is a test REPLACED\"\n\ndef test_source_read_event_included_file(app):\n    # GIVEN\n    source = [\"This is a test &REPLACE_ME;\"]\n\n    # WHEN\n    app.events.emit('source-read', 'included_file', source)\n\n    # THEN\n    assert source[0] == \"This is a test REPLACED\"\n\ndef test_source_read_event_not_modified(app):\n    # GIVEN\n    source = [\"This is a test &REPLACE_ME;\"]\n\n    # WHEN\n    app.events.emit('source-read', 'not_modified_doc', source)\n\n    # THEN\n    assert source[0] == \"This is a test &REPLACE_ME;\"\n\ndef test_custom_extension(app):\n    # GIVEN\n    class CustomExtension:\n        def __init__(self, app):\n            self.app = app\n            app.connect('source-read', self.source_read)\n\n        def source_read(self, docname, source):\n            result = source[0]\n            result = result.replace(\"&REPLACE_ME;\", \"REPLACED\")\n            source[0] = result\n\n    # WHEN\n    extension = CustomExtension(app)\n\n    # THEN\n    assert app.registry.extensions['custom_extension'] == extension\n</patched>\n</file>\n\n<file>tests/conftest.py</file>\n<original>\n</original>\n<patched>\nimport pytest\n\n@pytest.fixture\ndef tmp_path(tmp_path_factory):\n    return tmp_path_factory.mktemp(\"sphinx_docs\")\n\n@pytest.fixture\ndef conf_py(tmp_path):\n    (tmp_path / \"conf.py\").write_text(\"\"\"\nimport sys\nimport os\nsys.path.insert(0, os.path.abspath('.'))\n\nextensions = [\n    'my_extension'\n]\n\"\"\")\n\n    return tmp_path / \"conf.py\"\n\n@pytest.fixture\ndef index_rst(tmp_path):\n    (tmp_path / \"index.rst\").write_text(\"\"\"\nThis is a test\n==============\n\n.. include:: something-to-include.rst\n\n&REPLACE_ME;\n\"\"\")\n\n    return tmp_path / \"index.rst\"\n\n@pytest.fixture\ndef something_to_include_rst(tmp_path):\n    (tmp_path / \"something-to-include.rst\").write_text(\"\"\"\nTesting\n=======\n\n&REPLACE_ME;\n\"\"\")\n\n    return tmp_path / \"something-to-include.rst\"\n</patched>\n</file>\n\n<file>tests/test_my_extension.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom sphinx.application import Sphinx\n\ndef test_subst_vars_replace():\n    # GIVEN\n    app = Sphinx(\"\", \"\", \"\", \"\", \"\")\n    source = [\"This is a test &REPLACE_ME;\"]\n\n    # WHEN\n    def subst_vars_replace(app, docname, source):\n        result = source[0]\n        result = result.replace(\"&REPLACE_ME;\", \"REPLACED\")\n        source[0] = result\n\n    app.connect('source-read', subst_vars_replace)\n    app.emit('source-read', 'test_doc', source)\n\n    # THEN\n    assert source[0] == \"This is a test REPLACED\"\n</patched>\n</file>",
  "patch": "--- a/tests/test_source_read_event.py\n+++ b/tests/test_source_read_event.py\n+import pytest\n+from sphinx.application import Sphinx\n+from sphinx.events import EventManager\n+\n+@pytest.fixture\n+def app():\n+    return Sphinx(\"\", \"\", \"\", \"\", \"\")\n+\n+def test_source_read_event(app):\n+    # GIVEN\n+    source = [\"This is a test &REPLACE_ME;\"]\n+\n+    # WHEN\n+    app.events.emit('source-read', 'test_doc', source)\n+\n+    # THEN\n+    assert source[0] == \"This is a test REPLACED\"\n+\n+def test_source_read_event_included_file(app):\n+    # GIVEN\n+    source = [\"This is a test &REPLACE_ME;\"]\n+\n+    # WHEN\n+    app.events.emit('source-read', 'included_file', source)\n+\n+    # THEN\n+    assert source[0] == \"This is a test REPLACED\"\n+\n+def test_source_read_event_not_modified(app):\n+    # GIVEN\n+    source = [\"This is a test &REPLACE_ME;\"]\n+\n+    # WHEN\n+    app.events.emit('source-read', 'not_modified_doc', source)\n+\n+    # THEN\n+    assert source[0] == \"This is a test &REPLACE_ME;\"\n+\n+def test_custom_extension(app):\n+    # GIVEN\n+    class CustomExtension:\n+        def __init__(self, app):\n+            self.app = app\n+            app.connect('source-read', self.source_read)\n+\n+        def source_read(self, docname, source):\n+            result = source[0]\n+            result = result.replace(\"&REPLACE_ME;\", \"REPLACED\")\n+            source[0] = result\n+\n+    # WHEN\n+    extension = CustomExtension(app)\n+\n+    # THEN\n+    assert app.registry.extensions['custom_extension'] == extension\n\n--- a/tests/conftest.py\n+++ b/tests/conftest.py\n+import pytest\n+\n+@pytest.fixture\n+def tmp_path(tmp_path_factory):\n+    return tmp_path_factory.mktemp(\"sphinx_docs\")\n+\n+@pytest.fixture\n+def conf_py(tmp_path):\n+    (tmp_path / \"conf.py\").write_text(\"\"\"\n+import sys\n+import os\n+sys.path.insert(0, os.path.abspath('.'))\n+\n+extensions = [\n+    'my_extension'\n+]\n+\"\"\")\n+\n+    return tmp_path / \"conf.py\"\n+\n+@pytest.fixture\n+def index_rst(tmp_path):\n+    (tmp_path / \"index.rst\").write_text(\"\"\"\n+This is a test\n+==============\n+\n+.. include:: something-to-include.rst\n+\n+&REPLACE_ME;\n+\"\"\")\n+\n+    return tmp_path / \"index.rst\"\n+\n+@pytest.fixture\n+def something_to_include_rst(tmp_path):\n+    (tmp_path / \"something-to-include.rst\").write_text(\"\"\"\n+Testing\n+=======\n+\n+&REPLACE_ME;\n+\"\"\")\n+\n+    return tmp_path / \"something-to-include.rst\"\n\n--- a/tests/test_my_extension.py\n+++ b/tests/test_my_extension.py\n+import pytest\n+from sphinx.application import Sphinx\n+\n+def test_subst_vars_replace():\n+    # GIVEN\n+    app = Sphinx(\"\", \"\", \"\", \"\", \"\")\n+    source = [\"This is a test &REPLACE_ME;\"]\n+\n+    # WHEN\n+    def subst_vars_replace(app, docname, source):\n+        result = source[0]\n+        result = result.replace(\"&REPLACE_ME;\", \"REPLACED\")\n+        source[0] = result\n+\n+    app.connect('source-read', subst_vars_replace)\n+    app.emit('source-read', 'test_doc', source)\n+\n+    # THEN\n+    assert source[0] == \"This is a test REPLACED\"\n"
}