{
  "instance_id": "django__django-13195",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of `HttpResponse.delete_cookie()` not preserving the cookie's `SameSite` attribute, we need to modify the `delete_cookie` method to include the `samesite` parameter. \n\nHere's how we can write comprehensive pytest unit tests for this issue:\n\n```\n<file>tests/test_http_response.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.http import HttpResponse\n\ndef test_delete_cookie_samesite():\n    response = HttpResponse()\n    response.set_cookie('test_cookie', 'test_value', samesite='Lax')\n    response.delete_cookie('test_cookie')\n    assert response.cookies['test_cookie']['samesite'] == 'Lax'\n\ndef test_delete_cookie_secure():\n    response = HttpResponse()\n    response.set_cookie('test_cookie', 'test_value', secure=True)\n    response.delete_cookie('test_cookie')\n    assert response.cookies['test_cookie']['secure'] == True\n\ndef test_delete_cookie_httponly():\n    response = HttpResponse()\n    response.set_cookie('test_cookie', 'test_value', httponly=True)\n    response.delete_cookie('test_cookie')\n    assert response.cookies['test_cookie']['httponly'] == True\n\ndef test_delete_cookie_path():\n    response = HttpResponse()\n    response.set_cookie('test_cookie', 'test_value', path='/path')\n    response.delete_cookie('test_cookie', path='/path')\n    assert response.cookies['test_cookie']['path'] == '/path'\n\ndef test_delete_cookie_domain():\n    response = HttpResponse()\n    response.set_cookie('test_cookie', 'test_value', domain='example.com')\n    response.delete_cookie('test_cookie', domain='example.com')\n    assert response.cookies['test_cookie']['domain'] == 'example.com'\n\ndef test_delete_cookie_max_age():\n    response = HttpResponse()\n    response.set_cookie('test_cookie', 'test_value')\n    response.delete_cookie('test_cookie')\n    assert response.cookies['test_cookie']['max-age'] == 0\n\ndef test_delete_cookie_expires():\n    response = HttpResponse()\n    response.set_cookie('test_cookie', 'test_value')\n    response.delete_cookie('test_cookie')\n    assert response.cookies['test_cookie']['expires'] == 'Thu, 01 Jan 1970 00:00:00 GMT'\n</patched>\n```\n\nAnd here's the modification to the `delete_cookie` method:\n\n```\n<file>django/http/response.py</file>\n<original>\n    def delete_cookie(self, key, path='/', domain=None):\n        # Most browsers ignore the Set-Cookie header if the cookie name starts\n        # with __Host- or __Secure- and the cookie doesn't use the secure flag.\n        secure = key.startswith(('__Secure-', '__Host-'))\n        self.set_cookie(\n            key, max_age=0, path=path, domain=domain, secure=secure,\n            expires='Thu, 01 Jan 1970 00:00:00 GMT',\n        )\n</original>\n<patched>\n    def delete_cookie(self, key, path='/', domain=None, samesite=None):\n        # Most browsers ignore the Set-Cookie header if the cookie name starts\n        # with __Host- or __Secure- and the cookie doesn't use the secure flag.\n        secure = key.startswith(('__Secure-', '__Host-'))\n        self.set_cookie(\n            key, max_age=0, path=path, domain=domain, secure=secure,\n            expires='Thu, 01 Jan 1970 00:00:00 GMT',\n            samesite=samesite,\n        )\n</patched>\n```",
  "patch": "--- a/tests/test_http_response.py\n+++ b/tests/test_http_response.py\n-# Empty if creating new file\n+import pytest\n+from django.http import HttpResponse\n+\n+def test_delete_cookie_samesite():\n+    response = HttpResponse()\n+    response.set_cookie('test_cookie', 'test_value', samesite='Lax')\n+    response.delete_cookie('test_cookie')\n+    assert response.cookies['test_cookie']['samesite'] == 'Lax'\n+\n+def test_delete_cookie_secure():\n+    response = HttpResponse()\n+    response.set_cookie('test_cookie', 'test_value', secure=True)\n+    response.delete_cookie('test_cookie')\n+    assert response.cookies['test_cookie']['secure'] == True\n+\n+def test_delete_cookie_httponly():\n+    response = HttpResponse()\n+    response.set_cookie('test_cookie', 'test_value', httponly=True)\n+    response.delete_cookie('test_cookie')\n+    assert response.cookies['test_cookie']['httponly'] == True\n+\n+def test_delete_cookie_path():\n+    response = HttpResponse()\n+    response.set_cookie('test_cookie', 'test_value', path='/path')\n+    response.delete_cookie('test_cookie', path='/path')\n+    assert response.cookies['test_cookie']['path'] == '/path'\n+\n+def test_delete_cookie_domain():\n+    response = HttpResponse()\n+    response.set_cookie('test_cookie', 'test_value', domain='example.com')\n+    response.delete_cookie('test_cookie', domain='example.com')\n+    assert response.cookies['test_cookie']['domain'] == 'example.com'\n+\n+def test_delete_cookie_max_age():\n+    response = HttpResponse()\n+    response.set_cookie('test_cookie', 'test_value')\n+    response.delete_cookie('test_cookie')\n+    assert response.cookies['test_cookie']['max-age'] == 0\n+\n+def test_delete_cookie_expires():\n+    response = HttpResponse()\n+    response.set_cookie('test_cookie', 'test_value')\n+    response.delete_cookie('test_cookie')\n+    assert response.cookies['test_cookie']['expires'] == 'Thu, 01 Jan 1970 00:00:00 GMT'\n\n--- a/django/http/response.py\n+++ b/django/http/response.py\n-    def delete_cookie(self, key, path='/', domain=None):\n-        # Most browsers ignore the Set-Cookie header if the cookie name starts\n-        # with __Host- or __Secure- and the cookie doesn't use the secure flag.\n-        secure = key.startswith(('__Secure-', '__Host-'))\n-        self.set_cookie(\n-            key, max_age=0, path=path, domain=domain, secure=secure,\n-            expires='Thu, 01 Jan 1970 00:00:00 GMT',\n-        )\n+    def delete_cookie(self, key, path='/', domain=None, samesite=None):\n+        # Most browsers ignore the Set-Cookie header if the cookie name starts\n+        # with __Host- or __Secure- and the cookie doesn't use the secure flag.\n+        secure = key.startswith(('__Secure-', '__Host-'))\n+        self.set_cookie(\n+            key, max_age=0, path=path, domain=domain, secure=secure,\n+            expires='Thu, 01 Jan 1970 00:00:00 GMT',\n+            samesite=samesite,\n+        )\n"
}