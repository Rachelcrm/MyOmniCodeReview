{
  "instance_id": "django__django-14999",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_operations.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import migrations\n\n@pytest.mark.test_operation_rename_model\ndef test_rename_model_noop():\n    # Test that RenameModel with db_table is a noop\n    operation = migrations.RenameModel(\n        'old_name', 'new_name', db_table='my_table'\n    )\n    assert operation.database_forwards(\n        'app_label', None, None, None\n    ) is None\n\n@pytest.mark.test_operation_rename_model\ndef test_rename_model_table_change():\n    # Test that RenameModel with db_table and table change\n    operation = migrations.RenameModel(\n        'old_name', 'new_name', db_table='old_table'\n    )\n    # Mock database_forwards to check if alter_db_table is called\n    with pytest.mock.patch.object(migrations.operations.schema.SchemaEditor, 'alter_db_table') as mock_alter_db_table:\n        operation.database_forwards(\n            'app_label', None, None, None\n        )\n    mock_alter_db_table.assert_called_once()\n\n@pytest.mark.test_operation_rename_model\ndef test_rename_model_no_db_table():\n    # Test that RenameModel without db_table\n    operation = migrations.RenameModel(\n        'old_name', 'new_name'\n    )\n    # Mock database_forwards to check if alter_db_table is called\n    with pytest.mock.patch.object(migrations.operations.schema.SchemaEditor, 'alter_db_table') as mock_alter_db_table:\n        operation.database_forwards(\n            'app_label', None, None, None\n        )\n    mock_alter_db_table.assert_called_once()\n</patched>\n```",
  "patch": "--- a/tests/test_operations.py\n+++ b/tests/test_operations.py\n-# Empty if creating new file\n+import pytest\n+from django.db import migrations\n+\n+@pytest.mark.test_operation_rename_model\n+def test_rename_model_noop():\n+    # Test that RenameModel with db_table is a noop\n+    operation = migrations.RenameModel(\n+        'old_name', 'new_name', db_table='my_table'\n+    )\n+    assert operation.database_forwards(\n+        'app_label', None, None, None\n+    ) is None\n+\n+@pytest.mark.test_operation_rename_model\n+def test_rename_model_table_change():\n+    # Test that RenameModel with db_table and table change\n+    operation = migrations.RenameModel(\n+        'old_name', 'new_name', db_table='old_table'\n+    )\n+    # Mock database_forwards to check if alter_db_table is called\n+    with pytest.mock.patch.object(migrations.operations.schema.SchemaEditor, 'alter_db_table') as mock_alter_db_table:\n+        operation.database_forwards(\n+            'app_label', None, None, None\n+        )\n+    mock_alter_db_table.assert_called_once()\n+\n+@pytest.mark.test_operation_rename_model\n+def test_rename_model_no_db_table():\n+    # Test that RenameModel without db_table\n+    operation = migrations.RenameModel(\n+        'old_name', 'new_name'\n+    )\n+    # Mock database_forwards to check if alter_db_table is called\n+    with pytest.mock.patch.object(migrations.operations.schema.SchemaEditor, 'alter_db_table') as mock_alter_db_table:\n+        operation.database_forwards(\n+            'app_label', None, None, None\n+        )\n+    mock_alter_db_table.assert_called_once()\n"
}