--- a/tests/test_show_versions.py
+++ b/tests/test_show_versions.py
+import pytest
+from sklearn.utils._show_versions import show_versions, _get_deps_info
+import sklearn
+import sys
+import importlib
+
+def test_show_versions_skl_lt_020():
+    # Mock scikit-learn version to be less than 0.20
+    sklearn_version = "0.19.0"
+    # Mock deps_info to exclude joblib
+    deps_info = {
+        "pip": "21.0.1",
+        "setuptools": "57.0.0",
+        "sklearn": sklearn_version,
+        "numpy": "1.20.0",
+        "scipy": "1.7.3",
+        "Cython": "0.29.32",
+        "pandas": "1.3.5",
+        "matplotlib": "3.5.1",
+    }
+    # Call show_versions and assert joblib is not included
+    output = show_versions()
+    assert "joblib" not in output
+
+def test_show_versions_skl_gt_020():
+    # Mock scikit-learn version to be greater than 0.20
+    sklearn_version = "0.24.0"
+    # Mock deps_info to include joblib
+    deps_info = {
+        "pip": "21.0.1",
+        "setuptools": "57.0.0",
+        "sklearn": sklearn_version,
+        "numpy": "1.20.0",
+        "scipy": "1.7.3",
+        "Cython": "0.29.32",
+        "pandas": "1.3.5",
+        "matplotlib": "3.5.1",
+        "joblib": "1.0.1",
+    }
+    # Call show_versions and assert joblib is included
+    output = show_versions()
+    assert "joblib" in output
+
+def test_get_deps_info_skl_lt_020():
+    # Test _get_deps_info with sklearn version less than 0.20
+    sklearn_version = "0.19.0"
+    sys.modules['sklearn'] = type('sklearn', (), {'__version__': sklearn_version})
+    deps_info = _get_deps_info()
+    assert 'joblib' not in deps_info
+
+def test_get_deps_info_skl_gt_020():
+    # Test _get_deps_info with sklearn version greater than 0.20
+    sklearn_version = "0.24.0"
+    sys.modules['sklearn'] = type('sklearn', (), {'__version__': sklearn_version})
+    # Manually add joblib to sys.modules for testing
+    sys.modules['joblib'] = type('joblib', (), {'__version__': '1.0.1'})
+    deps_info = _get_deps_info()
+    assert 'joblib' in deps_info
+
+def test_get_deps_info_import_error(monkeypatch):
+    # Test _get_deps_info handles ImportError
+    def mock_import_module(module_name):
+        if module_name == 'non_existent_module':
+            raise ImportError
+        # For testing, simply return a mock module if it exists
+        if module_name in sys.modules:
+            return sys.modules[module_name]
+        else:
+            return type(module_name, (), {})
+    
+    monkeypatch.setattr(importlib, 'import_module', mock_import_module)
+    deps_info = _get_deps_info()
+    assert deps_info['non_existent_module'] is None
