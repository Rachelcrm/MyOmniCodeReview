{
  "instance_id": "django__django-14855",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of the wrong URL being generated by `get_admin_url` for readonly fields in a custom Admin Site, we need to modify the `get_admin_url` method to include the `current_app` parameter when reversing the URL. This ensures that the generated URL is correct for custom admin sites.\n\nHere's how we can approach this:\n\n### Step 1: Understand the Issue\nThe `get_admin_url` method in `django/contrib/admin/helpers.py` is generating incorrect URLs for readonly fields when used in a custom Admin Site. This is because it does not specify the `current_app` parameter when reversing the URL.\n\n### Step 2: Modify the `get_admin_url` Method\nWe need to modify the `get_admin_url` method to include the `current_app` parameter. The `current_app` should be set to the name of the admin site.\n\n### Step 3: Write Comprehensive Tests\nWe will write tests to ensure that the `get_admin_url` method works correctly for both the default admin site and custom admin sites.\n\nLet's create and modify test files as needed:\n\n```\n<file>tests/test_admin_helpers.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.contrib.admin.helpers import AdminSite, get_admin_url\nfrom django.urls import reverse\n\n@pytest.fixture\ndef admin_site():\n    return AdminSite(name='admin')\n\n@pytest.fixture\ndef custom_admin_site():\n    return AdminSite(name='custom-admin')\n\ndef test_get_admin_url_default_site(admin_site):\n    # Test with default admin site\n    model = admin_site.get_model('testapp', 'TestModel')\n    remote_obj = model()\n    remote_obj.pk = 1\n    url_name = 'admin:testapp_testmodel_change'\n    expected_url = reverse(url_name, args=[1], current_app=admin_site.name)\n    assert get_admin_url(admin_site, model._meta.get_field('fk'), remote_obj) == f'<a href=\"{expected_url}\">TestModel object (1)</a>'\n\ndef test_get_admin_url_custom_site(custom_admin_site):\n    # Test with custom admin site\n    model = custom_admin_site.get_model('testapp', 'TestModel')\n    remote_obj = model()\n    remote_obj.pk = 1\n    url_name = 'admin:testapp_testmodel_change'\n    expected_url = reverse(url_name, args=[1], current_app=custom_admin_site.name)\n    assert get_admin_url(custom_admin_site, model._meta.get_field('fk'), remote_obj) == f'<a href=\"{expected_url}\">TestModel object (1)</a>'\n\ndef test_get_admin_url_no_reverse_match(admin_site):\n    # Test case where NoReverseMatch is raised\n    model = admin_site.get_model('testapp', 'NonExistentModel')\n    remote_obj = model()\n    remote_obj.pk = 1\n    assert get_admin_url(admin_site, model._meta.get_field('fk'), remote_obj) == 'NonExistentModel object (1)'\n</patched>\n```\n\nAnd we also need to modify the `get_admin_url` method in `django/contrib/admin/helpers.py`:\n\n```\n<file>django/contrib/admin/helpers.py</file>\n<original>\ndef get_admin_url(self, remote_field, remote_obj):\n    url_name = 'admin:%s_%s_change' % (\n        remote_field.model._meta.app_label,\n        remote_field.model._meta.model_name,\n    )\n    try:\n        url = reverse(url_name, args=[quote(remote_obj.pk)])\n        return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n    except NoReverseMatch:\n        return str(remote_obj)\n</original>\n<patched>\ndef get_admin_url(self, remote_field, remote_obj):\n    url_name = 'admin:%s_%s_change' % (\n        remote_field.model._meta.app_label,\n        remote_field.model._meta.model_name,\n    )\n    try:\n        url = reverse(\n            url_name,\n            args=[quote(remote_obj.pk)],\n            current_app=self.model_admin.admin_site.name\n        )\n        return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n    except NoReverseMatch:\n        return str(remote_obj)\n</patched>\n```",
  "patch": "--- a/tests/test_admin_helpers.py\n+++ b/tests/test_admin_helpers.py\n-# Empty if creating new file\n+import pytest\n+from django.contrib.admin.helpers import AdminSite, get_admin_url\n+from django.urls import reverse\n+\n+@pytest.fixture\n+def admin_site():\n+    return AdminSite(name='admin')\n+\n+@pytest.fixture\n+def custom_admin_site():\n+    return AdminSite(name='custom-admin')\n+\n+def test_get_admin_url_default_site(admin_site):\n+    # Test with default admin site\n+    model = admin_site.get_model('testapp', 'TestModel')\n+    remote_obj = model()\n+    remote_obj.pk = 1\n+    url_name = 'admin:testapp_testmodel_change'\n+    expected_url = reverse(url_name, args=[1], current_app=admin_site.name)\n+    assert get_admin_url(admin_site, model._meta.get_field('fk'), remote_obj) == f'<a href=\"{expected_url}\">TestModel object (1)</a>'\n+\n+def test_get_admin_url_custom_site(custom_admin_site):\n+    # Test with custom admin site\n+    model = custom_admin_site.get_model('testapp', 'TestModel')\n+    remote_obj = model()\n+    remote_obj.pk = 1\n+    url_name = 'admin:testapp_testmodel_change'\n+    expected_url = reverse(url_name, args=[1], current_app=custom_admin_site.name)\n+    assert get_admin_url(custom_admin_site, model._meta.get_field('fk'), remote_obj) == f'<a href=\"{expected_url}\">TestModel object (1)</a>'\n+\n+def test_get_admin_url_no_reverse_match(admin_site):\n+    # Test case where NoReverseMatch is raised\n+    model = admin_site.get_model('testapp', 'NonExistentModel')\n+    remote_obj = model()\n+    remote_obj.pk = 1\n+    assert get_admin_url(admin_site, model._meta.get_field('fk'), remote_obj) == 'NonExistentModel object (1)'\n\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n-def get_admin_url(self, remote_field, remote_obj):\n-    url_name = 'admin:%s_%s_change' % (\n-        remote_field.model._meta.app_label,\n-        remote_field.model._meta.model_name,\n-    )\n-    try:\n-        url = reverse(url_name, args=[quote(remote_obj.pk)])\n-        return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n-    except NoReverseMatch:\n-        return str(remote_obj)\n+def get_admin_url(self, remote_field, remote_obj):\n+    url_name = 'admin:%s_%s_change' % (\n+        remote_field.model._meta.app_label,\n+        remote_field.model._meta.model_name,\n+    )\n+    try:\n+        url = reverse(\n+            url_name,\n+            args=[quote(remote_obj.pk)],\n+            current_app=self.model_admin.admin_site.name\n+        )\n+        return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n+    except NoReverseMatch:\n+        return str(remote_obj)\n"
}