{
  "instance_id": "matplotlib__matplotlib-25479",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_colormap_name_handling.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nimport matplotlib\nfrom matplotlib import cm\nfrom matplotlib.colors import LinearSegmentedColormap\nimport matplotlib.pyplot as plt\n\ndef test_colormap_name_handling():\n    my_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],\n                    [2.3e-03, 1.3e-03, 1.8e-02],\n                    [3.3e-03, 2.3e-03, 2.4e-02]]\n\n    my_cmap = LinearSegmentedColormap.from_list('some_cmap_name', my_cmap_data)\n    cm.register_cmap(name='my_cmap_name', cmap=my_cmap)\n\n    plt.set_cmap('my_cmap_name')\n    img = plt.imshow([[1, 1], [2, 2]])\n    assert img.get_cmap().name == 'my_cmap_name'\n\n    # Test that using the cmap with the correct name works\n    plt.imshow([[1, 1], [2, 2]], cmap='my_cmap_name')\n\n    # Test that using the cmap with the incorrect name raises an error\n    with pytest.raises(ValueError):\n        plt.imshow([[1, 1], [2, 2]], cmap='some_cmap_name')\n\ndef test_colormap_registration():\n    my_cmap = LinearSegmentedColormap.from_list('test_cmap', [[0, 0, 0], [1, 1, 1]])\n\n    cm.register_cmap(cmap=my_cmap)\n\n    assert 'test_cmap' in cm._colormaps\n\ndef test_get_cmap():\n    my_cmap = LinearSegmentedColormap.from_list('test_cmap', [[0, 0, 0], [1, 1, 1]])\n\n    cm.register_cmap(cmap=my_cmap)\n\n    cmap = cm.get_cmap('test_cmap')\n    assert cmap.name == 'test_cmap'\n</patched>\n```",
  "patch": "--- a/tests/test_colormap_name_handling.py\n+++ b/tests/test_colormap_name_handling.py\n+import pytest\n+import matplotlib\n+from matplotlib import cm\n+from matplotlib.colors import LinearSegmentedColormap\n+import matplotlib.pyplot as plt\n+\n+def test_colormap_name_handling():\n+    my_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],\n+                    [2.3e-03, 1.3e-03, 1.8e-02],\n+                    [3.3e-03, 2.3e-03, 2.4e-02]]\n+\n+    my_cmap = LinearSegmentedColormap.from_list('some_cmap_name', my_cmap_data)\n+    cm.register_cmap(name='my_cmap_name', cmap=my_cmap)\n+\n+    plt.set_cmap('my_cmap_name')\n+    img = plt.imshow([[1, 1], [2, 2]])\n+    assert img.get_cmap().name == 'my_cmap_name'\n+\n+    # Test that using the cmap with the correct name works\n+    plt.imshow([[1, 1], [2, 2]], cmap='my_cmap_name')\n+\n+    # Test that using the cmap with the incorrect name raises an error\n+    with pytest.raises(ValueError):\n+        plt.imshow([[1, 1], [2, 2]], cmap='some_cmap_name')\n+\n+def test_colormap_registration():\n+    my_cmap = LinearSegmentedColormap.from_list('test_cmap', [[0, 0, 0], [1, 1, 1]])\n+\n+    cm.register_cmap(cmap=my_cmap)\n+\n+    assert 'test_cmap' in cm._colormaps\n+\n+def test_get_cmap():\n+    my_cmap = LinearSegmentedColormap.from_list('test_cmap', [[0, 0, 0], [1, 1, 1]])\n+\n+    cm.register_cmap(cmap=my_cmap)\n+\n+    cmap = cm.get_cmap('test_cmap')\n+    assert cmap.name == 'test_cmap'\n"
}