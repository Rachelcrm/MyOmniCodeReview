{
  "instance_id": "matplotlib__matplotlib-22865",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_colorbar.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nimport matplotlib as mpl\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import from_levels_and_colors\n\ndef test_colorbar_drawedges_extend():\n    my_cmap = mpl.cm.viridis\n    bounds = np.arange(10)\n    nb_colors = len(bounds) + 1\n    colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))\n    my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')\n\n    fig, ax = plt.subplots(figsize=(5, 1))\n    cbar_ax = fig.add_axes([0.05, 0.4, 0.9, 0.1])\n    cbar = mpl.colorbar.ColorbarBase(cbar_ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=True)\n\n    # Assert that edges are drawn at extremities\n    assert len(cbar.dividers.get_segments()) == 12  # 10 segments for colors + 2 for extends\n\n    plt.close(fig)\n\ndef test_colorbar_no_drawedges_extend():\n    my_cmap = mpl.cm.viridis\n    bounds = np.arange(10)\n    nb_colors = len(bounds) + 1\n    colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))\n    my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')\n\n    fig, ax = plt.subplots(figsize=(5, 1))\n    cbar_ax = fig.add_axes([0.05, 0.4, 0.9, 0.1])\n    cbar = mpl.colorbar.ColorbarBase(cbar_ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=False)\n\n    # Assert that edges are not drawn at extremities\n    assert len(cbar.dividers.get_segments()) == 0\n\n    plt.close(fig)\n\ndef test_colorbar_drawedges_no_extend():\n    my_cmap = mpl.cm.viridis\n    bounds = np.arange(10)\n    nb_colors = len(bounds) + 1\n    colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))\n    my_cmap, my_norm = from_levels_and_colors(bounds, colors)\n\n    fig, ax = plt.subplots(figsize=(5, 1))\n    cbar_ax = fig.add_axes([0.05, 0.4, 0.9, 0.1])\n    cbar = mpl.colorbar.ColorbarBase(cbar_ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=True)\n\n    # Assert that edges are drawn but not at extremities\n    assert len(cbar.dividers.get_segments()) == 10\n\n    plt.close(fig)\n</patched>\n```",
  "patch": "--- a/tests/test_colorbar.py\n+++ b/tests/test_colorbar.py\n-# Original code here (if modifying existing file)\n+import pytest\n+import matplotlib as mpl\n+import numpy as np\n+import matplotlib.pyplot as plt\n+from matplotlib.colors import from_levels_and_colors\n+\n+def test_colorbar_drawedges_extend():\n+    my_cmap = mpl.cm.viridis\n+    bounds = np.arange(10)\n+    nb_colors = len(bounds) + 1\n+    colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')\n+\n+    fig, ax = plt.subplots(figsize=(5, 1))\n+    cbar_ax = fig.add_axes([0.05, 0.4, 0.9, 0.1])\n+    cbar = mpl.colorbar.ColorbarBase(cbar_ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=True)\n+\n+    # Assert that edges are drawn at extremities\n+    assert len(cbar.dividers.get_segments()) == 12  # 10 segments for colors + 2 for extends\n+\n+    plt.close(fig)\n+\n+def test_colorbar_no_drawedges_extend():\n+    my_cmap = mpl.cm.viridis\n+    bounds = np.arange(10)\n+    nb_colors = len(bounds) + 1\n+    colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')\n+\n+    fig, ax = plt.subplots(figsize=(5, 1))\n+    cbar_ax = fig.add_axes([0.05, 0.4, 0.9, 0.1])\n+    cbar = mpl.colorbar.ColorbarBase(cbar_ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=False)\n+\n+    # Assert that edges are not drawn at extremities\n+    assert len(cbar.dividers.get_segments()) == 0\n+\n+    plt.close(fig)\n+\n+def test_colorbar_drawedges_no_extend():\n+    my_cmap = mpl.cm.viridis\n+    bounds = np.arange(10)\n+    nb_colors = len(bounds) + 1\n+    colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))\n+    my_cmap, my_norm = from_levels_and_colors(bounds, colors)\n+\n+    fig, ax = plt.subplots(figsize=(5, 1))\n+    cbar_ax = fig.add_axes([0.05, 0.4, 0.9, 0.1])\n+    cbar = mpl.colorbar.ColorbarBase(cbar_ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=True)\n+\n+    # Assert that edges are drawn but not at extremities\n+    assert len(cbar.dividers.get_segments()) == 10\n+\n+    plt.close(fig)\n"
}