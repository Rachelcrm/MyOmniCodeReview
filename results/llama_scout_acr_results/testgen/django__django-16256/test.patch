--- a/tests/test_modeling.py
+++ b/tests/test_modeling.py
+import pytest
+from django.db import models
+from django.db.models import related
+
+@pytest.fixture
+def author():
+    class Author(models.Model):
+        name = models.CharField(max_length=100)
+
+    return Author
+
+@pytest.fixture
+def book(author):
+    class Book(models.Model):
+        title = models.CharField(max_length=100)
+        author = models.ForeignKey(author, on_delete=models.CASCADE)
+
+    return Book
+
+@pytest.mark.asyncio
+async def test_acreate_related_manager(author, book):
+    author_instance = author.objects.create(name="Test Author")
+    book_manager = author_instance.book_set
+    book_instance = await book_manager.acreate(title="Test Book")
+    assert book_instance.title == "Test Book"
+    assert book_instance.author == author_instance
+
+@pytest.mark.asyncio
+async def test_aget_or_create_related_manager(author, book):
+    author_instance = author.objects.create(name="Test Author")
+    book_manager = author_instance.book_set
+    book_instance, created = await book_manager.aget_or_create(title="Test Book")
+    assert book_instance.title == "Test Book"
+    assert book_instance.author == author_instance
+    assert created
+
+    book_instance, created = await book_manager.aget_or_create(title="Test Book")
+    assert not created
+
+@pytest.mark.asyncio
+async def test_aupdate_or_create_related_manager(author, book):
+    author_instance = author.objects.create(name="Test Author")
+    book_manager = author_instance.book_set
+    book_instance, created = await book_manager.aupdate_or_create(title="Test Book")
+    assert book_instance.title == "Test Book"
+    assert book_instance.author == author_instance
+
+    book_instance, created = await book_manager.aupdate_or_create(title="Updated Test Book")
+    assert book_instance.title == "Updated Test Book"
+    assert not created
+
+@pytest.mark.asyncio
+async def test_acreate_m2m_related_manager(author, book):
+    class BookCategory(models.Model):
+        name = models.CharField(max_length=100)
+        books = models.ManyToManyField(book)
+
+    category = BookCategory.objects.create(name="Test Category")
+    book_instance = book.objects.create(title="Test Book", author=author.objects.create(name="Test Author"))
+    await category.books.acreate(book_instance)
+    assert book_instance in category.books.all()
+
+@pytest.mark.asyncio
+async def test_aget_or_create_m2m_related_manager(author, book):
+    class BookCategory(models.Model):
+        name = models.CharField(max_length=100)
+        books = models.ManyToManyField(book)
+
+    category = BookCategory.objects.create(name="Test Category")
+    book_instance = book.objects.create(title="Test Book", author=author.objects.create(name="Test Author"))
+    obj, created = await category.books.aget_or_create(book=book_instance)
+    assert obj == book_instance
+    assert created
+
+    obj, created = await category.books.aget_or_create(book=book_instance)
+    assert not created
+
+@pytest.mark.asyncio
+async def test_aupdate_or_create_m2m_related_manager(author, book):
+    class BookCategory(models.Model):
+        name = models.CharField(max_length=100)
+        books = models.ManyToManyField(book)
+
+    category = BookCategory.objects.create(name="Test Category")
+    book_instance = book.objects.create(title="Test Book", author=author.objects.create(name="Test Author"))
+    await category.books.aupdate_or_create(book=book_instance)
+    assert book_instance in category.books.all()
