{
  "instance_id": "django__django-11964",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_enums.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\n\nclass TestChoices(models.TextChoices):\n    FIRST_CHOICE = \"first\", _(\"The first choice\")\n    SECOND_CHOICE = \"second\", _(\"The second choice\")\n\nclass TestIntegerChoices(models.IntegerChoices):\n    FIRST_CHOICE = 1, _(\"The first choice\")\n    SECOND_CHOICE = 2, _(\"The second choice\")\n\nclass TestModel(models.Model):\n    str_value = models.CharField(max_length=10, choices=TestChoices.choices)\n    int_value = models.IntegerField(choices=TestIntegerChoices.choices)\n\ndef test_text_choices_str_value():\n    instance = TestModel.objects.create(str_value=TestChoices.FIRST_CHOICE)\n    assert str(instance.str_value) == \"first\"\n\ndef test_text_choices_int_value():\n    instance = TestModel.objects.create(int_value=TestIntegerChoices.FIRST_CHOICE)\n    assert str(instance.int_value) == \"1\"\n\ndef test_retrieved_text_choices_str_value():\n    instance = TestModel.objects.create(str_value=TestChoices.FIRST_CHOICE)\n    retrieved_instance = TestModel.objects.get(id=instance.id)\n    assert str(retrieved_instance.str_value) == \"first\"\n\ndef test_retrieved_text_choices_int_value():\n    instance = TestModel.objects.create(int_value=TestIntegerChoices.FIRST_CHOICE)\n    retrieved_instance = TestModel.objects.get(id=instance.id)\n    assert str(retrieved_instance.int_value) == \"1\"\n</patched>\n```",
  "patch": "--- a/tests/test_enums.py\n+++ b/tests/test_enums.py\n-# Empty if creating new file\n+import pytest\n+from django.db import models\n+from django.utils.translation import gettext_lazy as _\n+\n+class TestChoices(models.TextChoices):\n+    FIRST_CHOICE = \"first\", _(\"The first choice\")\n+    SECOND_CHOICE = \"second\", _(\"The second choice\")\n+\n+class TestIntegerChoices(models.IntegerChoices):\n+    FIRST_CHOICE = 1, _(\"The first choice\")\n+    SECOND_CHOICE = 2, _(\"The second choice\")\n+\n+class TestModel(models.Model):\n+    str_value = models.CharField(max_length=10, choices=TestChoices.choices)\n+    int_value = models.IntegerField(choices=TestIntegerChoices.choices)\n+\n+def test_text_choices_str_value():\n+    instance = TestModel.objects.create(str_value=TestChoices.FIRST_CHOICE)\n+    assert str(instance.str_value) == \"first\"\n+\n+def test_text_choices_int_value():\n+    instance = TestModel.objects.create(int_value=TestIntegerChoices.FIRST_CHOICE)\n+    assert str(instance.int_value) == \"1\"\n+\n+def test_retrieved_text_choices_str_value():\n+    instance = TestModel.objects.create(str_value=TestChoices.FIRST_CHOICE)\n+    retrieved_instance = TestModel.objects.get(id=instance.id)\n+    assert str(retrieved_instance.str_value) == \"first\"\n+\n+def test_retrieved_text_choices_int_value():\n+    instance = TestModel.objects.create(int_value=TestIntegerChoices.FIRST_CHOICE)\n+    retrieved_instance = TestModel.objects.get(id=instance.id)\n+    assert str(retrieved_instance.int_value) == \"1\"\n"
}