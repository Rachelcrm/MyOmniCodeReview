{
  "instance_id": "django__django-13512",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of Unicode characters not being displayed properly in JSON fields in the Django admin interface, we need to ensure that the JSON serialization and deserialization process preserves Unicode characters. \n\nThe problem arises from the default behavior of `json.dumps()` in Python, which uses ASCII encoding and escapes Unicode characters. To fix this, we can modify the `JSONField` class to use Unicode encoding during serialization.\n\nHere's how we can write tests to cover this functionality:\n\n```\n<file>tests/test_jsonfield.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.contrib.admin import AdminSite\nfrom django.contrib.admin.views import main\nfrom django.test import TestCase\n\nclass JSONField(models.Field):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def get_prep_value(self, value):\n        if value is None:\n            return value\n        return self.encoder.encode(value)\n\n    def from_db_value(self, value, expression, connection):\n        if value is None:\n            return value\n        try:\n            return self.decoder.decode(value)\n        except Exception:\n            return value\n\nclass TestModel(models.Model):\n    json_field = JSONField()\n\nclass TestJSONField(TestCase):\n\n    def test_unicode_chars(self):\n        # Test that Unicode characters are preserved during serialization and deserialization\n        test_model = TestModel.objects.create(json_field={'key': '\u4e2d\u56fd'})\n        self.assertEqual(test_model.json_field, {'key': '\u4e2d\u56fd'})\n\n    def test_admin_interface(self):\n        # Test that the admin interface displays Unicode characters correctly\n        site = AdminSite()\n        model_admin = site._registry[TestModel]\n        view = main.ModelAdminView.as_view(model_admin=model_admin)\n        response = view(request=self.factory.get('/admin/testmodel/'), object_id=1)\n        self.assertContains(response, '\u4e2d\u56fd')\n\n</patched>\n```\n\nAnd here's another test:\n\n```\n<file>tests/test_jsonfield_admin.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.contrib.admin import AdminSite\nfrom django.test import TestCase, RequestFactory\nfrom .models import TestModel\n\nclass TestJSONFieldAdmin(TestCase):\n\n    def setUp(self):\n        self.factory = RequestFactory()\n        self.site = AdminSite()\n        self.model_admin = self.site._registry[TestModel]\n\n    def test_change_form(self):\n        # Test that the change form in the admin interface handles Unicode characters correctly\n        request = self.factory.get('/admin/testmodel/1/change/')\n        response = self.model_admin.change_view(request, object_id=1)\n        self.assertContains(response, '\u4e2d\u56fd')\n\n</patched>\n```",
  "patch": "--- a/tests/test_jsonfield.py\n+++ b/tests/test_jsonfield.py\n-# Empty if creating new file\n+import pytest\n+from django.db import models\n+from django.contrib.admin import AdminSite\n+from django.contrib.admin.views import main\n+from django.test import TestCase\n+\n+class JSONField(models.Field):\n+    def __init__(self, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+\n+    def get_prep_value(self, value):\n+        if value is None:\n+            return value\n+        return self.encoder.encode(value)\n+\n+    def from_db_value(self, value, expression, connection):\n+        if value is None:\n+            return value\n+        try:\n+            return self.decoder.decode(value)\n+        except Exception:\n+            return value\n+\n+class TestModel(models.Model):\n+    json_field = JSONField()\n+\n+class TestJSONField(TestCase):\n+\n+    def test_unicode_chars(self):\n+        # Test that Unicode characters are preserved during serialization and deserialization\n+        test_model = TestModel.objects.create(json_field={'key': '\u4e2d\u56fd'})\n+        self.assertEqual(test_model.json_field, {'key': '\u4e2d\u56fd'})\n+\n+    def test_admin_interface(self):\n+        # Test that the admin interface displays Unicode characters correctly\n+        site = AdminSite()\n+        model_admin = site._registry[TestModel]\n+        view = main.ModelAdminView.as_view(model_admin=model_admin)\n+        response = view(request=self.factory.get('/admin/testmodel/'), object_id=1)\n+        self.assertContains(response, '\u4e2d\u56fd')\n\n--- a/tests/test_jsonfield_admin.py\n+++ b/tests/test_jsonfield_admin.py\n-# Empty if creating new file\n+import pytest\n+from django.contrib.admin import AdminSite\n+from django.test import TestCase, RequestFactory\n+from .models import TestModel\n+\n+class TestJSONFieldAdmin(TestCase):\n+\n+    def setUp(self):\n+        self.factory = RequestFactory()\n+        self.site = AdminSite()\n+        self.model_admin = self.site._registry[TestModel]\n+\n+    def test_change_form(self):\n+        # Test that the change form in the admin interface handles Unicode characters correctly\n+        request = self.factory.get('/admin/testmodel/1/change/')\n+        response = self.model_admin.change_view(request, object_id=1)\n+        self.assertContains(response, '\u4e2d\u56fd')\n"
}