{
  "instance_id": "sympy__sympy-16597",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_symbol.py</file>\n<original>\nimport pytest\nfrom sympy.core.symbol import Symbol\n\ndef test_symbol_even_implies_finite():\n    m = Symbol('m', even=True)\n    assert m.assumptions0['finite'] is True\n</original>\n<patched>\nimport pytest\nfrom sympy.core.symbol import Symbol\n\ndef test_symbol_even_implies_finite():\n    m = Symbol('m', even=True)\n    assert m.is_finite\n\ndef test_symbol_not_even_implies_finite():\n    m = Symbol('m', even=False)\n    assert m.is_finite is None\n</patched>\n\n<file>acr_tmp/acr_sympy__sympy-16597_u_sympy__sympy-16597/sympy/core/symbol.py</file>\n<original>\ndef __new__(cls, name, **assumptions):\n    cls._sanitize(assumptions, cls)\n    return Symbol.__xnew_cached_(cls, name, **assumptions)\n</patched>\n<patched>\ndef __new__(cls, name, **assumptions):\n    assumptions0 = dict((key, value) for key, value in\n                    self.assumptions0.items() if value is not None)\n\n    if 'even' in assumptions and 'finite' not in assumptions:\n        assumptions['finite'] = True\n\n    cls._sanitize(assumptions, cls)\n    return Symbol.__xnew_cached_(cls, name, **assumptions)\n</patched>\n```",
  "patch": "--- a/tests/test_symbol.py\n+++ b/tests/test_symbol.py\n-import pytest\n-from sympy.core.symbol import Symbol\n-\n-def test_symbol_even_implies_finite():\n-    m = Symbol('m', even=True)\n-    assert m.assumptions0['finite'] is True\n+import pytest\n+from sympy.core.symbol import Symbol\n+\n+def test_symbol_even_implies_finite():\n+    m = Symbol('m', even=True)\n+    assert m.is_finite\n+\n+def test_symbol_not_even_implies_finite():\n+    m = Symbol('m', even=False)\n+    assert m.is_finite is None\n"
}