{
  "instance_id": "django__django-12858",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_modeling.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.core.checks import Messages\n\n@pytest.mark.test_modeling\nclass TestModelOrdering:\n\n    def test_valid_ordering(self):\n        class Stock(models.Model):\n            supply = models.ForeignKey('Supply', on_delete=models.CASCADE)\n        \n        class Supply(models.Model):\n            product = models.ForeignKey('Product', on_delete=models.CASCADE)\n        \n        class Product(models.Model):\n            parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True)\n\n        Stock._meta.ordering = ('supply__product__parent__isnull',)\n        errors = Stock.check()\n        assert not errors\n\n    def test_invalid_ordering(self):\n        class Stock(models.Model):\n            supply = models.ForeignKey('Supply', on_delete=models.CASCADE)\n            class Meta:\n                ordering = ('supply__product__parent__invalid',)\n\n        errors = Stock.check()\n        assert len(errors) == 1\n        assert errors[0].id == 'models.E015'\n\n    def test_ordering_with_transform(self):\n        class Stock(models.Model):\n            supply = models.ForeignKey('Supply', on_delete=models.CASCADE)\n            class Meta:\n                ordering = ('supply__product__parent__isnull',)\n\n        errors = Stock.check()\n        assert not errors\n\n</patched>\n```",
  "patch": "--- a/tests/test_modeling.py\n+++ b/tests/test_modeling.py\n-# Empty if creating new file\n+import pytest\n+from django.db import models\n+from django.core.checks import Messages\n+\n+@pytest.mark.test_modeling\n+class TestModelOrdering:\n+\n+    def test_valid_ordering(self):\n+        class Stock(models.Model):\n+            supply = models.ForeignKey('Supply', on_delete=models.CASCADE)\n+        \n+        class Supply(models.Model):\n+            product = models.ForeignKey('Product', on_delete=models.CASCADE)\n+        \n+        class Product(models.Model):\n+            parent = models.ForeignKey('self', on_delete=models.CASCADE, null=True)\n+\n+        Stock._meta.ordering = ('supply__product__parent__isnull',)\n+        errors = Stock.check()\n+        assert not errors\n+\n+    def test_invalid_ordering(self):\n+        class Stock(models.Model):\n+            supply = models.ForeignKey('Supply', on_delete=models.CASCADE)\n+            class Meta:\n+                ordering = ('supply__product__parent__invalid',)\n+\n+        errors = Stock.check()\n+        assert len(errors) == 1\n+        assert errors[0].id == 'models.E015'\n+\n+    def test_ordering_with_transform(self):\n+        class Stock(models.Model):\n+            supply = models.ForeignKey('Supply', on_delete=models.CASCADE)\n+            class Meta:\n+                ordering = ('supply__product__parent__isnull',)\n+\n+        errors = Stock.check()\n+        assert not errors\n"
}