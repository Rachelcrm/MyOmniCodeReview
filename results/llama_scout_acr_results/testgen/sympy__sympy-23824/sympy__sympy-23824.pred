{
  "instance_id": "sympy__sympy-23824",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_gamma_matrices.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify\nfrom sympy.tensor.tensor import tensor_indices\n\ndef test_kahane_simplify_leading_gamma_matrix():\n    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\",)\n\n    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n    r = kahane_simplify(t)\n    assert r.equals(4*G(rho)*G(sigma))\n\n    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n    r = kahane_simplify(t)\n    assert r.equals(4*G(rho)*G(sigma))\n\ndef test_kahane_simplify_no_contractions():\n    mu, nu = tensor_indices(\"mu, nu\",)\n\n    t = G(mu)*G(nu)\n    r = kahane_simplify(t)\n    assert r.equals(G(mu)*G(nu))\n\ndef test_kahane_simplify_multiple_contractions():\n    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\",)\n\n    t = G(mu)*G(-mu)*G(rho)*G(-rho)*G(sigma)\n    r = kahane_simplify(t)\n    assert r.equals(4*4*G(sigma))\n\ndef test_kahane_simplify_complex_expression():\n    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\",)\n\n    t = G(mu)*G(nu)*G(rho)*G(-mu)*G(sigma)*G(-rho)\n    r = kahane_simplify(t)\n    assert r.equals(-4*G(nu)*G(sigma))\n</patched>\n```",
  "patch": "--- a/tests/test_gamma_matrices.py\n+++ b/tests/test_gamma_matrices.py\n-# Empty if creating new file\n+import pytest\n+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, kahane_simplify\n+from sympy.tensor.tensor import tensor_indices\n+\n+def test_kahane_simplify_leading_gamma_matrix():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\",)\n+\n+    t = G(rho)*G(sigma)*G(mu)*G(-mu)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+    t = G(mu)*G(-mu)*G(rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*G(rho)*G(sigma))\n+\n+def test_kahane_simplify_no_contractions():\n+    mu, nu = tensor_indices(\"mu, nu\",)\n+\n+    t = G(mu)*G(nu)\n+    r = kahane_simplify(t)\n+    assert r.equals(G(mu)*G(nu))\n+\n+def test_kahane_simplify_multiple_contractions():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\",)\n+\n+    t = G(mu)*G(-mu)*G(rho)*G(-rho)*G(sigma)\n+    r = kahane_simplify(t)\n+    assert r.equals(4*4*G(sigma))\n+\n+def test_kahane_simplify_complex_expression():\n+    mu, nu, rho, sigma = tensor_indices(\"mu, nu, rho, sigma\",)\n+\n+    t = G(mu)*G(nu)*G(rho)*G(-mu)*G(sigma)*G(-rho)\n+    r = kahane_simplify(t)\n+    assert r.equals(-4*G(nu)*G(sigma))\n"
}