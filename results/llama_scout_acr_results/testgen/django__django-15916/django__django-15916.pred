{
  "instance_id": "django__django-15916",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_forms_models_regress.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django import forms\nfrom django.db import models\nfrom django.forms.models import modelform_factory\n\nclass TestModelFormRegress:\n    def test_modelform_factory_preserves_formfield_callback(self):\n        # Create a model\n        class MyModel(models.Model):\n            active = models.BooleanField()\n            name = models.CharField(max_length=64, blank=True, null=True)\n\n        # Define a form with a custom formfield_callback\n        def all_required(field, **kwargs):\n            formfield = field.formfield(**kwargs)\n            formfield.required = True\n            return formfield\n\n        class MyForm(forms.ModelForm):\n            class Meta:\n                model = MyModel\n                formfield_callback = all_required\n                fields = ['active', 'name']\n\n        # Create a ModelForm using modelform_factory\n        FactoryForm = modelform_factory(MyModel, form=MyForm)\n\n        # Check that the formfield_callback was preserved\n        for field in FactoryForm.base_fields.values():\n            assert field.required\n\n    def test_modelform_factory_uses_meta_formfield_callback(self):\n        # Create a model\n        class MyModel(models.Model):\n            active = models.BooleanField()\n            name = models.CharField(max_length=64, blank=True, null=True)\n\n        # Define a form with a custom formfield_callback\n        def all_required(field, **kwargs):\n            formfield = field.formfield(**kwargs)\n            formfield.required = True\n            return formfield\n\n        class MyForm(forms.ModelForm):\n            class Meta:\n                model = MyModel\n                formfield_callback = all_required\n                fields = ['active', 'name']\n\n        # Create a ModelForm using modelform_factory\n        FactoryForm = modelform_factory(MyModel, form=MyForm, formfield_callback=None)\n\n        # Check that the formfield_callback from Meta was used\n        for field in FactoryForm.base_fields.values():\n            assert field.required\n</patched>\n```",
  "patch": "--- a/tests/test_forms_models_regress.py\n+++ b/tests/test_forms_models_regress.py\n-# Empty if creating new file\n+import pytest\n+from django import forms\n+from django.db import models\n+from django.forms.models import modelform_factory\n+\n+class TestModelFormRegress:\n+    def test_modelform_factory_preserves_formfield_callback(self):\n+        # Create a model\n+        class MyModel(models.Model):\n+            active = models.BooleanField()\n+            name = models.CharField(max_length=64, blank=True, null=True)\n+\n+        # Define a form with a custom formfield_callback\n+        def all_required(field, **kwargs):\n+            formfield = field.formfield(**kwargs)\n+            formfield.required = True\n+            return formfield\n+\n+        class MyForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                formfield_callback = all_required\n+                fields = ['active', 'name']\n+\n+        # Create a ModelForm using modelform_factory\n+        FactoryForm = modelform_factory(MyModel, form=MyForm)\n+\n+        # Check that the formfield_callback was preserved\n+        for field in FactoryForm.base_fields.values():\n+            assert field.required\n+\n+    def test_modelform_factory_uses_meta_formfield_callback(self):\n+        # Create a model\n+        class MyModel(models.Model):\n+            active = models.BooleanField()\n+            name = models.CharField(max_length=64, blank=True, null=True)\n+\n+        # Define a form with a custom formfield_callback\n+        def all_required(field, **kwargs):\n+            formfield = field.formfield(**kwargs)\n+            formfield.required = True\n+            return formfield\n+\n+        class MyForm(forms.ModelForm):\n+            class Meta:\n+                model = MyModel\n+                formfield_callback = all_required\n+                fields = ['active', 'name']\n+\n+        # Create a ModelForm using modelform_factory\n+        FactoryForm = modelform_factory(MyModel, form=MyForm, formfield_callback=None)\n+\n+        # Check that the formfield_callback from Meta was used\n+        for field in FactoryForm.base_fields.values():\n+            assert field.required\n"
}