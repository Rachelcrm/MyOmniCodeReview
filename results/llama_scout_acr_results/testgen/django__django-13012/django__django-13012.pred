{
  "instance_id": "django__django-13012",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_expressions.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db.models import ExpressionWrapper, Value, IntegerField\nfrom django.db.models.query import QuerySet\n\n@pytest.mark.django_db\ndef test_constant_expression_not_in_group_by():\n    # Arrange\n    class Model(models.Model):\n        column_a = models.CharField(max_length=255)\n        column_b = models.IntegerField()\n\n    expr = ExpressionWrapper(Value(3, output_field=IntegerField()), output_field=IntegerField())\n    qs = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n\n    # Act\n    sql, params = qs.query.get_compiler().as_sql()\n\n    # Assert\n    assert '3' not in sql  # Check that the constant expression is not in the GROUP BY clause\n\n@pytest.mark.django_db\ndef test_non_constant_expression_in_group_by():\n    # Arrange\n    class Model(models.Model):\n        column_a = models.CharField(max_length=255)\n        column_b = models.IntegerField()\n\n    expr = ExpressionWrapper(models.F('column_a'), output_field=IntegerField())\n    qs = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n\n    # Act\n    sql, params = qs.query.get_compiler().as_sql()\n\n    # Assert\n    assert 'column_a' in sql  # Check that the non-constant expression is in the GROUP BY clause\n\n@pytest.mark.django_db\ndef test_value_expression_not_in_group_by():\n    # Arrange\n    class Model(models.Model):\n        column_a = models.CharField(max_length=255)\n        column_b = models.IntegerField()\n\n    qs = Model.objects.annotate(expr_res=Value(3, output_field=IntegerField())).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n\n    # Act\n    sql, params = qs.query.get_compiler().as_sql()\n\n    # Assert\n    assert '3' not in sql  # Check that the constant expression is not in the GROUP BY clause\n</patched>\n```",
  "patch": "--- a/tests/test_expressions.py\n+++ b/tests/test_expressions.py\n-# Empty if creating new file\n+import pytest\n+from django.db.models import ExpressionWrapper, Value, IntegerField\n+from django.db.models.query import QuerySet\n+\n+@pytest.mark.django_db\n+def test_constant_expression_not_in_group_by():\n+    # Arrange\n+    class Model(models.Model):\n+        column_a = models.CharField(max_length=255)\n+        column_b = models.IntegerField()\n+\n+    expr = ExpressionWrapper(Value(3, output_field=IntegerField()), output_field=IntegerField())\n+    qs = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+\n+    # Act\n+    sql, params = qs.query.get_compiler().as_sql()\n+\n+    # Assert\n+    assert '3' not in sql  # Check that the constant expression is not in the GROUP BY clause\n+\n+@pytest.mark.django_db\n+def test_non_constant_expression_in_group_by():\n+    # Arrange\n+    class Model(models.Model):\n+        column_a = models.CharField(max_length=255)\n+        column_b = models.IntegerField()\n+\n+    expr = ExpressionWrapper(models.F('column_a'), output_field=IntegerField())\n+    qs = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+\n+    # Act\n+    sql, params = qs.query.get_compiler().as_sql()\n+\n+    # Assert\n+    assert 'column_a' in sql  # Check that the non-constant expression is in the GROUP BY clause\n+\n+@pytest.mark.django_db\n+def test_value_expression_not_in_group_by():\n+    # Arrange\n+    class Model(models.Model):\n+        column_a = models.CharField(max_length=255)\n+        column_b = models.IntegerField()\n+\n+    qs = Model.objects.annotate(expr_res=Value(3, output_field=IntegerField())).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))\n+\n+    # Act\n+    sql, params = qs.query.get_compiler().as_sql()\n+\n+    # Assert\n+    assert '3' not in sql  # Check that the constant expression is not in the GROUP BY clause\n"
}