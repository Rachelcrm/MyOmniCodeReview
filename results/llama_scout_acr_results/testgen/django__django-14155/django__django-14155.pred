{
  "instance_id": "django__django-14155",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue with `ResolverMatch.__repr__()` not handling `functools.partial()` nicely, we need to add tests that cover this functionality. \n\nThe tests should verify that:\n1. The `__repr__` method correctly handles `functools.partial` objects.\n2. The `__init__` method unwraps `functools.partial` objects and stores the underlying function and arguments.\n\nHere are the tests:\n\n```\n<file>tests/test_utils.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.urls.resolvers import ResolverMatch\nfrom functools import partial\n\ndef test_resolver_match_repr_partial():\n    # Create a partial function\n    def test_func(a, b):\n        return a + b\n\n    partial_func = partial(test_func, 1)\n\n    # Create a ResolverMatch object with the partial function\n    resolver_match = ResolverMatch(partial_func, (), {})\n\n    # Check that the __repr__ method correctly handles the partial function\n    expected_repr = f\"ResolverMatch(func=functools.partial({test_func.__module__}.{test_func.__name__}, (1,), {{}}), args=(), kwargs={{}}, url_name=None, app_names=[], namespaces=[], route=None)\"\n    assert str(resolver_match) == expected_repr\n\ndef test_resolver_match_init_partial():\n    # Create a partial function\n    def test_func(a, b):\n        return a + b\n\n    partial_func = partial(test_func, 1)\n\n    # Create a ResolverMatch object with the partial function\n    resolver_match = ResolverMatch(partial_func, (), {})\n\n    # Check that the __init__ method unwrapped the partial function\n    assert resolver_match.func == test_func\n</patched>\n```\n\n```\n<file>tests/test_resolvers.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.urls.resolvers import ResolverMatch\nfrom functools import partial\n\ndef test_resolver_match_repr_partial():\n    # Create a partial function\n    def test_func(a, b):\n        return a + b\n\n    partial_func = partial(test_func, 1)\n\n    # Create a ResolverMatch object with the partial function\n    resolver_match = ResolverMatch(partial_func, (), {})\n\n    # Check that the __repr__ method correctly handles the partial function\n    expected_repr = f\"ResolverMatch(func=functools.partial({test_func.__module__}.{test_func.__name__}, (1,), {{}}), args=(), kwargs={{}}, url_name=None, app_names=[], namespaces=[], route=None)\"\n    assert str(resolver_match) == expected_repr\n\ndef test_resolver_match_init_partial_with_args():\n    # Create a partial function\n    def test_func(a, b, c):\n        return a + b + c\n\n    partial_func = partial(test_func, 1, b=2)\n\n    # Create a ResolverMatch object with the partial function\n    resolver_match = ResolverMatch(partial_func, (), {})\n\n    # Check that the __init__ method unwrapped the partial function\n    assert resolver_match.func == test_func\n    assert resolver_match.args == ()\n    assert resolver_match.kwargs == {}\n\ndef test_resolver_match_init_partial_with_kwargs():\n    # Create a partial function\n    def test_func(a, b, c):\n        return a + b + c\n\n    partial_func = partial(test_func, 1, c=3)\n\n    # Create a ResolverMatch object with the partial function\n    resolver_match = ResolverMatch(partial_func, (), {})\n\n    # Check that the __init__ method unwrapped the partial function\n    assert resolver_match.func == test_func\n    assert resolver_match.args == (1,)\n    assert resolver_match.kwargs == {'c': 3}\n</patched>\n```",
  "patch": "--- a/tests/test_utils.py\n+++ b/tests/test_utils.py\n-# Empty if creating new file\n+import pytest\n+from django.urls.resolvers import ResolverMatch\n+from functools import partial\n+\n+def test_resolver_match_repr_partial():\n+    # Create a partial function\n+    def test_func(a, b):\n+        return a + b\n+\n+    partial_func = partial(test_func, 1)\n+\n+    # Create a ResolverMatch object with the partial function\n+    resolver_match = ResolverMatch(partial_func, (), {})\n+\n+    # Check that the __repr__ method correctly handles the partial function\n+    expected_repr = f\"ResolverMatch(func=functools.partial({test_func.__module__}.{test_func.__name__}, (1,), {{}}), args=(), kwargs={{}}, url_name=None, app_names=[], namespaces=[], route=None)\"\n+    assert str(resolver_match) == expected_repr\n+\n+def test_resolver_match_init_partial():\n+    # Create a partial function\n+    def test_func(a, b):\n+        return a + b\n+\n+    partial_func = partial(test_func, 1)\n+\n+    # Create a ResolverMatch object with the partial function\n+    resolver_match = ResolverMatch(partial_func, (), {})\n+\n+    # Check that the __init__ method unwrapped the partial function\n+    assert resolver_match.func == test_func\n\n--- a/tests/test_resolvers.py\n+++ b/tests/test_resolvers.py\n-# Empty if creating new file\n+import pytest\n+from django.urls.resolvers import ResolverMatch\n+from functools import partial\n+\n+def test_resolver_match_repr_partial():\n+    # Create a partial function\n+    def test_func(a, b):\n+        return a + b\n+\n+    partial_func = partial(test_func, 1)\n+\n+    # Create a ResolverMatch object with the partial function\n+    resolver_match = ResolverMatch(partial_func, (), {})\n+\n+    # Check that the __repr__ method correctly handles the partial function\n+    expected_repr = f\"ResolverMatch(func=functools.partial({test_func.__module__}.{test_func.__name__}, (1,), {{}}), args=(), kwargs={{}}, url_name=None, app_names=[], namespaces=[], route=None)\"\n+    assert str(resolver_match) == expected_repr\n+\n+def test_resolver_match_init_partial_with_args():\n+    # Create a partial function\n+    def test_func(a, b, c):\n+        return a + b + c\n+\n+    partial_func = partial(test_func, 1, b=2)\n+\n+    # Create a ResolverMatch object with the partial function\n+    resolver_match = ResolverMatch(partial_func, (), {})\n+\n+    # Check that the __init__ method unwrapped the partial function\n+    assert resolver_match.func == test_func\n+    assert resolver_match.args == ()\n+    assert resolver_match.kwargs == {}\n+\n+def test_resolver_match_init_partial_with_kwargs():\n+    # Create a partial function\n+    def test_func(a, b, c):\n+        return a + b + c\n+\n+    partial_func = partial(test_func, 1, c=3)\n+\n+    # Create a ResolverMatch object with the partial function\n+    resolver_match = ResolverMatch(partial_func, (), {})\n+\n+    # Check that the __init__ method unwrapped the partial function\n+    assert resolver_match.func == test_func\n+    assert resolver_match.args == (1,)\n+    assert resolver_match.kwargs == {'c': 3}\n"
}