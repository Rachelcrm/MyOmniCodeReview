{
  "instance_id": "django__django-14170",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of query optimization in `YearLookup` breaking filtering by `\"__iso_year\"`, we need to create comprehensive tests that cover the described functionality. The goal is to ensure that the `ExtractIsoYear` functionality works correctly when used with the `__iso_year` lookup.\n\nHere's a test suite that thoroughly covers the issue:\n\n```\n<file>tests/test_lookups.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.db.models import ExtractIsoYear\nfrom django.db.models.functions import Extract\n\n@pytest.mark.test_utils\nclass TestExtract:\n    def test_iso_year_lookup(self, connection):\n        # Test that the __iso_year lookup works correctly\n        from django.db.models.lookups import YearLookup\n        lookup = YearLookup('start_date__iso_year', 2020)\n        assert lookup.get_lookups()['iso_year'] == lookup\n\n    def test_extract_iso_year(self, connection):\n        # Test that ExtractIsoYear works correctly\n        qs = DTModel.objects.annotate(extracted=ExtractIsoYear('start_date')).only('id')\n        assert qs.query.sql == [\n            f\"SELECT {connection.ops.quote_name('db_functions_dtmodel')}.\"\n            f\"{connection.ops.quote_name('id')}, \"\n            f\"EXTRACT('isoyear' FROM {connection.ops.quote_name('db_functions_dtmodel')}.\"\n            f\"{connection.ops.quote_name('start_date')}) AS extracted \"\n            f\"FROM {connection.ops.quote_name('db_functions_dtmodel')}\"\n        ]\n\n    def test_extract_iso_year_filter(self, connection):\n        # Test that filtering with ExtractIsoYear works correctly\n        qs = DTModel.objects.filter(start_date__iso_year=2020).only('id')\n        assert qs.query.sql[0] == (\n            f\"SELECT {connection.ops.quote_name('db_functions_dtmodel')}.\"\n            f\"{connection.ops.quote_name('id')} \"\n            f\"FROM {connection.ops.quote_name('db_functions_dtmodel')} \"\n            f\"WHERE EXTRACT('isoyear' FROM {connection.ops.quote_name('db_functions_dtmodel')}.\"\n            f\"{connection.ops.quote_name('start_date')}) = 2020\"\n        )\n\n</patched>\n```\n\nAnd another test file:\n\n```\n<file>tests/test_year_lookup.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db.models import YearLookup\n\ndef test_year_lookup_bounds():\n    # Test that YearLookup bounds are calculated correctly\n    lookup = YearLookup('start_date__year', 2020)\n    start, finish = lookup.year_lookup_bounds(None, 2020)\n    assert start == '2020-01-01'\n    assert finish == '2020-12-31'\n\ndef test_year_lookup_as_sql():\n    # Test that YearLookup as_sql method works correctly\n    lookup = YearLookup('start_date__year', 2020)\n    sql, params = lookup.as_sql(None, None)\n    assert sql == (\n        \"{table}.{column} BETWEEN %s AND %s\"\n    )\n</patched>\n```",
  "patch": "--- a/tests/test_lookups.py\n+++ b/tests/test_lookups.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.db.models import ExtractIsoYear\n+from django.db.models.functions import Extract\n+\n+@pytest.mark.test_utils\n+class TestExtract:\n+    def test_iso_year_lookup(self, connection):\n+        # Test that the __iso_year lookup works correctly\n+        from django.db.models.lookups import YearLookup\n+        lookup = YearLookup('start_date__iso_year', 2020)\n+        assert lookup.get_lookups()['iso_year'] == lookup\n+\n+    def test_extract_iso_year(self, connection):\n+        # Test that ExtractIsoYear works correctly\n+        qs = DTModel.objects.annotate(extracted=ExtractIsoYear('start_date')).only('id')\n+        assert qs.query.sql == [\n+            f\"SELECT {connection.ops.quote_name('db_functions_dtmodel')}.\"\n+            f\"{connection.ops.quote_name('id')}, \"\n+            f\"EXTRACT('isoyear' FROM {connection.ops.quote_name('db_functions_dtmodel')}.\"\n+            f\"{connection.ops.quote_name('start_date')}) AS extracted \"\n+            f\"FROM {connection.ops.quote_name('db_functions_dtmodel')}\"\n+        ]\n+\n+    def test_extract_iso_year_filter(self, connection):\n+        # Test that filtering with ExtractIsoYear works correctly\n+        qs = DTModel.objects.filter(start_date__iso_year=2020).only('id')\n+        assert qs.query.sql[0] == (\n+            f\"SELECT {connection.ops.quote_name('db_functions_dtmodel')}.\"\n+            f\"{connection.ops.quote_name('id')} \"\n+            f\"FROM {connection.ops.quote_name('db_functions_dtmodel')} \"\n+            f\"WHERE EXTRACT('isoyear' FROM {connection.ops.quote_name('db_functions_dtmodel')}.\"\n+            f\"{connection.ops.quote_name('start_date')}) = 2020\"\n+        )\n\n--- a/tests/test_year_lookup.py\n+++ b/tests/test_year_lookup.py\n-# Empty if creating new file\n+import pytest\n+from django.db.models import YearLookup\n+\n+def test_year_lookup_bounds():\n+    # Test that YearLookup bounds are calculated correctly\n+    lookup = YearLookup('start_date__year', 2020)\n+    start, finish = lookup.year_lookup_bounds(None, 2020)\n+    assert start == '2020-01-01'\n+    assert finish == '2020-12-31'\n+\n+def test_year_lookup_as_sql():\n+    # Test that YearLookup as_sql method works correctly\n+    lookup = YearLookup('start_date__year', 2020)\n+    sql, params = lookup.as_sql(None, None)\n+    assert sql == (\n+        \"{table}.{column} BETWEEN %s AND %s\"\n+    )\n"
}