{
  "instance_id": "sphinx-doc__sphinx-8551",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_domains_python.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom sphinx.domains.python import PythonDomain\nfrom sphinx.environment import BuildEnvironment\nfrom sphinx.nodes import pending_xref\n\ndef test_resolve_xref_current_module():\n    # Create a test environment\n    env = BuildEnvironment()\n\n    # Set the current module\n    env.currentmodule = 'mod'\n\n    # Create a PythonDomain instance\n    domain = PythonDomain()\n\n    # Define a test xref\n    target = 'A'\n    node = pending_xref('', target, '')\n\n    # Resolve the xref\n    result = domain.resolve_xref(env, 'fromdocname', None, 'class', target, node, None)\n\n    # Check that the xref resolves to the correct module\n    assert result is not None\n\ndef test_resolve_xref_ambiguous():\n    # Create a test environment\n    env = BuildEnvironment()\n\n    # Set the current module\n    env.currentmodule = 'mod.submod'\n\n    # Create a PythonDomain instance\n    domain = PythonDomain()\n\n    # Define test xrefs\n    targets = ['A', 'mod.A', 'mod.submod.A']\n    node = pending_xref('', 'A', '')\n\n    # Resolve the xrefs\n    results = []\n    for target in targets:\n        result = domain.resolve_xref(env, 'fromdocname', None, 'class', target, node, None)\n        results.append(result)\n\n    # Check that the xrefs resolve correctly\n    assert results[0] == results[2]  # mod.submod.A\n    assert results[1] == 'mod.A'\n\ndef test_resolve_xref_unqualified():\n    # Create a test environment\n    env = BuildEnvironment()\n\n    # Set the current module\n    env.currentmodule = 'mod.submod'\n\n    # Create a PythonDomain instance\n    domain = PythonDomain()\n\n    # Define a test xref\n    target = 'A'\n    node = pending_xref('', target, '')\n\n    # Resolve the xref\n    result = domain.resolve_xref(env, 'fromdocname', None, 'class', target, node, None)\n\n    # Check that the xref resolves to the correct module\n    assert result == 'mod.submod.A'\n\ndef test_resolve_xref_rtype():\n    # Create a test environment\n    env = BuildEnvironment()\n\n    # Set the current module\n    env.currentmodule = 'mod.submod'\n\n    # Create a PythonDomain instance\n    domain = PythonDomain()\n\n    # Define a test xref\n    target = 'A'\n    node = pending_xref('', target, '')\n\n    # Resolve the xref for :rtype:\n    result = domain.resolve_xref(env, 'fromdocname', None, 'rtype', target, node, None)\n\n    # Check that the xref resolves to the correct module\n    assert result == 'mod.submod.A'\n</patched>\n</file>\n\n<file>tests/conftest.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\n\n@pytest.fixture\ndef build_environment():\n    return BuildEnvironment()\n</patched>\n</file>\n```",
  "patch": "--- a/tests/test_domains_python.py\n+++ b/tests/test_domains_python.py\n-# Empty if creating new file\n+import pytest\n+from sphinx.domains.python import PythonDomain\n+from sphinx.environment import BuildEnvironment\n+from sphinx.nodes import pending_xref\n+\n+def test_resolve_xref_current_module():\n+    # Create a test environment\n+    env = BuildEnvironment()\n+\n+    # Set the current module\n+    env.currentmodule = 'mod'\n+\n+    # Create a PythonDomain instance\n+    domain = PythonDomain()\n+\n+    # Define a test xref\n+    target = 'A'\n+    node = pending_xref('', target, '')\n+\n+    # Resolve the xref\n+    result = domain.resolve_xref(env, 'fromdocname', None, 'class', target, node, None)\n+\n+    # Check that the xref resolves to the correct module\n+    assert result is not None\n+\n+def test_resolve_xref_ambiguous():\n+    # Create a test environment\n+    env = BuildEnvironment()\n+\n+    # Set the current module\n+    env.currentmodule = 'mod.submod'\n+\n+    # Create a PythonDomain instance\n+    domain = PythonDomain()\n+\n+    # Define test xrefs\n+    targets = ['A', 'mod.A', 'mod.submod.A']\n+    node = pending_xref('', 'A', '')\n+\n+    # Resolve the xrefs\n+    results = []\n+    for target in targets:\n+        result = domain.resolve_xref(env, 'fromdocname', None, 'class', target, node, None)\n+        results.append(result)\n+\n+    # Check that the xrefs resolve correctly\n+    assert results[0] == results[2]  # mod.submod.A\n+    assert results[1] == 'mod.A'\n+\n+def test_resolve_xref_unqualified():\n+    # Create a test environment\n+    env = BuildEnvironment()\n+\n+    # Set the current module\n+    env.currentmodule = 'mod.submod'\n+\n+    # Create a PythonDomain instance\n+    domain = PythonDomain()\n+\n+    # Define a test xref\n+    target = 'A'\n+    node = pending_xref('', target, '')\n+\n+    # Resolve the xref\n+    result = domain.resolve_xref(env, 'fromdocname', None, 'class', target, node, None)\n+\n+    # Check that the xref resolves to the correct module\n+    assert result == 'mod.submod.A'\n+\n+def test_resolve_xref_rtype():\n+    # Create a test environment\n+    env = BuildEnvironment()\n+\n+    # Set the current module\n+    env.currentmodule = 'mod.submod'\n+\n+    # Create a PythonDomain instance\n+    domain = PythonDomain()\n+\n+    # Define a test xref\n+    target = 'A'\n+    node = pending_xref('', target, '')\n+\n+    # Resolve the xref for :rtype:\n+    result = domain.resolve_xref(env, 'fromdocname', None, 'rtype', target, node, None)\n+\n+    # Check that the xref resolves to the correct module\n+    assert result == 'mod.submod.A'\n\n--- a/tests/conftest.py\n+++ b/tests/conftest.py\n-# Empty if creating new file\n+import pytest\n+\n+@pytest.fixture\n+def build_environment():\n+    return BuildEnvironment()\n"
}