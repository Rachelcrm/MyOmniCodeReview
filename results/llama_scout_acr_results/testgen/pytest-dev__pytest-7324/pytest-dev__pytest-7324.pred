{
  "instance_id": "pytest-dev__pytest-7324",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>testing/test_mark_expression.py</file>\n<original>\n# Original code here\n</original>\n<patched>\nimport pytest\nfrom _pytest.mark.expression import Expression\n\ndef test_compile_bool():\n    assert Expression.compile(\"True\").evaluate(lambda x: True)\n    assert Expression.compile(\"False\").evaluate(lambda x: False)\n\ndef test_compile_string():\n    assert Expression.compile(\"foo\").evaluate(lambda x: x == \"foo\")\n\ndef test_evaluate():\n    expr = Expression.compile(\"foo\")\n    assert expr.evaluate(lambda x: x == \"foo\")\n    assert not expr.evaluate(lambda x: x == \"bar\")\n\ndef test_syntax_error():\n    with pytest.raises(SyntaxError):\n        Expression.compile(\"invalid syntax\")\n\ndef test_empty_is_false():\n    assert not Expression.compile(\"\").evaluate(lambda x: True)\n\n</patched>\n```",
  "patch": "--- a/testing/test_mark_expression.py\n+++ b/testing/test_mark_expression.py\n-# Original code here\n+import pytest\n+from _pytest.mark.expression import Expression\n+\n+def test_compile_bool():\n+    assert Expression.compile(\"True\").evaluate(lambda x: True)\n+    assert Expression.compile(\"False\").evaluate(lambda x: False)\n+\n+def test_compile_string():\n+    assert Expression.compile(\"foo\").evaluate(lambda x: x == \"foo\")\n+\n+def test_evaluate():\n+    expr = Expression.compile(\"foo\")\n+    assert expr.evaluate(lambda x: x == \"foo\")\n+    assert not expr.evaluate(lambda x: x == \"bar\")\n+\n+def test_syntax_error():\n+    with pytest.raises(SyntaxError):\n+        Expression.compile(\"invalid syntax\")\n+\n+def test_empty_is_false():\n+    assert not Expression.compile(\"\").evaluate(lambda x: True)\n"
}