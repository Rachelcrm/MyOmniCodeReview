{
  "instance_id": "keras-team__keras-20380",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_progbar.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom keras.src.utils.progbar import Progbar\nimport numpy as np\n\ndef test_progbar_update_dict():\n    \"\"\"Test that Progbar handles dictionary values correctly.\"\"\"\n    progbar = Progbar(10)\n    values = [('compile_metrics', {'mae': 1.0, 'mse': 2.0})]\n    progbar.update(1, values)\n    assert len(progbar._values) == 1\n    assert 'compile_metrics' in progbar._values\n    assert isinstance(progbar._values['compile_metrics'], list)\n\ndef test_progbar_update_dict_nested():\n    \"\"\"Test that Progbar handles nested dictionary values correctly.\"\"\"\n    progbar = Progbar(10)\n    values = [('compile_metrics', {'mae': 1.0, 'mse': 2.0})]\n    progbar.update(1, values)\n    progbar.update(2, values)\n    assert len(progbar._values) == 1\n    assert 'compile_metrics' in progbar._values\n    assert isinstance(progbar._values['compile_metrics'], list)\n    assert len(progbar._values['compile_metrics']) == 2\n\ndef test_progbar_metrics_names():\n    \"\"\"Test that Progbar handles metrics names correctly.\"\"\"\n    progbar = Progbar(10)\n    values = [('loss', 1.0), ('accuracy', 0.7)]\n    progbar.update(1, values)\n    assert progbar._values_order == ['loss', 'accuracy']\n\ndef test_progbar_finalize():\n    \"\"\"Test that Progbar handles finalize correctly.\"\"\"\n    progbar = Progbar(10)\n    values = [('loss', 1.0), ('accuracy', 0.7)]\n    progbar.update(10, values, finalize=True)\n    assert len(progbar._values) == 2\n    assert 'loss' in progbar._values\n    assert 'accuracy' in progbar._values\n\ndef test_multiple_metrics():\n    progbar = Progbar(10)\n    metrics = [\n        {'loss': 0.2, 'accuracy': 0.7},\n        {'loss': 0.1, 'accuracy': 0.8}\n    ]\n    for i, metric in enumerate(metrics):\n        values = list(metric.items())\n        progbar.update(i+1, values)\n    assert len(progbar._values_order) == 2\n    assert 'loss' in progbar._values_order\n    assert 'accuracy' in progbar._values_order\n\n</patched>\n```",
  "patch": "--- a/tests/test_progbar.py\n+++ b/tests/test_progbar.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from keras.src.utils.progbar import Progbar\n+import numpy as np\n+\n+def test_progbar_update_dict():\n+    \"\"\"Test that Progbar handles dictionary values correctly.\"\"\"\n+    progbar = Progbar(10)\n+    values = [('compile_metrics', {'mae': 1.0, 'mse': 2.0})]\n+    progbar.update(1, values)\n+    assert len(progbar._values) == 1\n+    assert 'compile_metrics' in progbar._values\n+    assert isinstance(progbar._values['compile_metrics'], list)\n+\n+def test_progbar_update_dict_nested():\n+    \"\"\"Test that Progbar handles nested dictionary values correctly.\"\"\"\n+    progbar = Progbar(10)\n+    values = [('compile_metrics', {'mae': 1.0, 'mse': 2.0})]\n+    progbar.update(1, values)\n+    progbar.update(2, values)\n+    assert len(progbar._values) == 1\n+    assert 'compile_metrics' in progbar._values\n+    assert isinstance(progbar._values['compile_metrics'], list)\n+    assert len(progbar._values['compile_metrics']) == 2\n+\n+def test_progbar_metrics_names():\n+    \"\"\"Test that Progbar handles metrics names correctly.\"\"\"\n+    progbar = Progbar(10)\n+    values = [('loss', 1.0), ('accuracy', 0.7)]\n+    progbar.update(1, values)\n+    assert progbar._values_order == ['loss', 'accuracy']\n+\n+def test_progbar_finalize():\n+    \"\"\"Test that Progbar handles finalize correctly.\"\"\"\n+    progbar = Progbar(10)\n+    values = [('loss', 1.0), ('accuracy', 0.7)]\n+    progbar.update(10, values, finalize=True)\n+    assert len(progbar._values) == 2\n+    assert 'loss' in progbar._values\n+    assert 'accuracy' in progbar._values\n+\n+def test_multiple_metrics():\n+    progbar = Progbar(10)\n+    metrics = [\n+        {'loss': 0.2, 'accuracy': 0.7},\n+        {'loss': 0.1, 'accuracy': 0.8}\n+    ]\n+    for i, metric in enumerate(metrics):\n+        values = list(metric.items())\n+        progbar.update(i+1, values)\n+    assert len(progbar._values_order) == 2\n+    assert 'loss' in progbar._values_order\n+    assert 'accuracy' in progbar._values_order\n"
}