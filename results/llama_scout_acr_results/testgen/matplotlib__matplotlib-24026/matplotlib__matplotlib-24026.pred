{
  "instance_id": "matplotlib__matplotlib-24026",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_stackplot.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.stackplot import stackplot\n\ndef test_stackplot_color_alias():\n    \"\"\"Test that stackplot accepts color aliases.\"\"\"\n    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n    fig, ax = plt.subplots()\n    ax.plot([1, 3], [1, 3], color='C0')\n    stackplot([1, 2, 3], my_data, colors=['C1', 'C2', 'C3'])\n    plt.close()\n\ndef test_stackplot_colors():\n    \"\"\"Test that stackplot produces correct colors.\"\"\"\n    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n    fig, ax = plt.subplots()\n    lines = stackplot([1, 2, 3], my_data, colors=['C1', 'C2', 'C3'])\n    for i, line in enumerate(lines):\n        assert line.get_facecolor() == plt.cm.tab10(i)\n\ndef test_stackplot_cycle():\n    \"\"\"Test that stackplot does not change the Axes cycle.\"\"\"\n    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n    fig, ax = plt.subplots()\n    ax.plot([1, 3], [1, 3], color='C0')\n    stackplot([1, 2, 3], my_data, colors=['C1', 'C2', 'C3'])\n    assert ax._get_lines.get_next_color() == 'C0'\n\ndef test_stackplot_fails():\n    \"\"\"Test that stackplot fails with invalid colors.\"\"\"\n    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n    fig, ax = plt.subplots()\n    with pytest.raises(ValueError):\n        stackplot([1, 2, 3], my_data, colors='invalid')\n\n</patched>\n```",
  "patch": "--- a/tests/test_stackplot.py\n+++ b/tests/test_stackplot.py\n-# Original code here (if modifying existing file)\n+import pytest\n+import matplotlib.pyplot as plt\n+import numpy as np\n+from matplotlib.stackplot import stackplot\n+\n+def test_stackplot_color_alias():\n+    \"\"\"Test that stackplot accepts color aliases.\"\"\"\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    stackplot([1, 2, 3], my_data, colors=['C1', 'C2', 'C3'])\n+    plt.close()\n+\n+def test_stackplot_colors():\n+    \"\"\"Test that stackplot produces correct colors.\"\"\"\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    lines = stackplot([1, 2, 3], my_data, colors=['C1', 'C2', 'C3'])\n+    for i, line in enumerate(lines):\n+        assert line.get_facecolor() == plt.cm.tab10(i)\n+\n+def test_stackplot_cycle():\n+    \"\"\"Test that stackplot does not change the Axes cycle.\"\"\"\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    ax.plot([1, 3], [1, 3], color='C0')\n+    stackplot([1, 2, 3], my_data, colors=['C1', 'C2', 'C3'])\n+    assert ax._get_lines.get_next_color() == 'C0'\n+\n+def test_stackplot_fails():\n+    \"\"\"Test that stackplot fails with invalid colors.\"\"\"\n+    my_data = np.array([[1, 1, 1], [1, 2, 3], [4, 3, 2]])\n+    fig, ax = plt.subplots()\n+    with pytest.raises(ValueError):\n+        stackplot([1, 2, 3], my_data, colors='invalid')\n"
}