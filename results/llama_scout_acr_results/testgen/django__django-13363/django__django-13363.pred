{
  "instance_id": "django__django-13363",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```python\n<file>tests/test_functions.py</file>\n<original>\n</original>\n<patched>\nimport datetime\nimport pytz\n\nimport pytest\nfrom django.db.models import Count, DateField, DateTimeField, TimeField\nfrom django.db.models.functions import TruncDate, TruncTime\nfrom django.test import TestCase\nfrom django.utils import timezone\n\npytestmark = pytest.mark.test_functions\n\nclass TimeSlots(models.Model):\n    start_at = DateTimeField()\n    tz = pytz.timezone(\"America/New_York\")\n\nclass TestTruncDateTimeZone(TestCase):\n    @classmethod\n    def setUpTestData(cls):\n        TimeSlots.objects.create(start_at=\"2022-01-01 12:00:00\", tz=\"America/New_York\")\n        TimeSlots.objects.create(start_at=\"2022-01-01 13:00:00\", tz=\"America/New_York\")\n\n    def test_trunc_date_with_tz(self):\n        report = (\n            TimeSlots.objects.annotate(start_date=TruncDate(\"start_at\", tzinfo=TimeSlots.objects.get(id=1).tz))\n            .values(\"start_date\")\n            .annotate(timeslot_count=Count(\"id\"))\n            .values(\"start_date\", \"timeslot_count\")\n        )\n        assert len(report) == 1\n\n    def test_trunc_time_with_tz(self):\n        report = (\n            TimeSlots.objects.annotate(start_time=TruncTime(\"start_at\", tzinfo=TimeSlots.objects.get(id=1).tz))\n            .values(\"start_time\")\n            .annotate(timeslot_count=Count(\"id\"))\n            .values(\"start_time\", \"timeslot_count\")\n        )\n        assert len(report) == 1\n\n    def test_trunc_date_without_tz(self):\n        report = (\n            TimeSlots.objects.annotate(start_date=TruncDate(\"start_at\"))\n            .values(\"start_date\")\n            .annotate(timeslot_count=Count(\"id\"))\n            .values(\"start_date\", \"timeslot_count\")\n        )\n        assert len(report) == 1\n\n    def test_trunc_time_without_tz(self):\n        report = (\n            TimeSlots.objects.annotate(start_time=TruncTime(\"start_at\"))\n            .values(\"start_time\")\n            .annotate(timeslot_count=Count(\"id\"))\n            .values(\"start_time\", \"timeslot_count\")\n        )\n        assert len(report) == 1\n</patched>\n```",
  "patch": "--- a/tests/test_functions.py\n+++ b/tests/test_functions.py\n+import datetime\n+import pytz\n+\n+import pytest\n+from django.db.models import Count, DateField, DateTimeField, TimeField\n+from django.db.models.functions import TruncDate, TruncTime\n+from django.test import TestCase\n+from django.utils import timezone\n+\n+pytestmark = pytest.mark.test_functions\n+\n+class TimeSlots(models.Model):\n+    start_at = DateTimeField()\n+    tz = pytz.timezone(\"America/New_York\")\n+\n+class TestTruncDateTimeZone(TestCase):\n+    @classmethod\n+    def setUpTestData(cls):\n+        TimeSlots.objects.create(start_at=\"2022-01-01 12:00:00\", tz=\"America/New_York\")\n+        TimeSlots.objects.create(start_at=\"2022-01-01 13:00:00\", tz=\"America/New_York\")\n+\n+    def test_trunc_date_with_tz(self):\n+        report = (\n+            TimeSlots.objects.annotate(start_date=TruncDate(\"start_at\", tzinfo=TimeSlots.objects.get(id=1).tz))\n+            .values(\"start_date\")\n+            .annotate(timeslot_count=Count(\"id\"))\n+            .values(\"start_date\", \"timeslot_count\")\n+        )\n+        assert len(report) == 1\n+\n+    def test_trunc_time_with_tz(self):\n+        report = (\n+            TimeSlots.objects.annotate(start_time=TruncTime(\"start_at\", tzinfo=TimeSlots.objects.get(id=1).tz))\n+            .values(\"start_time\")\n+            .annotate(timeslot_count=Count(\"id\"))\n+            .values(\"start_time\", \"timeslot_count\")\n+        )\n+        assert len(report) == 1\n+\n+    def test_trunc_date_without_tz(self):\n+        report = (\n+            TimeSlots.objects.annotate(start_date=TruncDate(\"start_at\"))\n+            .values(\"start_date\")\n+            .annotate(timeslot_count=Count(\"id\"))\n+            .values(\"start_date\", \"timeslot_count\")\n+        )\n+        assert len(report) == 1\n+\n+    def test_trunc_time_without_tz(self):\n+        report = (\n+            TimeSlots.objects.annotate(start_time=TruncTime(\"start_at\"))\n+            .values(\"start_time\")\n+            .annotate(timeslot_count=Count(\"id\"))\n+            .values(\"start_time\", \"timeslot_count\")\n+        )\n+        assert len(report) == 1\n"
}