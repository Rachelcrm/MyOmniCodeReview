{
  "instance_id": "scrapy__scrapy-5808",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of `Genspider` prepending `http://` without checking the scheme in the domain, we need to modify the `extract_domain` function in `scrapy/commands/genspider.py` to handle the scheme properly. \n\nHere's how we can write tests for this functionality:\n\n```\n<file>tests/test_genspider.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom scrapy.commands.genspider import extract_domain\nfrom scrapy.utils.url import add_http_if_no_scheme\nfrom urllib.parse import urlparse\n\ndef test_extract_domain_with_http_scheme():\n    url = \"http://example.com\"\n    domain = extract_domain(url)\n    assert domain == \"example.com\"\n\ndef test_extract_domain_with_https_scheme():\n    url = \"https://example.com\"\n    domain = extract_domain(url)\n    assert domain == \"example.com\"\n\ndef test_extract_domain_without_scheme():\n    url = \"example.com\"\n    domain = extract_domain(url)\n    assert domain == \"example.com\"\n\ndef test_extract_domain_with_invalid_url():\n    url = \"invalid_url\"\n    with pytest.raises(ValueError):\n        extract_domain(url)\n\ndef test_add_http_if_no_scheme():\n    url = \"example.com\"\n    new_url = add_http_if_no_scheme(url)\n    assert new_url == \"http://example.com\"\n\ndef test_extract_domain_preserves_scheme():\n    url = \"https://example.com\"\n    domain = extract_domain(url)\n    assert domain == \"example.com\"\n\ndef test_genspider_domain_handling():\n    # Test that genspider handles domains correctly\n    url = \"https://example.com\"\n    domain = extract_domain(url)\n    assert domain == \"example.com\"\n    assert urlparse(domain).scheme == \"https\"\n\n    url = \"http://example.com\"\n    domain = extract_domain(url)\n    assert domain == \"example.com\"\n    assert urlparse(domain).scheme == \"http\"\n\n    url = \"example.com\"\n    domain = extract_domain(url)\n    assert domain == \"example.com\"\n\n</patched>\n```\n\nAnd here's the modification to `scrapy/commands/genspider.py`:\n\n```\n<file>scrapy/commands/genspider.py</file>\n<original>\ndef extract_domain(url):\n    \"\"\"Extract domain name from URL string\"\"\"\n    o = urlparse(url)\n    if o.scheme == \"\" and o.netloc == \"\":\n        return \"\"\n    return o.netloc\n</original>\n<patched>\nfrom scrapy.utils.url import add_http_if_no_scheme\n\ndef extract_domain(url):\n    \"\"\"Extract domain name from URL string\"\"\"\n    o = urlparse(url)\n    if not o.scheme:\n        url = add_http_if_no_scheme(url)\n    return urlparse(url).netloc\n</patched>\n```",
  "patch": "--- a/tests/test_genspider.py\n+++ b/tests/test_genspider.py\n-# Empty if creating new file\n+import pytest\n+from scrapy.commands.genspider import extract_domain\n+from scrapy.utils.url import add_http_if_no_scheme\n+from urllib.parse import urlparse\n+\n+def test_extract_domain_with_http_scheme():\n+    url = \"http://example.com\"\n+    domain = extract_domain(url)\n+    assert domain == \"example.com\"\n+\n+def test_extract_domain_with_https_scheme():\n+    url = \"https://example.com\"\n+    domain = extract_domain(url)\n+    assert domain == \"example.com\"\n+\n+def test_extract_domain_without_scheme():\n+    url = \"example.com\"\n+    domain = extract_domain(url)\n+    assert domain == \"example.com\"\n+\n+def test_extract_domain_with_invalid_url():\n+    url = \"invalid_url\"\n+    with pytest.raises(ValueError):\n+        extract_domain(url)\n+\n+def test_add_http_if_no_scheme():\n+    url = \"example.com\"\n+    new_url = add_http_if_no_scheme(url)\n+    assert new_url == \"http://example.com\"\n+\n+def test_extract_domain_preserves_scheme():\n+    url = \"https://example.com\"\n+    domain = extract_domain(url)\n+    assert domain == \"example.com\"\n+\n+def test_genspider_domain_handling():\n+    # Test that genspider handles domains correctly\n+    url = \"https://example.com\"\n+    domain = extract_domain(url)\n+    assert domain == \"example.com\"\n+    assert urlparse(domain).scheme == \"https\"\n+\n+    url = \"http://example.com\"\n+    domain = extract_domain(url)\n+    assert domain == \"example.com\"\n+    assert urlparse(domain).scheme == \"http\"\n+\n+    url = \"example.com\"\n+    domain = extract_domain(url)\n+    assert domain == \"example.com\"\n\n--- a/scrapy/commands/genspider.py\n+++ b/scrapy/commands/genspider.py\n-def extract_domain(url):\n-    \"\"\"Extract domain name from URL string\"\"\"\n-    o = urlparse(url)\n-    if o.scheme == \"\" and o.netloc == \"\":\n-        return \"\"\n-    return o.netloc\n+from scrapy.utils.url import add_http_if_no_scheme\n+\n+def extract_domain(url):\n+    \"\"\"Extract domain name from URL string\"\"\"\n+    o = urlparse(url)\n+    if not o.scheme:\n+        url = add_http_if_no_scheme(url)\n+    return urlparse(url).netloc\n"
}