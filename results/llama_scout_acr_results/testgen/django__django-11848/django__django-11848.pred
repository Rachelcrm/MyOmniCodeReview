{
  "instance_id": "django__django-11848",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_http.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport datetime\nimport pytest\nfrom django.utils.http import parse_http_date\n\ndef test_parse_http_date():\n    # Test with a date in the 2000s\n    date_string = \"Wed, 15 Sep 2009 20:05:06 GMT\"\n    result = parse_http_date(date_string)\n    assert result == 1253304306\n\ndef test_parse_http_date_two_digit_year():\n    # Test with a date with a two-digit year (should default to 2000s)\n    date_string = \"Wed, 15 Sep 09 20:05:06 GMT\"\n    result = parse_http_date(date_string)\n    assert result == 1253304306\n\ndef test_parse_http_date_rfc850_date():\n    # Test with a date in RFC 850 format\n    date_string = \"Wednesday, 15-Sep-09 20:05:06 GMT\"\n    result = parse_http_date(date_string)\n    assert result == 1253304306\n\ndef test_parse_http_date_asctime_date():\n    # Test with a date in asctime format\n    date_string = \"Wed Sep 15 20:05:06 2009\"\n    result = parse_http_date(date_string)\n    assert result == 1253304306\n\ndef test_parse_http_date_invalid_date():\n    # Test with an invalid date string\n    date_string = \"Invalid date\"\n    with pytest.raises(ValueError):\n        parse_http_date(date_string)\n\ndef test_parse_http_date_current_year():\n    current_year = datetime.datetime.now().year\n    date_string = f\"Wed, 15 Sep {current_year % 100} 20:05:06 GMT\"\n    result = parse_http_date(date_string)\n    assert result > 0\n\ndef test_parse_http_date_far_future():\n    current_year = datetime.datetime.now().year\n    date_string = f\"Wed, 15 Sep {current_year % 100 + 50} 20:05:06 GMT\"\n    result = parse_http_date(date_string)\n    assert result > 0\n</patched>\n```",
  "patch": "--- a/tests/test_http.py\n+++ b/tests/test_http.py\n-# Empty if creating new file\n+import datetime\n+import pytest\n+from django.utils.http import parse_http_date\n+\n+def test_parse_http_date():\n+    # Test with a date in the 2000s\n+    date_string = \"Wed, 15 Sep 2009 20:05:06 GMT\"\n+    result = parse_http_date(date_string)\n+    assert result == 1253304306\n+\n+def test_parse_http_date_two_digit_year():\n+    # Test with a date with a two-digit year (should default to 2000s)\n+    date_string = \"Wed, 15 Sep 09 20:05:06 GMT\"\n+    result = parse_http_date(date_string)\n+    assert result == 1253304306\n+\n+def test_parse_http_date_rfc850_date():\n+    # Test with a date in RFC 850 format\n+    date_string = \"Wednesday, 15-Sep-09 20:05:06 GMT\"\n+    result = parse_http_date(date_string)\n+    assert result == 1253304306\n+\n+def test_parse_http_date_asctime_date():\n+    # Test with a date in asctime format\n+    date_string = \"Wed Sep 15 20:05:06 2009\"\n+    result = parse_http_date(date_string)\n+    assert result == 1253304306\n+\n+def test_parse_http_date_invalid_date():\n+    # Test with an invalid date string\n+    date_string = \"Invalid date\"\n+    with pytest.raises(ValueError):\n+        parse_http_date(date_string)\n+\n+def test_parse_http_date_current_year():\n+    current_year = datetime.datetime.now().year\n+    date_string = f\"Wed, 15 Sep {current_year % 100} 20:05:06 GMT\"\n+    result = parse_http_date(date_string)\n+    assert result > 0\n+\n+def test_parse_http_date_far_future():\n+    current_year = datetime.datetime.now().year\n+    date_string = f\"Wed, 15 Sep {current_year % 100 + 50} 20:05:06 GMT\"\n+    result = parse_http_date(date_string)\n+    assert result > 0\n"
}