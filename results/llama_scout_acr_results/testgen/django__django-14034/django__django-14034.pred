{
  "instance_id": "django__django-14034",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_forms.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom django import forms\nfrom django.forms import MultiValueField, MultiWidget\n\nclass TestMultiValueField:\n    def test_clean_with_required_subfield(self):\n        # Test that clean() adds an 'incomplete' error for required subfields\n        # when require_all_fields=False.\n\n        class MF(MultiValueField):\n            def __init__(self):\n                fields = [\n                    forms.CharField(required=False),\n                    forms.CharField(required=True),\n                ]\n                widget = MultiWidget(widgets=[f.widget for f in fields])\n                super().__init__(fields=fields, widget=widget, require_all_fields=False)\n\n            def compress(self, value):\n                return []\n\n        mf = MF()\n        with pytest.raises(forms.ValidationError) as e:\n            mf.clean(['', ''])\n        assert e.value.messages == ['Enter a complete value.']\n\n    def test_is_valid_with_required_subfield(self):\n        # Test that is_valid() returns False when a required subfield is empty.\n\n        class F(forms.Form):\n            mf = MF()\n\n        f = F({'mf_0': '', 'mf_1': ''})\n        assert not f.is_valid()\n\n    def test_is_valid_with_non_empty_required_subfield(self):\n        # Test that is_valid() returns True when a required subfield is not empty.\n\n        class F(forms.Form):\n            mf = MF()\n\n        f = F({'mf_0': 'xxx', 'mf_1': 'yyy'})\n        assert f.is_valid()\n\n    def test_clean_with_non_empty_value(self):\n        # Test that clean() does not raise an error for non-empty values.\n\n        class MF(MultiValueField):\n            def __init__(self):\n                fields = [\n                    forms.CharField(required=False),\n                    forms.CharField(required=True),\n                ]\n                widget = MultiWidget(widgets=[f.widget for f in fields])\n                super().__init__(fields=fields, widget=widget, require_all_fields=False)\n\n            def compress(self, value):\n                return []\n\n        mf = MF()\n        mf.clean(['xxx', 'yyy'])\n</patched>\n```",
  "patch": "--- a/tests/test_forms.py\n+++ b/tests/test_forms.py\n+import pytest\n+from django import forms\n+from django.forms import MultiValueField, MultiWidget\n+\n+class TestMultiValueField:\n+    def test_clean_with_required_subfield(self):\n+        # Test that clean() adds an 'incomplete' error for required subfields\n+        # when require_all_fields=False.\n+\n+        class MF(MultiValueField):\n+            def __init__(self):\n+                fields = [\n+                    forms.CharField(required=False),\n+                    forms.CharField(required=True),\n+                ]\n+                widget = MultiWidget(widgets=[f.widget for f in fields])\n+                super().__init__(fields=fields, widget=widget, require_all_fields=False)\n+\n+            def compress(self, value):\n+                return []\n+\n+        mf = MF()\n+        with pytest.raises(forms.ValidationError) as e:\n+            mf.clean(['', ''])\n+        assert e.value.messages == ['Enter a complete value.']\n+\n+    def test_is_valid_with_required_subfield(self):\n+        # Test that is_valid() returns False when a required subfield is empty.\n+\n+        class F(forms.Form):\n+            mf = MF()\n+\n+        f = F({'mf_0': '', 'mf_1': ''})\n+        assert not f.is_valid()\n+\n+    def test_is_valid_with_non_empty_required_subfield(self):\n+        # Test that is_valid() returns True when a required subfield is not empty.\n+\n+        class F(forms.Form):\n+            mf = MF()\n+\n+        f = F({'mf_0': 'xxx', 'mf_1': 'yyy'})\n+        assert f.is_valid()\n+\n+    def test_clean_with_non_empty_value(self):\n+        # Test that clean() does not raise an error for non-empty values.\n+\n+        class MF(MultiValueField):\n+            def __init__(self):\n+                fields = [\n+                    forms.CharField(required=False),\n+                    forms.CharField(required=True),\n+                ]\n+                widget = MultiWidget(widgets=[f.widget for f in fields])\n+                super().__init__(fields=fields, widget=widget, require_all_fields=False)\n+\n+            def compress(self, value):\n+                return []\n+\n+        mf = MF()\n+        mf.clean(['xxx', 'yyy'])\n"
}