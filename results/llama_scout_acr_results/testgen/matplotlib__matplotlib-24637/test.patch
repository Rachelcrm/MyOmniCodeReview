--- a/tests/test_offsetbox.py
+++ b/tests/test_offsetbox.py
-# Original code here (if modifying existing file)
+import pytest
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import OffsetImage, AnnotationBbox
+
+def test_annotationbbox_gid():
+    fig, ax = plt.subplots()
+    arr_img = plt.imread("undraw_flowers_vx06.png")
+    xy = [0.3, 0.55]
+    imagebox = OffsetImage(arr_img, zoom=0.1)
+    imagebox.image.axes = ax
+    ab = AnnotationBbox(imagebox, xy,
+                        xybox=(120., -80.),
+                        xycoords='data',
+                        boxcoords="offset points",
+                        pad=0.5,
+                        arrowprops=dict(
+                            arrowstyle="->",
+                            connectionstyle="angle,angleA=0,angleB=90,rad=3")
+                        )
+    ab.set_gid('My_label')
+    ax.add_artist(ab)
+    fig.savefig("test_annotationbbox_gid.svg", format="svg")
+    # Check if the gid is present in the SVG file
+    with open("test_annotationbbox_gid.svg", "r") as f:
+        svg_content = f.read()
+    assert 'gid="My_label"' in svg_content

--- a/tests/test_offsetimage.py
+++ b/tests/test_offsetimage.py
-# Original code here (if modifying existing file)
+import pytest
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import OffsetImage
+
+def test_offsetimage_gid():
+    fig, ax = plt.subplots()
+    arr_img = plt.imread("undraw_flowers_vx06.png")
+    imagebox = OffsetImage(arr_img, zoom=0.1)
+    imagebox.set_gid('My_label')
+    # Check if the gid is set correctly
+    assert imagebox.get_gid() == 'My_label'
+    # Render the image and check if the gid is present in the SVG file
+    imagebox.draw(None)  # This should not raise any errors
