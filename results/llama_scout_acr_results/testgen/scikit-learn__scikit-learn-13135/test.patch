--- a/sklearn/preprocessing/_discretization.py
+++ b/sklearn/preprocessing/_discretization.py
-    elif self.strategy == 'kmeans':
-        # Deterministic initialization with uniform spacing
-        uniform_edges = np.linspace(col_min, col_max, n_bins[jj] + 1)
-        init = (uniform_edges[1:] + uniform_edges[:-1])[:, None] * 0.5
-
-        # 1D k-means procedure
-        km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)
-        centers = km.fit(column[:, None]).cluster_centers_[:, 0]
-        bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5
-        bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]
+    elif self.strategy == 'kmeans':
+        # Deterministic initialization with uniform spacing
+        uniform_edges = np.linspace(col_min, col_max, n_bins[jj] + 1)
+        init = (uniform_edges[1:] + uniform_edges[:-1])[:, None] * 0.5
+
+        # 1D k-means procedure
+        km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)
+        centers = km.fit(column[:, None]).cluster_centers_[:, 0]
+        bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5
+        bin_edges[jj] = np.sort(bin_edges[jj])  # Ensure bin edges are sorted
+        bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]

--- a/tests/test_discretization.py
+++ b/tests/test_discretization.py
-# Original test code
+import pytest
+import numpy as np
+from sklearn.preprocessing import KBinsDiscretizer
+
+def test_kmeans_strategy_bins_sorted():
+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+    est.fit(X)
+    bin_edges = est.bin_edges_
+    for jj in range(bin_edges.shape[0]):
+        assert np.all(np.diff(bin_edges[jj]) >= 0)
+
+def test_kmeans_strategy_transform():
+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+    Xt = est.fit_transform(X)
+    assert Xt.shape == X.shape
