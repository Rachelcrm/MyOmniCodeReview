{
  "instance_id": "sympy__sympy-22080",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_lambdify.py</file>\n<original>\n# Original code here (if modifying existing file)\n# Leave empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom sympy import Mod, lambdify, symbols\n\ndef test_lambdify_mod():\n    x, y = symbols('x y')\n    expr = -Mod(x, y)\n    f = lambdify([x, y], expr)\n    assert f(3, 7) == -3\n\ndef test_lambdify_mod_modules_empty():\n    x, y = symbols('x y')\n    expr = -Mod(x, y)\n    f = lambdify([x, y], expr, modules=[])\n    assert f(3, 7) == 4\n\ndef test_lambdify_mod_modules_none():\n    x, y = symbols('x y')\n    expr = -Mod(x, y)\n    f = lambdify([x, y], expr, modules=None)\n    assert f(3, 7) == -3\n\ndef test_lambdify_mod_with_multiplier():\n    x, y = symbols('x y')\n    expr = 2 * Mod(x, y)\n    f = lambdify([x, y], expr)\n    assert f(3, 7) == 2\n\ndef test_lambdify_mod_with_multiplier_modules_empty():\n    x, y = symbols('x y')\n    expr = 2 * Mod(x, y)\n    f = lambdify([x, y], expr, modules=[])\n    assert f(3, 7) == 2\n\ndef test_lambdify_mod_with_multiplier_modules_none():\n    x, y = symbols('x y')\n    expr = 2 * Mod(x, y)\n    f = lambdify([x, y], expr, modules=None)\n    assert f(3, 7) == 2\n</patched>\n</file>",
  "patch": "--- a/tests/test_lambdify.py\n+++ b/tests/test_lambdify.py\n-# Original code here (if modifying existing file)\n-# Leave empty if creating new file\n+import pytest\n+from sympy import Mod, lambdify, symbols\n+\n+def test_lambdify_mod():\n+    x, y = symbols('x y')\n+    expr = -Mod(x, y)\n+    f = lambdify([x, y], expr)\n+    assert f(3, 7) == -3\n+\n+def test_lambdify_mod_modules_empty():\n+    x, y = symbols('x y')\n+    expr = -Mod(x, y)\n+    f = lambdify([x, y], expr, modules=[])\n+    assert f(3, 7) == 4\n+\n+def test_lambdify_mod_modules_none():\n+    x, y = symbols('x y')\n+    expr = -Mod(x, y)\n+    f = lambdify([x, y], expr, modules=None)\n+    assert f(3, 7) == -3\n+\n+def test_lambdify_mod_with_multiplier():\n+    x, y = symbols('x y')\n+    expr = 2 * Mod(x, y)\n+    f = lambdify([x, y], expr)\n+    assert f(3, 7) == 2\n+\n+def test_lambdify_mod_with_multiplier_modules_empty():\n+    x, y = symbols('x y')\n+    expr = 2 * Mod(x, y)\n+    f = lambdify([x, y], expr, modules=[])\n+    assert f(3, 7) == 2\n+\n+def test_lambdify_mod_with_multiplier_modules_none():\n+    x, y = symbols('x y')\n+    expr = 2 * Mod(x, y)\n+    f = lambdify([x, y], expr, modules=None)\n+    assert f(3, 7) == 2\n"
}