{
  "instance_id": "django__django-14500",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_migration_executor.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import migrations\nfrom django.db.migrations.executor import MigrationExecutor\nfrom django.db.migrations.recorder import MigrationRecorder\n\n@pytest.fixture\ndef executor():\n return MigrationExecutor(connection=None)\n\ndef test_unapply_squashed_migration(executor):\n # Create a squashed migration\n squashed_migration = migrations.Migration('app', 'squashed')\n\n # Create replaced migrations\n replaced_migration1 = migrations.Migration('app', 'replaced1')\n replaced_migration2 = migrations.Migration('app', 'replaced2')\n\n # Mark replaced migrations as applied\n executor.recorder.record_applied(replaced_migration1.app_label, replaced_migration1.name)\n executor.recorder.record_applied(replaced_migration2.app_label, replaced_migration2.name)\n\n # Squashed migration replaces the other two\n squashed_migration.replaces = [(replaced_migration1.app_label, replaced_migration1.name),\n (replaced_migration2.app_label, replaced_migration2.name)]\n\n # Unapply the squashed migration\n executor.unapply_migration(None, squashed_migration)\n\n # Check that replaced migrations are marked as unapplied\n assert not executor.recorder.migration_qs.filter(app=replaced_migration1.app_label, name=replaced_migration1.name).exists()\n assert not executor.recorder.migration_qs.filter(app=replaced_migration2.app_label, name=replaced_migration2.name).exists()\n\ndef test_unapply_non_squashed_migration(executor):\n # Create a non-squashed migration\n non_squashed_migration = migrations.Migration('app', 'non_squashed')\n\n # Mark it as applied\n executor.recorder.record_applied(non_squashed_migration.app_label, non_squashed_migration.name)\n\n # Unapply the migration\n executor.unapply_migration(None, non_squashed_migration)\n\n # Check that it's marked as unapplied\n assert not executor.recorder.migration_qs.filter(app=non_squashed_migration.app_label, name=non_squashed_migration.name).exists()\n</patched>\n```",
  "patch": "--- a/tests/test_migration_executor.py\n+++ b/tests/test_migration_executor.py\n-# Empty if creating new file\n+import pytest\n+from django.db import migrations\n+from django.db.migrations.executor import MigrationExecutor\n+from django.db.migrations.recorder import MigrationRecorder\n+\n+@pytest.fixture\n+def executor():\n+ return MigrationExecutor(connection=None)\n+\n+def test_unapply_squashed_migration(executor):\n+ # Create a squashed migration\n+ squashed_migration = migrations.Migration('app', 'squashed')\n+\n+ # Create replaced migrations\n+ replaced_migration1 = migrations.Migration('app', 'replaced1')\n+ replaced_migration2 = migrations.Migration('app', 'replaced2')\n+\n+ # Mark replaced migrations as applied\n+ executor.recorder.record_applied(replaced_migration1.app_label, replaced_migration1.name)\n+ executor.recorder.record_applied(replaced_migration2.app_label, replaced_migration2.name)\n+\n+ # Squashed migration replaces the other two\n+ squashed_migration.replaces = [(replaced_migration1.app_label, replaced_migration1.name),\n+ (replaced_migration2.app_label, replaced_migration2.name)]\n+\n+ # Unapply the squashed migration\n+ executor.unapply_migration(None, squashed_migration)\n+\n+ # Check that replaced migrations are marked as unapplied\n+ assert not executor.recorder.migration_qs.filter(app=replaced_migration1.app_label, name=replaced_migration1.name).exists()\n+ assert not executor.recorder.migration_qs.filter(app=replaced_migration2.app_label, name=replaced_migration2.name).exists()\n+\n+def test_unapply_non_squashed_migration(executor):\n+ # Create a non-squashed migration\n+ non_squashed_migration = migrations.Migration('app', 'non_squashed')\n+\n+ # Mark it as applied\n+ executor.recorder.record_applied(non_squashed_migration.app_label, non_squashed_migration.name)\n+\n+ # Unapply the migration\n+ executor.unapply_migration(None, non_squashed_migration)\n+\n+ # Check that it's marked as unapplied\n+ assert not executor.recorder.migration_qs.filter(app=non_squashed_migration.app_label, name=non_squashed_migration.name).exists()\n"
}