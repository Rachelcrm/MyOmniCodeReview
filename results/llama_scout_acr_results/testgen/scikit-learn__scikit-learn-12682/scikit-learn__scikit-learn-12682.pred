{
  "instance_id": "scikit-learn__scikit-learn-12682",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of `SparseCoder` not exposing `max_iter` for `Lasso`, we need to modify the `__init__` method of `SparseCoder` to accept `**lasso_params` and pass these parameters to the `_sparse_encode` method or directly to `Lasso` when `transform_algorithm='lasso_cd'`.\n\nHere's how we can write tests for this functionality:\n\n```\n<file>tests/test_decomposition.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom sklearn.decomposition import SparseCoder\nfrom sklearn.linear_model import Lasso\n\ndef test_sparse_coder_lasso_max_iter():\n    # Test that SparseCoder exposes max_iter for Lasso\n    dictionary = [[1, 0], [0, 1]]\n    X = [1, 1]\n\n    # Test with default max_iter\n    coder = SparseCoder(dictionary=dictionary, transform_algorithm='lasso_cd')\n    code = coder.fit_transform(X)\n    assert coder.components_ is not None\n\n    # Test with specified max_iter\n    max_iter = 500\n    coder = SparseCoder(dictionary=dictionary, transform_algorithm='lasso_cd', lasso__max_iter=max_iter)\n    assert coder.lasso_params['max_iter'] == max_iter\n\ndef test_sparse_coder_lasso_params():\n    # Test that SparseCoder passes lasso_params correctly\n    dictionary = [[1, 0], [0, 1]]\n    X = [1, 1]\n\n    # Test with some lasso parameters\n    lasso_params = {'max_iter': 1000, 'positive': True}\n    coder = SparseCoder(dictionary=dictionary, transform_algorithm='lasso_cd', **lasso_params)\n    assert coder.lasso_params == lasso_params\n\n    code = coder.fit_transform(X)\n    assert coder.components_ is not None\n\ndef test_sparse_coder_invalid_lasso_param():\n    # Test that SparseCoder raises an error for invalid lasso parameter\n    dictionary = [[1, 0], [0, 1]]\n    X = [1, 1]\n\n    with pytest.raises(TypeError):\n        SparseCoder(dictionary=dictionary, transform_algorithm='lasso_cd', invalid_param='value')\n\n</patched>\n```",
  "patch": "--- a/tests/test_decomposition.py\n+++ b/tests/test_decomposition.py\n+import pytest\n+from sklearn.decomposition import SparseCoder\n+from sklearn.linear_model import Lasso\n+\n+def test_sparse_coder_lasso_max_iter():\n+    # Test that SparseCoder exposes max_iter for Lasso\n+    dictionary = [[1, 0], [0, 1]]\n+    X = [1, 1]\n+\n+    # Test with default max_iter\n+    coder = SparseCoder(dictionary=dictionary, transform_algorithm='lasso_cd')\n+    code = coder.fit_transform(X)\n+    assert coder.components_ is not None\n+\n+    # Test with specified max_iter\n+    max_iter = 500\n+    coder = SparseCoder(dictionary=dictionary, transform_algorithm='lasso_cd', lasso__max_iter=max_iter)\n+    assert coder.lasso_params['max_iter'] == max_iter\n+\n+def test_sparse_coder_lasso_params():\n+    # Test that SparseCoder passes lasso_params correctly\n+    dictionary = [[1, 0], [0, 1]]\n+    X = [1, 1]\n+\n+    # Test with some lasso parameters\n+    lasso_params = {'max_iter': 1000, 'positive': True}\n+    coder = SparseCoder(dictionary=dictionary, transform_algorithm='lasso_cd', **lasso_params)\n+    assert coder.lasso_params == lasso_params\n+\n+    code = coder.fit_transform(X)\n+    assert coder.components_ is not None\n+\n+def test_sparse_coder_invalid_lasso_param():\n+    # Test that SparseCoder raises an error for invalid lasso parameter\n+    dictionary = [[1, 0], [0, 1]]\n+    X = [1, 1]\n+\n+    with pytest.raises(TypeError):\n+        SparseCoder(dictionary=dictionary, transform_algorithm='lasso_cd', invalid_param='value')\n"
}