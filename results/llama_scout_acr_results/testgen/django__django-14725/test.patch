--- a/django/forms/models.py
+++ b/django/forms/models.py
-    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
-                 queryset=None, *, initial=None, **kwargs):
-        self.queryset = queryset
-        self.initial_extra = initial
-        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})
+    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
+                 queryset=None, *, initial=None, allow_new=True, **kwargs):
+        self.queryset = queryset
+        self.initial_extra = initial
+        self.allow_new = allow_new
+        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})

--- a/django/forms/models.py
+++ b/django/forms/models.py
-    def save_new_objects(self, commit=True):
-        self.new_objects = []
-        for form in self.extra_forms:
-            if not form.has_changed():
-                continue
-            # If someone has marked an add form for deletion, don't save the
-            # object.
-            if self.can_delete and self._should_delete_form(form):
-                continue
-            self.new_objects.append(self.save_new(form, commit=commit))
-            if not commit:
-                self.saved_forms.append(form)
-        return self.new_objects
+    def save_new_objects(self, commit=True):
+        if not self.allow_new:
+            raise ValidationError("New object creation is not allowed.")
+        self.new_objects = []
+        for form in self.extra_forms:
+            if not form.has_changed():
+                continue
+            # If someone has marked an add form for deletion, don't save the
+            # object.
+            if self.can_delete and self._should_delete_form(form):
+                continue
+            self.new_objects.append(self.save_new(form, commit=commit))
+            if not commit:
+                self.saved_forms.append(form)
+        return self.new_objects

--- a/tests/test_forms_models.py
+++ b/tests/test_forms_models.py
+import pytest
+from django import forms
+from django.forms.models import BaseModelFormSet
+from django.core.exceptions import ValidationError
+
+@pytest.mark.parametrize("allow_new", [True, False])
+def test_save_new_objects(allow_new):
+    class TestModelForm(forms.ModelForm):
+        class Meta:
+            model = TestModel
+
+    class TestModelFormSet(BaseModelFormSet):
+        pass
+
+    data = {
+        'form-TOTAL_FORMS': '1',
+        'form-INITIAL_FORMS': '0',
+        'form-MIN_NUM_FORMS': '0',
+        'form-MAX_NUM_FORMS': '1000',
+    }
+    formset = TestModelFormSet(data, allow_new=allow_new)
+    if allow_new:
+        formset.save_new_objects()
+    else:
+        with pytest.raises(ValidationError):
+            formset.save_new_objects()
+
+def test_allow_new_init():
+    class TestModelForm(forms.ModelForm):
+        class Meta:
+            model = TestModel
+
+    class TestModelFormSet(BaseModelFormSet):
+        pass
+
+    data = {
+        'form-TOTAL_FORMS': '1',
+        'form-INITIAL_FORMS': '0',
+        'form-MIN_NUM_FORMS': '0',
+        'form-MAX_NUM_FORMS': '1000',
+    }
+    formset = TestModelFormSet(data, allow_new=False)
+    assert not formset.allow_new
+
+class TestModel(models.Model):
+    name = forms.CharField(max_length=100)
