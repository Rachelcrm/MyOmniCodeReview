{
  "instance_id": "django__django-11999",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_models.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom django.db import models\n\ndef test_get_display_override():\n    class FooBar(models.Model):\n        foo_bar = models.CharField(_(\"foo\"), choices=[(1, 'foo'), (2, 'bar')])\n\n        def get_foo_bar_display(self):\n            return \"something\"\n\n    instance = FooBar.objects.create(foo_bar=1)\n    assert instance.get_foo_bar_display() == \"something\"\n\ndef test_get_display_no_override():\n    class FooBar(models.Model):\n        foo_bar = models.CharField(_(\"foo\"), choices=[(1, 'foo'), (2, 'bar')])\n\n    instance = FooBar.objects.create(foo_bar=1)\n    assert instance.get_foo_bar_display() == 'foo'\n</patched>\n\n<file>tests/test_models_inheritance.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom django.db import models\n\nclass BaseModel(models.Model):\n    base_field = models.CharField(max_length=100)\n\n    def get_base_field_display(self):\n        return self.base_field.upper()\n\nclass InheritedModel(BaseModel):\n    inherited_field = models.CharField(max_length=100)\n\ndef test_inherited_get_display():\n    instance = InheritedModel.objects.create(base_field=\"lower\", inherited_field=\"inherited\")\n    assert instance.get_base_field_display() == \"LOWER\"\n    assert instance.get_inherited_field_display() == None\n</patched>\n</file>\n\n<file>tests/test_modeling.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom django.db.models import CharField, Model\n\ndef test_dynamic_display_methods():\n    class TestModel(Model):\n        field_with_choices = CharField(choices=[(1, 'one'), (2, 'two')])\n\n    instance = TestModel(field_with_choices=1)\n    assert instance.get_field_with_choices_display() == 'one'\n</patched>\n</file>\n```",
  "patch": "--- a/tests/test_models.py\n+++ b/tests/test_models.py\n+import pytest\n+from django.db import models\n+\n+def test_get_display_override():\n+    class FooBar(models.Model):\n+        foo_bar = models.CharField(_(\"foo\"), choices=[(1, 'foo'), (2, 'bar')])\n+\n+        def get_foo_bar_display(self):\n+            return \"something\"\n+\n+    instance = FooBar.objects.create(foo_bar=1)\n+    assert instance.get_foo_bar_display() == \"something\"\n+\n+def test_get_display_no_override():\n+    class FooBar(models.Model):\n+        foo_bar = models.CharField(_(\"foo\"), choices=[(1, 'foo'), (2, 'bar')])\n+\n+    instance = FooBar.objects.create(foo_bar=1)\n+    assert instance.get_foo_bar_display() == 'foo'\n\n--- a/tests/test_models_inheritance.py\n+++ b/tests/test_models_inheritance.py\n+import pytest\n+from django.db import models\n+\n+class BaseModel(models.Model):\n+    base_field = models.CharField(max_length=100)\n+\n+    def get_base_field_display(self):\n+        return self.base_field.upper()\n+\n+class InheritedModel(BaseModel):\n+    inherited_field = models.CharField(max_length=100)\n+\n+def test_inherited_get_display():\n+    instance = InheritedModel.objects.create(base_field=\"lower\", inherited_field=\"inherited\")\n+    assert instance.get_base_field_display() == \"LOWER\"\n+    assert instance.get_inherited_field_display() == None\n\n--- a/tests/test_modeling.py\n+++ b/tests/test_modeling.py\n+import pytest\n+from django.db.models import CharField, Model\n+\n+def test_dynamic_display_methods():\n+    class TestModel(Model):\n+        field_with_choices = CharField(choices=[(1, 'one'), (2, 'two')])\n+\n+    instance = TestModel(field_with_choices=1)\n+    assert instance.get_field_with_choices_display() == 'one'\n"
}