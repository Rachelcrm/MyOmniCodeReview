{
  "instance_id": "sphinx-doc__sphinx-10449",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_autodoc_typehints.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom sphinx import __version__ as sphinx_version\nfrom sphinx.ext.autodoc import autodoc_typehints\n\ndef test_autodoc_typehints_description():\n    # Given\n    app = pytest.MonkeyPatch()\n    app.config.autodoc_typehints = \"description\"\n\n    # When\n    typehints = autodoc_typehints(app)\n\n    # Then\n    assert typehints == \"description\"\n\ndef test_autodoc_typehints_both():\n    # Given\n    app = pytest.MonkeyPatch()\n    app.config.autodoc_typehints = \"both\"\n\n    # When\n    typehints = autodoc_typehints(app)\n\n    # Then\n    assert typehints == \"both\"\n\ndef test_autodoc_typehints_class_return_type():\n    # Given\n    class Square:\n        \"\"\"A class representing a square figure.\"\"\"\n\n        def __init__(self, width: int, height: int) -> None:\n            self.width = width\n            self.height = height\n\n    app = pytest.MonkeyPatch()\n    app.config.autodoc_typehints = \"description\"\n\n    # When\n    with pytest.raises(Exception) as excinfo:\n        autodoc_typehints(app, Square)\n\n    # Then\n    assert \"return type\" not in str(excinfo.value)\n\ndef test_autodoc_typehints_function_return_type():\n    # Given\n    def greet(name: str) -> str:\n        return f\"Hello, {name}!\"\n\n    app = pytest.MonkeyPatch()\n    app.config.autodoc_typehints = \"description\"\n\n    # When\n    with pytest.raises(Exception) as excinfo:\n        autodoc_typehints(app, greet)\n\n    # Then\n    assert \"return type\" in str(excinfo.value)\n\n</patched>\n```",
  "patch": "--- a/tests/test_autodoc_typehints.py\n+++ b/tests/test_autodoc_typehints.py\n+import pytest\n+from sphinx import __version__ as sphinx_version\n+from sphinx.ext.autodoc import autodoc_typehints\n+\n+def test_autodoc_typehints_description():\n+    # Given\n+    app = pytest.MonkeyPatch()\n+    app.config.autodoc_typehints = \"description\"\n+\n+    # When\n+    typehints = autodoc_typehints(app)\n+\n+    # Then\n+    assert typehints == \"description\"\n+\n+def test_autodoc_typehints_both():\n+    # Given\n+    app = pytest.MonkeyPatch()\n+    app.config.autodoc_typehints = \"both\"\n+\n+    # When\n+    typehints = autodoc_typehints(app)\n+\n+    # Then\n+    assert typehints == \"both\"\n+\n+def test_autodoc_typehints_class_return_type():\n+    # Given\n+    class Square:\n+        \"\"\"A class representing a square figure.\"\"\"\n+\n+        def __init__(self, width: int, height: int) -> None:\n+            self.width = width\n+            self.height = height\n+\n+    app = pytest.MonkeyPatch()\n+    app.config.autodoc_typehints = \"description\"\n+\n+    # When\n+    with pytest.raises(Exception) as excinfo:\n+        autodoc_typehints(app, Square)\n+\n+    # Then\n+    assert \"return type\" not in str(excinfo.value)\n+\n+def test_autodoc_typehints_function_return_type():\n+    # Given\n+    def greet(name: str) -> str:\n+        return f\"Hello, {name}!\"\n+\n+    app = pytest.MonkeyPatch()\n+    app.config.autodoc_typehints = \"description\"\n+\n+    # When\n+    with pytest.raises(Exception) as excinfo:\n+        autodoc_typehints(app, greet)\n+\n+    # Then\n+    assert \"return type\" in str(excinfo.value)\n"
}