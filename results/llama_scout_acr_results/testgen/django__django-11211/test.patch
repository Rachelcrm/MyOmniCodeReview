--- a/tests/test_gfk_prefetch_related.py
+++ b/tests/test_gfk_prefetch_related.py
+import pytest
+from django.db import models
+from django.contrib.contenttypes.fields import GenericForeignKey
+from django.contrib.contenttypes.models import ContentType
+from django.db.models.query import prefetch_related
+
+# Define models for testing
+class UUIDModel(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+
+class GFKModel(models.Model):
+    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
+    object_id = models.CharField(max_length=255)
+    foo = GenericForeignKey('content_type', 'object_id')
+
+class BarModel(models.Model):
+    foo_gfk = GenericForeignKey()
+
+# Pytest fixtures
+@pytest.fixture
+def uuid_model_instance():
+    return UUIDModel.objects.create()
+
+@pytest.fixture
+def gfk_model_instance(uuid_model_instance):
+    content_type = ContentType.objects.get_for_model(UUIDModel)
+    return GFKModel.objects.create(content_type=content_type, object_id=str(uuid_model_instance.id))
+
+@pytest.fixture
+def bar_model_instance(gfk_model_instance):
+    content_type = ContentType.objects.get_for_model(GFKModel)
+    return BarModel.objects.create(content_type=content_type, object_id=str(gfk_model_instance.id))
+
+# Tests
+def test_prefetch_related_with_uuid_primary_key(gfk_model_instance):
+    """Test prefetch_related with UUID primary key."""
+    qs = GFKModel.objects.prefetch_related('foo')
+    result = qs.get(id=gfk_model_instance.id)
+    assert result.foo is not None
+
+def test_prefetch_related_with_multiple_gfks(bar_model_instance):
+    """Test prefetch_related with multiple GFKs."""
+    # Assuming another GFK model
+    class AnotherGFKModel(models.Model):
+        content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
+        object_id = models.CharField(max_length=255)
+        foo = GenericForeignKey('content_type', 'object_id')
+
+    another_gfk_instance = AnotherGFKModel.objects.create(content_type=ContentType.objects.get_for_model(UUIDModel), object_id=str(uuid_model_instance.id))
+
+    qs = BarModel.objects.prefetch_related('foo_gfk', 'another_gfk')
+    result = qs.get(id=bar_model_instance.id)
+    assert result.foo_gfk is not None
+    # assert result.another_gfk is not None  # Uncomment when implemented
+
+def test_prefetch_related_with_gfk_no_related_objects():
+    """Test prefetch_related with GFK and no related objects."""
+    qs = GFKModel.objects.prefetch_related('foo')
+    result = qs.get(id=1)  # Assuming no object with id 1 exists
+    assert result.foo is None
