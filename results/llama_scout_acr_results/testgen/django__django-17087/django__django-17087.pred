{
  "instance_id": "django__django-17087",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_models.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.contrib.postgres.fields import ArrayField\nfrom django.contrib.postgres import lookups\n\nclass Profile(models.Model):\n    class Capability(models.TextChoices):\n        BASIC = (\"BASIC\", \"Basic\")\n        PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n\n        @classmethod\n        def default(cls) -> list[str]:\n            return [cls.BASIC]\n\n    capabilities = ArrayField(\n        models.CharField(choices=Capability.choices, max_length=30, blank=True),\n        null=True,\n        default=Capability.default\n    )\n\ndef test_capability_default():\n    profile = Profile()\n    assert profile.capabilities == [Profile.Capability.BASIC]\n\ndef test_migration_default():\n    # Test that the default is correctly serialized in migrations\n    # This test might require a test database and a migration\n    pass\n\ndef test_capability_choices():\n    assert Profile.Capability.choices == [('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')]\n\ndef test_capability_default_value():\n    assert Profile.Capability.default() == ['BASIC']\n\ndef test_profile_capabilities_default():\n    profile = Profile()\n    assert profile.capabilities is not None\n    assert profile.capabilities == [Profile.Capability.BASIC]\n</patched>\n</file>\n\n<file>tests/test_migrations.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import migrations\n\n@pytest.mark.skip(\"Implement test for migration default serialization\")\ndef test_migration_default_serialization():\n    # Test that the default is correctly serialized in migrations\n    pass\n</patched>\n</file>",
  "patch": "--- a/tests/test_models.py\n+++ b/tests/test_models.py\n-# Empty if creating new file\n+import pytest\n+from django.db import models\n+from django.contrib.postgres.fields import ArrayField\n+from django.contrib.postgres import lookups\n+\n+class Profile(models.Model):\n+    class Capability(models.TextChoices):\n+        BASIC = (\"BASIC\", \"Basic\")\n+        PROFESSIONAL = (\"PROFESSIONAL\", \"Professional\")\n+\n+        @classmethod\n+        def default(cls) -> list[str]:\n+            return [cls.BASIC]\n+\n+    capabilities = ArrayField(\n+        models.CharField(choices=Capability.choices, max_length=30, blank=True),\n+        null=True,\n+        default=Capability.default\n+    )\n+\n+def test_capability_default():\n+    profile = Profile()\n+    assert profile.capabilities == [Profile.Capability.BASIC]\n+\n+def test_migration_default():\n+    # Test that the default is correctly serialized in migrations\n+    # This test might require a test database and a migration\n+    pass\n+\n+def test_capability_choices():\n+    assert Profile.Capability.choices == [('BASIC', 'Basic'), ('PROFESSIONAL', 'Professional')]\n+\n+def test_capability_default_value():\n+    assert Profile.Capability.default() == ['BASIC']\n+\n+def test_profile_capabilities_default():\n+    profile = Profile()\n+    assert profile.capabilities is not None\n+    assert profile.capabilities == [Profile.Capability.BASIC]\n\n--- a/tests/test_migrations.py\n+++ b/tests/test_migrations.py\n-# Empty if creating new file\n+import pytest\n+from django.db import migrations\n+\n+@pytest.mark.skip(\"Implement test for migration default serialization\")\n+def test_migration_default_serialization():\n+    # Test that the default is correctly serialized in migrations\n+    pass\n"
}