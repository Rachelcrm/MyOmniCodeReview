--- a/tests/test_tokens.py
+++ b/tests/test_tokens.py
-# Empty if creating new file
+import pytest
+from django.contrib.auth.tokens import PasswordResetTokenGenerator
+from django.contrib.auth.models import User
+from django.utils.http import urlsafe_base64_encode
+from django.utils.encoding import force_bytes
+
+@pytest.fixture
+def user():
+    return User.objects.create_user(email='test@example.com', password='testpassword')
+
+@pytest.fixture
+def token_generator():
+    return PasswordResetTokenGenerator()
+
+def test_password_reset_token_generation(user, token_generator):
+    token = token_generator.make_token(user)
+    assert token is not None
+
+def test_password_reset_token_validation(user, token_generator):
+    token = token_generator.make_token(user)
+    assert token_generator.check_token(user, token) == True
+
+def test_password_reset_token_invalidation_on_email_change(user, token_generator):
+    token = token_generator.make_token(user)
+    user.email = 'new_email@example.com'
+    user.save()
+    assert token_generator.check_token(user, token) == False
+
+def test_password_reset_token_invalidation_on_password_change(user, token_generator):
+    token = token_generator.make_token(user)
+    user.set_password('newpassword')
+    user.save()
+    assert token_generator.check_token(user, token) == False
+
+def test_password_reset_token_validity_with_timestamp(user, token_generator):
+    # Assuming token_generator uses a timestamp
+    token = token_generator.make_token(user)
+    # Advance time and check if token is still valid
+    # This test might require mocking time-related functions
+
+def test_custom_token_generator_with_email(user):
+    class CustomTokenGenerator(PasswordResetTokenGenerator):
+        def _make_hash_value(self, user, timestamp):
+            return str(user.pk) + user.password + str(user.email) + str(user.last_login) + str(timestamp)
+
+    token_generator = CustomTokenGenerator()
+    token = token_generator.make_token(user)
+    user.email = 'new_email@example.com'
+    user.save()
+    assert token_generator.check_token(user, token) == False

--- a/tests/test_views.py
+++ b/tests/test_views.py
-# Empty if creating new file
+import pytest
+from django.test import Client
+from django.urls import reverse
+from django.contrib.auth.models import User
+
+@pytest.fixture
+def client():
+    return Client()
+
+@pytest.fixture
+def user():
+    return User.objects.create_user(email='test@example.com', password='testpassword')
+
+def test_password_reset_view(client, user):
+    url = reverse('password_reset')
+    data = {'email': user.email}
+    response = client.post(url, data)
+    assert response.status_code == 302
+
+def test_password_reset_done_view(client, user):
+    url = reverse('password_reset_done')
+    response = client.get(url)
+    assert response.status_code == 200
+
+def test_password_reset_confirm_view(client, user, token_generator):
+    token = token_generator.make_token(user)
+    uid = urlsafe_base64_encode(force_bytes(user.pk))
+    url = reverse('password_reset_confirm', args=[uid, token])
+    response = client.get(url)
+    assert response.status_code == 200
