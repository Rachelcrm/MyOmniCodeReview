{
  "instance_id": "django__django-15037",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_inspectdb.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.core.management import call_command\nfrom django.db import connections\nfrom django.test import TestCase\n\n@pytest.mark.django_db\ndef test_inspectdb_foreign_key_specific_field():\n    # Create a test database schema\n    with connections['default'].cursor() as cursor:\n        cursor.execute(\"\"\"\n            CREATE TABLE foo (\n                id SERIAL PRIMARY KEY,\n                other_id INT UNIQUE\n            );\n        \"\"\")\n        cursor.execute(\"\"\"\n            CREATE TABLE bar (\n                id SERIAL PRIMARY KEY,\n                other_id INT,\n                CONSTRAINT myconst\n                FOREIGN KEY(other_id) REFERENCES foo(other_id)\n            );\n        \"\"\")\n\n    # Run inspectdb to generate the models\n    output = call_command('inspectdb', database='default', stdout=None)\n\n    # Check if the generated model for bar has a ForeignKey to foo(other_id)\n    assert 'ForeignKey(\"foo\", to_field=\"other_id\"' in output\n\ndef test_inspectdb_foreign_key_primary_key():\n    # Create a test database schema\n    with connections['default'].cursor() as cursor:\n        cursor.execute(\"\"\"\n            CREATE TABLE foo (\n                id SERIAL PRIMARY KEY,\n                other_id INT UNIQUE\n            );\n        \"\"\")\n        cursor.execute(\"\"\"\n            CREATE TABLE bar (\n                id SERIAL PRIMARY KEY,\n                other_id INT,\n                CONSTRAINT myconst\n                FOREIGN KEY(other_id) REFERENCES foo(id)\n            );\n        \"\"\")\n\n    # Run inspectdb to generate the models\n    output = call_command('inspectdb', database='default', stdout=None)\n\n    # Check if the generated model for bar has a ForeignKey to foo\n    assert 'ForeignKey(\"foo\")' in output\n\nclass TestInspectDB(TestCase):\n    def test_handle_inspection(self):\n        # Test handle_inspection method\n        pass\n\n    def test_get_relations(self):\n        # Test get_relations method\n        pass\n</patched>\n```",
  "patch": "--- a/tests/test_inspectdb.py\n+++ b/tests/test_inspectdb.py\n-# Empty if creating new file\n+import pytest\n+from django.core.management import call_command\n+from django.db import connections\n+from django.test import TestCase\n+\n+@pytest.mark.django_db\n+def test_inspectdb_foreign_key_specific_field():\n+    # Create a test database schema\n+    with connections['default'].cursor() as cursor:\n+        cursor.execute(\"\"\"\n+            CREATE TABLE foo (\n+                id SERIAL PRIMARY KEY,\n+                other_id INT UNIQUE\n+            );\n+        \"\"\")\n+        cursor.execute(\"\"\"\n+            CREATE TABLE bar (\n+                id SERIAL PRIMARY KEY,\n+                other_id INT,\n+                CONSTRAINT myconst\n+                FOREIGN KEY(other_id) REFERENCES foo(other_id)\n+            );\n+        \"\"\")\n+\n+    # Run inspectdb to generate the models\n+    output = call_command('inspectdb', database='default', stdout=None)\n+\n+    # Check if the generated model for bar has a ForeignKey to foo(other_id)\n+    assert 'ForeignKey(\"foo\", to_field=\"other_id\"' in output\n+\n+def test_inspectdb_foreign_key_primary_key():\n+    # Create a test database schema\n+    with connections['default'].cursor() as cursor:\n+        cursor.execute(\"\"\"\n+            CREATE TABLE foo (\n+                id SERIAL PRIMARY KEY,\n+                other_id INT UNIQUE\n+            );\n+        \"\"\")\n+        cursor.execute(\"\"\"\n+            CREATE TABLE bar (\n+                id SERIAL PRIMARY KEY,\n+                other_id INT,\n+                CONSTRAINT myconst\n+                FOREIGN KEY(other_id) REFERENCES foo(id)\n+            );\n+        \"\"\")\n+\n+    # Run inspectdb to generate the models\n+    output = call_command('inspectdb', database='default', stdout=None)\n+\n+    # Check if the generated model for bar has a ForeignKey to foo\n+    assert 'ForeignKey(\"foo\")' in output\n+\n+class TestInspectDB(TestCase):\n+    def test_handle_inspection(self):\n+        # Test handle_inspection method\n+        pass\n+\n+    def test_get_relations(self):\n+        # Test get_relations method\n+        pass\n"
}