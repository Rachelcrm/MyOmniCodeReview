{
  "instance_id": "django__django-11163",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_forms_models.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.forms.models import model_to_dict\n\n@pytest.mark.parametrize(\"fields\", [None, []])\ndef test_model_to_dict_empty_fields(fields):\n    # Test that model_to_dict returns an empty dict when fields is empty\n    class TestModel:\n        def __init__(self):\n            self.field1 = \"value1\"\n            self.field2 = \"value2\"\n\n    instance = TestModel()\n    result = model_to_dict(instance, fields=fields)\n    assert result == {}\n\ndef test_model_to_dict_fields():\n    # Test that model_to_dict returns a dict with specified fields\n    class TestModel:\n        def __init__(self):\n            self.field1 = \"value1\"\n            self.field2 = \"value2\"\n\n    instance = TestModel()\n    result = model_to_dict(instance, fields=[\"field1\"])\n    assert result == {\"field1\": \"value1\"}\n\ndef test_model_to_dict_exclude():\n    # Test that model_to_dict excludes specified fields\n    class TestModel:\n        def __init__(self):\n            self.field1 = \"value1\"\n            self.field2 = \"value2\"\n\n    instance = TestModel()\n    result = model_to_dict(instance, exclude=[\"field1\"])\n    assert result == {\"field2\": \"value2\"}\n</patched>\n</file>",
  "patch": "--- a/tests/test_forms_models.py\n+++ b/tests/test_forms_models.py\n-# Empty if creating new file\n+import pytest\n+from django.forms.models import model_to_dict\n+\n+@pytest.mark.parametrize(\"fields\", [None, []])\n+def test_model_to_dict_empty_fields(fields):\n+    # Test that model_to_dict returns an empty dict when fields is empty\n+    class TestModel:\n+        def __init__(self):\n+            self.field1 = \"value1\"\n+            self.field2 = \"value2\"\n+\n+    instance = TestModel()\n+    result = model_to_dict(instance, fields=fields)\n+    assert result == {}\n+\n+def test_model_to_dict_fields():\n+    # Test that model_to_dict returns a dict with specified fields\n+    class TestModel:\n+        def __init__(self):\n+            self.field1 = \"value1\"\n+            self.field2 = \"value2\"\n+\n+    instance = TestModel()\n+    result = model_to_dict(instance, fields=[\"field1\"])\n+    assert result == {\"field1\": \"value1\"}\n+\n+def test_model_to_dict_exclude():\n+    # Test that model_to_dict excludes specified fields\n+    class TestModel:\n+        def __init__(self):\n+            self.field1 = \"value1\"\n+            self.field2 = \"value2\"\n+\n+    instance = TestModel()\n+    result = model_to_dict(instance, exclude=[\"field1\"])\n+    assert result == {\"field2\": \"value2\"}\n"
}