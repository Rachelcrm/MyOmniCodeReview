{
  "instance_id": "django__django-11276",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of replacing the custom `escape` function in `django.utils.html` with the Python stdlib `html.escape()` function, we need to write comprehensive tests to ensure the new implementation works as expected.\n\nFirst, let's consider the requirements:\n\n1. The tests should cover the functionality of the `escape` function.\n2. The tests should ensure that the `escape` function behaves the same as the original custom implementation.\n3. The tests should cover edge cases, such as escaping special characters, handling Unicode input, and ensuring the output is correctly marked as safe.\n\nHere's a proposed test suite:\n\n```\n<file>tests/test_utils_html.py</file>\n<original>\n# Original tests, if any\n</original>\n<patched>\nimport pytest\nfrom django.utils.html import escape\nimport html\n\n@pytest.mark.parametrize(\"input_string,expected_output\", [\n    (\"&\", \"&amp;\"),\n    (\"<\", \"&lt;\"),\n    (\">\", \"&gt;\"),\n    (\"\\\"\", \"&quot;\"),\n    (\"'\", \"&#x27;\"),\n    (\"Hello, World!\", \"Hello, World!\"),\n])\ndef test_escape_function(input_string, expected_output):\n    assert escape(input_string) == expected_output\n\ndef test_escape_unicode_input():\n    unicode_string = \"h\u00e4llo\"\n    assert escape(unicode_string) == html.escape(unicode_string)\n\ndef test_escape_safe_output():\n    escaped_string = escape(\"<script>alert('XSS')</script>\")\n    assert escaped_string == \"&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;\"\n\ndef test_escape_double_escaping():\n    already_escaped_string = \"&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;\"\n    assert escape(already_escaped_string) == \"&amp;lt;script&amp;gt;alert(&#x27;XSS&#x27;)&amp;lt;/script&amp;gt;\"\n\ndef test_escape_non_string_input():\n    assert escape(123) == \"123\"\n    assert escape(None) == \"None\"\n</patched>\n```\n\nThese tests cover various scenarios, including:\n\n*   Basic escaping of special characters\n*   Handling Unicode input\n*   Ensuring the output is correctly marked as safe\n*   Double-escaping already escaped strings\n*   Handling non-string input\n\nBy applying these tests, we can ensure that the new implementation of the `escape` function using the Python stdlib `html.escape()` function works correctly and behaves as expected.",
  "patch": "--- a/tests/test_utils_html.py\n+++ b/tests/test_utils_html.py\n-# Original tests, if any\n+import pytest\n+from django.utils.html import escape\n+import html\n+\n+@pytest.mark.parametrize(\"input_string,expected_output\", [\n+    (\"&\", \"&amp;\"),\n+    (\"<\", \"&lt;\"),\n+    (\">\", \"&gt;\"),\n+    (\"\\\"\", \"&quot;\"),\n+    (\"'\", \"&#x27;\"),\n+    (\"Hello, World!\", \"Hello, World!\"),\n+])\n+def test_escape_function(input_string, expected_output):\n+    assert escape(input_string) == expected_output\n+\n+def test_escape_unicode_input():\n+    unicode_string = \"h\u00e4llo\"\n+    assert escape(unicode_string) == html.escape(unicode_string)\n+\n+def test_escape_safe_output():\n+    escaped_string = escape(\"<script>alert('XSS')</script>\")\n+    assert escaped_string == \"&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;\"\n+\n+def test_escape_double_escaping():\n+    already_escaped_string = \"&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;\"\n+    assert escape(already_escaped_string) == \"&amp;lt;script&amp;gt;alert(&#x27;XSS&#x27;)&amp;lt;/script&amp;gt;\"\n+\n+def test_escape_non_string_input():\n+    assert escape(123) == \"123\"\n+    assert escape(None) == \"None\"\n"
}