{
  "instance_id": "astropy__astropy-8707",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_header.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom astropy.io.fits.header import Header\nfrom astropy.io.fits.card import Card\n\ndef test_fromstring_unicode():\n    # Test that fromstring works with Unicode strings\n    data = \"SIMPLE  =                    T\"\n    header = Header.fromstring(data)\n    assert header[\"SIMPLE\"].value == True\n\ndef test_fromstring_bytes():\n    # Test that fromstring works with byte strings\n    data = b\"SIMPLE  =                    T\"\n    header = Header.fromstring(data)\n    assert header[\"SIMPLE\"].value == True\n\ndef test_fromstring_invalid_bytes():\n    # Test that fromstring raises an error with invalid byte strings\n    data = b\"SIMPLE  =                    T\\x00\"\n    with pytest.raises(ValueError):\n        Header.fromstring(data)\n\ndef test_fromfile_text_mode():\n    # Test that fromfile works with text mode\n    data = \"SIMPLE  =                    T\"\n    with open(\"test_header.txt\", \"w\") as f:\n        f.write(data)\n    with open(\"test_header.txt\", \"r\") as f:\n        header = Header.fromfile(f)\n    assert header[\"SIMPLE\"].value == True\n\ndef test_fromfile_binary_mode():\n    # Test that fromfile works with binary mode\n    data = b\"SIMPLE  =                    T\"\n    with open(\"test_header.bin\", \"wb\") as f:\n        f.write(data)\n    with open(\"test_header.bin\", \"rb\") as f:\n        header = Header.fromfile(f)\n    assert header[\"SIMPLE\"].value == True\n\ndef test_card_fromstring_unicode():\n    # Test that Card.fromstring works with Unicode strings\n    image = \"SIMPLE  =                    T\"\n    card = Card.fromstring(image)\n    assert card.keyword == \"SIMPLE\"\n    assert card.value == True\n\ndef test_card_fromstring_bytes():\n    # Test that Card.fromstring works with byte strings\n    image = b\"SIMPLE  =                    T\"\n    card = Card.fromstring(image)\n    assert card.keyword == \"SIMPLE\"\n    assert card.value == True\n\ndef test_card_fromstring_invalid_bytes():\n    # Test that Card.fromstring raises an error with invalid byte strings\n    image = b\"SIMPLE  =                    T\\x00\"\n    with pytest.raises(ValueError):\n        Card.fromstring(image)\n</patched>\n```",
  "patch": "--- a/tests/test_header.py\n+++ b/tests/test_header.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from astropy.io.fits.header import Header\n+from astropy.io.fits.card import Card\n+\n+def test_fromstring_unicode():\n+    # Test that fromstring works with Unicode strings\n+    data = \"SIMPLE  =                    T\"\n+    header = Header.fromstring(data)\n+    assert header[\"SIMPLE\"].value == True\n+\n+def test_fromstring_bytes():\n+    # Test that fromstring works with byte strings\n+    data = b\"SIMPLE  =                    T\"\n+    header = Header.fromstring(data)\n+    assert header[\"SIMPLE\"].value == True\n+\n+def test_fromstring_invalid_bytes():\n+    # Test that fromstring raises an error with invalid byte strings\n+    data = b\"SIMPLE  =                    T\\x00\"\n+    with pytest.raises(ValueError):\n+        Header.fromstring(data)\n+\n+def test_fromfile_text_mode():\n+    # Test that fromfile works with text mode\n+    data = \"SIMPLE  =                    T\"\n+    with open(\"test_header.txt\", \"w\") as f:\n+        f.write(data)\n+    with open(\"test_header.txt\", \"r\") as f:\n+        header = Header.fromfile(f)\n+    assert header[\"SIMPLE\"].value == True\n+\n+def test_fromfile_binary_mode():\n+    # Test that fromfile works with binary mode\n+    data = b\"SIMPLE  =                    T\"\n+    with open(\"test_header.bin\", \"wb\") as f:\n+        f.write(data)\n+    with open(\"test_header.bin\", \"rb\") as f:\n+        header = Header.fromfile(f)\n+    assert header[\"SIMPLE\"].value == True\n+\n+def test_card_fromstring_unicode():\n+    # Test that Card.fromstring works with Unicode strings\n+    image = \"SIMPLE  =                    T\"\n+    card = Card.fromstring(image)\n+    assert card.keyword == \"SIMPLE\"\n+    assert card.value == True\n+\n+def test_card_fromstring_bytes():\n+    # Test that Card.fromstring works with byte strings\n+    image = b\"SIMPLE  =                    T\"\n+    card = Card.fromstring(image)\n+    assert card.keyword == \"SIMPLE\"\n+    assert card.value == True\n+\n+def test_card_fromstring_invalid_bytes():\n+    # Test that Card.fromstring raises an error with invalid byte strings\n+    image = b\"SIMPLE  =                    T\\x00\"\n+    with pytest.raises(ValueError):\n+        Card.fromstring(image)\n"
}