{
  "instance_id": "django__django-15695",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of `RenameIndex()` crashing when an unnamed index is moving backward and forward, we need to add comprehensive tests to ensure the correct behavior of the `RenameIndex` operation.\n\nThe tests should cover the following scenarios:\n\n1.  Renaming an unnamed index for `unique_together` and then moving backward.\n2.  Re-applying the `RenameIndex` operation after moving backward.\n3.  Verifying that the index name is correctly restored after moving backward.\n\nHere's an example of how the tests could be implemented:\n\n```\n<file>tests/migrations/test_operations.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom django.db import connections, models\nfrom django.db.migrations import RunPython\nfrom django.test import skipUnlessDBFeature\n\nclass OperationTests(OperationTestBase):\n    @skipUnlessDBFeature('supports_index_name_reset')\n    def test_rename_unnamed_index(self):\n        # Create a model with a unique constraint\n        class MyModel(models.Model):\n            field1 = models.IntegerField()\n            field2 = models.IntegerField()\n\n            class Meta:\n                unique_together = [(\"field1\", \"field2\")]\n\n        # Create a migration that renames the unnamed index\n        old_state = self.state\n        new_state = self.state\n\n        # Add a unique constraint and an unnamed index\n        old_state.models[\"app\", \"mymodel\"].options[\"unique_together\"] = [(\"field1\", \"field2\")]\n        index = models.Index(fields=[\"field1\", \"field2\"])\n        old_state.models[\"app\", \"mymodel\"].add_index(index)\n\n        # Create a RenameIndex operation\n        operation = RenameIndex(\n            model_name=\"mymodel\",\n            new_name=\"new_pony_test_idx\",\n        )\n\n        # Apply the migration\n        with connections[\"default\"].schema_editor() as editor:\n            operation.database_forwards(\"app\", editor, old_state, new_state)\n\n        # Verify that the index was renamed\n        self.assertIndexNameExists(\"mymodel\", \"new_pony_test_idx\")\n\n        # Move backward and forward again\n        with connections[\"default\"].schema_editor() as editor:\n            operation.database_backwards(\"app\", editor, new_state, old_state)\n\n        with connections[\"default\"].schema_editor() as editor:\n            operation.database_forwards(\"app\", editor, old_state, new_state)\n\n        # Verify that the index name was correctly restored\n        self.assertIndexNameExists(\"mymodel\", \"new_pony_test_idx\")\n</patched>\n```",
  "patch": "--- a/tests/migrations/test_operations.py\n+++ b/tests/migrations/test_operations.py\n+import pytest\n+from django.db import connections, models\n+from django.db.migrations import RunPython\n+from django.test import skipUnlessDBFeature\n+\n+class OperationTests(OperationTestBase):\n+    @skipUnlessDBFeature('supports_index_name_reset')\n+    def test_rename_unnamed_index(self):\n+        # Create a model with a unique constraint\n+        class MyModel(models.Model):\n+            field1 = models.IntegerField()\n+            field2 = models.IntegerField()\n+\n+            class Meta:\n+                unique_together = [(\"field1\", \"field2\")]\n+\n+        # Create a migration that renames the unnamed index\n+        old_state = self.state\n+        new_state = self.state\n+\n+        # Add a unique constraint and an unnamed index\n+        old_state.models[\"app\", \"mymodel\"].options[\"unique_together\"] = [(\"field1\", \"field2\")]\n+        index = models.Index(fields=[\"field1\", \"field2\"])\n+        old_state.models[\"app\", \"mymodel\"].add_index(index)\n+\n+        # Create a RenameIndex operation\n+        operation = RenameIndex(\n+            model_name=\"mymodel\",\n+            new_name=\"new_pony_test_idx\",\n+        )\n+\n+        # Apply the migration\n+        with connections[\"default\"].schema_editor() as editor:\n+            operation.database_forwards(\"app\", editor, old_state, new_state)\n+\n+        # Verify that the index was renamed\n+        self.assertIndexNameExists(\"mymodel\", \"new_pony_test_idx\")\n+\n+        # Move backward and forward again\n+        with connections[\"default\"].schema_editor() as editor:\n+            operation.database_backwards(\"app\", editor, new_state, old_state)\n+\n+        with connections[\"default\"].schema_editor() as editor:\n+            operation.database_forwards(\"app\", editor, old_state, new_state)\n+\n+        # Verify that the index name was correctly restored\n+        self.assertIndexNameExists(\"mymodel\", \"new_pony_test_idx\")\n"
}