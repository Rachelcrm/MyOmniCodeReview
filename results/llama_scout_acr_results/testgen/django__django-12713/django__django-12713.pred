{
  "instance_id": "django__django-12713",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of allowing overriding the widget in `formfield_for_manytomany()`, we need to create comprehensive tests that cover the described functionality. The tests should ensure that custom widgets can be applied correctly for ManyToMany fields in the Django admin interface.\n\n```python\n<file>tests/test_admin.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom django.contrib.admin import AdminSite\nfrom django.contrib.admin.views import main\nfrom django.forms import ModelForm\nfrom django.test import RequestFactory\n\npytestmark = pytest.mark.django_db\n\nclass TestCustomWidgetInFormfieldForManyToMany:\n    @pytest.fixture\n    def request(self):\n        return RequestFactory().get('/')\n\n    @pytest.fixture\n    def admin_site(self):\n        return AdminSite()\n\n    def test_default_widget(self, request, admin_site):\n        # Arrange\n        class MyModelAdmin(admin_site._registry[MyModel]):\n            pass\n\n        # Act\n        form_field = MyModelAdmin().formfield_for_manytomany(MyModel.manytomany_field, request)\n\n        # Assert\n        assert isinstance(form_field.widget, SelectMultiple)\n\n    def test_custom_widget(self, request, admin_site):\n        # Arrange\n        class CustomWidget(forms.SelectMultiple):\n            pass\n\n        class MyModelAdmin(admin_site._registry[MyModel]):\n            def formfield_for_manytomany(self, db_field, request, **kwargs):\n                if db_field.name == 'manytomany_field':\n                    kwargs['widget'] = CustomWidget()\n                return super().formfield_for_manytomany(db_field, request, **kwargs)\n\n        # Act\n        form_field = MyModelAdmin().formfield_for_manytomany(MyModel.manytomany_field, request)\n\n        # Assert\n        assert isinstance(form_field.widget, CustomWidget)\n\n    def test_widget_override(self, request, admin_site):\n        # Arrange\n        class CustomWidget(forms.SelectMultiple):\n            pass\n\n        # Act\n        form_field = admin_site._registry[MyModel]().formfield_for_manytomany(\n            MyModel.manytomany_field, request, widget=CustomWidget()\n        )\n\n        # Assert\n        assert isinstance(form_field.widget, CustomWidget)\n</patched>\n```\n\n```python\n<file>tests/models.py</file>\n<original>\n</original>\n<patched>\nfrom django.db import models\n\nclass MyModel(models.Model):\n    manytomany_field = models.ManyToManyField('self')\n</patched>\n```\n\nThese tests cover the following scenarios:\n1. The default widget for a ManyToMany field is `SelectMultiple`.\n2. A custom widget can be applied using `formfield_for_manytomany`.\n3. A widget override works when directly passing a widget to `formfield_for_manytomany`.",
  "patch": "--- a/tests/test_admin.py\n+++ b/tests/test_admin.py\n+import pytest\n+from django.contrib.admin import AdminSite\n+from django.contrib.admin.views import main\n+from django.forms import ModelForm\n+from django.test import RequestFactory\n+\n+pytestmark = pytest.mark.django_db\n+\n+class TestCustomWidgetInFormfieldForManyToMany:\n+    @pytest.fixture\n+    def request(self):\n+        return RequestFactory().get('/')\n+\n+    @pytest.fixture\n+    def admin_site(self):\n+        return AdminSite()\n+\n+    def test_default_widget(self, request, admin_site):\n+        # Arrange\n+        class MyModelAdmin(admin_site._registry[MyModel]):\n+            pass\n+\n+        # Act\n+        form_field = MyModelAdmin().formfield_for_manytomany(MyModel.manytomany_field, request)\n+\n+        # Assert\n+        assert isinstance(form_field.widget, SelectMultiple)\n+\n+    def test_custom_widget(self, request, admin_site):\n+        # Arrange\n+        class CustomWidget(forms.SelectMultiple):\n+            pass\n+\n+        class MyModelAdmin(admin_site._registry[MyModel]):\n+            def formfield_for_manytomany(self, db_field, request, **kwargs):\n+                if db_field.name == 'manytomany_field':\n+                    kwargs['widget'] = CustomWidget()\n+                return super().formfield_for_manytomany(db_field, request, **kwargs)\n+\n+        # Act\n+        form_field = MyModelAdmin().formfield_for_manytomany(MyModel.manytomany_field, request)\n+\n+        # Assert\n+        assert isinstance(form_field.widget, CustomWidget)\n+\n+    def test_widget_override(self, request, admin_site):\n+        # Arrange\n+        class CustomWidget(forms.SelectMultiple):\n+            pass\n+\n+        # Act\n+        form_field = admin_site._registry[MyModel]().formfield_for_manytomany(\n+            MyModel.manytomany_field, request, widget=CustomWidget()\n+        )\n+\n+        # Assert\n+        assert isinstance(form_field.widget, CustomWidget)\n\n--- a/tests/models.py\n+++ b/tests/models.py\n+from django.db import models\n+\n+class MyModel(models.Model):\n+    manytomany_field = models.ManyToManyField('self')\n"
}