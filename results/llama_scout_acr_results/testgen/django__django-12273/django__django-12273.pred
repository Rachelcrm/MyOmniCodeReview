{
  "instance_id": "django__django-12273",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_models.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom django.test import TestCase\nfrom .models import Item, Derived\n\nclass TestItemModel(TestCase):\n\n    def setUp(self):\n        self.item = Item.objects.create(f=True)\n\n    def test_reset_and_save(self):\n        self.item.reset()\n        self.item.save()\n        assert Item.objects.count() == 1\n\n    def test_derived_item_reset_and_save(self):\n        derived_item = Derived.objects.create(f=True)\n        derived_item.reset()\n        derived_item.save()\n        assert Derived.objects.count() == 1\n\n    def test_item_save_without_reset(self):\n        item = Item.objects.get(pk=self.item.pk)\n        assert item.f == True\n\n    def test_derived_item_save_without_reset(self):\n        derived_item = Derived.objects.get(pk=self.item.pk)\n        assert derived_item.f == True\n\nclass TestItemModelFixtures:\n\n    @pytest.fixture\n    def item(self):\n        return Item.objects.create(f=True)\n\n    def test_reset_and_save(self, item):\n        item.reset()\n        item.save()\n        assert Item.objects.count() == 1\n\n    def test_derived_item_reset_and_save(self, item):\n        derived_item = Derived.objects.create(f=True)\n        derived_item.reset()\n        derived_item.save()\n        assert Derived.objects.count() == 1\n\n    def test_item_save_without_reset(self, item):\n        assert item.f == True\n\n    def test_derived_item_save_without_reset(self, item):\n        derived_item = Derived.objects.get(pk=item.pk)\n        assert derived_item.f == True\n</patched>\n```",
  "patch": "--- a/tests/test_models.py\n+++ b/tests/test_models.py\n+import pytest\n+from django.test import TestCase\n+from .models import Item, Derived\n+\n+class TestItemModel(TestCase):\n+\n+    def setUp(self):\n+        self.item = Item.objects.create(f=True)\n+\n+    def test_reset_and_save(self):\n+        self.item.reset()\n+        self.item.save()\n+        assert Item.objects.count() == 1\n+\n+    def test_derived_item_reset_and_save(self):\n+        derived_item = Derived.objects.create(f=True)\n+        derived_item.reset()\n+        derived_item.save()\n+        assert Derived.objects.count() == 1\n+\n+    def test_item_save_without_reset(self):\n+        item = Item.objects.get(pk=self.item.pk)\n+        assert item.f == True\n+\n+    def test_derived_item_save_without_reset(self):\n+        derived_item = Derived.objects.get(pk=self.item.pk)\n+        assert derived_item.f == True\n+\n+class TestItemModelFixtures:\n+\n+    @pytest.fixture\n+    def item(self):\n+        return Item.objects.create(f=True)\n+\n+    def test_reset_and_save(self, item):\n+        item.reset()\n+        item.save()\n+        assert Item.objects.count() == 1\n+\n+    def test_derived_item_reset_and_save(self, item):\n+        derived_item = Derived.objects.create(f=True)\n+        derived_item.reset()\n+        derived_item.save()\n+        assert Derived.objects.count() == 1\n+\n+    def test_item_save_without_reset(self, item):\n+        assert item.f == True\n+\n+    def test_derived_item_save_without_reset(self, item):\n+        derived_item = Derived.objects.get(pk=item.pk)\n+        assert derived_item.f == True\n"
}