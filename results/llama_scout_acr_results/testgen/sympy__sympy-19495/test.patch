--- a/tests/test_sets.py
+++ b/tests/test_sets.py
+import pytest
+from sympy import Symbol, Interval, FiniteSet, ImageSet, ConditionSet, contains, sin, pi
+from sympy.abc import x, y
+
+def test_conditionset_subs_ImageSet():
+    # Test substitution in ConditionSet with ImageSet
+    f = ImageSet(Lambda(x, 2*x*pi + sin(y)), Interval(0, 1))
+    c = ConditionSet(x, contains(y, Interval(-1, 1)), f)
+    result = c.subs(y, 1/3)
+    expected = ConditionSet(x, contains(1/3, Interval(-1, 1)), 
+                            ImageSet(Lambda(x, 2*x*pi + sin(1/3)), Interval(0, 1)))
+    assert result == expected
+
+def test_imageset_subs():
+    # Test substitution in ImageSet
+    f = ImageSet(Lambda(x, 2*x*pi + sin(y)), Interval(0, 1))
+    result = f.subs(y, 1/3)
+    expected = ImageSet(Lambda(x, 2*x*pi + sin(1/3)), Interval(0, 1))
+    assert result == expected
+
+def test_conditionset_subs_simultaneous():
+    # Test substitution in ConditionSet with simultaneous=True
+    f = ImageSet(Lambda(x, 2*x*pi + sin(y)), Interval(0, 1))
+    c = ConditionSet(x, contains(y, Interval(-1, 1)), f)
+    result = c.subs({y: 1/3}, simultaneous=True)
+    expected = ConditionSet(x, contains(1/3, Interval(-1, 1)), 
+                            ImageSet(Lambda(x, 2*x*pi + sin(1/3)), Interval(0, 1)))
+    assert result == expected
+
+def test_imageset_doit():
+    # Test doit method in ImageSet
+    f = ImageSet(Lambda(x, 2*x*pi + sin(y)), Interval(0, 1))
+    result = f.doit()
+    # The doit method should return the evaluated ImageSet or a converted set
+    assert isinstance(result, ImageSet) or isinstance(result, FiniteSet)
