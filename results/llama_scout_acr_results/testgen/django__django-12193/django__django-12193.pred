{
  "instance_id": "django__django-12193",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_widgets.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.forms import BooleanField, CheckboxInput, SplitArrayField\nfrom django.forms.models import ModelForm\nfrom .test_widgets import WidgetTest\n\nclass TestCustomCheckboxInput(WidgetTest):\n    def test_get_context(self):\n        widget = CheckboxInput()\n        name = 'test'\n        value = True\n        attrs = {}\n        context = widget.get_context(name, value, attrs)\n        assert context['attrs']['checked'] == True\n\n    def test_get_context_copy(self):\n        widget = CheckboxInput()\n        name = 'test'\n        value = True\n        attrs = {'id': 'test_id'}\n        context = widget.get_context(name, value, attrs)\n        assert context['attrs']['id'] == 'test_id'\n\nclass TestBooleanField:\n    def test_to_python(self):\n        field = BooleanField()\n        assert field.to_python('True') == True\n        assert field.to_python('False') == False\n\nclass TestSplitArrayField:\n    def test_clean(self):\n        class TestForm(ModelForm):\n            test_field = SplitArrayField(BooleanField, size=3)\n\n        form = TestForm({'test_field': [True, False, True]})\n        assert form.is_valid()\n        assert form.cleaned_data['test_field'] == [True, False, True]\n</patched>\n```\n\n```\n<file>tests/test_fields.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.forms import BooleanField, SplitArrayField\n\nclass TestBooleanField:\n    def test_has_changed(self):\n        field = BooleanField()\n        assert field.has_changed(True, 'False') == True\n        assert field.has_changed(False, 'True') == True\n\nclass TestSplitArrayField:\n    def test_has_changed(self):\n        field = SplitArrayField(BooleanField, size=3)\n        assert field.has_changed([True, False, True], [False, True, False]) == True\n</patched>\n```",
  "patch": "--- a/tests/test_widgets.py\n+++ b/tests/test_widgets.py\n-# Empty if creating new file\n+import pytest\n+from django.forms import BooleanField, CheckboxInput, SplitArrayField\n+from django.forms.models import ModelForm\n+from .test_widgets import WidgetTest\n+\n+class TestCustomCheckboxInput(WidgetTest):\n+    def test_get_context(self):\n+        widget = CheckboxInput()\n+        name = 'test'\n+        value = True\n+        attrs = {}\n+        context = widget.get_context(name, value, attrs)\n+        assert context['attrs']['checked'] == True\n+\n+    def test_get_context_copy(self):\n+        widget = CheckboxInput()\n+        name = 'test'\n+        value = True\n+        attrs = {'id': 'test_id'}\n+        context = widget.get_context(name, value, attrs)\n+        assert context['attrs']['id'] == 'test_id'\n+\n+class TestBooleanField:\n+    def test_to_python(self):\n+        field = BooleanField()\n+        assert field.to_python('True') == True\n+        assert field.to_python('False') == False\n+\n+class TestSplitArrayField:\n+    def test_clean(self):\n+        class TestForm(ModelForm):\n+            test_field = SplitArrayField(BooleanField, size=3)\n+\n+        form = TestForm({'test_field': [True, False, True]})\n+        assert form.is_valid()\n+        assert form.cleaned_data['test_field'] == [True, False, True]\n\n--- a/tests/test_fields.py\n+++ b/tests/test_fields.py\n-# Empty if creating new file\n+import pytest\n+from django.forms import BooleanField, SplitArrayField\n+\n+class TestBooleanField:\n+    def test_has_changed(self):\n+        field = BooleanField()\n+        assert field.has_changed(True, 'False') == True\n+        assert field.has_changed(False, 'True') == True\n+\n+class TestSplitArrayField:\n+    def test_has_changed(self):\n+        field = SplitArrayField(BooleanField, size=3)\n+        assert field.has_changed([True, False, True], [False, True, False]) == True\n"
}