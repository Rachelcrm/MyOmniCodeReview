{
  "instance_id": "django__django-11141",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of allowing migrations directories without `__init__.py` files, we need to modify the `load_disk` method in `django/db/migrations/loader.py`. \n\nHere's how we can write tests for this issue:\n\n```\n<file>tests/test_migrations.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport os\nimport tempfile\nimport pytest\nfrom django.db import migrations\nfrom django.db.migrations.loader import MigrationLoader\n\n@pytest.fixture\ndef temporary_directory():\n    with tempfile.TemporaryDirectory() as temp_dir:\n        yield temp_dir\n\ndef test_load_disk_with_namespace_package(temporary_directory):\n    # Create a namespace package\n    package_dir = os.path.join(temporary_directory, 'migrations')\n    os.makedirs(package_dir)\n    # Don't create __init__.py file\n\n    # Create a migration file\n    migration_file = os.path.join(package_dir, '0001_initial.py')\n    with open(migration_file, 'w') as f:\n        f.write('from django.db import migrations\\n')\n\n    # Load the migrations\n    loader = MigrationLoader()\n    loader.load_disk()\n\n    # Check if the migration is loaded\n    assert 'migrations' in loader.migrated_apps\n\ndef test_load_disk_with_regular_package(temporary_directory):\n    # Create a regular package\n    package_dir = os.path.join(temporary_directory, 'migrations')\n    os.makedirs(package_dir)\n    init_file = os.path.join(package_dir, '__init__.py')\n    open(init_file, 'w').close()\n\n    # Create a migration file\n    migration_file = os.path.join(package_dir, '0001_initial.py')\n    with open(migration_file, 'w') as f:\n        f.write('from django.db import migrations\\n')\n\n    # Load the migrations\n    loader = MigrationLoader()\n    loader.load_disk()\n\n    # Check if the migration is loaded\n    assert 'migrations' in loader.migrated_apps\n\ndef test_load_disk_without_init_file(temporary_directory):\n    # Create a directory without __init__.py\n    package_dir = os.path.join(temporary_directory, 'migrations')\n    os.makedirs(package_dir)\n\n    # Create a migration file\n    migration_file = os.path.join(package_dir, '0001_initial.py')\n    with open(migration_file, 'w') as f:\n        f.write('from django.db import migrations\\n')\n\n    # Load the migrations\n    loader = MigrationLoader()\n    loader.load_disk()\n\n    # Check if the migration is loaded\n    assert 'migrations' in loader.migrated_apps\n</patched>\n```",
  "patch": "--- a/tests/test_migrations.py\n+++ b/tests/test_migrations.py\n-# Empty if creating new file\n+import os\n+import tempfile\n+import pytest\n+from django.db import migrations\n+from django.db.migrations.loader import MigrationLoader\n+\n+@pytest.fixture\n+def temporary_directory():\n+    with tempfile.TemporaryDirectory() as temp_dir:\n+        yield temp_dir\n+\n+def test_load_disk_with_namespace_package(temporary_directory):\n+    # Create a namespace package\n+    package_dir = os.path.join(temporary_directory, 'migrations')\n+    os.makedirs(package_dir)\n+    # Don't create __init__.py file\n+\n+    # Create a migration file\n+    migration_file = os.path.join(package_dir, '0001_initial.py')\n+    with open(migration_file, 'w') as f:\n+        f.write('from django.db import migrations\\n')\n+\n+    # Load the migrations\n+    loader = MigrationLoader()\n+    loader.load_disk()\n+\n+    # Check if the migration is loaded\n+    assert 'migrations' in loader.migrated_apps\n+\n+def test_load_disk_with_regular_package(temporary_directory):\n+    # Create a regular package\n+    package_dir = os.path.join(temporary_directory, 'migrations')\n+    os.makedirs(package_dir)\n+    init_file = os.path.join(package_dir, '__init__.py')\n+    open(init_file, 'w').close()\n+\n+    # Create a migration file\n+    migration_file = os.path.join(package_dir, '0001_initial.py')\n+    with open(migration_file, 'w') as f:\n+        f.write('from django.db import migrations\\n')\n+\n+    # Load the migrations\n+    loader = MigrationLoader()\n+    loader.load_disk()\n+\n+    # Check if the migration is loaded\n+    assert 'migrations' in loader.migrated_apps\n+\n+def test_load_disk_without_init_file(temporary_directory):\n+    # Create a directory without __init__.py\n+    package_dir = os.path.join(temporary_directory, 'migrations')\n+    os.makedirs(package_dir)\n+\n+    # Create a migration file\n+    migration_file = os.path.join(package_dir, '0001_initial.py')\n+    with open(migration_file, 'w') as f:\n+        f.write('from django.db import migrations\\n')\n+\n+    # Load the migrations\n+    loader = MigrationLoader()\n+    loader.load_disk()\n+\n+    # Check if the migration is loaded\n+    assert 'migrations' in loader.migrated_apps\n"
}