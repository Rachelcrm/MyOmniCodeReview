--- a/tests/test_reshaping.py
+++ b/tests/test_reshaping.py
-# Empty if creating new file
+import pytest
+import numpy as np
+from tensorflow import keras
+from tensorflow.keras import layers
+
+def test_rearrange():
+    # Test case 1: Rearrange a tensor
+    inputs = np.arange(24).reshape((1, 2, 3, 4))
+    expected_output = np.reshape(inputs, (1, 4, 3, 2))
+    layer = layers.Reshape((4, 3, 2))
+    output = layer(inputs)
+    assert np.array_equal(output, expected_output)
+
+    # Test case 2: Rearrange with batch size
+    inputs = np.arange(24).reshape((2, 2, 3, 2))
+    expected_output = np.reshape(inputs, (2, 4, 3, 1))
+    layer = layers.Reshape((4, 3, 1))
+    output = layer(inputs)
+    assert np.array_equal(output, expected_output)
+
+def test_rearrange_equivalent_to_einops():
+    # Test case: Compare with einops.rearrange
+    import einops
+    inputs = np.arange(24).reshape((1, 2, 3, 4))
+    pattern = "b c d e -> b e d c"
+    expected_output_einops = einops.rearrange(inputs, pattern)
+    layer = layers.Reshape((4, 3, 2))
+    layer.pattern = pattern
+    output_keras = layer(inputs)
+    assert np.array_equal(output_keras, expected_output_einops)
+
+class TestRearrangeLayer:
+    def test_rearrange_layer(self):
+        # Test case: Use Reshape layer for rearrangement
+        inputs = np.arange(24).reshape((1, 2, 3, 4))
+        layer = layers.Reshape((4, 3, 2))
+        output = layer(inputs)
+        assert output.shape == (1, 4, 3, 2)
+
+    def test_rearrange_with_target_shape(self):
+        # Test case: Use Reshape layer with target shape
+        inputs = np.arange(24).reshape((1, 2, 3, 4))
+        layer = layers.Reshape(target_shape=(4, 3, 2))
+        output = layer(inputs)
+        assert output.shape == (1, 4, 3, 2)
+
+def test_invalid_input_shape():
+    # Test case: Invalid input shape
+    inputs = np.arange(20).reshape((1, 2, 3, 3))  # Not divisible into target shape
+    layer = layers.Reshape((4, 3, 2))
+    with pytest.raises(ValueError):
+        layer(inputs)
+
+def test_invalid_target_shape():
+    # Test case: Invalid target shape
+    inputs = np.arange(24).reshape((1, 2, 3, 4))
+    layer = layers.Reshape(target_shape=(5, 3, 2))  # Not compatible with input shape
+    with pytest.raises(ValueError):
+        layer(inputs)
