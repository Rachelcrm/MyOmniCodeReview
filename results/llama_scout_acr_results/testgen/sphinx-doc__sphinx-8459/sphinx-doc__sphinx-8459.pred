{
  "instance_id": "sphinx-doc__sphinx-8459",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_autodoc_type_aliases.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom sphinx import __version__ as sphinx_version\nfrom sphinx.ext.autodoc import AutodocReporter\nfrom sphinx.testing import SphinxTestApp\nfrom sphinx.testing.util import etree\n\n@pytest.fixture\ndef app():\n    return SphinxTestApp()\n\ndef test_autodoc_type_aliases_description(app):\n    # Test that autodoc_type_aliases works when autodoc_typehints is set to \"description\"\n    app.config.autodoc_typehints = 'description'\n    app.config.autodoc_type_aliases = {\n        'JSONObject': 'types.JSONObject',\n    }\n\n    # Create a test file\n    test_file = '''\nfrom __future__ import annotations\n\nfrom typing import Any, Dict\n\nJSONObject = Dict[str, Any]\n\n\ndef sphinx_doc(data: JSONObject) -> JSONObject:\n    \"\"\"Does it work.\n\n    Args:\n        data: Does it args.\n\n    Returns:\n        Does it work in return.\n    \"\"\"\n    return {}\n'''\n\n    # Build the documentation\n    app.add_source_file('types.py', test_file)\n    app.build()\n\n    # Check that the type alias is used in the documentation\n    with open(app.outdir / 'html' / 'types.html', 'r') as f:\n        html = f.read()\n        assert 'data (Dict[str, Any])' not in html\n        assert 'data (types.JSONObject)' in html\n\ndef test_autodoc_type_aliases_signature(app):\n    # Test that autodoc_type_aliases works when autodoc_typehints is set to \"description\"\n    app.config.autodoc_typehints = 'description'\n    app.config.autodoc_type_aliases = {\n        'JSONObject': 'types.JSONObject',\n    }\n\n    # Create a test file\n    test_file = '''\nfrom __future__ import annotations\n\nfrom typing import Any, Dict\n\nJSONObject = Dict[str, Any]\n\n\ndef sphinx_doc(data: JSONObject) -> JSONObject:\n    \"\"\"Does it work.\n\n    Args:\n        data: Does it args.\n\n    Returns:\n        Does it work in return.\n    \"\"\"\n    return {}\n'''\n\n    # Build the documentation\n    app.add_source_file('types.py', test_file)\n    app.build()\n\n    # Check that the type alias is used in the documentation\n    with open(app.outdir / 'html' / 'types.html', 'r') as f:\n        html = f.read()\n        assert '\u2192 types.JSONObject' in html\n\ndef test_autodoc_type_aliases_not_set(app):\n    # Test that autodoc_type_aliases does not work when autodoc_typehints is not set to \"description\"\n    app.config.autodoc_typehints = 'signature'\n    app.config.autodoc_type_aliases = {\n        'JSONObject': 'types.JSONObject',\n    }\n\n    # Create a test file\n    test_file = '''\nfrom __future__ import annotations\n\nfrom typing import Any, Dict\n\nJSONObject = Dict[str, Any]\n\n\ndef sphinx_doc(data: JSONObject) -> JSONObject:\n    \"\"\"Does it work.\n\n    Args:\n        data: Does it args.\n\n    Returns:\n        Does it work in return.\n    \"\"\"\n    return {}\n'''\n\n    # Build the documentation\n    app.add_source_file('types.py', test_file)\n    app.build()\n\n    # Check that the type alias is not used in the documentation\n    with open(app.outdir / 'html' / 'types.html', 'r') as f:\n        html = f.read()\n        assert 'data (Dict[str, Any])' in html\n        assert 'data (types.JSONObject)' not in html\n</patched>\n```",
  "patch": "--- a/tests/test_autodoc_type_aliases.py\n+++ b/tests/test_autodoc_type_aliases.py\n-# Empty if creating new file\n+import pytest\n+from sphinx import __version__ as sphinx_version\n+from sphinx.ext.autodoc import AutodocReporter\n+from sphinx.testing import SphinxTestApp\n+from sphinx.testing.util import etree\n+\n+@pytest.fixture\n+def app():\n+    return SphinxTestApp()\n+\n+def test_autodoc_type_aliases_description(app):\n+    # Test that autodoc_type_aliases works when autodoc_typehints is set to \"description\"\n+    app.config.autodoc_typehints = 'description'\n+    app.config.autodoc_type_aliases = {\n+        'JSONObject': 'types.JSONObject',\n+    }\n+\n+    # Create a test file\n+    test_file = '''\n+from __future__ import annotations\n+\n+from typing import Any, Dict\n+\n+JSONObject = Dict[str, Any]\n+\n+\n+def sphinx_doc(data: JSONObject) -> JSONObject:\n+    \"\"\"Does it work.\n+\n+    Args:\n+        data: Does it args.\n+\n+    Returns:\n+        Does it work in return.\n+    \"\"\"\n+    return {}\n+'''\n+\n+    # Build the documentation\n+    app.add_source_file('types.py', test_file)\n+    app.build()\n+\n+    # Check that the type alias is used in the documentation\n+    with open(app.outdir / 'html' / 'types.html', 'r') as f:\n+        html = f.read()\n+        assert 'data (Dict[str, Any])' not in html\n+        assert 'data (types.JSONObject)' in html\n+\n+def test_autodoc_type_aliases_signature(app):\n+    # Test that autodoc_type_aliases works when autodoc_typehints is set to \"description\"\n+    app.config.autodoc_typehints = 'description'\n+    app.config.autodoc_type_aliases = {\n+        'JSONObject': 'types.JSONObject',\n+    }\n+\n+    # Create a test file\n+    test_file = '''\n+from __future__ import annotations\n+\n+from typing import Any, Dict\n+\n+JSONObject = Dict[str, Any]\n+\n+\n+def sphinx_doc(data: JSONObject) -> JSONObject:\n+    \"\"\"Does it work.\n+\n+    Args:\n+        data: Does it args.\n+\n+    Returns:\n+        Does it work in return.\n+    \"\"\"\n+    return {}\n+'''\n+\n+    # Build the documentation\n+    app.add_source_file('types.py', test_file)\n+    app.build()\n+\n+    # Check that the type alias is used in the documentation\n+    with open(app.outdir / 'html' / 'types.html', 'r') as f:\n+        html = f.read()\n+        assert '\u2192 types.JSONObject' in html\n+\n+def test_autodoc_type_aliases_not_set(app):\n+    # Test that autodoc_type_aliases does not work when autodoc_typehints is not set to \"description\"\n+    app.config.autodoc_typehints = 'signature'\n+    app.config.autodoc_type_aliases = {\n+        'JSONObject': 'types.JSONObject',\n+    }\n+\n+    # Create a test file\n+    test_file = '''\n+from __future__ import annotations\n+\n+from typing import Any, Dict\n+\n+JSONObject = Dict[str, Any]\n+\n+\n+def sphinx_doc(data: JSONObject) -> JSONObject:\n+    \"\"\"Does it work.\n+\n+    Args:\n+        data: Does it args.\n+\n+    Returns:\n+        Does it work in return.\n+    \"\"\"\n+    return {}\n+'''\n+\n+    # Build the documentation\n+    app.add_source_file('types.py', test_file)\n+    app.build()\n+\n+    # Check that the type alias is not used in the documentation\n+    with open(app.outdir / 'html' / 'types.html', 'r') as f:\n+        html = f.read()\n+        assert 'data (Dict[str, Any])' in html\n+        assert 'data (types.JSONObject)' not in html\n"
}