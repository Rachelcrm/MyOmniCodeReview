{
  "instance_id": "fastapi__fastapi-1524",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_responses.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom fastapi import FastAPI\nfrom fastapi.responses import ORJSONResponse\nfrom fastapi.encoders import jsonable_encoder\nfrom pydantic import BaseModel\nfrom typing import List\n\napp = FastAPI()\n\nclass RootTestClass(BaseModel):\n    __root__: List[str]\n\n@app.get(\"/\", response_class=ORJSONResponse)\nasync def root():\n    response = RootTestClass(__root__=['a', 'b', 'c'])\n    return response\n\ndef test_root_response():\n    # Test that the response is correctly encoded as a JSON array\n    response = root()\n    assert response == b'[\"a\", \"b\", \"c\"]'\n\ndef test_custom_root_type_response():\n    # Test that Pydantic models with __root__ are correctly handled\n    class CustomRoot(BaseModel):\n        __root__: str\n\n    @app.get(\"/custom_root\", response_class=ORJSONResponse)\n    async def custom_root():\n        return CustomRoot(__root__=\"test\")\n\n    response = custom_root()\n    assert response == b'\"test\"'\n\ndef test_nested_model_response():\n    # Test that nested Pydantic models are correctly handled\n    class NestedModel(BaseModel):\n        value: str\n\n    class Wrapper(BaseModel):\n        __root__: NestedModel\n\n    @app.get(\"/nested\", response_class=ORJSONResponse)\n    async def nested():\n        return Wrapper(__root__=NestedModel(value=\"nested\"))\n\n    response = nested()\n    assert response == b'{\"value\": \"nested\"}'\n\ndef test_list_of_models_response():\n    # Test that a list of Pydantic models is correctly handled\n    class Item(BaseModel):\n        name: str\n\n    @app.get(\"/items\", response_class=ORJSONResponse)\n    async def items():\n        return [Item(name=\"Item1\"), Item(name=\"Item2\")]\n\n    response = items()\n    assert response == b'[{\"name\": \"Item1\"}, {\"name\": \"Item2\"}]'\n\n</patched>\n```",
  "patch": "--- a/tests/test_responses.py\n+++ b/tests/test_responses.py\n-# Empty if creating new file\n+import pytest\n+from fastapi import FastAPI\n+from fastapi.responses import ORJSONResponse\n+from fastapi.encoders import jsonable_encoder\n+from pydantic import BaseModel\n+from typing import List\n+\n+app = FastAPI()\n+\n+class RootTestClass(BaseModel):\n+    __root__: List[str]\n+\n+@app.get(\"/\", response_class=ORJSONResponse)\n+async def root():\n+    response = RootTestClass(__root__=['a', 'b', 'c'])\n+    return response\n+\n+def test_root_response():\n+    # Test that the response is correctly encoded as a JSON array\n+    response = root()\n+    assert response == b'[\"a\", \"b\", \"c\"]'\n+\n+def test_custom_root_type_response():\n+    # Test that Pydantic models with __root__ are correctly handled\n+    class CustomRoot(BaseModel):\n+        __root__: str\n+\n+    @app.get(\"/custom_root\", response_class=ORJSONResponse)\n+    async def custom_root():\n+        return CustomRoot(__root__=\"test\")\n+\n+    response = custom_root()\n+    assert response == b'\"test\"'\n+\n+def test_nested_model_response():\n+    # Test that nested Pydantic models are correctly handled\n+    class NestedModel(BaseModel):\n+        value: str\n+\n+    class Wrapper(BaseModel):\n+        __root__: NestedModel\n+\n+    @app.get(\"/nested\", response_class=ORJSONResponse)\n+    async def nested():\n+        return Wrapper(__root__=NestedModel(value=\"nested\"))\n+\n+    response = nested()\n+    assert response == b'{\"value\": \"nested\"}'\n+\n+def test_list_of_models_response():\n+    # Test that a list of Pydantic models is correctly handled\n+    class Item(BaseModel):\n+        name: str\n+\n+    @app.get(\"/items\", response_class=ORJSONResponse)\n+    async def items():\n+        return [Item(name=\"Item1\"), Item(name=\"Item2\")]\n+\n+    response = items()\n+    assert response == b'[{\"name\": \"Item1\"}, {\"name\": \"Item2\"}]'\n"
}