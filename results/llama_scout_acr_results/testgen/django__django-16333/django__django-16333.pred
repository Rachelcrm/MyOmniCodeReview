{
  "instance_id": "django__django-16333",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of `UserCreationForm` not saving data from ManyToMany form fields, we need to modify the `save` method of `UserCreationForm` to call `self.save_m2m()` when `commit=True`. \n\nHere's how we can write comprehensive pytest unit tests for this issue:\n\n```python\n<file>tests/test_forms.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\nfrom django.forms import ModelForm\nfrom django.db import models\n\n# Define a custom User model with a ManyToManyField\nclass CustomUser(models.Model):\n    groups = models.ManyToManyField('auth.Group')\n\nclass CustomUserCreationForm(UserCreationForm):\n    class Meta:\n        model = CustomUser\n        fields = ('username',)\n\ndef test_user_creation_form_save_m2m():\n    # Test that UserCreationForm saves ManyToMany fields\n    user = CustomUser.objects.create_user('testuser', email='test@example.com')\n    group = models.Group.objects.create(name='testgroup')\n    user.groups.add(group)\n\n    form = CustomUserCreationForm({'username': 'testuser', 'password1': 'password', 'password2': 'password', 'groups': [group.id]})\n    form.save()\n\n    saved_user = CustomUser.objects.get(username='testuser')\n    assert saved_user.groups.count() == 1\n\ndef test_user_creation_form_save_m2m_commit_false():\n    # Test that UserCreationForm does not save ManyToMany fields when commit=False\n    form = CustomUserCreationForm({'username': 'testuser', 'password1': 'password', 'password2': 'password'})\n    user = form.save(commit=False)\n    user.save()\n    assert user.groups.count() == 0\n\ndef test_model_form_save_m2m():\n    # Test that ModelForm saves ManyToMany fields\n    class TestModelForm(ModelForm):\n        class Meta:\n            model = CustomUser\n            fields = ('username', 'groups')\n\n    form = TestModelForm({'username': 'testuser', 'groups': [1]})\n    form.save()\n    saved_user = CustomUser.objects.get(username='testuser')\n    assert saved_user.groups.count() == 1\n</patched>\n```",
  "patch": "--- a/tests/test_forms.py\n+++ b/tests/test_forms.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.contrib.auth.forms import UserCreationForm\n+from django.contrib.auth.models import User\n+from django.forms import ModelForm\n+from django.db import models\n+\n+# Define a custom User model with a ManyToManyField\n+class CustomUser(models.Model):\n+    groups = models.ManyToManyField('auth.Group')\n+\n+class CustomUserCreationForm(UserCreationForm):\n+    class Meta:\n+        model = CustomUser\n+        fields = ('username',)\n+\n+def test_user_creation_form_save_m2m():\n+    # Test that UserCreationForm saves ManyToMany fields\n+    user = CustomUser.objects.create_user('testuser', email='test@example.com')\n+    group = models.Group.objects.create(name='testgroup')\n+    user.groups.add(group)\n+\n+    form = CustomUserCreationForm({'username': 'testuser', 'password1': 'password', 'password2': 'password', 'groups': [group.id]})\n+    form.save()\n+\n+    saved_user = CustomUser.objects.get(username='testuser')\n+    assert saved_user.groups.count() == 1\n+\n+def test_user_creation_form_save_m2m_commit_false():\n+    # Test that UserCreationForm does not save ManyToMany fields when commit=False\n+    form = CustomUserCreationForm({'username': 'testuser', 'password1': 'password', 'password2': 'password'})\n+    user = form.save(commit=False)\n+    user.save()\n+    assert user.groups.count() == 0\n+\n+def test_model_form_save_m2m():\n+    # Test that ModelForm saves ManyToMany fields\n+    class TestModelForm(ModelForm):\n+        class Meta:\n+            model = CustomUser\n+            fields = ('username', 'groups')\n+\n+    form = TestModelForm({'username': 'testuser', 'groups': [1]})\n+    form.save()\n+    saved_user = CustomUser.objects.get(username='testuser')\n+    assert saved_user.groups.count() == 1\n"
}