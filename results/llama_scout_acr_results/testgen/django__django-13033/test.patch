--- a/tests/test_self_referential_foreign_key.py
+++ b/tests/test_self_referential_foreign_key.py
+import pytest
+from django.db import models
+from django.db.models import QuerySet
+
+class OneModel(models.Model):
+    class Meta:
+        ordering = ("-id",)
+    id = models.BigAutoField(primary_key=True)
+    root = models.ForeignKey("self", on_delete=models.CASCADE, null=True)
+
+class TwoModel(models.Model):
+    id = models.BigAutoField(primary_key=True)
+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)
+    twoval = models.BigIntegerField(null=True)
+
+def test_self_referential_foreign_key_ordering():
+    # Create instances
+    one_model_1 = OneModel.objects.create(oneval=1)
+    one_model_2 = OneModel.objects.create(oneval=2)
+    two_model_1 = TwoModel.objects.create(record=one_model_1, twoval=10)
+    two_model_2 = TwoModel.objects.create(record=one_model_2, twoval=20)
+
+    # Order by self-referential foreign key
+    qs = TwoModel.objects.filter(record__oneval__in=[1, 2])
+    qs = qs.order_by("record__root_id")
+
+    # Assert query and results
+    assert qs.query.sql_select == ["two_model.id", "two_model.record_id", "two_model.twoval"]
+
+def test_optimized_ordering():
+    # Annotate and order
+    qs = TwoModel.objects.filter(record__oneval__in=[1, 2])
+    qs = qs.annotate(root_id=models.F("record__root_id"))
+    qs = qs.order_by("root_id")
+
+    # Assert optimized query and results
+    assert qs.query.sql_select == ["two_model.id", "two_model.record_id", "two_model.twoval", "orion_onemodel.root_id"]
