{
  "instance_id": "django__django-15561",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "## Test Suite for Optimizing AlterField Operations on SQLite Databases\n\nThe following test suite aims to cover the optimization of `AlterField` operations on SQLite databases, specifically when adding or changing choices.\n\n```\n<file>tests/test_optimizations.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import migrations, models\nfrom django.db.migrations.operations import AlterField\nfrom django.db.migrations.state import ProjectState\nfrom django.test import TestCase\n\n@pytest.mark.test_utils\nclass TestAlterFieldOptimization(TestCase):\n    def test_alter_field_noop_on_sqlite(self):\n        # Test that AlterField is a no-op on SQLite when adding/changing choices\n        project_state = ProjectState()\n        model = models.Model(\n            'TestModel',\n            [\n                models.Field('id', models.AutoField, primary_key=True),\n                models.Field('name', models.CharField, max_length=255, choices=[('a', 'A')]),\n            ]\n        )\n        project_state.add_model(model)\n\n        # Create an AlterField operation that adds a choice\n        operation = AlterField(\n            'TestModel',\n            'name',\n            models.CharField(max_length=255, choices=[('a', 'A'), ('b', 'B')]),\n        )\n\n        # Apply the operation on a SQLite database\n        with self.settings(DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}}):\n            operation.database_forwards('app_label', None, project_state, project_state)\n\n        # Assert that no SQL was executed (i.e., it's a no-op)\n        self.assertNoSQLExecuted()\n\n    def test_alter_field_optimized_on_postgres(self):\n        # Test that AlterField is optimized on Postgres when adding/changing choices\n        project_state = ProjectState()\n        model = models.Model(\n            'TestModel',\n            [\n                models.Field('id', models.AutoField, primary_key=True),\n                models.Field('name', models.CharField, max_length=255, choices=[('a', 'A')]),\n            ]\n        )\n        project_state.add_model(model)\n\n        # Create an AlterField operation that adds a choice\n        operation = AlterField(\n            'TestModel',\n            'name',\n            models.CharField(max_length=255, choices=[('a', 'A'), ('b', 'B')]),\n        )\n\n        # Apply the operation on a Postgres database\n        with self.settings(DATABASES={'default': {'ENGINE': 'django.db.backends.postgresql'}}):\n            operation.database_forwards('app_label', None, project_state, project_state)\n\n        # Assert that no SQL was executed (i.e., it's optimized)\n        self.assertNoSQLExecuted()\n</patched>\n```",
  "patch": "--- a/tests/test_optimizations.py\n+++ b/tests/test_optimizations.py\n-# Empty if creating new file\n+import pytest\n+from django.db import migrations, models\n+from django.db.migrations.operations import AlterField\n+from django.db.migrations.state import ProjectState\n+from django.test import TestCase\n+\n+@pytest.mark.test_utils\n+class TestAlterFieldOptimization(TestCase):\n+    def test_alter_field_noop_on_sqlite(self):\n+        # Test that AlterField is a no-op on SQLite when adding/changing choices\n+        project_state = ProjectState()\n+        model = models.Model(\n+            'TestModel',\n+            [\n+                models.Field('id', models.AutoField, primary_key=True),\n+                models.Field('name', models.CharField, max_length=255, choices=[('a', 'A')]),\n+            ]\n+        )\n+        project_state.add_model(model)\n+\n+        # Create an AlterField operation that adds a choice\n+        operation = AlterField(\n+            'TestModel',\n+            'name',\n+            models.CharField(max_length=255, choices=[('a', 'A'), ('b', 'B')]),\n+        )\n+\n+        # Apply the operation on a SQLite database\n+        with self.settings(DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}}):\n+            operation.database_forwards('app_label', None, project_state, project_state)\n+\n+        # Assert that no SQL was executed (i.e., it's a no-op)\n+        self.assertNoSQLExecuted()\n+\n+    def test_alter_field_optimized_on_postgres(self):\n+        # Test that AlterField is optimized on Postgres when adding/changing choices\n+        project_state = ProjectState()\n+        model = models.Model(\n+            'TestModel',\n+            [\n+                models.Field('id', models.AutoField, primary_key=True),\n+                models.Field('name', models.CharField, max_length=255, choices=[('a', 'A')]),\n+            ]\n+        )\n+        project_state.add_model(model)\n+\n+        # Create an AlterField operation that adds a choice\n+        operation = AlterField(\n+            'TestModel',\n+            'name',\n+            models.CharField(max_length=255, choices=[('a', 'A'), ('b', 'B')]),\n+        )\n+\n+        # Apply the operation on a Postgres database\n+        with self.settings(DATABASES={'default': {'ENGINE': 'django.db.backends.postgresql'}}):\n+            operation.database_forwards('app_label', None, project_state, project_state)\n+\n+        # Assert that no SQL was executed (i.e., it's optimized)\n+        self.assertNoSQLExecuted()\n"
}