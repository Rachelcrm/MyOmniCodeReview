{
  "instance_id": "scrapy__scrapy-5917",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of handling non-UTF-8 encoded `Content-Type` headers in Scrapy, we need to modify the `ResponseTypes` class in `scrapy/responsetypes.py` to properly decode these headers. \n\nLet's create a test suite that covers this functionality.\n\n```\n<file>tests/test_responsetypes.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom scrapy.responsetypes import ResponseTypes\nfrom scrapy.http import Response\n\ndef test_from_content_type_utf8():\n    response_types = ResponseTypes()\n    content_type = b\"text/html; charset=utf-8\"\n    assert response_types.from_content_type(content_type) == Response\n\ndef test_from_content_type_latin1():\n    response_types = ResponseTypes()\n    content_type = b\"text/html; charset=windows-1251\"\n    assert response_types.from_content_type(content_type) == Response\n\ndef test_from_content_type_non_utf8():\n    response_types = ResponseTypes()\n    content_type = b\"Content-Type: text/html; charset=windows-1251\"\n    # This should not raise an exception\n    response_types.from_content_type(content_type)\n\ndef test_from_headers_utf8():\n    response_types = ResponseTypes()\n    headers = {b\"Content-Type\": b\"text/html; charset=utf-8\"}\n    assert response_types.from_headers(headers) == Response\n\ndef test_from_headers_latin1():\n    response_types = ResponseTypes()\n    headers = {b\"Content-Type\": b\"text/html; charset=windows-1251\"}\n    assert response_types.from_headers(headers) == Response\n\ndef test_from_headers_non_utf8():\n    response_types = ResponseTypes()\n    headers = {b\"Content-Type\": b\"Content-Type: text/html; charset=windows-1251\"}\n    # This should not raise an exception\n    response_types.from_headers(headers)\n</patched>\n```\n\nAdditionally, we need to modify the `from_content_type` and `from_headers` methods in `scrapy/responsetypes.py` to handle non-UTF-8 encoded headers.\n\n```\n<file>scrapy/responsetypes.py</file>\n<original>\n    def from_content_type(self, content_type, content_encoding=None):\n        \"\"\"Return the most appropriate Response class from an HTTP Content-Type\n        header\"\"\"\n        if content_encoding:\n            return Response\n        mimetype = to_unicode(content_type).split(\";\")[0].strip().lower()\n        return self.from_mimetype(mimetype)\n\n    def from_headers(self, headers):\n        \"\"\"Return the most appropriate Response class by looking at the HTTP\n        headers\"\"\"\n        cls = Response\n        if b\"Content-Type\" in headers:\n            cls = self.from_content_type(\n                content_type=headers[b\"Content-Type\"],\n                content_encoding=headers.get(b\"Content-Encoding\"),\n            )\n        return cls\n</original>\n<patched>\n    def from_content_type(self, content_type, content_encoding=None):\n        \"\"\"Return the most appropriate Response class from an HTTP Content-Type\n        header\"\"\"\n        if content_encoding:\n            return Response\n        mimetype = to_unicode(content_type, encoding='latin1').split(\";\")[0].strip().lower()\n        return self.from_mimetype(mimetype)\n\n    def from_headers(self, headers):\n        \"\"\"Return the most appropriate Response class by looking at the HTTP\n        headers\"\"\"\n        cls = Response\n        if b\"Content-Type\" in headers:\n            cls = self.from_content_type(\n                content_type=headers[b\"Content-Type\"],\n                content_encoding=headers.get(b\"Content-Encoding\"),\n            )\n        return cls\n</patched>\n```",
  "patch": "--- a/tests/test_responsetypes.py\n+++ b/tests/test_responsetypes.py\n-# Empty if creating new file\n+import pytest\n+from scrapy.responsetypes import ResponseTypes\n+from scrapy.http import Response\n+\n+def test_from_content_type_utf8():\n+    response_types = ResponseTypes()\n+    content_type = b\"text/html; charset=utf-8\"\n+    assert response_types.from_content_type(content_type) == Response\n+\n+def test_from_content_type_latin1():\n+    response_types = ResponseTypes()\n+    content_type = b\"text/html; charset=windows-1251\"\n+    assert response_types.from_content_type(content_type) == Response\n+\n+def test_from_content_type_non_utf8():\n+    response_types = ResponseTypes()\n+    content_type = b\"Content-Type: text/html; charset=windows-1251\"\n+    # This should not raise an exception\n+    response_types.from_content_type(content_type)\n+\n+def test_from_headers_utf8():\n+    response_types = ResponseTypes()\n+    headers = {b\"Content-Type\": b\"text/html; charset=utf-8\"}\n+    assert response_types.from_headers(headers) == Response\n+\n+def test_from_headers_latin1():\n+    response_types = ResponseTypes()\n+    headers = {b\"Content-Type\": b\"text/html; charset=windows-1251\"}\n+    assert response_types.from_headers(headers) == Response\n+\n+def test_from_headers_non_utf8():\n+    response_types = ResponseTypes()\n+    headers = {b\"Content-Type\": b\"Content-Type: text/html; charset=windows-1251\"}\n+    # This should not raise an exception\n+    response_types.from_headers(headers)\n\n--- a/scrapy/responsetypes.py\n+++ b/scrapy/responsetypes.py\n-    def from_content_type(self, content_type, content_encoding=None):\n-        \"\"\"Return the most appropriate Response class from an HTTP Content-Type\n-        header\"\"\"\n-        if content_encoding:\n-            return Response\n-        mimetype = to_unicode(content_type).split(\";\")[0].strip().lower()\n-        return self.from_mimetype(mimetype)\n-\n-    def from_headers(self, headers):\n-        \"\"\"Return the most appropriate Response class by looking at the HTTP\n-        headers\"\"\"\n-        cls = Response\n-        if b\"Content-Type\" in headers:\n-            cls = self.from_content_type(\n-                content_type=headers[b\"Content-Type\"],\n-                content_encoding=headers.get(b\"Content-Encoding\"),\n-            )\n-        return cls\n+    def from_content_type(self, content_type, content_encoding=None):\n+        \"\"\"Return the most appropriate Response class from an HTTP Content-Type\n+        header\"\"\"\n+        if content_encoding:\n+            return Response\n+        mimetype = to_unicode(content_type, encoding='latin1').split(\";\")[0].strip().lower()\n+        return self.from_mimetype(mimetype)\n+\n+    def from_headers(self, headers):\n+        \"\"\"Return the most appropriate Response class by looking at the HTTP\n+        headers\"\"\"\n+        cls = Response\n+        if b\"Content-Type\" in headers:\n+            cls = self.from_content_type(\n+                content_type=headers[b\"Content-Type\"],\n+                content_encoding=headers.get(b\"Content-Encoding\"),\n+            )\n+        return cls\n"
}