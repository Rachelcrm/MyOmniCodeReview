{
  "instance_id": "django__django-11149",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of auto-created ManyToManyFields being editable with view-only permissions in Django admin inlines, we need to modify the `has_add_permission`, `has_change_permission`, and `has_delete_permission` methods of the `InlineModelAdmin` class. \n\nHere's how you can test it:\n\n```\n<file>tests/test_admin.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.contrib.admin import AdminSite\nfrom django.contrib.auth.models import Permission, User\nfrom django.test import TestCase\nfrom .models import Photo, Report\n\nclass TestInlinePermissions(TestCase):\n    def setUp(self):\n        self.site = AdminSite()\n        self.user = User.objects.create_user(\n            username='testuser', email='test@example.com', password='test'\n        )\n        self.permission_view = Permission.objects.get(codename='view_report')\n        self.user.user_permissions.add(self.permission_view)\n        self.report = Report.objects.create(name='Test Report')\n\n    def test_has_add_permission(self):\n        # Test that has_add_permission returns False with view-only permission\n        request = self.factory.get('/admin/')\n        request.user = self.user\n        inline = ReportPhotoInlineModelAdmin(self.site)\n        self.assertFalse(inline.has_add_permission(request, self.report))\n\n    def test_has_change_permission(self):\n        # Test that has_change_permission returns False with view-only permission\n        request = self.factory.get('/admin/')\n        request.user = self.user\n        inline = ReportPhotoInlineModelAdmin(self.site)\n        self.assertFalse(inline.has_change_permission(request, self.report))\n\n    def test_has_delete_permission(self):\n        # Test that has_delete_permission returns False with view-only permission\n        request = self.factory.get('/admin/')\n        request.user = self.user\n        inline = ReportPhotoInlineModelAdmin(self.site)\n        self.assertFalse(inline.has_delete_permission(request, self.report))\n</patched>\n```\n\n```\n<file>tests/test_models.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nfrom django.db import models\n\nclass Photo(models.Model):\n    pass\n\nclass Report(models.Model):\n    photos = models.ManyToManyField(Photo)\n</patched>\n```\n\n```\n<file>admin.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nfrom django.contrib import admin\nfrom .models import Report, Photo\n\nclass ReportPhotoInlineModelAdmin(admin.TabularInline):\n    model = Report.photos.through\n\n    def has_add_permission(self, request, obj):\n        # Check for add permission\n        return request.user.has_perm('yourapp.add_report')\n\n    def has_change_permission(self, request, obj):\n        # Check for change permission\n        return request.user.has_perm('yourapp.change_report')\n\n    def has_delete_permission(self, request, obj):\n        # Check for delete permission\n        return request.user.has_perm('yourapp.delete_report')\n</patched>\n```",
  "patch": "--- a/tests/test_admin.py\n+++ b/tests/test_admin.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.contrib.admin import AdminSite\n+from django.contrib.auth.models import Permission, User\n+from django.test import TestCase\n+from .models import Photo, Report\n+\n+class TestInlinePermissions(TestCase):\n+    def setUp(self):\n+        self.site = AdminSite()\n+        self.user = User.objects.create_user(\n+            username='testuser', email='test@example.com', password='test'\n+        )\n+        self.permission_view = Permission.objects.get(codename='view_report')\n+        self.user.user_permissions.add(self.permission_view)\n+        self.report = Report.objects.create(name='Test Report')\n+\n+    def test_has_add_permission(self):\n+        # Test that has_add_permission returns False with view-only permission\n+        request = self.factory.get('/admin/')\n+        request.user = self.user\n+        inline = ReportPhotoInlineModelAdmin(self.site)\n+        self.assertFalse(inline.has_add_permission(request, self.report))\n+\n+    def test_has_change_permission(self):\n+        # Test that has_change_permission returns False with view-only permission\n+        request = self.factory.get('/admin/')\n+        request.user = self.user\n+        inline = ReportPhotoInlineModelAdmin(self.site)\n+        self.assertFalse(inline.has_change_permission(request, self.report))\n+\n+    def test_has_delete_permission(self):\n+        # Test that has_delete_permission returns False with view-only permission\n+        request = self.factory.get('/admin/')\n+        request.user = self.user\n+        inline = ReportPhotoInlineModelAdmin(self.site)\n+        self.assertFalse(inline.has_delete_permission(request, self.report))\n\n--- a/tests/test_models.py\n+++ b/tests/test_models.py\n-# Original code here (if modifying existing file)\n+from django.db import models\n+\n+class Photo(models.Model):\n+    pass\n+\n+class Report(models.Model):\n+    photos = models.ManyToManyField(Photo)\n\n--- a/admin.py\n+++ b/admin.py\n-# Original code here (if modifying existing file)\n+from django.contrib import admin\n+from .models import Report, Photo\n+\n+class ReportPhotoInlineModelAdmin(admin.TabularInline):\n+    model = Report.photos.through\n+\n+    def has_add_permission(self, request, obj):\n+        # Check for add permission\n+        return request.user.has_perm('yourapp.add_report')\n+\n+    def has_change_permission(self, request, obj):\n+        # Check for change permission\n+        return request.user.has_perm('yourapp.change_report')\n+\n+    def has_delete_permission(self, request, obj):\n+        # Check for delete permission\n+        return request.user.has_perm('yourapp.delete_report')\n"
}