{
  "instance_id": "django__django-15525",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of `loaddata` failing on non-default databases when natural keys use foreign keys, we need to create a comprehensive test suite. The test suite should cover the functionality of loading data into a non-default database using natural keys and foreign keys.\n\n```python\n<file>tests/test_loaddata.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.core.management import call_command\nfrom django.core.management.base import CommandError\nfrom django.db import connections\n\n@pytest.fixture\ndef author_data():\n    return [\n        {\n            \"model\": \"testbug.author\",\n            \"fields\": {\n                \"name\": \"JR Tolkien\"\n            }\n        }\n    ]\n\n@pytest.fixture\ndef book_data():\n    return [\n        {\n            \"model\": \"testbug.book\",\n            \"fields\": {\n                \"title\": \"The Ring\",\n                \"author\": [\n                    \"JR Tolkien\"\n                ]\n            }\n        }\n    ]\n\n@pytest.mark.django_db(databases={'default': 'sqlite', 'other': 'postgresql'})\ndef test_loaddata_default_database(author_data, book_data):\n    call_command('loaddata', '--format=json', '-', stdin='\\n'.join(map(str, author_data + book_data)))\n    assert connections['default'].cursor().execute(\"SELECT * FROM testbug_author\")\n\n@pytest.mark.django_db(databases={'default': 'sqlite', 'other': 'postgresql'})\ndef test_loaddata_non_default_database(author_data, book_data):\n    call_command('loaddata', '--database=other', '--format=json', '-', stdin='\\n'.join(map(str, author_data + book_data)))\n    assert connections['other'].cursor().execute(\"SELECT * FROM testbug_author\")\n\ndef test_loaddata_failure(author_data, book_data):\n    with pytest.raises(CommandError):\n        call_command('loaddata', '--database=other', '--format=json', '-', stdin='\\n'.join(map(str, book_data)))\n\n</patched>\n```",
  "patch": "--- a/tests/test_loaddata.py\n+++ b/tests/test_loaddata.py\n-# Empty if creating new file\n+import pytest\n+from django.core.management import call_command\n+from django.core.management.base import CommandError\n+from django.db import connections\n+\n+@pytest.fixture\n+def author_data():\n+    return [\n+        {\n+            \"model\": \"testbug.author\",\n+            \"fields\": {\n+                \"name\": \"JR Tolkien\"\n+            }\n+        }\n+    ]\n+\n+@pytest.fixture\n+def book_data():\n+    return [\n+        {\n+            \"model\": \"testbug.book\",\n+            \"fields\": {\n+                \"title\": \"The Ring\",\n+                \"author\": [\n+                    \"JR Tolkien\"\n+                ]\n+            }\n+        }\n+    ]\n+\n+@pytest.mark.django_db(databases={'default': 'sqlite', 'other': 'postgresql'})\n+def test_loaddata_default_database(author_data, book_data):\n+    call_command('loaddata', '--format=json', '-', stdin='\\n'.join(map(str, author_data + book_data)))\n+    assert connections['default'].cursor().execute(\"SELECT * FROM testbug_author\")\n+\n+@pytest.mark.django_db(databases={'default': 'sqlite', 'other': 'postgresql'})\n+def test_loaddata_non_default_database(author_data, book_data):\n+    call_command('loaddata', '--database=other', '--format=json', '-', stdin='\\n'.join(map(str, author_data + book_data)))\n+    assert connections['other'].cursor().execute(\"SELECT * FROM testbug_author\")\n+\n+def test_loaddata_failure(author_data, book_data):\n+    with pytest.raises(CommandError):\n+        call_command('loaddata', '--database=other', '--format=json', '-', stdin='\\n'.join(map(str, book_data)))\n"
}