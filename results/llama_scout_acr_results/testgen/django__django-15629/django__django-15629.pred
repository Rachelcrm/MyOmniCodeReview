{
  "instance_id": "django__django-15629",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_db_collation.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.db.models.fields import CharField, ForeignKey\n\nclass TestDBCollation:\n    def test_db_collation_propagates_to_foreign_keys(self):\n        # Arrange\n        class Account(models.Model):\n            id = CharField(primary_key=True, db_collation='utf8_bin', max_length=22)\n            name = CharField(max_length=255)\n\n        class Profile(models.Model):\n            account = ForeignKey(Account, on_delete=models.CASCADE)\n            bio = CharField(max_length=255)\n\n        # Act and Assert\n        profile = Profile.objects.create(account_id='some_account_id', bio='some bio')\n        assert profile.account.name == 'some_account_id'\n\n    def test_adding_collation_to_foreign_key_constraint(self):\n        # Arrange\n        class Account(models.Model):\n            id = CharField(primary_key=True, db_collation='utf8_bin', max_length=22)\n            name = CharField(max_length=255)\n\n        class Profile(models.Model):\n            account = ForeignKey(Account, on_delete=models.CASCADE, db_collation='utf8_bin')\n            bio = CharField(max_length=255)\n\n        # Act and Assert\n        profile = Profile.objects.create(account_id='some_account_id', bio='some bio')\n        assert profile.account.name == 'some_account_id'\n\n    def test_collation_in_sql(self):\n        # Arrange\n        class Account(models.Model):\n            id = CharField(primary_key=True, db_collation='utf8_bin', max_length=22)\n            name = CharField(max_length=255)\n\n        class Profile(models.Model):\n            account = ForeignKey(Account, on_delete=models.CASCADE)\n            bio = CharField(max_length=255)\n\n        # Act\n        sql = Profile.objects.raw('SELECT * FROM profiles').sql\n\n        # Assert\n        assert 'utf8_bin' in sql\n\n</patched>\n```",
  "patch": "--- a/tests/test_db_collation.py\n+++ b/tests/test_db_collation.py\n-# Empty if creating new file\n+import pytest\n+from django.db import models\n+from django.db.models.fields import CharField, ForeignKey\n+\n+class TestDBCollation:\n+    def test_db_collation_propagates_to_foreign_keys(self):\n+        # Arrange\n+        class Account(models.Model):\n+            id = CharField(primary_key=True, db_collation='utf8_bin', max_length=22)\n+            name = CharField(max_length=255)\n+\n+        class Profile(models.Model):\n+            account = ForeignKey(Account, on_delete=models.CASCADE)\n+            bio = CharField(max_length=255)\n+\n+        # Act and Assert\n+        profile = Profile.objects.create(account_id='some_account_id', bio='some bio')\n+        assert profile.account.name == 'some_account_id'\n+\n+    def test_adding_collation_to_foreign_key_constraint(self):\n+        # Arrange\n+        class Account(models.Model):\n+            id = CharField(primary_key=True, db_collation='utf8_bin', max_length=22)\n+            name = CharField(max_length=255)\n+\n+        class Profile(models.Model):\n+            account = ForeignKey(Account, on_delete=models.CASCADE, db_collation='utf8_bin')\n+            bio = CharField(max_length=255)\n+\n+        # Act and Assert\n+        profile = Profile.objects.create(account_id='some_account_id', bio='some bio')\n+        assert profile.account.name == 'some_account_id'\n+\n+    def test_collation_in_sql(self):\n+        # Arrange\n+        class Account(models.Model):\n+            id = CharField(primary_key=True, db_collation='utf8_bin', max_length=22)\n+            name = CharField(max_length=255)\n+\n+        class Profile(models.Model):\n+            account = ForeignKey(Account, on_delete=models.CASCADE)\n+            bio = CharField(max_length=255)\n+\n+        # Act\n+        sql = Profile.objects.raw('SELECT * FROM profiles').sql\n+\n+        # Assert\n+        assert 'utf8_bin' in sql\n"
}