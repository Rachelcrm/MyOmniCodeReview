{
  "instance_id": "django__django-13128",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_temporal_subtraction.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db.models import F, DateTimeField, DurationField\nfrom django.db.models.functions import ExpressionWrapper\nfrom .models import Experiment\n\n@pytest.mark.test_temporal_subtraction\ndef test_temporal_subtraction_without_expression_wrapper():\n    \"\"\"\n    Test that temporal subtraction works without ExpressionWrapper.\n    \"\"\"\n    # Arrange\n    experiment = Experiment.objects.create(\n        start='2022-01-01 00:00:00',\n        end='2022-01-01 01:00:00'\n    )\n\n    # Act\n    delta = (experiment.end - experiment.start)\n\n    # Assert\n    assert isinstance(delta, DurationField)\n    assert delta == timedelta(hours=1)\n\n@pytest.mark.test_temporal_subtraction\ndef test_temporal_subtraction_with_expression_wrapper():\n    \"\"\"\n    Test that temporal subtraction works with ExpressionWrapper.\n    \"\"\"\n    # Arrange\n    experiment = Experiment.objects.create(\n        start='2022-01-01 00:00:00',\n        end='2022-01-01 01:00:00'\n    )\n\n    # Act\n    delta = ExpressionWrapper(\n        experiment.end - experiment.start,\n        output_field=DurationField()\n    )\n\n    # Assert\n    assert isinstance(delta, DurationField)\n    assert delta == timedelta(hours=1)\n\n@pytest.mark.test_temporal_subtraction\ndef test_temporal_subtraction_queryset():\n    \"\"\"\n    Test that temporal subtraction works in a queryset.\n    \"\"\"\n    # Arrange\n    Experiment.objects.create(\n        start='2022-01-01 00:00:00',\n        end='2022-01-01 01:00:00'\n    )\n\n    # Act\n    deltas = Experiment.objects.annotate(\n        delta=F('end') - F('start')\n    ).values_list('delta', flat=True)\n\n    # Assert\n    assert len(deltas) == 1\n    assert isinstance(deltas[0], timedelta)\n    assert deltas[0] == timedelta(hours=1)\n</patched>\n```",
  "patch": "--- a/tests/test_temporal_subtraction.py\n+++ b/tests/test_temporal_subtraction.py\n-# Empty if creating new file\n+import pytest\n+from django.db.models import F, DateTimeField, DurationField\n+from django.db.models.functions import ExpressionWrapper\n+from .models import Experiment\n+\n+@pytest.mark.test_temporal_subtraction\n+def test_temporal_subtraction_without_expression_wrapper():\n+    \"\"\"\n+    Test that temporal subtraction works without ExpressionWrapper.\n+    \"\"\"\n+    # Arrange\n+    experiment = Experiment.objects.create(\n+        start='2022-01-01 00:00:00',\n+        end='2022-01-01 01:00:00'\n+    )\n+\n+    # Act\n+    delta = (experiment.end - experiment.start)\n+\n+    # Assert\n+    assert isinstance(delta, DurationField)\n+    assert delta == timedelta(hours=1)\n+\n+@pytest.mark.test_temporal_subtraction\n+def test_temporal_subtraction_with_expression_wrapper():\n+    \"\"\"\n+    Test that temporal subtraction works with ExpressionWrapper.\n+    \"\"\"\n+    # Arrange\n+    experiment = Experiment.objects.create(\n+        start='2022-01-01 00:00:00',\n+        end='2022-01-01 01:00:00'\n+    )\n+\n+    # Act\n+    delta = ExpressionWrapper(\n+        experiment.end - experiment.start,\n+        output_field=DurationField()\n+    )\n+\n+    # Assert\n+    assert isinstance(delta, DurationField)\n+    assert delta == timedelta(hours=1)\n+\n+@pytest.mark.test_temporal_subtraction\n+def test_temporal_subtraction_queryset():\n+    \"\"\"\n+    Test that temporal subtraction works in a queryset.\n+    \"\"\"\n+    # Arrange\n+    Experiment.objects.create(\n+        start='2022-01-01 00:00:00',\n+        end='2022-01-01 01:00:00'\n+    )\n+\n+    # Act\n+    deltas = Experiment.objects.annotate(\n+        delta=F('end') - F('start')\n+    ).values_list('delta', flat=True)\n+\n+    # Assert\n+    assert len(deltas) == 1\n+    assert isinstance(deltas[0], timedelta)\n+    assert deltas[0] == timedelta(hours=1)\n"
}