{
  "instance_id": "sympy__sympy-12096",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_function.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom sympy import Function, implemented_function, Symbol\nfrom sympy.utilities.lambdify import lambdify\n\ndef test_implemented_function_evalf():\n    x = Symbol('x')\n    f = implemented_function('f', lambda x: x ** 2)\n    assert f(2).evalf() == 4.0\n\ndef test_composition_evalf():\n    x = Symbol('x')\n    f = implemented_function('f', lambda x: x ** 2)\n    g = implemented_function('g', lambda x: 2 * x)\n    assert f(g(2)).evalf() == 16.0\n\ndef test_nested_composition_evalf():\n    x = Symbol('x')\n    f = implemented_function('f', lambda x: x ** 2)\n    g = implemented_function('g', lambda x: 2 * x)\n    h = implemented_function('h', lambda x: 3 * x)\n    assert f(g(h(2))).evalf() == 144.0\n\ndef test_evalf_not_called_recursively():\n    x = Symbol('x')\n    f = implemented_function('f', lambda x: x ** 2)\n    g = implemented_function('g', lambda x: 2 * x)\n    assert f(g(2)).evalf() == 16.0\n\ndef test_issue_12096():\n    from sympy.abc import x\n    f = implemented_function('f', lambda x: 2*x)\n    assert f(x).subs(x, 2).evalf() == 4.0\n    assert f(f(x)).subs(x, 2).evalf() == 8.0\n</patched>\n```",
  "patch": "--- a/tests/test_function.py\n+++ b/tests/test_function.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from sympy import Function, implemented_function, Symbol\n+from sympy.utilities.lambdify import lambdify\n+\n+def test_implemented_function_evalf():\n+    x = Symbol('x')\n+    f = implemented_function('f', lambda x: x ** 2)\n+    assert f(2).evalf() == 4.0\n+\n+def test_composition_evalf():\n+    x = Symbol('x')\n+    f = implemented_function('f', lambda x: x ** 2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(g(2)).evalf() == 16.0\n+\n+def test_nested_composition_evalf():\n+    x = Symbol('x')\n+    f = implemented_function('f', lambda x: x ** 2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    h = implemented_function('h', lambda x: 3 * x)\n+    assert f(g(h(2))).evalf() == 144.0\n+\n+def test_evalf_not_called_recursively():\n+    x = Symbol('x')\n+    f = implemented_function('f', lambda x: x ** 2)\n+    g = implemented_function('g', lambda x: 2 * x)\n+    assert f(g(2)).evalf() == 16.0\n+\n+def test_issue_12096():\n+    from sympy.abc import x\n+    f = implemented_function('f', lambda x: 2*x)\n+    assert f(x).subs(x, 2).evalf() == 4.0\n+    assert f(f(x)).subs(x, 2).evalf() == 8.0\n"
}