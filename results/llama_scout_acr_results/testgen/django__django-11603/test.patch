--- a/tests/test_aggregates.py
+++ b/tests/test_aggregates.py
-# Empty if creating new file
+import pytest
+from django.db.models import Avg, Sum
+from django.db.models.query import QuerySet
+
+@pytest.mark.test_distinct_avg
+def test_distinct_avg():
+    # Test that Avg supports DISTINCT
+    qs = QuerySet().annotate(avg=Avg('field', distinct=True))
+    assert qs.query.get_aggregate_sql(Avg('field', distinct=True)) == "AVG(DISTINCT field)"
+
+@pytest.mark.test_distinct_sum
+def test_distinct_sum():
+    # Test that Sum supports DISTINCT
+    qs = QuerySet().annotate(sum=Sum('field', distinct=True))
+    assert qs.query.get_aggregate_sql(Sum('field', distinct=True)) == "SUM(DISTINCT field)"
+
+@pytest.mark.test_avg_without_distinct
+def test_avg_without_distinct():
+    # Test that Avg without DISTINCT works as expected
+    qs = QuerySet().annotate(avg=Avg('field'))
+    assert qs.query.get_aggregate_sql(Avg('field')) == "AVG(field)"
+
+@pytest.mark.test_sum_without_distinct
+def test_sum_without_distinct():
+    # Test that Sum without DISTINCT works as expected
+    qs = QuerySet().annotate(sum=Sum('field'))
+    assert qs.query.get_aggregate_sql(Sum('field')) == "SUM(field)"
+
+@pytest.mark.test_distinct_not_allowed
+def test_distinct_not_allowed():
+    # Test that setting distinct on an aggregate that doesn't support it raises an error
+    with pytest.raises(TypeError):
+        QuerySet().annotate(avg=Avg('field', distinct=True))._get_distinct_sql(Avg('field'))

--- a/tests/test_aggregates_sql.py
+++ b/tests/test_aggregates_sql.py
-# Empty if creating new file
+import pytest
+from django.db.models import Avg, Sum
+from django.db.models.query import QuerySet
+
+@pytest.mark.test_distinct_avg_sql
+def test_distinct_avg_sql():
+    # Test that Avg with DISTINCT generates correct SQL
+    qs = QuerySet().annotate(avg=Avg('field', distinct=True))
+    sql, params = qs.query.sql_query
+    assert "AVG(DISTINCT field)" in sql
+
+@pytest.mark.test_distinct_sum_sql
+def test_distinct_sum_sql():
+    # Test that Sum with DISTINCT generates correct SQL
+    qs = QuerySet().annotate(sum=Sum('field', distinct=True))
+    sql, params = qs.query.sql_query
+    assert "SUM(DISTINCT field)" in sql
