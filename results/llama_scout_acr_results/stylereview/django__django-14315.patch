{
  "patch": "diff --git a/django/db/backends/base/client.py b/django/db/backends/base/client.py\nindex 339f1e863c..bfcd87924e 100644\n--- a/django/db/backends/base/client.py\n+++ b/django/db/backends/base/client.py\n@@ -13,13 +13,27 @@ class BaseDatabaseClient:\n         self.connection = connection\n \n     @classmethod\n-    def settings_to_cmd_args_env(cls, settings_dict, parameters):\n+    def settings_to_cmd_args_env(cls, settings_dict: dict, parameters: list[str]) -> tuple[list[str], dict]:\n+        \"\"\"\n+        Convert the database settings and parameters into command-line arguments and environment variables.\n+\n+        This method must be implemented by subclasses or `runshell()` must be overridden.\n+\n+        :param settings_dict: The database settings.\n+        :param parameters: Additional parameters to pass to the client.\n+        :return: A tuple of command-line arguments and environment variables.\n+        \"\"\"\n         raise NotImplementedError(\n             'subclasses of BaseDatabaseClient must provide a '\n             'settings_to_cmd_args_env() method or override a runshell().'\n         )\n \n-    def runshell(self, parameters):\n+    def runshell(self, parameters: list[str]) -> None:\n+        \"\"\"\n+        Open a shell for the database client.\n+\n+        :param parameters: Additional parameters to pass to the client.\n+        \"\"\"\n         args, env = self.settings_to_cmd_args_env(self.connection.settings_dict, parameters)\n         if env:\n             env = {**os.environ, **env}\ndiff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 3effab65a8..8088444b7d 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -53,7 +53,12 @@ class DatabaseClient(BaseDatabaseClient):\n             env['PGPASSFILE'] = str(passfile)\n         return args, env\n \n-    def runshell(self, parameters):\n+    def runshell(self, parameters: list[str]) -> None:\n+        \"\"\"\n+        Open a shell for the PostgreSQL client.\n+\n+        :param parameters: Additional parameters to pass to the client.\n+        \"\"\"\n         sigint_handler = signal.getsignal(signal.SIGINT)\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n"
}