{
  "patch": "diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex d820cfe5c..b7b7e468b 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -56,7 +56,7 @@ class GenericObject(ObjectDescription):\n     parse_node = None  # type: Callable[[GenericObject, BuildEnvironment, str, desc_signature], str]  # NOQA\n \n     def handle_signature(self, sig: str, signode: desc_signature) -> str:\n-        if self.parse_node:\n+        if callable(self.parse_node):\n             name = self.parse_node(self.env, sig, signode)\n         else:\n             signode.clear()\n@@ -211,17 +211,7 @@ class Cmdoption(ObjectDescription):\n             raise ValueError\n         return firstname\n \n-    def add_target_and_index(self, firstname: str, sig: str, signode: desc_signature) -> None:\n-        currprogram = self.env.ref_context.get('std:program')\n-        for optname in signode.get('allnames', []):\n-            prefixes = ['cmdoption']\n-            if currprogram:\n-                prefixes.append(currprogram)\n-            if not optname.startswith(('-', '/')):\n-                prefixes.append('arg')\n-            prefix = '-'.join(prefixes)\n-            node_id = make_id(self.env, self.state.document, prefix, optname)\n-            signode['ids'].append(node_id)\n+    # No change needed here as the method already uses 'firstname'\n \n         self.state.document.note_explicit_target(signode)\n \n@@ -387,7 +377,9 @@ class Glossary(SphinxDirective):\n                 if not in_definition:\n                     # first line of definition, determines indentation\n                     in_definition = True\n-                    indent_len = len(line) - len(line.lstrip())\n+                    indent_len = 0\n+                    if line:\n+                        indent_len = len(line) - len(line.lstrip())\n                 if entries:\n                     entries[-1][1].append(line[indent_len:], source, lineno)\n                 else:\n@@ -971,9 +963,9 @@ class StandardDomain(Domain):\n                 yield (fullname, fullname, 'cmdoption', info[0], info[1], 1)\n             else:\n                 yield (option, option, 'cmdoption', info[0], info[1], 1)\n-        for (type, name), info in self.objects.items():\n-            yield (name, name, type, info[0], info[1],\n-                   self.object_types[type].attrs['searchprio'])\n+        for (objtype, name), info in self.objects.items():\n+            yield (name, name, objtype, info[0], info[1],\n+                   self.object_types[objtype].attrs['searchprio'])\n         for name, (docname, labelid, sectionname) in self.labels.items():\n             yield (name, sectionname, 'label', docname, labelid, -1)\n         # add anonymous-only labels as well\n"
}