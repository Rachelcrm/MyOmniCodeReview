{
  "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 9d6952df21..24434395ae 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -35,7 +35,7 @@ def _is_relevant_relation(relation, altered_field):\n \n \n def _all_related_fields(model):\n-    return model._meta._get_fields(\n+    return model.get_fields(\n         forward=False,\n         reverse=True,\n         include_hidden=True,\n@@ -135,12 +135,12 @@ class BaseDatabaseSchemaEditor:\n \n     sql_delete_procedure = \"DROP PROCEDURE %(procedure)s\"\n \n-    def __init__(self, connection, collect_sql=False, atomic=True):\n+    def __init__(self, connection, collect_sql=False, atomic_rollback=True):\n         self.connection = connection\n         self.collect_sql = collect_sql\n         if self.collect_sql:\n             self.collected_sql = []\n-        self.atomic_migration = self.connection.features.can_rollback_ddl and atomic\n+        self.atomic_migration = self.connection.features.can_rollback_ddl and atomic_rollback\n \n     # State-managing methods\n \n@@ -204,7 +204,7 @@ class BaseDatabaseSchemaEditor:\n         # Create column SQL, add FK deferreds if needed.\n         column_sqls = []\n         params = []\n-        for field in model._meta.local_fields:\n+        for field in model.get_fields():\n             # SQL.\n             definition, extra_params = self.column_sql(model, field)\n             if definition is None:\n@@ -1346,6 +1346,7 @@ class BaseDatabaseSchemaEditor:\n             return []\n         output = []\n         for field in model._meta.local_fields:\n+            # No change needed here, we will keep it as is\n             output.extend(self._field_indexes_sql(model, field))\n \n         for field_names in model._meta.index_together:\n"
}