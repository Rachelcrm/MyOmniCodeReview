{
  "patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd376f..3a1c1fc055 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -311,25 +311,30 @@ class BaseModelForm(BaseForm):\n         exclude = []\n         # Build up a list of fields that should be excluded from model field\n         # validation and unique checks.\n-        for f in self.instance._meta.fields:\n+        opts = self.instance._meta\n+        fields = self.fields\n+        meta_fields = self._meta.fields\n+        meta_exclude = self._meta.exclude\n+        errors = self._errors\n+        for f in opts.fields:\n             field = f.name\n             # Exclude fields that aren't on the form. The developer may be\n             # adding these values to the model after form validation.\n-            if field not in self.fields:\n-                exclude.append(f.name)\n+            if field not in fields:\n+                exclude.append(field)\n \n             # Don't perform model validation on fields that were defined\n             # manually on the form and excluded via the ModelForm's Meta\n             # class. See #12901.\n-            elif self._meta.fields and field not in self._meta.fields:\n-                exclude.append(f.name)\n-            elif self._meta.exclude and field in self._meta.exclude:\n-                exclude.append(f.name)\n+            elif meta_fields and field not in meta_fields:\n+                exclude.append(field)\n+            elif meta_exclude and field in meta_exclude:\n+                exclude.append(field)\n \n             # Exclude fields that failed form validation. There's no need for\n             # the model fields to validate them as well.\n-            elif field in self._errors:\n-                exclude.append(f.name)\n+            elif field in errors:\n+                exclude.append(field)\n \n             # Exclude empty fields that are not required by the form, if the\n             # underlying model field is required. This keeps the model field\n@@ -338,10 +343,10 @@ class BaseModelForm(BaseForm):\n             # value may be included in a unique check, so cannot be excluded\n             # from validation.\n             else:\n-                form_field = self.fields[field]\n+                form_field = fields[field]\n                 field_value = self.cleaned_data.get(field)\n                 if not f.blank and not form_field.required and field_value in form_field.empty_values:\n-                    exclude.append(f.name)\n+                    exclude.append(field)\n         return exclude\n \n     def clean(self):\n"
}