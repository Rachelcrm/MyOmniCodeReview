{
  "patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d913658291..ccb485c4d1 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -18,10 +18,10 @@ class SQLiteNumericMixin:\n     Some expressions with output_field=DecimalField() must be cast to\n     numeric to be properly filtered.\n     \"\"\"\n-    def as_sqlite(self, compiler, connection, **extra_context):\n-        sql, params = self.as_sql(compiler, connection, **extra_context)\n+    def as_sqlite(self, compiler, db_connection, **extra_context):\n+        sql, params = self.as_sql(compiler, db_connection, **extra_context)\n         try:\n-            if self.output_field.get_internal_type() == 'DecimalField':\n+            if self._output_field_or_none.get_internal_type() == 'DecimalField':\n                 sql = 'CAST(%s AS NUMERIC)' % sql\n         except FieldError:\n             pass\n@@ -231,7 +231,7 @@ class BaseExpression:\n     def contains_column_references(self):\n         return any(expr and expr.contains_column_references for expr in self.get_source_expressions())\n \n-    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):\n+    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False):\n         \"\"\"\n         Provide the chance to do any preprocessing or validation before being\n         added to the query.\n@@ -242,7 +242,6 @@ class BaseExpression:\n            in this query\n          * reuse: a set of reusable joins for multijoins\n          * summarize: a terminal aggregate clause\n-         * for_save: whether this expression about to be used in a save or update\n \n         Return: an Expression to be added to the query.\n         \"\"\"\n@@ -261,10 +260,10 @@ class BaseExpression:\n \n     @property\n     def field(self):\n-        return self.output_field\n+        return self._output_field\n \n     @cached_property\n-    def output_field(self):\n+    def _output_field(self):\n         \"\"\"Return the output type of this expressions.\"\"\"\n         output_field = self._resolve_output_field()\n         if output_field is None:\n"
}