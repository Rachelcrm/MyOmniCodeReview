{
  "patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 4f0290a4..74b8a06f 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -274,36 +274,39 @@ class Plot:\n         raise TypeError(f\"Unsupported operand type(s) for +: 'Plot' and '{other_type}\")\n \n     def _repr_png_(self) -> tuple[bytes, dict[str, float]]:\n-\n         return self.plot()._repr_png_()\n+# No actual change needed here as it already uses a public method.\n \n     # TODO _repr_svg_?\n \n-    def _clone(self) -> Plot:\n+    def clone(self) -> Plot:\n         \"\"\"Generate a new object with the same information as the current spec.\"\"\"\n         new = Plot()\n-\n+ \n         # TODO any way to enforce that data does not get mutated?\n         new._data = self._data\n-\n+ \n         new._layers.extend(self._layers)\n-\n+ \n         new._scales.update(self._scales)\n         new._shares.update(self._shares)\n         new._limits.update(self._limits)\n         new._labels.update(self._labels)\n         new._theme.update(self._theme)\n-\n+ \n         new._facet_spec.update(self._facet_spec)\n         new._pair_spec.update(self._pair_spec)\n-\n+ \n         new._figure_spec.update(self._figure_spec)\n         new._subplot_spec.update(self._subplot_spec)\n         new._layout_spec.update(self._layout_spec)\n-\n+ \n         new._target = self._target\n-\n+ \n         return new\n+ \n+    def _clone(self) -> Plot:\n+        return self.clone()\n \n     def _theme_with_defaults(self) -> dict[str, Any]:\n \n"
}