{
  "patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex f957a667b2..3099e740a5 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -20,13 +20,13 @@ class StaticFilesStorage(FileSystemStorage):\n     The defaults for ``location`` and ``base_url`` are\n     ``STATIC_ROOT`` and ``STATIC_URL``.\n     \"\"\"\n-    def __init__(self, location=None, base_url=None, *args, **kwargs):\n+    def __init__(self, *args, location=None, base_url=None, **kwargs):\n         if location is None:\n             location = settings.STATIC_ROOT\n         if base_url is None:\n             base_url = settings.STATIC_URL\n         check_settings(base_url)\n-        super().__init__(location, base_url, *args, **kwargs)\n+        super().__init__(*args, location, base_url, **kwargs)\n         # FileSystemStorage fallbacks to MEDIA_ROOT when location\n         # is empty, so we restore the empty value.\n         if not location:\n@@ -83,9 +83,9 @@ class HashedFilesMixin:\n                 compiled = re.compile(pattern, re.IGNORECASE)\n                 self._patterns.setdefault(extension, []).append((compiled, template))\n \n-    def file_hash(self, name, content=None):\n+    def file_hash(self, content=None):\n         \"\"\"\n-        Return a hash of the file with the given name and optional content.\n+        Return a hash of the file with the given optional content.\n         \"\"\"\n         if content is None:\n             return None\n"
}