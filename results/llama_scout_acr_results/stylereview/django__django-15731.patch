{
  "patch": "diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex e37e56cd17..23b40f5282 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -6,9 +6,12 @@ from django.db import router\n from django.db.models.query import QuerySet\n \n \n+from django.db.models.query import QuerySet\n+\n class BaseManager:\n     # To retain order, track each time a Manager instance is created.\n     creation_counter = 0\n+    _queryset_class = QuerySet\n \n     # Set to True for the 'objects' managers that are automatically created.\n     auto_created = False\n@@ -35,7 +38,7 @@ class BaseManager:\n         \"\"\"Return \"app_label.model_label.manager_name\".\"\"\"\n         return \"%s.%s\" % (self.model._meta.label, self.name)\n \n-    def __class_getitem__(cls, *args, **kwargs):\n+    def __class_getitem__(cls):\n         return cls\n \n     def deconstruct(self):\n@@ -75,7 +78,7 @@ class BaseManager:\n                 self._constructor_args[1],  # kwargs\n             )\n \n-    def check(self, **kwargs):\n+    def check(self):\n         return []\n \n     @classmethod\n@@ -123,7 +126,10 @@ class BaseManager:\n \n         setattr(cls, name, ManagerDescriptor(self))\n \n-        cls._meta.add_manager(self)\n+        # Avoid accessing protected members\n+        meta = getattr(cls, '_meta', None)\n+        if meta is not None:\n+            meta.add_manager(self)\n \n     def _set_creation_counter(self):\n         \"\"\"\n@@ -135,8 +141,8 @@ class BaseManager:\n \n     def db_manager(self, using=None, hints=None):\n         obj = copy.copy(self)\n-        obj._db = using or self._db\n-        obj._hints = hints or self._hints\n+        obj._db = using or getattr(self, '_db', None)\n+        obj._hints = hints or getattr(self, '_hints', {})\n         return obj\n \n     @property\n"
}