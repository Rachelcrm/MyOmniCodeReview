{
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 76265f5be..21348c97a 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -144,7 +144,7 @@ def annotation_option(arg: Any) -> Any:\n         return arg\n \n \n-def bool_option(arg: Any) -> bool:\n+def bool_option() -> bool:\n     \"\"\"Used to convert flag options to auto directives.  (Instead of\n     directives.flag(), which returns None).\n     \"\"\"\n@@ -483,7 +483,7 @@ class Documenter:\n \n     def format_signature(self, **kwargs: Any) -> str:\n         \"\"\"Format the signature (arguments and return annotation) of the object.\n-\n+        \n         Let the user process it via the ``autodoc-process-signature`` event.\n         \"\"\"\n         if self.args is not None:\n@@ -500,10 +500,14 @@ class Documenter:\n                     if matched:\n                         args = matched.group(1)\n                         retann = matched.group(2)\n-            except Exception as exc:\n+            except TypeError as exc:\n                 logger.warning(__('error while formatting arguments for %s: %s'),\n                                self.fullname, exc, type='autodoc')\n                 args = None\n+            except re.error as exc:\n+                logger.warning(__('error while parsing signature for %s: %s'),\n+                               self.fullname, exc, type='autodoc')\n+                args = None\n \n         result = self.env.events.emit_firstresult('autodoc-process-signature',\n                                                   self.objtype, self.fullname,\n"
}