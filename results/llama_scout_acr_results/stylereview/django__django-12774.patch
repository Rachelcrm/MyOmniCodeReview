{
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0db04..2822f51dc9 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -215,6 +215,8 @@ class QuerySet:\n     def as_manager(cls):\n         # Address the circular dependency between `Queryset` and `Manager`.\n         from django.db.models.manager import Manager\n+        # Setting the _built_with_as_manager attribute is necessary to \n+        # distinguish managers created from QuerySets.\n         manager = Manager.from_queryset(cls)()\n         manager._built_with_as_manager = True\n         return manager\n@@ -323,7 +325,7 @@ class QuerySet:\n         qs._fetch_all()\n         return qs._result_cache[0]\n \n-    def __class_getitem__(cls, *args, **kwargs):\n+    def __class_getitem__(cls):\n         return cls\n \n     def __and__(self, other):\n@@ -385,8 +387,8 @@ class QuerySet:\n             # attribute.\n             try:\n                 arg.default_alias\n-            except (AttributeError, TypeError):\n-                raise TypeError(\"Complex aggregates require an alias\")\n+            except (AttributeError, TypeError) as e:\n+                raise TypeError(\"Complex aggregates require an alias\") from e\n             kwargs[arg.default_alias] = arg\n \n         query = self.query.chain()\n"
}