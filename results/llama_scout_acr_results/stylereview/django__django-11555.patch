{
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..54ca544386 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -26,6 +26,7 @@ class SQLCompiler:\n         self.connection = connection\n         self.using = using\n         self.quote_cache = {'*': '*'}\n+        self.col_count = 0\n         # The select, klass_info, and annotations are needed by QuerySet.iterator()\n         # these are set as a side-effect of executing the query. Note that we calculate\n         # separately a list of extra select columns needed for grammatical correctness\n@@ -146,7 +147,7 @@ class SQLCompiler:\n             for expr in expressions:\n                 # Is this a reference to query's base table primary key? If the\n                 # expression isn't a Col-like, then skip the expression.\n-                if (getattr(expr, 'target', None) == self.query.model._meta.pk and\n+                if (getattr(expr, 'target', None) == self.query.model.get_meta().pk and\n                         getattr(expr, 'alias', None) == self.query.base_table):\n                     pk = expr\n                     break\n@@ -272,9 +273,9 @@ class SQLCompiler:\n         else:\n             ordering = []\n         if self.query.standard_ordering:\n-            asc, desc = ORDER_DIR['ASC']\n+            asc = ORDER_DIR['ASC'][0]\n         else:\n-            asc, desc = ORDER_DIR['DESC']\n+            asc = ORDER_DIR['DESC'][0]\n \n         order_by = []\n         for field in ordering:\n@@ -412,7 +413,7 @@ class SQLCompiler:\n             return node.output_field.select_format(self, sql, params)\n         return sql, params\n \n-    def get_combinator_sql(self, combinator, all):\n+    def get_combinator_sql(self, combinator, include_all):\n         features = self.connection.features\n         compilers = [\n             query.get_compiler(self.using, self.connection)\n"
}