{
  "patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9..4fa0703724 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -31,7 +31,7 @@ def PROTECT(collector, field, sub_objs, using):\n def SET(value):\n     if callable(value):\n         def set_on_delete(collector, field, sub_objs, using):\n-            collector.add_field_update(field, value(), sub_objs)\n+            collector.add_field_update(field, value(), sub_objs, using)\n     else:\n         def set_on_delete(collector, field, sub_objs, using):\n             collector.add_field_update(field, value, sub_objs)\n@@ -40,11 +40,11 @@ def SET(value):\n \n \n def SET_NULL(collector, field, sub_objs, using):\n-    collector.add_field_update(field, None, sub_objs)\n+    collector.add_field_update(field, None, sub_objs, using)\n \n \n def SET_DEFAULT(collector, field, sub_objs, using):\n-    collector.add_field_update(field, field.get_default(), sub_objs)\n+    collector.add_field_update(field, field.get_default(), sub_objs, using)\n \n \n def DO_NOTHING(collector, field, sub_objs, using):\n@@ -230,9 +230,9 @@ class Collector:\n \n     def related_objects(self, related, objs):\n         \"\"\"\n-        Get a QuerySet of objects related to `objs` via the relation `related`.\n+         Get a QuerySet of objects related to `objs` via the relation `related`.\n         \"\"\"\n-        return related.related_model._base_manager.using(self.using).filter(\n+        return related.related_model._default_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n         )\n \n"
}