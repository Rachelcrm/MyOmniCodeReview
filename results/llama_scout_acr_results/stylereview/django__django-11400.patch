{
  "patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..32b06fdcf6 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -21,7 +21,7 @@ class ListFilter:\n     title = None  # Human-readable title to appear in the right sidebar.\n     template = 'admin/filter.html'\n \n-    def __init__(self, request, params, model, model_admin):\n+    def __init__(self):\n         # This dictionary will eventually contain the request's query string\n         # parameters actually used by this filter.\n         self.used_parameters = {}\n@@ -138,7 +138,7 @@ class FieldListFilter(ListFilter):\n         except (ValueError, ValidationError) as e:\n             # Fields may raise a ValueError or ValidationError when converting\n             # the parameters to the correct type.\n-            raise IncorrectLookupParameters(e)\n+            raise IncorrectLookupParameters from e\n \n     @classmethod\n     def register(cls, test, list_filter_class, take_priority=False):\n@@ -376,7 +376,7 @@ class AllValuesFieldListFilter(FieldListFilter):\n         self.lookup_val = params.get(self.lookup_kwarg)\n         self.lookup_val_isnull = params.get(self.lookup_kwarg_isnull)\n         self.empty_value_display = model_admin.get_empty_value_display()\n-        parent_model, reverse_path = reverse_field_path(model, field_path)\n+        parent_model = get_model_from_relation(field).model\n         # Obey parent ModelAdmin queryset when deciding which options to show\n         if model == parent_model:\n             queryset = model_admin.get_queryset(request)\ndiff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 194514c900..207c2b3a54 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -389,7 +389,7 @@ class Field(RegisterLookupMixin):\n         from django.db.models.expressions import Col\n         return Col(self.model._meta.db_table, self)\n \n-    def select_format(self, compiler, sql, params):\n+    def select_format(self, sql, params):\n         \"\"\"\n         Custom format for select clauses. For example, GIS columns need to be\n         selected as AsText(table.col) on MySQL as the table.col data can't be\n"
}