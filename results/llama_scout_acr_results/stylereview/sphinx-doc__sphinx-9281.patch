{
  "patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex a415a7074..0f3935be7 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -38,9 +38,7 @@ else:\n     MethodDescriptorType = type(str.join)\n     WrapperDescriptorType = type(dict.__dict__['fromkeys'])\n \n-if False:\n-    # For type annotation\n-    from typing import Type  # NOQA\n+# Removed unnecessary import statement\n \n logger = logging.getLogger(__name__)\n \n@@ -412,21 +410,17 @@ def safe_getattr(obj: Any, name: str, *defargs: Any) -> Any:\n     \"\"\"A getattr() that turns all exceptions into AttributeErrors.\"\"\"\n     try:\n         return getattr(obj, name, *defargs)\n+    except AttributeError as exc:\n+        if defargs:\n+            return defargs[0]\n+        raise AttributeError(name) from exc\n     except Exception as exc:\n-        # sometimes accessing a property raises an exception (e.g.\n-        # NotImplementedError), so let's try to read the attribute directly\n         try:\n-            # In case the object does weird things with attribute access\n-            # such that accessing `obj.__dict__` may raise an exception\n             return obj.__dict__[name]\n         except Exception:\n             pass\n-\n-        # this is a catch-all for all the weird things that some modules do\n-        # with attribute access\n         if defargs:\n             return defargs[0]\n-\n         raise AttributeError(name) from exc\n \n \n"
}