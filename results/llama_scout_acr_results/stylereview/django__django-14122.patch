{
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 850734709d..5390ff9c60 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -157,7 +157,7 @@ class SQLCompiler:\n             for expr in expressions:\n                 # Is this a reference to query's base table primary key? If the\n                 # expression isn't a Col-like, then skip the expression.\n-                if (getattr(expr, 'target', None) == self.query.model._meta.pk and\n+                if (getattr(expr, 'target', None) == self.query.model._meta.get_field('pk') and\n                         getattr(expr, 'alias', None) == self.query.base_table):\n                     pk = expr\n                     break\n@@ -439,7 +439,7 @@ class SQLCompiler:\n             sql, params = node.as_sql(self, self.connection)\n         return sql, params\n \n-    def get_combinator_sql(self, combinator, all):\n+    def get_combinator_sql(self, combinator, all_):\n         features = self.connection.features\n         compilers = [\n             query.get_compiler(self.using, self.connection)\n@@ -484,7 +484,7 @@ class SQLCompiler:\n         if not parts:\n             raise EmptyResultSet\n         combinator_sql = self.connection.ops.set_operators[combinator]\n-        if all and combinator == 'union':\n+        if all_ and combinator == 'union':\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n@@ -991,9 +991,8 @@ class SQLCompiler:\n         the query.\n         \"\"\"\n         def _get_parent_klass_info(klass_info):\n-            concrete_model = klass_info['model']._meta.concrete_model\n-            for parent_model, parent_link in concrete_model._meta.parents.items():\n-                parent_list = parent_model._meta.get_parent_list()\n+            concrete_model = klass_info['model']._meta.get_concrete_model()\n+            for parent_model, parent_link in concrete_model._meta.get_parent_list():\n                 yield {\n                     'model': parent_model,\n                     'field': parent_link,\n@@ -1004,7 +1003,7 @@ class SQLCompiler:\n                         # Selected columns from a model or its parents.\n                         if (\n                             self.select[select_index][0].target.model == parent_model or\n-                            self.select[select_index][0].target.model in parent_list\n+                            parent_model in [p[0] for p in concrete_model._meta.get_parent_list()]\n                         )\n                     ],\n                 }\n"
}