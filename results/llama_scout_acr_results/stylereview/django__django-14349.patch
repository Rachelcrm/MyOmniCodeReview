{
  "patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex a385819510..e5d21cc18a 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -114,12 +114,12 @@ class URLValidator(RegexValidator):\n             if value:\n                 try:\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:  # for example, \"Invalid IPv6 URL\"\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+                except ValueError as exc:  # for example, \"Invalid IPv6 URL\"\n+                    raise ValidationError(self.message, code=self.code, params={'value': value}) from exc\n                 try:\n                     netloc = punycode(netloc)  # IDN -> ACE\n-                except UnicodeError:  # invalid domain part\n-                    raise e\n+                except UnicodeError as exc:  # invalid domain part\n+                    raise ValidationError(self.message, code=self.code, params={'value': value}) from exc\n                 url = urlunsplit((scheme, netloc, path, query, fragment))\n                 super().__call__(url)\n             else:\n@@ -131,8 +131,8 @@ class URLValidator(RegexValidator):\n                 potential_ip = host_match[1]\n                 try:\n                     validate_ipv6_address(potential_ip)\n-                except ValidationError:\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+                except ValidationError as exc:\n+                    raise ValidationError(self.message, code=self.code, params={'value': value}) from exc\n \n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n@@ -271,8 +271,8 @@ validate_unicode_slug = RegexValidator(\n def validate_ipv4_address(value):\n     try:\n         ipaddress.IPv4Address(value)\n-    except ValueError:\n-        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid', params={'value': value})\n+    except ValueError as exc:\n+        raise ValidationError(_('Enter a valid IPv4 address.'), code='invalid', params={'value': value}) from exc\n \n \n def validate_ipv6_address(value):\n@@ -283,11 +283,11 @@ def validate_ipv6_address(value):\n def validate_ipv46_address(value):\n     try:\n         validate_ipv4_address(value)\n-    except ValidationError:\n+    except ValidationError as exc:\n         try:\n             validate_ipv6_address(value)\n-        except ValidationError:\n-            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid', params={'value': value})\n+        except ValidationError as exc:\n+            raise ValidationError(_('Enter a valid IPv4 or IPv6 address.'), code='invalid', params={'value': value}) from exc\n \n \n ip_address_validator_map = {\n"
}