{
  "patch": "diff --git a/astropy/table/table.py b/astropy/table/table.py\nindex 5afe2127a3..ccc3f92112 100644\n--- a/astropy/table/table.py\n+++ b/astropy/table/table.py\n@@ -160,7 +160,7 @@ class TableReplaceWarning(UserWarning):\n     This does not inherit from AstropyWarning because we want to use\n     stacklevel=3 to show the user where the issue occurred in their code.\n     \"\"\"\n-    pass\n+    # No implementation needed\n \n \n def descr(col):\n@@ -219,7 +219,9 @@ class TableColumns(OrderedDict):\n         Column objects as data structure that can init dict (see above)\n     \"\"\"\n \n-    def __init__(self, cols={}):\n+    def __init__(self, cols=None):\n+        if cols is None:\n+            cols = {}\n         if isinstance(cols, (list, tuple)):\n             # `cols` should be a list of two-tuples, but it is allowed to have\n             # columns (BaseColumn or mixins) in the list.\n@@ -286,8 +288,8 @@ class TableColumns(OrderedDict):\n         # Rename column names in pprint include/exclude attributes as needed\n         parent_table = self[name].info.parent_table\n         if parent_table is not None:\n-            parent_table.pprint_exclude_names._rename(name, new_name)\n-            parent_table.pprint_include_names._rename(name, new_name)\n+            parent_table.pprint_exclude_names.set([new_name])\n+            parent_table.pprint_include_names.set([new_name])\n \n         mapper = {name: new_name}\n         new_names = [mapper.get(name, name) for name in self]\n@@ -523,7 +525,7 @@ class PprintIncludeExclude(TableAttribute):\n             def __enter__(self):\n                 pass\n \n-            def __exit__(self, type, value, tb):\n+            def __exit__(self, exc_type, exc_value, exc_tb):\n                 descriptor_self = self.descriptor_self\n                 instance = descriptor_self._instance_ref()\n                 descriptor_self.__set__(instance, self.names_orig)\n"
}