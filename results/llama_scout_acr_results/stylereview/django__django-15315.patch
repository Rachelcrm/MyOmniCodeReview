{
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 88c9ca9f28..2c85ddffd0 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -142,22 +142,28 @@ class Field(RegisterLookupMixin):\n         self.primary_key = primary_key\n         self.max_length, self._unique = max_length, unique\n         self.blank, self.null = blank, null\n-        self.remote_field = rel\n-        self.is_relation = self.remote_field is not None\n         self.default = default\n         self.editable = editable\n         self.serialize = serialize\n         self.unique_for_date = unique_for_date\n         self.unique_for_month = unique_for_month\n         self.unique_for_year = unique_for_year\n-        if isinstance(choices, collections.abc.Iterator):\n-            choices = list(choices)\n+        self.remote_field = rel\n+        self.is_relation = self.remote_field is not None\n         self.choices = choices\n         self.help_text = help_text\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n         self.auto_created = auto_created\n+        self.validators = list(validators)  # Store for deconstruction later\n+\n+        messages = {}\n+        for c in reversed(self.__class__.__mro__):\n+            messages.update(getattr(c, 'default_error_messages', {}))\n+        messages.update(error_messages or {})\n+        self._error_messages = error_messages  # Store for deconstruction later\n+        self.error_messages = messages\n \n         # Adjust the appropriate creation counter, and save our local copy.\n         if auto_created:\n@@ -167,15 +173,6 @@ class Field(RegisterLookupMixin):\n             self.creation_counter = Field.creation_counter\n             Field.creation_counter += 1\n \n-        self._validators = list(validators)  # Store for deconstruction later\n-\n-        messages = {}\n-        for c in reversed(self.__class__.__mro__):\n-            messages.update(getattr(c, 'default_error_messages', {}))\n-        messages.update(error_messages or {})\n-        self._error_messages = error_messages  # Store for deconstruction later\n-        self.error_messages = messages\n-\n     def __str__(self):\n         \"\"\"\n         Return \"app_label.model_label.field_name\" for fields attached to\n"
}