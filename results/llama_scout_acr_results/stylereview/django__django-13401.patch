{
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 28374272f4..60955539ed 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -133,7 +133,7 @@ class Field(RegisterLookupMixin):\n                  db_index=False, rel=None, default=NOT_PROVIDED, editable=True,\n                  serialize=True, unique_for_date=None, unique_for_month=None,\n                  unique_for_year=None, choices=None, help_text='', db_column=None,\n-                 db_tablespace=None, auto_created=False, validators=(),\n+                 db_tablespace=None, auto_created=False, validator_list=(),\n                  error_messages=None):\n         self.name = name\n         self.verbose_name = verbose_name  # May be set by set_attributes_from_name\n@@ -166,7 +166,7 @@ class Field(RegisterLookupMixin):\n             self.creation_counter = Field.creation_counter\n             Field.creation_counter += 1\n \n-        self._validators = list(validators)  # Store for deconstruction later\n+        self._validators = list(validator_list)  # Store for deconstruction later\n \n         messages = {}\n         for c in reversed(self.__class__.__mro__):\n@@ -342,7 +342,8 @@ class Field(RegisterLookupMixin):\n         errors = []\n         for alias in databases:\n             if router.allow_migrate(alias, app_label, model_name=self.model._meta.model_name):\n-                errors.extend(connections[alias].validation.check_field(self, **kwargs))\n+                check_method = connections[alias].validation.check_field\n+                errors.extend(check_method(self, **kwargs))\n         return errors\n \n     def _check_validators(self):\n"
}