{
  "patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..fed6f61fd 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -52,9 +52,9 @@ def pytest_configure(config: Config) -> None:\n         import pytest\n \n         old = pytest.xfail\n-        config._cleanup.append(lambda: setattr(pytest, \"xfail\", old))\n+        config.add_cleanup(lambda: setattr(pytest, \"xfail\", old))\n \n-        def nop(*args, **kwargs):\n+        def nop():\n             pass\n \n         nop.Exception = xfail.Exception  # type: ignore[attr-defined] # noqa: F821\n@@ -115,7 +115,8 @@ def evaluate_condition(item: Item, mark: Mark, condition: object) -> Tuple[bool,\n                 \"SyntaxError: invalid syntax\",\n             ]\n             fail(\"\\n\".join(msglines), pytrace=False)\n-        except Exception as exc:\n+        except SyntaxError as exc:\n+        # For other exceptions, consider logging or handling them specifically\n             msglines = [\n                 \"Error evaluating %r condition\" % mark.name,\n                 \"    \" + condition,\n@@ -231,6 +232,8 @@ unexpectedsuccess_key = StoreKey[str]()\n \n @hookimpl(tryfirst=True)\n def pytest_runtest_setup(item: Item) -> None:\n+    item._store.set(skipped_by_mark_key, False)\n+    # or directly\n     item._store[skipped_by_mark_key] = False\n \n     skipped = evaluate_skip_marks(item)\n"
}