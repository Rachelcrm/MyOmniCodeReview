{
  "patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex d5aa968400..514024ebb0 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -115,12 +115,12 @@ class ForwardManyToOneDescriptor:\n         return self.field.is_cached(instance)\n \n     def get_queryset(self, **hints):\n-        return self.field.remote_field.model._base_manager.db_manager(hints=hints).all()\n+        return self.field.remote_field.model.get_queryset(hints=hints)\n \n     def get_prefetch_queryset(self, instances, queryset=None):\n         if queryset is None:\n             queryset = self.get_queryset()\n-        queryset._add_hints(instance=instances[0])\n+        queryset = queryset.add_hints(instance=instances[0])\n \n         rel_obj_attr = self.field.get_foreign_related_value\n         instance_attr = self.field.get_local_related_value\n@@ -360,7 +360,7 @@ class ReverseOneToOneDescriptor:\n         return self.related.is_cached(instance)\n \n     def get_queryset(self, **hints):\n-        return self.related.related_model._base_manager.db_manager(hints=hints).all()\n+        return self.related.related_model.get_queryset(hints=hints)\n \n     def get_prefetch_queryset(self, instances, queryset=None):\n         if queryset is None:\n@@ -589,10 +589,10 @@ def create_reverse_many_to_one_manager(superclass, rel):\n             \"\"\"\n             db = self._db or router.db_for_read(self.model, instance=self.instance)\n             empty_strings_as_null = connections[db].features.interprets_empty_strings_as_nulls\n-            queryset._add_hints(instance=self.instance)\n+            queryset = queryset.add_hints(instance=self.instance)\n             if self._db:\n                 queryset = queryset.using(self._db)\n-            queryset._defer_next_filter = True\n+            queryset = queryset.defer_next_filter(True)\n             queryset = queryset.filter(**self.core_filters)\n             for field in self.field.foreign_related_fields:\n                 val = getattr(self.instance, field.attname)\n@@ -614,18 +614,18 @@ def create_reverse_many_to_one_manager(superclass, rel):\n                     ])\n                 else:\n                     rel_obj_id = getattr(self.instance, target_field.attname)\n-                queryset._known_related_objects = {self.field: {rel_obj_id: self.instance}}\n+                queryset.known_related_objects = {self.field: {rel_obj_id: self.instance}}\n             return queryset\n \n         def _remove_prefetched_objects(self):\n             try:\n-                self.instance._prefetched_objects_cache.pop(self.field.remote_field.get_cache_name())\n+                self.instance.prefetched_objects_cache.pop(self.field.remote_field.get_cache_name())\n             except (AttributeError, KeyError):\n                 pass  # nothing to clear from cache\n \n         def get_queryset(self):\n             try:\n-                return self.instance._prefetched_objects_cache[self.field.remote_field.get_cache_name()]\n+                return self.instance.prefetched_objects_cache[self.field.remote_field.get_cache_name()]\n             except (AttributeError, KeyError):\n                 queryset = super().get_queryset()\n                 return self._apply_rel_filters(queryset)\n"
}