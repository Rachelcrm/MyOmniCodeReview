{
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..21d293b8c6 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -146,7 +146,7 @@ class SQLCompiler:\n             for expr in expressions:\n                 # Is this a reference to query's base table primary key? If the\n                 # expression isn't a Col-like, then skip the expression.\n-                if (getattr(expr, 'target', None) == self.query.model._meta.pk and\n+                if (getattr(expr, 'target', None) == self.query.get_meta().get_fields(include_primary_keys=True)[0] and\n                         getattr(expr, 'alias', None) == self.query.base_table):\n                     pk = expr\n                     break\n@@ -173,7 +173,7 @@ class SQLCompiler:\n             # database views on which the optimization might not be allowed.\n             pks = {\n                 expr for expr in expressions\n-                if hasattr(expr, 'target') and expr.target.primary_key and expr.target.model._meta.managed\n+                if hasattr(expr, 'target') and expr.target.primary_key and expr.target.model.get_meta().managed\n             }\n             aliases = {expr.alias for expr in pks}\n             expressions = [\n@@ -294,12 +294,10 @@ class SQLCompiler:\n                 continue\n \n             col, order = get_order_dir(field, asc)\n-            descending = order == 'DESC'\n-\n             if col in self.query.annotation_select:\n                 # Reference to expression in SELECT clause\n                 order_by.append((\n-                    OrderBy(Ref(col, self.query.annotation_select[col]), descending=descending),\n+                    OrderBy(Ref(col, self.query.annotation_select[col]), descending=order == 'DESC'),\n                     True))\n                 continue\n             if col in self.query.annotations:\n@@ -309,7 +307,7 @@ class SQLCompiler:\n                 if isinstance(expr, Value):\n                     # output_field must be resolved for constants.\n                     expr = Cast(expr, expr.output_field)\n-                order_by.append((OrderBy(expr, descending=descending), False))\n+                order_by.append((OrderBy(expr, descending=order == 'DESC'), False))\n                 continue\n \n             if '.' in field:\n@@ -407,7 +405,7 @@ class SQLCompiler:\n             return node.output_field.select_format(self, sql, params)\n         return sql, params\n \n-    def get_combinator_sql(self, combinator, all):\n+    def get_combinator_sql(self, combinator, all_):\n         features = self.connection.features\n         compilers = [\n             query.get_compiler(self.using, self.connection)\n"
}