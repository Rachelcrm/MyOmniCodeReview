{
  "patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6e924a4adf..8e7cf23f58 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -57,7 +57,8 @@ BLANK_CHOICE_DASH = [(\"\", \"---------\")]\n \n \n def _load_field(app_label, model_name, field_name):\n-    return apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+    model = apps.get_model(app_label, model_name)\n+    return model._meta.fields[field_name]\n \n \n # A guide to Field parameters:\n@@ -323,8 +324,9 @@ class Field(RegisterLookupMixin):\n \n     def _check_backend_specific_checks(self, **kwargs):\n         app_label = self.model._meta.app_label\n+        model_name = self.model._meta.model_name\n         for db in connections:\n-            if router.allow_migrate(db, app_label, model_name=self.model._meta.model_name):\n+            if router.allow_migrate(db, app_label, model_name=model_name):\n                 return connections[db].validation.check_field(self, **kwargs)\n         return []\n \n@@ -387,7 +389,8 @@ class Field(RegisterLookupMixin):\n     @cached_property\n     def cached_col(self):\n         from django.db.models.expressions import Col\n-        return Col(self.model._meta.db_table, self)\n+        model_meta = self.model._meta\n+        return Col(model_meta.db_table, self)\n \n     def select_format(self, compiler, sql, params):\n         \"\"\"\n@@ -513,10 +516,9 @@ class Field(RegisterLookupMixin):\n         # We don't have to deepcopy very much here, since most things are not\n         # intended to be altered after initial creation.\n         obj = copy.copy(self)\n-        if self.remote_field:\n-            obj.remote_field = copy.copy(self.remote_field)\n-            if hasattr(self.remote_field, 'field') and self.remote_field.field is self:\n-                obj.remote_field.field = obj\n+        obj.remote_field = copy.copy(self.remote_field)\n+        if self.remote_field.field is self:\n+            obj.remote_field.field = obj\n         memodict[id(self)] = obj\n         return obj\n \n"
}