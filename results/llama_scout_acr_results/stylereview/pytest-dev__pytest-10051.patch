{
  "patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..8c9e9c557 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -109,7 +109,7 @@ class ColoredLevelFormatter(logging.Formatter):\n \n     def format(self, record: logging.LogRecord) -> str:\n         fmt = self._level_to_fmt_mapping.get(record.levelno, self._original_fmt)\n-        self._style._fmt = fmt\n+        self._style.set_format(fmt)\n         return super().format(record)\n \n \n@@ -321,7 +321,7 @@ class catching_logs:\n             root_logger.setLevel(min(self.orig_level, self.level))\n         return self.handler\n \n-    def __exit__(self, type, value, traceback):\n+    def __exit__(self, exc_type, value, traceback):\n         root_logger = logging.getLogger()\n         if self.level is not None:\n             root_logger.setLevel(self.orig_level)\n@@ -773,13 +773,17 @@ class _LiveLoggingStreamHandler(logging_StreamHandler):\n     ) -> None:\n         super().__init__(stream=terminal_reporter)  # type: ignore[arg-type]\n         self.capture_manager = capture_manager\n+        self._first_record_emitted = False\n+        self._section_name_shown = False\n+        self._test_outcome_written = False\n         self.reset()\n         self.set_when(None)\n-        self._test_outcome_written = False\n \n     def reset(self) -> None:\n         \"\"\"Reset the handler; should be called before the start of each test.\"\"\"\n         self._first_record_emitted = False\n+        self._section_name_shown = False\n+        self._test_outcome_written = False\n \n     def set_when(self, when: Optional[str]) -> None:\n         \"\"\"Prepare for the given test phase (setup/call/teardown).\"\"\"\n"
}