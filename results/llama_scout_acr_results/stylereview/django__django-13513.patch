{
  "patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7a89f7bd15..dfc2277a1d 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -130,14 +130,12 @@ class SafeExceptionReporterFilter:\n             return {}\n         return {k: self.cleanse_setting(k, v) for k, v in request.META.items()}\n \n-    def is_active(self, request):\n+    def is_active(self):\n         \"\"\"\n         This filter is to add safety in production environments (i.e. DEBUG\n         is False). If DEBUG is True then your site is not safe anyway.\n-        This hook is provided as a convenience to easily activate or\n-        deactivate the filter on a per request basis.\n         \"\"\"\n-        return settings.DEBUG is False\n+        return not settings.DEBUG\n \n     def get_cleansed_multivaluedict(self, request, multivaluedict):\n         \"\"\"\n@@ -184,7 +182,7 @@ class SafeExceptionReporterFilter:\n             # might raise an exception. isinstance checks that lazy\n             # MultiValueDicts will have a return value.\n             is_multivalue_dict = isinstance(value, MultiValueDict)\n-        except Exception as e:\n+        except TypeError as e:\n             return '{!r} while evaluating {!r}'.format(e, value)\n \n         if is_multivalue_dict:\n@@ -531,12 +529,12 @@ def technical_404_response(request, exception):\n     return HttpResponseNotFound(t.render(c), content_type='text/html')\n \n \n-def default_urlconf(request):\n+def default_urlconf():\n     \"\"\"Create an empty URLconf 404 error response.\"\"\"\n     with Path(CURRENT_DIR, 'templates', 'default_urlconf.html').open(encoding='utf-8') as fh:\n         t = DEBUG_ENGINE.from_string(fh.read())\n     c = Context({\n         'version': get_docs_version(),\n     })\n-\n+ \n     return HttpResponse(t.render(c), content_type='text/html')\n"
}