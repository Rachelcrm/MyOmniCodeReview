{
  "patch": "diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py\nindex 04c73411a..50654d3c8 100644\n--- a/src/_pytest/mark/expression.py\n+++ b/src/_pytest/mark/expression.py\n@@ -74,23 +74,23 @@ class ParseError(Exception):\n class Scanner:\n     __slots__ = (\"tokens\", \"current\")\n \n-    def __init__(self, input: str) -> None:\n-        self.tokens = self.lex(input)\n+    def __init__(self, source_string: str) -> None:\n+        self.tokens = self.lex(source_string)\n         self.current = next(self.tokens)\n \n-    def lex(self, input: str) -> Iterator[Token]:\n+    def lex(self, source_string: str) -> Iterator[Token]:\n         pos = 0\n-        while pos < len(input):\n-            if input[pos] in (\" \", \"\\t\"):\n+        while pos < len(source_string):\n+            if source_string[pos] in (\" \", \"\\t\"):\n                 pos += 1\n-            elif input[pos] == \"(\":\n+            elif source_string[pos] == \"(\":\n                 yield Token(TokenType.LPAREN, \"(\", pos)\n                 pos += 1\n-            elif input[pos] == \")\":\n+            elif source_string[pos] == \")\":\n                 yield Token(TokenType.RPAREN, \")\", pos)\n                 pos += 1\n             else:\n-                match = re.match(r\"(:?\\w|:|\\+|-|\\.|\\[|\\])+\", input[pos:])\n+                match = re.match(r\"(:?\\w|:|\\+|-|\\.|\\[|\\])+\", source_string[pos:])\n                 if match:\n                     value = match.group(0)\n                     if value == \"or\":\n@@ -104,7 +104,7 @@ class Scanner:\n                     pos += len(value)\n                 else:\n                     raise ParseError(\n-                        pos + 1, 'unexpected character \"{}\"'.format(input[pos]),\n+                        pos + 1, 'unexpected character \"{}\"'.format(source_string[pos]),\n                     )\n         yield Token(TokenType.EOF, \"\", pos)\n \n"
}