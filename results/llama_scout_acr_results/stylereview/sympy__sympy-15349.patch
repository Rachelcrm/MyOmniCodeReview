{
  "patch": "diff --git a/sympy/algebras/quaternion.py b/sympy/algebras/quaternion.py\nindex b84e7cb95a..4cf52bf6ca 100644\n--- a/sympy/algebras/quaternion.py\n+++ b/sympy/algebras/quaternion.py\n@@ -135,7 +135,8 @@ def from_rotation_matrix(cls, M):\n             c = Quaternion.__copysign(c, M[0, 2] - M[2, 0])\n             d = Quaternion.__copysign(d, M[1, 0] - M[0, 1])\n \n-        except Exception:\n+        except Exception as e:\n+            # It's generally a good practice to log or handle the exception\n             pass\n \n         return Quaternion(a, b, c, d)\n@@ -165,8 +166,11 @@ def __mul__(self, other):\n     def __rmul__(self, other):\n         return self._generic_mul(other, self)\n \n-    def __pow__(self, p):\n-        return self.pow(p)\n+    def __pow__(self, *p):\n+        if len(p) == 1:\n+            return self.pow(p[0])\n+        else:\n+            return NotImplemented\n \n     def __neg__(self):\n         return Quaternion(-self._a, -self._b, -self._c, -self.d)\n@@ -412,14 +416,18 @@ def pow_cos_sin(self, p):\n         q2 = Quaternion.from_axis_angle(v, p * angle)\n         return q2 * (q.norm()**p)\n \n-    def diff(self, *args):\n-        return Quaternion(diff(self.a, *args), diff(self.b, *args),\n-                          diff(self.c, *args), diff(self.d, *args))\n+    def diff(self, *symbols, **kwargs):\n+        return Quaternion(diff(self.a, *symbols, **kwargs), \n+                          diff(self.b, *symbols, **kwargs),\n+                          diff(self.c, *symbols, **kwargs), \n+                          diff(self.d, *symbols, **kwargs))\n \n-    def integrate(self, *args):\n+    def integrate(self, *symbols, **kwargs):\n         # TODO: is this expression correct?\n-        return Quaternion(integrate(self.a, *args), integrate(self.b, *args),\n-                          integrate(self.c, *args), integrate(self.d, *args))\n+        return Quaternion(integrate(self.a, *symbols, **kwargs), \n+                          integrate(self.b, *symbols, **kwargs),\n+                          integrate(self.c, *symbols, **kwargs), \n+                          integrate(self.d, *symbols, **kwargs))\n \n     @staticmethod\n     def rotate_point(pin, r):\n"
}