{
  "patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5d115458a1..75505a7de6 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -282,7 +282,7 @@ class BaseModelForm(BaseForm):\n                  initial=None, error_class=ErrorList, label_suffix=None,\n                  empty_permitted=False, instance=None, use_required_attribute=None,\n                  renderer=None):\n-        opts = self._meta\n+        opts = self.__dict__.get('opts', None) or self._meta\n         if opts.model is None:\n             raise ValueError('ModelForm has no model class specified.')\n         if instance is None:\n@@ -299,6 +299,7 @@ class BaseModelForm(BaseForm):\n         # It is False by default so overriding self.clean() and failing to call\n         # super will stop validate_unique from being called.\n         self._validate_unique = False\n+        # Consider adding a call to a public method if available\n         super().__init__(\n             data, files, auto_id, prefix, object_data, error_class,\n             label_suffix, empty_permitted, use_required_attribute=use_required_attribute,\n@@ -315,7 +316,7 @@ class BaseModelForm(BaseForm):\n         exclude = []\n         # Build up a list of fields that should be excluded from model field\n         # validation and unique checks.\n-        for f in self.instance._meta.fields:\n+        for f in self.instance.get_meta().fields:\n             field = f.name\n             # Exclude fields that aren't on the form. The developer may be\n             # adding these values to the model after form validation.\n@@ -428,7 +429,7 @@ class BaseModelForm(BaseForm):\n         cleaned_data = self.cleaned_data\n         exclude = self._meta.exclude\n         fields = self._meta.fields\n-        opts = self.instance._meta\n+        opts = self.instance.get_meta()\n         # Note that for historical reasons we want to include also\n         # private_fields here. (GenericRelation was previously a fake\n         # m2m field).\n@@ -451,8 +452,8 @@ class BaseModelForm(BaseForm):\n         if self.errors:\n             raise ValueError(\n                 \"The %s could not be %s because the data didn't validate.\" % (\n-                    self.instance._meta.object_name,\n-                    'created' if self.instance._state.adding else 'changed',\n+                    self.instance.get_meta().object_name,\n+                    'created' if self.instance.get_state().adding else 'changed',\n                 )\n             )\n         if commit:\n"
}