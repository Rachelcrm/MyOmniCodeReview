{
  "patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 5089737034..3773e901c9 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -75,10 +75,10 @@ class Lookup:\n             return self.lhs.output_field.get_prep_value(self.rhs)\n         return self.rhs\n \n-    def get_db_prep_lookup(self, value, connection):\n+    def get_db_prep_lookup(self, value):\n         return ('%s', [value])\n \n-    def process_lhs(self, compiler, connection, lhs=None):\n+    def process_lhs(self, compiler, lhs=None):\n         lhs = lhs or self.lhs\n         if hasattr(lhs, 'resolve_expression'):\n             lhs = lhs.resolve_expression(compiler.query)\n@@ -114,7 +114,7 @@ class Lookup:\n             new.rhs = new.rhs.relabeled_clone(relabels)\n         return new\n \n-    def get_group_by_cols(self, alias=None):\n+    def get_group_by_cols(self):\n         cols = self.lhs.get_group_by_cols()\n         if hasattr(self.rhs, 'get_group_by_cols'):\n             cols.extend(self.rhs.get_group_by_cols())\n@@ -169,6 +169,12 @@ class Transform(RegisterLookupMixin, Func):\n     bilateral = False\n     arity = 1\n \n+    def __rand__(self, other):\n+        return NotImplemented\n+\n+    def __ror__(self, other):\n+        return NotImplemented\n+\n     @property\n     def lhs(self):\n         return self.get_source_expressions()[0]\n@@ -357,9 +363,10 @@ class IntegerFieldFloatRounding:\n     decimal portion of the float would always be discarded.\n     \"\"\"\n     def get_prep_lookup(self):\n-        if isinstance(self.rhs, float):\n-            self.rhs = math.ceil(self.rhs)\n-        return super().get_prep_lookup()\n+        rhs = self.rhs\n+        if isinstance(rhs, float):\n+            rhs = math.ceil(rhs)\n+        return super().get_prep_lookup(rhs)\n \n \n @IntegerField.register_lookup\n"
}