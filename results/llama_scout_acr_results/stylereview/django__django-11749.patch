{
  "patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 5f2e64761e..640929a12d 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -122,7 +122,7 @@ def call_command(command_name, *args, **options):\n \n     def get_actions(parser):\n         # Parser actions and actions from sub-parser choices.\n-        for opt in parser._actions:\n+        for opt in parser.get_actions():\n             if isinstance(opt, _SubParsersAction):\n                 for sub_opt in opt.choices.values():\n                     yield from get_actions(sub_opt)\n@@ -347,11 +347,13 @@ class ManagementUtility:\n             if subcommand == 'runserver' and '--noreload' not in self.argv:\n                 try:\n                     autoreload.check_errors(django.setup)()\n-                except Exception:\n+                except SystemExit as exc:\n                     # The exception will be raised later in the child process\n                     # started by the autoreloader. Pretend it didn't happen by\n                     # loading an empty list of applications.\n                     apps.all_models = defaultdict(dict)\n+                    if exc.code is not None:\n+                        sys.exit(exc.code)\n                     apps.app_configs = {}\n                     apps.apps_ready = apps.models_ready = apps.ready = True\n \ndiff --git a/django/core/management/color.py b/django/core/management/color.py\nindex 572329bb0c..856c660026 100644\n--- a/django/core/management/color.py\n+++ b/django/core/management/color.py\n@@ -23,7 +23,7 @@ def supports_color():\n \n \n class Style:\n-    pass\n+    NOTICE = \"notice\"\n \n \n def make_style(config_string=''):\n"
}