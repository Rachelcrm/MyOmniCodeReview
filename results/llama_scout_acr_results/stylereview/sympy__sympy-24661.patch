{
  "patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 52711d1324..5ca8d859a4 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -43,7 +43,7 @@ def _token_splittable(token_name: str) -> bool:\n         return len(token_name) > 1\n \n \n-def _token_callable(token: TOKEN, local_dict: DICT, global_dict: DICT, nextToken=None):\n+def _token_callable(token: TOKEN, local_dict: DICT = None, global_dict: DICT = None, nextToken=None):\n     \"\"\"\n     Predicate for whether a token name represents a callable function.\n \n@@ -86,7 +86,7 @@ def _add_factorial_tokens(name: str, result: List[TOKEN]) -> List[TOKEN]:\n \n class ParenthesisGroup(List[TOKEN]):\n     \"\"\"List of tokens representing an expression in parentheses.\"\"\"\n-    pass\n+\n \n \n class AppliedFunction:\n@@ -582,7 +582,7 @@ def auto_symbol(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):\n     return result\n \n \n-def lambda_notation(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):\n+def lambda_notation(tokens: List[TOKEN], local_dict: DICT = None, global_dict: DICT = None):\n     \"\"\"Substitutes \"lambda\" with its SymPy equivalent Lambda().\n     However, the conversion does not take place if only \"lambda\"\n     is passed because that is a syntax error.\n@@ -646,7 +646,7 @@ def factorial_notation(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT)\n     return result\n \n \n-def convert_xor(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):\n+def convert_xor(tokens: List[TOKEN], local_dict: DICT = None, global_dict: DICT = None):\n     \"\"\"Treats XOR, ``^``, as exponentiation, ``**``.\"\"\"\n     result: List[TOKEN] = []\n     for toknum, tokval in tokens:\n@@ -805,7 +805,7 @@ def rationalize(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):\n     return result\n \n \n-def _transform_equals_sign(tokens: List[TOKEN], local_dict: DICT, global_dict: DICT):\n+def _transform_equals_sign(tokens: List[TOKEN], local_dict: DICT = None, global_dict: DICT = None):\n     \"\"\"Transforms the equals sign ``=`` to instances of Eq.\n \n     This is a helper function for ``convert_equals_signs``.\n@@ -879,7 +879,7 @@ def convert_equals_signs(tokens: List[TOKEN], local_dict: DICT,\n \n \n def stringify_expr(s: str, local_dict: DICT, global_dict: DICT,\n-        transformations: tTuple[TRANS, ...]) -> str:\n+        transformations_list: tTuple[TRANS, ...]) -> str:\n     \"\"\"\n     Converts the string ``s`` to Python code, in ``local_dict``\n \n"
}