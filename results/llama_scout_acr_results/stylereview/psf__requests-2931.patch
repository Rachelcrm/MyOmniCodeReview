{
  "patch": "diff --git a/requests/models.py b/requests/models.py\nindex 9c624d3c..2799da35 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -310,9 +310,10 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         p.method = self.method\n         p.url = self.url\n         p.headers = self.headers.copy() if self.headers is not None else None\n-        p._cookies = _copy_cookie_jar(self._cookies)\n         p.body = self.body\n         p.hooks = self.hooks\n+        if self._cookies:\n+            p._cookies = _copy_cookie_jar(self._cookies)\n         return p\n \n     def prepare_method(self, method):\n@@ -331,7 +332,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         if isinstance(url, bytes):\n             url = url.decode('utf8')\n         else:\n-            url = unicode(url) if is_py2 else str(url)\n+            url = to_native_string(url, 'utf8')\n \n         # Don't do any URL preparation for non-HTTP schemes like `mailto`,\n         # `data` etc to work around exceptions from `url_parse`, which\n@@ -791,6 +792,22 @@ class Response(object):\n             # decoding fails, fall back to `self.text` (using chardet to make\n             # a best guess).\n             encoding = guess_json_utf(self.content)\n+            if encoding is not None:\n+                try:\n+                    return complexjson.loads(\n+                        self.content.decode(encoding)\n+                    )\n+                except UnicodeDecodeError:\n+                    # Wrong UTF codec detected; usually because it's not UTF-8\n+                    # but some other 8-bit codec.  This is an RFC violation,\n+                    # and the server didn't bother to tell us what codec *was*\n+                    # used.\n+                    pass\n+            # No encoding set. JSON RFC 4627 section 3 states we should expect\n+            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n+            # decoding fails, fall back to `self.text` (using chardet to make\n+            # a best guess).\n+            encoding = guess_json_utf(self.content)\n             if encoding is not None:\n                 try:\n                     return complexjson.loads(\ndiff --git a/requests/status_codes.py b/requests/status_codes.py\nindex a852574a..c0f6ef2f 100644\n--- a/requests/status_codes.py\n+++ b/requests/status_codes.py\n@@ -30,8 +30,7 @@ _codes = {\n     305: ('use_proxy',),\n     306: ('switch_proxy',),\n     307: ('temporary_redirect', 'temporary_moved', 'temporary'),\n-    308: ('permanent_redirect',\n-          'resume_incomplete', 'resume',), # These 2 to be removed in 3.0\n+    308: ('permanent_redirect', 'permanent_redirect', 'resume_incomplete', 'resume',), # These 2 to be removed in 3.0\n \n     # Client Error.\n     400: ('bad_request', 'bad'),\n"
}