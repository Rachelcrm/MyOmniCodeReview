{
  "patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 9dd10d219e..43a92609c4 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -313,10 +313,14 @@ def tensor_product_simp_Mul(e):\n     # TensorProducts, like an Add, Pow, Commutator, etc.\n     # TODO: This only works for the equivalent of single Qbit gates.\n     if not isinstance(e, Mul):\n+        if isinstance(e, Pow) and isinstance(e.base, TensorProduct):\n+            return tensor_product_simp_Mul(e.base) ** e.exp\n         return e\n     c_part, nc_part = e.args_cnc()\n     n_nc = len(nc_part)\n     if n_nc == 0 or n_nc == 1:\n+        if n_nc == 1 and isinstance(nc_part[0], Pow) and isinstance(nc_part[0].base, TensorProduct):\n+            return tensor_product_simp_Mul(nc_part[0].base) ** nc_part[0].exp\n         return e\n     elif e.has(TensorProduct):\n         current = nc_part[0]\n@@ -334,6 +338,9 @@ def tensor_product_simp_Mul(e):\n                     )\n                 for i in range(len(new_args)):\n                     new_args[i] = new_args[i] * next.args[i]\n+            elif isinstance(next, Pow) and isinstance(next.base, TensorProduct):\n+                for i in range(len(new_args)):\n+                    new_args[i] = new_args[i] * (next.base.args[i] ** next.exp)\n             else:\n                 # this won't quite work as we don't want next in the\n                 # TensorProduct\n@@ -382,7 +389,11 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base = tensor_product_simp(e.base)\n+        if isinstance(base, TensorProduct):\n+            return tensor_product_simp_Mul(base ** e.exp)\n+        else:\n+            return base ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n"
}