{
  "patch": "To address the issue of `FileFeedStorage` creating an empty file when no items are scraped, we need to modify the `IFeedStorage` interface and its implementations to include a `cleanup` method. This method will be used to clean up the storage when no items are scraped and `FEED_STORE_EMPTY` is `False`.\n\nThe `FeedExporter` class needs to be updated to call the `cleanup` method on the storage object when no items are scraped and `FEED_STORE_EMPTY` is `False`.\n\nHere are the necessary modifications:\n\n```\n<file>scrapy/extensions/feedexport.py</file>\n<original>\n95     def open(spider):\n96         \"\"\"Open the storage for the given spider. It must return a file-like\n97         object that will be used for the exporters\"\"\"\n98 \n99     def store(file):\n100         \"\"\"Store the given file stream\"\"\"\n</original>\n<patched>\n95     def open(spider):\n96         \"\"\"Open the storage for the given spider. It must return a file-like\n97         object that will be used for the exporters\"\"\"\n98 \n99     def store(file):\n100         \"\"\"Store the given file stream\"\"\"\n101 \n102     def cleanup(file, *, feed_options):\n103         \"\"\"Clean up the storage after the spider is closed. \n104          If the feed is not empty, this method has no effect.\n105          If the feed is empty and feed_options.store_empty is False, \n104          this method must remove the file created for the feed.\n105         \"\"\"\n</patched>\n```\n\n```\n<file>scrapy/extensions/feedexport.py</file>\n<original>\n409         slot.finish_exporting()\n410         if not slot.itemcount and not slot.store_empty:\n411             # We need to call slot.storage.store nonetheless to get the file\n412             # properly closed.\n413             return defer.maybeDeferred(slot.storage.store, get_file(slot))\n</original>\n<patched>\n409         slot.finish_exporting()\n410         if not slot.itemcount and not slot.store_empty:\n411             return defer.maybeDeferred(slot.storage.cleanup, get_file(slot), feed_options=slot.feed_options)\n412         else:\n413             return defer.maybeDeferred(slot.storage.store, get_file(slot))\n</patched>\n```\n\n```\n<file>scrapy/extensions/feedexport.py</file>\n<original>\n153     def store(self, file):\n154         file.close()\n</original>\n<patched>\n153     def store(self, file):\n154         file.close()\n\n155     def cleanup(self, file, *, feed_options):\n156         if not file.closed:\n157             file.close()\n158         import os\n159         try:\n160             os.remove(file.name)\n161         except OSError:\n162             pass\n</patched>\n```"
}