{
  "patch": "To address the issue of JSONField values not being properly displayed in the admin when they are readonly, we need to modify the `display_for_field` function in `django/contrib/admin/utils.py`. The goal is to add a special case for `JSONField` values so that they are formatted correctly.\n\nThe current implementation of `display_for_field` handles various field types, including `BooleanField`, `DateTimeField`, `DecimalField`, and others, but it does not have a specific case for `JSONField`. As a result, `JSONField` values are displayed as dictionaries, which is not valid JSON.\n\nTo fix this, we need to import `JSONField` from `django.db.models.fields.json` and add an `elif` condition to check if the field is an instance of `JSONField`. If it is, we should call the `prepare_value` method of the `JSONField` class to format the JSON value.\n\nHere is the necessary patch:\n\n```\n<file>django/contrib/admin/utils.py</file>\n<original>\n380 def display_for_field(value, field, empty_value_display):\n381     from django.contrib.admin.templatetags.admin_list import _boolean_icon\n382 \n383     if getattr(field, 'flatchoices', None):\n384         return dict(field.flatchoices).get(value, empty_value_display)\n385     # BooleanField needs special-case null-handling, so it comes before the\n386     # general null test.\n387     elif isinstance(field, models.BooleanField):\n388         return _boolean_icon(value)\n389     elif value is None:\n390         return empty_value_display\n391     elif isinstance(field, models.DateTimeField):\n392         return formats.localize(timezone.template_localtime(value))\n393     elif isinstance(field, (models.DateField, models.TimeField)):\n394         return formats.localize(value)\n395     elif isinstance(field, models.DecimalField):\n396         return formats.number_format(value, field.decimal_places)\n397     elif isinstance(field, (models.IntegerField, models.FloatField)):\n398         return formats.number_format(value)\n399     elif isinstance(field, models.FileField) and value:\n400         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n401     else:\n402         return display_for_value(value, empty_value_display)\n</original>\n<patched>\n380 def display_for_field(value, field, empty_value_display):\n381     from django.contrib.admin.templatetags.admin_list import _boolean_icon\n382     from django.db.models.fields.json import JSONField\n\n383     if getattr(field, 'flatchoices', None):\n384         return dict(field.flatchoices).get(value, empty_value_display)\n385     # BooleanField needs special-case null-handling, so it comes before the\n386     # general null test.\n387     elif isinstance(field, models.BooleanField):\n388         return _boolean_icon(value)\n389     elif value is None:\n390         return empty_value_display\n391     elif isinstance(field, models.DateTimeField):\n392         return formats.localize(timezone.template_localtime(value))\n393     elif isinstance(field, (models.DateField, models.TimeField)):\n394         return formats.localize(value)\n395     elif isinstance(field, models.DecimalField):\n396         return formats.number_format(value, field.decimal_places)\n397     elif isinstance(field, (models.IntegerField, models.FloatField)):\n398         return formats.number_format(value)\n399     elif isinstance(field, models.FileField) and value:\n400         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n401     elif isinstance(field, JSONField):\n402         return field.prepare_value(value)\n403     else:\n404         return display_for_value(value, empty_value_display)\n</patched>\n```"
}