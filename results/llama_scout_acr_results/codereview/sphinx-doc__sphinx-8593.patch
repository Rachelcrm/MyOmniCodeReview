{
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 76265f5be..b8b058ca2 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -662,17 +662,20 @@ class Documenter:\n     def filter_members(self, members: ObjectMembers, want_all: bool\n                        ) -> List[Tuple[str, Any, bool]]:\n         \"\"\"Filter the given member list.\n-\n+        \n         Members are skipped if\n-\n+         \n         - they are private (except if given explicitly or the private-members\n           option is set)\n         - they are special methods (except if given explicitly or the\n           special-members option is set)\n         - they are undocumented (except if the undoc-members option is set)\n-\n+        \n         The user can override the skipping decision by connecting to the\n         ``autodoc-skip-member`` event.\n+        \n+        Additionally, members can be annotated with `:meta public:` to force\n+        their inclusion.\n         \"\"\"\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n@@ -729,14 +732,13 @@ class Documenter:\n             has_doc = bool(doc)\n \n             metadata = extract_metadata(doc)\n+            isprivate = membername.startswith('_')\n             if 'private' in metadata:\n                 # consider a member private if docstring has \"private\" metadata\n                 isprivate = True\n             elif 'public' in metadata:\n                 # consider a member public if docstring has \"public\" metadata\n                 isprivate = False\n-            else:\n-                isprivate = membername.startswith('_')\n \n             keep = False\n             if safe_getattr(member, '__sphinx_mock__', None) is not None:\n"
}