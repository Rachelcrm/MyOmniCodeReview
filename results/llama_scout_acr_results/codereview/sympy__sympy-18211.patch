{
  "patch": "diff --git a/sympy/core/relational.py b/sympy/core/relational.py\nindex f581bfa3c4..2346852105 100644\n--- a/sympy/core/relational.py\n+++ b/sympy/core/relational.py\n@@ -387,12 +387,11 @@ def __nonzero__(self):\n     __bool__ = __nonzero__\n \n     def _eval_as_set(self):\n-        # self is univariate and periodicity(self, x) in (0, None)\n-        from sympy.solvers.inequalities import solve_univariate_inequality\n+        from sympy.solvers.solveset import solveset\n         syms = self.free_symbols\n         assert len(syms) == 1\n         x = syms.pop()\n-        return solve_univariate_inequality(self, x, relational=False)\n+        return solveset(self, x)\n \n     @property\n     def binary_symbols(self):\ndiff --git a/sympy/solvers/solveset.py b/sympy/solvers/solveset.py\nindex 445be3e0e8..c8e766ae3f 100644\n--- a/sympy/solvers/solveset.py\n+++ b/sympy/solvers/solveset.py\n@@ -940,11 +940,7 @@ def _solveset(f, symbol, domain, _check=False):\n                 Inequalities in the complex domain are\n                 not supported. Try the real domain by\n                 setting domain=S.Reals'''))\n-        try:\n-            result = solve_univariate_inequality(\n-            f, symbol, domain=domain, relational=False)\n-        except NotImplementedError:\n-            result = ConditionSet(symbol, f, domain)\n+        result = ConditionSet(symbol, f, domain)\n         return result\n     elif _is_modular(f, symbol):\n         result = _solve_modular(f, symbol, domain)\n"
}