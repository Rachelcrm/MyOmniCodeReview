{
  "patch": "diff --git a/scrapy/pipelines/media.py b/scrapy/pipelines/media.py\nindex 5f6c5cb07..db72437ca 100644\n--- a/scrapy/pipelines/media.py\n+++ b/scrapy/pipelines/media.py\n@@ -3,6 +3,7 @@ from __future__ import annotations\n import functools\n import logging\n from collections import defaultdict\n+from abc import ABC, abstractmethod\n from typing import TYPE_CHECKING\n \n from twisted.internet.defer import Deferred, DeferredList\n@@ -27,7 +28,7 @@ def _DUMMY_CALLBACK(response):\n     return response\n \n \n-class MediaPipeline:\n+class MediaPipeline(ABC):\n     LOG_FAILED_RESULTS = True\n \n     class SpiderInfo:\n@@ -192,35 +193,26 @@ class MediaPipeline:\n             defer_result(result).chainDeferred(wad)\n \n     # Overridable Interface\n+    @abstractmethod\n     def media_to_download(self, request, info, *, item=None):\n         \"\"\"Check request before starting download\"\"\"\n-        pass\n \n+    @abstractmethod\n     def get_media_requests(self, item, info):\n         \"\"\"Returns the media requests to download\"\"\"\n-        pass\n \n+    @abstractmethod\n     def media_downloaded(self, response, request, info, *, item=None):\n         \"\"\"Handler for success downloads\"\"\"\n-        return response\n \n+    @abstractmethod\n     def media_failed(self, failure, request, info):\n         \"\"\"Handler for failed downloads\"\"\"\n-        return failure\n \n+    @abstractmethod\n     def item_completed(self, results, item, info):\n         \"\"\"Called per item when all media requests has been processed\"\"\"\n-        if self.LOG_FAILED_RESULTS:\n-            for ok, value in results:\n-                if not ok:\n-                    logger.error(\n-                        \"%(class)s found errors processing %(item)s\",\n-                        {\"class\": self.__class__.__name__, \"item\": item},\n-                        exc_info=failure_to_exc_info(value),\n-                        extra={\"spider\": info.spider},\n-                    )\n-        return item\n \n+    @abstractmethod\n     def file_path(self, request, response=None, info=None, *, item=None):\n         \"\"\"Returns the path where downloaded media should be stored\"\"\"\n-        pass\n"
}