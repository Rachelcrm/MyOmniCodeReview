{
  "patch": "diff --git a/django/db/backends/mysql/compiler.py b/django/db/backends/mysql/compiler.py\nindex 3682d6da05..034a85f3e8 100644\n--- a/django/db/backends/mysql/compiler.py\n+++ b/django/db/backends/mysql/compiler.py\n@@ -15,7 +15,7 @@ class SQLInsertCompiler(compiler.SQLInsertCompiler, SQLCompiler):\n \n class SQLDeleteCompiler(compiler.SQLDeleteCompiler, SQLCompiler):\n     def as_sql(self):\n-        if self.connection.features.update_can_self_select or self.single_alias:\n+        if self.connection.features.update_can_self_select or self.single_alias or not self.query.alias_refcount:\n             return super().as_sql()\n         # MySQL and MariaDB < 10.3.2 doesn't support deletion with a subquery\n         # which is what the default implementation of SQLDeleteCompiler uses\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 29e33c075f..919e789765 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1409,6 +1409,11 @@ class SQLDeleteCompiler(SQLCompiler):\n     def single_alias(self):\n         return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1\n \n+    def as_sql(self):\n+        if self.connection.features.update_can_self_select or self.single_alias or not self.query.alias_refcount:\n+            return self._as_sql(self.query)\n+        # Rest of the method remains the same\n+\n     def _as_sql(self, query):\n         result = [\n             'DELETE FROM %s' % self.quote_name_unless_alias(query.base_table)\n"
}