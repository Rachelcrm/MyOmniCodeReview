{
  "patch": "diff --git a/scrapy/downloadermiddlewares/retry.py b/scrapy/downloadermiddlewares/retry.py\nindex 205bb48b1..3facb5331 100644\n--- a/scrapy/downloadermiddlewares/retry.py\n+++ b/scrapy/downloadermiddlewares/retry.py\n@@ -38,6 +38,11 @@ class BackwardsCompatibilityMetaclass(type):\n             for x in Settings().getlist(\"RETRY_EXCEPTIONS\")\n         )\n \n+    def __get__(self, instance, owner):\n+        if instance is not None:\n+            return instance.exceptions_to_retry\n+        return self\n+\n \n def get_retry_request(\n     request: Request,\n@@ -136,16 +141,20 @@ class RetryMiddleware(metaclass=BackwardsCompatibilityMetaclass):\n             int(x) for x in settings.getlist(\"RETRY_HTTP_CODES\")\n         )\n         self.priority_adjust = settings.getint(\"RETRY_PRIORITY_ADJUST\")\n-\n+        \n         if not hasattr(\n-            self, \"EXCEPTIONS_TO_RETRY\"\n-        ):  # If EXCEPTIONS_TO_RETRY is not \"overriden\"\n+            self, \"exceptions_to_retry\"\n+        ):  \n             self.exceptions_to_retry = tuple(\n                 load_object(x) if isinstance(x, str) else x\n                 for x in settings.getlist(\"RETRY_EXCEPTIONS\")\n             )\n-        else:\n-            self.exceptions_to_retry = self.EXCEPTIONS_TO_RETRY\n+        warnings.warn(\n+            \"Attribute RetryMiddleware.EXCEPTIONS_TO_RETRY is deprecated. \"\n+            \"Use the RETRY_EXCEPTIONS setting instead.\",\n+            ScrapyDeprecationWarning,\n+            stacklevel=2,\n+        )\n \n     @classmethod\n     def from_crawler(cls, crawler):\n"
}