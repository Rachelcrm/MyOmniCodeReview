{
  "patch": "diff --git a/scrapy/extensions/feedexport.py b/scrapy/extensions/feedexport.py\nindex cd26b5778..aaa536fb4 100644\n--- a/scrapy/extensions/feedexport.py\n+++ b/scrapy/extensions/feedexport.py\n@@ -206,11 +206,49 @@ class S3FeedStorage(BlockingFeedStorage):\n     def _store_in_thread(self, file):\n         file.seek(0)\n         kwargs = {\"ACL\": self.acl} if self.acl else {}\n-        self.s3_client.put_object(\n-            Bucket=self.bucketname, Key=self.keyname, Body=file, **kwargs\n-        )\n+        file.seek(0)\n+        file_size = file.tell()\n+        file.seek(0)\n+\n+        if file_size > 5 * 1024 * 1024 * 1024:  # 5GB\n+            self._upload_multipart(file, kwargs)\n+        else:\n+            self.s3_client.put_object(\n+                Bucket=self.bucketname, Key=self.keyname, Body=file, **kwargs\n+            )\n         file.close()\n \n+    def _upload_multipart(self, file, kwargs):\n+        mp_upload = self.s3_client.create_multipart_upload(\n+            Bucket=self.bucketname, Key=self.keyname, **kwargs\n+        )\n+\n+        parts = []\n+        part_number = 1\n+        chunk_size = 100 * 1024 * 1024  # 100MB\n+\n+        while True:\n+            chunk = file.read(chunk_size)\n+            if not chunk:\n+                break\n+\n+            part = self.s3_client.upload_part(\n+                Bucket=self.bucketname,\n+                Key=self.keyname,\n+                PartNumber=part_number,\n+                UploadId=mp_upload[\"UploadId\"],\n+                Body=chunk,\n+            )\n+            parts.append({\"PartNumber\": part_number, \"ETag\": part[\"ETag\"]})\n+            part_number += 1\n+\n+        self.s3_client.complete_multipart_upload(\n+            Bucket=self.bucketname,\n+            Key=self.keyname,\n+            UploadId=mp_upload[\"UploadId\"],\n+            MultipartUpload={\"Parts\": parts},\n+        )\n+\n \n class GCSFeedStorage(BlockingFeedStorage):\n     def __init__(self, uri, project_id, acl):\n"
}