{
  "patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex d5aa968400..a45d3f946d 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -373,12 +373,13 @@ class ReverseOneToOneDescriptor:\n         query = {'%s__in' % self.related.field.name: instances}\n         queryset = queryset.filter(**query)\n \n-        # Since we're going to assign directly in the cache,\n-        # we must manage the reverse relation cache manually.\n-        for rel_obj in queryset:\n-            instance = instances_dict[rel_obj_attr(rel_obj)]\n-            self.related.field.set_cached_value(rel_obj, instance)\n-        return queryset, rel_obj_attr, instance_attr, True, self.related.get_cache_name(), False\n+    # Since we're going to assign directly in the cache,\n+    # we must manage the reverse relation cache manually.\n+    for rel_obj in queryset:\n+        rel_obj._fetch_all()\n+        instance = instances_dict[rel_obj_attr(rel_obj)]\n+        self.related.field.set_cached_value(rel_obj, instance)\n+    return queryset, rel_obj_attr, instance_attr, True, self.related.get_cache_name(), False\n \n     def __get__(self, instance, cls=None):\n         \"\"\"\n"
}