--- a/sklearn/metrics/tests/test_ranking.py
+++ b/sklearn/metrics/tests/test_ranking.py
-# Original code here (if modifying existing file)
+import pytest
+import numpy as np
+from sklearn.metrics import roc_curve
+
+def test_roc_curve_with_probability_estimates():
+    rng = np.random.RandomState(42)
+    y_true = rng.randint(0, 2, size=10)
+    y_score = rng.rand(10)
+    _, _, thresholds = roc_curve(y_true, y_score)
+    assert np.logical_or(thresholds <= 1, thresholds >= 0).all()
+
+def test_roc_curve_thresholds():
+    # Test that thresholds are correctly calculated
+    y_true = np.array([0, 0, 1, 1])
+    y_score = np.array([0.1, 0.4, 0.35, 0.8])
+    _, _, thresholds = roc_curve(y_true, y_score)
+    assert np.all(thresholds >= 0)
+    assert np.all(thresholds <= 1)
+
+def test_roc_curve_edge_cases():
+    # Test edge cases
+    y_true = np.array([0, 0, 0, 0])
+    y_score = np.array([0.1, 0.4, 0.35, 0.8])
+    _, _, thresholds = roc_curve(y_true, y_score)
+    assert np.all(thresholds >= 0)
+    assert np.all(thresholds <= 1)
+
+    y_true = np.array([1, 1, 1, 1])
+    y_score = np.array([0.1, 0.4, 0.35, 0.8])
+    _, _, thresholds = roc_curve(y_true, y_score)
+    assert np.all(thresholds >= 0)
+    assert np.all(thresholds <= 1)
