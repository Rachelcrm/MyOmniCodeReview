{
  "instance_id": "scikit-learn__scikit-learn-26194",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>sklearn/metrics/tests/test_ranking.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nimport numpy as np\nfrom sklearn.metrics import roc_curve\n\ndef test_roc_curve_with_probability_estimates():\n    rng = np.random.RandomState(42)\n    y_true = rng.randint(0, 2, size=10)\n    y_score = rng.rand(10)\n    _, _, thresholds = roc_curve(y_true, y_score)\n    assert np.logical_or(thresholds <= 1, thresholds >= 0).all()\n\ndef test_roc_curve_thresholds():\n    # Test that thresholds are correctly calculated\n    y_true = np.array([0, 0, 1, 1])\n    y_score = np.array([0.1, 0.4, 0.35, 0.8])\n    _, _, thresholds = roc_curve(y_true, y_score)\n    assert np.all(thresholds >= 0)\n    assert np.all(thresholds <= 1)\n\ndef test_roc_curve_edge_cases():\n    # Test edge cases\n    y_true = np.array([0, 0, 0, 0])\n    y_score = np.array([0.1, 0.4, 0.35, 0.8])\n    _, _, thresholds = roc_curve(y_true, y_score)\n    assert np.all(thresholds >= 0)\n    assert np.all(thresholds <= 1)\n\n    y_true = np.array([1, 1, 1, 1])\n    y_score = np.array([0.1, 0.4, 0.35, 0.8])\n    _, _, thresholds = roc_curve(y_true, y_score)\n    assert np.all(thresholds >= 0)\n    assert np.all(thresholds <= 1)\n</patched>\n</file>",
  "patch": "--- a/sklearn/metrics/tests/test_ranking.py\n+++ b/sklearn/metrics/tests/test_ranking.py\n-# Original code here (if modifying existing file)\n+import pytest\n+import numpy as np\n+from sklearn.metrics import roc_curve\n+\n+def test_roc_curve_with_probability_estimates():\n+    rng = np.random.RandomState(42)\n+    y_true = rng.randint(0, 2, size=10)\n+    y_score = rng.rand(10)\n+    _, _, thresholds = roc_curve(y_true, y_score)\n+    assert np.logical_or(thresholds <= 1, thresholds >= 0).all()\n+\n+def test_roc_curve_thresholds():\n+    # Test that thresholds are correctly calculated\n+    y_true = np.array([0, 0, 1, 1])\n+    y_score = np.array([0.1, 0.4, 0.35, 0.8])\n+    _, _, thresholds = roc_curve(y_true, y_score)\n+    assert np.all(thresholds >= 0)\n+    assert np.all(thresholds <= 1)\n+\n+def test_roc_curve_edge_cases():\n+    # Test edge cases\n+    y_true = np.array([0, 0, 0, 0])\n+    y_score = np.array([0.1, 0.4, 0.35, 0.8])\n+    _, _, thresholds = roc_curve(y_true, y_score)\n+    assert np.all(thresholds >= 0)\n+    assert np.all(thresholds <= 1)\n+\n+    y_true = np.array([1, 1, 1, 1])\n+    y_score = np.array([0.1, 0.4, 0.35, 0.8])\n+    _, _, thresholds = roc_curve(y_true, y_score)\n+    assert np.all(thresholds >= 0)\n+    assert np.all(thresholds <= 1)\n"
}