{
  "instance_id": "sphinx-doc__sphinx-10673",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_toctree.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom sphinx import addnodes\nfrom sphinx.environment import Environment\nfrom sphinx.builders.html import HTMLBuilder\nfrom sphinx.testing import TestApp\n\n@pytest.fixture\ndef app():\n    return TestApp(buildername='html')\n\ndef test_toctree_with_special_documents(app):\n    \"\"\"Test that toctree can handle special documents like genindex, modindex, and search.\"\"\"\n    # Arrange\n    env = app.env\n    docname = 'index'\n    toctree_node = addnodes.toctree()\n    toctree_node.append(addnodes.only(text='genindex'))\n    toctree_node.append(addnodes.only(text='modindex'))\n    toctree_node.append(addnodes.only(text='search'))\n\n    # Act\n    env.resolve_references(doctree=toctree_node, fromdocname=docname, builder=HTMLBuilder(app))\n\n    # Assert\n    assert toctree_node[0]['refdoc'] == docname\n    assert toctree_node[1]['refdoc'] == docname\n    assert toctree_node[2]['refdoc'] == docname\n\ndef test_toctree_with_nonexisting_documents(app):\n    \"\"\"Test that toctree can handle nonexisting documents.\"\"\"\n    # Arrange\n    env = app.env\n    docname = 'index'\n    toctree_node = addnodes.toctree()\n    toctree_node.append(addnodes.only(text='nonexisting'))\n\n    # Act and Assert\n    with pytest.raises(KeyError):\n        env.resolve_references(doctree=toctree_node, fromdocname=docname, builder=HTMLBuilder(app))\n\ndef test_process_doc_with_special_documents(app):\n    \"\"\"Test that process_doc can handle special documents like genindex, modindex, and search.\"\"\"\n    # Arrange\n    env = app.env\n    docname = 'index'\n    doctree = nodes.document()\n\n    # Act\n    TocTreeCollector().process_doc(app=app, doctree=doctree)\n\n    # Assert\n    assert 'genindex' in env.tocs[docname].astext()\n    assert 'modindex' in env.tocs[docname].astext()\n    assert 'search' in env.tocs[docname].astext()\n</patched>\n```",
  "patch": "--- a/tests/test_toctree.py\n+++ b/tests/test_toctree.py\n-# Empty if creating new file\n+import pytest\n+from sphinx import addnodes\n+from sphinx.environment import Environment\n+from sphinx.builders.html import HTMLBuilder\n+from sphinx.testing import TestApp\n+\n+@pytest.fixture\n+def app():\n+    return TestApp(buildername='html')\n+\n+def test_toctree_with_special_documents(app):\n+    \"\"\"Test that toctree can handle special documents like genindex, modindex, and search.\"\"\"\n+    # Arrange\n+    env = app.env\n+    docname = 'index'\n+    toctree_node = addnodes.toctree()\n+    toctree_node.append(addnodes.only(text='genindex'))\n+    toctree_node.append(addnodes.only(text='modindex'))\n+    toctree_node.append(addnodes.only(text='search'))\n+\n+    # Act\n+    env.resolve_references(doctree=toctree_node, fromdocname=docname, builder=HTMLBuilder(app))\n+\n+    # Assert\n+    assert toctree_node[0]['refdoc'] == docname\n+    assert toctree_node[1]['refdoc'] == docname\n+    assert toctree_node[2]['refdoc'] == docname\n+\n+def test_toctree_with_nonexisting_documents(app):\n+    \"\"\"Test that toctree can handle nonexisting documents.\"\"\"\n+    # Arrange\n+    env = app.env\n+    docname = 'index'\n+    toctree_node = addnodes.toctree()\n+    toctree_node.append(addnodes.only(text='nonexisting'))\n+\n+    # Act and Assert\n+    with pytest.raises(KeyError):\n+        env.resolve_references(doctree=toctree_node, fromdocname=docname, builder=HTMLBuilder(app))\n+\n+def test_process_doc_with_special_documents(app):\n+    \"\"\"Test that process_doc can handle special documents like genindex, modindex, and search.\"\"\"\n+    # Arrange\n+    env = app.env\n+    docname = 'index'\n+    doctree = nodes.document()\n+\n+    # Act\n+    TocTreeCollector().process_doc(app=app, doctree=doctree)\n+\n+    # Assert\n+    assert 'genindex' in env.tocs[docname].astext()\n+    assert 'modindex' in env.tocs[docname].astext()\n+    assert 'search' in env.tocs[docname].astext()\n"
}