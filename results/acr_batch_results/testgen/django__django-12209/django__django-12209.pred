{
  "instance_id": "django__django-12209",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of changing behavior when saving a model instance with an explicit pk value if the pk field has a default, we need to create comprehensive tests that cover various scenarios.\n\nThe tests should be placed in the `tests/test_models.py` file.\n\n```\n<file>tests/test_models.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom uuid import uuid4\nfrom django.test import TestCase\n\nclass Sample(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid4)\n    name = models.CharField(blank=True, max_length=100)\n\nclass TestModelSave(TestCase):\n\n    def test_save_with_explicit_pk(self):\n        s0 = Sample.objects.create()\n        s1 = Sample(pk=s0.pk, name='Test 1')\n        s1.save()\n        self.assertEqual(s0.pk, s1.pk)\n\n    def test_save_with_explicit_pk_and_default(self):\n        s0 = Sample.objects.create()\n        s1 = Sample(pk=s0.pk, name='Test 1')\n        s1.save()\n        self.assertEqual(s0.pk, s1.pk)\n\n    def test_create_with_explicit_pk(self):\n        s0 = Sample.objects.create()\n        s1 = Sample.objects.create(pk=s0.pk, name='Test 1')\n        self.assertEqual(s0.pk, s1.pk)\n\nclass TestModelSaveWithDefaultPk:\n\n    @pytest.fixture\n    def sample(self):\n        return Sample.objects.create()\n\n    def test_save_with_explicit_pk(self, sample):\n        s1 = Sample(pk=sample.pk, name='Test 1')\n        s1.save()\n        assert sample.pk == s1.pk\n\n    def test_save_with_explicit_pk_and_default(self, sample):\n        s1 = Sample(pk=sample.pk, name='Test 1')\n        s1.save()\n        assert sample.pk == s1.pk\n\n    def test_create_with_explicit_pk(self, sample):\n        s1 = Sample.objects.create(pk=sample.pk, name='Test 1')\n        assert sample.pk == s1.pk\n</patched>\n```",
  "patch": "--- a/tests/test_models.py\n+++ b/tests/test_models.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.db import models\n+from uuid import uuid4\n+from django.test import TestCase\n+\n+class Sample(models.Model):\n+    id = models.UUIDField(primary_key=True, default=uuid4)\n+    name = models.CharField(blank=True, max_length=100)\n+\n+class TestModelSave(TestCase):\n+\n+    def test_save_with_explicit_pk(self):\n+        s0 = Sample.objects.create()\n+        s1 = Sample(pk=s0.pk, name='Test 1')\n+        s1.save()\n+        self.assertEqual(s0.pk, s1.pk)\n+\n+    def test_save_with_explicit_pk_and_default(self):\n+        s0 = Sample.objects.create()\n+        s1 = Sample(pk=s0.pk, name='Test 1')\n+        s1.save()\n+        self.assertEqual(s0.pk, s1.pk)\n+\n+    def test_create_with_explicit_pk(self):\n+        s0 = Sample.objects.create()\n+        s1 = Sample.objects.create(pk=s0.pk, name='Test 1')\n+        self.assertEqual(s0.pk, s1.pk)\n+\n+class TestModelSaveWithDefaultPk:\n+\n+    @pytest.fixture\n+    def sample(self):\n+        return Sample.objects.create()\n+\n+    def test_save_with_explicit_pk(self, sample):\n+        s1 = Sample(pk=sample.pk, name='Test 1')\n+        s1.save()\n+        assert sample.pk == s1.pk\n+\n+    def test_save_with_explicit_pk_and_default(self, sample):\n+        s1 = Sample(pk=sample.pk, name='Test 1')\n+        s1.save()\n+        assert sample.pk == s1.pk\n+\n+    def test_create_with_explicit_pk(self, sample):\n+        s1 = Sample.objects.create(pk=sample.pk, name='Test 1')\n+        assert sample.pk == s1.pk\n"
}