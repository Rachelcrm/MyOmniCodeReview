{
  "instance_id": "django__django-13741",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of setting the `disabled` prop on `ReadOnlyPasswordHashField`, we need to create a comprehensive test suite that covers the described functionality. \n\nThe test suite should verify that:\n1. The `ReadOnlyPasswordHashField` is read-only by default.\n2. The `clean_password` method in `UserChangeForm` is not necessary when `ReadOnlyPasswordHashField` is read-only.\n3. The `UserChangeForm` behaves correctly when the `password` field is not provided.\n\nHere is the test suite:\n\n```\n<file>tests/test_forms.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.contrib.auth.forms import UserChangeForm, ReadOnlyPasswordHashField\nfrom django.contrib.auth.models import User\n\n@pytest.fixture\ndef user():\n    return User.objects.create_user(username='testuser', password='testpassword')\n\ndef test_read_only_password_hash_field_is_read_only():\n    field = ReadOnlyPasswordHashField()\n    assert field.disabled\n\ndef test_user_change_form_clean_password_not_necessary(user):\n    form = UserChangeForm(instance=user)\n    assert form.is_valid()\n    assert form.cleaned_data['password'] == user.password\n\ndef test_user_change_form_password_not_provided(user):\n    form = UserChangeForm(instance=user, data={})\n    assert form.is_valid()\n    assert form.cleaned_data['password'] == user.password\n\ndef test_user_change_form_password_provided(user):\n    form = UserChangeForm(instance=user, data={'password': 'newpassword'})\n    assert form.is_valid()\n    assert form.cleaned_data['password'] == user.password\n\ndef test_read_only_password_hash_field_has_changed():\n    field = ReadOnlyPasswordHashField()\n    assert not field.has_changed('initial_value', 'initial_value')\n    assert not field.has_changed('initial_value', 'different_value')\n</patched>\n```\n\n```\n<file>tests/test_fields.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.contrib.auth.forms import ReadOnlyPasswordHashField\n\ndef test_read_only_password_hash_field_bound_data():\n    field = ReadOnlyPasswordHashField()\n    assert field.bound_data('data', 'initial_value') == 'initial_value'\n</patched>\n```",
  "patch": "--- a/tests/test_forms.py\n+++ b/tests/test_forms.py\n-# Empty if creating new file\n+import pytest\n+from django.contrib.auth.forms import UserChangeForm, ReadOnlyPasswordHashField\n+from django.contrib.auth.models import User\n+\n+@pytest.fixture\n+def user():\n+    return User.objects.create_user(username='testuser', password='testpassword')\n+\n+def test_read_only_password_hash_field_is_read_only():\n+    field = ReadOnlyPasswordHashField()\n+    assert field.disabled\n+\n+def test_user_change_form_clean_password_not_necessary(user):\n+    form = UserChangeForm(instance=user)\n+    assert form.is_valid()\n+    assert form.cleaned_data['password'] == user.password\n+\n+def test_user_change_form_password_not_provided(user):\n+    form = UserChangeForm(instance=user, data={})\n+    assert form.is_valid()\n+    assert form.cleaned_data['password'] == user.password\n+\n+def test_user_change_form_password_provided(user):\n+    form = UserChangeForm(instance=user, data={'password': 'newpassword'})\n+    assert form.is_valid()\n+    assert form.cleaned_data['password'] == user.password\n+\n+def test_read_only_password_hash_field_has_changed():\n+    field = ReadOnlyPasswordHashField()\n+    assert not field.has_changed('initial_value', 'initial_value')\n+    assert not field.has_changed('initial_value', 'different_value')\n\n--- a/tests/test_fields.py\n+++ b/tests/test_fields.py\n-# Empty if creating new file\n+import pytest\n+from django.contrib.auth.forms import ReadOnlyPasswordHashField\n+\n+def test_read_only_password_hash_field_bound_data():\n+    field = ReadOnlyPasswordHashField()\n+    assert field.bound_data('data', 'initial_value') == 'initial_value'\n"
}