{
  "instance_id": "django__django-12143",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To create a comprehensive test suite for the described issue, we need to write pytest tests that cover the bug and the fix. \n\nThe bug is located in the `django/contrib/admin/options.py` file, specifically in the `_get_edited_object_pks` method of the `ModelAdmin` class. \n\nHere's how we can structure our tests:\n\n```python\n<file>tests/test_admin.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.contrib.admin.views import main\nfrom django.test import RequestFactory\nfrom django.contrib.admin.options import ModelAdmin\n\n@pytest.fixture\ndef request_factory():\n    return RequestFactory()\n\ndef test_get_edited_object_pks_no_special_chars(request_factory):\n    # Arrange\n    opts = type('Options', (), {'model': type('Model', (), {'_meta': type('Meta', (), {'pk': 'id'})})})\n    admin = ModelAdmin(opts, None)\n    request = request_factory.post('/fake-url/', data={'id-1-id': 'value1', 'id-2-id': 'value2'})\n\n    # Act\n    pks = admin._get_edited_object_pks(request, 'id')\n\n    # Assert\n    assert pks == ['value1', 'value2']\n\ndef test_get_edited_object_pks_with_special_chars(request_factory):\n    # Arrange\n    opts = type('Options', (), {'model': type('Model', (), {'_meta': type('Meta', (), {'pk': 'id'})})})\n    admin = ModelAdmin(opts, None)\n    request = request_factory.post('/fake-url/', data={'id.1-1-id': 'value1', 'id.2-2-id': 'value2'})\n\n    # Act\n    pks = admin._get_edited_object_pks(request, 'id.1')\n\n    # Assert\n    assert pks == ['value1']\n\ndef test_get_edited_object_pks_with_unrelated_data(request_factory):\n    # Arrange\n    opts = type('Options', (), {'model': type('Model', (), {'_meta': type('Meta', (), {'pk': 'id'})})})\n    admin = ModelAdmin(opts, None)\n    request = request_factory.post('/fake-url/', data={'id-1-id': 'value1', 'unrelated-key': 'unrelated-value'})\n\n    # Act\n    pks = admin._get_edited_object_pks(request, 'id')\n\n    # Assert\n    assert pks == ['value1']\n\ndef test_get_edited_object_pks_empty_request(request_factory):\n    # Arrange\n    opts = type('Options', (), {'model': type('Model', (), {'_meta': type('Meta', (), {'pk': 'id'})})})\n    admin = ModelAdmin(opts, None)\n    request = request_factory.post('/fake-url/', data={})\n\n    # Act\n    pks = admin._get_edited_object_pks(request, 'id')\n\n    # Assert\n    assert pks == []\n</patched>\n```",
  "patch": "--- a/tests/test_admin.py\n+++ b/tests/test_admin.py\n-# Empty if creating new file\n+import pytest\n+from django.contrib.admin.views import main\n+from django.test import RequestFactory\n+from django.contrib.admin.options import ModelAdmin\n+\n+@pytest.fixture\n+def request_factory():\n+    return RequestFactory()\n+\n+def test_get_edited_object_pks_no_special_chars(request_factory):\n+    # Arrange\n+    opts = type('Options', (), {'model': type('Model', (), {'_meta': type('Meta', (), {'pk': 'id'})})})\n+    admin = ModelAdmin(opts, None)\n+    request = request_factory.post('/fake-url/', data={'id-1-id': 'value1', 'id-2-id': 'value2'})\n+\n+    # Act\n+    pks = admin._get_edited_object_pks(request, 'id')\n+\n+    # Assert\n+    assert pks == ['value1', 'value2']\n+\n+def test_get_edited_object_pks_with_special_chars(request_factory):\n+    # Arrange\n+    opts = type('Options', (), {'model': type('Model', (), {'_meta': type('Meta', (), {'pk': 'id'})})})\n+    admin = ModelAdmin(opts, None)\n+    request = request_factory.post('/fake-url/', data={'id.1-1-id': 'value1', 'id.2-2-id': 'value2'})\n+\n+    # Act\n+    pks = admin._get_edited_object_pks(request, 'id.1')\n+\n+    # Assert\n+    assert pks == ['value1']\n+\n+def test_get_edited_object_pks_with_unrelated_data(request_factory):\n+    # Arrange\n+    opts = type('Options', (), {'model': type('Model', (), {'_meta': type('Meta', (), {'pk': 'id'})})})\n+    admin = ModelAdmin(opts, None)\n+    request = request_factory.post('/fake-url/', data={'id-1-id': 'value1', 'unrelated-key': 'unrelated-value'})\n+\n+    # Act\n+    pks = admin._get_edited_object_pks(request, 'id')\n+\n+    # Assert\n+    assert pks == ['value1']\n+\n+def test_get_edited_object_pks_empty_request(request_factory):\n+    # Arrange\n+    opts = type('Options', (), {'model': type('Model', (), {'_meta': type('Meta', (), {'pk': 'id'})})})\n+    admin = ModelAdmin(opts, None)\n+    request = request_factory.post('/fake-url/', data={})\n+\n+    # Act\n+    pks = admin._get_edited_object_pks(request, 'id')\n+\n+    # Assert\n+    assert pks == []\n"
}