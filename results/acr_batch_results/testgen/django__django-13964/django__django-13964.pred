{
  "instance_id": "django__django-13964",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_modeling.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import transaction\nfrom django.db.models import CharField, ForeignKey, Model\n\nclass Product(Model):\n    sku = CharField(primary_key=True, max_length=50)\n\nclass Order(Model):\n    product = ForeignKey(Product, on_delete=models.CASCADE)\n\ndef test_save_parent_object_after_setting_on_child_leads_to_data_loss_for_parents_with_non_numeric_primary_key():\n    with transaction.atomic():\n        order = Order()\n        order.product = Product()\n        order.product.sku = \"foo\"\n        order.product.save()\n        order.save()\n        assert Order.objects.filter(product_id=\"\").exists()  # Should not exist\n        assert Order.objects.filter(product=order.product).exists()  # Should exist\n\ndef test_save_parent_object_after_setting_on_child_with_existing_primary_key():\n    with transaction.atomic():\n        order = Order()\n        order.product = Product(sku=\"foo\")\n        order.product.save()\n        order.save()\n        assert Order.objects.filter(product=order.product).exists()  # Should exist\n\ndef test_foreign_key_assignment_with_deferred_primary_key():\n    with transaction.atomic():\n        product = Product()\n        order = Order()\n        order.product = product\n        product.sku = \"bar\"\n        product.save()\n        order.save()\n        assert Order.objects.filter(product=order.product).exists()  # Should exist\n</patched>\n</file>",
  "patch": "--- a/tests/test_modeling.py\n+++ b/tests/test_modeling.py\n-# Empty if creating new file\n+import pytest\n+from django.db import transaction\n+from django.db.models import CharField, ForeignKey, Model\n+\n+class Product(Model):\n+    sku = CharField(primary_key=True, max_length=50)\n+\n+class Order(Model):\n+    product = ForeignKey(Product, on_delete=models.CASCADE)\n+\n+def test_save_parent_object_after_setting_on_child_leads_to_data_loss_for_parents_with_non_numeric_primary_key():\n+    with transaction.atomic():\n+        order = Order()\n+        order.product = Product()\n+        order.product.sku = \"foo\"\n+        order.product.save()\n+        order.save()\n+        assert Order.objects.filter(product_id=\"\").exists()  # Should not exist\n+        assert Order.objects.filter(product=order.product).exists()  # Should exist\n+\n+def test_save_parent_object_after_setting_on_child_with_existing_primary_key():\n+    with transaction.atomic():\n+        order = Order()\n+        order.product = Product(sku=\"foo\")\n+        order.product.save()\n+        order.save()\n+        assert Order.objects.filter(product=order.product).exists()  # Should exist\n+\n+def test_foreign_key_assignment_with_deferred_primary_key():\n+    with transaction.atomic():\n+        product = Product()\n+        order = Order()\n+        order.product = product\n+        product.sku = \"bar\"\n+        product.save()\n+        order.save()\n+        assert Order.objects.filter(product=order.product).exists()  # Should exist\n"
}