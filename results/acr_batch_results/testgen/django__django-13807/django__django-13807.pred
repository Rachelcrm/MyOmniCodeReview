{
  "instance_id": "django__django-13807",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_commands.py</file>\n<original>\n# Original code here\n</original>\n<patched>\nimport pytest\nfrom django.core.management import call_command\nfrom django.core.management.commands.loaddata import Command\nfrom django.db import connections\nfrom django.db.models import Model\nfrom django.test import TestCase\n\npytestmark = pytest.mark.django_db\n\nclass TestLoadData(TransactionTestCase):\n\n    @pytest.fixture(autouse=True)\n    def fixtures(self, settings):\n        settings.DATABASES['default'] = {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': ':memory:',\n        }\n\n    def test_loaddata_quoted_table_names(self):\n        class Order(Model):\n            name = models.CharField(max_length=100)\n\n        order_fixture = [\n            {\n                \"model\": \"test_commands.Order\",\n                \"fields\": {\n                    \"name\": \"Test Order\"\n                }\n            }\n        ]\n\n        with open('order.json', 'w') as f:\n            f.write(json.dumps(order_fixture))\n\n        call_command('loaddata', 'order.json')\n\n        self.assertEqual(Order.objects.get().name, \"Test Order\")\n\n</patched>\n```",
  "patch": "--- a/tests/test_commands.py\n+++ b/tests/test_commands.py\n-# Original code here\n+import pytest\n+from django.core.management import call_command\n+from django.core.management.commands.loaddata import Command\n+from django.db import connections\n+from django.db.models import Model\n+from django.test import TestCase\n+\n+pytestmark = pytest.mark.django_db\n+\n+class TestLoadData(TransactionTestCase):\n+\n+    @pytest.fixture(autouse=True)\n+    def fixtures(self, settings):\n+        settings.DATABASES['default'] = {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+\n+    def test_loaddata_quoted_table_names(self):\n+        class Order(Model):\n+            name = models.CharField(max_length=100)\n+\n+        order_fixture = [\n+            {\n+                \"model\": \"test_commands.Order\",\n+                \"fields\": {\n+                    \"name\": \"Test Order\"\n+                }\n+            }\n+        ]\n+\n+        with open('order.json', 'w') as f:\n+            f.write(json.dumps(order_fixture))\n+\n+        call_command('loaddata', 'order.json')\n+\n+        self.assertEqual(Order.objects.get().name, \"Test Order\")\n"
}