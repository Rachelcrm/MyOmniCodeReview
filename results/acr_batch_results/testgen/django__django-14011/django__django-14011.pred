{
  "instance_id": "django__django-14011",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of `LiveServerTestCase`'s `ThreadedWSGIServer` not closing database connections after each thread, we need to create a test suite that thoroughly covers this functionality.\n\nThe test suite will include tests to verify that database connections are properly closed after each test.\n\nHere is the test suite:\n\n```\n<file>tests/testcases.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.test import LiveServerTestCase\nfrom django.db import connections\n\n@pytest.mark.django_db\nclass TestLiveServerThread(LiveServerTestCase):\n    def test_closes_connections(self):\n        # Verify that database connections are closed after each test\n        connections['default'].cursor().execute(\"SELECT 1\")\n        self.assertEqual(len(connections.all()), 1)\n        # Run a test that uses the live server\n        response = self.client.get('/')\n        self.assertEqual(response.status_code, 200)\n        # Verify that database connections are closed\n        self.assertEqual(len(connections.all()), 0)\n\n    def tearDown(self):\n        # Ensure that all connections are closed after each test\n        for connection in connections.all():\n            connection.close()\n\n</patched>\n```\n\n```\n<file>tests/test_database.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.db import connections\nfrom django.db.backends.base.creation import BaseDatabaseCreation\n\n@pytest.mark.django_db\nclass TestDatabaseCreation:\n    def test_destroy_test_db_closes_connections(self):\n        # Verify that destroy_test_db closes all database connections\n        creation = BaseDatabaseCreation(connections['default'])\n        creation.create_test_db()\n        connections['default'].cursor().execute(\"SELECT 1\")\n        self.assertEqual(len(connections.all()), 1)\n        creation.destroy_test_db()\n        self.assertEqual(len(connections.all()), 0)\n\n</patched>\n```\n\n```\n<file>tests/test_servers.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.core.servers.basehttp import ThreadedWSGIServer\n\n@pytest.mark.django_db\nclass TestThreadedWSGIServer:\n    def test_server_closes_connections(self):\n        # Verify that ThreadedWSGIServer closes all database connections\n        server = ThreadedWSGIServer(('localhost', 8080), allow_reuse_address=False)\n        server.serve_forever()\n        # Verify that database connections are closed\n        self.assertEqual(len(connections.all()), 0)\n\n</patched>\n```",
  "patch": "--- a/tests/testcases.py\n+++ b/tests/testcases.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.test import LiveServerTestCase\n+from django.db import connections\n+\n+@pytest.mark.django_db\n+class TestLiveServerThread(LiveServerTestCase):\n+    def test_closes_connections(self):\n+        # Verify that database connections are closed after each test\n+        connections['default'].cursor().execute(\"SELECT 1\")\n+        self.assertEqual(len(connections.all()), 1)\n+        # Run a test that uses the live server\n+        response = self.client.get('/')\n+        self.assertEqual(response.status_code, 200)\n+        # Verify that database connections are closed\n+        self.assertEqual(len(connections.all()), 0)\n+\n+    def tearDown(self):\n+        # Ensure that all connections are closed after each test\n+        for connection in connections.all():\n+            connection.close()\n\n--- a/tests/test_database.py\n+++ b/tests/test_database.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.db import connections\n+from django.db.backends.base.creation import BaseDatabaseCreation\n+\n+@pytest.mark.django_db\n+class TestDatabaseCreation:\n+    def test_destroy_test_db_closes_connections(self):\n+        # Verify that destroy_test_db closes all database connections\n+        creation = BaseDatabaseCreation(connections['default'])\n+        creation.create_test_db()\n+        connections['default'].cursor().execute(\"SELECT 1\")\n+        self.assertEqual(len(connections.all()), 1)\n+        creation.destroy_test_db()\n+        self.assertEqual(len(connections.all()), 0)\n\n--- a/tests/test_servers.py\n+++ b/tests/test_servers.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.core.servers.basehttp import ThreadedWSGIServer\n+\n+@pytest.mark.django_db\n+class TestThreadedWSGIServer:\n+    def test_server_closes_connections(self):\n+        # Verify that ThreadedWSGIServer closes all database connections\n+        server = ThreadedWSGIServer(('localhost', 8080), allow_reuse_address=False)\n+        server.serve_forever()\n+        # Verify that database connections are closed\n+        self.assertEqual(len(connections.all()), 0)\n"
}