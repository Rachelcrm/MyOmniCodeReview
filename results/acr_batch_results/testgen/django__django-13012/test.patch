--- a/tests/test_expressions.py
+++ b/tests/test_expressions.py
-# Empty if creating new file
+import pytest
+from django.db.models import ExpressionWrapper, Value, IntegerField
+from django.db.models.query import QuerySet
+
+@pytest.mark.django_db
+def test_constant_expression_not_in_group_by():
+    # Arrange
+    class Model(models.Model):
+        column_a = models.CharField(max_length=255)
+        column_b = models.IntegerField()
+
+    expr = ExpressionWrapper(Value(3, output_field=IntegerField()), output_field=IntegerField())
+    qs = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))
+
+    # Act
+    sql, params = qs.query.get_compiler().as_sql()
+
+    # Assert
+    assert '3' not in sql  # Check that the constant expression is not in the GROUP BY clause
+
+@pytest.mark.django_db
+def test_non_constant_expression_in_group_by():
+    # Arrange
+    class Model(models.Model):
+        column_a = models.CharField(max_length=255)
+        column_b = models.IntegerField()
+
+    expr = ExpressionWrapper(models.F('column_a'), output_field=IntegerField())
+    qs = Model.objects.annotate(expr_res=expr).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))
+
+    # Act
+    sql, params = qs.query.get_compiler().as_sql()
+
+    # Assert
+    assert 'column_a' in sql  # Check that the non-constant expression is in the GROUP BY clause
+
+@pytest.mark.django_db
+def test_value_expression_not_in_group_by():
+    # Arrange
+    class Model(models.Model):
+        column_a = models.CharField(max_length=255)
+        column_b = models.IntegerField()
+
+    qs = Model.objects.annotate(expr_res=Value(3, output_field=IntegerField())).values('expr_res', 'column_a').annotate(sum=Sum('column_b'))
+
+    # Act
+    sql, params = qs.query.get_compiler().as_sql()
+
+    # Assert
+    assert '3' not in sql  # Check that the constant expression is not in the GROUP BY clause
