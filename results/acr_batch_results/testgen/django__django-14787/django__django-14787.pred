{
  "instance_id": "django__django-14787",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of `method_decorator` not preserving wrapper assignments for partial objects, we need to create a comprehensive test suite. The test suite should cover various scenarios, including decorating functions and methods, and ensuring that the metadata of the original function is preserved.\n\nHere's an example of how the test suite could be implemented:\n\n```\n<file>tests/test_decorators.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.utils.decorators import method_decorator\nfrom functools import partial\n\ndef test_method_decorator_preserves_metadata():\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n        return wrapper\n\n    @method_decorator(decorator)\n    def hello_world():\n        return \"hello\"\n\n    assert hello_world.__name__ == \"wrapper\"\n\ndef test_method_decorator_preserves_metadata_for_partial_object():\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n        return wrapper\n\n    def hello_world():\n        return \"hello\"\n\n    partial_hello_world = partial(hello_world)\n\n    @method_decorator(decorator)\n    def test_method(self):\n        return partial_hello_world()\n\n    assert test_method.__name__ == \"test_method\"\n\ndef test_method_decorator_preserves_metadata_for_method():\n    class Test:\n        @method_decorator(decorator)\n        def hello_world(self):\n            return \"hello\"\n\n    test = Test()\n    assert test.hello_world.__name__ == \"hello_world</patched>\n```",
  "patch": "--- a/tests/test_decorators.py\n+++ b/tests/test_decorators.py\n-# Empty if creating new file\n+import pytest\n+from django.utils.decorators import method_decorator\n+from functools import partial\n+\n+def test_method_decorator_preserves_metadata():\n+    def decorator(func):\n+        def wrapper(*args, **kwargs):\n+            return func(*args, **kwargs)\n+        return wrapper\n+\n+    @method_decorator(decorator)\n+    def hello_world():\n+        return \"hello\"\n+\n+    assert hello_world.__name__ == \"wrapper\"\n+\n+def test_method_decorator_preserves_metadata_for_partial_object():\n+    def decorator(func):\n+        def wrapper(*args, **kwargs):\n+            return func(*args, **kwargs)\n+        return wrapper\n+\n+    def hello_world():\n+        return \"hello\"\n+\n+    partial_hello_world = partial(hello_world)\n+\n+    @method_decorator(decorator)\n+    def test_method(self):\n+        return partial_hello_world()\n+\n+    assert test_method.__name__ == \"test_method\"\n+\n+def test_method_decorator_preserves_metadata_for_method():\n+    class Test:\n+        @method_decorator(decorator)\n+        def hello_world(self):\n+            return \"hello\"\n+\n+    test = Test()\n+    assert test.hello_world.__name__ == \"hello_world\n"
}