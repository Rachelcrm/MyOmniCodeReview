{
  "instance_id": "django__django-13112",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of `makemigrations` crashing for a `ForeignKey` with a mixed-case app name, we need to ensure that Django correctly handles app names in a case-insensitive manner. The bug arises when the app name in `INSTALLED_APPS` and the app name referenced in a `ForeignKey` field do not match exactly in case.\n\nHere's a comprehensive test suite to cover the described issue:\n\n```\n<file>tests/test_apps.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.apps import AppConfig\n\ndef test_app_config_case_insensitive():\n    # Test that app names are handled case-insensitively\n    app_config = AppConfig(name='DJ_RegLogin', app_module=None)\n    assert app_config.name == 'DJ_RegLogin'\n    assert app_config.label == 'dj_reglogin'\n\ndef test_installed_apps_case_insensitive():\n    # Test that INSTALLED_APPS handles app names case-insensitively\n    installed_apps = ['DJ_RegLogin']\n    assert 'dj_reglogin' in [app.lower() for app in installed_apps]\n\ndef test_foreign_key_app_name_case_insensitive():\n    # Test that ForeignKey app name is handled case-insensitively\n    from django.db import models\n    from django.db.models.fields.related import ForeignKey\n\n    class Category(models.Model):\n        title = models.CharField(max_length=100)\n\n    class Content(models.Model):\n        category = models.ForeignKey('DJ_RegLogin.Category', on_delete=models.CASCADE)\n\n    assert Content._meta.get_field('category').remote_field.model == Category\n\ndef test_makemigrations_with_mixed_case_app_name():\n    # Test makemigrations with mixed-case app name\n    from django.core.management import call_command\n\n    # Assuming the app name is 'DJ_RegLogin' and model is defined correctly\n    call_command('makemigrations', '--settings=settings_with_mixed_case_app_name')\n</patched>\n```\n\n```\n<file>tests/test_migrations.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import migrations\n\ndef test_migration_with_foreign_key():\n    # Test migration with ForeignKey\n    from django.db import models\n\n    class Category(models.Model):\n        title = models.CharField(max_length=100)\n\n    class Content(models.Model):\n        category = models.ForeignKey('DJ_RegLogin.Category', on_delete=models.CASCADE)\n\n    migration = migrations.Migration('test_app', '0001_initial')\n    migration.operations = [\n        migrations.CreateModel(\n            name='Content',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.ForeignKey(on_delete=models.CASCADE, to='DJ_RegLogin.Category')),\n            ],\n        ),\n    ]\n</patched>\n```\n\n```\n<file>tests/settings_with_mixed_case_app_name.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'DJ_RegLogin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n</patched>\n```",
  "patch": "--- a/tests/test_apps.py\n+++ b/tests/test_apps.py\n-# Empty if creating new file\n+import pytest\n+from django.apps import AppConfig\n+\n+def test_app_config_case_insensitive():\n+    # Test that app names are handled case-insensitively\n+    app_config = AppConfig(name='DJ_RegLogin', app_module=None)\n+    assert app_config.name == 'DJ_RegLogin'\n+    assert app_config.label == 'dj_reglogin'\n+\n+def test_installed_apps_case_insensitive():\n+    # Test that INSTALLED_APPS handles app names case-insensitively\n+    installed_apps = ['DJ_RegLogin']\n+    assert 'dj_reglogin' in [app.lower() for app in installed_apps]\n+\n+def test_foreign_key_app_name_case_insensitive():\n+    # Test that ForeignKey app name is handled case-insensitively\n+    from django.db import models\n+    from django.db.models.fields.related import ForeignKey\n+\n+    class Category(models.Model):\n+        title = models.CharField(max_length=100)\n+\n+    class Content(models.Model):\n+        category = models.ForeignKey('DJ_RegLogin.Category', on_delete=models.CASCADE)\n+\n+    assert Content._meta.get_field('category').remote_field.model == Category\n+\n+def test_makemigrations_with_mixed_case_app_name():\n+    # Test makemigrations with mixed-case app name\n+    from django.core.management import call_command\n+\n+    # Assuming the app name is 'DJ_RegLogin' and model is defined correctly\n+    call_command('makemigrations', '--settings=settings_with_mixed_case_app_name')\n\n--- a/tests/test_migrations.py\n+++ b/tests/test_migrations.py\n-# Empty if creating new file\n+import pytest\n+from django.db import migrations\n+\n+def test_migration_with_foreign_key():\n+    # Test migration with ForeignKey\n+    from django.db import models\n+\n+    class Category(models.Model):\n+        title = models.CharField(max_length=100)\n+\n+    class Content(models.Model):\n+        category = models.ForeignKey('DJ_RegLogin.Category', on_delete=models.CASCADE)\n+\n+    migration = migrations.Migration('test_app', '0001_initial')\n+    migration.operations = [\n+        migrations.CreateModel(\n+            name='Content',\n+            fields=[\n+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n+                ('category', models.ForeignKey(on_delete=models.CASCADE, to='DJ_RegLogin.Category')),\n+            ],\n+        ),\n+    ]\n\n--- a/tests/settings_with_mixed_case_app_name.py\n+++ b/tests/settings_with_mixed_case_app_name.py\n-# Empty if creating new file\n+import os\n+\n+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n+\n+SECRET_KEY = 'your_secret_key_here'\n+\n+DEBUG = True\n+\n+ALLOWED_HOSTS = []\n+\n+INSTALLED_APPS = [\n+    'DJ_RegLogin',\n+    'django.contrib.admin',\n+    'django.contrib.auth',\n+    'django.contrib.contenttypes',\n+    'django.contrib.sessions',\n+    'django.contrib.messages',\n+    'django.contrib.staticfiles',\n+]\n+\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n+    }\n+}\n"
}