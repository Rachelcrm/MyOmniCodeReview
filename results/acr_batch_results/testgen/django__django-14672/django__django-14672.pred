{
  "instance_id": "django__django-14672",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_reverse_related.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.db.models.fields.reverse_related import ManyToManyRel\n\ndef test_many_to_many_rel_hashability():\n class Parent(models.Model):\n  name = models.CharField(max_length=256)\n\n class ProxyParent(Parent):\n class Meta:\n proxy = True\n\n class Child(models.Model):\n parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n many_to_many_field = models.ManyToManyField(\n to=Parent,\n through=\"ManyToManyModel\",\n through_fields=['child', 'parent'],\n related_name=\"something\"\n )\n\n class ManyToManyModel(models.Model):\n parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n\n # Test that the identity property of ManyToManyRel is hashable\n rel = ManyToManyRel(field=models.Field(), to=Parent, through_fields=['child', 'parent'])\n assert hash(rel.identity) is not None\n\n # Test with a list for through_fields\n rel = ManyToManyRel(field=models.Field(), to=Parent, through_fields=['a', 'b'])\n assert hash(rel.identity) is not None\n\n # Test through_fields with different types\n rel = ManyToManyRel(field=models.Field(), to=Parent, through_fields=('x', 'y'))\n assert hash(rel.identity) is not None\n\ndef test_foreign_object_rel_hashability():\n # Arrange\n class T(models.Model):\n f = models.ForeignKey(Parent, on_delete=models.CASCADE)\n\n rel = ManyToManyRel(field=models.Field(), to=Parent)\n\n # Act and Assert\n assert hasattr(rel, '__hash__')\n\n # Test hashability\n hash(rel)\n\n # Test in a set\n rels = {rel}\n assert rel in rels\n\n # Test with equal objects\n rel2 = ManyToManyRel(field=models.Field(), to=Parent)\n are_equal = rel == rel2\n assert are_equal\n assert hash(rel) == hash(rel2)\n\n # Test with not equal objects\n rel3 = ManyToManyRel(field=models.Field(), to=ProxyParent)\n are_equal = rel == rel3\n assert not are_equal\n try:\n assert hash(rel) != hash(rel3)\n except TypeError:\n pytest.fail(\"TypeError raised unexpectedly\")\n\n</patched>\n```",
  "patch": "--- a/tests/test_reverse_related.py\n+++ b/tests/test_reverse_related.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.db import models\n+from django.db.models.fields.reverse_related import ManyToManyRel\n+\n+def test_many_to_many_rel_hashability():\n+ class Parent(models.Model):\n+  name = models.CharField(max_length=256)\n+\n+ class ProxyParent(Parent):\n+ class Meta:\n+ proxy = True\n+\n+ class Child(models.Model):\n+ parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+ many_to_many_field = models.ManyToManyField(\n+ to=Parent,\n+ through=\"ManyToManyModel\",\n+ through_fields=['child', 'parent'],\n+ related_name=\"something\"\n+ )\n+\n+ class ManyToManyModel(models.Model):\n+ parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+ child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+\n+ # Test that the identity property of ManyToManyRel is hashable\n+ rel = ManyToManyRel(field=models.Field(), to=Parent, through_fields=['child', 'parent'])\n+ assert hash(rel.identity) is not None\n+\n+ # Test with a list for through_fields\n+ rel = ManyToManyRel(field=models.Field(), to=Parent, through_fields=['a', 'b'])\n+ assert hash(rel.identity) is not None\n+\n+ # Test through_fields with different types\n+ rel = ManyToManyRel(field=models.Field(), to=Parent, through_fields=('x', 'y'))\n+ assert hash(rel.identity) is not None\n+\n+def test_foreign_object_rel_hashability():\n+ # Arrange\n+ class T(models.Model):\n+ f = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+\n+ rel = ManyToManyRel(field=models.Field(), to=Parent)\n+\n+ # Act and Assert\n+ assert hasattr(rel, '__hash__')\n+\n+ # Test hashability\n+ hash(rel)\n+\n+ # Test in a set\n+ rels = {rel}\n+ assert rel in rels\n+\n+ # Test with equal objects\n+ rel2 = ManyToManyRel(field=models.Field(), to=Parent)\n+ are_equal = rel == rel2\n+ assert are_equal\n+ assert hash(rel) == hash(rel2)\n+\n+ # Test with not equal objects\n+ rel3 = ManyToManyRel(field=models.Field(), to=ProxyParent)\n+ are_equal = rel == rel3\n+ assert not are_equal\n+ try:\n+ assert hash(rel) != hash(rel3)\n+ except TypeError:\n+ pytest.fail(\"TypeError raised unexpectedly\")\n"
}