{
  "instance_id": "sphinx-doc__sphinx-8548",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of autodoc's inherited-members not working for inherited attributes (data members), we need to create a comprehensive test suite. The test suite should cover various scenarios, including inherited attributes from parent classes, nested classes, and the interaction with autodoc's configuration options.\n\nHere's a sample test suite:\n\n```\n<file>tests/test_autodoc_inherited_members.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom sphinx import autodoc\nfrom sphinx.testing import TestApp\nfrom sphinx.ext.autodoc import Documenter\n\n@pytest.fixture\ndef app():\n return TestApp()\n\ndef test_inherited_attributes(app):\n class Parent:\n attr = \"Parent attribute\"\n\n class Child(Parent):\n pass\n\n doc = autodoc.get_doc(Child, None, None, None, None)\n assert \"attr\" in [line.strip() for line in doc]\n\ndef test_nested_classes(app):\n class Outer:\n class Inner:\n attr = \"Inner attribute\"\n\n doc = autodoc.get_doc(Outer.Inner, None, None, None, None)\n assert \"attr\" in [line.strip() for line in doc]\n\ndef test_autodoc_inherit_docstrings(app):\n app.config.autodoc_inherit_docstrings = True\n\n class Parent:\n \"\"\"Parent docstring\"\"\"\n attr = \"Parent attribute\"\n\n class Child(Parent):\n pass\n\n doc = autodoc.get_doc(Child, None, None, None, None)\n assert \"Parent docstring\" in [line.strip() for line in doc]\n\ndef test_autodoc_inherit_docstrings_disabled(app):\n app.config.autodoc_inherit_docstrings = False\n\n class Parent:\n \"\"\"Parent docstring\"\"\"\n attr = \"Parent attribute\"\n\n class Child(Parent):\n pass\n\n doc = autodoc.get_doc(Child, None, None, None, None)\n assert \"Parent docstring\" not in [line.strip() for line in doc]\n</patched>\n```\n\nThis test suite covers the following scenarios:\n\n1.  Inherited attributes from parent classes.\n2.  Inherited attributes from nested classes.\n3.  The interaction with autodoc's `autodoc_inherit_docstrings` configuration option.\n\nEach test case uses the `autodoc.get_doc` function to retrieve the docstring for a given object and asserts that the expected content is present.\n\nTo ensure that the tests are comprehensive, you can add more test cases to cover additional scenarios, such as:\n\n*   Inherited attributes from multiple parent classes.\n*   Inherited attributes from parent classes with different docstrings.\n*   Interaction with other autodoc configuration options.\n\nBy creating a thorough test suite, you can verify that the autodoc functionality works correctly for inherited attributes and docstrings.",
  "patch": "--- a/tests/test_autodoc_inherited_members.py\n+++ b/tests/test_autodoc_inherited_members.py\n-# Empty if creating new file\n+import pytest\n+from sphinx import autodoc\n+from sphinx.testing import TestApp\n+from sphinx.ext.autodoc import Documenter\n+\n+@pytest.fixture\n+def app():\n+ return TestApp()\n+\n+def test_inherited_attributes(app):\n+ class Parent:\n+ attr = \"Parent attribute\"\n+\n+ class Child(Parent):\n+ pass\n+\n+ doc = autodoc.get_doc(Child, None, None, None, None)\n+ assert \"attr\" in [line.strip() for line in doc]\n+\n+def test_nested_classes(app):\n+ class Outer:\n+ class Inner:\n+ attr = \"Inner attribute\"\n+\n+ doc = autodoc.get_doc(Outer.Inner, None, None, None, None)\n+ assert \"attr\" in [line.strip() for line in doc]\n+\n+def test_autodoc_inherit_docstrings(app):\n+ app.config.autodoc_inherit_docstrings = True\n+\n+ class Parent:\n+ \"\"\"Parent docstring\"\"\"\n+ attr = \"Parent attribute\"\n+\n+ class Child(Parent):\n+ pass\n+\n+ doc = autodoc.get_doc(Child, None, None, None, None)\n+ assert \"Parent docstring\" in [line.strip() for line in doc]\n+\n+def test_autodoc_inherit_docstrings_disabled(app):\n+ app.config.autodoc_inherit_docstrings = False\n+\n+ class Parent:\n+ \"\"\"Parent docstring\"\"\"\n+ attr = \"Parent attribute\"\n+\n+ class Child(Parent):\n+ pass\n+\n+ doc = autodoc.get_doc(Child, None, None, None, None)\n+ assert \"Parent docstring\" not in [line.strip() for line in doc]\n"
}