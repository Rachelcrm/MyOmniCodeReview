{
  "instance_id": "scrapy__scrapy-6540",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_middleware.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom scrapy import Crawler\nfrom scrapy.middleware import MiddlewareManager\nfrom scrapy.utils.misc import build_from_crawler, build_from_settings\n\ndef test_build_from_crawler():\n    class TestMiddleware:\n        @classmethod\n        def from_crawler(cls, crawler):\n            return cls()\n\n    crawler = Crawler(None)\n    middleware = build_from_crawler(TestMiddleware, crawler)\n    assert isinstance(middleware, TestMiddleware)\n\ndef test_build_from_settings():\n    class TestMiddleware:\n        @classmethod\n        def from_settings(cls, settings):\n            return cls()\n\n    settings = {}\n    with pytest.warns(DeprecationWarning):\n        middleware = build_from_settings(TestMiddleware, settings)\n    assert isinstance(middleware, TestMiddleware)\n\ndef test_middleware_manager_from_crawler():\n    class TestMiddleware:\n        @classmethod\n        def from_crawler(cls, crawler):\n            return cls()\n\n    crawler = Crawler(None)\n    middleware_manager = MiddlewareManager.from_crawler(crawler)\n    assert middleware_manager.middlewares\n\ndef test_middleware_manager_from_settings():\n    class TestMiddleware:\n        @classmethod\n        def from_settings(cls, settings):\n            return cls()\n\n    settings = {}\n    with pytest.warns(DeprecationWarning):\n        middleware_manager = MiddlewareManager.from_settings(settings)\n    assert middleware_manager.middlewares\n\ndef test_build_from_crawler_with_args():\n    class TestMiddleware:\n        def __init__(self, arg):\n            self.arg = arg\n\n        @classmethod\n        def from_crawler(cls, crawler, arg):\n            return cls(arg)\n\n    crawler = Crawler(None)\n    middleware = build_from_crawler(TestMiddleware, crawler, \"test_arg\")\n    assert middleware.arg == \"test_arg\"\n</patched>\n```",
  "patch": "--- a/tests/test_middleware.py\n+++ b/tests/test_middleware.py\n-# Empty if creating new file\n+import pytest\n+from scrapy import Crawler\n+from scrapy.middleware import MiddlewareManager\n+from scrapy.utils.misc import build_from_crawler, build_from_settings\n+\n+def test_build_from_crawler():\n+    class TestMiddleware:\n+        @classmethod\n+        def from_crawler(cls, crawler):\n+            return cls()\n+\n+    crawler = Crawler(None)\n+    middleware = build_from_crawler(TestMiddleware, crawler)\n+    assert isinstance(middleware, TestMiddleware)\n+\n+def test_build_from_settings():\n+    class TestMiddleware:\n+        @classmethod\n+        def from_settings(cls, settings):\n+            return cls()\n+\n+    settings = {}\n+    with pytest.warns(DeprecationWarning):\n+        middleware = build_from_settings(TestMiddleware, settings)\n+    assert isinstance(middleware, TestMiddleware)\n+\n+def test_middleware_manager_from_crawler():\n+    class TestMiddleware:\n+        @classmethod\n+        def from_crawler(cls, crawler):\n+            return cls()\n+\n+    crawler = Crawler(None)\n+    middleware_manager = MiddlewareManager.from_crawler(crawler)\n+    assert middleware_manager.middlewares\n+\n+def test_middleware_manager_from_settings():\n+    class TestMiddleware:\n+        @classmethod\n+        def from_settings(cls, settings):\n+            return cls()\n+\n+    settings = {}\n+    with pytest.warns(DeprecationWarning):\n+        middleware_manager = MiddlewareManager.from_settings(settings)\n+    assert middleware_manager.middlewares\n+\n+def test_build_from_crawler_with_args():\n+    class TestMiddleware:\n+        def __init__(self, arg):\n+            self.arg = arg\n+\n+        @classmethod\n+        def from_crawler(cls, crawler, arg):\n+            return cls(arg)\n+\n+    crawler = Crawler(None)\n+    middleware = build_from_crawler(TestMiddleware, crawler, \"test_arg\")\n+    assert middleware.arg == \"test_arg\"\n"
}