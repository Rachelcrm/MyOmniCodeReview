{
  "instance_id": "scikit-learn__scikit-learn-13135",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue with `KBinsDiscretizer` and the `kmeans` strategy, we need to ensure that the bin edges are sorted before they are used. Here's how we can approach this:\n\n```python\n<file>sklearn/preprocessing/_discretization.py</file>\n<original>\n    elif self.strategy == 'kmeans':\n        # Deterministic initialization with uniform spacing\n        uniform_edges = np.linspace(col_min, col_max, n_bins[jj] + 1)\n        init = (uniform_edges[1:] + uniform_edges[:-1])[:, None] * 0.5\n\n        # 1D k-means procedure\n        km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)\n        centers = km.fit(column[:, None]).cluster_centers_[:, 0]\n        bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5\n        bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]\n</original>\n<patched>\n    elif self.strategy == 'kmeans':\n        # Deterministic initialization with uniform spacing\n        uniform_edges = np.linspace(col_min, col_max, n_bins[jj] + 1)\n        init = (uniform_edges[1:] + uniform_edges[:-1])[:, None] * 0.5\n\n        # 1D k-means procedure\n        km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)\n        centers = km.fit(column[:, None]).cluster_centers_[:, 0]\n        bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5\n        bin_edges[jj] = np.sort(bin_edges[jj])  # Ensure bin edges are sorted\n        bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]\n</patched>\n```\n\nAnd here's a test to verify the fix:\n\n```\n<file>tests/test_discretization.py</file>\n<original>\n# Original test code\n</original>\n<patched>\nimport pytest\nimport numpy as np\nfrom sklearn.preprocessing import KBinsDiscretizer\n\ndef test_kmeans_strategy_bins_sorted():\n    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')\n    est.fit(X)\n    bin_edges = est.bin_edges_\n    for jj in range(bin_edges.shape[0]):\n        assert np.all(np.diff(bin_edges[jj]) >= 0)\n\ndef test_kmeans_strategy_transform():\n    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')\n    Xt = est.fit_transform(X)\n    assert Xt.shape == X.shape\n</patched>\n```",
  "patch": "--- a/sklearn/preprocessing/_discretization.py\n+++ b/sklearn/preprocessing/_discretization.py\n-    elif self.strategy == 'kmeans':\n-        # Deterministic initialization with uniform spacing\n-        uniform_edges = np.linspace(col_min, col_max, n_bins[jj] + 1)\n-        init = (uniform_edges[1:] + uniform_edges[:-1])[:, None] * 0.5\n-\n-        # 1D k-means procedure\n-        km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)\n-        centers = km.fit(column[:, None]).cluster_centers_[:, 0]\n-        bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5\n-        bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]\n+    elif self.strategy == 'kmeans':\n+        # Deterministic initialization with uniform spacing\n+        uniform_edges = np.linspace(col_min, col_max, n_bins[jj] + 1)\n+        init = (uniform_edges[1:] + uniform_edges[:-1])[:, None] * 0.5\n+\n+        # 1D k-means procedure\n+        km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)\n+        centers = km.fit(column[:, None]).cluster_centers_[:, 0]\n+        bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5\n+        bin_edges[jj] = np.sort(bin_edges[jj])  # Ensure bin edges are sorted\n+        bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]\n\n--- a/tests/test_discretization.py\n+++ b/tests/test_discretization.py\n-# Original test code\n+import pytest\n+import numpy as np\n+from sklearn.preprocessing import KBinsDiscretizer\n+\n+def test_kmeans_strategy_bins_sorted():\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')\n+    est.fit(X)\n+    bin_edges = est.bin_edges_\n+    for jj in range(bin_edges.shape[0]):\n+        assert np.all(np.diff(bin_edges[jj]) >= 0)\n+\n+def test_kmeans_strategy_transform():\n+    X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)\n+    est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')\n+    Xt = est.fit_transform(X)\n+    assert Xt.shape == X.shape\n"
}