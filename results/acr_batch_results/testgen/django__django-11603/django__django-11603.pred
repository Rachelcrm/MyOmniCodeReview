{
  "instance_id": "django__django-11603",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_aggregates.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db.models import Avg, Sum\nfrom django.db.models.query import QuerySet\n\n@pytest.mark.test_distinct_avg\ndef test_distinct_avg():\n    # Test that Avg supports DISTINCT\n    qs = QuerySet().annotate(avg=Avg('field', distinct=True))\n    assert qs.query.get_aggregate_sql(Avg('field', distinct=True)) == \"AVG(DISTINCT field)\"\n\n@pytest.mark.test_distinct_sum\ndef test_distinct_sum():\n    # Test that Sum supports DISTINCT\n    qs = QuerySet().annotate(sum=Sum('field', distinct=True))\n    assert qs.query.get_aggregate_sql(Sum('field', distinct=True)) == \"SUM(DISTINCT field)\"\n\n@pytest.mark.test_avg_without_distinct\ndef test_avg_without_distinct():\n    # Test that Avg without DISTINCT works as expected\n    qs = QuerySet().annotate(avg=Avg('field'))\n    assert qs.query.get_aggregate_sql(Avg('field')) == \"AVG(field)\"\n\n@pytest.mark.test_sum_without_distinct\ndef test_sum_without_distinct():\n    # Test that Sum without DISTINCT works as expected\n    qs = QuerySet().annotate(sum=Sum('field'))\n    assert qs.query.get_aggregate_sql(Sum('field')) == \"SUM(field)\"\n\n@pytest.mark.test_distinct_not_allowed\ndef test_distinct_not_allowed():\n    # Test that setting distinct on an aggregate that doesn't support it raises an error\n    with pytest.raises(TypeError):\n        QuerySet().annotate(avg=Avg('field', distinct=True))._get_distinct_sql(Avg('field'))\n</patched>\n</file>\n\n<file>tests/test_aggregates_sql.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db.models import Avg, Sum\nfrom django.db.models.query import QuerySet\n\n@pytest.mark.test_distinct_avg_sql\ndef test_distinct_avg_sql():\n    # Test that Avg with DISTINCT generates correct SQL\n    qs = QuerySet().annotate(avg=Avg('field', distinct=True))\n    sql, params = qs.query.sql_query\n    assert \"AVG(DISTINCT field)\" in sql\n\n@pytest.mark.test_distinct_sum_sql\ndef test_distinct_sum_sql():\n    # Test that Sum with DISTINCT generates correct SQL\n    qs = QuerySet().annotate(sum=Sum('field', distinct=True))\n    sql, params = qs.query.sql_query\n    assert \"SUM(DISTINCT field)\" in sql\n</patched>\n</file>\n```",
  "patch": "--- a/tests/test_aggregates.py\n+++ b/tests/test_aggregates.py\n-# Empty if creating new file\n+import pytest\n+from django.db.models import Avg, Sum\n+from django.db.models.query import QuerySet\n+\n+@pytest.mark.test_distinct_avg\n+def test_distinct_avg():\n+    # Test that Avg supports DISTINCT\n+    qs = QuerySet().annotate(avg=Avg('field', distinct=True))\n+    assert qs.query.get_aggregate_sql(Avg('field', distinct=True)) == \"AVG(DISTINCT field)\"\n+\n+@pytest.mark.test_distinct_sum\n+def test_distinct_sum():\n+    # Test that Sum supports DISTINCT\n+    qs = QuerySet().annotate(sum=Sum('field', distinct=True))\n+    assert qs.query.get_aggregate_sql(Sum('field', distinct=True)) == \"SUM(DISTINCT field)\"\n+\n+@pytest.mark.test_avg_without_distinct\n+def test_avg_without_distinct():\n+    # Test that Avg without DISTINCT works as expected\n+    qs = QuerySet().annotate(avg=Avg('field'))\n+    assert qs.query.get_aggregate_sql(Avg('field')) == \"AVG(field)\"\n+\n+@pytest.mark.test_sum_without_distinct\n+def test_sum_without_distinct():\n+    # Test that Sum without DISTINCT works as expected\n+    qs = QuerySet().annotate(sum=Sum('field'))\n+    assert qs.query.get_aggregate_sql(Sum('field')) == \"SUM(field)\"\n+\n+@pytest.mark.test_distinct_not_allowed\n+def test_distinct_not_allowed():\n+    # Test that setting distinct on an aggregate that doesn't support it raises an error\n+    with pytest.raises(TypeError):\n+        QuerySet().annotate(avg=Avg('field', distinct=True))._get_distinct_sql(Avg('field'))\n\n--- a/tests/test_aggregates_sql.py\n+++ b/tests/test_aggregates_sql.py\n-# Empty if creating new file\n+import pytest\n+from django.db.models import Avg, Sum\n+from django.db.models.query import QuerySet\n+\n+@pytest.mark.test_distinct_avg_sql\n+def test_distinct_avg_sql():\n+    # Test that Avg with DISTINCT generates correct SQL\n+    qs = QuerySet().annotate(avg=Avg('field', distinct=True))\n+    sql, params = qs.query.sql_query\n+    assert \"AVG(DISTINCT field)\" in sql\n+\n+@pytest.mark.test_distinct_sum_sql\n+def test_distinct_sum_sql():\n+    # Test that Sum with DISTINCT generates correct SQL\n+    qs = QuerySet().annotate(sum=Sum('field', distinct=True))\n+    sql, params = qs.query.sql_query\n+    assert \"SUM(DISTINCT field)\" in sql\n"
}