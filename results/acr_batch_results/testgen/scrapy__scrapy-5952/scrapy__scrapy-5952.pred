{
  "instance_id": "scrapy__scrapy-5952",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_exporters.py</file>\n<original>\n</original>\n<patched>\nimport json\nimport pytest\nfrom scrapy.exporters import JsonItemExporter\nfrom scrapy.utils.test import get_crawler\n\n@pytest.fixture\ndef crawler():\n    return get_crawler()\n\ndef test_json_item_exporter_encoding_error(crawler):\n    exporter = JsonItemExporter(crawler.engine.output)\n    item = {'date': 1234}  # This will cause an encoding error\n    with pytest.raises(json.JSONDecodeError):\n        exporter.export_item(item)\n\ndef test_json_item_exporter_valid_item(crawler):\n    exporter = JsonItemExporter(crawler.engine.output)\n    item = {'date': '2018-01-01'}\n    exporter.export_item(item)\n    # Verify that the item was exported correctly\n    assert crawler.engine.output.getvalue().strip() == '[{\"date\": \"2018-01-01\"}]'\n\ndef test_json_item_exporter_multiple_items(crawler):\n    exporter = JsonItemExporter(crawler.engine.output)\n    item1 = {'date': '2018-01-01'}\n    item2 = {'date': '2018-01-02'}\n    exporter.export_item(item1)\n    exporter.export_item(item2)\n    # Verify that the items were exported correctly\n    assert json.loads(crawler.engine.output.getvalue()) == [\n        {'date': '2018-01-01'},\n        {'date': '2018-01-02'}\n    ]\n\ndef test_json_item_exporter_encoding_error_no_comma(crawler):\n    exporter = JsonItemExporter(crawler.engine.output)\n    item1 = {'date': 1234}  # This will cause an encoding error\n    item2 = {'date': '2018-01-02'}\n    exporter.export_item(item1)\n    exporter.export_item(item2)\n    # Verify that no comma was written for the invalid item\n    output = crawler.engine.output.getvalue()\n    assert output.strip() == '[{\"date\": \"2018-01-02\"}]'\n</patched>\n```",
  "patch": "--- a/tests/test_exporters.py\n+++ b/tests/test_exporters.py\n+import json\n+import pytest\n+from scrapy.exporters import JsonItemExporter\n+from scrapy.utils.test import get_crawler\n+\n+@pytest.fixture\n+def crawler():\n+    return get_crawler()\n+\n+def test_json_item_exporter_encoding_error(crawler):\n+    exporter = JsonItemExporter(crawler.engine.output)\n+    item = {'date': 1234}  # This will cause an encoding error\n+    with pytest.raises(json.JSONDecodeError):\n+        exporter.export_item(item)\n+\n+def test_json_item_exporter_valid_item(crawler):\n+    exporter = JsonItemExporter(crawler.engine.output)\n+    item = {'date': '2018-01-01'}\n+    exporter.export_item(item)\n+    # Verify that the item was exported correctly\n+    assert crawler.engine.output.getvalue().strip() == '[{\"date\": \"2018-01-01\"}]'\n+\n+def test_json_item_exporter_multiple_items(crawler):\n+    exporter = JsonItemExporter(crawler.engine.output)\n+    item1 = {'date': '2018-01-01'}\n+    item2 = {'date': '2018-01-02'}\n+    exporter.export_item(item1)\n+    exporter.export_item(item2)\n+    # Verify that the items were exported correctly\n+    assert json.loads(crawler.engine.output.getvalue()) == [\n+        {'date': '2018-01-01'},\n+        {'date': '2018-01-02'}\n+    ]\n+\n+def test_json_item_exporter_encoding_error_no_comma(crawler):\n+    exporter = JsonItemExporter(crawler.engine.output)\n+    item1 = {'date': 1234}  # This will cause an encoding error\n+    item2 = {'date': '2018-01-02'}\n+    exporter.export_item(item1)\n+    exporter.export_item(item2)\n+    # Verify that no comma was written for the invalid item\n+    output = crawler.engine.output.getvalue()\n+    assert output.strip() == '[{\"date\": \"2018-01-02\"}]'\n"
}