--- a/tests/test_migrations.py
+++ b/tests/test_migrations.py
-# Empty if creating new file
+import os
+import tempfile
+import pytest
+from django.db import migrations
+from django.db.migrations.loader import MigrationLoader
+
+@pytest.fixture
+def temporary_directory():
+    with tempfile.TemporaryDirectory() as temp_dir:
+        yield temp_dir
+
+def test_load_disk_with_namespace_package(temporary_directory):
+    # Create a namespace package
+    package_dir = os.path.join(temporary_directory, 'migrations')
+    os.makedirs(package_dir)
+    # Don't create __init__.py file
+
+    # Create a migration file
+    migration_file = os.path.join(package_dir, '0001_initial.py')
+    with open(migration_file, 'w') as f:
+        f.write('from django.db import migrations\n')
+
+    # Load the migrations
+    loader = MigrationLoader()
+    loader.load_disk()
+
+    # Check if the migration is loaded
+    assert 'migrations' in loader.migrated_apps
+
+def test_load_disk_with_regular_package(temporary_directory):
+    # Create a regular package
+    package_dir = os.path.join(temporary_directory, 'migrations')
+    os.makedirs(package_dir)
+    init_file = os.path.join(package_dir, '__init__.py')
+    open(init_file, 'w').close()
+
+    # Create a migration file
+    migration_file = os.path.join(package_dir, '0001_initial.py')
+    with open(migration_file, 'w') as f:
+        f.write('from django.db import migrations\n')
+
+    # Load the migrations
+    loader = MigrationLoader()
+    loader.load_disk()
+
+    # Check if the migration is loaded
+    assert 'migrations' in loader.migrated_apps
+
+def test_load_disk_without_init_file(temporary_directory):
+    # Create a directory without __init__.py
+    package_dir = os.path.join(temporary_directory, 'migrations')
+    os.makedirs(package_dir)
+
+    # Create a migration file
+    migration_file = os.path.join(package_dir, '0001_initial.py')
+    with open(migration_file, 'w') as f:
+        f.write('from django.db import migrations\n')
+
+    # Load the migrations
+    loader = MigrationLoader()
+    loader.load_disk()
+
+    # Check if the migration is loaded
+    assert 'migrations' in loader.migrated_apps
