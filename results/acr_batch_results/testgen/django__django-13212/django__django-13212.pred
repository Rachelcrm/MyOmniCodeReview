{
  "instance_id": "django__django-13212",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of including the provided value in the `ValidationError` message, we need to modify the validators and the `ValidationError` class. \n\nHere are the test modifications:\n\n```\n<file>tests/test_core/test_validators.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.core.exceptions import ValidationError\nfrom django.core.validators import EmailValidator, RegexValidator\n\ndef test_email_validator_with_value():\n    validator = EmailValidator()\n    with pytest.raises(ValidationError) as e:\n        validator('invalid_email')\n    assert 'Enter a valid email address.' in str(e.value)\n    assert 'invalid_email' in str(e.value)\n\ndef test_regex_validator_with_value():\n    validator = RegexValidator(r'^\\d+$', message='Must be a number')\n    with pytest.raises(ValidationError) as e:\n        validator('not a number')\n    assert 'Must be a number' in str(e.value)\n    assert 'not a number' in str(e.value)\n</patched>\n```\n\n```\n<file>tests/test_core/exceptions.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.core.exceptions import ValidationError\n\ndef test_validation_error_with_value():\n    try:\n        raise ValidationError('Error message', params={'value': 'invalid_value'})\n    except ValidationError as e:\n        assert 'Error message' in str(e)\n        assert 'invalid_value' in str(e)\n</patched>\n```",
  "patch": "--- a/tests/test_core/test_validators.py\n+++ b/tests/test_core/test_validators.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.core.exceptions import ValidationError\n+from django.core.validators import EmailValidator, RegexValidator\n+\n+def test_email_validator_with_value():\n+    validator = EmailValidator()\n+    with pytest.raises(ValidationError) as e:\n+        validator('invalid_email')\n+    assert 'Enter a valid email address.' in str(e.value)\n+    assert 'invalid_email' in str(e.value)\n+\n+def test_regex_validator_with_value():\n+    validator = RegexValidator(r'^\\d+$', message='Must be a number')\n+    with pytest.raises(ValidationError) as e:\n+        validator('not a number')\n+    assert 'Must be a number' in str(e.value)\n+    assert 'not a number' in str(e.value)\n\n--- a/tests/test_core/exceptions.py\n+++ b/tests/test_core/exceptions.py\n-# Empty if creating new file\n+import pytest\n+from django.core.exceptions import ValidationError\n+\n+def test_validation_error_with_value():\n+    try:\n+        raise ValidationError('Error message', params={'value': 'invalid_value'})\n+    except ValidationError as e:\n+        assert 'Error message' in str(e)\n+        assert 'invalid_value' in str(e)\n"
}