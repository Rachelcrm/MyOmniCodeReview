{
  "instance_id": "django__django-14559",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of including the number of rows matched in the `bulk_update()` return value, we need to create comprehensive tests that cover this functionality. \n\nThe tests should verify that `bulk_update()` returns the correct number of rows matched, handles empty lists of objects, and works correctly with batch sizes.\n\nHere is a test suite that thoroughly covers the described issue:\n\n```\n<file>tests/test_models.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.db.models import QuerySet\n\n@pytest.fixture\ndef author():\n    return models.Author.objects.create(name='Author1')\n\n@pytest.fixture\ndef book():\n    return models.Book.objects.create(title='Book1', author_id=1)\n\n@pytest.mark.test_bulk_update_return_value\ndef test_bulk_update_return_value(author, book):\n    another_book = models.Book.objects.create(title='Book2', author_id=1)\n    updated = models.Book.objects.bulk_update([book, another_book], ['title'])\n    assert updated == 2\n\n@pytest.mark.test_bulk_update_empty_list\ndef test_bulk_update_empty_list(author):\n    updated = models.Book.objects.bulk_update([], ['title'])\n    assert updated == 0\n\n@pytest.mark.test_bulk_update_batch_size\ndef test_bulk_update_batch_size(author, book):\n    another_book = models.Book.objects.create(title='Book2', author_id=1)\n    updated = models.Book.objects.bulk_update([book, another_book], ['title'], batch_size=1)\n    assert updated == 2\n\n@pytest.mark.test_bulk_update_concrete_fields\ndef test_bulk_update_concrete_fields(author, book):\n    another_book = models.Book.objects.create(title='Book2', author_id=1)\n    updated = models.Book.objects.bulk_update([book, another_book], ['title'])\n    assert updated == 2\n\n@pytest.mark.test_bulk_update_m2m_fields\ndef test_bulk_update_m2m_fields(author, book):\n    with pytest.raises(ValueError):\n        models.Book.objects.bulk_update([book], ['categories'])\n\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n\nclass Book(models.Model):\n    title = models.CharField(max_length=100)\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n    categories = models.ManyToManyField('Category')\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n</patched>\n```",
  "patch": "--- a/tests/test_models.py\n+++ b/tests/test_models.py\n-# Empty if creating new file\n+import pytest\n+from django.db import models\n+from django.db.models import QuerySet\n+\n+@pytest.fixture\n+def author():\n+    return models.Author.objects.create(name='Author1')\n+\n+@pytest.fixture\n+def book():\n+    return models.Book.objects.create(title='Book1', author_id=1)\n+\n+@pytest.mark.test_bulk_update_return_value\n+def test_bulk_update_return_value(author, book):\n+    another_book = models.Book.objects.create(title='Book2', author_id=1)\n+    updated = models.Book.objects.bulk_update([book, another_book], ['title'])\n+    assert updated == 2\n+\n+@pytest.mark.test_bulk_update_empty_list\n+def test_bulk_update_empty_list(author):\n+    updated = models.Book.objects.bulk_update([], ['title'])\n+    assert updated == 0\n+\n+@pytest.mark.test_bulk_update_batch_size\n+def test_bulk_update_batch_size(author, book):\n+    another_book = models.Book.objects.create(title='Book2', author_id=1)\n+    updated = models.Book.objects.bulk_update([book, another_book], ['title'], batch_size=1)\n+    assert updated == 2\n+\n+@pytest.mark.test_bulk_update_concrete_fields\n+def test_bulk_update_concrete_fields(author, book):\n+    another_book = models.Book.objects.create(title='Book2', author_id=1)\n+    updated = models.Book.objects.bulk_update([book, another_book], ['title'])\n+    assert updated == 2\n+\n+@pytest.mark.test_bulk_update_m2m_fields\n+def test_bulk_update_m2m_fields(author, book):\n+    with pytest.raises(ValueError):\n+        models.Book.objects.bulk_update([book], ['categories'])\n+\n+class Author(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+class Book(models.Model):\n+    title = models.CharField(max_length=100)\n+    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n+    categories = models.ManyToManyField('Category')\n+\n+class Category(models.Model):\n+    name = models.CharField(max_length=100)\n"
}