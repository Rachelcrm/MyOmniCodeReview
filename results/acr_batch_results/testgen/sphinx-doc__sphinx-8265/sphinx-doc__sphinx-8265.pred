{
  "instance_id": "sphinx-doc__sphinx-8265",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of the docstring default argument being broken in HTML, specifically with the `add_lines` method in the `pyvista` project, we need to write comprehensive pytest unit tests.\n\nFirst, let's consider the requirements and critical details provided:\n\n1. **Reproduce the bug or test the feature**: The tests should reproduce the bug or test the feature described.\n2. **Include at least one test that fails before the fix is applied**: To demonstrate the bug.\n3. **Include tests that pass after the fix is applied**: To verify the fix works.\n4. **Follow pytest best practices and conventions**: Use pytest fixtures, assertions, and parametrize where applicable.\n5. **Be placed in the appropriate test file within the existing test suite**: Identify the correct test file or create a new one if necessary.\n6. **Use descriptive test names**: Explain what is being tested.\n7. **Include proper setup and teardown if needed**: Use pytest fixtures for setup and teardown.\n8. **Test both the failing case and edge cases**: Ensure tests cover various scenarios.\n\nGiven the issue with the `add_lines` method and its documentation, let's create a test file or modify an existing one to include tests for this functionality.\n\nAssuming the tests will be placed in a file related to plotting or the `BasePlotter` class, let's proceed with creating/modifying a test file.\n\n```\n<file>tests/test_plotting.py</file>\n<original>\n# Original tests or empty if new file\n</original>\n<patched>\nimport pytest\nimport pyvista as pv\nfrom pyvista import BasePlotter\n\ndef test_add_lines_docstring():\n    \"\"\"Test the docstring of add_lines method.\"\"\"\n    plotter = BasePlotter()\n    # Test that the docstring is correctly formatted\n    assert \"add_lines(lines, color=(1, 1, 1), width=5, label=None, name=None)\" in plotter.add_lines.__doc__\n\ndef test_add_lines_default_args():\n    \"\"\"Test default arguments of add_lines method.\"\"\"\n    plotter = BasePlotter()\n    lines = [(0, 0, 0), (1, 1, 1)]\n    actor = plotter.add_lines(lines)\n    # Additional assertions based on expected behavior\n\n@pytest.mark.parametrize(\"color\", [(1, 1, 1), (255, 255, 255), ((1, 1, 1),)])\ndef test_add_lines_color(color):\n    \"\"\"Test add_lines with different color inputs.\"\"\"\n    plotter = BasePlotter()\n    lines = [(0, 0, 0), (1, 1, 1)]\n    actor = plotter.add_lines(lines, color=color)\n    # Additional assertions based on expected behavior\n\n</patched>\n```\n\nThis patch creates a new test file or modifies an existing one to include tests for the `add_lines` method's docstring and its functionality with different inputs, especially focusing on the default argument formatting issue. \n\nPlease adjust the file path and test logic according to the actual project structure and requirements. \n\nFor the `stringify_signature` function, which might be responsible for the incorrect formatting of default arguments, additional tests could be written to ensure it handles tuples correctly:\n\n```\n<file>tests/test_autodoc.py</file>\n<original>\n# Original tests or empty if new file\n</original>\n<patched>\nimport pytest\nfrom sphinx.ext.autodoc import stringify_signature\n\ndef test_stringify_signature_tuples():\n    \"\"\"Test stringify_signature with tuple default values.\"\"\"\n    sig = inspect.signature(lambda x, y=(1, 2): x + y)\n    assert stringify_signature(sig) == \"(x, y=(1, 2))\"\n\ndef test_stringify_signature_non_tuples():\n    \"\"\"Test stringify_signature with non-tuple default values.\"\"\"\n    sig = inspect.signature(lambda x, y=5: x + y)\n    assert stringify_signature(sig) == \"(x, y=5)\"\n</patched>\n```",
  "patch": "--- a/tests/test_plotting.py\n+++ b/tests/test_plotting.py\n-# Original tests or empty if new file\n+import pytest\n+import pyvista as pv\n+from pyvista import BasePlotter\n+\n+def test_add_lines_docstring():\n+    \"\"\"Test the docstring of add_lines method.\"\"\"\n+    plotter = BasePlotter()\n+    # Test that the docstring is correctly formatted\n+    assert \"add_lines(lines, color=(1, 1, 1), width=5, label=None, name=None)\" in plotter.add_lines.__doc__\n+\n+def test_add_lines_default_args():\n+    \"\"\"Test default arguments of add_lines method.\"\"\"\n+    plotter = BasePlotter()\n+    lines = [(0, 0, 0), (1, 1, 1)]\n+    actor = plotter.add_lines(lines)\n+    # Additional assertions based on expected behavior\n+\n+@pytest.mark.parametrize(\"color\", [(1, 1, 1), (255, 255, 255), ((1, 1, 1),)])\n+def test_add_lines_color(color):\n+    \"\"\"Test add_lines with different color inputs.\"\"\"\n+    plotter = BasePlotter()\n+    lines = [(0, 0, 0), (1, 1, 1)]\n+    actor = plotter.add_lines(lines, color=color)\n+    # Additional assertions based on expected behavior\n\n--- a/tests/test_autodoc.py\n+++ b/tests/test_autodoc.py\n-# Original tests or empty if new file\n+import pytest\n+from sphinx.ext.autodoc import stringify_signature\n+\n+def test_stringify_signature_tuples():\n+    \"\"\"Test stringify_signature with tuple default values.\"\"\"\n+    sig = inspect.signature(lambda x, y=(1, 2): x + y)\n+    assert stringify_signature(sig) == \"(x, y=(1, 2))\"\n+\n+def test_stringify_signature_non_tuples():\n+    \"\"\"Test stringify_signature with non-tuple default values.\"\"\"\n+    sig = inspect.signature(lambda x, y=5: x + y)\n+    assert stringify_signature(sig) == \"(x, y=5)\"\n"
}