{
  "instance_id": "astropy__astropy-13236",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_table.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nimport numpy as np\nfrom astropy.table import Table, Column\nfrom astropy import warnings\n\ndef test_structured_ndarray_to_column():\n    # Create a structured ndarray\n    data = np.array([(1, 2.), (3, 4.)], dtype=[('a', int), ('b', float)])\n\n    # Add it to a table\n    table = Table(data)\n\n    # Check that it was added as a Column\n    assert isinstance(table['a'], Column)\n    assert isinstance(table['b'], Column)\n\ndef test_structured_ndarray_to_ndarray_mixin_warning():\n    # Create a structured ndarray\n    data = np.array([(1, 2.), (3, 4.)], dtype=[('a', int), ('b', float)])\n\n    # Capture the warning\n    with warnings.catch_warnings(record=True) as w:\n        Table(data)\n\n    # Check that the warning was raised\n    assert len(w) == 1\n    assert issubclass(w[0].category, FutureWarning)\n    assert \"Structured arrays will be added as Column instances\" in str(w[0].message)\n\ndef test_homogeneous_ndarray_to_column():\n    # Create a homogeneous ndarray\n    data = np.array([1, 2, 3])\n\n    # Add it to a table\n    table = Table(data)\n\n    # Check that it was added as a Column\n    assert isinstance(table[0], Column)\n\ndef test_ndarray_to_column_no_warning():\n    # Create a ndarray\n    data = np.array([1, 2, 3])\n\n    # Capture the warning\n    with warnings.catch_warnings(record=True) as w:\n        Table(data)\n\n    # Check that no warning was raised\n    assert len(w) == 0\n</patched>\n```",
  "patch": "--- a/tests/test_table.py\n+++ b/tests/test_table.py\n-# Original code here (if modifying existing file)\n+import pytest\n+import numpy as np\n+from astropy.table import Table, Column\n+from astropy import warnings\n+\n+def test_structured_ndarray_to_column():\n+    # Create a structured ndarray\n+    data = np.array([(1, 2.), (3, 4.)], dtype=[('a', int), ('b', float)])\n+\n+    # Add it to a table\n+    table = Table(data)\n+\n+    # Check that it was added as a Column\n+    assert isinstance(table['a'], Column)\n+    assert isinstance(table['b'], Column)\n+\n+def test_structured_ndarray_to_ndarray_mixin_warning():\n+    # Create a structured ndarray\n+    data = np.array([(1, 2.), (3, 4.)], dtype=[('a', int), ('b', float)])\n+\n+    # Capture the warning\n+    with warnings.catch_warnings(record=True) as w:\n+        Table(data)\n+\n+    # Check that the warning was raised\n+    assert len(w) == 1\n+    assert issubclass(w[0].category, FutureWarning)\n+    assert \"Structured arrays will be added as Column instances\" in str(w[0].message)\n+\n+def test_homogeneous_ndarray_to_column():\n+    # Create a homogeneous ndarray\n+    data = np.array([1, 2, 3])\n+\n+    # Add it to a table\n+    table = Table(data)\n+\n+    # Check that it was added as a Column\n+    assert isinstance(table[0], Column)\n+\n+def test_ndarray_to_column_no_warning():\n+    # Create a ndarray\n+    data = np.array([1, 2, 3])\n+\n+    # Capture the warning\n+    with warnings.catch_warnings(record=True) as w:\n+        Table(data)\n+\n+    # Check that no warning was raised\n+    assert len(w) == 0\n"
}