{
  "instance_id": "pytest-dev__pytest-7982",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of symlinked directories not being collected since pytest 6.1.0, we need to modify the `visit` function in `src/_pytest/pathlib.py` to follow symlinks. Here's how we can approach this:\n\n```python\n<file>src/_pytest/pathlib.py</file>\n<original>\n    entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n    yield from entries\n    for entry in entries:\n        if entry.is_dir(follow_symlinks=False) and recurse(entry):\n            yield from visit(entry.path, recurse)\n</original>\n<patched>\n    entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n    yield from entries\n    for entry in entries:\n        if entry.is_dir(follow_symlinks=True) and recurse(entry):\n            yield from visit(entry.path, recurse)\n</patched>\n```\n\nAdditionally, we should add tests to ensure that symlinked directories are properly collected. \n\n```python\n<file>testing/test_collection.py</file>\n<original>\n</original>\n<patched>\nimport os\nimport pytest\nimport py.path\n\n@pytest.fixture\ndef temp_dir(tmp_path):\n    return tmp_path\n\ndef test_collect_symlink_directory(temp_dir):\n    # Create a directory and a symlink to it\n    dir_path = temp_dir.join(\"dir\")\n    dir_path.mkdir()\n    symlink_path = temp_dir.join(\"symlink\")\n    os.symlink(str(dir_path), str(symlink_path))\n\n    # Create a collector and collect the symlink\n    class Collector:\n        def __init__(self, path):\n            self.path = py.path.local(path)\n\n        def collect(self):\n            yield from visit(str(self.path), recurse=True)\n\n    collector = Collector(str(temp_dir))\n    collected = list(collector.collect())\n\n    # Check if the symlink was collected\n    assert len(collected) > 0\n    assert any(item.path == str(dir_path) for item in collected)\n\ndef test_collect_symlink_file(temp_dir):\n    # Create a file and a symlink to it\n    file_path = temp_dir.join(\"file\")\n    file_path.write(\"content\")\n    symlink_path = temp_dir.join(\"symlink\")\n    os.symlink(str(file_path), str(symlink_path))\n\n    # Create a collector and collect the symlink\n    class Collector:\n        def __init__(self, path):\n            self.path = py.path.local(path)\n\n        def collect(self):\n            yield from visit(str(self.path), recurse=True)\n\n    collector = Collector(str(temp_dir))\n    collected = list(collector.collect())\n\n    # Check if the symlink was collected\n    assert len(collected) > 0\n    assert any(item.path == str(file_path) for item in collected)\n</patched>\n```",
  "patch": "--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n-    entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n-    yield from entries\n-    for entry in entries:\n-        if entry.is_dir(follow_symlinks=False) and recurse(entry):\n-            yield from visit(entry.path, recurse)\n+    entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n+    yield from entries\n+    for entry in entries:\n+        if entry.is_dir(follow_symlinks=True) and recurse(entry):\n+            yield from visit(entry.path, recurse)\n\n--- a/testing/test_collection.py\n+++ b/testing/test_collection.py\n+import os\n+import pytest\n+import py.path\n+\n+@pytest.fixture\n+def temp_dir(tmp_path):\n+    return tmp_path\n+\n+def test_collect_symlink_directory(temp_dir):\n+    # Create a directory and a symlink to it\n+    dir_path = temp_dir.join(\"dir\")\n+    dir_path.mkdir()\n+    symlink_path = temp_dir.join(\"symlink\")\n+    os.symlink(str(dir_path), str(symlink_path))\n+\n+    # Create a collector and collect the symlink\n+    class Collector:\n+        def __init__(self, path):\n+            self.path = py.path.local(path)\n+\n+        def collect(self):\n+            yield from visit(str(self.path), recurse=True)\n+\n+    collector = Collector(str(temp_dir))\n+    collected = list(collector.collect())\n+\n+    # Check if the symlink was collected\n+    assert len(collected) > 0\n+    assert any(item.path == str(dir_path) for item in collected)\n+\n+def test_collect_symlink_file(temp_dir):\n+    # Create a file and a symlink to it\n+    file_path = temp_dir.join(\"file\")\n+    file_path.write(\"content\")\n+    symlink_path = temp_dir.join(\"symlink\")\n+    os.symlink(str(file_path), str(symlink_path))\n+\n+    # Create a collector and collect the symlink\n+    class Collector:\n+        def __init__(self, path):\n+            self.path = py.path.local(path)\n+\n+        def collect(self):\n+            yield from visit(str(self.path), recurse=True)\n+\n+    collector = Collector(str(temp_dir))\n+    collected = list(collector.collect())\n+\n+    # Check if the symlink was collected\n+    assert len(collected) > 0\n+    assert any(item.path == str(file_path) for item in collected)\n"
}