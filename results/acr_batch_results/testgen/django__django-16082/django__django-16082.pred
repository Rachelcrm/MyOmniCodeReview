{
  "instance_id": "django__django-16082",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_functions.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db.models import DecimalField, IntegerField\nfrom django.db.models.functions import Mod\n\n@pytest.mark.testcases\ndef test_mod_output_field():\n    # Test that the output field of MOD is DecimalField when inputs are Decimal and Integer\n    mod_expr = Mod(DecimalField(), IntegerField())\n    assert mod_expr.resolve_output_field().__class__ == DecimalField\n\n@pytest.mark.testcases\ndef test_mod_output_field_both_decimal():\n    # Test that the output field of MOD is DecimalField when inputs are both Decimal\n    mod_expr = Mod(DecimalField(), DecimalField())\n    assert mod_expr.resolve_output_field().__class__ == DecimalField\n\n@pytest.mark.testcases\ndef test_mod_output_field_both_integer():\n    # Test that the output field of MOD is DecimalField when inputs are both Integer\n    mod_expr = Mod(IntegerField(), IntegerField())\n    assert mod_expr.resolve_output_field().__class__ == DecimalField\n</patched>\n```",
  "patch": "--- a/tests/test_functions.py\n+++ b/tests/test_functions.py\n-# Empty if creating new file\n+import pytest\n+from django.db.models import DecimalField, IntegerField\n+from django.db.models.functions import Mod\n+\n+@pytest.mark.testcases\n+def test_mod_output_field():\n+    # Test that the output field of MOD is DecimalField when inputs are Decimal and Integer\n+    mod_expr = Mod(DecimalField(), IntegerField())\n+    assert mod_expr.resolve_output_field().__class__ == DecimalField\n+\n+@pytest.mark.testcases\n+def test_mod_output_field_both_decimal():\n+    # Test that the output field of MOD is DecimalField when inputs are both Decimal\n+    mod_expr = Mod(DecimalField(), DecimalField())\n+    assert mod_expr.resolve_output_field().__class__ == DecimalField\n+\n+@pytest.mark.testcases\n+def test_mod_output_field_both_integer():\n+    # Test that the output field of MOD is DecimalField when inputs are both Integer\n+    mod_expr = Mod(IntegerField(), IntegerField())\n+    assert mod_expr.resolve_output_field().__class__ == DecimalField\n"
}