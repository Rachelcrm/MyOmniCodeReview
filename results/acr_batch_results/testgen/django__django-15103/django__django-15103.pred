{
  "instance_id": "django__django-15103",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_utils_html.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.utils.html import json_script\nfrom django.test import SimpleTestCase\n\nclass TestJSONScript(SimpleTestCase):\n def test_json_script_with_element_id(self):\n value = {\"key\": \"value\"}\n element_id = \"my_script\"\n result = json_script(value, element_id)\n assert f'<script id=\"{element_id}\" type=\"application/json\">' in result\n\n def test_json_script_without_element_id(self):\n value = {\"key\": \"value\"}\n result = json_script(value)\n assert '<script type=\"application/json\">' in result\n assert 'id=\"' not in result\n\n def test_json_script_with_empty_value(self):\n result = json_script(\"\")\n assert '<script type=\"application/json\"></script>' in result\n\n def test_json_script_with_none_value(self):\n result = json_script(None)\n assert '<script type=\"application/json\">null</script>' in result\n\n def test_json_script_with_non_serializable_value(self):\n with pytest.raises(TypeError):\n json_script(object())\n\n def test_json_script_with_element_id_none(self):\n value = {\"key\": \"value\"}\n element_id = None\n result = json_script(value, element_id)\n assert '<script type=\"application/json\">' in result\n assert 'id=\"' not in result\n</patched>\n```",
  "patch": "--- a/tests/test_utils_html.py\n+++ b/tests/test_utils_html.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.utils.html import json_script\n+from django.test import SimpleTestCase\n+\n+class TestJSONScript(SimpleTestCase):\n+ def test_json_script_with_element_id(self):\n+ value = {\"key\": \"value\"}\n+ element_id = \"my_script\"\n+ result = json_script(value, element_id)\n+ assert f'<script id=\"{element_id}\" type=\"application/json\">' in result\n+\n+ def test_json_script_without_element_id(self):\n+ value = {\"key\": \"value\"}\n+ result = json_script(value)\n+ assert '<script type=\"application/json\">' in result\n+ assert 'id=\"' not in result\n+\n+ def test_json_script_with_empty_value(self):\n+ result = json_script(\"\")\n+ assert '<script type=\"application/json\"></script>' in result\n+\n+ def test_json_script_with_none_value(self):\n+ result = json_script(None)\n+ assert '<script type=\"application/json\">null</script>' in result\n+\n+ def test_json_script_with_non_serializable_value(self):\n+ with pytest.raises(TypeError):\n+ json_script(object())\n+\n+ def test_json_script_with_element_id_none(self):\n+ value = {\"key\": \"value\"}\n+ element_id = None\n+ result = json_script(value, element_id)\n+ assert '<script type=\"application/json\">' in result\n+ assert 'id=\"' not in result\n"
}