--- a/tests/test_admin_views.py
+++ b/tests/test_admin_views.py
-# Empty if creating new file
+import pytest
+from django.contrib.admin.views.main import ChangeList
+from django.contrib.admin.options import ModelAdmin
+from django.db import transaction
+from django.test import RequestFactory
+
+@pytest.fixture
+def request_factory():
+    return RequestFactory()
+
+def test_changelist_view_transaction(request_factory):
+    """
+    Test that changelist_view is wrapped in a transaction.
+    """
+    # Create a ModelAdmin instance
+    class TestModelAdmin(ModelAdmin):
+        list_editable = ['field1']
+
+    # Create a request
+    request = request_factory.post('/')
+
+    # Call changelist_view
+    with transaction.atomic():
+        TestModelAdmin().changelist_view(request)
+
+    # Assert that the transaction was committed
+    assert transaction.get_connection().transaction.atomic_rollback
+
+def test_changelist_view_rollback_on_error(request_factory):
+    """
+    Test that changelist_view rolls back the transaction on error.
+    """
+    # Create a ModelAdmin instance
+    class TestModelAdmin(ModelAdmin):
+        list_editable = ['field1']
+
+    # Create a request
+    request = request_factory.post('/')
+
+    # Mock an error during save
+    def mock_save_model(self, request, obj, form, change):
+        raise Exception('Mock error')
+
+    TestModelAdmin.save_model = mock_save_model
+
+    # Call changelist_view
+    with pytest.raises(Exception):
+        TestModelAdmin().changelist_view(request)
+
+    # Assert that the transaction was rolled back
+    assert not transaction.get_connection().transaction.atomic_rollback

--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
-    if formset.is_valid():
-        changecount = 0
-        for form in formset.forms:
-            if form.has_changed():
-                obj = self.save_form(request, form, change=True)
-                self.save_model(request, obj, form, change=True)
-                self.save_related(request, form, formsets=[], change=True)
-                change_msg = self.construct_change_message(request, form, None)
-                self.log_change(request, obj, change_msg)
-                changecount += 1
+    if formset.is_valid():
+        changecount = 0
+        with transaction.atomic():
+            for form in formset.forms:
+                if form.has_changed():
+                    obj = self.save_form(request, form, change=True)
+                    self.save_model(request, obj, form, change=True)
+                    self.save_related(request, form, formsets=[], change=True)
+                    change_msg = self.construct_change_message(request, form, None)
+                    self.log_change(request, obj, change_msg)
+                    changecount += 1
