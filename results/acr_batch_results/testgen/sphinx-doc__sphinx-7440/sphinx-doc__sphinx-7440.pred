{
  "instance_id": "sphinx-doc__sphinx-7440",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_glossary.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom sphinx.domains.std import Glossary\n\ndef test_glossary_term_case_sensitivity():\n    \"\"\"Test that glossary terms are handled correctly with respect to case sensitivity.\"\"\"\n    glossary = Glossary()\n    terms = [\"MySQL\", \"mysql\", \"MYSQL\"]\n\n    # Assume a method to add terms to the glossary\n    for term in terms:\n        glossary.add_term(term)\n\n    # Check that terms are treated as distinct\n    assert len(glossary.get_terms()) == 1  # If case-insensitive\n\ndef test_glossary_term_duplicates():\n    \"\"\"Test that duplicate glossary terms are handled correctly.\"\"\"\n    glossary = Glossary()\n    terms = [\"MySQL\", \"mysql\"]\n\n    for term in terms:\n        glossary.add_term(term)\n\n    # Check that duplicate terms are reported or handled correctly\n    assert len(glossary.get_terms()) == 1\n\ndef test_glossary_configuration_case_sensitive():\n    \"\"\"Test that glossary configuration options work correctly.\"\"\"\n    glossary = Glossary()\n    glossary.option_spec = {\n        'sorted': False,\n        'case_sensitive': True,\n    }\n\n    terms = [\"MySQL\", \"mysql\"]\n\n    for term in terms:\n        glossary.add_term(term)\n\n    # Check that terms are treated as distinct when case_sensitive is True\n    assert len(glossary.get_terms()) == 2\n\ndef test_glossary_configuration_case_insensitive():\n    \"\"\"Test that glossary configuration options work correctly.\"\"\"\n    glossary = Glossary()\n    glossary.option_spec = {\n        'sorted': False,\n        'case_sensitive': False,\n    }\n\n    terms = [\"MySQL\", \"mysql\"]\n\n    for term in terms:\n        glossary.add_term(term)\n\n    # Check that terms are treated as the same when case_sensitive is False\n    assert len(glossary.get_terms()) == 1\n</patched>\n```",
  "patch": "--- a/tests/test_glossary.py\n+++ b/tests/test_glossary.py\n-# Empty if creating new file\n+import pytest\n+from sphinx.domains.std import Glossary\n+\n+def test_glossary_term_case_sensitivity():\n+    \"\"\"Test that glossary terms are handled correctly with respect to case sensitivity.\"\"\"\n+    glossary = Glossary()\n+    terms = [\"MySQL\", \"mysql\", \"MYSQL\"]\n+\n+    # Assume a method to add terms to the glossary\n+    for term in terms:\n+        glossary.add_term(term)\n+\n+    # Check that terms are treated as distinct\n+    assert len(glossary.get_terms()) == 1  # If case-insensitive\n+\n+def test_glossary_term_duplicates():\n+    \"\"\"Test that duplicate glossary terms are handled correctly.\"\"\"\n+    glossary = Glossary()\n+    terms = [\"MySQL\", \"mysql\"]\n+\n+    for term in terms:\n+        glossary.add_term(term)\n+\n+    # Check that duplicate terms are reported or handled correctly\n+    assert len(glossary.get_terms()) == 1\n+\n+def test_glossary_configuration_case_sensitive():\n+    \"\"\"Test that glossary configuration options work correctly.\"\"\"\n+    glossary = Glossary()\n+    glossary.option_spec = {\n+        'sorted': False,\n+        'case_sensitive': True,\n+    }\n+\n+    terms = [\"MySQL\", \"mysql\"]\n+\n+    for term in terms:\n+        glossary.add_term(term)\n+\n+    # Check that terms are treated as distinct when case_sensitive is True\n+    assert len(glossary.get_terms()) == 2\n+\n+def test_glossary_configuration_case_insensitive():\n+    \"\"\"Test that glossary configuration options work correctly.\"\"\"\n+    glossary = Glossary()\n+    glossary.option_spec = {\n+        'sorted': False,\n+        'case_sensitive': False,\n+    }\n+\n+    terms = [\"MySQL\", \"mysql\"]\n+\n+    for term in terms:\n+        glossary.add_term(term)\n+\n+    # Check that terms are treated as the same when case_sensitive is False\n+    assert len(glossary.get_terms()) == 1\n"
}