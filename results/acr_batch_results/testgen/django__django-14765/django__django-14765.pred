{
  "instance_id": "django__django-14765",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_migrations/test_state.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db.migrations.state import ProjectState\n\ndef test_projectstate_real_apps_set():\n    # Test that ProjectState.__init__ accepts a set for real_apps\n    real_apps = {\"app1\", \"app2\"}\n    project_state = ProjectState(real_apps=real_apps)\n    assert project_state.real_apps == real_apps\n\ndef test_projectstate_real_apps_none():\n    # Test that ProjectState.__init__ defaults to an empty set for real_apps=None\n    project_state = ProjectState(real_apps=None)\n    assert project_state.real_apps == set()\n\ndef test_projectstate_real_apps_not_set():\n    # Test that ProjectState.__init__ raises an AssertionError for non-set real_apps\n    with pytest.raises(AssertionError):\n        ProjectState(real_apps=\"not a set\")\n\ndef test_projectstate_real_apps_empty_set():\n    # Test that ProjectState.__init__ accepts an empty set for real_apps\n    real_apps = set()\n    project_state = ProjectState(real_apps=real_apps)\n    assert project_state.real_apps == real_apps\n</patched>\n```",
  "patch": "--- a/tests/test_migrations/test_state.py\n+++ b/tests/test_migrations/test_state.py\n-# Empty if creating new file\n+import pytest\n+from django.db.migrations.state import ProjectState\n+\n+def test_projectstate_real_apps_set():\n+    # Test that ProjectState.__init__ accepts a set for real_apps\n+    real_apps = {\"app1\", \"app2\"}\n+    project_state = ProjectState(real_apps=real_apps)\n+    assert project_state.real_apps == real_apps\n+\n+def test_projectstate_real_apps_none():\n+    # Test that ProjectState.__init__ defaults to an empty set for real_apps=None\n+    project_state = ProjectState(real_apps=None)\n+    assert project_state.real_apps == set()\n+\n+def test_projectstate_real_apps_not_set():\n+    # Test that ProjectState.__init__ raises an AssertionError for non-set real_apps\n+    with pytest.raises(AssertionError):\n+        ProjectState(real_apps=\"not a set\")\n+\n+def test_projectstate_real_apps_empty_set():\n+    # Test that ProjectState.__init__ accepts an empty set for real_apps\n+    real_apps = set()\n+    project_state = ProjectState(real_apps=real_apps)\n+    assert project_state.real_apps == real_apps\n"
}