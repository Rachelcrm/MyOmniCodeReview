{
  "instance_id": "mwaskom__seaborn-3187",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_scales.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.ticker import ScalarFormatter\n\ndef test_scalar_formatter_offset():\n    # Create a sample plot\n    penguins = sns.load_dataset(\"penguins\")\n    penguins[\"body_mass_mg\"] = penguins[\"body_mass_g\"] * 1000\n\n    fig, ax = plt.subplots()\n    sns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", size=\"body_mass_mg\", ax=ax)\n\n    # Get the formatter\n    formatter = ax.yaxis.get_major_formatter()\n\n    # Check if the formatter is a ScalarFormatter\n    assert isinstance(formatter, ScalarFormatter)\n\n    # Get the offset\n    offset = formatter.get_offset()\n\n    # Check if the offset is correct\n    assert offset == 1000\n\n    # Clean up\n    plt.close(fig)\n\ndef test_legend_values():\n    # Create a sample plot\n    penguins = sns.load_dataset(\"penguins\")\n    penguins[\"body_mass_mg\"] = penguins[\"body_mass_g\"] * 1000\n\n    fig, ax = plt.subplots()\n    sns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", size=\"body_mass_mg\", ax=ax)\n\n    # Get the legend\n    legend = ax.legend()\n\n    # Check if the legend has the correct title\n    assert legend.get_title().get_text() == \"body_mass_mg\"\n\n    # Check if the legend values are correct\n    assert all([f\"{value:.1f} {chr(0xB0)}$\" in label.get_text() for value, label in zip([100, 500, 1000], legend.get_texts())])\n\n    # Clean up\n    plt.close(fig)\n\ndef test_large_range_legend():\n    # Create a sample plot with large range\n    penguins = sns.load_dataset(\"penguins\")\n    penguins[\"large_body_mass_mg\"] = penguins[\"body_mass_g\"] * 1e6\n\n    fig, ax = plt.subplots()\n    sns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", size=\"large_body_mass_mg\", ax=ax)\n\n    # Get the legend\n    legend = ax.legend()\n\n    # Check if the legend has the correct title\n    assert legend.get_title().get_text() == \"large_body_mass_mg\"\n\n    # Check if the legend values are correct\n    assert all([f\"{value / 1e6:.1f} M\" in label.get_text() for value, label in zip([1, 5, 10], legend.get_texts())])\n\n    # Clean up\n    plt.close(fig)\n</patched>\n```",
  "patch": "--- a/tests/test_scales.py\n+++ b/tests/test_scales.py\n-# Empty if creating new file\n+import pytest\n+import seaborn as sns\n+import matplotlib.pyplot as plt\n+from matplotlib.ticker import ScalarFormatter\n+\n+def test_scalar_formatter_offset():\n+    # Create a sample plot\n+    penguins = sns.load_dataset(\"penguins\")\n+    penguins[\"body_mass_mg\"] = penguins[\"body_mass_g\"] * 1000\n+\n+    fig, ax = plt.subplots()\n+    sns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", size=\"body_mass_mg\", ax=ax)\n+\n+    # Get the formatter\n+    formatter = ax.yaxis.get_major_formatter()\n+\n+    # Check if the formatter is a ScalarFormatter\n+    assert isinstance(formatter, ScalarFormatter)\n+\n+    # Get the offset\n+    offset = formatter.get_offset()\n+\n+    # Check if the offset is correct\n+    assert offset == 1000\n+\n+    # Clean up\n+    plt.close(fig)\n+\n+def test_legend_values():\n+    # Create a sample plot\n+    penguins = sns.load_dataset(\"penguins\")\n+    penguins[\"body_mass_mg\"] = penguins[\"body_mass_g\"] * 1000\n+\n+    fig, ax = plt.subplots()\n+    sns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", size=\"body_mass_mg\", ax=ax)\n+\n+    # Get the legend\n+    legend = ax.legend()\n+\n+    # Check if the legend has the correct title\n+    assert legend.get_title().get_text() == \"body_mass_mg\"\n+\n+    # Check if the legend values are correct\n+    assert all([f\"{value:.1f} {chr(0xB0)}$\" in label.get_text() for value, label in zip([100, 500, 1000], legend.get_texts())])\n+\n+    # Clean up\n+    plt.close(fig)\n+\n+def test_large_range_legend():\n+    # Create a sample plot with large range\n+    penguins = sns.load_dataset(\"penguins\")\n+    penguins[\"large_body_mass_mg\"] = penguins[\"body_mass_g\"] * 1e6\n+\n+    fig, ax = plt.subplots()\n+    sns.scatterplot(data=penguins, x=\"bill_length_mm\", y=\"bill_depth_mm\", size=\"large_body_mass_mg\", ax=ax)\n+\n+    # Get the legend\n+    legend = ax.legend()\n+\n+    # Check if the legend has the correct title\n+    assert legend.get_title().get_text() == \"large_body_mass_mg\"\n+\n+    # Check if the legend values are correct\n+    assert all([f\"{value / 1e6:.1f} M\" in label.get_text() for value, label in zip([1, 5, 10], legend.get_texts())])\n+\n+    # Clean up\n+    plt.close(fig)\n"
}