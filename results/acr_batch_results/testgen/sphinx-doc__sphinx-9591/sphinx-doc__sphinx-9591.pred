{
  "instance_id": "sphinx-doc__sphinx-9591",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_autodoc.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom sphinx import addnodes\nfrom sphinx.domains.python import PythonDomain\nfrom sphinx.ext.autodoc import PropertyDocumenter, DataDocumenter\nfrom sphinx.testing import util\nfrom sphinx.testing.util import assert_node\n\n@pytest.mark.sphinx('html', buildername='html')\ndef test_property_typehint_crossref(app, html_app):\n    \"\"\"Test typehint of property is cross-referenced.\"\"\"\n    app.add_domain(PythonDomain)\n\n    class Point:\n        \"\"\"A class representing a point.\n\n        Attributes:\n            x: Position X.\n            y: Position Y.\n        \"\"\"\n        x: int\n        y: int\n\n    class Square:\n        \"\"\"A class representing a square figure.\"\"\"\n        #: Square's start position (top-left corner).\n        start: Point\n        #: Square width.\n        width: int\n        #: Square height.\n        height: int\n\n        @property\n        def end(self) -> Point:\n            \"\"\"Square's end position (bottom-right corner).\"\"\"\n            return Point(self.start.x + self.width, self.start.y + self.height)\n\n    def test_func(app):\n        app.config.autodoc_typehints = True\n        doc = PropertyDocumenter(\n            name='end',\n            obj=Square.end,\n            parent=Square,\n        )\n        doc.option_spec = {}\n        yield doc\n\n    app.connect('autodoc-before-documentation', test_func)\n    html = html_app.build()\n\n    def get_nodes(html):\n        tree = html_app.parse(html)\n        nodes = []\n        for child in tree.traverse(addnodes.only):\n            if 'class' in child.attributes and 'autodoc' in child.attributes['class']:\n                nodes.extend(child.traverse(descendant=True))\n        return nodes\n\n    nodes = get_nodes(html)\n    assert_node(nodes, 'type', string='Point')\n\n@pytest.mark.sphinx('html', buildername='html')\ndef test_data_typehint_crossref(app, html_app):\n    \"\"\"Test typehint of data is cross-referenced.\"\"\"\n    app.add_domain(PythonDomain)\n\n    class Point:\n        \"\"\"A class representing a point.\n\n        Attributes:\n            x: Position X.\n            y: Position Y.\n        \"\"\"\n        x: int\n        y: int\n\n    class Square:\n        \"\"\"A class representing a square figure.\"\"\"\n        #: Square's start position (top-left corner).\n        start: Point\n        #: Square width.\n        width: int\n        #: Square height.\n        height: int\n\n    def test_func(app):\n        app.config.autodoc_typehints = True\n        doc = DataDocumenter(\n            name='start',\n            obj=Square.start,\n            parent=Square,\n        )\n        doc.option_spec = {}\n        yield doc\n\n    app.connect('autodoc-before-documentation', test_func)\n    html = html_app.build()\n\n    def get_nodes(html):\n        tree = html_app.parse(html)\n        nodes = []\n        for child in tree.traverse(addnodes.only):\n            if 'class' in child.attributes and 'autodoc' in child.attributes['class']:\n                nodes.extend(child.traverse(descendant=True))\n        return nodes\n\n    nodes = get_nodes(html)\n    assert_node(nodes, 'type', string='Point')\n</patched>\n</file>",
  "patch": "--- a/tests/test_autodoc.py\n+++ b/tests/test_autodoc.py\n-# Empty if creating new file\n+import pytest\n+from sphinx import addnodes\n+from sphinx.domains.python import PythonDomain\n+from sphinx.ext.autodoc import PropertyDocumenter, DataDocumenter\n+from sphinx.testing import util\n+from sphinx.testing.util import assert_node\n+\n+@pytest.mark.sphinx('html', buildername='html')\n+def test_property_typehint_crossref(app, html_app):\n+    \"\"\"Test typehint of property is cross-referenced.\"\"\"\n+    app.add_domain(PythonDomain)\n+\n+    class Point:\n+        \"\"\"A class representing a point.\n+\n+        Attributes:\n+            x: Position X.\n+            y: Position Y.\n+        \"\"\"\n+        x: int\n+        y: int\n+\n+    class Square:\n+        \"\"\"A class representing a square figure.\"\"\"\n+        #: Square's start position (top-left corner).\n+        start: Point\n+        #: Square width.\n+        width: int\n+        #: Square height.\n+        height: int\n+\n+        @property\n+        def end(self) -> Point:\n+            \"\"\"Square's end position (bottom-right corner).\"\"\"\n+            return Point(self.start.x + self.width, self.start.y + self.height)\n+\n+    def test_func(app):\n+        app.config.autodoc_typehints = True\n+        doc = PropertyDocumenter(\n+            name='end',\n+            obj=Square.end,\n+            parent=Square,\n+        )\n+        doc.option_spec = {}\n+        yield doc\n+\n+    app.connect('autodoc-before-documentation', test_func)\n+    html = html_app.build()\n+\n+    def get_nodes(html):\n+        tree = html_app.parse(html)\n+        nodes = []\n+        for child in tree.traverse(addnodes.only):\n+            if 'class' in child.attributes and 'autodoc' in child.attributes['class']:\n+                nodes.extend(child.traverse(descendant=True))\n+        return nodes\n+\n+    nodes = get_nodes(html)\n+    assert_node(nodes, 'type', string='Point')\n+\n+@pytest.mark.sphinx('html', buildername='html')\n+def test_data_typehint_crossref(app, html_app):\n+    \"\"\"Test typehint of data is cross-referenced.\"\"\"\n+    app.add_domain(PythonDomain)\n+\n+    class Point:\n+        \"\"\"A class representing a point.\n+\n+        Attributes:\n+            x: Position X.\n+            y: Position Y.\n+        \"\"\"\n+        x: int\n+        y: int\n+\n+    class Square:\n+        \"\"\"A class representing a square figure.\"\"\"\n+        #: Square's start position (top-left corner).\n+        start: Point\n+        #: Square width.\n+        width: int\n+        #: Square height.\n+        height: int\n+\n+    def test_func(app):\n+        app.config.autodoc_typehints = True\n+        doc = DataDocumenter(\n+            name='start',\n+            obj=Square.start,\n+            parent=Square,\n+        )\n+        doc.option_spec = {}\n+        yield doc\n+\n+    app.connect('autodoc-before-documentation', test_func)\n+    html = html_app.build()\n+\n+    def get_nodes(html):\n+        tree = html_app.parse(html)\n+        nodes = []\n+        for child in tree.traverse(addnodes.only):\n+            if 'class' in child.attributes and 'autodoc' in child.attributes['class']:\n+                nodes.extend(child.traverse(descendant=True))\n+        return nodes\n+\n+    nodes = get_nodes(html)\n+    assert_node(nodes, 'type', string='Point')\n"
}