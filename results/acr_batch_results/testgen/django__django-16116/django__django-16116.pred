{
  "instance_id": "django__django-16116",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of inconsistent behavior with `makemigrations --check` generating migrations, I will create a test suite that thoroughly covers the described functionality.\n\n```\n<file>tests/test_commands/makemigrations_check.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport os\nimport re\nimport sys\nfrom io import StringIO\nfrom unittest import mock\n\nimport pytest\nfrom django.core.management import call_command\nfrom django.core.management.base import CommandError\nfrom django.db import models\nfrom django.test import TestCase\n\nfrom .test_commands import get_migration_file\n\n@pytest.mark.testcases\nclass MakeMigrationsCheckTests(TestCase):\n    def setUp(self):\n        self.old_stdout, self.old_stderr = sys.stdout, sys.stderr\n        sys.stdout, sys.stderr = StringIO(), StringIO()\n        self.project_state = self.setup_test_environment(\n            verbosity=0,\n            interactive=False,\n        )\n        self.addCleanup(self.cleanup_test_environment)\n\n    def test_check_makemigrations_with_no_changes(self):\n        out = StringIO()\n        err = StringIO()\n        call_command(\"makemigrations\", \"--check\", stdout=out, stderr=err)\n        self.assertEqual(err.getvalue(), \"\")\n        self.assertEqual(out.getvalue(), \"No changes detected\\n\")\n\n    def test_check_makemigrations_with_changes(self):\n        with mock.patch(\n            \"django.core.management.commands.makemigrations.MigrationAutodetector\"\n        ) as mock_autodetector:\n            mock_autodetector.return_value.changes.return_value = {\"app\": [(\"add\", \"Field\", \"model\", \"app.Model\")]}\n            with pytest.raises(CommandError):\n                call_command(\"makemigrations\", \"--check\")\n\n    def test_check_makemigrations_with_conflicts(self):\n        with mock.patch(\n            \"django.core.management.commands.makemigrations.MigrationLoader\"\n        ) as mock_loader:\n            mock_loader.return_value.detect_conflicts.return_value = {\"app\": [\"Migration1\", \"Migration2\"]}\n            with pytest.raises(CommandError):\n                call_command(\"makemigrations\", \"--check\")\n\n    def test_makemigrations_with_check_and_dry_run(self):\n        out = StringIO()\n        err = StringIO()\n        call_command(\"makemigrations\", \"--check\", \"--dry-run\", stdout=out, stderr=err)\n        self.assertEqual(err.getvalue(), \"\")\n        self.assertEqual(out.getvalue(), \"\")\n\n    def test_makemigrations_with_check_and_merge(self):\n        with mock.patch(\n            \"django.core.management.commands.makemigrations.MigrationLoader\"\n        ) as mock_loader:\n            mock_loader.return_value.detect_conflicts.return_value = {\"app\": [\"Migration1\", \"Migration2\"]}\n            with pytest.raises(CommandError):\n                call_command(\"makemigrations\", \"--check\", \"--merge\")\n</patched>\n```",
  "patch": "--- a/tests/test_commands/makemigrations_check.py\n+++ b/tests/test_commands/makemigrations_check.py\n-# Empty if creating new file\n+import os\n+import re\n+import sys\n+from io import StringIO\n+from unittest import mock\n+\n+import pytest\n+from django.core.management import call_command\n+from django.core.management.base import CommandError\n+from django.db import models\n+from django.test import TestCase\n+\n+from .test_commands import get_migration_file\n+\n+@pytest.mark.testcases\n+class MakeMigrationsCheckTests(TestCase):\n+    def setUp(self):\n+        self.old_stdout, self.old_stderr = sys.stdout, sys.stderr\n+        sys.stdout, sys.stderr = StringIO(), StringIO()\n+        self.project_state = self.setup_test_environment(\n+            verbosity=0,\n+            interactive=False,\n+        )\n+        self.addCleanup(self.cleanup_test_environment)\n+\n+    def test_check_makemigrations_with_no_changes(self):\n+        out = StringIO()\n+        err = StringIO()\n+        call_command(\"makemigrations\", \"--check\", stdout=out, stderr=err)\n+        self.assertEqual(err.getvalue(), \"\")\n+        self.assertEqual(out.getvalue(), \"No changes detected\\n\")\n+\n+    def test_check_makemigrations_with_changes(self):\n+        with mock.patch(\n+            \"django.core.management.commands.makemigrations.MigrationAutodetector\"\n+        ) as mock_autodetector:\n+            mock_autodetector.return_value.changes.return_value = {\"app\": [(\"add\", \"Field\", \"model\", \"app.Model\")]}\n+            with pytest.raises(CommandError):\n+                call_command(\"makemigrations\", \"--check\")\n+\n+    def test_check_makemigrations_with_conflicts(self):\n+        with mock.patch(\n+            \"django.core.management.commands.makemigrations.MigrationLoader\"\n+        ) as mock_loader:\n+            mock_loader.return_value.detect_conflicts.return_value = {\"app\": [\"Migration1\", \"Migration2\"]}\n+            with pytest.raises(CommandError):\n+                call_command(\"makemigrations\", \"--check\")\n+\n+    def test_makemigrations_with_check_and_dry_run(self):\n+        out = StringIO()\n+        err = StringIO()\n+        call_command(\"makemigrations\", \"--check\", \"--dry-run\", stdout=out, stderr=err)\n+        self.assertEqual(err.getvalue(), \"\")\n+        self.assertEqual(out.getvalue(), \"\")\n+\n+    def test_makemigrations_with_check_and_merge(self):\n+        with mock.patch(\n+            \"django.core.management.commands.makemigrations.MigrationLoader\"\n+        ) as mock_loader:\n+            mock_loader.return_value.detect_conflicts.return_value = {\"app\": [\"Migration1\", \"Migration2\"]}\n+            with pytest.raises(CommandError):\n+                call_command(\"makemigrations\", \"--check\", \"--merge\")\n"
}