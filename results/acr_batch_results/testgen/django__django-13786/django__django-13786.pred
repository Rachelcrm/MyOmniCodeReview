{
  "instance_id": "django__django-13786",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_migrations/test_squashmigrations.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import migrations\n\n@pytest.mark.testcases\nclass TestSquashMigrations:\n    def test_squash_create_model_alter_model_options(self):\n        # Test that squashmigrations unsets model options when optimizing CreateModel and AlterModelOptions\n        create_model = migrations.operations.models.CreateModel(\n            name=\"TestModel\",\n            fields=[\n                (\"id\", migrations.AutoField()),\n            ],\n            options={\n                \"verbose_name\": \"Test Model\",\n                \"verbose_name_plural\": \"Test Models\",\n            },\n        )\n        alter_model_options = migrations.operations.models.AlterModelOptions(\n            name=\"TestModel\",\n            options={},\n        )\n\n        # Squash the operations\n        squashed_operations = create_model.reduce(alter_model_options, \"app_label\")\n\n        # Check that the resulting CreateModel operation has no options\n        assert len(squashed_operations) == 1\n        assert squashed_operations[0].options == {}\n\n    def test_squash_alter_model_options_create_model(self):\n        # Test that squashmigrations sets model options when optimizing AlterModelOptions and CreateModel\n        alter_model_options = migrations.operations.models.AlterModelOptions(\n            name=\"TestModel\",\n            options={\n                \"verbose_name\": \"New Test Model\",\n                \"verbose_name_plural\": \"New Test Models\",\n            },\n        )\n        create_model = migrations.operations.models.CreateModel(\n            name=\"TestModel\",\n            fields=[\n                (\"id\", migrations.AutoField()),\n            ],\n            options={\n                \"verbose_name\": \"Test Model\",\n                \"verbose_name_plural\": \"Test Models\",\n            },\n        )\n\n        # Squash the operations\n        squashed_operations = alter_model_options.reduce(create_model, \"app_label\")\n\n        # Check that the resulting CreateModel operation has the correct options\n        assert len(squashed_operations) == 1\n        assert squashed_operations[0].options == {\n            \"verbose_name\": \"New Test Model\",\n            \"verbose_name_plural\": \"New Test Models\",\n        }\n</patched>\n```",
  "patch": "--- a/tests/test_migrations/test_squashmigrations.py\n+++ b/tests/test_migrations/test_squashmigrations.py\n-# Empty if creating new file\n+import pytest\n+from django.db import migrations\n+\n+@pytest.mark.testcases\n+class TestSquashMigrations:\n+    def test_squash_create_model_alter_model_options(self):\n+        # Test that squashmigrations unsets model options when optimizing CreateModel and AlterModelOptions\n+        create_model = migrations.operations.models.CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"id\", migrations.AutoField()),\n+            ],\n+            options={\n+                \"verbose_name\": \"Test Model\",\n+                \"verbose_name_plural\": \"Test Models\",\n+            },\n+        )\n+        alter_model_options = migrations.operations.models.AlterModelOptions(\n+            name=\"TestModel\",\n+            options={},\n+        )\n+\n+        # Squash the operations\n+        squashed_operations = create_model.reduce(alter_model_options, \"app_label\")\n+\n+        # Check that the resulting CreateModel operation has no options\n+        assert len(squashed_operations) == 1\n+        assert squashed_operations[0].options == {}\n+\n+    def test_squash_alter_model_options_create_model(self):\n+        # Test that squashmigrations sets model options when optimizing AlterModelOptions and CreateModel\n+        alter_model_options = migrations.operations.models.AlterModelOptions(\n+            name=\"TestModel\",\n+            options={\n+                \"verbose_name\": \"New Test Model\",\n+                \"verbose_name_plural\": \"New Test Models\",\n+            },\n+        )\n+        create_model = migrations.operations.models.CreateModel(\n+            name=\"TestModel\",\n+            fields=[\n+                (\"id\", migrations.AutoField()),\n+            ],\n+            options={\n+                \"verbose_name\": \"Test Model\",\n+                \"verbose_name_plural\": \"Test Models\",\n+            },\n+        )\n+\n+        # Squash the operations\n+        squashed_operations = alter_model_options.reduce(create_model, \"app_label\")\n+\n+        # Check that the resulting CreateModel operation has the correct options\n+        assert len(squashed_operations) == 1\n+        assert squashed_operations[0].options == {\n+            \"verbose_name\": \"New Test Model\",\n+            \"verbose_name_plural\": \"New Test Models\",\n+        }\n"
}