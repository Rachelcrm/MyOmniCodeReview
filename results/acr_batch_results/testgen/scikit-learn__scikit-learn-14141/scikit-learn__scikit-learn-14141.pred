{
  "instance_id": "scikit-learn__scikit-learn-14141",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of adding joblib to the dependencies listed in `show_versions` or to the issue template when the scikit-learn version is greater than 0.20, I will create a test suite that covers this functionality.\n\nFirst, let's consider the test file for the `show_versions` functionality.\n\n```\n<file>tests/test_show_versions.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom sklearn.utils._show_versions import show_versions, _get_deps_info\nimport sklearn\nimport sys\nimport importlib\n\ndef test_show_versions_skl_lt_020():\n    # Mock scikit-learn version to be less than 0.20\n    sklearn_version = \"0.19.0\"\n    # Mock deps_info to exclude joblib\n    deps_info = {\n        \"pip\": \"21.0.1\",\n        \"setuptools\": \"57.0.0\",\n        \"sklearn\": sklearn_version,\n        \"numpy\": \"1.20.0\",\n        \"scipy\": \"1.7.3\",\n        \"Cython\": \"0.29.32\",\n        \"pandas\": \"1.3.5\",\n        \"matplotlib\": \"3.5.1\",\n    }\n    # Call show_versions and assert joblib is not included\n    output = show_versions()\n    assert \"joblib\" not in output\n\ndef test_show_versions_skl_gt_020():\n    # Mock scikit-learn version to be greater than 0.20\n    sklearn_version = \"0.24.0\"\n    # Mock deps_info to include joblib\n    deps_info = {\n        \"pip\": \"21.0.1\",\n        \"setuptools\": \"57.0.0\",\n        \"sklearn\": sklearn_version,\n        \"numpy\": \"1.20.0\",\n        \"scipy\": \"1.7.3\",\n        \"Cython\": \"0.29.32\",\n        \"pandas\": \"1.3.5\",\n        \"matplotlib\": \"3.5.1\",\n        \"joblib\": \"1.0.1\",\n    }\n    # Call show_versions and assert joblib is included\n    output = show_versions()\n    assert \"joblib\" in output\n\ndef test_get_deps_info_skl_lt_020():\n    # Test _get_deps_info with sklearn version less than 0.20\n    sklearn_version = \"0.19.0\"\n    sys.modules['sklearn'] = type('sklearn', (), {'__version__': sklearn_version})\n    deps_info = _get_deps_info()\n    assert 'joblib' not in deps_info\n\ndef test_get_deps_info_skl_gt_020():\n    # Test _get_deps_info with sklearn version greater than 0.20\n    sklearn_version = \"0.24.0\"\n    sys.modules['sklearn'] = type('sklearn', (), {'__version__': sklearn_version})\n    # Manually add joblib to sys.modules for testing\n    sys.modules['joblib'] = type('joblib', (), {'__version__': '1.0.1'})\n    deps_info = _get_deps_info()\n    assert 'joblib' in deps_info\n\ndef test_get_deps_info_import_error(monkeypatch):\n    # Test _get_deps_info handles ImportError\n    def mock_import_module(module_name):\n        if module_name == 'non_existent_module':\n            raise ImportError\n        # For testing, simply return a mock module if it exists\n        if module_name in sys.modules:\n            return sys.modules[module_name]\n        else:\n            return type(module_name, (), {})\n    \n    monkeypatch.setattr(importlib, 'import_module', mock_import_module)\n    deps_info = _get_deps_info()\n    assert deps_info['non_existent_module'] is None\n</patched>\n```",
  "patch": "--- a/tests/test_show_versions.py\n+++ b/tests/test_show_versions.py\n+import pytest\n+from sklearn.utils._show_versions import show_versions, _get_deps_info\n+import sklearn\n+import sys\n+import importlib\n+\n+def test_show_versions_skl_lt_020():\n+    # Mock scikit-learn version to be less than 0.20\n+    sklearn_version = \"0.19.0\"\n+    # Mock deps_info to exclude joblib\n+    deps_info = {\n+        \"pip\": \"21.0.1\",\n+        \"setuptools\": \"57.0.0\",\n+        \"sklearn\": sklearn_version,\n+        \"numpy\": \"1.20.0\",\n+        \"scipy\": \"1.7.3\",\n+        \"Cython\": \"0.29.32\",\n+        \"pandas\": \"1.3.5\",\n+        \"matplotlib\": \"3.5.1\",\n+    }\n+    # Call show_versions and assert joblib is not included\n+    output = show_versions()\n+    assert \"joblib\" not in output\n+\n+def test_show_versions_skl_gt_020():\n+    # Mock scikit-learn version to be greater than 0.20\n+    sklearn_version = \"0.24.0\"\n+    # Mock deps_info to include joblib\n+    deps_info = {\n+        \"pip\": \"21.0.1\",\n+        \"setuptools\": \"57.0.0\",\n+        \"sklearn\": sklearn_version,\n+        \"numpy\": \"1.20.0\",\n+        \"scipy\": \"1.7.3\",\n+        \"Cython\": \"0.29.32\",\n+        \"pandas\": \"1.3.5\",\n+        \"matplotlib\": \"3.5.1\",\n+        \"joblib\": \"1.0.1\",\n+    }\n+    # Call show_versions and assert joblib is included\n+    output = show_versions()\n+    assert \"joblib\" in output\n+\n+def test_get_deps_info_skl_lt_020():\n+    # Test _get_deps_info with sklearn version less than 0.20\n+    sklearn_version = \"0.19.0\"\n+    sys.modules['sklearn'] = type('sklearn', (), {'__version__': sklearn_version})\n+    deps_info = _get_deps_info()\n+    assert 'joblib' not in deps_info\n+\n+def test_get_deps_info_skl_gt_020():\n+    # Test _get_deps_info with sklearn version greater than 0.20\n+    sklearn_version = \"0.24.0\"\n+    sys.modules['sklearn'] = type('sklearn', (), {'__version__': sklearn_version})\n+    # Manually add joblib to sys.modules for testing\n+    sys.modules['joblib'] = type('joblib', (), {'__version__': '1.0.1'})\n+    deps_info = _get_deps_info()\n+    assert 'joblib' in deps_info\n+\n+def test_get_deps_info_import_error(monkeypatch):\n+    # Test _get_deps_info handles ImportError\n+    def mock_import_module(module_name):\n+        if module_name == 'non_existent_module':\n+            raise ImportError\n+        # For testing, simply return a mock module if it exists\n+        if module_name in sys.modules:\n+            return sys.modules[module_name]\n+        else:\n+            return type(module_name, (), {})\n+    \n+    monkeypatch.setattr(importlib, 'import_module', mock_import_module)\n+    deps_info = _get_deps_info()\n+    assert deps_info['non_existent_module'] is None\n"
}