{
  "instance_id": "django__django-11740",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_migrations.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom django.db import migrations\nfrom django.db.migrations.autodetector import MigrationAutodetector\nfrom django.db.migrations.state import ProjectState\nfrom django.db.models import ForeignKey, UUIDField, Model\n\nclass TestMigrationDependencies:\n    def test_change_uuid_to_fk_creates_dependency(self):\n        # Create a project state with two apps: testapp1 and testapp2\n        project_state = ProjectState()\n        project_state.add_model(\n            \"testapp1\",\n            \"App1\",\n            [\n                (\"id\", UUIDField(primary_key=True)),\n                (\"text\", str),\n                (\"another_app\", UUIDField(null=True, blank=True)),\n            ],\n        )\n        project_state.add_model(\n            \"testapp2\",\n            \"App2\",\n            [\n                (\"id\", UUIDField(primary_key=True)),\n                (\"text\", str),\n            ],\n        )\n\n        # Create a new project state with the field changed to a FK\n        new_project_state = ProjectState()\n        new_project_state.add_model(\n            \"testapp1\",\n            \"App1\",\n            [\n                (\"id\", UUIDField(primary_key=True)),\n                (\"text\", str),\n                (\"another_app\", ForeignKey(\"testapp2.App2\", null=True, blank=True)),\n            ],\n        )\n        new_project_state.add_model(\n            \"testapp2\",\n            \"App2\",\n            [\n                (\"id\", UUIDField(primary_key=True)),\n                (\"text\", str),\n            ],\n        )\n\n        # Detect changes\n        autodetector = MigrationAutodetector(project_state, new_project_state)\n        changes = autodetector.detect_changes()\n\n        # Check that the dependency is created\n        migration = changes[\"testapp1\"][0]\n        assert len(migration.dependencies) == 1\n        assert migration.dependencies[0][0] == \"testapp2\"\n\n    def test_change_uuid_to_fk_creates_no_dependency_if_not_related(self):\n        # Create a project state with two apps: testapp1 and testapp2\n        project_state = ProjectState()\n        project_state.add_model(\n            \"testapp1\",\n            \"App1\",\n            [\n                (\"id\", UUIDField(primary_key=True)),\n                (\"text\", str),\n                (\"another_app\", UUIDField(null=True, blank=True)),\n            ],\n        )\n        project_state.add_model(\n            \"testapp2\",\n            \"App2\",\n            [\n                (\"id\", UUIDField(primary_key=True)),\n                (\"text\", str),\n            ],\n        )\n\n        # Create a new project state with the field changed to a FK to a non-existent model\n        new_project_state = ProjectState()\n        new_project_state.add_model(\n            \"testapp1\",\n            \"App1\",\n            [\n                (\"id\", UUIDField(primary_key=True)),\n                (\"text\", str),\n                (\"another_app\", ForeignKey(\"non_existent_model.NonExistentModel\", null=True, blank=True)),\n            ],\n        )\n        new_project_state.add_model(\n            \"testapp2\",\n            \"App2\",\n            [\n                (\"id\", UUIDField(primary_key=True)),\n                (\"text\", str),\n            ],\n        )\n\n        # Detect changes\n        autodetector = MigrationAutodetector(project_state, new_project_state)\n        changes = autodetector.detect_changes()\n\n        # Check that no dependency is created\n        migration = changes[\"testapp1\"][0]\n        assert len(migration.dependencies) == 0\n</patched>\n```",
  "patch": "--- a/tests/test_migrations.py\n+++ b/tests/test_migrations.py\n+import pytest\n+from django.db import migrations\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.state import ProjectState\n+from django.db.models import ForeignKey, UUIDField, Model\n+\n+class TestMigrationDependencies:\n+    def test_change_uuid_to_fk_creates_dependency(self):\n+        # Create a project state with two apps: testapp1 and testapp2\n+        project_state = ProjectState()\n+        project_state.add_model(\n+            \"testapp1\",\n+            \"App1\",\n+            [\n+                (\"id\", UUIDField(primary_key=True)),\n+                (\"text\", str),\n+                (\"another_app\", UUIDField(null=True, blank=True)),\n+            ],\n+        )\n+        project_state.add_model(\n+            \"testapp2\",\n+            \"App2\",\n+            [\n+                (\"id\", UUIDField(primary_key=True)),\n+                (\"text\", str),\n+            ],\n+        )\n+\n+        # Create a new project state with the field changed to a FK\n+        new_project_state = ProjectState()\n+        new_project_state.add_model(\n+            \"testapp1\",\n+            \"App1\",\n+            [\n+                (\"id\", UUIDField(primary_key=True)),\n+                (\"text\", str),\n+                (\"another_app\", ForeignKey(\"testapp2.App2\", null=True, blank=True)),\n+            ],\n+        )\n+        new_project_state.add_model(\n+            \"testapp2\",\n+            \"App2\",\n+            [\n+                (\"id\", UUIDField(primary_key=True)),\n+                (\"text\", str),\n+            ],\n+        )\n+\n+        # Detect changes\n+        autodetector = MigrationAutodetector(project_state, new_project_state)\n+        changes = autodetector.detect_changes()\n+\n+        # Check that the dependency is created\n+        migration = changes[\"testapp1\"][0]\n+        assert len(migration.dependencies) == 1\n+        assert migration.dependencies[0][0] == \"testapp2\"\n+\n+    def test_change_uuid_to_fk_creates_no_dependency_if_not_related(self):\n+        # Create a project state with two apps: testapp1 and testapp2\n+        project_state = ProjectState()\n+        project_state.add_model(\n+            \"testapp1\",\n+            \"App1\",\n+            [\n+                (\"id\", UUIDField(primary_key=True)),\n+                (\"text\", str),\n+                (\"another_app\", UUIDField(null=True, blank=True)),\n+            ],\n+        )\n+        project_state.add_model(\n+            \"testapp2\",\n+            \"App2\",\n+            [\n+                (\"id\", UUIDField(primary_key=True)),\n+                (\"text\", str),\n+            ],\n+        )\n+\n+        # Create a new project state with the field changed to a FK to a non-existent model\n+        new_project_state = ProjectState()\n+        new_project_state.add_model(\n+            \"testapp1\",\n+            \"App1\",\n+            [\n+                (\"id\", UUIDField(primary_key=True)),\n+                (\"text\", str),\n+                (\"another_app\", ForeignKey(\"non_existent_model.NonExistentModel\", null=True, blank=True)),\n+            ],\n+        )\n+        new_project_state.add_model(\n+            \"testapp2\",\n+            \"App2\",\n+            [\n+                (\"id\", UUIDField(primary_key=True)),\n+                (\"text\", str),\n+            ],\n+        )\n+\n+        # Detect changes\n+        autodetector = MigrationAutodetector(project_state, new_project_state)\n+        changes = autodetector.detect_changes()\n+\n+        # Check that no dependency is created\n+        migration = changes[\"testapp1\"][0]\n+        assert len(migration.dependencies) == 0\n"
}