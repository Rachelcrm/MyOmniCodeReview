{
  "instance_id": "pytest-dev__pytest-10051",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_logging.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport logging\nimport pytest\nfrom _pytest.logging import LogCaptureFixture\n\ndef test_caplog_clear():\n    \"\"\"Test that caplog.clear() resets the log records and text.\"\"\"\n    caplog = LogCaptureFixture()\n    caplog._item = pytest.Item.from_parent(\n        pytest.Module(\"test_logging.py\"), f\"test_{'a' * 30}\"\n    )\n    caplog._initial_handler_level = None\n    caplog._initial_logger_levels = {}\n\n    logging.warning(\"test\")\n    assert len(caplog.get_records(\"call\")) == 1\n\n    caplog.clear()\n    assert len(caplog.get_records(\"call\")) == 0\n\ndef test_caplog_get_records():\n    \"\"\"Test that caplog.get_records() returns the correct records.\"\"\"\n    caplog = LogCaptureFixture()\n    caplog._item = pytest.Item.from_parent(\n        pytest.Module(\"test_logging.py\"), f\"test_{'a' * 30}\"\n    )\n    caplog._initial_handler_level = None\n    caplog._initial_logger_levels = {}\n\n    logging.warning(\"test\")\n    records = caplog.get_records(\"call\")\n    assert len(records) == 1\n    assert records[0].getMessage() == \"test\"\n\ndef test_caplog_clear_and_get_records():\n    \"\"\"Test that caplog.clear() and caplog.get_records() work together.\"\"\"\n    caplog = LogCaptureFixture()\n    caplog._item = pytest.Item.from_parent(\n        pytest.Module(\"test_logging.py\"), f\"test_{'a' * 30}\"\n    )\n    caplog._initial_handler_level = None\n    caplog._initial_logger_levels = {}\n\n    logging.warning(\"test\")\n    assert len(caplog.get_records(\"call\")) == 1\n\n    caplog.clear()\n    assert len(caplog.get_records(\"call\")) == 0\n\ndef test_caplog_multiple_clear():\n    \"\"\"Test that multiple caplog.clear() calls work correctly.\"\"\"\n    caplog = LogCaptureFixture()\n    caplog._item = pytest.Item.from_parent(\n        pytest.Module(\"test_logging.py\"), f\"test_{'a' * 30}\"\n    )\n    caplog._initial_handler_level = None\n    caplog._initial_logger_levels = {}\n\n    logging.warning(\"test\")\n    assert len(caplog.get_records(\"call\")) == 1\n\n    caplog.clear()\n    assert len(caplog.get_records(\"call\")) == 0\n\n    logging.warning(\"test again\")\n    assert len(caplog.get_records(\"call\")) == 1\n\n    caplog.clear()\n    assert len(caplog.get_records(\"call\")) == 0\n</patched>\n```",
  "patch": "--- a/tests/test_logging.py\n+++ b/tests/test_logging.py\n-# Original code here (if modifying existing file)\n+import logging\n+import pytest\n+from _pytest.logging import LogCaptureFixture\n+\n+def test_caplog_clear():\n+    \"\"\"Test that caplog.clear() resets the log records and text.\"\"\"\n+    caplog = LogCaptureFixture()\n+    caplog._item = pytest.Item.from_parent(\n+        pytest.Module(\"test_logging.py\"), f\"test_{'a' * 30}\"\n+    )\n+    caplog._initial_handler_level = None\n+    caplog._initial_logger_levels = {}\n+\n+    logging.warning(\"test\")\n+    assert len(caplog.get_records(\"call\")) == 1\n+\n+    caplog.clear()\n+    assert len(caplog.get_records(\"call\")) == 0\n+\n+def test_caplog_get_records():\n+    \"\"\"Test that caplog.get_records() returns the correct records.\"\"\"\n+    caplog = LogCaptureFixture()\n+    caplog._item = pytest.Item.from_parent(\n+        pytest.Module(\"test_logging.py\"), f\"test_{'a' * 30}\"\n+    )\n+    caplog._initial_handler_level = None\n+    caplog._initial_logger_levels = {}\n+\n+    logging.warning(\"test\")\n+    records = caplog.get_records(\"call\")\n+    assert len(records) == 1\n+    assert records[0].getMessage() == \"test\"\n+\n+def test_caplog_clear_and_get_records():\n+    \"\"\"Test that caplog.clear() and caplog.get_records() work together.\"\"\"\n+    caplog = LogCaptureFixture()\n+    caplog._item = pytest.Item.from_parent(\n+        pytest.Module(\"test_logging.py\"), f\"test_{'a' * 30}\"\n+    )\n+    caplog._initial_handler_level = None\n+    caplog._initial_logger_levels = {}\n+\n+    logging.warning(\"test\")\n+    assert len(caplog.get_records(\"call\")) == 1\n+\n+    caplog.clear()\n+    assert len(caplog.get_records(\"call\")) == 0\n+\n+def test_caplog_multiple_clear():\n+    \"\"\"Test that multiple caplog.clear() calls work correctly.\"\"\"\n+    caplog = LogCaptureFixture()\n+    caplog._item = pytest.Item.from_parent(\n+        pytest.Module(\"test_logging.py\"), f\"test_{'a' * 30}\"\n+    )\n+    caplog._initial_handler_level = None\n+    caplog._initial_logger_levels = {}\n+\n+    logging.warning(\"test\")\n+    assert len(caplog.get_records(\"call\")) == 1\n+\n+    caplog.clear()\n+    assert len(caplog.get_records(\"call\")) == 0\n+\n+    logging.warning(\"test again\")\n+    assert len(caplog.get_records(\"call\")) == 1\n+\n+    caplog.clear()\n+    assert len(caplog.get_records(\"call\")) == 0\n"
}