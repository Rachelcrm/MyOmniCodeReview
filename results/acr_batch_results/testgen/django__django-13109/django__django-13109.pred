{
  "instance_id": "django__django-13109",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_fields.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.core.exceptions import ValidationError\n\nclass ArticleManager(models.Manager):\n    def get_queryset(self):\n        return super().get_queryset().filter(archived=False)\n\nclass Article(models.Model):\n    title = models.CharField(max_length=100)\n    archived = models.BooleanField(default=False)\n    objects = ArticleManager()\n\nclass FavoriteArticle(models.Model):\n    article = models.ForeignKey(Article, on_delete=models.CASCADE)\n\ndef test_foreign_key_validation_uses_base_manager():\n    # Create an archived article\n    archived_article = Article.objects.create(title='Archived Article', archived=True)\n\n    # Try to set the archived article as a favorite\n    favorite = FavoriteArticle()\n    with pytest.raises(ValidationError):\n        favorite.clean_fields()\n        favorite.article = archived_article\n        favorite.clean_fields()\n\n    # Validate that the base manager is used\n    qs = FavoriteArticle._meta.get_field('article').remote_field.model._meta.base_manager.all()\n    assert qs.filter(id=archived_article.id).exists()\n\ndef test_foreign_key_validation_uses_default_manager():\n    # Create a non-archived article\n    non_archived_article = Article.objects.create(title='Non-Archived Article')\n\n    # Try to set the non-archived article as a favorite\n    favorite = FavoriteArticle()\n    favorite.clean_fields()\n    favorite.article = non_archived_article\n    favorite.clean_fields()\n\n    # Validate that the default manager is used\n    qs = FavoriteArticle._meta.get_field('article').remote_field.model.objects.all()\n    assert qs.filter(id=non_archived_article.id).exists()\n</patched>\n```",
  "patch": "--- a/tests/test_fields.py\n+++ b/tests/test_fields.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.db import models\n+from django.core.exceptions import ValidationError\n+\n+class ArticleManager(models.Manager):\n+    def get_queryset(self):\n+        return super().get_queryset().filter(archived=False)\n+\n+class Article(models.Model):\n+    title = models.CharField(max_length=100)\n+    archived = models.BooleanField(default=False)\n+    objects = ArticleManager()\n+\n+class FavoriteArticle(models.Model):\n+    article = models.ForeignKey(Article, on_delete=models.CASCADE)\n+\n+def test_foreign_key_validation_uses_base_manager():\n+    # Create an archived article\n+    archived_article = Article.objects.create(title='Archived Article', archived=True)\n+\n+    # Try to set the archived article as a favorite\n+    favorite = FavoriteArticle()\n+    with pytest.raises(ValidationError):\n+        favorite.clean_fields()\n+        favorite.article = archived_article\n+        favorite.clean_fields()\n+\n+    # Validate that the base manager is used\n+    qs = FavoriteArticle._meta.get_field('article').remote_field.model._meta.base_manager.all()\n+    assert qs.filter(id=archived_article.id).exists()\n+\n+def test_foreign_key_validation_uses_default_manager():\n+    # Create a non-archived article\n+    non_archived_article = Article.objects.create(title='Non-Archived Article')\n+\n+    # Try to set the non-archived article as a favorite\n+    favorite = FavoriteArticle()\n+    favorite.clean_fields()\n+    favorite.article = non_archived_article\n+    favorite.clean_fields()\n+\n+    # Validate that the default manager is used\n+    qs = FavoriteArticle._meta.get_field('article').remote_field.model.objects.all()\n+    assert qs.filter(id=non_archived_article.id).exists()\n"
}