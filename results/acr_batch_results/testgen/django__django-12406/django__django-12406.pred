{
  "instance_id": "django__django-12406",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of the `RadioSelect` widget presenting a blank option for foreign keys when `blank=False` on the model, we need to create a test suite that covers this functionality. The test suite should ensure that the `RadioSelect` widget does not render a blank option when `blank=False` and that it behaves correctly in other scenarios.\n\nHere's how we can structure the test suite:\n\n```\n<file>tests/test_widgets.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django import forms\nfrom django.forms.widgets import RadioSelect\n\n@pytest.mark.parametrize(\"value\", [None, \"\"])\ndef test_radioselect_widget_excludes_blank_option(value):\n    # Arrange\n    class TestModel(models.Model):\n        field = models.CharField(max_length=10, blank=False)\n\n    class TestForm(forms.ModelForm):\n        class Meta:\n            model = TestModel\n            fields = [\"field\"]\n            widgets = {\"field\": RadioSelect}\n\n    # Act\n    form = TestForm()\n    radioselect_widget = form.fields[\"field\"].widget\n\n    # Assert\n    options = radioselect_widget.optgroups[0][1]\n    assert not any(option[\"value\"] == \"\" for option in options)\n\ndef test_radioselect_widget_allows_blank_option():\n    # Arrange\n    class TestModel(models.Model):\n        field = models.CharField(max_length=10, blank=True)\n\n    class TestForm(forms.ModelForm):\n        class Meta:\n            model = TestModel\n            fields = [\"field\"]\n            widgets = {\"field\": RadioSelect}\n\n    # Act\n    form = TestForm()\n    radioselect_widget = form.fields[\"field\"].widget\n\n    # Assert\n    options = radioselect_widget.optgroups[0][1]\n    assert any(option[\"value\"] == \"\" for option in options)\n</patched>\n```\n\nAnd another test file for model form:\n\n```\n<file>tests/test_modelform.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django import forms\nfrom django.db import models\n\ndef test_modelform_radioselect_excludes_blank_option():\n    # Arrange\n    class TestModel(models.Model):\n        field = models.ForeignKey(\"self\", on_delete=models.CASCADE, blank=False)\n\n    class TestForm(forms.ModelForm):\n        class Meta:\n            model = TestModel\n            fields = [\"field\"]\n            widgets = {\"field\": forms.RadioSelect}\n\n    # Act\n    form = TestForm()\n    field_widget = form.fields[\"field\"].widget\n\n    # Assert\n    options = field_widget.optgroups[0][1]\n    assert not any(option[\"value\"] == \"\" for option in options)\n</patched>\n```",
  "patch": "--- a/tests/test_widgets.py\n+++ b/tests/test_widgets.py\n-# Empty if creating new file\n+import pytest\n+from django import forms\n+from django.forms.widgets import RadioSelect\n+\n+@pytest.mark.parametrize(\"value\", [None, \"\"])\n+def test_radioselect_widget_excludes_blank_option(value):\n+    # Arrange\n+    class TestModel(models.Model):\n+        field = models.CharField(max_length=10, blank=False)\n+\n+    class TestForm(forms.ModelForm):\n+        class Meta:\n+            model = TestModel\n+            fields = [\"field\"]\n+            widgets = {\"field\": RadioSelect}\n+\n+    # Act\n+    form = TestForm()\n+    radioselect_widget = form.fields[\"field\"].widget\n+\n+    # Assert\n+    options = radioselect_widget.optgroups[0][1]\n+    assert not any(option[\"value\"] == \"\" for option in options)\n+\n+def test_radioselect_widget_allows_blank_option():\n+    # Arrange\n+    class TestModel(models.Model):\n+        field = models.CharField(max_length=10, blank=True)\n+\n+    class TestForm(forms.ModelForm):\n+        class Meta:\n+            model = TestModel\n+            fields = [\"field\"]\n+            widgets = {\"field\": RadioSelect}\n+\n+    # Act\n+    form = TestForm()\n+    radioselect_widget = form.fields[\"field\"].widget\n+\n+    # Assert\n+    options = radioselect_widget.optgroups[0][1]\n+    assert any(option[\"value\"] == \"\" for option in options)\n\n--- a/tests/test_modelform.py\n+++ b/tests/test_modelform.py\n-# Empty if creating new file\n+import pytest\n+from django import forms\n+from django.db import models\n+\n+def test_modelform_radioselect_excludes_blank_option():\n+    # Arrange\n+    class TestModel(models.Model):\n+        field = models.ForeignKey(\"self\", on_delete=models.CASCADE, blank=False)\n+\n+    class TestForm(forms.ModelForm):\n+        class Meta:\n+            model = TestModel\n+            fields = [\"field\"]\n+            widgets = {\"field\": forms.RadioSelect}\n+\n+    # Act\n+    form = TestForm()\n+    field_widget = form.fields[\"field\"].widget\n+\n+    # Assert\n+    options = field_widget.optgroups[0][1]\n+    assert not any(option[\"value\"] == \"\" for option in options)\n"
}