{
  "instance_id": "django__django-14725",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of providing a way for model formsets to disallow new object creation, we need to modify the `BaseModelFormSet` class in Django's `django/forms/models.py` file. \n\nThe goal is to add an `allow_new` parameter to the `__init__` method of `BaseModelFormSet` and use this parameter to control whether new objects can be saved.\n\nHere are the steps and the test suite:\n\n```\n<file>django/forms/models.py</file>\n<original>\n    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                 queryset=None, *, initial=None, **kwargs):\n        self.queryset = queryset\n        self.initial_extra = initial\n        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n</original>\n<patched>\n    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                 queryset=None, *, initial=None, allow_new=True, **kwargs):\n        self.queryset = queryset\n        self.initial_extra = initial\n        self.allow_new = allow_new\n        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n</patched>\n```\n\n```\n<file>django/forms/models.py</file>\n<original>\n    def save_new_objects(self, commit=True):\n        self.new_objects = []\n        for form in self.extra_forms:\n            if not form.has_changed():\n                continue\n            # If someone has marked an add form for deletion, don't save the\n            # object.\n            if self.can_delete and self._should_delete_form(form):\n                continue\n            self.new_objects.append(self.save_new(form, commit=commit))\n            if not commit:\n                self.saved_forms.append(form)\n        return self.new_objects\n</original>\n<patched>\n    def save_new_objects(self, commit=True):\n        if not self.allow_new:\n            raise ValidationError(\"New object creation is not allowed.\")\n        self.new_objects = []\n        for form in self.extra_forms:\n            if not form.has_changed():\n                continue\n            # If someone has marked an add form for deletion, don't save the\n            # object.\n            if self.can_delete and self._should_delete_form(form):\n                continue\n            self.new_objects.append(self.save_new(form, commit=commit))\n            if not commit:\n                self.saved_forms.append(form)\n        return self.new_objects\n</patched>\n```\n\nNow, let's create a test suite for this functionality.\n\n```\n<file>tests/test_forms_models.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom django import forms\nfrom django.forms.models import BaseModelFormSet\nfrom django.core.exceptions import ValidationError\n\n@pytest.mark.parametrize(\"allow_new\", [True, False])\ndef test_save_new_objects(allow_new):\n    class TestModelForm(forms.ModelForm):\n        class Meta:\n            model = TestModel\n\n    class TestModelFormSet(BaseModelFormSet):\n        pass\n\n    data = {\n        'form-TOTAL_FORMS': '1',\n        'form-INITIAL_FORMS': '0',\n        'form-MIN_NUM_FORMS': '0',\n        'form-MAX_NUM_FORMS': '1000',\n    }\n    formset = TestModelFormSet(data, allow_new=allow_new)\n    if allow_new:\n        formset.save_new_objects()\n    else:\n        with pytest.raises(ValidationError):\n            formset.save_new_objects()\n\ndef test_allow_new_init():\n    class TestModelForm(forms.ModelForm):\n        class Meta:\n            model = TestModel\n\n    class TestModelFormSet(BaseModelFormSet):\n        pass\n\n    data = {\n        'form-TOTAL_FORMS': '1',\n        'form-INITIAL_FORMS': '0',\n        'form-MIN_NUM_FORMS': '0',\n        'form-MAX_NUM_FORMS': '1000',\n    }\n    formset = TestModelFormSet(data, allow_new=False)\n    assert not formset.allow_new\n\nclass TestModel(models.Model):\n    name = forms.CharField(max_length=100)\n\n</patched>\n```",
  "patch": "--- a/django/forms/models.py\n+++ b/django/forms/models.py\n-    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n-        self.queryset = queryset\n-        self.initial_extra = initial\n-        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n+    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n+                 queryset=None, *, initial=None, allow_new=True, **kwargs):\n+        self.queryset = queryset\n+        self.initial_extra = initial\n+        self.allow_new = allow_new\n+        super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n-    def save_new_objects(self, commit=True):\n-        self.new_objects = []\n-        for form in self.extra_forms:\n-            if not form.has_changed():\n-                continue\n-            # If someone has marked an add form for deletion, don't save the\n-            # object.\n-            if self.can_delete and self._should_delete_form(form):\n-                continue\n-            self.new_objects.append(self.save_new(form, commit=commit))\n-            if not commit:\n-                self.saved_forms.append(form)\n-        return self.new_objects\n+    def save_new_objects(self, commit=True):\n+        if not self.allow_new:\n+            raise ValidationError(\"New object creation is not allowed.\")\n+        self.new_objects = []\n+        for form in self.extra_forms:\n+            if not form.has_changed():\n+                continue\n+            # If someone has marked an add form for deletion, don't save the\n+            # object.\n+            if self.can_delete and self._should_delete_form(form):\n+                continue\n+            self.new_objects.append(self.save_new(form, commit=commit))\n+            if not commit:\n+                self.saved_forms.append(form)\n+        return self.new_objects\n\n--- a/tests/test_forms_models.py\n+++ b/tests/test_forms_models.py\n+import pytest\n+from django import forms\n+from django.forms.models import BaseModelFormSet\n+from django.core.exceptions import ValidationError\n+\n+@pytest.mark.parametrize(\"allow_new\", [True, False])\n+def test_save_new_objects(allow_new):\n+    class TestModelForm(forms.ModelForm):\n+        class Meta:\n+            model = TestModel\n+\n+    class TestModelFormSet(BaseModelFormSet):\n+        pass\n+\n+    data = {\n+        'form-TOTAL_FORMS': '1',\n+        'form-INITIAL_FORMS': '0',\n+        'form-MIN_NUM_FORMS': '0',\n+        'form-MAX_NUM_FORMS': '1000',\n+    }\n+    formset = TestModelFormSet(data, allow_new=allow_new)\n+    if allow_new:\n+        formset.save_new_objects()\n+    else:\n+        with pytest.raises(ValidationError):\n+            formset.save_new_objects()\n+\n+def test_allow_new_init():\n+    class TestModelForm(forms.ModelForm):\n+        class Meta:\n+            model = TestModel\n+\n+    class TestModelFormSet(BaseModelFormSet):\n+        pass\n+\n+    data = {\n+        'form-TOTAL_FORMS': '1',\n+        'form-INITIAL_FORMS': '0',\n+        'form-MIN_NUM_FORMS': '0',\n+        'form-MAX_NUM_FORMS': '1000',\n+    }\n+    formset = TestModelFormSet(data, allow_new=False)\n+    assert not formset.allow_new\n+\n+class TestModel(models.Model):\n+    name = forms.CharField(max_length=100)\n"
}