{
  "instance_id": "ytdl-org__youtube-dl-23199",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_utils.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom youtube_dl.utils import unified_strdate\n\n@pytest.mark.parametrize(\n    'date_str, expected',\n    [\n        ('January1st,2019', '20190101'),\n        ('January2nd,2019', '20190102'),\n        ('January3rd,2019', '20190103'),\n        ('January4th,2019', '20190104'),\n        ('January22nd,2019', '20190122'),\n        ('January23rd,2019', '20190123'),\n        ('January24th,2019', '20190124'),\n        ('February2nd,2019', '20190202'),\n        ('February3rd,2019', '20190203'),\n        ('February4th,2019', '20190204'),\n    ]\n)\ndef test_unified_strdate_with_ordinal_suffixes(date_str, expected):\n    \"\"\"Test unified_strdate with dates containing ordinal suffixes.\"\"\"\n    assert unified_strdate(date_str) == expected\n\ndef test_unified_strdate_without_ordinal_suffixes():\n    \"\"\"Test unified_strdate with dates not containing ordinal suffixes.\"\"\"\n    assert unified_strdate('January 1, 2019') == '20190101'\n\ndef test_unified_strdate_with_invalid_date():\n    \"\"\"Test unified_strdate with an invalid date string.\"\"\"\n    assert unified_strdate('Invalid date') is None\n\ndef test_unified_strdate_with_none_input():\n    \"\"\"Test unified_strdate with None input.\"\"\"\n    assert unified_strdate(None) is None\n</patched>\n```",
  "patch": "--- a/tests/test_utils.py\n+++ b/tests/test_utils.py\n-# Empty if creating new file\n+import pytest\n+from youtube_dl.utils import unified_strdate\n+\n+@pytest.mark.parametrize(\n+    'date_str, expected',\n+    [\n+        ('January1st,2019', '20190101'),\n+        ('January2nd,2019', '20190102'),\n+        ('January3rd,2019', '20190103'),\n+        ('January4th,2019', '20190104'),\n+        ('January22nd,2019', '20190122'),\n+        ('January23rd,2019', '20190123'),\n+        ('January24th,2019', '20190124'),\n+        ('February2nd,2019', '20190202'),\n+        ('February3rd,2019', '20190203'),\n+        ('February4th,2019', '20190204'),\n+    ]\n+)\n+def test_unified_strdate_with_ordinal_suffixes(date_str, expected):\n+    \"\"\"Test unified_strdate with dates containing ordinal suffixes.\"\"\"\n+    assert unified_strdate(date_str) == expected\n+\n+def test_unified_strdate_without_ordinal_suffixes():\n+    \"\"\"Test unified_strdate with dates not containing ordinal suffixes.\"\"\"\n+    assert unified_strdate('January 1, 2019') == '20190101'\n+\n+def test_unified_strdate_with_invalid_date():\n+    \"\"\"Test unified_strdate with an invalid date string.\"\"\"\n+    assert unified_strdate('Invalid date') is None\n+\n+def test_unified_strdate_with_none_input():\n+    \"\"\"Test unified_strdate with None input.\"\"\"\n+    assert unified_strdate(None) is None\n"
}