{
  "instance_id": "scrapy__scrapy-5950",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of `NotConfigured` logging breaking when a component is added by a class object, we need to ensure that the logging mechanism can handle both class instances and import path strings. \n\nThe bug is located in the `from_settings` method of the `MiddlewareManager` class in `scrapy/middleware.py`. The issue arises when `clspath` is not a string but a class instance, causing `clspath.split(\".\")[-1]` to raise an `AttributeError`.\n\nHere's how we can fix it and write comprehensive tests:\n\n```python\n<file>scrapy/middleware.py</file>\n<original>\n    except NotConfigured as e:\n        if e.args:\n            clsname = clspath.split(\".\")[-1]\n            logger.warning(\n                \"Disabled %(clsname)s: %(eargs)s\",\n                {\"clsname\": clsname, \"eargs\": e.args[0]},\n                extra={\"crawler\": crawler},\n            )\n</original>\n<patched>\n    except NotConfigured as e:\n        if e.args:\n            if isinstance(clspath, str):\n                clsname = clspath.split(\".\")[-1]\n            else:\n                clsname = getattr(clspath, '__name__', type(clspath).__name__)\n            logger.warning(\n                \"Disabled %(clsname)s: %(eargs)s\",\n                {\"clsname\": clsname, \"eargs\": e.args[0]},\n                extra={\"crawler\": crawler},\n            )\n</patched>\n```\n\nNow, let's create a test suite for this functionality:\n\n```python\n<file>tests/test_middleware.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom scrapy.exceptions import NotConfigured\nfrom scrapy.middleware import MiddlewareManager\n\ndef test_middleware_logging_with_string():\n    class TestMiddleware:\n        pass\n\n    mwlist = [f\"{__name__}.TestMiddleware\"]\n    try:\n        MiddlewareManager.from_settings({\"middleware\": mwlist})\n    except NotConfigured:\n        pass\n\ndef test_middleware_logging_with_class():\n    class TestMiddleware:\n        pass\n\n    mwlist = [TestMiddleware]\n    try:\n        MiddlewareManager.from_settings({\"middleware\": mwlist})\n    except NotConfigured:\n        pass\n\ndef test_middleware_logging_with_invalid_class():\n    class InvalidMiddleware:\n        def __init__(self):\n            raise NotConfigured(\"Invalid middleware\")\n\n    mwlist = [InvalidMiddleware]\n    with pytest.warns(UserWarning, match=\"Disabled\"):\n        MiddlewareManager.from_settings({\"middleware\": mwlist})\n\ndef test_middleware_enabled_logging():\n    class TestMiddleware:\n        pass\n\n    mwlist = [f\"{__name__}.TestMiddleware\"]\n    with pytest.info(match=\"Enabled\"):\n        MiddlewareManager.from_settings({\"middleware\": mwlist})\n</patched>\n```",
  "patch": "--- a/scrapy/middleware.py\n+++ b/scrapy/middleware.py\n-    except NotConfigured as e:\n-        if e.args:\n-            clsname = clspath.split(\".\")[-1]\n-            logger.warning(\n-                \"Disabled %(clsname)s: %(eargs)s\",\n-                {\"clsname\": clsname, \"eargs\": e.args[0]},\n-                extra={\"crawler\": crawler},\n-            )\n+    except NotConfigured as e:\n+        if e.args:\n+            if isinstance(clspath, str):\n+                clsname = clspath.split(\".\")[-1]\n+            else:\n+                clsname = getattr(clspath, '__name__', type(clspath).__name__)\n+            logger.warning(\n+                \"Disabled %(clsname)s: %(eargs)s\",\n+                {\"clsname\": clsname, \"eargs\": e.args[0]},\n+                extra={\"crawler\": crawler},\n+            )\n\n--- a/tests/test_middleware.py\n+++ b/tests/test_middleware.py\n-# Empty if creating new file\n+import pytest\n+from scrapy.exceptions import NotConfigured\n+from scrapy.middleware import MiddlewareManager\n+\n+def test_middleware_logging_with_string():\n+    class TestMiddleware:\n+        pass\n+\n+    mwlist = [f\"{__name__}.TestMiddleware\"]\n+    try:\n+        MiddlewareManager.from_settings({\"middleware\": mwlist})\n+    except NotConfigured:\n+        pass\n+\n+def test_middleware_logging_with_class():\n+    class TestMiddleware:\n+        pass\n+\n+    mwlist = [TestMiddleware]\n+    try:\n+        MiddlewareManager.from_settings({\"middleware\": mwlist})\n+    except NotConfigured:\n+        pass\n+\n+def test_middleware_logging_with_invalid_class():\n+    class InvalidMiddleware:\n+        def __init__(self):\n+            raise NotConfigured(\"Invalid middleware\")\n+\n+    mwlist = [InvalidMiddleware]\n+    with pytest.warns(UserWarning, match=\"Disabled\"):\n+        MiddlewareManager.from_settings({\"middleware\": mwlist})\n+\n+def test_middleware_enabled_logging():\n+    class TestMiddleware:\n+        pass\n+\n+    mwlist = [f\"{__name__}.TestMiddleware\"]\n+    with pytest.info(match=\"Enabled\"):\n+        MiddlewareManager.from_settings({\"middleware\": mwlist})\n"
}