{
  "instance_id": "django__django-13516",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_management_commands.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport io\nimport sys\nimport pytest\nfrom django.core.management.base import BaseCommand, OutputWrapper\n\n@pytest.fixture\ndef out():\n    return io.StringIO()\n\n@pytest.mark.parametrize(\"stream\", ['stdout', 'stderr'])\ndef test_flush_stream(out, stream):\n    class TestCommand(BaseCommand):\n        def handle(self, *args, **options):\n            getattr(self, stream).write('Test message')\n            self.stdout.flush()\n\n    command = TestCommand(stdout=out, stderr=out)\n    command.execute()\n\n    assert out.getvalue() == 'Test message\\n'\n\ndef test_flush_stdout():\n    out = io.StringIO()\n    command = BaseCommand(stdout=out)\n    command.stdout.write('Test message')\n    command.stdout.flush()\n    assert out.getvalue() == 'Test message\\n'\n\ndef test_flush_stderr():\n    err = io.StringIO()\n    command = BaseCommand(stderr=err)\n    command.stderr.write('Test error message')\n    command.stderr.flush()\n    assert err.getvalue() == 'Test error message\\n'\n</patched>\n```",
  "patch": "--- a/tests/test_management_commands.py\n+++ b/tests/test_management_commands.py\n-# Empty if creating new file\n+import io\n+import sys\n+import pytest\n+from django.core.management.base import BaseCommand, OutputWrapper\n+\n+@pytest.fixture\n+def out():\n+    return io.StringIO()\n+\n+@pytest.mark.parametrize(\"stream\", ['stdout', 'stderr'])\n+def test_flush_stream(out, stream):\n+    class TestCommand(BaseCommand):\n+        def handle(self, *args, **options):\n+            getattr(self, stream).write('Test message')\n+            self.stdout.flush()\n+\n+    command = TestCommand(stdout=out, stderr=out)\n+    command.execute()\n+\n+    assert out.getvalue() == 'Test message\\n'\n+\n+def test_flush_stdout():\n+    out = io.StringIO()\n+    command = BaseCommand(stdout=out)\n+    command.stdout.write('Test message')\n+    command.stdout.flush()\n+    assert out.getvalue() == 'Test message\\n'\n+\n+def test_flush_stderr():\n+    err = io.StringIO()\n+    command = BaseCommand(stderr=err)\n+    command.stderr.write('Test error message')\n+    command.stderr.flush()\n+    assert err.getvalue() == 'Test error message\\n'\n"
}