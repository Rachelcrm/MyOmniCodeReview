{
  "instance_id": "mwaskom__seaborn-3069",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_scales.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nimport matplotlib.pyplot as plt\nfrom seaborn._core.scales import Nominal\n\ndef test_nominal_scale_limits():\n    \"\"\"Test that nominal scale limits extend by +/- 0.5 units.\"\"\"\n    # Create a nominal scale\n    scale = Nominal()\n    # Set the nominal scale limits\n    scale._matplotlib_scale.set_view_interval(0, 10)\n    # Check the limits\n    assert scale._matplotlib_scale.get_view_interval() == (0, 10)\n\ndef test_nominal_scale_grid_suppression():\n    \"\"\"Test that nominal scales suppress grid lines.\"\"\"\n    # Create a nominal scale\n    scale = Nominal()\n    # Check if grid is suppressed\n    # Assuming a method to check grid visibility\n    assert not scale._matplotlib_scale.grid_visible()\n\ndef test_nominal_scale_axis_inversion():\n    \"\"\"Test that nominal scales on y-axis invert the axis.\"\"\"\n    # Create a nominal scale on y-axis\n    scale = Nominal()\n    # Assuming a method to set axis orientation\n    scale._matplotlib_scale.set_axis_orientation('y')\n    # Check if axis is inverted\n    # Assuming a method to check axis inversion\n    assert scale._matplotlib_scale.is_inverted()\n\ndef test_categorical_scale_behavior():\n    \"\"\"Test that categorical scales behave as expected.\"\"\"\n    # Create a categorical scale\n    scale = Nominal()  # Using Nominal as a substitute for categorical\n    # Check limit extension\n    scale._matplotlib_scale.set_view_interval(0, 10)\n    assert scale._matplotlib_scale.get_view_interval() == (0, 10)\n    # Check grid suppression\n    assert not scale._matplotlib_scale.grid_visible()\n    # Check axis inversion on y-axis\n    scale._matplotlib_scale.set_axis_orientation('y')\n    assert scale._matplotlib_scale.is_inverted()\n</patched>\n```",
  "patch": "--- a/tests/test_scales.py\n+++ b/tests/test_scales.py\n-# Empty if creating new file\n+import pytest\n+import matplotlib.pyplot as plt\n+from seaborn._core.scales import Nominal\n+\n+def test_nominal_scale_limits():\n+    \"\"\"Test that nominal scale limits extend by +/- 0.5 units.\"\"\"\n+    # Create a nominal scale\n+    scale = Nominal()\n+    # Set the nominal scale limits\n+    scale._matplotlib_scale.set_view_interval(0, 10)\n+    # Check the limits\n+    assert scale._matplotlib_scale.get_view_interval() == (0, 10)\n+\n+def test_nominal_scale_grid_suppression():\n+    \"\"\"Test that nominal scales suppress grid lines.\"\"\"\n+    # Create a nominal scale\n+    scale = Nominal()\n+    # Check if grid is suppressed\n+    # Assuming a method to check grid visibility\n+    assert not scale._matplotlib_scale.grid_visible()\n+\n+def test_nominal_scale_axis_inversion():\n+    \"\"\"Test that nominal scales on y-axis invert the axis.\"\"\"\n+    # Create a nominal scale on y-axis\n+    scale = Nominal()\n+    # Assuming a method to set axis orientation\n+    scale._matplotlib_scale.set_axis_orientation('y')\n+    # Check if axis is inverted\n+    # Assuming a method to check axis inversion\n+    assert scale._matplotlib_scale.is_inverted()\n+\n+def test_categorical_scale_behavior():\n+    \"\"\"Test that categorical scales behave as expected.\"\"\"\n+    # Create a categorical scale\n+    scale = Nominal()  # Using Nominal as a substitute for categorical\n+    # Check limit extension\n+    scale._matplotlib_scale.set_view_interval(0, 10)\n+    assert scale._matplotlib_scale.get_view_interval() == (0, 10)\n+    # Check grid suppression\n+    assert not scale._matplotlib_scale.grid_visible()\n+    # Check axis inversion on y-axis\n+    scale._matplotlib_scale.set_axis_orientation('y')\n+    assert scale._matplotlib_scale.is_inverted()\n"
}