{
  "instance_id": "django__django-11333",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_urlresolvers.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.test import override_settings\nfrom django.urls import get_resolver, set_urlconf\nfrom django.urls.base import get_urlconf\n\n@pytest.fixture\ndef default_urlconf():\n    return 'tests.urls'\n\n@pytest.mark.test_utils\nclass TestURLResolver:\n    @pytest.fixture(autouse=True)\n    def setup_test(self, default_urlconf):\n        self.default_urlconf = default_urlconf\n\n    def test_get_resolver(self):\n        resolver = get_resolver()\n        assert resolver.urlconf_name == self.default_urlconf\n\n    def test_get_resolver_with_urlconf(self):\n        resolver = get_resolver(self.default_urlconf)\n        assert resolver.urlconf_name == self.default_urlconf\n\n    @override_settings(ROOT_URLCONF='tests.other_urls')\n    def test_get_resolver_with_settings_root_urlconf(self):\n        resolver = get_resolver()\n        assert resolver.urlconf_name == 'tests.other_urls'\n\n    def test_get_resolver_called_multiple_times(self):\n        resolver1 = get_resolver()\n        resolver2 = get_resolver()\n        assert resolver1 is resolver2\n\n    def test_get_resolver_called_with_different_urlconfs(self):\n        resolver1 = get_resolver(self.default_urlconf)\n        set_urlconf(self.default_urlconf)\n        resolver2 = get_resolver()\n        assert resolver1 is resolver2\n\n    def test_get_resolver_called_before_set_urlconf(self):\n        get_resolver()  # This should not create a new resolver\n        set_urlconf(self.default_urlconf)\n        resolver = get_resolver()\n        assert resolver.urlconf_name == self.default_urlconf\n\n    def test_get_resolver_with_none_urlconf(self):\n        resolver = get_resolver(None)\n        assert resolver.urlconf_name == self.default_urlconf\n\n    def test_get_resolver_with_custom_urlconf(self):\n        custom_urlconf = 'tests.custom_urls'\n        resolver = get_resolver(custom_urlconf)\n        assert resolver.urlconf_name == custom_urlconf\n</patched>\n```",
  "patch": "--- a/tests/test_urlresolvers.py\n+++ b/tests/test_urlresolvers.py\n-# Empty if creating new file\n+import pytest\n+from django.test import override_settings\n+from django.urls import get_resolver, set_urlconf\n+from django.urls.base import get_urlconf\n+\n+@pytest.fixture\n+def default_urlconf():\n+    return 'tests.urls'\n+\n+@pytest.mark.test_utils\n+class TestURLResolver:\n+    @pytest.fixture(autouse=True)\n+    def setup_test(self, default_urlconf):\n+        self.default_urlconf = default_urlconf\n+\n+    def test_get_resolver(self):\n+        resolver = get_resolver()\n+        assert resolver.urlconf_name == self.default_urlconf\n+\n+    def test_get_resolver_with_urlconf(self):\n+        resolver = get_resolver(self.default_urlconf)\n+        assert resolver.urlconf_name == self.default_urlconf\n+\n+    @override_settings(ROOT_URLCONF='tests.other_urls')\n+    def test_get_resolver_with_settings_root_urlconf(self):\n+        resolver = get_resolver()\n+        assert resolver.urlconf_name == 'tests.other_urls'\n+\n+    def test_get_resolver_called_multiple_times(self):\n+        resolver1 = get_resolver()\n+        resolver2 = get_resolver()\n+        assert resolver1 is resolver2\n+\n+    def test_get_resolver_called_with_different_urlconfs(self):\n+        resolver1 = get_resolver(self.default_urlconf)\n+        set_urlconf(self.default_urlconf)\n+        resolver2 = get_resolver()\n+        assert resolver1 is resolver2\n+\n+    def test_get_resolver_called_before_set_urlconf(self):\n+        get_resolver()  # This should not create a new resolver\n+        set_urlconf(self.default_urlconf)\n+        resolver = get_resolver()\n+        assert resolver.urlconf_name == self.default_urlconf\n+\n+    def test_get_resolver_with_none_urlconf(self):\n+        resolver = get_resolver(None)\n+        assert resolver.urlconf_name == self.default_urlconf\n+\n+    def test_get_resolver_with_custom_urlconf(self):\n+        custom_urlconf = 'tests.custom_urls'\n+        resolver = get_resolver(custom_urlconf)\n+        assert resolver.urlconf_name == custom_urlconf\n"
}