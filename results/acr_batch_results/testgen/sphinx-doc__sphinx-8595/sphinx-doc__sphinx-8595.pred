{
  "instance_id": "sphinx-doc__sphinx-8595",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_autodoc.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom sphinx import addnodes\nfrom sphinx.ext.autodoc import ModuleDocumenter\nfrom sphinx.testing.util import SphinxTestApp\n\n@pytest.fixture\ndef app():\n    return SphinxTestApp()\n\ndef test_empty_all_members(app):\n    # Test that an empty __all__ attribute is respected\n    module = type('module', (), {'__all__': []})\n    doc = ModuleDocumenter(app, module, 'module')\n    doc.import_object()\n    members = doc.get_object_members(True)[1]\n    assert not members\n\ndef test_nonempty_all_members(app):\n    # Test that a non-empty __all__ attribute is respected\n    module = type('module', (), {'__all__': ['foo', 'bar']})\n    doc = ModuleDocumenter(app, module, 'module')\n    doc.import_object()\n    members = doc.get_object_members(True)[1]\n    assert len(members) == 2\n\ndef test_no_all_members(app):\n    # Test that the absence of __all__ attribute is handled correctly\n    module = type('module', (), {})\n    doc = ModuleDocumenter(app, module, 'module')\n    doc.import_object()\n    members = doc.get_object_members(True)[1]\n    # The default behavior is to include all members if __all__ is not defined\n    assert len(members) > 0\n</patched>\n```",
  "patch": "--- a/tests/test_autodoc.py\n+++ b/tests/test_autodoc.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from sphinx import addnodes\n+from sphinx.ext.autodoc import ModuleDocumenter\n+from sphinx.testing.util import SphinxTestApp\n+\n+@pytest.fixture\n+def app():\n+    return SphinxTestApp()\n+\n+def test_empty_all_members(app):\n+    # Test that an empty __all__ attribute is respected\n+    module = type('module', (), {'__all__': []})\n+    doc = ModuleDocumenter(app, module, 'module')\n+    doc.import_object()\n+    members = doc.get_object_members(True)[1]\n+    assert not members\n+\n+def test_nonempty_all_members(app):\n+    # Test that a non-empty __all__ attribute is respected\n+    module = type('module', (), {'__all__': ['foo', 'bar']})\n+    doc = ModuleDocumenter(app, module, 'module')\n+    doc.import_object()\n+    members = doc.get_object_members(True)[1]\n+    assert len(members) == 2\n+\n+def test_no_all_members(app):\n+    # Test that the absence of __all__ attribute is handled correctly\n+    module = type('module', (), {})\n+    doc = ModuleDocumenter(app, module, 'module')\n+    doc.import_object()\n+    members = doc.get_object_members(True)[1]\n+    # The default behavior is to include all members if __all__ is not defined\n+    assert len(members) > 0\n"
}