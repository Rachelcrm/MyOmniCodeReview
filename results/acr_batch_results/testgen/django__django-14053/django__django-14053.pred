{
  "instance_id": "django__django-14053",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_staticfiles_storage.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport os\nimport tempfile\nfrom django.core.files.storage import FileSystemStorage\nfrom django.contrib.staticfiles.storage import ManifestStaticFilesStorage\nfrom django.test import TestCase\n\nclass TestManifestStaticFilesStorage(TestCase):\n    def setUp(self):\n        self.storage = ManifestStaticFilesStorage(location=tempfile.mkdtemp(), base_url='')\n\n    def test_post_process_yields_once_per_file(self):\n        # Create a test file\n        file_name = 'test.txt'\n        file_content = b'Hello, world!'\n        with open(os.path.join(self.storage.location, file_name), 'wb') as f:\n            f.write(file_content)\n\n        # Call post_process\n        processed_files = list(self.storage.post_process([file_name]))\n\n        # Check that post_process yielded only once for the file\n        self.assertEqual(len(processed_files), 1)\n\n        # Check that the yielded file is the same as the original file\n        self.assertEqual(processed_files[0][0], file_name)\n\n    def test_post_process_handles_multiple_passes(self):\n        # Create a test file\n        file_name = 'test.txt'\n        file_content = b'Hello, world!'\n        with open(os.path.join(self.storage.location, file_name), 'wb') as f:\n            f.write(file_content)\n\n        # Call post_process multiple times\n        processed_files = list(self.storage.post_process([file_name]))\n        self.storage.post_process([file_name])\n\n        # Check that post_process yielded only once for the file\n        self.assertEqual(len(processed_files), 1)\n\n    def tearDown(self):\n        self.storage.delete(self.storage.location)\n</patched>\n```",
  "patch": "--- a/tests/test_staticfiles_storage.py\n+++ b/tests/test_staticfiles_storage.py\n-# Original code here (if modifying existing file)\n+import os\n+import tempfile\n+from django.core.files.storage import FileSystemStorage\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.test import TestCase\n+\n+class TestManifestStaticFilesStorage(TestCase):\n+    def setUp(self):\n+        self.storage = ManifestStaticFilesStorage(location=tempfile.mkdtemp(), base_url='')\n+\n+    def test_post_process_yields_once_per_file(self):\n+        # Create a test file\n+        file_name = 'test.txt'\n+        file_content = b'Hello, world!'\n+        with open(os.path.join(self.storage.location, file_name), 'wb') as f:\n+            f.write(file_content)\n+\n+        # Call post_process\n+        processed_files = list(self.storage.post_process([file_name]))\n+\n+        # Check that post_process yielded only once for the file\n+        self.assertEqual(len(processed_files), 1)\n+\n+        # Check that the yielded file is the same as the original file\n+        self.assertEqual(processed_files[0][0], file_name)\n+\n+    def test_post_process_handles_multiple_passes(self):\n+        # Create a test file\n+        file_name = 'test.txt'\n+        file_content = b'Hello, world!'\n+        with open(os.path.join(self.storage.location, file_name), 'wb') as f:\n+            f.write(file_content)\n+\n+        # Call post_process multiple times\n+        processed_files = list(self.storage.post_process([file_name]))\n+        self.storage.post_process([file_name])\n+\n+        # Check that post_process yielded only once for the file\n+        self.assertEqual(len(processed_files), 1)\n+\n+    def tearDown(self):\n+        self.storage.delete(self.storage.location)\n"
}