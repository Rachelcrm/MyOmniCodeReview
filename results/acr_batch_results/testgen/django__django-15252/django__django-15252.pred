{
  "instance_id": "django__django-15252",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "To address the issue of `MigrationRecorder` not obeying `db_router` allow_migrate rules, we need to modify the `MigrationRecorder` class to consider the database router's `allow_migrate` method when creating the migration table and recording applied migrations.\n\nHere are the test modifications:\n\n```\n<file>tests/test_migrations.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.db import migrations\nfrom django.db.migrations.recorder import MigrationRecorder\n\n@pytest.fixture\ndef recorder():\n    return MigrationRecorder(connection)\n\ndef test_ensure_schema_allow_migrate(recorder):\n    # Test that ensure_schema creates the migration table if allow_migrate returns True\n    recorder.connection.alias = 'default'\n    recorder.ensure_schema()\n    assert recorder.has_table()\n\ndef test_ensure_schema_disallow_migrate(recorder):\n    # Test that ensure_schema does not create the migration table if allow_migrate returns False\n    recorder.connection.alias = 'other'\n    recorder.ensure_schema()\n    assert not recorder.has_table()\n\ndef test_record_applied_allow_migrate(recorder):\n    # Test that record_applied records the migration if allow_migrate returns True\n    recorder.connection.alias = 'default'\n    recorder.record_applied('app', 'migration')\n    assert recorder.migration_qs.filter(app='app', name='migration').exists()\n\ndef test_record_applied_disallow_migrate(recorder):\n    # Test that record_applied does not record the migration if allow_migrate returns False\n    recorder.connection.alias = 'other'\n    recorder.record_applied('app', 'migration')\n    assert not recorder.migration_qs.filter(app='app', name='migration').exists()\n</patched>\n```\n\n```\n<file>tests/test_migrations/test_recorder.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.db.migrations.recorder import MigrationRecorder\n\n@pytest.mark.test_utils\nclass TestMigrationRecorder:\n    @pytest.fixture\n    def recorder(self):\n        return MigrationRecorder(connection)\n\n    def test_allow_migrate(self, recorder):\n        # Test that allow_migrate returns True if the database router allows migration\n        recorder.connection.alias = 'default'\n        assert recorder.allow_migrate() is True\n\n    def test_disallow_migrate(self, recorder):\n        # Test that allow_migrate returns False if the database router does not allow migration\n        recorder.connection.alias = 'other'\n        assert recorder.allow_migrate() is False\n</patched>\n```",
  "patch": "--- a/tests/test_migrations.py\n+++ b/tests/test_migrations.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.db import migrations\n+from django.db.migrations.recorder import MigrationRecorder\n+\n+@pytest.fixture\n+def recorder():\n+    return MigrationRecorder(connection)\n+\n+def test_ensure_schema_allow_migrate(recorder):\n+    # Test that ensure_schema creates the migration table if allow_migrate returns True\n+    recorder.connection.alias = 'default'\n+    recorder.ensure_schema()\n+    assert recorder.has_table()\n+\n+def test_ensure_schema_disallow_migrate(recorder):\n+    # Test that ensure_schema does not create the migration table if allow_migrate returns False\n+    recorder.connection.alias = 'other'\n+    recorder.ensure_schema()\n+    assert not recorder.has_table()\n+\n+def test_record_applied_allow_migrate(recorder):\n+    # Test that record_applied records the migration if allow_migrate returns True\n+    recorder.connection.alias = 'default'\n+    recorder.record_applied('app', 'migration')\n+    assert recorder.migration_qs.filter(app='app', name='migration').exists()\n+\n+def test_record_applied_disallow_migrate(recorder):\n+    # Test that record_applied does not record the migration if allow_migrate returns False\n+    recorder.connection.alias = 'other'\n+    recorder.record_applied('app', 'migration')\n+    assert not recorder.migration_qs.filter(app='app', name='migration').exists()\n\n--- a/tests/test_migrations/test_recorder.py\n+++ b/tests/test_migrations/test_recorder.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.db.migrations.recorder import MigrationRecorder\n+\n+@pytest.mark.test_utils\n+class TestMigrationRecorder:\n+    @pytest.fixture\n+    def recorder(self):\n+        return MigrationRecorder(connection)\n+\n+    def test_allow_migrate(self, recorder):\n+        # Test that allow_migrate returns True if the database router allows migration\n+        recorder.connection.alias = 'default'\n+        assert recorder.allow_migrate() is True\n+\n+    def test_disallow_migrate(self, recorder):\n+        # Test that allow_migrate returns False if the database router does not allow migration\n+        recorder.connection.alias = 'other'\n+        assert recorder.allow_migrate() is False\n"
}