{
  "instance_id": "django__django-15563",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_query.py</file>\n<original>\n</original>\n<patched>\nimport pytest\nfrom django.db.models import Model, AutoField, IntegerField\nfrom django.db import models\n\nclass Base(models.Model):\n    base_id = AutoField(primary_key=True)\n    field_base = IntegerField()\n\nclass OtherBase(models.Model):\n    otherbase_id = AutoField(primary_key=True)\n    field_otherbase = IntegerField()\n\nclass Child(Base, OtherBase):\n    pass\n\ndef test_update_child():\n    # Create instances\n    OtherBase.objects.create(field_otherbase=100)\n    OtherBase.objects.create(field_otherbase=101)\n    Child.objects.create(field_base=0, field_otherbase=0)\n    Child.objects.create(field_base=1, field_otherbase=1)\n\n    # Update Child instances\n    Child.objects.update(field_otherbase=55)\n\n    # Check the results\n    assert Child.objects.values('field_otherbase') == [{'field_otherbase': 55}, {'field_otherbase': 55}]\n    assert OtherBase.objects.filter(otherbase_id__in=[1,2]).values('field_otherbase') == [{'field_otherbase': 55}, {'field_otherbase': 55}]\n\ndef test_update_child_not_affect_base():\n    # Create instances\n    OtherBase.objects.create(field_otherbase=100)\n    OtherBase.objects.create(field_otherbase=101)\n    Child.objects.create(field_base=0, field_otherbase=0)\n    Child.objects.create(field_base=1, field_otherbase=1)\n\n    # Update Child instances\n    Child.objects.update(field_base=55)\n\n    # Check the results\n    assert Child.objects.values('field_base') == [{'field_base': 55}, {'field_base': 55}]\n    assert OtherBase.objects.values('field_otherbase') == [{'field_otherbase': 100}, {'field_otherbase': 101}]\n\ndef test_update_base():\n    # Create instances\n    Base.objects.create(field_base=100)\n    Base.objects.create(field_base=101)\n    Child.objects.create(field_base=0, field_otherbase=0)\n    Child.objects.create(field_base=1, field_otherbase=1)\n\n    # Update Base instances\n    Base.objects.update(field_base=55)\n\n    # Check the results\n    assert Base.objects.values('field_base') == [{'field_base': 55}, {'field_base': 55}]\n    assert Child.objects.values('field_base') == [{'field_base': 0}, {'field_base': 1}]\n</patched>\n```",
  "patch": "--- a/tests/test_query.py\n+++ b/tests/test_query.py\n+import pytest\n+from django.db.models import Model, AutoField, IntegerField\n+from django.db import models\n+\n+class Base(models.Model):\n+    base_id = AutoField(primary_key=True)\n+    field_base = IntegerField()\n+\n+class OtherBase(models.Model):\n+    otherbase_id = AutoField(primary_key=True)\n+    field_otherbase = IntegerField()\n+\n+class Child(Base, OtherBase):\n+    pass\n+\n+def test_update_child():\n+    # Create instances\n+    OtherBase.objects.create(field_otherbase=100)\n+    OtherBase.objects.create(field_otherbase=101)\n+    Child.objects.create(field_base=0, field_otherbase=0)\n+    Child.objects.create(field_base=1, field_otherbase=1)\n+\n+    # Update Child instances\n+    Child.objects.update(field_otherbase=55)\n+\n+    # Check the results\n+    assert Child.objects.values('field_otherbase') == [{'field_otherbase': 55}, {'field_otherbase': 55}]\n+    assert OtherBase.objects.filter(otherbase_id__in=[1,2]).values('field_otherbase') == [{'field_otherbase': 55}, {'field_otherbase': 55}]\n+\n+def test_update_child_not_affect_base():\n+    # Create instances\n+    OtherBase.objects.create(field_otherbase=100)\n+    OtherBase.objects.create(field_otherbase=101)\n+    Child.objects.create(field_base=0, field_otherbase=0)\n+    Child.objects.create(field_base=1, field_otherbase=1)\n+\n+    # Update Child instances\n+    Child.objects.update(field_base=55)\n+\n+    # Check the results\n+    assert Child.objects.values('field_base') == [{'field_base': 55}, {'field_base': 55}]\n+    assert OtherBase.objects.values('field_otherbase') == [{'field_otherbase': 100}, {'field_otherbase': 101}]\n+\n+def test_update_base():\n+    # Create instances\n+    Base.objects.create(field_base=100)\n+    Base.objects.create(field_base=101)\n+    Child.objects.create(field_base=0, field_otherbase=0)\n+    Child.objects.create(field_base=1, field_otherbase=1)\n+\n+    # Update Base instances\n+    Base.objects.update(field_base=55)\n+\n+    # Check the results\n+    assert Base.objects.values('field_base') == [{'field_base': 55}, {'field_base': 55}]\n+    assert Child.objects.values('field_base') == [{'field_base': 0}, {'field_base': 1}]\n"
}