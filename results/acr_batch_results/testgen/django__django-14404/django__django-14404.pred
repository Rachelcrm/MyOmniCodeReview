{
  "instance_id": "django__django-14404",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "<file>tests/test_admin.py</file>\n<original>\n# Original code here (if modifying existing file)\n</original>\n<patched>\nimport pytest\nfrom django.contrib.admin.sites import AdminSite\nfrom django.test import RequestFactory\nfrom django.urls import path, reverse\n\n@pytest.fixture\ndef admin_site():\n    return AdminSite()\n\n@pytest.fixture\ndef request_factory():\n    return RequestFactory()\n\ndef test_catch_all_view_with_force_script_name(admin_site, request_factory):\n    # Test that catch_all_view supports FORCE_SCRIPT_NAME\n    request = request_factory.get('/admin/')\n    request.META['SCRIPT_NAME'] = '/my-script'\n    response = admin_site.catch_all_view(request, 'path/to/resource')\n    assert response.status_code == 301\n    assert response.url == f'/my-script/path/to/resource/'\n\ndef test_catch_all_view_without_force_script_name(admin_site, request_factory):\n    # Test without FORCE_SCRIPT_NAME\n    request = request_factory.get('/admin/')\n    response = admin_site.catch_all_view(request, 'path/to/resource')\n    assert response.status_code == 301\n    assert response.url == '/path/to/resource/'\n\ndef test_catch_all_view_append_slash(admin_site, request_factory):\n    # Test that catch_all_view appends a slash when APPEND_SLASH is True\n    request = request_factory.get('/admin/')\n    request.META['SCRIPT_NAME'] = '/my-script'\n    with pytest.settings(APPEND_SLASH=True):\n        response = admin_site.catch_all_view(request, 'path/to/resource')\n        assert response.status_code == 301\n        assert response.url == f'/my-script/path/to/resource/'\n\ndef test_catch_all_view_no_append_slash(admin_site, request_factory):\n    # Test that catch_all_view does not append a slash when APPEND_SLASH is False\n    request = request_factory.get('/admin/')\n    request.META['SCRIPT_NAME'] = '/my-script'\n    with pytest.settings(APPEND_SLASH=False):\n        response = admin_site.catch_all_view(request, 'path/to/resource')\n        assert response.status_code == 404\n</patched>\n```",
  "patch": "--- a/tests/test_admin.py\n+++ b/tests/test_admin.py\n-# Original code here (if modifying existing file)\n+import pytest\n+from django.contrib.admin.sites import AdminSite\n+from django.test import RequestFactory\n+from django.urls import path, reverse\n+\n+@pytest.fixture\n+def admin_site():\n+    return AdminSite()\n+\n+@pytest.fixture\n+def request_factory():\n+    return RequestFactory()\n+\n+def test_catch_all_view_with_force_script_name(admin_site, request_factory):\n+    # Test that catch_all_view supports FORCE_SCRIPT_NAME\n+    request = request_factory.get('/admin/')\n+    request.META['SCRIPT_NAME'] = '/my-script'\n+    response = admin_site.catch_all_view(request, 'path/to/resource')\n+    assert response.status_code == 301\n+    assert response.url == f'/my-script/path/to/resource/'\n+\n+def test_catch_all_view_without_force_script_name(admin_site, request_factory):\n+    # Test without FORCE_SCRIPT_NAME\n+    request = request_factory.get('/admin/')\n+    response = admin_site.catch_all_view(request, 'path/to/resource')\n+    assert response.status_code == 301\n+    assert response.url == '/path/to/resource/'\n+\n+def test_catch_all_view_append_slash(admin_site, request_factory):\n+    # Test that catch_all_view appends a slash when APPEND_SLASH is True\n+    request = request_factory.get('/admin/')\n+    request.META['SCRIPT_NAME'] = '/my-script'\n+    with pytest.settings(APPEND_SLASH=True):\n+        response = admin_site.catch_all_view(request, 'path/to/resource')\n+        assert response.status_code == 301\n+        assert response.url == f'/my-script/path/to/resource/'\n+\n+def test_catch_all_view_no_append_slash(admin_site, request_factory):\n+    # Test that catch_all_view does not append a slash when APPEND_SLASH is False\n+    request = request_factory.get('/admin/')\n+    request.META['SCRIPT_NAME'] = '/my-script'\n+    with pytest.settings(APPEND_SLASH=False):\n+        response = admin_site.catch_all_view(request, 'path/to/resource')\n+        assert response.status_code == 404\n"
}