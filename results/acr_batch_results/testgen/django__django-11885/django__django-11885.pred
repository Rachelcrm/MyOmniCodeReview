{
  "instance_id": "django__django-11885",
  "model": "openrouter/meta-llama/llama-4-scout",
  "response": "```\n<file>tests/test_deletion.py</file>\n<original>\n# Empty if creating new file\n</original>\n<patched>\nimport pytest\nfrom django.db import models\nfrom django.db.models.deletion import Collector\n\n@pytest.fixture\ndef person_model():\n    return models.Model('Person', {\n        'id': models.AutoField(primary_key=True),\n        'friends': models.ManyToManyField('self'),\n    })\n\n@pytest.fixture\ndef user_model():\n    return models.Model('User', {\n        'id': models.AutoField(primary_key=True),\n    })\n\n@pytest.fixture\ndef entry_model(user_model):\n    return models.Model('Entry', {\n        'id': models.AutoField(primary_key=True),\n        'created_by': models.ForeignKey(user_model),\n        'updated_by': models.ForeignKey(user_model),\n    })\n\ndef test_combine_fast_delete_queries(person_model, user_model, entry_model):\n    # Create instances\n    person = person_model.objects.create()\n    user = user_model.objects.create()\n    entry = entry_model.objects.create(created_by=user, updated_by=user)\n\n    # Delete person and verify queries\n    with person_model.objects.db_manager().connection.cursor() as cursor:\n        person.delete()\n        queries = cursor.connection.queries\n        assert len(queries) == 3  # 1 for person_friends, 1 for person, 1 for person_friends (combined)\n\n    # Delete user and verify queries\n    with user_model.objects.db_manager().connection.cursor() as cursor:\n        user.delete()\n        queries = cursor.connection.queries\n        assert len(queries) == 3  # 1 for entry (created_by), 1 for entry (updated_by), 1 for user\n\ndef test_fast_delete_combine_queries():\n    model = models.Model('Model', {\n        'id': models.AutoField(primary_key=True),\n        'related': models.ForeignKey('self'),\n    })\n    instance = model.objects.create()\n    instance.related.add(instance)\n\n    collector = Collector(using='default')\n    collector.add(instance)\n\n    # Verify fast_delete combines queries\n    with model.objects.db_manager().connection.cursor() as cursor:\n        collector.fast_delete()\n        queries = cursor.connection.queries\n        assert len(queries) == 1  # 1 for model\n\ndef test_fast_delete_separate_queries():\n    model1 = models.Model('Model1', {\n        'id': models.AutoField(primary_key=True),\n    })\n    model2 = models.Model('Model2', {\n        'id': models.AutoField(primary_key=True),\n        'related': models.ForeignKey(model1),\n    })\n    instance1 = model1.objects.create()\n    instance2 = model2.objects.create(related=instance1)\n\n    collector = Collector(using='default')\n    collector.add(instance1)\n    collector.add(instance2)\n\n    # Verify fast_delete performs separate queries\n    with model1.objects.db_manager().connection.cursor() as cursor:\n        collector.fast_delete()\n        queries = cursor.connection.queries\n        assert len(queries) == 2  # 1 for model1, 1 for model2\n</patched>\n```",
  "patch": "--- a/tests/test_deletion.py\n+++ b/tests/test_deletion.py\n-# Empty if creating new file\n+import pytest\n+from django.db import models\n+from django.db.models.deletion import Collector\n+\n+@pytest.fixture\n+def person_model():\n+    return models.Model('Person', {\n+        'id': models.AutoField(primary_key=True),\n+        'friends': models.ManyToManyField('self'),\n+    })\n+\n+@pytest.fixture\n+def user_model():\n+    return models.Model('User', {\n+        'id': models.AutoField(primary_key=True),\n+    })\n+\n+@pytest.fixture\n+def entry_model(user_model):\n+    return models.Model('Entry', {\n+        'id': models.AutoField(primary_key=True),\n+        'created_by': models.ForeignKey(user_model),\n+        'updated_by': models.ForeignKey(user_model),\n+    })\n+\n+def test_combine_fast_delete_queries(person_model, user_model, entry_model):\n+    # Create instances\n+    person = person_model.objects.create()\n+    user = user_model.objects.create()\n+    entry = entry_model.objects.create(created_by=user, updated_by=user)\n+\n+    # Delete person and verify queries\n+    with person_model.objects.db_manager().connection.cursor() as cursor:\n+        person.delete()\n+        queries = cursor.connection.queries\n+        assert len(queries) == 3  # 1 for person_friends, 1 for person, 1 for person_friends (combined)\n+\n+    # Delete user and verify queries\n+    with user_model.objects.db_manager().connection.cursor() as cursor:\n+        user.delete()\n+        queries = cursor.connection.queries\n+        assert len(queries) == 3  # 1 for entry (created_by), 1 for entry (updated_by), 1 for user\n+\n+def test_fast_delete_combine_queries():\n+    model = models.Model('Model', {\n+        'id': models.AutoField(primary_key=True),\n+        'related': models.ForeignKey('self'),\n+    })\n+    instance = model.objects.create()\n+    instance.related.add(instance)\n+\n+    collector = Collector(using='default')\n+    collector.add(instance)\n+\n+    # Verify fast_delete combines queries\n+    with model.objects.db_manager().connection.cursor() as cursor:\n+        collector.fast_delete()\n+        queries = cursor.connection.queries\n+        assert len(queries) == 1  # 1 for model\n+\n+def test_fast_delete_separate_queries():\n+    model1 = models.Model('Model1', {\n+        'id': models.AutoField(primary_key=True),\n+    })\n+    model2 = models.Model('Model2', {\n+        'id': models.AutoField(primary_key=True),\n+        'related': models.ForeignKey(model1),\n+    })\n+    instance1 = model1.objects.create()\n+    instance2 = model2.objects.create(related=instance1)\n+\n+    collector = Collector(using='default')\n+    collector.add(instance1)\n+    collector.add(instance2)\n+\n+    # Verify fast_delete performs separate queries\n+    with model1.objects.db_manager().connection.cursor() as cursor:\n+        collector.fast_delete()\n+        queries = cursor.connection.queries\n+        assert len(queries) == 2  # 1 for model1, 1 for model2\n"
}