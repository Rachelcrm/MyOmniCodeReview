{
  "patch": "diff --git a/scrapy/commands/check.py b/scrapy/commands/check.py\nindex de54ca4d3..9d0ce7eba 100644\n--- a/scrapy/commands/check.py\n+++ b/scrapy/commands/check.py\n@@ -66,16 +66,16 @@ class Command(ScrapyCommand):\n             help=\"print contract tests for all spiders\",\n         )\n \n-    def run(self, args, opts):\n-        # load contracts\n-        contracts = build_component_list(self.settings.getwithbase(\"SPIDER_CONTRACTS\"))\n-        conman = ContractsManager(load_object(c) for c in contracts)\n-        runner = TextTestRunner(verbosity=2 if opts.verbose else 1)\n-        result = TextTestResult(runner.stream, runner.descriptions, runner.verbosity)\n+    def _load_contracts(self):\n+        return build_component_list(self.settings.getwithbase(\"SPIDER_CONTRACTS\"))\n \n-        # contract requests\n-        contract_reqs = defaultdict(list)\n+    def _setup_test_runner(self, opts):\n+        verbosity = 2 if opts.verbose else 1\n+        runner = TextTestRunner(verbosity=verbosity)\n+        return runner\n \n+    def _run_tests(self, args, opts, conman, result):\n+        contract_reqs = defaultdict(list)\n         spider_loader = self.crawler_process.spider_loader\n \n         with set_environ(SCRAPY_CHECK=\"true\"):\n@@ -90,19 +90,30 @@ class Command(ScrapyCommand):\n                 elif tested_methods:\n                     self.crawler_process.crawl(spidercls)\n \n-            # start checks\n-            if opts.list:\n-                for spider, methods in sorted(contract_reqs.items()):\n-                    if not methods and not opts.verbose:\n-                        continue\n-                    print(spider)\n-                    for method in sorted(methods):\n-                        print(f\"  * {method}\")\n-            else:\n-                start = time.time()\n-                self.crawler_process.start()\n-                stop = time.time()\n-\n-                result.printErrors()\n-                result.printSummary(start, stop)\n-                self.exitcode = int(not result.wasSuccessful())\n+        return contract_reqs\n+\n+    def _print_contracts(self, contract_reqs, opts):\n+        for spider, methods in sorted(contract_reqs.items()):\n+            if not methods and not opts.verbose:\n+                continue\n+            print(spider)\n+            for method in sorted(methods):\n+                print(f\"  * {method}\")\n+\n+    def run(self, args, opts):\n+        contracts = self._load_contracts()\n+        conman = ContractsManager(load_object(c) for c in contracts)\n+        runner = self._setup_test_runner(opts)\n+        result = TextTestResult(runner.stream, runner.descriptions, runner.verbosity)\n+        contract_reqs = self._run_tests(args, opts, conman, result)\n+\n+        if opts.list:\n+            self._print_contracts(contract_reqs, opts)\n+        else:\n+            start = time.time()\n+            self.crawler_process.start()\n+            stop = time.time()\n+\n+            result.printErrors()\n+            result.printSummary(start, stop)\n+            self.exitcode = int(not result.wasSuccessful())\n"
}