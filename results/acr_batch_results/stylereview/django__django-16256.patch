{
  "patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 542368de3b..84240ed72a 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -54,6 +54,13 @@ class GenericForeignKey(FieldCacheMixin):\n         self.column = None\n \n     def contribute_to_class(self, cls, name, **kwargs):\n+        \"\"\"\n+        Add this field to the model class's fields.\n+\n+        :param cls: The model class this field belongs to.\n+        :param name: The name of this field.\n+        :param kwargs: Additional keyword arguments.\n+        \"\"\"\n         self.name = name\n         self.model = cls\n         cls._meta.add_field(self, private=True)\n@@ -78,6 +85,12 @@ class GenericForeignKey(FieldCacheMixin):\n         return \"%s.%s\" % (model._meta.label, self.name)\n \n     def check(self, **kwargs):\n+        \"\"\"\n+        Return a list of checks for this field.\n+\n+        :param kwargs: Additional keyword arguments.\n+        :return: A list of checks.\n+        \"\"\"\n         return [\n             *self._check_field_name(),\n             *self._check_object_id_field(),\n@@ -161,16 +174,16 @@ class GenericForeignKey(FieldCacheMixin):\n     def get_cache_name(self):\n         return self.name\n \n-    def get_content_type(self, obj=None, id=None, using=None):\n+    def get_content_type(self, obj=None, object_id=None, using=None):\n         if obj is not None:\n             return ContentType.objects.db_manager(obj._state.db).get_for_model(\n                 obj, for_concrete_model=self.for_concrete_model\n             )\n-        elif id is not None:\n-            return ContentType.objects.db_manager(using).get_for_id(id)\n+        elif object_id is not None:\n+            return ContentType.objects.db_manager(using).get_for_id(object_id)\n         else:\n             # This should never happen. I love comments like this, don't you?\n-            raise Exception(\"Impossible arguments to GFK.get_content_type!\")\n+            raise ValueError(\"Impossible arguments to GFK.get_content_type!\")\n \n     def get_prefetch_queryset(self, instances, queryset=None):\n         if queryset is not None:\n"
}