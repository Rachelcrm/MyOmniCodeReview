{
  "patch": "diff --git a/youtube_dl/YoutubeDL.py b/youtube_dl/YoutubeDL.py\nindex fe30758ef..5dbbe4260 100755\n--- a/youtube_dl/YoutubeDL.py\n+++ b/youtube_dl/YoutubeDL.py\n@@ -771,14 +771,14 @@ class YoutubeDL(object):\n         for key, value in extra_info.items():\n             info_dict.setdefault(key, value)\n \n-    def extract_info(self, url, download=True, ie_key=None, extra_info={},\n+    def extract_info(self, url, download=True, ie_key=None, extra_info=None,\n                      process=True, force_generic_extractor=False):\n         \"\"\"\n         Return a list with a dictionary for each video extracted.\n-\n+        \n         Arguments:\n         url -- URL to extract\n-\n+        \n         Keyword arguments:\n         download -- whether to download videos during extraction\n         ie_key -- extractor key hint\n@@ -787,6 +787,8 @@ class YoutubeDL(object):\n             must be True for download to work.\n         force_generic_extractor -- force using the generic extractor\n         \"\"\"\n+        if extra_info is None:\n+            extra_info = {}\n \n         if not ie_key and force_generic_extractor:\n             ie_key = 'Generic'\n@@ -809,8 +811,8 @@ class YoutubeDL(object):\n         else:\n             self.report_error('no suitable InfoExtractor for URL %s' % url)\n \n-    def __handle_extraction_exceptions(func):\n-        def wrapper(self, *args, **kwargs):\n+    def __handle_extraction_exceptions(self, func):\n+        def wrapper(*args, **kwargs):\n             try:\n                 return func(self, *args, **kwargs)\n             except GeoRestrictedError as e:\n@@ -829,7 +831,7 @@ class YoutubeDL(object):\n                     self.report_error(error_to_compat_str(e), tb=encode_compat_str(traceback.format_exc()))\n                 else:\n                     raise\n-        return wrapper\n+            return wrapper\n \n     @__handle_extraction_exceptions\n     def __extract_info(self, url, ie, download, extra_info, process):\n"
}