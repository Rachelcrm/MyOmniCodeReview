{
  "patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex bf9c2acd26..369cfc0ceb 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -33,6 +33,17 @@ class MigrationAutodetector:\n         self.to_state = to_state\n         self.questioner = questioner or MigrationQuestioner()\n         self.existing_apps = {app for app, model in from_state.models}\n+        self.generated_operations = {}\n+        self.altered_indexes = {}\n+        self.altered_constraints = {}\n+        self.kept_model_keys = set()\n+        self.kept_proxy_keys = set()\n+        self.kept_unmanaged_keys = set()\n+        self.through_users = {}\n+        self.old_field_keys = set()\n+        self.new_field_keys = set()\n+        self.renamed_models = {}\n+        self.renamed_fields = {}\n \n     def changes(self, graph, trim_to_apps=None, convert_apps=None, migration_name=None):\n         \"\"\"\n@@ -88,12 +99,12 @@ class MigrationAutodetector:\n \n     def only_relation_agnostic_fields(self, fields):\n         \"\"\"\n-        Return a definition of the fields that ignores field names and\n-        what related fields actually relate to. Used for detecting renames (as\n-        the related fields change during renames).\n+         Return a definition of the fields that ignores field names and\n+         what related fields actually relate to. Used for detecting renames (as\n+         the related fields change during renames).\n         \"\"\"\n         fields_def = []\n-        for name, field in sorted(fields.items()):\n+        for field in sorted(fields.values()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n                 deconstruction[2].pop('to', None)\n"
}