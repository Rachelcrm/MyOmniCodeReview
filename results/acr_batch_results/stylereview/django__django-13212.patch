{
  "patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 84b4f31ec7..d52e2cc697 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -115,15 +115,15 @@ class URLValidator(RegexValidator):\n                 try:\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n                 except ValueError:  # for example, \"Invalid IPv6 URL\"\n-                    raise ValidationError(self.message, code=self.code)\n+                    raise ValidationError(self.message, code=self.code) from None\n                 try:\n                     netloc = punycode(netloc)  # IDN -> ACE\n                 except UnicodeError:  # invalid domain part\n-                    raise e\n+                    raise ValidationError(self.message, code=self.code) from e\n                 url = urlunsplit((scheme, netloc, path, query, fragment))\n                 super().__call__(url)\n             else:\n-                raise\n+                raise ValidationError(self.message, code=self.code) from e\n         else:\n             # Now verify IPv6 in the netloc part\n             host_match = re.search(r'^\\[(.+)\\](?::\\d{2,5})?$', urlsplit(value).netloc)\n@@ -131,8 +131,8 @@ class URLValidator(RegexValidator):\n                 potential_ip = host_match[1]\n                 try:\n                     validate_ipv6_address(potential_ip)\n-                except ValidationError:\n-                    raise ValidationError(self.message, code=self.code)\n+                except ValidationError as e:\n+                    raise ValidationError(self.message, code=self.code) from e\n \n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 36dad72704..7f89044c83 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -273,8 +273,8 @@ class IntegerField(Field):\n         # Strip trailing decimal and zeros.\n         try:\n             value = int(self.re_decimal.sub('', str(value)))\n-        except (ValueError, TypeError):\n-            raise ValidationError(self.error_messages['invalid'], code='invalid')\n+        except (ValueError, TypeError) as e:\n+            raise ValidationError(self.error_messages['invalid'], code='invalid') from e\n         return value\n \n     def widget_attrs(self, widget):\n@@ -304,8 +304,8 @@ class FloatField(IntegerField):\n             value = formats.sanitize_separators(value)\n         try:\n             value = float(value)\n-        except (ValueError, TypeError):\n-            raise ValidationError(self.error_messages['invalid'], code='invalid')\n+        except (ValueError, TypeError) as e:\n+            raise ValidationError(self.error_messages['invalid'], code='invalid') from e\n         return value\n \n     def validate(self, value):\n"
}