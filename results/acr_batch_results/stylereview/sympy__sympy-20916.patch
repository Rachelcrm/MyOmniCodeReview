{
  "patch": "diff --git a/sympy/printing/conventions.py b/sympy/printing/conventions.py\nindex 9a3be6bbe9..b939d8739b 100644\n--- a/sympy/printing/conventions.py\n+++ b/sympy/printing/conventions.py\n@@ -3,20 +3,19 @@\n \"\"\"\n \n import re\n-\n from collections.abc import Iterable\n from sympy import Derivative\n \n _name_with_digits_p = re.compile(r'^([a-zA-Z]+)([0-9]+)$')\n \n \n-def split_super_sub(text):\n-    \"\"\"Split a symbol name into a name, superscripts and subscripts\n+def split_super_sub(text: str) -> tuple[str, list[str], list[str]]:\n+    \"\"\"Split a symbol name into a name, superscripts and subscripts.\n \n     The first part of the symbol name is considered to be its actual\n     'name', followed by super- and subscripts. Each superscript is\n     preceded with a \"^\" character or by \"__\". Each subscript is preceded\n-    by a \"_\" character.  The three return values are the actual name, a\n+    by a \"_\" character. The three return values are the actual name, a\n     list with superscripts and a list with subscripts.\n \n     Examples\n@@ -28,6 +27,12 @@ def split_super_sub(text):\n     >>> split_super_sub('var_sub1__sup_sub2')\n     ('var', ['sup'], ['sub1', 'sub2'])\n \n+    Args:\n+        text: The input symbol name.\n+\n+    Returns:\n+        A tuple containing the name, superscripts, and subscripts.\n+\n     \"\"\"\n     if not text:\n         return text, [], []\n@@ -70,13 +75,20 @@ def split_super_sub(text):\n     return name, supers, subs\n \n \n-def requires_partial(expr):\n-    \"\"\"Return whether a partial derivative symbol is required for printing\n+def requires_partial(expr) -> bool:\n+    \"\"\"Return whether a partial derivative symbol is required for printing.\n \n     This requires checking how many free variables there are,\n     filtering out the ones that are integers. Some expressions don't have\n     free variables. In that case, check its variable list explicitly to\n     get the context of the expression.\n+\n+    Args:\n+        expr: The input expression.\n+\n+    Returns:\n+        True if a partial derivative symbol is required, False otherwise.\n+\n     \"\"\"\n \n     if isinstance(expr, Derivative):\n"
}