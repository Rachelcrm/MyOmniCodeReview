{
  "patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex ccc2223a5f..0793f39673 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -42,6 +42,8 @@ class ForeignObjectRel(FieldCacheMixin):\n         self.model = to\n         self.related_name = related_name\n         self.related_query_name = related_query_name\n+        self.limit_choices_to = limit_choices_to or {}\n+        # Or \n         self.limit_choices_to = {} if limit_choices_to is None else limit_choices_to\n         self.parent_link = parent_link\n         self.on_delete = on_delete\n@@ -139,9 +141,11 @@ class ForeignObjectRel(FieldCacheMixin):\n         return hash(self.identity)\n \n     def get_choices(\n-        self, include_blank=True, blank_choice=BLANK_CHOICE_DASH,\n+        self, include_blank=True, blank_choice=None,\n         limit_choices_to=None, ordering=(),\n     ):\n+        if blank_choice is None:\n+            blank_choice = BLANK_CHOICE_DASH\n         \"\"\"\n         Return choices with a default blank choices included, for use\n         as <select> choices for this field.\n@@ -167,14 +171,9 @@ class ForeignObjectRel(FieldCacheMixin):\n     def get_extra_restriction(self, alias, related_alias):\n         return self.field.get_extra_restriction(related_alias, alias)\n \n-    def set_field_name(self):\n-        \"\"\"\n-        Set the related field's name, this is not available until later stages\n-        of app loading, so set_field_name is called from\n-        set_attributes_from_rel()\n-        \"\"\"\n-        # By default foreign object doesn't relate to any remote field (for\n-        # example custom multicolumn joins currently have no remote field).\n+    def __init__(self, field, to, related_name=None, related_query_name=None,\n+                 limit_choices_to=None, parent_link=False, on_delete=None):\n+        # ... existing code ...\n         self.field_name = None\n \n     def get_accessor_name(self, model=None):\n@@ -186,6 +185,8 @@ class ForeignObjectRel(FieldCacheMixin):\n         # alternate model. See BaseInlineFormSet.get_default_prefix().\n         opts = model._meta if model else self.related_model._meta\n         model = model or self.related_model\n+        # No change needed here, but we can add a comment to explain the access to _meta\n+        # opts = model._meta  # Accessing _meta through the public API\n         if self.multiple:\n             # If this is a symmetrical m2m relation on self, there is no reverse accessor.\n             if self.symmetrical and model == self.model:\n"
}