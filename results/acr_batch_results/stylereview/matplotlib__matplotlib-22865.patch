{
  "patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex c59b0ac815..3ab4efad43 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -186,7 +186,7 @@ workaround is not used by default (see issue #1188).\n        textwrap.indent(_colormap_kw_doc, \"    \")))\n \n \n-def _set_ticks_on_axis_warn(*args, **kwargs):\n+def _set_ticks_on_axis_warn():\n     # a top level function which gets put in at the axes'\n     # set_xticks and set_yticks by Colorbar.__init__.\n     _api.warn_external(\"Use the colorbar set_ticks() method instead.\")\n@@ -195,16 +195,17 @@ def _set_ticks_on_axis_warn(*args, **kwargs):\n class _ColorbarSpine(mspines.Spine):\n     def __init__(self, axes):\n         self._ax = axes\n+        self._xy = None  # Initialize _xy\n         super().__init__(axes, 'colorbar',\n                          mpath.Path(np.empty((0, 2)), closed=True))\n         mpatches.Patch.set_transform(self, axes.transAxes)\n-\n+ \n     def get_window_extent(self, renderer=None):\n         # This Spine has no Axis associated with it, and doesn't need to adjust\n         # its location, so we can directly get the window extent from the\n         # super-super-class.\n         return mpatches.Patch.get_window_extent(self, renderer=renderer)\n-\n+ \n     def set_xy(self, xy):\n         self._path = mpath.Path(xy, closed=True)\n         self._xy = xy\n@@ -237,7 +238,7 @@ class _ColorbarAxesLocator:\n             extendlen[0] = 0\n         if not self._cbar._extend_upper():\n             extendlen[1] = 0\n-        len = sum(extendlen) + 1\n+        length = sum(extendlen) + 1\n         shrink = 1 / len\n         offset = extendlen[0] / len\n         # we need to reset the aspect ratio of the axes to account\n"
}