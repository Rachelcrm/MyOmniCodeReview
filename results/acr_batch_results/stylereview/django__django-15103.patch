{
  "patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 5ccef38048..f208bf1cb1 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -9,7 +9,7 @@ from pprint import pformat\n from urllib.parse import quote\n \n from django.utils import formats\n-from django.utils.dateformat import format, time_format\n+from django.utils.dateformat import format as date_format, time_format\n from django.utils.encoding import iri_to_uri\n from django.utils.html import (\n     avoid_wrapping, conditional_escape, escape, escapejs,\n@@ -287,10 +287,10 @@ def title(value):\n def truncatechars(value, arg):\n     \"\"\"Truncate a string after `arg` number of characters.\"\"\"\n     try:\n-        length = int(arg)\n+        max_length = int(arg)\n     except ValueError:  # Invalid literal for int().\n         return value  # Fail silently.\n-    return Truncator(value).chars(length)\n+    return Truncator(value).chars(max_length)\n \n \n @register.filter(is_safe=True)\n@@ -301,10 +301,10 @@ def truncatechars_html(value, arg):\n     Preserve newlines in the HTML.\n     \"\"\"\n     try:\n-        length = int(arg)\n+        max_length = int(arg)\n     except ValueError:  # invalid literal for int()\n         return value  # Fail silently.\n-    return Truncator(value).chars(length, html=True)\n+    return Truncator(value).chars(max_length, html=True)\n \n \n @register.filter(is_safe=True)\n@@ -315,10 +315,10 @@ def truncatewords(value, arg):\n     Remove newlines within the string.\n     \"\"\"\n     try:\n-        length = int(arg)\n+        max_length = int(arg)\n     except ValueError:  # Invalid literal for int().\n         return value  # Fail silently.\n-    return Truncator(value).words(length, truncate=' …')\n+    return Truncator(value).words(max_length, truncate=' …')\n \n \n @register.filter(is_safe=True)\n"
}