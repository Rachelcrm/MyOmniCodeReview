{
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ddfd2b365..5c7eddeca 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -145,11 +145,11 @@ def annotation_option(arg: Any) -> Any:\n         return arg\n \n \n-def bool_option(arg: Any) -> bool:\n+def bool_option(arg: bool) -> bool:\n     \"\"\"Used to convert flag options to auto directives.  (Instead of\n     directives.flag(), which returns None).\n     \"\"\"\n-    return True\n+    return arg\n \n \n def merge_special_members_option(options: Dict) -> None:\n@@ -197,14 +197,22 @@ def cut_lines(pre: int, post: int = 0, what: str = None) -> Callable:\n     \"\"\"\n     def process(app: Sphinx, what_: str, name: str, obj: Any, options: Any, lines: List[str]\n                 ) -> None:\n-        if what and what_ not in what:\n+        if what_ and what_ not in (what or []):\n             return\n-        del lines[:pre]\n-        if post:\n-            # remove one trailing blank line.\n-            if lines and not lines[-1]:\n-                lines.pop(-1)\n-            del lines[-post:]\n+        deleted = 0\n+        delete = not exclude\n+        orig_lines = lines[:]\n+        for i, line in enumerate(orig_lines):\n+            if delete:\n+                lines.pop(i - deleted)\n+                deleted += 1\n+            if marker_re.match(line):\n+                delete = not delete\n+                if delete:\n+                    lines.pop(i - deleted)\n+                    deleted += 1\n+        if not lines and not keepempty:\n+            lines[:] = orig_lines\n         # make sure there is a blank line at the end\n         if lines and lines[-1]:\n             lines.append('')\n@@ -225,7 +233,7 @@ def between(marker: str, what: Sequence[str] = None, keepempty: bool = False,\n \n     def process(app: Sphinx, what_: str, name: str, obj: Any, options: Any, lines: List[str]\n                 ) -> None:\n-        if what and what_ not in what:\n+        if what_ and what_ not in (what or []):\n             return\n         deleted = 0\n         delete = not exclude\n"
}