{
  "patch": "diff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..acba37a9dc 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -71,9 +71,9 @@ def get_current_timezone_name():\n     return _get_timezone_name(get_current_timezone())\n \n \n-def _get_timezone_name(timezone):\n-    \"\"\"Return the name of ``timezone``.\"\"\"\n-    return str(timezone)\n+def _get_timezone_name(tz):\n+    \"\"\"Return the name of ``tz``.\"\"\"\n+    return str(tz)\n \n # Timezone selection functions.\n \n@@ -81,19 +81,19 @@ def _get_timezone_name(timezone):\n # because it isn't thread safe.\n \n \n-def activate(timezone):\n+def activate(tz):\n     \"\"\"\n     Set the time zone for the current thread.\n \n-    The ``timezone`` argument must be an instance of a tzinfo subclass or a\n+    The ``tz`` argument must be an instance of a tzinfo subclass or a\n     time zone name.\n     \"\"\"\n-    if isinstance(timezone, tzinfo):\n-        _active.value = timezone\n-    elif isinstance(timezone, str):\n-        _active.value = pytz.timezone(timezone)\n+    if isinstance(tz, tzinfo):\n+        _active.value = tz\n+    elif isinstance(tz, str):\n+        _active.value = pytz.timezone(tz)\n     else:\n-        raise ValueError(\"Invalid timezone: %r\" % timezone)\n+        raise ValueError(\"Invalid timezone: %r\" % tz)\n \n \n def deactivate():\n@@ -121,6 +121,10 @@ class override(ContextDecorator):\n     def __init__(self, timezone):\n         self.timezone = timezone\n \n+    def __init__(self, timezone):\n+        self.timezone = timezone\n+        self.old_timezone = None\n+\n     def __enter__(self):\n         self.old_timezone = getattr(_active, 'value', None)\n         if self.timezone is None:\n"
}