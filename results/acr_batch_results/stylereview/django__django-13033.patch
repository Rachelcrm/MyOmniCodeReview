{
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..894ef23f3a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -44,7 +44,12 @@ class SQLCompiler:\n         if all(self.query.alias_refcount[a] == 0 for a in self.query.alias_map):\n             self.query.get_initial_alias()\n         self.select, self.klass_info, self.annotation_col_map = self.get_select()\n-        self.col_count = len(self.select)\n+        # No change needed here, but ensure col_count is defined in __init__ or pre_sql_setup\n+\n+    def __init__(self, query, connection, using):\n+        # ...\n+        self.col_count = 0\n+        # ...\n \n     def pre_sql_setup(self):\n         \"\"\"\n@@ -58,6 +63,7 @@ class SQLCompiler:\n         extra_select = self.get_extra_select(order_by, self.select)\n         self.has_extra_select = bool(extra_select)\n         group_by = self.get_group_by(self.select + extra_select, order_by)\n+        self.col_count = len(self.select)\n         return extra_select, order_by, group_by\n \n     def get_group_by(self, select, order_by):\n@@ -430,7 +436,7 @@ class SQLCompiler:\n             sql, params = node.as_sql(self, self.connection)\n         return sql, params\n \n-    def get_combinator_sql(self, combinator, all):\n+    def get_combinator_sql(self, combinator, all_):\n         features = self.connection.features\n         compilers = [\n             query.get_compiler(self.using, self.connection)\n@@ -475,7 +481,7 @@ class SQLCompiler:\n         if not parts:\n             raise EmptyResultSet\n         combinator_sql = self.connection.ops.set_operators[combinator]\n-        if all and combinator == 'union':\n+        if all_ and combinator == 'union':\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n"
}