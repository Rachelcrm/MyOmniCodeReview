{
  "patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..bf5583e103 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -41,6 +41,30 @@\n class Point(GeometryEntity):\n     \"\"\"A point in a n-dimensional Euclidean space.\n \n+    def _svg(self, scale=1, fill_color=None, stroke_color=None, \n+             stroke_width=None, style=None, **kwargs):\n+        from sympy import Dummy\n+        x, y = self.args\n+        # For 2D points, arbitrarily set y=0 so they appear on the \n+        # x-axis. This facilitates testing.\n+        if len(self.args) == 2:\n+            return f'<line x1=\"{x}\" y1=\"{y}\" x2=\"{x}\" y2=\"0\" ' + \\\n+                f'stroke=\"{stroke_color or \"black\"}\" ' + \\\n+                f'stroke-width=\"{stroke_width or 1}\" ' + \\\n+                f'marker-end=\"url(#{Dummy().name})\" />'\n+        else:\n+            return f'<circle cx=\"{x}\" cy=\"{y}\" r=\"{scale}\" ' + \\\n+                f'stroke=\"{stroke_color or \"black\"}\" ' + \\\n+                f'stroke-width=\"{stroke_width or 1}\" ' + \\\n+                f'fill=\"{fill_color or \"none}\" />'\n+\n+    def bounds(self):\n+        return (min(self.args), min(self.args), \n+                max(self.args), max(self.args))\n+\n+    def is_similar(self, other):\n+        return isinstance(other, Point)\n+\n     Parameters\n     ==========\n \n@@ -185,6 +209,10 @@ def __abs__(self):\n     def __add__(self, other):\n         \"\"\"Add other to self by incrementing self's coordinates by\n         those of other.\n+        try:\n+            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n+        except TypeError as exc:\n+            raise GeometryError(\"Don't know how to add {} and a Point object\".format(other)) from exc\n \n         Notes\n         =====\n@@ -381,6 +409,11 @@ def are_coplanar(cls, *points):\n \n     def distance(self, other):\n         \"\"\"The Euclidean distance between self and another GeometricEntity.\n+        if not isinstance(other, GeometryEntity):\n+            try:\n+                other = Point(other, dim=self.ambient_dimension)\n+            except TypeError as exc:\n+                raise TypeError(\"not recognized as a GeometricEntity: %s\" % type(other)) from exc\n \n         Returns\n         =======\n"
}