{
  "patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex c3fdcdd435..5ddfbb61de 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -67,10 +67,10 @@ def _print_Add(self, expr, order=None):\n             sign = \"\"\n         return sign + ' '.join(l)\n \n-    def _print_BooleanTrue(self, expr):\n+    def _print_BooleanTrue(self):\n         return \"True\"\n \n-    def _print_BooleanFalse(self, expr):\n+    def _print_BooleanFalse(self):\n         return \"False\"\n \n     def _print_Not(self, expr):\n@@ -98,10 +98,10 @@ def _print_BlockMatrix(self, B):\n             self._print(B.blocks[0, 0])\n         return self._print(B.blocks)\n \n-    def _print_Catalan(self, expr):\n+    def _print_Catalan(self):\n         return 'Catalan'\n \n-    def _print_ComplexInfinity(self, expr):\n+    def _print_ComplexInfinity(self):\n         return 'zoo'\n \n     def _print_ConditionSet(self, s):\n@@ -114,7 +114,7 @@ def _print_ConditionSet(self, s):\n     def _print_Derivative(self, expr):\n         dexpr = expr.expr\n         dvars = [i[0] if i[1] == 1 else i for i in expr.variable_count]\n-        return 'Derivative(%s)' % \", \".join(map(lambda arg: self._print(arg), [dexpr] + dvars))\n+        return 'Derivative(%s)' % \", \".join(map(self._print, [dexpr] + dvars))\n \n     def _print_dict(self, d):\n         keys = sorted(d.keys(), key=default_sort_key)\n@@ -212,18 +212,18 @@ def _print_LatticeOp(self, expr):\n         return expr.func.__name__ + \"(%s)\" % \", \".join(self._print(arg) for arg in args)\n \n     def _print_Limit(self, expr):\n-        e, z, z0, dir = expr.args\n-        if str(dir) == \"+\":\n+        e, z, z0, direction = expr.args\n+        if str(direction) == \"+\":\n             return \"Limit(%s, %s, %s)\" % tuple(map(self._print, (e, z, z0)))\n         else:\n             return \"Limit(%s, %s, %s, dir='%s')\" % tuple(map(self._print,\n-                                                            (e, z, z0, dir)))\n+                                                                (e, z, z0, direction)))\n \n     def _print_list(self, expr):\n         return \"[%s]\" % self.stringify(expr, \", \")\n \n     def _print_MatrixBase(self, expr):\n-        return expr._format_str(self)\n+        return expr.format(self)\n \n     def _print_MatrixElement(self, expr):\n         return self.parenthesize(expr.parent, PRECEDENCE[\"Atom\"], strict=True) \\\n"
}