{
  "patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f8e4be999..cededbbff 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -115,7 +115,7 @@ def annotation_option(arg: Any) -> Any:\n         return arg\n \n \n-def bool_option(arg: Any) -> bool:\n+def bool_option() -> bool:\n     \"\"\"Used to convert flag options to auto directives.  (Instead of\n     directives.flag(), which returns None).\n     \"\"\"\n@@ -149,8 +149,7 @@ def cut_lines(pre: int, post: int = 0, what: str = None) -> Callable:\n \n     This can (and should) be used in place of :confval:`automodule_skip_lines`.\n     \"\"\"\n-    def process(app: Sphinx, what_: str, name: str, obj: Any, options: Any, lines: List[str]\n-                ) -> None:\n+    def process(what_: str, name: str, obj: Any, options: Any, lines: List[str]) -> None:\n         if what and what_ not in what:\n             return\n         del lines[:pre]\n@@ -177,8 +176,7 @@ def between(marker: str, what: Sequence[str] = None, keepempty: bool = False,\n     \"\"\"\n     marker_re = re.compile(marker)\n \n-    def process(app: Sphinx, what_: str, name: str, obj: Any, options: Any, lines: List[str]\n-                ) -> None:\n+    def process(what_: str, name: str, obj: Any, options: Any, lines: List[str]) -> None:\n         if what and what_ not in what:\n             return\n         deleted = 0\n"
}