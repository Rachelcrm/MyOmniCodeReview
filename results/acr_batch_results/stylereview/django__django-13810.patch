{
  "patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8e8c3da06a..dd7e12f57f 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -126,7 +126,7 @@ class BaseHandler:\n         # Setup default url resolver for this thread\n         set_urlconf(settings.ROOT_URLCONF)\n         response = self._middleware_chain(request)\n-        response._resource_closers.append(request.close)\n+        response.add_closer(request.close)\n         if response.status_code >= 400:\n             log_response(\n                 '%s: %s', response.reason_phrase, request.path,\n@@ -177,7 +177,12 @@ class BaseHandler:\n                 wrapped_callback = async_to_sync(wrapped_callback)\n             try:\n                 response = wrapped_callback(request, *callback_args, **callback_kwargs)\n+            except HttpException as e:\n+                response = self.process_exception_by_middleware(e, request)\n+                if response is None:\n+                    raise\n             except Exception as e:\n+                # Handle other specific exceptions\n                 response = self.process_exception_by_middleware(e, request)\n                 if response is None:\n                     raise\n@@ -229,7 +234,15 @@ class BaseHandler:\n                 wrapped_callback = sync_to_async(wrapped_callback, thread_sensitive=True)\n             try:\n                 response = await wrapped_callback(request, *callback_args, **callback_kwargs)\n+            except HttpException as e:\n+                response = await sync_to_async(\n+                    self.process_exception_by_middleware,\n+                    thread_sensitive=True,\n+                )(e, request)\n+                if response is None:\n+                    raise\n             except Exception as e:\n+                # Handle other specific exceptions\n                 response = await sync_to_async(\n                     self.process_exception_by_middleware,\n                     thread_sensitive=True,\n@@ -340,7 +353,7 @@ class BaseHandler:\n         return None\n \n \n-def reset_urlconf(sender, **kwargs):\n+def reset_urlconf(sender, *args, **kwargs):\n     \"\"\"Reset the URLconf after each request is finished.\"\"\"\n     set_urlconf(None)\n \n"
}