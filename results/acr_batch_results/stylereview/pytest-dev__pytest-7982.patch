{
  "patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex f0bdb1481..5c2f15d22 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -146,7 +146,7 @@ def find_prefixed(root: Path, prefix: str) -> Iterator[Path]:\n             yield x\n \n \n-def extract_suffixes(iter: Iterable[PurePath], prefix: str) -> Iterator[str]:\n+def extract_suffixes(paths: Iterable[PurePath], prefix: str) -> Iterator[str]:\n     \"\"\"Return the parts of the paths following the prefix.\n \n     :param iter: Iterator over path names.\n@@ -188,7 +188,7 @@ def _force_symlink(\n         pass\n     try:\n         current_symlink.symlink_to(link_to)\n-    except Exception:\n+    except OSError:\n         pass\n \n \n@@ -358,13 +358,13 @@ def make_numbered_dir_with_cleanup(\n     raise e\n \n \n-def resolve_from_str(input: str, rootpath: Path) -> Path:\n-    input = expanduser(input)\n-    input = expandvars(input)\n-    if isabs(input):\n-        return Path(input)\n+def resolve_from_str(path: str, rootpath: Path) -> Path:\n+    path = expanduser(path)\n+    path = expandvars(path)\n+    if isabs(path):\n+        return Path(path)\n     else:\n-        return rootpath.joinpath(input)\n+        return rootpath.joinpath(path)\n \n \n def fnmatch_ex(pattern: str, path) -> bool:\n@@ -434,7 +434,7 @@ class ImportPathMismatchError(ImportError):\n \n \n def import_path(\n-    p: Union[str, py.path.local, Path],\n+    p: Union[str, Path],\n     *,\n     mode: Union[str, ImportMode] = ImportMode.prepend,\n ) -> ModuleType:\n"
}