{
  "patch": "To address the issue of inconsistent behavior with the `--check` option in `makemigrations`, we need to modify the code so that it exits without generating migrations when `--check` is used and there are pending changes.\n\nThe issue arises because currently, `makemigrations --check` generates migrations if there are pending changes, which is inconsistent with other commands like `migrate --check` and `optimizemigrations --check` that simply exit without making changes.\n\nThe necessary modification involves adding a conditional check for the `--check` option and exiting the process if it's enabled and there are pending migrations.\n\nHere's the modification:\n\n```\n<file>django/core/management/commands/makemigrations.py</file>\n<original>\n    def handle(self, *args, **options):\n        self.check_migrations()\n        if options[\"dry_run\"]:\n            dry_run = True\n        else:\n            dry_run = False\n        if options[\"merge\"]:\n            self.merge_migrations(**options)\n        else:\n            self.load_migrations(\n                {\n                    app_label: options[\"app_label\"]\n                    for app_label in options[\"app_label\"]\n                }\n            )\n            migrations = self.find_migrations()\n            if not migrations:\n                self.stdout.write(self.style.SUCCESS(\"No changes detected\"))\n            else:\n                if dry_run:\n                    self.stdout.write(\n                        self.style.SUCCESS(\n                            \"You have requested a dry run, which didn't actually \"\n                            \"make any changes.\"\n                        )\n                    )\n                else:\n                    self.stdout.write(\n                        self.style.SUCCESS(\"Migrations to apply:\")\n                    )\n                    for migration in migrations:\n                        self.stdout.write(\n                            self.style.SUCCESS(f\"  {migration.app_label}.{migration.name}\")\n                        )\n                    if not options[\"delete_ghost_migrations\"]:\n                        migrations = [\n                            m\n                            for m in migrations\n                            if m.app_label in options[\"app_label\"]\n                        ]\n                        self.apply_migrations(migrations, **options)\n</original>\n<patched>\n    def handle(self, *args, **options):\n        self.check_migrations()\n        if options[\"check\"]:\n            if self.find_migrations():\n                self.stdout.write(self.style.WARNING(\"Pending migrations detected:\"))\n                for app_label, migrations in self.find_migrations().items():\n                    for migration in migrations:\n                        self.stdout.write(\n                            self.style.WARNING(f\"  {app_label}.{migration.name}\")\n                        )\n                self.stdout.write(self.style.ERROR(\"Please run migrations.\"))\n                sys.exit(1)\n            else:\n                self.stdout.write(self.style.SUCCESS(\"No changes detected\"))\n            return\n        if options[\"dry_run\"]:\n            dry_run = True\n        else:\n            dry_run = False\n        if options[\"merge\"]:\n            self.merge_migrations(**options)\n        else:\n            self.load_migrations(\n                {\n                    app_label: options[\"app_label\"]\n                    for app_label in options[\"app_label\"]\n                }\n            )\n            migrations = self.find_migrations()\n            if not migrations:\n                self.stdout.write(self.style.SUCCESS(\"No changes detected\"))\n            else:\n                if dry_run:\n                    self.stdout.write(\n                        self.style.SUCCESS(\n                            \"You have requested a dry run, which didn't actually \"\n                            \"make any changes.\"\n                        )\n                    )\n                else:\n                    self.stdout.write(\n                        self.style.SUCCESS(\"Migrations to apply:\")\n                    )\n                    for migration in migrations:\n                        self.stdout.write(\n                            self.style.SUCCESS(f\"  {migration.app_label}.{migration.name}\")\n                        )\n                    if not options[\"delete_ghost_migrations\"]:\n                        migrations = [\n                            m\n                            for m in migrations\n                            if m.app_label in options[\"app_label\"]\n                        ]\n                        self.apply_migrations(migrations, **options)\n</patched>\n```"
}