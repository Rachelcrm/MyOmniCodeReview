{
  "patch": "To address the issue with the posix implementation of locks in `django/core/files/locks.py`, we need to modify the `lock` and `unlock` functions to correctly handle the return values and exceptions raised by `fcntl.flock`.\n\nThe current implementation of the `lock` function returns `ret == 0`, which is incorrect because `fcntl.flock` returns `None` on success and raises an `OSError` on failure. Similarly, the `unlock` function also returns `ret == 0`, which is not the correct way to handle the return value of `fcntl.flock`.\n\nTo fix this issue, we need to modify the `lock` and `unlock` functions to use a try-except block to handle the `OSError` exception raised by `fcntl.flock` on failure. If `fcntl.flock` is successful, the function should return `True`, and if it raises an `OSError`, the function should return `False`.\n\nHere is the patch:\n\n```\n<file>django/core/files/locks.py</file>\n<original>\n         def lock(f, flags):\n             ret = fcntl.flock(_fd(f), flags)\n             return ret == 0\n         def unlock(f):\n             ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n             return ret == 0\n</original>\n<patched>\n         def lock(f, flags):\n             try:\n                 fcntl.flock(_fd(f), flags)\n                 return True\n             except OSError:\n                 return False\n         def unlock(f):\n             try:\n                 fcntl.flock(_fd(f), fcntl.LOCK_UN)\n                 return True\n             except OSError:\n                 return False\n</patched>\n```\n\nThis patch modifies the `lock` and `unlock` functions to use a try-except block to handle the `OSError` exception raised by `fcntl.flock`. If `fcntl.flock` is successful, the function returns `True`, and if it raises an `OSError`, the function returns `False`. This ensures that the functions correctly handle the return values and exceptions raised by `fcntl.flock`."
}