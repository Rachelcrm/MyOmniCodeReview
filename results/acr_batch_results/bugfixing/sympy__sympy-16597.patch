{
  "patch": "diff --git a/sympy/assumptions/assume.py b/sympy/assumptions/assume.py\nindex abfae3af4f..159a0b9b37 100644\n--- a/sympy/assumptions/assume.py\n+++ b/sympy/assumptions/assume.py\n@@ -136,10 +136,15 @@ class Predicate(Boolean):\n \n     To obtain the truth value of an expression containing predicates, use\n     the function ``ask``:\n-\n+    \n         >>> ask(Q.prime(7))\n         True\n \n+    Notes:\n+    =====\n+    It is assumed that the properties of numbers are consistent, \n+    i.e., being even implies being finite.\n+\n     The tautological predicate ``Q.is_true`` can be used to wrap other objects:\n \n         >>> from sympy.abc import x\n@@ -178,7 +183,7 @@ def sort_key(self, order=None):\n     def eval(self, expr, assumptions=True):\n         \"\"\"\n         Evaluate self(expr) under the given assumptions.\n-\n+        \n         This uses only direct resolution methods, not logical inference.\n         \"\"\"\n         res, _res = None, None\n@@ -203,6 +208,9 @@ def eval(self, expr, assumptions=True):\n                     # only check consistency if both resolutors have concluded\n                     if _res != res:\n                         raise ValueError('incompatible resolutors')\n+                if self.name == 'even' and res is True:\n+                    # Ensure even implies finite\n+                    res = res and expr.is_finite\n                 break\n         return res\n \n"
}