{
  "patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex f02199d97c..2ef4e97cd0 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1411,14 +1411,15 @@ class SQLInsertCompiler(SQLCompiler):\n                 cursor.execute(sql, params)\n             if not self.returning_fields:\n                 return []\n-            if self.connection.features.can_return_rows_from_bulk_insert and len(self.query.objs) > 1:\n-                return self.connection.ops.fetch_returned_insert_rows(cursor)\n-            if self.connection.features.can_return_columns_from_insert:\n-                assert len(self.query.objs) == 1\n-                return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]\n-            return [(self.connection.ops.last_insert_id(\n-                cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column\n-            ),)]\n+            results = []\n+            for row in self.connection.ops.fetch_returned_insert_rows(cursor):\n+                converted_row = []\n+                for i, value in enumerate(row):\n+                    field = self.returning_fields[i]\n+                    converted_value = field.from_db_value(value, self.query.expression, self.connection)\n+                    converted_row.append(converted_value)\n+                results.append(tuple(converted_row))\n+            return results\n \n \n class SQLDeleteCompiler(SQLCompiler):\n"
}