{
  "patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex ea7e3a2d94..4195a24f32 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -57,6 +57,8 @@ def __init__(self, settings={}):\n         \"\"\"Register function mappings supplied by user\"\"\"\n         CodePrinter.__init__(self, settings)\n         self.known_functions = dict(known_functions)\n+        self.known_functions['Max'] = [(lambda *x: True, 'Max')]\n+        self.known_functions['Min'] = [(lambda *x: True, 'Min')]\n         userfuncs = settings.get('user_functions', {})\n         for k, v in userfuncs.items():\n             if not isinstance(v, list):\n@@ -99,7 +101,12 @@ def _print_Function(self, expr):\n             for cond, mfunc in cond_mfunc:\n                 if cond(*expr.args):\n                     return \"%s[%s]\" % (mfunc, self.stringify(expr.args, \", \"))\n-        return expr.func.__name__ + \"[%s]\" % self.stringify(expr.args, \", \")\n+        elif expr.func.__name__ == 'Max':\n+            return \"Max[%s]\" % self.stringify(expr.args, \", \")\n+        elif expr.func.__name__ == 'Min':\n+            return \"Min[%s]\" % self.stringify(expr.args, \", \")\n+        else:\n+            return expr.func.__name__ + \"[%s]\" % self.stringify(expr.args, \", \")\n \n     def _print_Integral(self, expr):\n         if len(expr.variables) == 1 and not expr.limits[0][1:]:\n"
}