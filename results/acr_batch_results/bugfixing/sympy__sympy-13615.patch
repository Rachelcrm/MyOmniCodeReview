{
  "patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 917717bb74..9e5c9c75d5 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1932,24 +1932,30 @@ def _intersect(self, other):\n \n     def _complement(self, other):\n         if isinstance(other, Interval):\n-            nums = sorted(m for m in self.args if m.is_number)\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                # Reals cannot contain elements other than numbers and symbols.\n-\n-                intervals = []  # Build up a list of intervals between the elements\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n-                for a, b in zip(nums[:-1], nums[1:]):\n-                    intervals.append(Interval(a, b, True, True))  # both open\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-\n-                if syms != []:\n-                    return Complement(Union(intervals, evaluate=False),\n-                            FiniteSet(*syms), evaluate=False)\n+            nums = [m for m in self.args if m.is_number]\n+            syms = [m for m in self.args if not m.is_number]\n+            if other == S.Reals:\n+                if nums:\n+                    intervals = []\n+                    intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n+                    for a, b in zip(nums[:-1], nums[1:]):\n+                        intervals.append(Interval(a, b, True, True))\n+                    intervals.append(Interval(nums[-1], S.Infinity, True, True))\n+                    if syms:\n+                        return Complement(Union(intervals, evaluate=False),\n+                                        FiniteSet(*syms), evaluate=False)\n+                    else:\n+                        return Union(intervals, evaluate=False)\n+                elif syms:\n+                    return FiniteSet(*syms)\n                 else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+                    return None\n+            else:\n+                if nums == [] and syms == []:\n+                    return other\n+                numeric_part = FiniteSet(*nums)\n+                symbolic_part = FiniteSet(*syms)\n+                return Complement(other, numeric_part) + symbolic_part\n \n         elif isinstance(other, FiniteSet):\n             unk = []\n"
}