{
  "patch": "To address the issue of `FileFeedStorage` creating an empty file when no items are scraped, we need to modify the `IFeedStorage` interface and its implementations to include a `cleanup` method. This method will be responsible for removing empty files.\n\nThe `FeedExporter` class also needs to be updated to call the `cleanup` method when the item count is zero and `FEED_STORE_EMPTY` is `False`.\n\nHere are the necessary modifications:\n\n```\n<file>scrapy/extensions/feedexport.py</file>\n<original>\n91     def open(spider):\n96         \"\"\"Open the storage for the given spider. It must return a file-like\n97         object that will be used for the exporters\"\"\"\n98 \n99     def store(file):\n100         \"\"\"Store the given file stream\"\"\"\n</original>\n<patched>\n91     def open(spider):\n96         \"\"\"Open the storage for the given spider. It must return a file-like\n97         object that will be used for the exporters\"\"\"\n98 \n99     def store(file):\n100         \"\"\"Store the given file stream\"\"\"\n101 \n102     def cleanup():\n103         \"\"\"Clean up the storage after the spider is closed. \n103         For file-based storage, this may mean deleting the file.\n104         \"\"\"\n</patched>\n```\n\n```\n<file>scrapy/extensions/feedexport.py</file>\n<original>\n153     def store(self, file):\n154         file.close()\n</original>\n<patched>\n153     def store(self, file):\n154         file.close()\n\n155     def cleanup(self):\n156         import os\n157         if os.path.exists(self.path):\n158             os.remove(self.path)\n</patched>\n```\n\n```\n<file>scrapy/extensions/feedexport.py</file>\n<original>\n409         slot.finish_exporting()\n410         if not slot.itemcount and not slot.store_empty:\n411             # We need to call slot.storage.store nonetheless to get the file\n412             # properly closed.\n413             return defer.maybeDeferred(slot.storage.store, get_file(slot))\n</original>\n<patched>\n409         slot.finish_exporting()\n410         if not slot.itemcount and not slot.store_empty:\n411             # We need to call slot.storage.store nonetheless to get the file\n412             # properly closed.\n413             d = defer.maybeDeferred(slot.storage.store, get_file(slot))\n414             d.addCallback(lambda _: slot.storage.cleanup())\n415             return d\n</patched>\n```\n\nWith these modifications, the `FileFeedStorage` will remove the empty file when `FEED_STORE_EMPTY` is `False` and no items are scraped. The `IFeedStorage` interface now includes a `cleanup` method that can be implemented by different storage classes to perform cleanup actions. The `FeedExporter` class has been updated to call the `cleanup` method when necessary."
}