{
  "patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex 3bc02b8dd3..2b93f201f4 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -261,30 +261,32 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):\n         Trim trailing and wrapping punctuation from `middle`. Return the items\n         of the new state.\n         \"\"\"\n+        # Unescape entities to avoid breaking them by removing ';'.\n+        middle_unescaped = html.unescape(middle)\n         # Continue trimming until middle remains unchanged.\n         trimmed_something = True\n         while trimmed_something:\n             trimmed_something = False\n             # Trim wrapping punctuation.\n             for opening, closing in WRAPPING_PUNCTUATION:\n-                if middle.startswith(opening):\n-                    middle = middle[len(opening):]\n+                if middle_unescaped.startswith(opening):\n+                    middle_unescaped = middle_unescaped[len(opening):]\n                     lead += opening\n+                    middle = middle[len(opening):]\n                     trimmed_something = True\n                 # Keep parentheses at the end only if they're balanced.\n-                if (middle.endswith(closing) and\n-                        middle.count(closing) == middle.count(opening) + 1):\n-                    middle = middle[:-len(closing)]\n+                if (middle_unescaped.endswith(closing) and\n+                        middle_unescaped.count(closing) == middle_unescaped.count(opening) + 1):\n+                    middle_unescaped = middle_unescaped[:-len(closing)]\n                     trail = closing + trail\n+                    middle = middle[:-len(closing)]\n                     trimmed_something = True\n-            # Trim trailing punctuation (after trimming wrapping punctuation,\n-            # as encoded entities contain ';'). Unescape entities to avoid\n-            # breaking them by removing ';'.\n-            middle_unescaped = html.unescape(middle)\n+            # Trim trailing punctuation.\n             stripped = middle_unescaped.rstrip(TRAILING_PUNCTUATION_CHARS)\n             if middle_unescaped != stripped:\n-                trail = middle[len(stripped):] + trail\n-                middle = middle[:len(stripped) - len(middle_unescaped)]\n+                trail = middle_unescaped[len(stripped):] + trail\n+                middle = middle[:len(stripped)]\n+                middle_unescaped = stripped\n                 trimmed_something = True\n         return lead, middle, trail\n \n"
}