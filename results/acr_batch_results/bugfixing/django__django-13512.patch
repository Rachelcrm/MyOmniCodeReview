{
  "patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..e28969a912 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -29,7 +29,7 @@ class JSONField(CheckFieldDefaultMixin, Field):\n             raise ValueError('The encoder parameter must be a callable object.')\n         if decoder and not callable(decoder):\n             raise ValueError('The decoder parameter must be a callable object.')\n-        self.encoder = encoder\n+        self.encoder = encoder or json.JSONEncoder\n         self.decoder = decoder\n         super().__init__(verbose_name, name, **kwargs)\n \n@@ -81,7 +81,7 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\n@@ -92,7 +92,7 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def validate(self, value, model_instance):\n         super().validate(value, model_instance)\n         try:\n-            json.dumps(value, cls=self.encoder)\n+            json.dumps(value, cls=self.encoder, ensure_ascii=False)\n         except TypeError:\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 9de2c60b35..8235aaac01 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1258,7 +1258,7 @@ class JSONField(CharField):\n     def prepare_value(self, value):\n         if isinstance(value, InvalidJSONInput):\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def has_changed(self, initial, data):\n         if super().has_changed(initial, data):\n"
}