{
  "patch": "To address the issue described, we need to modify the `modelform_factory` function in `django/forms/models.py` to respect the `formfield_callback` specified in the `Meta` class of the provided form. The current implementation ignores this callback if a `formfield_callback` is provided as an argument to `modelform_factory`.\n\nThe reasoning behind this modification is to ensure that the `modelform_factory` function behaves consistently with the expectations of developers using Django's form framework. Specifically, when a form is provided with a `Meta` class that specifies a `formfield_callback`, this callback should be used by default unless explicitly overridden.\n\nHere's the necessary modification:\n\n```\n<file>django/forms/models.py</file>\n<original>\n639 form_class_attrs = {\"Meta\": Meta, \"formfield_callback\": formfield_callback}\n</original>\n<patched>\nif formfield_callback is not None:\n    form_class_attrs[\"formfield_callback\"] = formfield_callback\n</patched>\n```\n\nAdditionally, we should adjust how the `Meta` class is handled to properly inherit and set the `formfield_callback`:\n\n```\n<file>django/forms/models.py</file>\n<original>\n631     bases = (form.Meta,) if hasattr(form, \"Meta\") else ()\n632     Meta = type(\"Meta\", bases, attrs)\n633     if formfield_callback:\n634         Meta.formfield_callback = staticmethod(formfield_callback)\n635     # Give this new form class a reasonable name.\n636     class_name = model.__name__ + \"Form\"\n</original>\n<patched>\n631     bases = (form.Meta,) if hasattr(form, \"Meta\") else ()\n632     Meta = type(\"Meta\", bases, attrs)\n     # Give this new form class a reasonable name.\n633     class_name = model.__name__ + \"Form\"\n</patched>\n```\n\nAnd finally, ensure that the `formfield_callback` from the `Meta` class is used if not explicitly provided:\n\nNo additional modifications are needed beyond adjusting how `form_class_attrs` are defined and removing the unconditional assignment of `formfield_callback` to `Meta`. The corrected version of `modelform_factory` will respect the `formfield_callback` defined in the form's `Meta` class, providing the expected behavior. \n\nSo the final patch will look like:\n\n```\n<file>django/forms/models.py</file>\n<original>\ndef modelform_factory(\n    model,\n    form=ModelForm,\n    fields=None,\n    exclude=None,\n    formfield_callback=None,\n    widgets=None,\n    localized_fields=None,\n    labels=None,\n    help_texts=None,\n    error_messages=None,\n    field_classes=None,\n):\n    \"\"\"\n    Return a ModelForm containing form fields for the given model. You can\n    optionally pass a `form` argument to use as a starting point for\n    constructing the ModelForm.\n\n    ``fields`` is an optional list of field names. If provided, include only\n    the named fields in the returned fields. If omitted or '__all__', use all\n    fields.\n\n    ``exclude`` is an optional list of field names. If provided, exclude the\n    named fields from the returned fields, even if they are listed in the\n    ``fields`` argument.\n\n    ``widgets`` is a dictionary of model field names mapped to a widget.\n\n    ``localized_fields`` is a list of names of fields which should be localized.\n\n    ``formfield_callback`` is a callable that takes a model field and returns\n    a form field.\n\n    ``labels`` is a dictionary of model field names mapped to a label.\n\n    ``help_texts`` is a dictionary of model field names mapped to a help text.\n\n    ``error_messages`` is a dictionary of model field names mapped to a\n    dictionary of error messages.\n\n    ``field_classes`` is a dictionary of model field names mapped to a form\n    field class.\n    \"\"\"\n    # Create the inner Meta class. FIXME: ideally, we should be able to\n    # construct a ModelForm without creating and passing in a temporary\n    # inner class.\n\n    # Build up a list of attributes that the Meta object will have.\n    attrs = {\"model\": model}\n    if fields is not None:\n        attrs[\"fields\"] = fields\n    if exclude is not None:\n        attrs[\"exclude\"] = exclude\n    if widgets is not None:\n        attrs[\"widgets\"] = widgets\n    if localized_fields is not None:\n        attrs[\"localized_fields\"] = localized_fields\n    if labels is not None:\n        attrs[\"labels\"] = labels\n    if help_texts is not None:\n        attrs[\"help_texts\"] = help_texts\n    if error_messages is not None:\n        attrs[\"error_messages\"] = error_messages\n    if field_classes is not None:\n        attrs[\"field_classes\"] = field_classes\n\n    # If parent form class already has an inner Meta, the Meta we're\n    # creating needs to inherit from the parent's inner meta.\n    bases = (form"
}