{
  "patch": "diff --git a/scrapy/middleware.py b/scrapy/middleware.py\nindex b6a427895..ce9f1bbcf 100644\n--- a/scrapy/middleware.py\n+++ b/scrapy/middleware.py\n@@ -36,7 +36,8 @@ class MiddlewareManager:\n \n     component_name = \"foo middleware\"\n \n-    def __init__(self, *middlewares: Any) -> None:\n+    def __init__(self, crawler: Crawler, *middlewares: Any) -> None:\n+        self.crawler = crawler\n         self.middlewares = middlewares\n         # Only process_spider_output and process_spider_exception can be None.\n         # Only process_spider_output can be a tuple, and only until _async compatibility methods are removed.\n@@ -51,17 +52,14 @@ class MiddlewareManager:\n         raise NotImplementedError\n \n     @classmethod\n-    def from_settings(cls, settings: Settings, crawler: Crawler | None = None) -> Self:\n-        mwlist = cls._get_mwlist_from_settings(settings)\n+    def from_crawler(cls, crawler: Crawler) -> Self:\n+        mwlist = cls._get_mwlist_from_settings(crawler.settings)\n         middlewares = []\n         enabled = []\n         for clspath in mwlist:\n             try:\n                 mwcls = load_object(clspath)\n-                if crawler is not None:\n-                    mw = build_from_crawler(mwcls, crawler)\n-                else:\n-                    mw = build_from_settings(mwcls, settings)\n+                mw = build_from_crawler(mwcls, crawler)\n                 middlewares.append(mw)\n                 enabled.append(clspath)\n             except NotConfigured as e:\n@@ -80,7 +78,7 @@ class MiddlewareManager:\n             },\n             extra={\"crawler\": crawler},\n         )\n-        return cls(*middlewares)\n+        return cls(crawler, *middlewares)\n \n     @classmethod\n     def from_crawler(cls, crawler: Crawler) -> Self:\n"
}