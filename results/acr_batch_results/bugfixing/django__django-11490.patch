{
  "patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1544beb613..f1b82cce0e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1219,6 +1219,8 @@ class QuerySet:\n             obj.query.filter_is_sticky = True\n             obj._sticky_filter = False\n         obj.__dict__.update(kwargs)\n+        if 'values_select' in kwargs:\n+            obj.query.values_select = kwargs['values_select']\n         return obj\n \n     def _clone(self):\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..e32b727099 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,12 +425,8 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n-                    compiler.query.set_values((\n-                        *self.query.extra_select,\n-                        *self.query.values_select,\n-                        *self.query.annotation_select,\n-                    ))\n+                if compiler.query.values_select != self.query.values_select:\n+                    compiler.query.set_values(self.query.values_select)\n                 part_sql, part_args = compiler.as_sql()\n                 if compiler.query.combinator:\n                     # Wrap in a subquery if wrapping in parentheses isn't\n"
}