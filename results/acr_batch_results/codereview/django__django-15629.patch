{
  "patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 696bfd7742..427e8ad52e 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -772,6 +772,31 @@ class BaseDatabaseSchemaEditor:\n         new_db_params,\n         strict=False,\n     ):\n+        # ...\n+        # Collation change?\n+        old_collation = old_db_params.get(\"collation\")\n+        new_collation = new_db_params.get(\"collation\")\n+        if old_collation != new_collation:\n+            # Collation change handles also a type change.\n+            fragment = self._alter_column_collation_sql(\n+                model, new_field, new_type, new_collation\n+            )\n+            actions.append(fragment)\n+        # ...\n+        if (\n+            self.connection.features.supports_foreign_keys\n+            and new_field.remote_field\n+            and (\n+                fks_dropped or not old_field.remote_field or not old_field.db_constraint\n+            )\n+            and new_field.db_constraint\n+        ):\n+            if new_collation:\n+                new_db_params[\"collation\"] = new_collation\n+            self.execute(\n+                self._create_fk_sql(model, new_field, \"_fk_%(to_table)s_%(to_column)s\")\n+            )\n+        # ...\n         \"\"\"Perform a \"physical\" (non-ManyToMany) field update.\"\"\"\n         # Drop any FK constraints, we'll remake them later\n         fks_dropped = set()\n"
}