{
  "patch": "diff --git a/keras/src/callbacks/callback_list.py b/keras/src/callbacks/callback_list.py\nindex b74d1ad4d..2fd54a436 100644\n--- a/keras/src/callbacks/callback_list.py\n+++ b/keras/src/callbacks/callback_list.py\n@@ -115,17 +115,19 @@ class CallbackList(Callback):\n         self._futures.append(future)\n \n     def _pythonify_logs(self, logs):\n-        result = {}\n-        for key, value in sorted(logs.items()):\n-            if isinstance(value, dict):\n-                result.update(self._pythonify_logs(value))\n-            else:\n-                try:\n-                    value = float(value)\n-                except:\n-                    pass\n-                result[key] = value\n-        return result\n+      \"\"\"Turns logs into standard form to be fed into callback methods.\"\"\"\n+      result = {}\n+      for key, value in sorted(logs.items()):\n+        if isinstance(value, dict):\n+          result.update(self._pythonify_logs(value))\n+        elif isinstance(value, (int, float)):\n+          result[key] = value\n+        else:\n+          try:\n+            result[key] = float(value)\n+          except ValueError:\n+            pass\n+      return result\n \n     def _clear_futures(self):\n         for future in self._futures:\n@@ -143,12 +145,13 @@ class CallbackList(Callback):\n             callback.on_epoch_begin(epoch, logs)\n \n     def on_epoch_end(self, epoch, logs=None):\n-        if self._async_train:\n-            self._clear_futures()\n-\n-        logs = logs or {}\n-        for callback in self.callbacks:\n-            callback.on_epoch_end(epoch, logs)\n+      if self._async_train:\n+        self._clear_futures()\n+      \n+      logs = logs or {}\n+      logs = self._pythonify_logs(logs)\n+      for callback in self.callbacks:\n+        callback.on_epoch_end(epoch, logs)\n \n     def on_train_batch_begin(self, batch, logs=None):\n         logs = logs or {}\ndiff --git a/keras/src/trainers/trainer.py b/keras/src/trainers/trainer.py\nindex 3668a988a..a3f00e80b 100644\n--- a/keras/src/trainers/trainer.py\n+++ b/keras/src/trainers/trainer.py\n@@ -965,18 +965,7 @@ class Trainer:\n                 f\"type {type(validation_freq)}.\"\n             )\n \n-    def _pythonify_logs(self, logs):\n-        result = {}\n-        for key, value in sorted(logs.items()):\n-            if isinstance(value, dict):\n-                result.update(self._pythonify_logs(value))\n-            else:\n-                try:\n-                    value = float(value)\n-                except:\n-                    pass\n-                result[key] = value\n-        return result\n+    # Remove this method as it's redundant with CallbackList's implementation\n \n     def _get_metrics_result_or_logs(self, logs):\n         \"\"\"Returns model metrics as a dict if the keys match with input logs.\n"
}