{
  "patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 52711d1324..0e4089f47e 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1186,6 +1186,29 @@ def visit_BinOp(self, node):\n             return new_node\n         return node\n \n+    def visit_Compare(self, node):\n+        if len(node.ops) == 1:\n+            op = node.ops[0]\n+            if isinstance(op, (ast.Lt, ast.LtE, ast.Gt, ast.GtE, ast.Eq, ast.NotEq)):\n+                sympy_class = {\n+                    ast.Lt: 'Lt',\n+                    ast.LtE: 'Le',\n+                    ast.Gt: 'Gt',\n+                    ast.GtE: 'Ge',\n+                    ast.Eq: 'Eq',\n+                    ast.NotEq: 'Ne'\n+                }[type(op)]\n+                left = self.visit(node.left)\n+                right = self.visit(node.comparators[0])\n+                return ast.Call(\n+                    func=ast.Name(id=sympy_class, ctx=ast.Load()),\n+                    args=[left, right],\n+                    keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],\n+                    starargs=None,\n+                    kwargs=None\n+                )\n+        return self.generic_visit(node)\n+\n     def visit_Call(self, node):\n         new_node = self.generic_visit(node)\n         if isinstance(node.func, ast.Name) and node.func.id in self.functions:\n"
}