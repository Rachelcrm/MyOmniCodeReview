{
  "patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 4f0290a4..04e4287c 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -1627,23 +1627,33 @@ class Plotter:\n \n     def _finalize_figure(self, p: Plot) -> None:\n \n-        for sub in self._subplots:\n-            ax = sub[\"ax\"]\n-            for axis in \"xy\":\n-                axis_key = sub[axis]\n-\n-                # Axis limits\n-                if axis_key in p._limits:\n-                    convert_units = getattr(ax, f\"{axis}axis\").convert_units\n-                    a, b = p._limits[axis_key]\n-                    lo = a if a is None else convert_units(a)\n-                    hi = b if b is None else convert_units(b)\n-                    if isinstance(a, str):\n-                        lo = cast(float, lo) - 0.5\n-                    if isinstance(b, str):\n-                        hi = cast(float, hi) + 0.5\n-                    ax.set(**{f\"{axis}lim\": (lo, hi)})\n-\n-        engine_default = None if p._target is not None else \"tight\"\n-        layout_engine = p._layout_spec.get(\"engine\", engine_default)\n-        set_layout_engine(self._figure, layout_engine)\n+       from seaborn._core.scales import Nominal\n+       for sub in self._subplots:\n+           ax = sub[\"ax\"]\n+           for axis in \"xy\":\n+               axis_key = sub[axis]\n+\n+               # Axis limits\n+               if axis_key in p._limits:\n+                   convert_units = getattr(ax, f\"{axis}axis\").convert_units\n+                   a, b = p._limits[axis_key]\n+                   lo = a if a is None else convert_units(a)\n+                   hi = b if b is None else convert_units(b)\n+\n+                   scale = self._scales[axis_key]\n+                   is_nominal = isinstance(scale, Nominal) or scale._infer_nominal\n+\n+                   if is_nominal:\n+                       lo -= 0.5\n+                       hi += 0.5\n+                   else:\n+                       if isinstance(a, str):\n+                           lo = cast(float, lo) - 0.5\n+                       if isinstance(b, str):\n+                           hi = cast(float, hi) + 0.5\n+\n+                   ax.set(**{f\"{axis}lim\": (lo, hi)})\n+\n+       engine_default = None if p._target is not None else \"tight\"\n+       layout_engine = p._layout_spec.get(\"engine\", engine_default)\n+       set_layout_engine(self._figure, layout_engine)\n"
}