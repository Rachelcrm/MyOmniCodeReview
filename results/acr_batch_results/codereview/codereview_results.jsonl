{"instance_id": "astropy__astropy-12907", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e27297..ff303186a1 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -304,9 +304,11 @@ def _separable(transform):\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n     elif isinstance(transform, CompoundModel):\n-        sepleft = _separable(transform.left)\n-        sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        if transform._separability_matrix is None:\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            transform._separability_matrix = _operators[transform.op](sepleft, sepright)\n+        return transform._separability_matrix\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n \n"}, "success": true, "processing_time": 215.4994399547577, "attempts": 1, "error": null}
{"instance_id": "astropy__astropy-13236", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/astropy/table/table.py b/astropy/table/table.py\nindex 5afe2127a3..f030776f00 100644\n--- a/astropy/table/table.py\n+++ b/astropy/table/table.py\n@@ -1243,6 +1243,12 @@ class Table:\n         # mixin class\n         if (not isinstance(data, Column) and not data_is_mixin\n                 and isinstance(data, np.ndarray) and len(data.dtype) > 1):\n+            warnings.warn(\n+                'In a future version of astropy (5.2), structured ndarrays will need to be '\n+                'explicitly wrapped in a Column instance. Until then, '\n+                'the structured ndarray will be viewed as an NdarrayMixin '\n+                'but this behavior will be removed in the future.',\n+                FutureWarning, stacklevel=2)\n             data = data.view(NdarrayMixin)\n             data_is_mixin = True\n \n"}, "success": true, "processing_time": 77.35391283035278, "attempts": 1, "error": null}
{"instance_id": "astropy__astropy-13453", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/astropy/io/ascii/core.py b/astropy/io/ascii/core.py\nindex 1a7785bd21..f43cd8dca0 100644\n--- a/astropy/io/ascii/core.py\n+++ b/astropy/io/ascii/core.py\n@@ -928,8 +928,12 @@ class BaseData:\n             lines.append(itertools.cycle(self.write_spacer_lines))\n \n         col_str_iters = self.str_vals()\n-        for vals in zip(*col_str_iters):\n-            lines.append(self.splitter.join(vals))\n+        if hasattr(self, '_formats'):\n+            for vals, formats in zip(col_str_iters, self._formats.values()):\n+                lines.append(self.splitter.join([f\"{val:{formats}}\" for val in vals]))\n+        else:\n+            for vals in zip(*col_str_iters):\n+                lines.append(self.splitter.join(vals))\n \n     def _set_col_formats(self):\n         \"\"\"WRITE: set column formats.\"\"\"\n"}, "success": true, "processing_time": 366.7365155220032, "attempts": 1, "error": null}
{"instance_id": "astropy__astropy-14508", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 118bfced89..38f9361040 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1299,30 +1299,31 @@ def _format_value(value):\n \n def _format_float(value):\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n-    value_str = f\"{value:.16G}\"\n-    if \".\" not in value_str and \"E\" not in value_str:\n-        value_str += \".0\"\n-    elif \"E\" in value_str:\n-        # On some Windows builds of Python (and possibly other platforms?) the\n-        # exponent is zero-padded out to, it seems, three digits.  Normalize\n-        # the format to pad only to two digits.\n-        significand, exponent = value_str.split(\"E\")\n-        if exponent[0] in (\"+\", \"-\"):\n-            sign = exponent[0]\n-            exponent = exponent[1:]\n-        else:\n-            sign = \"\"\n-        value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n-\n-    # Limit the value string to at most 20 characters.\n-    str_len = len(value_str)\n+    value_str = str(value)\n+    if len(value_str) > 20:\n+        # If the simple string representation is too long, use a more\n+        # explicit format\n+        value_str = f\"{value:.16G}\"\n+        if \".\" not in value_str and \"E\" not in value_str:\n+            value_str += \".0\"\n+        elif \"E\" in value_str:\n+            # On some Windows builds of Python (and possibly other platforms?) the\n+            # exponent is zero-padded out to, it seems, three digits.  Normalize\n+            # the format to pad only to two digits.\n+            significand, exponent = value_str.split(\"E\")\n+            if exponent[0] in (\"+\", \"-\"):\n+                sign = exponent[0]\n+                exponent = exponent[1:]\n+            else:\n+                sign = \"\"\n+            value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n \n-    if str_len > 20:\n+        # Limit the value string to at most 20 characters.\n         idx = value_str.find(\"E\")\n-\n         if idx < 0:\n             value_str = value_str[:20]\n         else:\n+            str_len = len(value_str)\n             value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]\n \n     return value_str\n"}, "success": true, "processing_time": 96.90280151367188, "attempts": 1, "error": null}
{"instance_id": "astropy__astropy-7166", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d18..94f43340b4 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -528,9 +528,9 @@ class InheritDocstrings(type):\n                 not key.startswith('_'))\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n-                is_public_member(key) and\n-                val.__doc__ is None):\n+            if (inspect.isfunction(val) or isinstance(val, property)) and \\\n+                is_public_member(key) and \\\n+                val.__doc__ is None:\n                 for base in cls.__mro__[1:]:\n                     super_method = getattr(base, key, None)\n                     if super_method is not None:\n"}, "success": true, "processing_time": 61.51679062843323, "attempts": 1, "error": null}
{"instance_id": "astropy__astropy-8707", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 8c1ac5d738..37de27922e 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -547,11 +547,25 @@ class Card(_Verify):\n     @classmethod\n     def fromstring(cls, image):\n         \"\"\"\n-        Construct a `Card` object from a (raw) string. It will pad the string\n-        if it is not the length of a card image (80 columns).  If the card\n-        image is longer than 80 columns, assume it contains ``CONTINUE``\n+        Construct a `Card` object from a (raw) string or byte string. It will\n+        pad the string if it is not the length of a card image (80 columns).  If\n+        the card image is longer than 80 columns, assume it contains ``CONTINUE``\n         card(s).\n+\n+        If a byte string is passed in, it is decoded into a string using ASCII\n+        encoding. Any invalid characters will result in a `ValueError`.\n         \"\"\"\n+        if isinstance(image, bytes):\n+            try:\n+                image = image.decode('ascii')\n+            except UnicodeDecodeError:\n+                raise ValueError(\"Input byte string is not a valid ASCII-encoded card image\")\n+        elif not isinstance(image, str):\n+            raise ValueError(\"Input data must be a string or byte string\")\n+        card = cls()\n+        card._image = _pad(image)\n+        card._verified = False\n+        return card\n \n         card = cls()\n         card._image = _pad(image)\n"}, "success": true, "processing_time": 169.39224934577942, "attempts": 1, "error": null}
{"instance_id": "django__django-11099", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..118da28408 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n"}, "success": true, "processing_time": 242.78166270256042, "attempts": 1, "error": null}
{"instance_id": "django__django-11141", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 8c308621d2..e4fa1b34e0 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -85,11 +85,7 @@ class MigrationLoader:\n                 raise\n             else:\n                 # Empty directories are namespaces.\n-                # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n-                    self.unmigrated_apps.add(app_config.label)\n-                    continue\n-                # Module is not a package (e.g. migrations.py).\n+               # Module is not a package (e.g. migrations.py).\n                 if not hasattr(module, '__path__'):\n                     self.unmigrated_apps.add(app_config.label)\n                     continue\n"}, "success": true, "processing_time": 93.34624004364014, "attempts": 1, "error": null}
{"instance_id": "django__django-11149", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 880a2cc17b..071a17ab0c 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2113,29 +2113,17 @@ class InlineModelAdmin(BaseModelAdmin):\n \n     def has_add_permission(self, request, obj):\n         if self.opts.auto_created:\n-            # We're checking the rights to an auto-created intermediate model,\n-            # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            return self.has_change_permission(request, obj)\n         return super().has_add_permission(request)\n \n     def has_change_permission(self, request, obj=None):\n         if self.opts.auto_created:\n-            # We're checking the rights to an auto-created intermediate model,\n-            # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            return self.has_change_permission(request, obj)\n         return super().has_change_permission(request)\n \n     def has_delete_permission(self, request, obj=None):\n         if self.opts.auto_created:\n-            # We're checking the rights to an auto-created intermediate model,\n-            # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            return self.has_change_permission(request, obj)\n         return super().has_delete_permission(request, obj)\n \n     def has_view_permission(self, request, obj=None):\n@@ -2147,10 +2135,7 @@ class InlineModelAdmin(BaseModelAdmin):\n                 if field.remote_field and field.remote_field.model != self.parent_model:\n                     opts = field.remote_field.model._meta\n                     break\n-            return (\n-                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) or\n-                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n-            )\n+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n         return super().has_view_permission(request)\n \n \n"}, "success": true, "processing_time": 153.16215348243713, "attempts": 1, "error": null}
{"instance_id": "django__django-11163", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex d157c291ef..8fed95f50d 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -70,20 +70,22 @@ def model_to_dict(instance, fields=None, exclude=None):\n     \"\"\"\n     Return a dict containing the data in ``instance`` suitable for passing as\n     a Form's ``initial`` keyword argument.\n-\n+ \n     ``fields`` is an optional list of field names. If provided, return only the\n     named.\n-\n+ \n     ``exclude`` is an optional list of field names. If provided, exclude the\n     named from the returned dict, even if they are listed in the ``fields``\n     argument.\n     \"\"\"\n     opts = instance._meta\n     data = {}\n+    if fields is not None and len(fields) == 0:\n+        return data\n     for f in chain(opts.concrete_fields, opts.private_fields, opts.many_to_many):\n         if not getattr(f, 'editable', False):\n             continue\n-        if fields and f.name not in fields:\n+        if fields is not None and f.name not in fields:\n             continue\n         if exclude and f.name in exclude:\n             continue\n"}, "success": true, "processing_time": 83.60758519172668, "attempts": 1, "error": null}
{"instance_id": "django__django-11179", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9..3a462f1c4c 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -277,6 +277,7 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n"}, "success": true, "processing_time": 100.41287851333618, "attempts": 1, "error": null}
{"instance_id": "django__django-11206", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 88b35fc435..d95cfd7bdc 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -30,7 +30,9 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n         # Format values with more than 200 digits (an arbitrary cutoff) using\n         # scientific notation to avoid high memory usage in {:f}'.format().\n         _, digits, exponent = number.as_tuple()\n-        if abs(exponent) + len(digits) > 200:\n+        if decimal_pos is not None and abs(number) < 10 ** -decimal_pos:\n+            str_number = '0.' + '0' * decimal_pos\n+        elif abs(exponent) + len(digits) > 200:\n             number = '{:e}'.format(number)\n             coefficient, exponent = number.split('e')\n             # Format the coefficient.\n"}, "success": true, "processing_time": 138.4275951385498, "attempts": 1, "error": null}
{"instance_id": "django__django-11211", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex ed98ecb48c..6e1354dd74 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -202,7 +202,7 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id,\n                                               using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n+                return (model._meta.get_field(model._meta.pk.attname).get_prep_value(getattr(obj, self.fk_field)),\n                         model)\n \n         return (\n"}, "success": true, "processing_time": 133.2414526939392, "attempts": 1, "error": null}
{"instance_id": "django__django-11239", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/management/commands/changepassword.py b/django/contrib/auth/management/commands/changepassword.py\nindex a69362f05c..25de1a7e9b 100644\n--- a/django/contrib/auth/management/commands/changepassword.py\n+++ b/django/contrib/auth/management/commands/changepassword.py\n@@ -32,13 +32,20 @@ class Command(BaseCommand):\n         )\n \n     def handle(self, *args, **options):\n+        database = options['database']\n+        db_options = {}\n+        if options['database_opt']:\n+            for opt in options['database_opt']:\n+                key, value = opt.split('=')\n+                db_options[key] = value\n+\n         if options['username']:\n             username = options['username']\n         else:\n             username = getpass.getuser()\n \n         try:\n-            u = UserModel._default_manager.using(options['database']).get(**{\n+            u = UserModel._default_manager.using(options['database'], **db_options).get(**{\n                 UserModel.USERNAME_FIELD: username\n             })\n         except UserModel.DoesNotExist:\ndiff --git a/django/contrib/auth/management/commands/createsuperuser.py b/django/contrib/auth/management/commands/createsuperuser.py\nindex d700ce4c0e..d8cc3d9e0e 100644\n--- a/django/contrib/auth/management/commands/createsuperuser.py\n+++ b/django/contrib/auth/management/commands/createsuperuser.py\n@@ -63,6 +63,11 @@ class Command(BaseCommand):\n     def handle(self, *args, **options):\n         username = options[self.UserModel.USERNAME_FIELD]\n         database = options['database']\n+        db_options = {}\n+        if options['database_opt']:\n+            for opt in options['database_opt']:\n+                key, value = opt.split('=')\n+                db_options[key] = value\n         user_data = {}\n         verbose_field_name = self.username_field.verbose_name\n         try:\n@@ -153,7 +158,7 @@ class Command(BaseCommand):\n                     else:\n                         raise CommandError('You must use --%s with --noinput.' % field_name)\n \n-            self.UserModel._default_manager.db_manager(database).create_superuser(**user_data)\n+            self.UserModel._default_manager.db_manager(database, **db_options).create_superuser(**user_data)\n             if options['verbosity'] >= 1:\n                 self.stdout.write(\"Superuser created successfully.\")\n         except KeyboardInterrupt:\n"}, "success": true, "processing_time": 304.98516869544983, "attempts": 1, "error": null}
{"instance_id": "django__django-11265", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex d69c24419b..ba8b8278e0 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1666,6 +1666,7 @@ class Query(BaseExpression):\n             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         # Generate the inner query.\n         query = Query(self.model)\n+        query._filtered_relations = self._filtered_relations.copy()\n         query.add_filter(filter_expr)\n         query.clear_ordering(True)\n         # Try to have as simple as possible subquery -> trim leading joins from\n"}, "success": true, "processing_time": 307.7537877559662, "attempts": 1, "error": null}
{"instance_id": "django__django-11276", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex 9c519978f5..505e8f9c16 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -38,12 +38,12 @@ def escape(text):\n     \"\"\"\n     Return the given text with ampersands, quotes and angle brackets encoded\n     for use in HTML.\n-\n+ \n     Always escape input, even if it's already escaped and marked as such.\n     This may result in double-escaping. If this is a concern, use\n     conditional_escape() instead.\n     \"\"\"\n-    return mark_safe(str(text).translate(_html_escapes))\n+    return mark_safe(html.escape(str(text)))\n \n \n _js_escapes = {\n"}, "success": true, "processing_time": 160.88345050811768, "attempts": 1, "error": null}
{"instance_id": "django__django-11333", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 247e3680c0..ec72215fc3 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -66,7 +66,7 @@ class ResolverMatch:\n @functools.lru_cache(maxsize=None)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n-        urlconf = settings.ROOT_URLCONF\n+        urlconf = settings.ROOT_URLCONF or get_urlconf()\n     return URLResolver(RegexPattern(r'^/'), urlconf)\n \n \n"}, "success": true, "processing_time": 104.14982891082764, "attempts": 1, "error": null}
{"instance_id": "django__django-11400", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex d65e01d5e2..008c308d38 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -198,6 +198,8 @@ class RelatedFieldListFilter(FieldListFilter):\n         related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n+        else:\n+            ordering = field.remote_field.model._meta.ordering\n         return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n@@ -419,4 +421,9 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n     def field_choices(self, field, request, model_admin):\n         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+        if related_admin is not None:\n+            ordering = related_admin.get_ordering(request)\n+        else:\n+            ordering = field.remote_field.model._meta.ordering\n+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n"}, "success": true, "processing_time": 84.916020154953, "attempts": 1, "error": null}
{"instance_id": "django__django-11433", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5edbbd376f..79c859e217 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -49,7 +49,10 @@ def construct_instance(form, instance, fields=None, exclude=None):\n         # Leave defaults for fields that aren't in POST data, except for\n         # checkbox inputs because they don't appear in POST data if not checked.\n         if (f.has_default() and\n-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n+                f.name not in cleaned_data):\n+            continue\n+        if (f.has_default() and\n+                cleaned_data[f.name] == f.to_python(f.default)):\n             continue\n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\n"}, "success": true, "processing_time": 93.32528066635132, "attempts": 1, "error": null}
{"instance_id": "django__django-11451", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/backends.py b/django/contrib/auth/backends.py\nindex f4b1722757..24fcb7ded8 100644\n--- a/django/contrib/auth/backends.py\n+++ b/django/contrib/auth/backends.py\n@@ -37,6 +37,8 @@ class ModelBackend(BaseBackend):\n     \"\"\"\n \n     def authenticate(self, request, username=None, password=None, **kwargs):\n+        if username is None or password is None:\n+            return\n         if username is None:\n             username = kwargs.get(UserModel.USERNAME_FIELD)\n         try:\n"}, "success": true, "processing_time": 119.3727867603302, "attempts": 1, "error": null}
{"instance_id": "django__django-11477", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex af0508f94e..e2808eb062 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -453,12 +453,12 @@ class URLResolver:\n                     bits = normalize(url_pattern.pattern.regex.pattern)\n                     lookups.appendlist(\n                         url_pattern.callback,\n-                        (bits, p_pattern, url_pattern.default_args, url_pattern.pattern.converters)\n+                        (bits, p_pattern, {**url_pattern.default_args, **url_pattern.pattern.converters.default_kwargs}, url_pattern.pattern.converters)\n                     )\n                     if url_pattern.name is not None:\n                         lookups.appendlist(\n                             url_pattern.name,\n-                            (bits, p_pattern, url_pattern.default_args, url_pattern.pattern.converters)\n+                            (bits, p_pattern, {**url_pattern.default_args, **url_pattern.pattern.converters.default_kwargs}, url_pattern.pattern.converters)\n                         )\n                 else:  # url_pattern is a URLResolver.\n                     url_pattern._populate()\n@@ -466,18 +466,7 @@ class URLResolver:\n                         apps.setdefault(url_pattern.app_name, []).append(url_pattern.namespace)\n                         namespaces[url_pattern.namespace] = (p_pattern, url_pattern)\n                     else:\n-                        for name in url_pattern.reverse_dict:\n-                            for matches, pat, defaults, converters in url_pattern.reverse_dict.getlist(name):\n-                                new_matches = normalize(p_pattern + pat)\n-                                lookups.appendlist(\n-                                    name,\n-                                    (\n-                                        new_matches,\n-                                        p_pattern + pat,\n-                                        {**defaults, **url_pattern.default_kwargs},\n-                                        {**self.pattern.converters, **url_pattern.pattern.converters, **converters}\n-                                    )\n-                                )\n+                        # No direct change needed here as the issue is more related to how converters and defaults are handled in lookups.\n                         for namespace, (prefix, sub_pattern) in url_pattern.namespace_dict.items():\n                             current_converters = url_pattern.pattern.converters\n                             sub_pattern.pattern.converters.update(current_converters)\n"}, "success": true, "processing_time": 270.9785385131836, "attempts": 1, "error": null}
{"instance_id": "django__django-11490", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a44adfc760..e32b727099 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -425,12 +425,8 @@ class SQLCompiler:\n                 # If the columns list is limited, then all combined queries\n                 # must have the same columns list. Set the selects defined on\n                 # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n-                    compiler.query.set_values((\n-                        *self.query.extra_select,\n-                        *self.query.values_select,\n-                        *self.query.annotation_select,\n-                    ))\n+                if compiler.query.values_select != self.query.values_select:\n+                    compiler.query.set_values(self.query.values_select)\n                 part_sql, part_args = compiler.as_sql()\n                 if compiler.query.combinator:\n                     # Wrap in a subquery if wrapping in parentheses isn't\n"}, "success": true, "processing_time": 374.44632363319397, "attempts": 1, "error": null}
{"instance_id": "django__django-11532", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py\nindex d18dfe4667..9276fba24f 100644\n--- a/django/core/mail/utils.py\n+++ b/django/core/mail/utils.py\n@@ -3,6 +3,7 @@ Email message and email sending related helper functions.\n \"\"\"\n \n import socket\n+import idna\n \n \n # Cache the hostname, but do it lazily: socket.getfqdn() can take a couple of\n@@ -13,7 +14,7 @@ class CachedDnsName:\n \n     def get_fqdn(self):\n         if not hasattr(self, '_fqdn'):\n-            self._fqdn = socket.getfqdn()\n+            self._fqdn = idna.encode(socket.getfqdn()).decode('ascii')\n         return self._fqdn\n \n \n"}, "success": true, "processing_time": 184.92687010765076, "attempts": 1, "error": null}
{"instance_id": "django__django-11551", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex f82c20c2f1..f10aa495a4 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -718,35 +718,32 @@ class ModelAdminChecks(BaseModelAdminChecks):\n     def _check_list_display_item(self, obj, item, label):\n         if callable(item):\n             return []\n-        elif hasattr(obj, item):\n-            return []\n-        elif hasattr(obj.model, item):\n+        try:\n+            field = obj.model._meta.get_field(item)\n+        except FieldDoesNotExist:\n             try:\n-                field = obj.model._meta.get_field(item)\n-            except FieldDoesNotExist:\n-                return []\n-            else:\n-                if isinstance(field, models.ManyToManyField):\n-                    return [\n-                        checks.Error(\n-                            \"The value of '%s' must not be a ManyToManyField.\" % label,\n-                            obj=obj.__class__,\n-                            id='admin.E109',\n-                        )\n-                    ]\n-                return []\n-        else:\n+                field = getattr(obj.model, item)\n+            except AttributeError:\n+                return [\n+                    checks.Error(\n+                        \"The value of '%s' refers to '%s', which is not a callable, \"\n+                        \"an attribute of '%s', or an attribute or method on '%s.%s'.\" % (\n+                            label, item, obj.__class__.__name__,\n+                            obj.model._meta.app_label, obj.model._meta.object_name,\n+                        ),\n+                        obj=obj.__class__,\n+                        id='admin.E108',\n+                    )\n+                ]\n+        if isinstance(field, models.ManyToManyField):\n             return [\n                 checks.Error(\n-                    \"The value of '%s' refers to '%s', which is not a callable, \"\n-                    \"an attribute of '%s', or an attribute or method on '%s.%s'.\" % (\n-                        label, item, obj.__class__.__name__,\n-                        obj.model._meta.app_label, obj.model._meta.object_name,\n-                    ),\n+                    \"The value of '%s' must not be a ManyToManyField.\" % label,\n                     obj=obj.__class__,\n-                    id='admin.E108',\n+                    id='admin.E109',\n                 )\n             ]\n+        return []\n \n     def _check_list_display_links(self, obj):\n         \"\"\" Check that list_display_links is a unique subset of list_display.\n"}, "success": true, "processing_time": 182.32270050048828, "attempts": 1, "error": null}
{"instance_id": "django__django-11555", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex eaccc96d7d..507a0ea766 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -722,8 +722,11 @@ class SQLCompiler:\n \n             results = []\n             for item in opts.ordering:\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n+                if isinstance(item, OrderBy):\n+                    results.append(item)\n+                else:\n+                    results.extend(self.find_ordering_name(item, opts, alias,\n+                                                           order, already_seen))\n             return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\n"}, "success": true, "processing_time": 227.151695728302, "attempts": 1, "error": null}
{"instance_id": "django__django-11603", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex da4ff928aa..8b10829eb8 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -99,6 +99,7 @@ class Aggregate(Func):\n class Avg(FixDurationInputMixin, NumericOutputFieldMixin, Aggregate):\n     function = 'AVG'\n     name = 'Avg'\n+    allow_distinct = True\n \n \n class Count(Aggregate):\n@@ -142,6 +143,7 @@ class StdDev(NumericOutputFieldMixin, Aggregate):\n class Sum(FixDurationInputMixin, Aggregate):\n     function = 'SUM'\n     name = 'Sum'\n+    allow_distinct = True\n \n \n class Variance(NumericOutputFieldMixin, Aggregate):\n"}, "success": true, "processing_time": 141.5260636806488, "attempts": 1, "error": null}
{"instance_id": "django__django-11728", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 1ce4594501..09e0189821 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -169,8 +169,8 @@ def replace_named_groups(pattern):\n         for idx, val in enumerate(pattern[end:]):\n             # If brackets are balanced, the end of the string for the current\n             # named capture group pattern has been reached.\n-            if unmatched_open_brackets == 0:\n-                group_pattern_and_name.append((pattern[start:end + idx], group_name))\n+            if unmatched_open_brackets == 0 or end + idx == len(pattern):\n+                group_pattern_and_name.append((pattern[start:end + idx + 1], group_name))\n                 break\n \n             # Check for unescaped `(` and `)`. They mark the start and end of a\n"}, "success": true, "processing_time": 221.87657475471497, "attempts": 1, "error": null}
{"instance_id": "django__django-11734", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex ab4f3fc534..c50012894a 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -908,7 +908,7 @@ class QuerySet:\n \n         clone = self._chain()\n         if negate:\n-            clone.query.add_q(~Q(*args, **kwargs))\n+            clone.query.add_q(~Q(*args, **kwargs), prelude=True)\n         else:\n             clone.query.add_q(Q(*args, **kwargs))\n         return clone\n"}, "success": true, "processing_time": 242.52724409103394, "attempts": 1, "error": null}
{"instance_id": "django__django-11740", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 0dc1c77c53..a09cf156a6 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -950,8 +950,10 @@ class MigrationAutodetector:\n             new_field_dec = self.deep_deconstruct(new_field)\n             if old_field_dec != new_field_dec:\n                 both_m2m = old_field.many_to_many and new_field.many_to_many\n+                old_field_is_relation = old_field.remote_field is not None\n+                new_field_is_relation = new_field.remote_field is not None\n                 neither_m2m = not old_field.many_to_many and not new_field.many_to_many\n-                if both_m2m or neither_m2m:\n+                if both_m2m or neither_m2m or (old_field_is_relation and not new_field_is_relation):\n                     # Either both fields are m2m or neither is\n                     preserve_default = True\n                     if (old_field.null and not new_field.null and not new_field.has_default() and\n"}, "success": true, "processing_time": 560.9444959163666, "attempts": 1, "error": null}
{"instance_id": "django__django-11749", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 5f2e64761e..224fcfdff3 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -132,9 +132,11 @@ def call_command(command_name, *args, **options):\n     parser_actions = list(get_actions(parser))\n     # Any required arguments which are passed in via **options must be passed\n     # to parse_args().\n+    # Required mutually exclusive groups are also included in parse_args\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if opt.required and opt.dest in options\n+        for opt in parser_actions \n+        if (opt.required or (opt.parent and opt.parent.required)) and opt.dest in options\n     ]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n"}, "success": true, "processing_time": 396.67620277404785, "attempts": 1, "error": null}
{"instance_id": "django__django-11790", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex a0cfed0995..5fdb135201 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -66,6 +66,7 @@ class UsernameField(forms.CharField):\n             **super().widget_attrs(widget),\n             'autocapitalize': 'none',\n             'autocomplete': 'username',\n+            'maxlength': str(self.max_length),\n         }\n \n \n"}, "success": true, "processing_time": 92.75524568557739, "attempts": 1, "error": null}
{"instance_id": "django__django-11815", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd379..4f60379d65 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,9 +120,7 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n-        imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        return \"%s.%s('%s')\" % (module, enum_class.__name__, self.value.name), set()\n \n \n class FloatSerializer(BaseSimpleSerializer):\n"}, "success": true, "processing_time": 104.49045753479004, "attempts": 1, "error": null}
{"instance_id": "django__django-11848", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue with `django.utils.http.parse_http_date` and its handling of two-digit years, we need to adjust the logic to comply with the relevant RFCs, specifically RFC 7231 and RFC 2822. These standards suggest that for dates in the RFC 850 format, which uses a two-digit year, the interpretation should be based on the current year. Specifically, a two-digit year that appears to be more than 50 years in the future should be interpreted as representing the most recent year in the past that had the same last two digits.\n\nThe current implementation hardcodes the years 0-69 to be in the range 2000-2069 and 70-99 to be in 1970-1999. However, this approach does not account for the current year and does not correctly implement the requirement to consider a timestamp that appears to be more than 50 years in the future as representing the most recent year in the past.\n\nHere's the step-by-step reasoning:\n\n1. **Identify the Current Logic**: The current logic for handling two-digit years in `parse_http_date` is as follows:\n   - If the year is less than 100, it checks if the year is less than 70. If so, it adds 2000 to the year; otherwise, it adds 1900.\n\n2. **Understand the Requirement**: The requirement is to interpret two-digit years based on the current year, considering a year to be in the past if it appears to be more than 50 years in the future.\n\n3. **Propose a Solution**: To fix this, we need to calculate the current year and then apply the logic based on the current year. We will use the `datetime` module to get the current year.\n\nNow, let's write the patch:\n\n```\n<file>django/utils/http.py</file>\n<original>\nfrom __future__ import unicode_literals\n</original>\n<patched>\nfrom __future__ import unicode_literals\nimport datetime\n</patched>\n```\n\n```\n<file>django/utils/http.py</file>\n<original>\n176     try:\n177         year = int(m.group('year'))\n178         if year < 100:\n179             if year < 70:\n180                 year += 2000\n181             else:\n182                 year += 1900\n183         month = MONTHS.index(m.group('mon').lower()) + 1\n184         day = int(m.group('day'))\n185         hour = int(m.group('hour'))\n186         min = int(m.group('min'))\n187         sec = int(m.group('sec'))\n188         result = datetime.datetime(year, month, day, hour, min, sec)\n189         return calendar.timegm(result.utctimetuple())\n</original>\n<patched>\n176     try:\n177         year = int(m.group('year'))\n178         if year < 100:\n179             current_year = datetime.datetime.now().year\n180             year_50y_ago = current_year - 50\n181             if year > (year_50y_ago % 100):\n182                 year += 1900\n183             else:\n184                 year += 2000\n185         month = MONTHS.index(m.group('mon').lower()) + 1\n186         day = int(m.group('day'))\n187         hour = int(m.group('hour'))\n188         min = int(m.group('min'))\n189         sec = int(m.group('sec'))\n190         result = datetime.datetime(year, month, day, hour, min, sec)\n191         return calendar.timegm(result.utctimetuple())\n</patched>\n```"}, "success": true, "processing_time": 354.2462103366852, "attempts": 1, "error": null}
{"instance_id": "django__django-11885", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex ae82d26340..e348d13bce 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -227,22 +227,18 @@ class Collector:\n                     if self.can_fast_delete(sub_objs, from_field=field):\n                         self.fast_deletes.append(sub_objs)\n                     else:\n-                        related_model = related.related_model\n-                        # Non-referenced fields can be deferred if no signal\n-                        # receivers are connected for the related model as\n-                        # they'll never be exposed to the user. Skip field\n-                        # deferring when some relationships are select_related\n-                        # as interactions between both features are hard to\n-                        # get right. This should only happen in the rare\n-                        # cases where .related_objects is overridden anyway.\n-                        if not (sub_objs.query.select_related or self._has_signal_listeners(related_model)):\n-                            referenced_fields = set(chain.from_iterable(\n-                                (rf.attname for rf in rel.field.foreign_related_fields)\n-                                for rel in get_candidate_relations_to_delete(related_model._meta)\n-                            ))\n-                            sub_objs = sub_objs.only(*tuple(referenced_fields))\n-                        if sub_objs:\n-                            field.remote_field.on_delete(self, field, sub_objs, self.using)\n+                        or_queries = []\n+                        for sub_batch in self.get_del_batches(sub_objs, field):\n+                            sub_query = sql.Query()\n+                            sub_query.add_filter(\n+                                \"%s__in\" % field.name,\n+                                [obj.pk for obj in sub_batch]\n+                            )\n+                            or_queries.append(sub_query)\n+                        if or_queries:\n+                            combined_query = sql.Query()\n+                            combined_query.add_filters(or_queries, connector=sql.OR)\n+                            self.fast_deletes.append(related.related_model._base_manager.using(self.using).filter(combined_query))\n             for field in model._meta.private_fields:\n                 if hasattr(field, 'bulk_related_objects'):\n                     # It's something like generic foreign key.\n@@ -309,10 +305,13 @@ class Collector:\n                         sender=model, instance=obj, using=self.using\n                     )\n \n-            # fast deletes\n-            for qs in self.fast_deletes:\n-                count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                    # fast deletes\n+                    for qs in self.fast_deletes:\n+                        if isinstance(qs, QuerySet):\n+                            count = qs._raw_delete(using=self.using)\n+                        else:\n+                            count = qs.delete_batch([], self.using)\n+                        deleted_counter[qs.model._meta.label] += count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n"}, "success": true, "processing_time": 176.81458044052124, "attempts": 1, "error": null}
{"instance_id": "django__django-11964", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex bbe362a6ab..e26eb3f233 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -65,6 +65,9 @@ class Choices(enum.Enum, metaclass=ChoicesMeta):\n \n class IntegerChoices(int, Choices):\n     \"\"\"Class for creating enumerated integer choices.\"\"\"\n+\n+    def __str__(self):\n+        return self.value\n     pass\n \n \n"}, "success": true, "processing_time": 287.03474164009094, "attempts": 1, "error": null}
{"instance_id": "django__django-11999", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex ee45bb941e..0e13c3a1b0 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -763,8 +763,10 @@ class Field(RegisterLookupMixin):\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n         if self.choices is not None:\n-            setattr(cls, 'get_%s_display' % self.name,\n-                    partialmethod(cls._get_FIELD_display, field=self))\n+            # Check if a method with the name already exists\n+            if not hasattr(cls, 'get_%s_display' % self.name):\n+                setattr(cls, 'get_%s_display' % self.name,\n+                        partialmethod(cls._get_FIELD_display, field=self))\n \n     def get_filter_kwargs_for_object(self, obj):\n         \"\"\"\n"}, "success": true, "processing_time": 352.88547348976135, "attempts": 1, "error": null}
{"instance_id": "django__django-12125", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..c4d88f31bc 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -144,6 +144,14 @@ class FunctionTypeSerializer(BaseSerializer):\n             klass = self.value.__self__\n             module = klass.__module__\n             return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\"import %s\" % module}\n+        elif hasattr(self.value, '__module__') and self.value.__module__ is not None:\n+            module_name = self.value.__module__\n+            return '%s.%s' % (module_name, self.value.__qualname__), {'import %s' % self.value.__module__}\n+        elif hasattr(self.value, \"__self__\") and self.value.__self__ is not None:\n+            # Inner class\n+            module = self.value.__module__\n+            klass = self.value.__self__\n+            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\"import %s\" % module}\n         # Further error checking\n         if self.value.__name__ == '<lambda>':\n             raise ValueError(\"Cannot serialize function: lambda\")\n"}, "success": true, "processing_time": 300.8149309158325, "attempts": 1, "error": null}
{"instance_id": "django__django-12143", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 137e6faa0f..a100f1c499 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1631,7 +1631,7 @@ class ModelAdmin(BaseModelAdmin):\n \n     def _get_edited_object_pks(self, request, prefix):\n         \"\"\"Return POST data values of list_editable primary keys.\"\"\"\n-        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(prefix, self.model._meta.pk.name))\n+        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(re.escape(prefix), self.model._meta.pk.name))\n         return [value for key, value in request.POST.items() if pk_pattern.match(key)]\n \n     def _get_list_editable_queryset(self, request, prefix):\n"}, "success": true, "processing_time": 111.0473701953888, "attempts": 1, "error": null}
{"instance_id": "django__django-12155", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py\nindex 4c0e7e2a56..aeec9fae5c 100644\n--- a/django/contrib/admindocs/utils.py\n+++ b/django/contrib/admindocs/utils.py\n@@ -34,7 +34,7 @@ def trim_docstring(docstring):\n         return ''\n     # Convert tabs to spaces and split into lines\n     lines = docstring.expandtabs().splitlines()\n-    indent = min(len(line) - len(line.lstrip()) for line in lines if line.lstrip())\n+    indent = min(len(line) - len(line.lstrip()) for line in lines[1:] if line.lstrip())\n     trimmed = [lines[0].lstrip()] + [line[indent:].rstrip() for line in lines[1:]]\n     return \"\\n\".join(trimmed).strip()\n \n"}, "success": true, "processing_time": 278.6735429763794, "attempts": 1, "error": null}
{"instance_id": "django__django-12193", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 6fe220bea7..af59d87dfe 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -521,9 +521,10 @@ class CheckboxInput(Input):\n         return str(value)\n \n     def get_context(self, name, value, attrs):\n+        if attrs is None:\n+            attrs = {}\n         if self.check_test(value):\n-            if attrs is None:\n-                attrs = {}\n+            attrs = attrs.copy()\n             attrs['checked'] = True\n         return super().get_context(name, value, attrs)\n \n"}, "success": true, "processing_time": 100.82394647598267, "attempts": 1, "error": null}
{"instance_id": "django__django-12209", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e3b14a41a0..ac7dfb0e78 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -851,6 +851,7 @@ class Model(metaclass=ModelBase):\n         if (\n             not force_insert and\n             self._state.adding and\n+            not pk_set and\n             self._meta.pk.default and\n             self._meta.pk.default is not NOT_PROVIDED\n         ):\n"}, "success": true, "processing_time": 151.45680832862854, "attempts": 1, "error": null}
{"instance_id": "django__django-12262", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/template/library.py b/django/template/library.py\nindex 20bc86dac8..c006b12297 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -261,7 +261,8 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n         if kwarg:\n             # The kwarg was successfully extracted\n             param, value = kwarg.popitem()\n-            if param not in params and param not in unhandled_kwargs and varkw is None:\n+            if (param not in params and param not in kwonly and \n+                param not in unhandled_kwargs and varkw is None):\n                 # An unexpected keyword argument was supplied\n                 raise TemplateSyntaxError(\n                     \"'%s' received unexpected keyword argument '%s'\" %\n@@ -271,6 +272,8 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n                 raise TemplateSyntaxError(\n                     \"'%s' received multiple values for keyword argument '%s'\" %\n                     (name, param))\n+            elif param in kwonly_defaults and param not in unhandled_kwargs:\n+                unhandled_kwargs.append(param)\n             else:\n                 # All good, record the keyword argument\n                 kwargs[str(param)] = value\n@@ -281,6 +284,14 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n                 elif param in unhandled_kwargs:\n                     # Same for keyword-only arguments\n                     unhandled_kwargs.remove(param)\n+                elif param in kwonly_defaults:\n+                    # If the argument is a kwonly with a default, it should not be in unhandled_kwargs\n+                    pass\n+                else:\n+                    # If the argument is not expected, raise an error\n+                    raise TemplateSyntaxError(\n+                        \"'%s' received unexpected keyword argument '%s'\" %\n+                        (name, param))\n         else:\n             if kwargs:\n                 raise TemplateSyntaxError(\n"}, "success": true, "processing_time": 141.00020241737366, "attempts": 1, "error": null}
{"instance_id": "django__django-12273", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 844c01e95e..cb6aed05d4 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -804,9 +804,11 @@ class Model(metaclass=ModelBase):\n         inserted = False\n         for parent, field in meta.parents.items():\n             # Make sure the link fields are synced between parent and self.\n-            if (field and getattr(self, parent._meta.pk.attname) is None and\n-                    getattr(self, field.attname) is not None):\n-                setattr(self, parent._meta.pk.attname, getattr(self, field.attname))\n+            if field:\n+                if getattr(self, parent._meta.pk.attname) is None and getattr(self, field.attname) is not None:\n+                    setattr(self, parent._meta.pk.attname, getattr(self, field.attname))\n+                elif getattr(self, parent._meta.pk.attname) is not None and getattr(self, field.attname) is None:\n+                    setattr(self, field.attname, self._get_pk_val(parent._meta))\n             parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)\n             updated = self._save_table(\n                 cls=parent, using=using, update_fields=update_fields,\n"}, "success": true, "processing_time": 803.2598037719727, "attempts": 1, "error": null}
{"instance_id": "django__django-12276", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 338d54d72f..b23d0bc5e2 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -273,6 +273,8 @@ class Widget(metaclass=MediaDefiningClass):\n         return id_\n \n     def use_required_attribute(self, initial):\n+        if initial:\n+            return False\n         return not self.is_hidden\n \n \n@@ -451,8 +453,7 @@ class ClearableFileInput(FileInput):\n             return False\n         return upload\n \n-    def use_required_attribute(self, initial):\n-        return super().use_required_attribute(initial) and not initial\n+    # Remove this method or adjust as necessary, ideally removing it to rely on FileInput's implementation\n \n     def value_omitted_from_data(self, data, files, name):\n         return (\n"}, "success": true, "processing_time": 115.19855237007141, "attempts": 1, "error": null}
{"instance_id": "django__django-12304", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex f48143ddaf..1944121520 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -60,6 +60,7 @@ class ChoicesMeta(enum.EnumMeta):\n \n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     \"\"\"Class for creating enumerated choices.\"\"\"\n+    do_not_call_in_templates = True\n \n     def __str__(self):\n         \"\"\"\n"}, "success": true, "processing_time": 201.607834815979, "attempts": 1, "error": null}
{"instance_id": "django__django-12308", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of JSONField values not being properly displayed in the admin when they are readonly, we need to modify the `display_for_field` function in `django/contrib/admin/utils.py`. The goal is to add a special case for `JSONField` values so that they are formatted correctly.\n\nThe current implementation of `display_for_field` handles various field types, including `BooleanField`, `DateTimeField`, `DecimalField`, and others, but it does not have a specific case for `JSONField`. As a result, `JSONField` values are displayed as dictionaries, which is not valid JSON.\n\nTo fix this, we need to import `JSONField` from `django.db.models.fields.json` and add an `elif` condition to check if the field is an instance of `JSONField`. If it is, we should call the `prepare_value` method of the `JSONField` class to format the JSON value.\n\nHere is the necessary patch:\n\n```\n<file>django/contrib/admin/utils.py</file>\n<original>\n380 def display_for_field(value, field, empty_value_display):\n381     from django.contrib.admin.templatetags.admin_list import _boolean_icon\n382 \n383     if getattr(field, 'flatchoices', None):\n384         return dict(field.flatchoices).get(value, empty_value_display)\n385     # BooleanField needs special-case null-handling, so it comes before the\n386     # general null test.\n387     elif isinstance(field, models.BooleanField):\n388         return _boolean_icon(value)\n389     elif value is None:\n390         return empty_value_display\n391     elif isinstance(field, models.DateTimeField):\n392         return formats.localize(timezone.template_localtime(value))\n393     elif isinstance(field, (models.DateField, models.TimeField)):\n394         return formats.localize(value)\n395     elif isinstance(field, models.DecimalField):\n396         return formats.number_format(value, field.decimal_places)\n397     elif isinstance(field, (models.IntegerField, models.FloatField)):\n398         return formats.number_format(value)\n399     elif isinstance(field, models.FileField) and value:\n400         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n401     else:\n402         return display_for_value(value, empty_value_display)\n</original>\n<patched>\n380 def display_for_field(value, field, empty_value_display):\n381     from django.contrib.admin.templatetags.admin_list import _boolean_icon\n382     from django.db.models.fields.json import JSONField\n\n383     if getattr(field, 'flatchoices', None):\n384         return dict(field.flatchoices).get(value, empty_value_display)\n385     # BooleanField needs special-case null-handling, so it comes before the\n386     # general null test.\n387     elif isinstance(field, models.BooleanField):\n388         return _boolean_icon(value)\n389     elif value is None:\n390         return empty_value_display\n391     elif isinstance(field, models.DateTimeField):\n392         return formats.localize(timezone.template_localtime(value))\n393     elif isinstance(field, (models.DateField, models.TimeField)):\n394         return formats.localize(value)\n395     elif isinstance(field, models.DecimalField):\n396         return formats.number_format(value, field.decimal_places)\n397     elif isinstance(field, (models.IntegerField, models.FloatField)):\n398         return formats.number_format(value)\n399     elif isinstance(field, models.FileField) and value:\n400         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n401     elif isinstance(field, JSONField):\n402         return field.prepare_value(value)\n403     else:\n404         return display_for_value(value, empty_value_display)\n</patched>\n```"}, "success": true, "processing_time": 411.7260549068451, "attempts": 1, "error": null}
{"instance_id": "django__django-12325", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex a375f6ba1d..e54a286c67 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -242,13 +242,16 @@ class Options:\n             if self.parents:\n                 # Promote the first parent link in lieu of adding yet another\n                 # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n+                # Look for a local field with the same name as any of the\n+                # parent links. If a local field has already been created, use\n+                # it instead of promoting the parent.\n+                already_created = [\n+                    fld for fld in self.local_fields if fld.name in self.parents\n+                ]\n                 if already_created:\n                     field = already_created[0]\n+                else:\n+                    field = next(iter(self.parents.values()))\n                 field.primary_key = True\n                 self.setup_pk(field)\n                 if not field.remote_field.parent_link:\n"}, "success": true, "processing_time": 160.66611671447754, "attempts": 1, "error": null}
{"instance_id": "django__django-12406", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex dafc11f995..e154a18bff 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1182,10 +1182,10 @@ class ModelChoiceField(ChoiceField):\n     iterator = ModelChoiceIterator\n \n     def __init__(self, queryset, *, empty_label=\"---------\",\n-                 required=True, widget=None, label=None, initial=None,\n-                 help_text='', to_field_name=None, limit_choices_to=None,\n-                 **kwargs):\n-        if required and (initial is not None):\n+                required=True, widget=None, label=None, initial=None,\n+                help_text='', to_field_name=None, limit_choices_to=None,\n+                **kwargs):\n+        if required and (initial is not None or widget is not None and hasattr(widget, 'choices')):\n             self.empty_label = None\n         else:\n             self.empty_label = empty_label\n"}, "success": true, "processing_time": 202.41638135910034, "attempts": 1, "error": null}
{"instance_id": "django__django-12663", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex caa03665ea..2731cf88b8 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -804,6 +804,8 @@ class Field(RegisterLookupMixin):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n+        elif isinstance(value, SimpleLazyObject):\n+            value = value._setupfunc()\n         return value\n \n     def get_db_prep_value(self, value, connection, prepared=False):\n"}, "success": true, "processing_time": 406.5895609855652, "attempts": 1, "error": null}
{"instance_id": "django__django-12713", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 69a5fbf389..651ab008ab 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -247,18 +247,20 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         # a field in admin.\n         if not db_field.remote_field.through._meta.auto_created:\n             return None\n-        db = kwargs.get('using')\n \n-        autocomplete_fields = self.get_autocomplete_fields(request)\n-        if db_field.name in autocomplete_fields:\n-            kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in self.raw_id_fields:\n-            kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n-        elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n-            kwargs['widget'] = widgets.FilteredSelectMultiple(\n-                db_field.verbose_name,\n-                db_field.name in self.filter_vertical\n-            )\n+        if 'widget' not in kwargs:\n+            db = kwargs.get('using')\n+\n+            autocomplete_fields = self.get_autocomplete_fields(request)\n+            if db_field.name in autocomplete_fields:\n+                kwargs['widget'] = AutocompleteSelectMultiple(db_field.remote_field, self.admin_site, using=db)\n+            elif db_field.name in self.raw_id_fields:\n+                kwargs['widget'] = widgets.ManyToManyRawIdWidget(db_field.remote_field, self.admin_site, using=db)\n+            elif db_field.name in [*self.filter_vertical, *self.filter_horizontal]:\n+                kwargs['widget'] = widgets.FilteredSelectMultiple(\n+                    db_field.verbose_name,\n+                    db_field.name in self.filter_vertical\n+                )\n \n         if 'queryset' not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n"}, "success": true, "processing_time": 87.10610818862915, "attempts": 1, "error": null}
{"instance_id": "django__django-12741", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of simplifying the signature of `DatabaseOperations.execute_sql_flush()`, we need to understand the current implementation and how it can be modified to drop the `using` argument.\n\nThe current signature of `execute_sql_flush` is:\n```python\ndef execute_sql_flush(self, using, sql_list):\n```\nThe goal is to change it to:\n```python\ndef execute_sql_flush(self, sql_list):\n```\nThis change involves removing the `using` parameter from the method signature and inferring it from `self.connection.alias` within the method.\n\nHere's the step-by-step reasoning:\n\n1. **Identify the location of the method**: The method `execute_sql_flush` is located in `django/db/backends/base/operations.py` within the `BaseDatabaseOperations` class.\n\n2. **Understand the purpose of the `using` argument**: The `using` argument is used to specify the database alias for the transaction. However, it can be inferred from `self.connection.alias`, which suggests that the connection to the database is already established and the alias can be directly accessed.\n\n3. **Modify the method signature**: To simplify the signature, we need to remove the `using` argument from the method definition.\n\n4. **Update the method body to use `self.connection.alias`**: Within the method, we need to replace `using` with `self.connection.alias` in the `transaction.atomic` context manager to ensure that the transaction is atomic with respect to the correct database connection.\n\nNow, let's apply these changes:\n\n```\n<file>django/db/backends/base/operations.py</file>\n<original>\n    def execute_sql_flush(self, using, sql_list):\n        \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n        with transaction.atomic(using=using, savepoint=self.connection.features.can_rollback_ddl):\n            with self.connection.cursor() as cursor:\n                for sql in sql_list:\n                    cursor.execute(sql)\n</original>\n<patched>\n    def execute_sql_flush(self, sql_list):\n        \"\"\"Execute a list of SQL statements to flush the database.\"\"\"\n        with transaction.atomic(using=self.connection.alias, savepoint=self.connection.features.can_rollback_ddl):\n            with self.connection.cursor() as cursor:\n                for sql in sql_list:\n                    cursor.execute(sql)\n</patched>\n```"}, "success": true, "processing_time": 390.3089027404785, "attempts": 1, "error": null}
{"instance_id": "django__django-12754", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 30616c0172..6537433c2d 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -563,6 +563,11 @@ class MigrationAutodetector:\n                 if isinstance(base, str) and \".\" in base:\n                     base_app_label, base_name = base.split(\".\", 1)\n                     dependencies.append((base_app_label, base_name, None, True))\n+                    # Add dependency for fields with the same name\n+                    base_model_state = self.to_state.models[base_app_label, base_name]\n+                    for field_name in base_model_state.fields:\n+                        if field_name in model_state.fields:\n+                            dependencies.append((base_app_label, base_name, field_name, False))\n             # Depend on the other end of the primary key if it's a relation\n             if primary_key_rel:\n                 dependencies.append((\n"}, "success": true, "processing_time": 238.6928837299347, "attempts": 1, "error": null}
{"instance_id": "django__django-12774", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex d9c9b0db04..7da7b5fee9 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -690,6 +690,12 @@ class QuerySet:\n         assert not self.query.is_sliced, \\\n             \"Cannot use 'limit' or 'offset' with in_bulk\"\n         if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:\n+            # Check for UniqueConstraint\n+            field = self.model._meta.get_field(field_name)\n+            constraints = self.model._meta.constraints\n+            unique_constraints = [c for c in constraints if isinstance(c, models.UniqueConstraint) and field_name in c.fields]\n+            if not unique_constraints:\n+                raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n             raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n         if id_list is not None:\n             if not id_list:\n"}, "success": true, "processing_time": 133.38877272605896, "attempts": 1, "error": null}
{"instance_id": "django__django-12858", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 6c9e9d3707..4054caf6df 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1747,15 +1747,21 @@ class Model(metaclass=ModelBase):\n                     else:\n                         _cls = None\n                 except (FieldDoesNotExist, AttributeError):\n-                    if fld is None or fld.get_transform(part) is None:\n-                        errors.append(\n-                            checks.Error(\n-                                \"'ordering' refers to the nonexistent field, \"\n-                                \"related field, or lookup '%s'.\" % field,\n-                                obj=cls,\n-                                id='models.E015',\n-                            )\n-                        )\n+                   if fld is None:\n+                       # Check if part is a transform or a related field with a lookup\n+                       try:\n+                           fld = _cls._meta.get_field(part)\n+                       except FieldDoesNotExist:\n+                           pass\n+                   if fld is None or fld.get_transform(part) is None:\n+                       errors.append(\n+                           checks.Error(\n+                               \"'ordering' refers to the nonexistent field, \"\n+                               \"related field, or lookup '%s'.\" % field,\n+                               obj=cls,\n+                               id='models.E015',\n+                           )\n+                       )\n \n         # Skip ordering on pk. This is always a valid order_by field\n         # but is an alias and therefore won't be found by opts.get_field.\n"}, "success": true, "processing_time": 207.58842158317566, "attempts": 1, "error": null}
{"instance_id": "django__django-12965", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/mysql/compiler.py b/django/db/backends/mysql/compiler.py\nindex 3682d6da05..034a85f3e8 100644\n--- a/django/db/backends/mysql/compiler.py\n+++ b/django/db/backends/mysql/compiler.py\n@@ -15,7 +15,7 @@ class SQLInsertCompiler(compiler.SQLInsertCompiler, SQLCompiler):\n \n class SQLDeleteCompiler(compiler.SQLDeleteCompiler, SQLCompiler):\n     def as_sql(self):\n-        if self.connection.features.update_can_self_select or self.single_alias:\n+        if self.connection.features.update_can_self_select or self.single_alias or not self.query.alias_refcount:\n             return super().as_sql()\n         # MySQL and MariaDB < 10.3.2 doesn't support deletion with a subquery\n         # which is what the default implementation of SQLDeleteCompiler uses\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 29e33c075f..919e789765 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1409,6 +1409,11 @@ class SQLDeleteCompiler(SQLCompiler):\n     def single_alias(self):\n         return sum(self.query.alias_refcount[t] > 0 for t in self.query.alias_map) == 1\n \n+    def as_sql(self):\n+        if self.connection.features.update_can_self_select or self.single_alias or not self.query.alias_refcount:\n+            return self._as_sql(self.query)\n+        # Rest of the method remains the same\n+\n     def _as_sql(self, query):\n         result = [\n             'DELETE FROM %s' % self.quote_name_unless_alias(query.base_table)\n"}, "success": true, "processing_time": 239.87178421020508, "attempts": 1, "error": null}
{"instance_id": "django__django-13012", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex c1a76584f0..5c5bbb6269 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -349,7 +349,7 @@ class BaseExpression:\n \n     def get_group_by_cols(self, alias=None):\n         if not self.contains_aggregate:\n-            return [self]\n+            return self.expression.get_group_by_cols(alias)\n         cols = []\n         for source in self.get_source_expressions():\n             cols.extend(source.get_group_by_cols())\n"}, "success": true, "processing_time": 234.50226664543152, "attempts": 1, "error": null}
{"instance_id": "django__django-13023", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0fd69059ee..3f2753b9da 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1497,6 +1497,12 @@ class DecimalField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        if isinstance(value, dict):\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         if isinstance(value, float):\n             return self.context.create_decimal_from_float(value)\n         try:\n"}, "success": true, "processing_time": 107.33838629722595, "attempts": 1, "error": null}
{"instance_id": "django__django-13028", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..7b6c9e72c2 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,11 +1124,12 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n+        if hasattr(expression, 'filterable') and not expression.filterable:\n+            if not isinstance(expression, Field):\n+                raise NotSupportedError(\n+                    expression.__class__.__name__ + ' is disallowed in the filter '\n+                    'clause.'\n+                )\n         if hasattr(expression, 'get_source_expressions'):\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n"}, "success": true, "processing_time": 277.6946680545807, "attempts": 1, "error": null}
{"instance_id": "django__django-13033", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex abbb1e37cb..4cde000fa3 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -727,7 +727,7 @@ class SQLCompiler:\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n+        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk' and not name.endswith('_id'):\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n"}, "success": true, "processing_time": 360.05566334724426, "attempts": 1, "error": null}
{"instance_id": "django__django-13089", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\nindex 33c79c5a14..e9ade9b4e2 100644\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -267,9 +267,11 @@ class DatabaseCache(BaseDatabaseCache):\n                 cursor.execute(\n                     connection.ops.cache_key_culling_sql() % table,\n                     [cull_num])\n-                cursor.execute(\"DELETE FROM %s \"\n-                               \"WHERE cache_key < %%s\" % table,\n-                               [cursor.fetchone()[0]])\n+                cull_key = cursor.fetchone()\n+                if cull_key:\n+                    cursor.execute(\"DELETE FROM %s \"\n+                                   \"WHERE cache_key < %%s\" % table,\n+                                   [cull_key[0]])\n \n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\n"}, "success": true, "processing_time": 111.63730692863464, "attempts": 1, "error": null}
{"instance_id": "django__django-13109", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex d517d7269b..a856169cfe 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -914,8 +914,8 @@ class ForeignKey(ForeignObject):\n             return\n \n         using = router.db_for_read(self.remote_field.model, instance=model_instance)\n-        qs = self.remote_field.model._default_manager.using(using).filter(\n-            **{self.remote_field.field_name: value}\n+        qs = self.remote_field.model._base_manager.using(using).filter(\n+        **{self.remote_field.field_name: value}\n         )\n         qs = qs.complex_filter(self.get_limit_choices_to())\n         if not qs.exists():\n"}, "success": true, "processing_time": 121.12659215927124, "attempts": 1, "error": null}
{"instance_id": "django__django-13112", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 89e2dceeaf..bbcbe11e4d 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1081,13 +1081,13 @@ class MigrationAutodetector:\n             dep_app_label = \"__setting__\"\n             dep_object_name = swappable_setting\n         else:\n-            dep_app_label = field.remote_field.model._meta.app_label\n-            dep_object_name = field.remote_field.model._meta.object_name\n+            dep_app_label = field.remote_field.model._meta.app_label.lower()\n+            dep_object_name = field.remote_field.model._meta.object_name.lower()\n         dependencies = [(dep_app_label, dep_object_name, None, True)]\n         if getattr(field.remote_field, \"through\", None) and not field.remote_field.through._meta.auto_created:\n             dependencies.append((\n-                field.remote_field.through._meta.app_label,\n-                field.remote_field.through._meta.object_name,\n+                field.remote_field.through._meta.app_label.lower(),\n+                field.remote_field.through._meta.object_name.lower(),\n                 None,\n                 True,\n             ))\n"}, "success": true, "processing_time": 177.36028599739075, "attempts": 1, "error": null}
{"instance_id": "django__django-13121", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex a156c5e881..9ab1c91831 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -5,7 +5,8 @@ from decimal import Decimal\n \n from django.core.exceptions import EmptyResultSet, FieldError\n from django.db import NotSupportedError, connection\n-from django.db.models import fields\n+from django.db.models import fields, DurationValue\n+import datetime\n from django.db.models.constants import LOOKUP_SEP\n from django.db.models.query_utils import Q\n from django.utils.deconstruct import deconstructible\n"}, "success": true, "processing_time": 154.1992964744568, "attempts": 1, "error": null}
{"instance_id": "django__django-13128", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d913658291..f7b33637ce 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -425,6 +425,11 @@ class Expression(BaseExpression, Combinable):\n class CombinedExpression(SQLiteNumericMixin, Expression):\n \n     def __init__(self, lhs, connector, rhs, output_field=None):\n+        if output_field is None and connector == self.SUB:\n+            lhs_type = getattr(lhs, 'output_field', None)\n+            rhs_type = getattr(rhs, 'output_field', None)\n+            if lhs_type and rhs_type and lhs_type.get_internal_type() in {'DateField', 'DateTimeField', 'TimeField'} and rhs_type.get_internal_type() in {'DateField', 'DateTimeField', 'TimeField'}:\n+                output_field = fields.DurationField()\n         super().__init__(output_field=output_field)\n         self.connector = connector\n         self.lhs = lhs\n"}, "success": true, "processing_time": 237.9112730026245, "attempts": 1, "error": null}
{"instance_id": "django__django-13158", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..979d19c7c8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1298,6 +1298,7 @@ class QuerySet:\n         c._known_related_objects = self._known_related_objects\n         c._iterable_class = self._iterable_class\n         c._fields = self._fields\n+        c.query.combined_queries = self.query.combined_queries\n         return c\n \n     def _fetch_all(self):\n"}, "success": true, "processing_time": 198.37762761116028, "attempts": 1, "error": null}
{"instance_id": "django__django-13195", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex e00bcacefb..b9ad30c5ea 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -210,13 +210,13 @@ class HttpResponseBase:\n         value = signing.get_cookie_signer(salt=key + salt).sign(value)\n         return self.set_cookie(key, value, **kwargs)\n \n-    def delete_cookie(self, key, path='/', domain=None):\n+    def delete_cookie(self, key, path='/', domain=None, samesite=None):\n         # Most browsers ignore the Set-Cookie header if the cookie name starts\n         # with __Host- or __Secure- and the cookie doesn't use the secure flag.\n         secure = key.startswith(('__Secure-', '__Host-'))\n         self.set_cookie(\n             key, max_age=0, path=path, domain=domain, secure=secure,\n-            expires='Thu, 01 Jan 1970 00:00:00 GMT',\n+            expires='Thu, 01 Jan 1970 00:00:00 GMT', samesite=samesite,\n         )\n \n     # Common methods used by subclasses\n"}, "success": true, "processing_time": 100.74635124206543, "attempts": 1, "error": null}
{"instance_id": "django__django-13212", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 84b4f31ec7..f4c3f2de4c 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -47,8 +47,9 @@ class RegexValidator:\n         \"\"\"\n         regex_matches = self.regex.search(str(value))\n         invalid_input = regex_matches if self.inverse_match else not regex_matches\n+        params = {'value': value}\n         if invalid_input:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params=params)\n \n     def __eq__(self, other):\n         return (\n@@ -207,13 +208,14 @@ class EmailValidator:\n             self.domain_allowlist = allowlist\n \n     def __call__(self, value):\n+        params = {'value': value}\n         if not value or '@' not in value:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params=params)\n \n         user_part, domain_part = value.rsplit('@', 1)\n \n         if not self.user_regex.match(user_part):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params=params)\n \n         if (domain_part not in self.domain_allowlist and\n                 not self.validate_domain_part(domain_part)):\n@@ -225,7 +227,7 @@ class EmailValidator:\n             else:\n                 if self.validate_domain_part(domain_part):\n                     return\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params=params)\n \n     def validate_domain_part(self, domain_part):\n         if self.domain_regex.match(domain_part):\n"}, "success": true, "processing_time": 100.27979254722595, "attempts": 1, "error": null}
{"instance_id": "django__django-13279", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex b5453160a5..355afcb40b 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -106,8 +106,16 @@ class SessionBase:\n         key_salt = \"django.contrib.sessions\" + self.__class__.__name__\n         return salted_hmac(key_salt, value).hexdigest()\n \n+    def _legacy_encode(self, session_dict):\n+        # Hash is required in the legacy format.\n+        key_salt = \"django.contrib.sessions\" + self.__class__.__name__\n+        hash = salted_hmac(key_salt, self.serializer().dumps(session_dict)).hexdigest()\n+        # Include the hash and serialization method in the legacy format.\n+        return base64.b64encode(f\"{hash}:{self.serializer().dumps(session_dict)}\".encode()).decode()\n+\n     def encode(self, session_dict):\n-        \"Return the given session dictionary serialized and encoded as a string.\"\n+        if get_default_hashing_algorithm() == 'sha1':\n+            return self._legacy_encode(session_dict)\n         return signing.dumps(\n             session_dict, salt=self.key_salt, serializer=self.serializer,\n             compress=True,\n"}, "success": true, "processing_time": 384.9599041938782, "attempts": 1, "error": null}
{"instance_id": "django__django-13297", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/views/generic/base.py b/django/views/generic/base.py\nindex ea5baca08d..cdde6b7f29 100644\n--- a/django/views/generic/base.py\n+++ b/django/views/generic/base.py\n@@ -159,7 +159,12 @@ class TemplateView(TemplateResponseMixin, ContextMixin, View):\n     def get(self, request, *args, **kwargs):\n         # RemovedInDjango40Warning: when the deprecation ends, replace with:\n         #   context = self.get_context_data()\n-        context_kwargs = _wrap_url_kwargs_with_deprecation_warning(kwargs)\n+        context_kwargs = {}\n+        for key, value in kwargs.items():\n+            if isinstance(value, SimpleLazyObject):\n+                context_kwargs[key] = str(value)\n+            else:\n+                context_kwargs[key] = value\n         context = self.get_context_data(**context_kwargs)\n         return self.render_to_response(context)\n \n@@ -177,8 +182,9 @@ def _wrap_url_kwargs_with_deprecation_warning(url_kwargs):\n                 'view.kwargs instead.' % key,\n                 RemovedInDjango40Warning, stacklevel=2,\n             )\n-            return value\n-        context_kwargs[key] = access_value\n+            # Evaluate the value to avoid passing SimpleLazyObject\n+            return str(value) if isinstance(value, SimpleLazyObject) else value\n+        context_kwargs[key] = access_value()\n     return context_kwargs\n \n \n"}, "success": true, "processing_time": 412.3761200904846, "attempts": 1, "error": null}
{"instance_id": "django__django-13315", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5d115458a1..471469fb2e 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -100,7 +100,7 @@ def apply_limit_choices_to_to_formfield(formfield):\n     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):\n         limit_choices_to = formfield.get_limit_choices_to()\n         if limit_choices_to is not None:\n-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)\n+            formfield.queryset = formfield.queryset.filter(limit_choices_to)\n \n \n def fields_for_model(model, fields=None, exclude=None, widgets=None,\n@@ -1251,13 +1251,18 @@ class ModelChoiceField(ChoiceField):\n             return self._choices\n \n         # Otherwise, execute the QuerySet in self.queryset to determine the\n-        # choices dynamically. Return a fresh ModelChoiceIterator that has not been\n+        # choices dynamically. Apply limit_choices_to if needed.\n+        queryset = self.queryset\n+        if self.limit_choices_to is not None:\n+            queryset = queryset.complex_filter(self.limit_choices_to)\n+\n+        # Return a fresh ModelChoiceIterator that has not been\n         # consumed. Note that we're instantiating a new ModelChoiceIterator *each*\n         # time _get_choices() is called (and, thus, each time self.choices is\n         # accessed) so that we can ensure the QuerySet has not been consumed. This\n         # construct might look complicated but it allows for lazy evaluation of\n         # the queryset.\n-        return self.iterator(self)\n+        return self.iterator(queryset)\n \n     choices = property(_get_choices, ChoiceField._set_choices)\n \n"}, "success": true, "processing_time": 159.52414679527283, "attempts": 1, "error": null}
{"instance_id": "django__django-13343", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex e10a5bb6d9..ec915f58ca 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -228,13 +228,6 @@ class FileField(Field):\n         self._primary_key_set_explicitly = 'primary_key' in kwargs\n \n         self.storage = storage or default_storage\n-        if callable(self.storage):\n-            self.storage = self.storage()\n-            if not isinstance(self.storage, Storage):\n-                raise TypeError(\n-                    \"%s.storage must be a subclass/instance of %s.%s\"\n-                    % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)\n-                )\n         self.upload_to = upload_to\n \n         kwargs.setdefault('max_length', 100)\n@@ -279,7 +272,10 @@ class FileField(Field):\n             del kwargs[\"max_length\"]\n         kwargs['upload_to'] = self.upload_to\n         if self.storage is not default_storage:\n-            kwargs['storage'] = self.storage\n+            if callable(self.storage):\n+                kwargs['storage'] = self.storage\n+            else:\n+                kwargs['storage'] = self.storage\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\n"}, "success": true, "processing_time": 115.23722195625305, "attempts": 1, "error": null}
{"instance_id": "django__django-13344", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/handlers/asgi.py b/django/core/handlers/asgi.py\nindex 7fbabe4510..c12cb7de0c 100644\n--- a/django/core/handlers/asgi.py\n+++ b/django/core/handlers/asgi.py\n@@ -159,6 +159,8 @@ class ASGIHandler(base.BaseHandler):\n             return\n         # Get the response, using the async mode of BaseHandler.\n         response = await self.get_response_async(request)\n+        if asyncio.iscoroutine(response):\n+            response = await response\n         response._handler_class = self.__class__\n         # Increase chunk size on file responses (ASGI servers handles low-level\n         # chunking).\ndiff --git a/django/utils/deprecation.py b/django/utils/deprecation.py\nindex b2c681b33c..1629568c4b 100644\n--- a/django/utils/deprecation.py\n+++ b/django/utils/deprecation.py\n@@ -116,7 +116,10 @@ class MiddlewareMixin:\n             response = self.process_request(request)\n         response = response or self.get_response(request)\n         if hasattr(self, 'process_response'):\n-            response = self.process_response(request, response)\n+            if asyncio.iscoroutinefunction(self.process_response):\n+                response = await self.process_response(request, response)\n+            else:\n+                response = self.process_response(request, response)\n         return response\n \n     async def __acall__(self, request):\n@@ -132,10 +135,13 @@ class MiddlewareMixin:\n             )(request)\n         response = response or await self.get_response(request)\n         if hasattr(self, 'process_response'):\n-            response = await sync_to_async(\n-                self.process_response,\n-                thread_sensitive=True,\n-            )(request, response)\n+            if asyncio.iscoroutinefunction(self.process_response):\n+                response = await self.process_response(request, response)\n+            else:\n+                response = await sync_to_async(\n+                    self.process_response,\n+                    thread_sensitive=True,\n+                )(request, response)\n         return response\n \n     def _get_response_none_deprecation(self, get_response):\n"}, "success": true, "processing_time": 209.7721619606018, "attempts": 1, "error": null}
{"instance_id": "django__django-13346", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fafc1beee8..6b6233583e 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -426,6 +426,17 @@ class KeyTransformExact(JSONExact):\n class KeyTransformIExact(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IExact):\n     pass\n \n+class KeyTransformIn(lookups.In):\n+    def process_rhs(self, compiler, connection):\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if connection.vendor == 'sqlite':\n+            # SQLite requires JSON_EXTRACT for IN operator\n+            func = [\"JSON_EXTRACT(%s, %%s)\" if value != 'null' else '%s' for value in rhs_params]\n+            rhs = rhs % tuple(func)\n+        return rhs, rhs_params\n+\n+KeyTransform.register_lookup(KeyTransformIn)\n+\n \n class KeyTransformIContains(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IContains):\n     pass\n"}, "success": true, "processing_time": 578.2011885643005, "attempts": 1, "error": null}
{"instance_id": "django__django-13363", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/functions/datetime.py b/django/db/models/functions/datetime.py\nindex b6594b043b..5547380ff4 100644\n--- a/django/db/models/functions/datetime.py\n+++ b/django/db/models/functions/datetime.py\n@@ -292,7 +292,7 @@ class TruncDate(TruncBase):\n     def as_sql(self, compiler, connection):\n         # Cast to date rather than truncate to date.\n         lhs, lhs_params = compiler.compile(self.lhs)\n-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n+        tzname = self.tzinfo if settings.USE_TZ else None\n         sql = connection.ops.datetime_cast_date_sql(lhs, tzname)\n         return sql, lhs_params\n \n@@ -305,7 +305,7 @@ class TruncTime(TruncBase):\n     def as_sql(self, compiler, connection):\n         # Cast to time rather than truncate to time.\n         lhs, lhs_params = compiler.compile(self.lhs)\n-        tzname = timezone.get_current_timezone_name() if settings.USE_TZ else None\n+        tzname = self.tzinfo if settings.USE_TZ else None\n         sql = connection.ops.datetime_cast_time_sql(lhs, tzname)\n         return sql, lhs_params\n \n"}, "success": true, "processing_time": 132.3817446231842, "attempts": 1, "error": null}
{"instance_id": "django__django-13401", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 28374272f4..9d27f9b950 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -514,19 +514,17 @@ class Field(RegisterLookupMixin):\n         return self.__class__(*args, **kwargs)\n \n     def __eq__(self, other):\n-        # Needed for @total_ordering\n         if isinstance(other, Field):\n-            return self.creation_counter == other.creation_counter\n+            return (self.model, self.creation_counter) == (other.model, other.creation_counter)\n         return NotImplemented\n \n     def __lt__(self, other):\n-        # This is needed because bisect does not take a comparison function.\n         if isinstance(other, Field):\n-            return self.creation_counter < other.creation_counter\n+            return (self.model, self.creation_counter) < (other.model, other.creation_counter)\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash(self.creation_counter)\n+        return hash((self.model, self.creation_counter))\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n"}, "success": true, "processing_time": 115.37255501747131, "attempts": 1, "error": null}
{"instance_id": "django__django-13410", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/files/locks.py b/django/core/files/locks.py\nindex c46b00b905..4938347ea7 100644\n--- a/django/core/files/locks.py\n+++ b/django/core/files/locks.py\n@@ -107,9 +107,15 @@ else:\n             return True\n     else:\n         def lock(f, flags):\n-            ret = fcntl.flock(_fd(f), flags)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), flags)\n+                return True\n+            except OSError:\n+                return False\n \n         def unlock(f):\n-            ret = fcntl.flock(_fd(f), fcntl.LOCK_UN)\n-            return ret == 0\n+            try:\n+                fcntl.flock(_fd(f), fcntl.LOCK_UN)\n+                return True\n+            except OSError:\n+                return False\n"}, "success": true, "processing_time": 136.20342755317688, "attempts": 1, "error": null}
{"instance_id": "django__django-13417", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 85cd8311a7..8ecd0081a5 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1224,7 +1224,7 @@ class QuerySet:\n             return True\n         if self.query.extra_order_by or self.query.order_by:\n             return True\n-        elif self.query.default_ordering and self.query.get_meta().ordering:\n+        elif self.query.default_ordering and self.query.get_meta().ordering and not self.query.group_by:\n             return True\n         else:\n             return False\n"}, "success": true, "processing_time": 581.2628500461578, "attempts": 1, "error": null}
{"instance_id": "django__django-13512", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a249f4cdbf..66c039c6e4 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -81,7 +81,7 @@ class JSONField(CheckFieldDefaultMixin, Field):\n     def get_prep_value(self, value):\n         if value is None:\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def get_transform(self, name):\n         transform = super().get_transform(name)\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 9de2c60b35..8235aaac01 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1258,7 +1258,7 @@ class JSONField(CharField):\n     def prepare_value(self, value):\n         if isinstance(value, InvalidJSONInput):\n             return value\n-        return json.dumps(value, cls=self.encoder)\n+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)\n \n     def has_changed(self, initial, data):\n         if super().has_changed(initial, data):\n"}, "success": true, "processing_time": 148.9976782798767, "attempts": 1, "error": null}
{"instance_id": "django__django-13513", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7a89f7bd15..68c69a7430 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -396,10 +396,10 @@ class ExceptionReporter:\n \n     def get_traceback_frames(self):\n         def explicit_or_implicit_cause(exc_value):\n-            explicit = getattr(exc_value, '__cause__', None)\n-            suppress_context = getattr(exc_value, '__suppress_context__', None)\n-            implicit = getattr(exc_value, '__context__', None)\n-            return explicit or (None if suppress_context else implicit)\n+            return (\n+                exc_value.__cause__ \n+                or (None if exc_value.__suppress_context__ else exc_value.__context__)\n+            )\n \n         # Get the exception and all its causes\n         exceptions = []\n"}, "success": true, "processing_time": 193.4975287914276, "attempts": 1, "error": null}
{"instance_id": "django__django-13516", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of `flush()` not working on `self.stdout/stderr` management commands, we need to understand the root cause of the problem. The issue arises because the `OutputWrapper` class, which wraps around `stdout/stderr`, does not have a `flush` method. This method is essential for ensuring that output is displayed immediately, rather than being buffered.\n\nThe `OutputWrapper` class is defined in `django/core/management/base.py`. Upon examining this class, it's clear that it delegates many of its methods to the underlying output stream (`self._out`). However, it lacks a `flush` method, which is necessary for flushing the output buffer.\n\nTo fix this issue, we need to add a `flush` method to the `OutputWrapper` class. This method should simply call the `flush` method on the underlying output stream (`self._out`).\n\nHere's the necessary patch:\n\n```\n<file>django/core/management/base.py</file>\n<original>\n140     def __getattr__(self, name):\n141         return getattr(self._out, name)\n142 \n143     def isatty(self):\n144         return hasattr(self._out, 'isatty') and self._out.isatty()\n145 \n146     def write(self, msg='', style_func=None, ending=None):\n147         ending = self.ending if ending is None else ending\n148         if ending and not msg.endswith(ending):\n149             msg += ending\n150         style_func = style_func or self.style_func\n151         self._out.write(style_func(msg))\n</original>\n<patched>\n140     def __getattr__(self, name):\n141         return getattr(self._out, name)\n142 \n143     def isatty(self):\n144         return hasattr(self._out, 'isatty') and self._out.isatty()\n145 \n146     def flush(self):\n147         self._out.flush()\n148 \n149     def write(self, msg='', style_func=None, ending=None):\n150         ending = self.ending if ending is None else ending\n151         if ending and not msg.endswith(ending):\n152             msg += ending\n153         style_func = style_func or self.style_func\n154         self._out.write(style_func(msg))\n</patched>\n```\n\nThis patch adds the `flush` method to the `OutputWrapper` class, ensuring that output is displayed immediately when `flush()` is called on `self.stdout` or `self.stderr` in management commands."}, "success": true, "processing_time": 245.5036702156067, "attempts": 1, "error": null}
{"instance_id": "django__django-13551", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\nindex 93e2d71af2..ee5003608f 100644\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -85,16 +85,18 @@ class PasswordResetTokenGenerator:\n            same password is chosen, due to password salting).\n         2. The last_login field will usually be updated very shortly after\n            a password reset.\n+        3. The email field will change when the user updates their email address.\n         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually\n         invalidates the token.\n-\n+    \n         Running this data through salted_hmac() prevents password cracking\n         attempts using the reset token, provided the secret isn't compromised.\n         \"\"\"\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        email = getattr(user, 'email', '')\n+        return str(user.pk) + user.password + str(login_timestamp) + email + str(timestamp)\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n"}, "success": true, "processing_time": 254.9646122455597, "attempts": 1, "error": null}
{"instance_id": "django__django-13568", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of skipping the auth.E003 system check for `USERNAME_FIELD` with total UniqueConstraints, we need to modify the `check_user_model` function in `django/contrib/auth/checks.py`. The goal is to check if there are any unique constraints defined on the `USERNAME_FIELD` in addition to checking for the `unique` parameter on the field. If a unique constraint is found, the function should not raise an auth.E003 error.\n\nThe current implementation only checks if the field named as `USERNAME_FIELD` is unique. However, it does not consider the case where a unique constraint is defined on the field through the model's Meta.constraints.\n\nHere's the step-by-step reasoning:\n\n1. **Identify the relevant code block**: The `check_user_model` function in `django/contrib/auth/checks.py` is responsible for checking the user model. Specifically, we are interested in the part where it checks for the uniqueness of the `USERNAME_FIELD`.\n\n2. **Understand the current behavior**: Currently, it checks if the field is unique by calling `cls._meta.get_field(cls.USERNAME_FIELD).unique`. If the field is not unique, it raises an auth.E003 error.\n\n3. **Determine the necessary change**: We need to modify this check to also consider unique constraints defined in the model's Meta.constraints.\n\n4. **Propose the solution**: We will introduce a new function, `has_unique_constraint`, which checks if a field is covered by a unique constraint. We will then use this function in addition to the existing uniqueness check.\n\nHere is the patch:\n\n```\n<file>django/contrib/auth/checks.py</file>\n<original>\nfrom django.db.models import MethodType\n</original>\n<patched>\nfrom django.db.models import MethodType, Field\nfrom django.db.models.constraints import UniqueConstraint\n\ndef has_unique_constraint(model_meta, field_name):\n    constraints = model_meta.constraints\n    field = model_meta.get_field(field_name)\n    for constraint in constraints:\n        if isinstance(constraint, UniqueConstraint) and field_name in constraint.fields:\n            return True\n    return False\n</patched>\n```\n\n```\n<file>django/contrib/auth/checks.py</file>\n<original\n     if not cls._meta.get_field(cls.USERNAME_FIELD).unique:\n        if (settings.AUTHENTICATION_BACKENDS ==\n                ['django.contrib.auth.backends.ModelBackend']):\n            errors.append(\n                checks.Error(\n                    \"'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'.\" % (\n                        cls._meta.object_name, cls.USERNAME_FIELD\n                    ),\n                    obj=cls,\n                    id='auth.E003',\n                )\n            )\n        else:\n            errors.append(\n                checks.Warning(\n                    \"'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique.\" % (\n                        cls._meta.object_name, cls.USERNAME_FIELD\n                    ),\n                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n                    obj=cls,\n                    id='auth.W004',\n                )\n            )\n</original>\n<patched>\n    if not cls._meta.get_field(cls.USERNAME_FIELD).unique and not has_unique_constraint(cls._meta, cls.USERNAME_FIELD):\n        if (settings.AUTHENTICATION_BACKENDS ==\n                ['django.contrib.auth.backends.ModelBackend']):\n            errors.append(\n                checks.Error(\n                    \"'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'.\" % (\n                        cls._meta.object_name, cls.USERNAME_FIELD\n                    ),\n                    obj=cls,\n                    id='auth.E003',\n                )\n            )\n        else:\n            errors.append(\n                checks.Warning(\n                    \"'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique.\" % (\n                        cls._meta.object_name, cls.USERNAME_FIELD\n                    ),\n                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n                    obj=cls,\n                    id='auth.W004',\n                )\n            )\n</patched>\n```"}, "success": true, "processing_time": 483.7813103199005, "attempts": 1, "error": null}
{"instance_id": "django__django-13590", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..6b929b7846 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1077,10 +1077,16 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n-                self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n-                for sub_value in value\n-            )\n+            if hasattr(value, '_fields'):  # Check for namedtuple\n+                return type(value)(*(\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                ))\n+            else:\n+                return type(value)(\n+                    self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n+                    for sub_value in value\n+                )\n         return value\n \n     def solve_lookup_type(self, lookup):\n"}, "success": true, "processing_time": 124.68501615524292, "attempts": 1, "error": null}
{"instance_id": "django__django-13658", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 1ba093e51f..e411e86348 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -344,7 +344,7 @@ class ManagementUtility:\n         # Preprocess options to extract --settings and --pythonpath.\n         # These options could affect the commands that are available, so they\n         # must be processed early.\n-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n+        parser = CommandParser(prog=self.prog_name, usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n         parser.add_argument('--settings')\n         parser.add_argument('--pythonpath')\n         parser.add_argument('args', nargs='*')  # catch-all\n"}, "success": true, "processing_time": 88.37363886833191, "attempts": 1, "error": null}
{"instance_id": "django__django-13670", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex afd36d79e0..526414363b 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -326,7 +326,7 @@ class DateFormat(TimeFormat):\n \n     def y(self):\n         \"Year, 2 digits; e.g. '99'\"\n-        return str(self.data.year)[2:]\n+        return '%02d' % (self.data.year % 100)\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n"}, "success": true, "processing_time": 317.15015959739685, "attempts": 1, "error": null}
{"instance_id": "django__django-13741", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b9eb33329f..9a6614a809 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -56,6 +56,7 @@ class ReadOnlyPasswordHashField(forms.Field):\n \n     def __init__(self, *args, **kwargs):\n         kwargs.setdefault(\"required\", False)\n+        kwargs.setdefault(\"disabled\", True)\n         super().__init__(*args, **kwargs)\n \n     def bound_data(self, data, initial):\n"}, "success": true, "processing_time": 120.31605911254883, "attempts": 1, "error": null}
{"instance_id": "django__django-13786", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex dddf7c679c..c11a3251d7 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -137,11 +137,17 @@ class CreateModel(ModelOperation):\n                 ),\n             ]\n         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n+            options = self.options.copy()\n+            for key, value in operation.options.items():\n+                if value is None:\n+                    options.pop(key, None)\n+                else:\n+                    options[key] = value\n             return [\n                 CreateModel(\n                     self.name,\n                     fields=self.fields,\n-                    options={**self.options, **operation.options},\n+                    options=options,\n                     bases=self.bases,\n                     managers=self.managers,\n                 ),\n"}, "success": true, "processing_time": 98.25151228904724, "attempts": 1, "error": null}
{"instance_id": "django__django-13794", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 1c844580c6..4993578f42 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -675,12 +675,13 @@ def unordered_list(value, autoescape=True):\n def add(value, arg):\n     \"\"\"Add the arg to the value.\"\"\"\n     try:\n-        return int(value) + int(arg)\n-    except (ValueError, TypeError):\n-        try:\n-            return value + arg\n-        except Exception:\n-            return ''\n+        if hasattr(value, 'resolve'):\n+            value = value.resolve()\n+        if hasattr(arg, 'resolve'):\n+            arg = arg.resolve()\n+        return value + arg\n+    except Exception:\n+        return ''\n \n \n @register.filter(is_safe=False)\n"}, "success": true, "processing_time": 413.1004557609558, "attempts": 1, "error": null}
{"instance_id": "django__django-13807", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 2eeaf98c0d..faef4a0f8a 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -327,18 +327,18 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n                     violations = cursor.execute('PRAGMA foreign_key_check').fetchall()\n                 else:\n                     violations = chain.from_iterable(\n-                        cursor.execute('PRAGMA foreign_key_check(%s)' % table_name).fetchall()\n+                        cursor.execute('PRAGMA foreign_key_check(\"%s\")' % table_name).fetchall()\n                         for table_name in table_names\n                     )\n                 # See https://www.sqlite.org/pragma.html#pragma_foreign_key_check\n                 for table_name, rowid, referenced_table_name, foreign_key_index in violations:\n                     foreign_key = cursor.execute(\n-                        'PRAGMA foreign_key_list(%s)' % table_name\n+                        'PRAGMA foreign_key_list(\"%s\")' % table_name\n                     ).fetchall()[foreign_key_index]\n                     column_name, referenced_column_name = foreign_key[3:5]\n                     primary_key_column_name = self.introspection.get_primary_key_column(cursor, table_name)\n                     primary_key_value, bad_value = cursor.execute(\n-                        'SELECT %s, %s FROM %s WHERE rowid = %%s' % (\n+                        'SELECT %s, %s FROM \"%s\" WHERE rowid = %%s' % (\n                             primary_key_column_name, column_name, table_name\n                         ),\n                         (rowid,),\n"}, "success": true, "processing_time": 136.5391185283661, "attempts": 1, "error": null}
{"instance_id": "django__django-13809", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/management/commands/changepassword.py b/django/contrib/auth/management/commands/changepassword.py\nindex b0c0a7f59a..1fa26ebed5 100644\n--- a/django/contrib/auth/management/commands/changepassword.py\n+++ b/django/contrib/auth/management/commands/changepassword.py\n@@ -30,6 +30,10 @@ class Command(BaseCommand):\n             default=DEFAULT_DB_ALIAS,\n             help='Specifies the database to use. Default is \"default\".',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true', default=False,\n+            help='Skip system checks.',\n+        )\n \n     def handle(self, *args, **options):\n         if options['username']:\n"}, "success": true, "processing_time": 97.22224617004395, "attempts": 1, "error": null}
{"instance_id": "django__django-13810", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 8e8c3da06a..f8c75327ba 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -62,6 +62,7 @@ class BaseHandler:\n                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)\n                     else:\n                         logger.debug('MiddlewareNotUsed: %r', middleware_path)\n+                handler_is_async = getattr(middleware, 'async_capable', False)\n                 continue\n \n             if mw_instance is None:\n"}, "success": true, "processing_time": 141.75615167617798, "attempts": 1, "error": null}
{"instance_id": "django__django-13820", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 95a5062ec9..119b026208 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -90,7 +90,7 @@ class MigrationLoader:\n             else:\n                 # Empty directories are namespaces.\n                 # getattr() needed on PY36 and older (replace w/attribute access).\n-                if getattr(module, '__file__', None) is None:\n+                if getattr(module, '__file__', None) is None and not isinstance(module.__path__, list):\n                     self.unmigrated_apps.add(app_config.label)\n                     continue\n                 # Module is not a package (e.g. migrations.py).\n"}, "success": true, "processing_time": 86.46869277954102, "attempts": 1, "error": null}
{"instance_id": "django__django-13933", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..ffc3fcc318 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1188,8 +1188,8 @@ class ModelChoiceField(ChoiceField):\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n-                            ' the available choices.'),\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of the'\n+                            ' available choices.'),\n     }\n     iterator = ModelChoiceIterator\n \n@@ -1284,7 +1284,11 @@ class ModelChoiceField(ChoiceField):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'],\n+                code='invalid_choice',\n+                params={'value': value}\n+            )\n         return value\n \n     def validate(self, value):\n"}, "success": true, "processing_time": 144.89064049720764, "attempts": 1, "error": null}
{"instance_id": "django__django-13964", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 872a4c98dc..8c501e3b90 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -74,9 +74,18 @@ from django.utils.functional import cached_property\n \n class ForeignKeyDeferredAttribute(DeferredAttribute):\n     def __set__(self, instance, value):\n-        if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n-            self.field.delete_cached_value(instance)\n-        instance.__dict__[self.field.attname] = value\n+        if value is None:\n+            if instance.__dict__.get(self.field.attname) is not None and self.field.is_cached(instance):\n+                self.field.delete_cached_value(instance)\n+            instance.__dict__[self.field.attname] = None\n+        elif isinstance(value, Model) and value.pk is not None:\n+            if instance.__dict__.get(self.field.attname) != value.pk and self.field.is_cached(instance):\n+                self.field.delete_cached_value(instance)\n+            instance.__dict__[self.field.attname] = value.pk\n+        else:\n+            if instance.__dict__.get(self.field.attname) != value and self.field.is_cached(instance):\n+                self.field.delete_cached_value(instance)\n+            instance.__dict__[self.field.attname] = value\n \n \n class ForwardManyToOneDescriptor:\n"}, "success": true, "processing_time": 455.9882209300995, "attempts": 1, "error": null}
{"instance_id": "django__django-14007", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex f02199d97c..e8a580cd08 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1415,7 +1415,14 @@ class SQLInsertCompiler(SQLCompiler):\n                 return self.connection.ops.fetch_returned_insert_rows(cursor)\n             if self.connection.features.can_return_columns_from_insert:\n                 assert len(self.query.objs) == 1\n-                return [self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)]\n+                returned_columns = self.connection.ops.fetch_returned_insert_columns(cursor, self.returning_params)\n+                fields = self.returning_fields\n+                converted = []\n+                for field, value in zip(fields, returned_columns):\n+                    if hasattr(field, 'from_db_value'):\n+                        value = field.from_db_value(value, expression=None, connection=self.connection)\n+                    converted.append(value)\n+                return [converted]\n             return [(self.connection.ops.last_insert_id(\n                 cursor, self.query.get_meta().db_table, self.query.get_meta().pk.column\n             ),)]\n"}, "success": true, "processing_time": 139.83510971069336, "attempts": 1, "error": null}
{"instance_id": "django__django-14011", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 14dab517c9..6758440afd 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -79,7 +79,7 @@ class WSGIServer(simple_server.WSGIServer):\n \n class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):\n     \"\"\"A threaded version of the WSGIServer\"\"\"\n-    daemon_threads = True\n+    daemon_threads = False\n \n \n class ServerHandler(simple_server.ServerHandler):\n"}, "success": true, "processing_time": 284.7005937099457, "attempts": 1, "error": null}
{"instance_id": "django__django-14017", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa564..d4fb17a49c 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,7 +40,29 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        if isinstance(other, Q):\n+            # If the other Q() is empty, ignore it and just use `self`.\n+            if not other:\n+                _, args, kwargs = self.deconstruct()\n+                return type(self)(*args, **kwargs)\n+            # Or if this Q is empty, ignore it and just use `other`.\n+            elif not self:\n+                _, args, kwargs = other.deconstruct()\n+                return type(other)(*args, **kwargs)\n+\n+            obj = type(self)()\n+            obj.connector = conn\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n+        elif hasattr(other, 'conditional') and other.conditional:\n+            # Handle combining with other conditional objects like Exists\n+            obj = type(self)()\n+            obj.connector = conn\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n+        else:\n             raise TypeError(other)\n \n         # If the other Q() is empty, ignore it and just use `self`.\n@@ -64,6 +86,12 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n \n+    def __rand__(self, other):\n+        return self._combine(other, self.AND)\n+\n+    def __ror__(self, other):\n+        return self._combine(other, self.OR)\n+\n     def __invert__(self):\n         obj = type(self)()\n         obj.add(self, self.AND)\n"}, "success": true, "processing_time": 157.51085376739502, "attempts": 1, "error": null}
{"instance_id": "django__django-14034", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 65d6a9ec82..0bb4e8de6e 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1035,11 +1035,10 @@ class MultiValueField(Field):\n             except IndexError:\n                 field_value = None\n             if field_value in self.empty_values:\n-                if self.require_all_fields:\n+                if self.require_all_fields and self.required:\n                     # Raise a 'required' error if the MultiValueField is\n                     # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n+                    raise ValidationError(self.error_messages['required'], code='required')\n                 elif field.required:\n                     # Otherwise, add an 'incomplete' error to the list of\n                     # collected errors and skip field cleaning, if a required\n"}, "success": true, "processing_time": 105.98794102668762, "attempts": 1, "error": null}
{"instance_id": "django__django-14053", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of `HashedFilesMixin's` `post_process()` yielding multiple times for the same file, we need to understand the root cause of this behavior. The method is designed to perform multiple passes over the files to ensure that nested references between them are correctly handled. However, it currently yields the same file multiple times if it requires multiple passes, which can lead to incorrect statistics and duplicated work.\n\nThe key insight here is that we want `post_process()` to yield each file only once, after it has been fully processed. This means we need to keep track of which files have already been yielded and avoid yielding them again.\n\nHere's the step-by-step reasoning:\n\n1. **Identify the Yield Statement**: The `yield` statement in question is inside the `for` loop that iterates over the results of `self._post_process(paths, adjustable_paths, hashed_files)`. This loop can potentially yield the same file multiple times if the file requires multiple processing passes.\n\n2. **Track Processed Files**: To ensure that each file is only yielded once, we need to keep track of the files that have already been processed and yielded.\n\n3. **Modify the Loop**: We should modify the loop so that it checks if a file has already been yielded before yielding it again.\n\nGiven this reasoning, the solution involves modifying the `post_process` method in `HashedFilesMixin` to keep track of processed files.\n\n```\n<file>django/contrib/staticfiles/storage.py</file>\n<original>\n221         # where to store the new paths\n222         hashed_files = {}\n223 \n224         # build a list of adjustable files\n225         adjustable_paths = [\n226             path for path in paths\n227             if matches_patterns(path, self._patterns)\n228         ]\n229         # Do a single pass first. Post-process all files once, then repeat for\n230         # adjustable files.\n231         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n232             yield name, hashed_name, processed\n233 \n234         paths = {path: paths[path] for path in adjustable_paths}\n235 \n236         for i in range(self.max_post_process_passes):\n237             substitutions = False\n238             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n239                 yield name, hashed_name, processed\n240                 substitutions = substitutions or subst\n</original>\n<patched>\n221         # where to store the new paths\n222         hashed_files = {}\n223         processed_files = set()\n224 \n225         # build a list of adjustable files\n226         adjustable_paths = [\n227             path for path in paths\n228             if matches_patterns(path, self._patterns)\n229         ]\n230         # Do a single pass first. Post-process all files once, then repeat for\n231         # adjustable files.\n232         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n233             if name not in processed_files:\n234                 yield name, hashed_name, processed\n235                 processed_files.add(name)\n236 \n237         paths = {path: paths[path] for path in adjustable_paths}\n238 \n239         for i in range(self.max_post_process_passes):\n240             substitutions = False\n241             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n242                 if name not in processed_files:\n243                     yield name, hashed_name, processed\n244                     processed_files.add(name)\n245                 substitutions = substitutions or subst\n</patched>\n```"}, "success": true, "processing_time": 510.25088572502136, "attempts": 1, "error": null}
{"instance_id": "django__django-14089", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/datastructures.py b/django/utils/datastructures.py\nindex 871b016715..99f9ff2a72 100644\n--- a/django/utils/datastructures.py\n+++ b/django/utils/datastructures.py\n@@ -25,6 +25,9 @@ class OrderedSet:\n     def __iter__(self):\n         return iter(self.dict)\n \n+    def __reversed__(self):\n+        return reversed(self.dict)\n+\n     def __contains__(self, item):\n         return item in self.dict\n \n"}, "success": true, "processing_time": 87.53730058670044, "attempts": 1, "error": null}
{"instance_id": "django__django-14122", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 850734709d..a2697b6658 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -129,7 +129,11 @@ class SQLCompiler:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n             if not is_ref:\n-                expressions.extend(expr.get_group_by_cols())\n+                # Check if the expression is a field reference\n+                if isinstance(expr, F):\n+                    is_ref = expr.refs\n+                if not is_ref:\n+                    expressions.extend(expr.get_group_by_cols())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n@@ -285,7 +289,7 @@ class SQLCompiler:\n             ordering = self.query.order_by\n         elif self.query.get_meta().ordering:\n             ordering = self.query.get_meta().ordering\n-            self._meta_ordering = ordering\n+            self._meta_ordering = [f.attname for f in self.query.get_meta().get_fields()]\n         else:\n             ordering = []\n         if self.query.standard_ordering:\n"}, "success": true, "processing_time": 281.59155225753784, "attempts": 1, "error": null}
{"instance_id": "django__django-14140", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ae0f886107..4fc5bb0fe3 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -87,7 +87,10 @@ class Q(tree.Node):\n         args, kwargs = (), {}\n         if len(self.children) == 1 and not isinstance(self.children[0], Q):\n             child = self.children[0]\n-            kwargs = {child[0]: child[1]}\n+            if hasattr(child, '__iter__') and not isinstance(child, str):\n+                kwargs = {child[0]: child[1]}\n+            else:\n+                args = (child,)\n         else:\n             args = tuple(self.children)\n             if self.connector != self.default:\n"}, "success": true, "processing_time": 135.62148261070251, "attempts": 1, "error": null}
{"instance_id": "django__django-14155", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 9b00e24509..bb41babefe 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -6,6 +6,7 @@ a string) and returns a ResolverMatch object which provides access to all\n attributes of the resolved URL match.\n \"\"\"\n import functools\n+from django.utils.functional import cached_property\n import inspect\n import re\n import string\n"}, "success": true, "processing_time": 127.87272381782532, "attempts": 1, "error": null}
{"instance_id": "django__django-14170", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of query optimization in `YearLookup` breaking filtering by `__iso_year`, we need to modify the `YearLookup` class to handle the `__iso_year` lookup differently. The current optimization uses `BETWEEN` instead of the `EXTRACT` operation, which is not suitable for `__iso_year` lookups.\n\nThe problem arises because the `as_sql` method in `YearLookup` checks if the right-hand side (`rhs`) is a direct value and, if so, uses the `BETWEEN` optimization. However, this optimization should not be applied for `__iso_year` lookups, as they require the `EXTRACT` operation to work correctly.\n\nHere's the step-by-step reasoning:\n\n1. **Identify the Problematic Code**: The issue lies in the `as_sql` method of the `YearLookup` class, specifically in how it handles the `rhs_is_direct_value` condition. This condition leads to the use of `BETWEEN` instead of `EXTRACT` for year lookups.\n\n2. **Understand the Requirement**: For `__iso_year` lookups, the `EXTRACT` operation must be used, not the `BETWEEN` optimization. This means we need a way to differentiate between `__iso_year` and other year lookups.\n\n3. **Propose a Solution**: We can solve this by checking if the lookup name is `__iso_year` and, if so, skipping the `BETWEEN` optimization and using the `EXTRACT` operation instead. This involves modifying the `as_sql` method to consider the lookup name.\n\nGiven the above reasoning, here is the patch:\n\n```\n<file>django/db/models/lookups.py</file>\n<original>\n552         if self.rhs_is_direct_value():\n553             # Skip the extract part by directly using the originating field,\n554             # that is self.lhs.lhs.\n555             lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n556             rhs_sql, _ = self.process_rhs(compiler, connection)\n557             rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n558             start, finish = self.year_lookup_bounds(connection, self.rhs)\n559             params.extend(self.get_bound_params(start, finish))\n560             return '%s %s' % (lhs_sql, rhs_sql), params\n</original>\n<patched>\n552         if self.rhs_is_direct_value() and self.lookup_name != 'iso_year':\n553             # Skip the extract part by directly using the originating field,\n554             # that is self.lhs.lhs.\n555             lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n556             rhs_sql, _ = self.process_rhs(compiler, connection)\n557             rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n558             start, finish = self.year_lookup_bounds(connection, self.rhs)\n559             params.extend(self.get_bound_params(start, finish))\n560             return '%s %s' % (lhs_sql, rhs_sql), params\n</patched>\n```\n\nThis modification ensures that for `__iso_year` lookups, the `BETWEEN` optimization is not used, preserving the correct functionality of filtering by `__iso_year`."}, "success": true, "processing_time": 480.3735873699188, "attempts": 1, "error": null}
{"instance_id": "django__django-14311", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 4e30a28f33..f689fd518a 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -188,7 +188,9 @@ class ManagementUtility:\n     def __init__(self, argv=None):\n         self.argv = argv or sys.argv[:]\n         self.prog_name = os.path.basename(self.argv[0])\n-        if self.prog_name == '__main__.py':\n+        if self.prog_name == '__main__.py' or self.argv[0].endswith('__main__.py'):\n+            self.prog_name = ' '.join(self.argv[:2]).replace('-m ', '-m')\n+        elif self.argv[0].startswith('python -m'):\n             self.prog_name = 'python -m django'\n         self.settings_exception = None\n \n"}, "success": true, "processing_time": 351.72184324264526, "attempts": 1, "error": null}
{"instance_id": "django__django-14315", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 3effab65a8..9dc3625844 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -10,7 +10,7 @@ class DatabaseClient(BaseDatabaseClient):\n     def settings_to_cmd_args_env(cls, settings_dict, parameters):\n         args = [cls.executable_name]\n         options = settings_dict.get('OPTIONS', {})\n-\n+ \n         host = settings_dict.get('HOST')\n         port = settings_dict.get('PORT')\n         dbname = settings_dict.get('NAME')\n@@ -22,7 +22,7 @@ class DatabaseClient(BaseDatabaseClient):\n         sslrootcert = options.get('sslrootcert')\n         sslcert = options.get('sslcert')\n         sslkey = options.get('sslkey')\n-\n+ \n         if not dbname and not service:\n             # Connect to the default 'postgres' db.\n             dbname = 'postgres'\n@@ -35,8 +35,8 @@ class DatabaseClient(BaseDatabaseClient):\n         if dbname:\n             args += [dbname]\n         args.extend(parameters)\n-\n-        env = {}\n+ \n+        env = os.environ.copy()\n         if passwd:\n             env['PGPASSWORD'] = str(passwd)\n         if service:\n"}, "success": true, "processing_time": 171.45433568954468, "attempts": 1, "error": null}
{"instance_id": "django__django-14349", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex a385819510..5c5bbec531 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -101,6 +101,8 @@ class URLValidator(RegexValidator):\n     def __call__(self, value):\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if any(c in value for c in '\\r\\n\\t'):\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n"}, "success": true, "processing_time": 160.3674578666687, "attempts": 1, "error": null}
{"instance_id": "django__django-14351", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 5089737034..fcead7f70c 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -383,7 +383,7 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n                 \"Subqueries aren't allowed across different databases. Force \"\n                 \"the inner query to be evaluated using `list(inner_query)`.\"\n             )\n-\n+ \n         if self.rhs_is_direct_value():\n             # Remove None from the list as NULL is never equal to anything.\n             try:\n@@ -391,17 +391,17 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):\n                 rhs.discard(None)\n             except TypeError:  # Unhashable items in self.rhs\n                 rhs = [r for r in self.rhs if r is not None]\n-\n+ \n             if not rhs:\n                 raise EmptyResultSet\n-\n+ \n             # rhs should be an iterable; use batch_process_rhs() to\n             # prepare/transform those values.\n             sqls, sqls_params = self.batch_process_rhs(compiler, connection, rhs)\n             placeholder = '(' + ', '.join(sqls) + ')'\n             return (placeholder, sqls_params)\n         else:\n-            if not getattr(self.rhs, 'has_select_fields', True):\n+            if hasattr(self.rhs, 'has_select_fields') and self.rhs.has_select_fields:\n                 self.rhs.clear_select_clause()\n                 self.rhs.add_fields(['pk'])\n             return super().process_rhs(compiler, connection)\n"}, "success": true, "processing_time": 234.62999081611633, "attempts": 1, "error": null}
{"instance_id": "django__django-14373", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py\nindex 38e89c47bb..8849df51a8 100644\n--- a/django/utils/dateformat.py\n+++ b/django/utils/dateformat.py\n@@ -314,7 +314,7 @@ class DateFormat(TimeFormat):\n \n     def Y(self):\n         \"Year, 4 digits; e.g. '1999'\"\n-        return self.data.year\n+        return str(self.data.year).zfill(4)\n \n     def z(self):\n         \"\"\"Day of the year, i.e. 1 to 366.\"\"\"\n"}, "success": true, "processing_time": 71.14037156105042, "attempts": 1, "error": null}
{"instance_id": "django__django-14376", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/mysql/base.py b/django/db/backends/mysql/base.py\nindex 2c62182d31..8b28a60485 100644\n--- a/django/db/backends/mysql/base.py\n+++ b/django/db/backends/mysql/base.py\n@@ -200,9 +200,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if settings_dict['USER']:\n             kwargs['user'] = settings_dict['USER']\n         if settings_dict['NAME']:\n-            kwargs['db'] = settings_dict['NAME']\n+            kwargs['database'] = settings_dict['NAME']\n         if settings_dict['PASSWORD']:\n-            kwargs['passwd'] = settings_dict['PASSWORD']\n+            kwargs['password'] = settings_dict['PASSWORD']\n         if settings_dict['HOST'].startswith('/'):\n             kwargs['unix_socket'] = settings_dict['HOST']\n         elif settings_dict['HOST']:\n"}, "success": true, "processing_time": 90.40936374664307, "attempts": 1, "error": null}
{"instance_id": "django__django-14404", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 59a4a0364d..74ef4c491e 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -420,7 +420,7 @@ class AdminSite:\n     def catch_all_view(self, request, url):\n         if settings.APPEND_SLASH and not url.endswith('/'):\n             urlconf = getattr(request, 'urlconf', None)\n-            path = '%s/' % request.path_info\n+            path = '%s/' % request.path\n             try:\n                 match = resolve(path, urlconf)\n             except Resolver404:\n"}, "success": true, "processing_time": 79.8310911655426, "attempts": 1, "error": null}
{"instance_id": "django__django-14434", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex ad2f5a7da1..794fac3ba3 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -1255,14 +1255,14 @@ class BaseDatabaseSchemaEditor:\n         else:\n             columns = Expressions(model._meta.db_table, expressions, compiler, self.quote_value)\n         return Statement(\n-            sql,\n-            table=table,\n-            name=name,\n-            columns=columns,\n-            condition=self._index_condition_sql(condition),\n-            deferrable=self._deferrable_constraint_sql(deferrable),\n-            include=self._index_include_sql(model, include),\n-        )\n+                    sql,\n+                    table=model._meta.db_table,\n+                    name=name,\n+                    columns=columns,\n+                    condition=self._index_condition_sql(condition),\n+                    deferrable=self._deferrable_constraint_sql(deferrable),\n+                    include=self._index_include_sql(model, include),\n+                )\n \n     def _delete_unique_sql(\n         self, model, name, condition=None, deferrable=None, include=None,\n"}, "success": true, "processing_time": 341.2717397212982, "attempts": 1, "error": null}
{"instance_id": "django__django-14493", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex f957a667b2..8f98493166 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -261,8 +261,8 @@ class HashedFilesMixin:\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n+        substitutions = False\n         for i in range(self.max_post_process_passes):\n-            substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n                 # Overwrite since hashed_name may be newer.\n                 processed_adjustable_paths[name] = (name, hashed_name, processed)\n"}, "success": true, "processing_time": 110.18775844573975, "attempts": 1, "error": null}
{"instance_id": "django__django-14500", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 57042a8690..b1203aa749 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -254,8 +254,7 @@ class MigrationExecutor:\n         if migration.replaces:\n             for app_label, name in migration.replaces:\n                 self.recorder.record_unapplied(app_label, name)\n-        else:\n-            self.recorder.record_unapplied(migration.app_label, migration.name)\n+        # Do not record the squashed migration as unapplied\n         # Report progress\n         if self.progress_callback:\n             self.progress_callback(\"unapply_success\", migration, fake)\n"}, "success": true, "processing_time": 134.57955121994019, "attempts": 1, "error": null}
{"instance_id": "django__django-14534", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 2ff8b0ee26..59987ee101 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -277,7 +277,7 @@ class BoundWidget:\n \n     @property\n     def id_for_label(self):\n-        return 'id_%s_%s' % (self.data['name'], self.data['index'])\n+        return self.data['attrs'].get('id', 'id_%s_%s' % (self.data['name'], self.data['index']))\n \n     @property\n     def choice_label(self):\n"}, "success": true, "processing_time": 91.66088080406189, "attempts": 1, "error": null}
{"instance_id": "django__django-14539", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex 3bc02b8dd3..ade10c0ff0 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -333,9 +333,11 @@ def urlize(text, trim_url_limit=None, nofollow=False, autoescape=False):\n             if url:\n                 trimmed = trim_url(middle)\n                 if autoescape and not safe_input:\n-                    lead, trail = escape(lead), escape(trail)\n+                    lead = escape(lead)\n+                    trail = escape(trail)\n                     trimmed = escape(trimmed)\n-                middle = '<a href=\"%s\"%s>%s</a>' % (escape(url), nofollow_attr, trimmed)\n+                    url = escape(url)\n+                middle = '<a href=\"%s\"%s>%s</a>' % (url, nofollow_attr, trimmed)\n                 words[i] = mark_safe('%s%s%s' % (lead, middle, trail))\n             else:\n                 if safe_input:\n"}, "success": true, "processing_time": 268.0042359828949, "attempts": 1, "error": null}
{"instance_id": "django__django-14559", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 387deca527..3616e68673 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -527,6 +527,8 @@ class QuerySet:\n     def bulk_update(self, objs, fields, batch_size=None):\n         \"\"\"\n         Update the given fields in each of the given objects in the database.\n+\n+        Returns the number of rows matched.\n         \"\"\"\n         if batch_size is not None and batch_size < 0:\n             raise ValueError('Batch size must be a positive integer.')\n@@ -563,9 +565,11 @@ class QuerySet:\n                     case_statement = Cast(case_statement, output_field=field)\n                 update_kwargs[field.attname] = case_statement\n             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\n+        row_count = 0\n         with transaction.atomic(using=self.db, savepoint=False):\n             for pks, update_kwargs in updates:\n-                self.filter(pk__in=pks).update(**update_kwargs)\n+                row_count += self.filter(pk__in=pks).update(**update_kwargs)\n+        return row_count\n     bulk_update.alters_data = True\n \n     def get_or_create(self, defaults=None, **kwargs):\n"}, "success": true, "processing_time": 168.24305534362793, "attempts": 1, "error": null}
{"instance_id": "django__django-14580", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 4918261fb0..27c0d9d30d 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -44,7 +44,7 @@ class OperationWriter:\n                         imports.update(arg_imports)\n                     self.unindent()\n                     self.feed('},')\n-                else:\n+                elif isinstance(_arg_value, (list, tuple)):\n                     self.feed('%s=[' % _arg_name)\n                     self.indent()\n                     for item in _arg_value:\n@@ -59,18 +59,17 @@ class OperationWriter:\n                         imports.update(arg_imports)\n                     self.unindent()\n                     self.feed('],')\n-            else:\n-                arg_string, arg_imports = MigrationWriter.serialize(_arg_value)\n-                args = arg_string.splitlines()\n-                if len(args) > 1:\n-                    self.feed('%s=%s' % (_arg_name, args[0]))\n-                    for arg in args[1:-1]:\n-                        self.feed(arg)\n-                    self.feed('%s,' % args[-1])\n                 else:\n-                    self.feed('%s=%s,' % (_arg_name, arg_string))\n-                imports.update(arg_imports)\n-\n+                    arg_string, arg_imports = MigrationWriter.serialize(_arg_value)\n+                    args = arg_string.splitlines()\n+                    if len(args) > 1:\n+                        self.feed('%s=%s' % (_arg_name, args[0]))\n+                        for arg in args[1:-1]:\n+                            self.feed(arg)\n+                        self.feed('%s,' % args[-1])\n+                    else:\n+                        self.feed('%s=%s,' % (_arg_name, arg_string))\n+                    imports.update(arg_imports)\n         imports = set()\n         name, args, kwargs = self.operation.deconstruct()\n         operation_args = get_func_args(self.operation.__init__)\n"}, "success": true, "processing_time": 225.2887237071991, "attempts": 1, "error": null}
{"instance_id": "django__django-14608", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..1b0d4554e0 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -333,7 +333,7 @@ class BaseFormSet:\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\n@@ -380,7 +380,7 @@ class BaseFormSet:\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\n-            self._non_form_errors = self.error_class(e.error_list)\n+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')\n \n     def clean(self):\n         \"\"\"\n"}, "success": true, "processing_time": 85.97668385505676, "attempts": 1, "error": null}
{"instance_id": "django__django-14631", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py\nindex 88adadb37d..6f1fa5e24a 100644\n--- a/django/forms/boundfield.py\n+++ b/django/forms/boundfield.py\n@@ -130,6 +130,14 @@ class BoundField:\n             data = self.field.bound_data(self.data, data)\n         return self.field.prepare_value(data)\n \n+    def _did_change(self):\n+        if self.field.show_hidden_initial:\n+            initial_value = self.form.get_initial_for_field(self.field, self.name)\n+        else:\n+            initial_value = self.initial\n+        data_value = self.value()\n+        return self.field.has_changed(initial_value, data_value)\n+\n     def label_tag(self, contents=None, attrs=None, label_suffix=None):\n         \"\"\"\n         Wrap the given contents in a <label>, if the field has an ID attribute.\ndiff --git a/django/forms/forms.py b/django/forms/forms.py\nindex d14037bfe9..b04257a4cd 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -387,17 +387,16 @@ class BaseForm:\n         self._post_clean()\n \n     def _clean_fields(self):\n-        for name, field in self.fields.items():\n-            if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n-            else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+        for name, bf in self.items():\n             try:\n-                if isinstance(field, FileField):\n-                    initial = self.get_initial_for_field(field, name)\n-                    value = field.clean(value, initial)\n+                if bf.field.disabled:\n+                    value = bf.initial\n+                else:\n+                    value = bf.value()\n+                if isinstance(bf.field, FileField):\n+                    value = bf.field.clean(value, bf.initial)\n                 else:\n-                    value = field.clean(value)\n+                    value = bf.field.clean(value)\n                 self.cleaned_data[name] = value\n                 if hasattr(self, 'clean_%s' % name):\n                     value = getattr(self, 'clean_%s' % name)()\n@@ -436,27 +435,7 @@ class BaseForm:\n \n     @cached_property\n     def changed_data(self):\n-        data = []\n-        for name, field in self.fields.items():\n-            data_value = self._field_data_value(field, self.add_prefix(name))\n-            if not field.show_hidden_initial:\n-                # Use the BoundField's initial as this is the value passed to\n-                # the widget.\n-                initial_value = self[name].initial\n-            else:\n-                initial_prefixed_name = self.add_initial_prefix(name)\n-                hidden_widget = field.hidden_widget()\n-                try:\n-                    initial_value = field.to_python(\n-                        self._widget_data_value(hidden_widget, initial_prefixed_name)\n-                    )\n-                except ValidationError:\n-                    # Always assume data has changed if validation fails.\n-                    data.append(name)\n-                    continue\n-            if field.has_changed(initial_value, data_value):\n-                data.append(name)\n-        return data\n+        return [name for name, bf in self._bound_items() if bf._did_change()]\n \n     @property\n     def media(self):\n"}, "success": true, "processing_time": 99.32812118530273, "attempts": 1, "error": null}
{"instance_id": "django__django-14672", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex ccc2223a5f..6f8954da56 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -308,9 +308,13 @@ class ManyToManyRel(ForeignObjectRel):\n \n     @property\n     def identity(self):\n+        if isinstance(self.through_fields, list):\n+            through_fields = tuple(self.through_fields)\n+        else:\n+            through_fields = self.through_fields\n         return super().identity + (\n             self.through,\n-            self.through_fields,\n+            make_hashable(through_fields),\n             self.db_constraint,\n         )\n \n"}, "success": true, "processing_time": 140.66055488586426, "attempts": 1, "error": null}
{"instance_id": "django__django-14725", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7effb202e3..7ea721e7b8 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -573,9 +573,10 @@ class BaseModelFormSet(BaseFormSet):\n     unique_fields = set()\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n+                 queryset=None, *, initial=None, edit_only=False, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.edit_only = edit_only\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n@@ -812,6 +813,8 @@ class BaseModelFormSet(BaseFormSet):\n         return saved_instances\n \n     def save_new_objects(self, commit=True):\n+        if self.edit_only:\n+            return []\n         self.new_objects = []\n         for form in self.extra_forms:\n             if not form.has_changed():\n"}, "success": true, "processing_time": 98.29932951927185, "attempts": 1, "error": null}
{"instance_id": "django__django-14752", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex 3903e4c98c..025583dcae 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -26,12 +26,15 @@ class AutocompleteJsonView(BaseListView):\n         context = self.get_context_data()\n         return JsonResponse({\n             'results': [\n-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+                self.serialize_result(obj, to_field_name)\n                 for obj in context['object_list']\n             ],\n             'pagination': {'more': context['page_obj'].has_next()},\n         })\n \n+    def serialize_result(self, obj, to_field_name):\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+\n     def get_paginator(self, *args, **kwargs):\n         \"\"\"Use the ModelAdmin's paginator.\"\"\"\n         return self.model_admin.get_paginator(self.request, *args, **kwargs)\n"}, "success": true, "processing_time": 168.15264892578125, "attempts": 1, "error": null}
{"instance_id": "django__django-14765", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 088f5c41f0..b62a0169dd 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -91,10 +91,11 @@ class ProjectState:\n     def __init__(self, models=None, real_apps=None):\n         self.models = models or {}\n         # Apps to include from main registry, usually unmigrated ones\n-        if real_apps:\n-            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n-        else:\n+        if real_apps is None:\n             self.real_apps = set()\n+        else:\n+            assert isinstance(real_apps, set)\n+            self.real_apps = real_apps\n         self.is_delayed = False\n         # {remote_model_key: {model_key: [(field_name, field)]}}\n         self.relations = None\n"}, "success": true, "processing_time": 96.59175419807434, "attempts": 1, "error": null}
{"instance_id": "django__django-14771", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex cc65c043ab..40296974b7 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -255,6 +255,8 @@ def trigger_reload(filename):\n \n def restart_with_reloader():\n     new_environ = {**os.environ, DJANGO_AUTORELOAD_ENV: 'true'}\n+    if hasattr(sys, '_xoptions'):\n+        new_environ.update(sys._xoptions)\n     args = get_child_arguments()\n     while True:\n         p = subprocess.run(args, env=new_environ, close_fds=False)\n"}, "success": true, "processing_time": 504.01067781448364, "attempts": 1, "error": null}
{"instance_id": "django__django-14787", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue where `method_decorator()` should preserve wrapper assignments, including attributes like `__name__`, `__module__`, etc., when applied to a method or function, including those that are partial objects, we need to analyze the provided code context and understand how decorators are applied and how they affect the wrapped functions.\n\nThe problem arises because the function passed to the decorator is a partial object and lacks the attributes expected from a function, such as `__name__`, `__module__`, etc. This issue is specifically noted when using `method_decorator` with a partial object, leading to an `AttributeError` because partial objects do not have a `__name__` attribute.\n\nGiven the context, the solution involves modifying the `method_decorator` function in `django/utils/decorators.py` to properly handle and preserve the attributes of the original function when applying decorators.\n\nHere is the necessary patch:\n\n```\n<file>django/utils/decorators.py</file>\n<original>\n61     def _dec(obj):\n62         if not isinstance(obj, type):\n63             return _multi_decorate(decorator, obj)\n64         if not (name and hasattr(obj, name)):\n65             raise ValueError(\n66                 \"The keyword argument `name` must be the name of a method \"\n67                 \"of the decorated class: %s. Got '%s' instead.\" % (obj, name)\n68             )\n69         method = getattr(obj, name)\n70         if not callable(method):\n71             raise TypeError(\n72                 \"Cannot decorate '%s' as it isn't a callable attribute of \"\n73                 \"%s (%s).\" % (name, obj, method)\n74             )\n75         _wrapper = _multi_decorate(decorator, method)\n76         setattr(obj, name, _wrapper)\n77         return obj\n</original>\n<patched>\n61     def _dec(obj):\n62         if not isinstance(obj, type):\n63             if hasattr(obj, '__name__'):\n                update_wrapper(_dec, obj)\n            return _multi_decorate(decorator, obj)\n        if not (name and hasattr(obj, name)):\n            raise ValueError(\n                \"The keyword argument `name` must be the name of a method \"\n                \"of the decorated class: %s. Got '%s' instead.\" % (obj, name)\n            )\n        method = getattr(obj, name)\n        if not callable(method):\n            raise TypeError(\n                \"Cannot decorate '%s' as it isn't a callable attribute of \"\n                \"%s (%s).\" % (name, obj, method)\n            )\n        _wrapper = _multi_decorate(decorator, method)\n        setattr(obj, name, _wrapper)\n        return obj\n</patched>\n```\n\nHowever, to properly address the issue of preserving wrapper assignments for partial objects, we should focus on ensuring that `update_wrapper` is called appropriately to preserve the metadata of the original function.\n\nAnother potential modification could involve directly updating the wrapper with the original function's metadata if it's available:\n\n```\n<file>django/utils/decorators.py</file>\n<original>\n81     if not hasattr(decorator, '__iter__'):\n82         update_wrapper(_dec, decorator)\n</original>\n<patched>\n81     if not hasattr(decorator, '__iter__'):\n82         if hasattr(decorator, '__name__'):\n            update_wrapper(_dec, decorator)\n        else:\n            update_wrapper(_dec, decorator.__class__)\n</patched>\n```\n\nBut the most accurate and relevant change, considering standard practices for preserving function metadata when using decorators, would involve ensuring that `update_wrapper` is used correctly within the `_multi_decorate` function or directly in `method_decorator` to handle partial objects and other types of callables properly.\n\nGiven the goal of preserving metadata and the specifics of how `method_decorator` and `_multi_decorate` work, we need to ensure that the original function's attributes are correctly transferred to the decorated function. \n\nThe most straightforward and relevant patch, focusing on the critical aspect of preserving metadata for the decorated method, would thus involve adjusting how `method_decorator` handles the updating of wrapper metadata:\n\n```\n<file>django/utils/decorators.py</file>\n<original>\ndef method_decorator(decorator, name=''):\n    \"\"\"\n    Convert a function decorator into a method decorator\n    \"\"\"\n    # 'obj' can be a class or a function. If 'obj' is a function at the time it\n    # is passed to _dec,  it will eventually be a method of the class it is\n    # defined on. If 'obj' is a class, the 'name' is required to be the name\n    # of the method that will be decorated.\n    def _dec(obj):\n        if not isinstance(obj, type):\n            return _multi_decorate(decorator, obj)\n        if not (name and hasattr(obj, name)):\n            raise ValueError(\n                \"The keyword argument `name` must"}, "success": true, "processing_time": 738.0687124729156, "attempts": 1, "error": null}
{"instance_id": "django__django-14792", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/timezone.py b/django/utils/timezone.py\nindex bb2b6b9594..c33fe64ead 100644\n--- a/django/utils/timezone.py\n+++ b/django/utils/timezone.py\n@@ -73,6 +73,10 @@ def get_current_timezone_name():\n \n def _get_timezone_name(timezone):\n     \"\"\"Return the name of ``timezone``.\"\"\"\n+    if hasattr(timezone, 'zone'):  # pytz timezone\n+        return timezone.zone\n+    if isinstance(timezone, str):  # zoneinfo.ZoneInfo or similar\n+        return timezone\n     return str(timezone)\n \n # Timezone selection functions.\n"}, "success": true, "processing_time": 121.0815498828888, "attempts": 1, "error": null}
{"instance_id": "django__django-14855", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dd154f72ee..35108cc359 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -209,7 +209,7 @@ class AdminReadonlyField:\n             remote_field.model._meta.model_name,\n         )\n         try:\n-            url = reverse(url_name, args=[quote(remote_obj.pk)])\n+            url = reverse(url_name, args=[quote(remote_obj.pk)], current_app=self.model_admin.admin_site.name)\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n"}, "success": true, "processing_time": 113.44097805023193, "attempts": 1, "error": null}
{"instance_id": "django__django-14999", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of `RenameModel` with `db_table` being a noop, we need to modify the `database_forwards` method in the `RenameModel` class. The goal is to check if the old and new table names are identical, considering the `db_table` attribute, and return without making any changes to the database if they are identical.\n\nThe `RenameModel` class is defined in `django/db/migrations/operations/models.py`. The `database_forwards` method is where the actual renaming of the model takes place. \n\nWe should add a check at the beginning of the `database_forwards` method to compare the old and new table names. If they are the same, we can simply return without executing any further operations.\n\nHere's the necessary patch:\n\n```\n<file>django/db/migrations/operations/models.py</file>\n<original>\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name.\n                old_m2m_model = old_field.remote_field.through\n                new_m2m_model = new_field.remote_field.through\n                schema_editor.alter_db_table(\n                    new_m2m_model,\n                    old_m2m_model._meta.db_table,\n                    new_m2m_model._meta.db_table,\n                )\n                # Rename the column in the M2M table that's based on this\n                # model's name.\n                schema_editor.alter_field(\n                    new_m2m_model,\n                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n                )\n</original>\n<patched>\n    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n        new_model = to_state.apps.get_model(app_label, self.new_name)\n        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n            old_model = from_state.apps.get_model(app_label, self.old_name)\n            if old_model._meta.db_table == new_model._meta.db_table:\n                return\n            # Move the main table\n            schema_editor.alter_db_table(\n                new_model,\n                old_model._meta.db_table,\n                new_model._meta.db_table,\n            )\n            # Alter the fields pointing to us\n            for related_object in old_model._meta.related_objects:\n                if related_object.related_model == old_model:\n                    model = new_model\n                    related_key = (app_label, self.new_name_lower)\n                else:\n                    model = related_object.related_model\n                    related_key = (\n                        related_object.related_model._meta.app_label,\n                        related_object.related_model._meta.model_name,\n                    )\n                to_field = to_state.apps.get_model(\n                    *related_key\n                )._meta.get_field(related_object.field.name)\n                schema_editor.alter_field(\n                    model,\n                    related_object.field,\n                    to_field,\n                )\n            # Rename M2M fields whose name is based on this model's name.\n            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n            for (old_field, new_field) in fields:\n                # Skip self-referential fields as these are renamed above.\n                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n                    continue\n                # Rename the M2M table that's based on this model's name"}, "success": true, "processing_time": 303.87726068496704, "attempts": 1, "error": null}
{"instance_id": "django__django-15022", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 66f3396a6b..da7d875b33 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1031,14 +1031,15 @@ class ModelAdmin(BaseModelAdmin):\n         if search_fields and search_term:\n             orm_lookups = [construct_search(str(search_field))\n                            for search_field in search_fields]\n+            or_queries = models.Q()\n             for bit in smart_split(search_term):\n                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                     bit = unescape_string_literal(bit)\n-                or_queries = models.Q(\n+                or_queries |= models.Q(\n                     *((orm_lookup, bit) for orm_lookup in orm_lookups),\n                     _connector=models.Q.OR,\n                 )\n-                queryset = queryset.filter(or_queries)\n+            queryset = queryset.filter(or_queries)\n             may_have_duplicates |= any(\n                 lookup_spawns_duplicates(self.opts, search_spec)\n                 for search_spec in orm_lookups\n"}, "success": true, "processing_time": 823.5815145969391, "attempts": 1, "error": null}
{"instance_id": "django__django-15037", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/mysql/introspection.py b/django/db/backends/mysql/introspection.py\nindex 2383c9ca1b..82fe9f96c1 100644\n--- a/django/db/backends/mysql/introspection.py\n+++ b/django/db/backends/mysql/introspection.py\n@@ -149,14 +149,21 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         return []\n \n     def get_relations(self, cursor, table_name):\n+        \"\"\"\n+        Return a dictionary of {field_name: (field_name_other_table, other_table)}\n+        representing all relationships to the given table.\n+        \"\"\"\n         \"\"\"\n         Return a dictionary of {field_name: (field_name_other_table, other_table)}\n         representing all relationships to the given table.\n         \"\"\"\n         constraints = self.get_key_columns(cursor, table_name)\n         relations = {}\n-        for my_fieldname, other_table, other_field in constraints:\n-            relations[my_fieldname] = (other_field, other_table)\n+        for my_fieldname, other_table, other_field, is_primary_key in constraints:\n+            if is_primary_key:\n+                relations[my_fieldname] = (other_field, other_table)\n+            else:\n+                relations[my_fieldname] = (other_field, other_table, {'to_field': other_field})\n         return relations\n \n     def get_key_columns(self, cursor, table_name):\n"}, "success": true, "processing_time": 243.41297698020935, "attempts": 1, "error": null}
{"instance_id": "django__django-15098", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/middleware/locale.py b/django/middleware/locale.py\nindex d90fc84152..922e4bc2d6 100644\n--- a/django/middleware/locale.py\n+++ b/django/middleware/locale.py\n@@ -1,3 +1,5 @@\n+import re\n+\n from django.conf import settings\n from django.conf.urls.i18n import is_language_prefix_patterns_used\n from django.http import HttpResponseRedirect\n@@ -5,6 +7,7 @@ from django.urls import get_script_prefix, is_valid_path\n from django.utils import translation\n from django.utils.cache import patch_vary_headers\n from django.utils.deprecation import MiddlewareMixin\n+from django.utils.text import normalize_language_code\n \n \n class LocaleMiddleware(MiddlewareMixin):\n"}, "success": true, "processing_time": 2868.4340958595276, "attempts": 1, "error": null}
{"instance_id": "django__django-15103", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex da1b5675ec..b451fe535b 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -61,7 +61,7 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id):\n+def json_script(value, element_id=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -69,10 +69,16 @@ def json_script(value, element_id):\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n     json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n-    return format_html(\n-        '<script id=\"{}\" type=\"application/json\">{}</script>',\n-        element_id, mark_safe(json_str)\n-    )\n+    if element_id is None:\n+        return format_html(\n+            '<script type=\"application/json\">{}</script>',\n+            mark_safe(json_str)\n+        )\n+    else:\n+        return format_html(\n+            '<script id=\"{}\" type=\"application/json\">{}</script>',\n+            element_id, mark_safe(json_str)\n+        )\n \n \n def conditional_escape(text):\n"}, "success": true, "processing_time": 111.96900296211243, "attempts": 1, "error": null}
{"instance_id": "django__django-15104", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 97977d72ef..bf9c2acd26 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -96,7 +96,7 @@ class MigrationAutodetector:\n         for name, field in sorted(fields.items()):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n-                del deconstruction[2]['to']\n+                deconstruction[2].pop('to', None)\n             fields_def.append(deconstruction)\n         return fields_def\n \n"}, "success": true, "processing_time": 131.21107983589172, "attempts": 1, "error": null}
{"instance_id": "django__django-15127", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/messages/apps.py b/django/contrib/messages/apps.py\nindex 0ff25d3885..a524081e80 100644\n--- a/django/contrib/messages/apps.py\n+++ b/django/contrib/messages/apps.py\n@@ -2,6 +2,14 @@ from django.apps import AppConfig\n from django.utils.translation import gettext_lazy as _\n \n \n+from django.core.signals import setting_changed\n+from django.contrib.messages import utils\n+\n class MessagesConfig(AppConfig):\n     name = 'django.contrib.messages'\n     verbose_name = _(\"Messages\")\n+\n+    def ready(self):\n+        def update_level_tags(**kwargs):\n+            utils.LEVEL_TAGS = utils.get_level_tags()\n+        setting_changed.connect(update_level_tags)\n"}, "success": true, "processing_time": 250.4149534702301, "attempts": 1, "error": null}
{"instance_id": "django__django-15128", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex aaf35ee37c..fdd99d9409 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -953,10 +953,10 @@ class Query(BaseExpression):\n         Return an alias for the 'join', either reusing an existing alias for\n         that join or creating a new one. 'join' is either a base_table_class or\n         join_class.\n-\n+        \n         The 'reuse' parameter can be either None which means all joins are\n         reusable, or it can be a set containing the aliases that can be reused.\n-\n+        \n         A join is always created as LOUTER if the lhs alias is LOUTER to make\n         sure chains like t1 LOUTER t2 INNER t3 aren't generated. All new\n         joins are created as LOUTER if the join is nullable.\n@@ -974,7 +974,7 @@ class Query(BaseExpression):\n                 reuse_alias = reuse_aliases[-1]\n             self.ref_alias(reuse_alias)\n             return reuse_alias\n-\n+        \n         # No reuse is possible, so we need a new alias.\n         alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)\n         if join.join_type:\n@@ -985,6 +985,11 @@ class Query(BaseExpression):\n             join.join_type = join_type\n         join.table_alias = alias\n         self.alias_map[alias] = join\n+\n+        # Ensure the new alias does not conflict with the existing aliases\n+        while alias in self.alias_map:\n+            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            self.alias_map[alias] = self.alias_map.pop(join.table_alias)\n         return alias\n \n     def join_parent_model(self, opts, model, alias, seen):\n"}, "success": true, "processing_time": 158.77955722808838, "attempts": 1, "error": null}
{"instance_id": "django__django-15161", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..028a93c726 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -651,6 +651,7 @@ class OuterRef(F):\n         return self\n \n \n+@deconstructible\n class Func(SQLiteNumericMixin, Expression):\n     \"\"\"An SQL function call.\"\"\"\n     function = None\n@@ -731,6 +732,7 @@ class Func(SQLiteNumericMixin, Expression):\n         return copy\n \n \n+@deconstructible\n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n"}, "success": true, "processing_time": 400.96155309677124, "attempts": 1, "error": null}
{"instance_id": "django__django-15252", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex 1a37c6b7d0..5707c89063 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -63,11 +63,12 @@ class MigrationRecorder:\n         if self.has_table():\n             return\n         # Make the table\n-        try:\n-            with self.connection.schema_editor() as editor:\n-                editor.create_model(self.Migration)\n-        except DatabaseError as exc:\n-            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n+        if db_router.allow_migrate(self.connection.alias, 'migrations'):\n+            try:\n+                with self.connection.schema_editor() as editor:\n+                    editor.create_model(self.Migration)\n+            except DatabaseError as exc:\n+                raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def applied_migrations(self):\n         \"\"\"\n"}, "success": true, "processing_time": 895.2763259410858, "attempts": 1, "error": null}
{"instance_id": "django__django-15268", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex c120f5d32d..d1b44aff80 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -408,8 +408,13 @@ class RenameModel(ModelOperation):\n \n \n class ModelOptionOperation(ModelOperation):\n+    def can_reduce_through(self, operation):\n+        if isinstance(operation, self.__class__) and self.name_lower == operation.name_lower:\n+            return True\n+        return False\n+\n     def reduce(self, operation, app_label):\n-        if isinstance(operation, (self.__class__, DeleteModel)) and self.name_lower == operation.name_lower:\n+        if self.can_reduce_through(operation):\n             return [operation]\n         return super().reduce(operation, app_label)\n \n"}, "success": true, "processing_time": 242.21960830688477, "attempts": 1, "error": null}
{"instance_id": "django__django-15277", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f30b523346..88c9ca9f28 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,7 +1010,8 @@ class CharField(Field):\n     def __init__(self, *args, db_collation=None, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.db_collation = db_collation\n-        self.validators.append(validators.MaxLengthValidator(self.max_length))\n+        if self.max_length is not None:\n+            self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n     def check(self, **kwargs):\n         databases = kwargs.get('databases') or []\n"}, "success": true, "processing_time": 188.94889950752258, "attempts": 1, "error": null}
{"instance_id": "django__django-15280", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex d5aa968400..a45d3f946d 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -373,12 +373,13 @@ class ReverseOneToOneDescriptor:\n         query = {'%s__in' % self.related.field.name: instances}\n         queryset = queryset.filter(**query)\n \n-        # Since we're going to assign directly in the cache,\n-        # we must manage the reverse relation cache manually.\n-        for rel_obj in queryset:\n-            instance = instances_dict[rel_obj_attr(rel_obj)]\n-            self.related.field.set_cached_value(rel_obj, instance)\n-        return queryset, rel_obj_attr, instance_attr, True, self.related.get_cache_name(), False\n+    # Since we're going to assign directly in the cache,\n+    # we must manage the reverse relation cache manually.\n+    for rel_obj in queryset:\n+        rel_obj._fetch_all()\n+        instance = instances_dict[rel_obj_attr(rel_obj)]\n+        self.related.field.set_cached_value(rel_obj, instance)\n+    return queryset, rel_obj_attr, instance_attr, True, self.related.get_cache_name(), False\n \n     def __get__(self, instance, cls=None):\n         \"\"\"\n"}, "success": true, "processing_time": 164.7740867137909, "attempts": 1, "error": null}
{"instance_id": "django__django-15315", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 88c9ca9f28..873f59a0bf 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -516,10 +516,7 @@ class Field(RegisterLookupMixin):\n     def __eq__(self, other):\n         # Needed for @total_ordering\n         if isinstance(other, Field):\n-            return (\n-                self.creation_counter == other.creation_counter and\n-                getattr(self, 'model', None) == getattr(other, 'model', None)\n-            )\n+            return self.creation_counter == other.creation_counter\n         return NotImplemented\n \n     def __lt__(self, other):\n@@ -542,11 +539,7 @@ class Field(RegisterLookupMixin):\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash((\n-            self.creation_counter,\n-            self.model._meta.app_label if hasattr(self, 'model') else None,\n-            self.model._meta.model_name if hasattr(self, 'model') else None,\n-        ))\n+        return hash(self.creation_counter)\n \n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n"}, "success": true, "processing_time": 189.79672479629517, "attempts": 1, "error": null}
{"instance_id": "django__django-15380", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex bf9c2acd26..f1238a3504 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -824,7 +824,7 @@ class MigrationAutodetector:\n         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n-            new_model_state = self.to_state.models[app_label, old_model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n             field = new_model_state.get_field(field_name)\n             # Scan to see if this is actually a rename!\n             field_dec = self.deep_deconstruct(field)\n"}, "success": true, "processing_time": 215.48476433753967, "attempts": 1, "error": null}
{"instance_id": "django__django-15382", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 81f8f79c71..aa442b4daf 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1218,7 +1218,9 @@ class Exists(Subquery):\n             query=query,\n             **extra_context,\n         )\n-        if self.negated:\n+        if self.negated and not sql:\n+            sql = '1 = 1'\n+        elif self.negated:\n             sql = 'NOT {}'.format(sql)\n         return sql, params\n \n"}, "success": true, "processing_time": 280.5414535999298, "attempts": 1, "error": null}
{"instance_id": "django__django-15467", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 64be087bf1..82ca56dcde 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -269,7 +269,7 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                         \"class\": get_ul_class(self.radio_fields[db_field.name]),\n                     }\n                 )\n-                kwargs[\"empty_label\"] = _(\"None\") if db_field.blank else None\n+                kwargs[\"empty_label\"] = kwargs.get(\"empty_label\") or _(\"None\") if db_field.blank else None\n \n         if \"queryset\" not in kwargs:\n             queryset = self.get_field_queryset(db, db_field, request)\n"}, "success": true, "processing_time": 123.88874363899231, "attempts": 1, "error": null}
{"instance_id": "django__django-15499", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 90fc31bee5..8ad5fefa61 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -290,6 +290,19 @@ class CreateModel(ModelOperation):\n                         managers=self.managers,\n                     ),\n                 ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         return super().reduce(operation, app_label)\n \n \n"}, "success": true, "processing_time": 116.73760342597961, "attempts": 1, "error": null}
{"instance_id": "django__django-15503", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex fdca700c9d..10d81e3a11 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -324,11 +324,19 @@ class KeyTransform(Transform):\n     def as_mysql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if isinstance(self.key_name, int):\n+            json_path = f\"{json_path[1:-1]}, {self.key_name}\"\n+        else:\n+            json_path = f\"{json_path[1:-1]}, '{self.key_name}'\"\n         return \"JSON_EXTRACT(%s, %%s)\" % lhs, tuple(params) + (json_path,)\n \n     def as_oracle(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if isinstance(self.key_name, int):\n+            json_path = f\"{json_path[1:-1]}, {self.key_name}\"\n+        else:\n+            json_path = f\"{json_path[1:-1]}, '{self.key_name}'\"\n         return (\n             \"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\"\n             % ((lhs, json_path) * 2)\n@@ -348,13 +356,11 @@ class KeyTransform(Transform):\n     def as_sqlite(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n-        datatype_values = \",\".join(\n-            [repr(datatype) for datatype in connection.ops.jsonfield_datatype_values]\n-        )\n-        return (\n-            \"(CASE WHEN JSON_TYPE(%s, %%s) IN (%s) \"\n-            \"THEN JSON_TYPE(%s, %%s) ELSE JSON_EXTRACT(%s, %%s) END)\"\n-        ) % (lhs, datatype_values, lhs, lhs), (tuple(params) + (json_path,)) * 3\n+        if isinstance(self.key_name, int):\n+            json_path = f\"{json_path[1:-1]}, '{self.key_name}'\"\n+        else:\n+            json_path = f\"{json_path[1:-1]}, \\\"{self.key_name}\\\"\"\n+        return \"JSON_EXTRACT(%s, %%s)\" % lhs, tuple(params) + (json_path,)\n \n \n class KeyTextTransform(KeyTransform):\n"}, "success": true, "processing_time": 544.8008048534393, "attempts": 1, "error": null}
{"instance_id": "django__django-15525", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..2e9dcbf70d 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -138,6 +138,8 @@ class Command(BaseCommand):\n \n     def loaddata(self, fixture_labels):\n         connection = connections[self.using]\n+        # Ensure the correct database router is used\n+        router = get_db_router(connection.alias)\n \n         # Keep a count of the installed objects and fixtures\n         self.fixture_count = 0\n"}, "success": true, "processing_time": 284.1923508644104, "attempts": 1, "error": null}
{"instance_id": "django__django-15554", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/datastructures.py b/django/db/models/sql/datastructures.py\nindex 1edf040e82..59cd06493e 100644\n--- a/django/db/models/sql/datastructures.py\n+++ b/django/db/models/sql/datastructures.py\n@@ -162,8 +162,8 @@ class Join:\n         return hash(self.identity)\n \n     def equals(self, other):\n-        # Ignore filtered_relation in equality check.\n-        return self.identity[:-1] == other.identity[:-1]\n+        # Consider filtered_relation in equality check.\n+        return self.identity == other.identity\n \n     def demote(self):\n         new = self.relabeled_clone({})\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 54f3258eac..a89943fac4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1027,7 +1027,7 @@ class Query(BaseExpression):\n         reuse_aliases = [\n             a\n             for a, j in self.alias_map.items()\n-            if (reuse is None or a in reuse) and j.equals(join)\n+            if (reuse is None or a in reuse) and j == join\n         ]\n         if reuse_aliases:\n             if join.table_alias in reuse_aliases:\n"}, "success": true, "processing_time": 176.8370590209961, "attempts": 1, "error": null}
{"instance_id": "django__django-15561", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 72208efd04..2c9ed7ff25 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -198,9 +198,7 @@ class Field(RegisterLookupMixin):\n         self.unique_for_date = unique_for_date\n         self.unique_for_month = unique_for_month\n         self.unique_for_year = unique_for_year\n-        if isinstance(choices, collections.abc.Iterator):\n-            choices = list(choices)\n-        self.choices = choices\n+        self.choices = list(choices) if isinstance(choices, collections.abc.Iterator) else choices\n         self.help_text = help_text\n         self.db_index = db_index\n         self.db_column = db_column\n"}, "success": true, "processing_time": 152.91715621948242, "attempts": 1, "error": null}
{"instance_id": "django__django-15563", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 59a5d6abbb..8a9f7e3ac1 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1836,7 +1836,7 @@ class SQLUpdateCompiler(SQLCompiler):\n         query.clear_ordering(force=True)\n         query.extra = {}\n         query.select = []\n-        query.add_fields([query.get_meta().pk.name])\n+        query.add_fields([query.get_meta().pk.attname])\n         super().pre_sql_setup()\n \n         must_pre_select = (\n"}, "success": true, "processing_time": 154.982980966568, "attempts": 1, "error": null}
{"instance_id": "django__django-15572", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex 40b34bb71c..d97d7ad0db 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -219,7 +219,21 @@ EMAIL_TIMEOUT = None\n # List of strings representing installed apps.\n INSTALLED_APPS = []\n \n-TEMPLATES = []\n+TEMPLATES = [\n+    {\n+        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n+        'DIRS': [],\n+        'APP_DIRS': True,\n+        'OPTIONS': {\n+            'context_processors': [\n+                'django.template.context_processors.debug',\n+                'django.template.context_processors.request',\n+                'django.contrib.auth.context_processors.auth',\n+                'django.contrib.messages.context_processors.messages',\n+            ],\n+        },\n+    },\n+]\n \n # Default form rendering class.\n FORM_RENDERER = \"django.forms.renderers.DjangoTemplates\"\n"}, "success": true, "processing_time": 371.11113357543945, "attempts": 1, "error": null}
{"instance_id": "django__django-15629", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 696bfd7742..427e8ad52e 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -772,6 +772,31 @@ class BaseDatabaseSchemaEditor:\n         new_db_params,\n         strict=False,\n     ):\n+        # ...\n+        # Collation change?\n+        old_collation = old_db_params.get(\"collation\")\n+        new_collation = new_db_params.get(\"collation\")\n+        if old_collation != new_collation:\n+            # Collation change handles also a type change.\n+            fragment = self._alter_column_collation_sql(\n+                model, new_field, new_type, new_collation\n+            )\n+            actions.append(fragment)\n+        # ...\n+        if (\n+            self.connection.features.supports_foreign_keys\n+            and new_field.remote_field\n+            and (\n+                fks_dropped or not old_field.remote_field or not old_field.db_constraint\n+            )\n+            and new_field.db_constraint\n+        ):\n+            if new_collation:\n+                new_db_params[\"collation\"] = new_collation\n+            self.execute(\n+                self._create_fk_sql(model, new_field, \"_fk_%(to_table)s_%(to_column)s\")\n+            )\n+        # ...\n         \"\"\"Perform a \"physical\" (non-ManyToMany) field update.\"\"\"\n         # Drop any FK constraints, we'll remake them later\n         fks_dropped = set()\n"}, "success": true, "processing_time": 182.89552807807922, "attempts": 1, "error": null}
{"instance_id": "django__django-15695", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex d17232e4ec..dbc7b48e59 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -967,22 +967,42 @@ class RenameIndex(IndexOperation):\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n-\n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n-\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n-\n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+            model = from_state.apps.get_model(app_label, self.model_name)\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            # Find the unnamed index.\n+            matching_index_name = schema_editor._constraint_names(\n+                model, column_names=[f.name for f in self.old_fields], index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        model._meta.db_table,\n+                        \", \".join(self.old_fields),\n+                    )\n+                )\n+            old_index = models.Index(\n+                fields=self.old_fields,\n+                name=matching_index_name[0],\n+            )\n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            new_index = to_model_state.get_index_by_name(self.new_name)\n+            schema_editor.rename_index(model, old_index, new_index)\n+        else:\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n+    \n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n+    \n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n \n     def describe(self):\n         if self.old_name:\n"}, "success": true, "processing_time": 111.5371401309967, "attempts": 1, "error": null}
{"instance_id": "django__django-15731", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex e37e56cd17..c86e6795b2 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -80,12 +80,12 @@ class BaseManager:\n \n     @classmethod\n     def _get_queryset_methods(cls, queryset_class):\n+        import functools\n+        \n         def create_method(name, method):\n+            @functools.wraps(method)\n             def manager_method(self, *args, **kwargs):\n                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n-\n-            manager_method.__name__ = method.__name__\n-            manager_method.__doc__ = method.__doc__\n             return manager_method\n \n         new_methods = {}\n"}, "success": true, "processing_time": 284.21468901634216, "attempts": 1, "error": null}
{"instance_id": "django__django-15741", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/formats.py b/django/utils/formats.py\nindex 3f38322d84..6457bcfef9 100644\n--- a/django/utils/formats.py\n+++ b/django/utils/formats.py\n@@ -130,8 +130,8 @@ def get_format(format_type, lang=None, use_l10n=None):\n                 break\n     if val is None:\n         if format_type not in FORMAT_SETTINGS:\n-            return format_type\n-        val = getattr(settings, format_type)\n+            return str(format_type)\n+        val = getattr(settings, str(format_type))\n     elif format_type in ISO_INPUT_FORMATS:\n         # If a list of input formats from one of the format_modules was\n         # retrieved, make sure the ISO_INPUT_FORMATS are in this list.\n"}, "success": true, "processing_time": 108.86802434921265, "attempts": 1, "error": null}
{"instance_id": "django__django-15814", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb90b0..4a084a4397 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -2596,7 +2596,7 @@ class RelatedPopulator:\n             )\n \n         self.model_cls = klass_info[\"model\"]\n-        self.pk_idx = self.init_list.index(self.model_cls._meta.pk.attname)\n+        self.pk_idx = self.init_list.index(self.model_cls._meta.concrete_model._meta.pk.attname)\n         self.related_populators = get_related_populators(klass_info, select, self.db)\n         self.local_setter = klass_info[\"local_setter\"]\n         self.remote_setter = klass_info[\"remote_setter\"]\n"}, "success": true, "processing_time": 442.9127359390259, "attempts": 1, "error": null}
{"instance_id": "django__django-15851", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 4c9bd63546..3b5ddafaca 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -32,9 +32,9 @@ class DatabaseClient(BaseDatabaseClient):\n             args += [\"-h\", host]\n         if port:\n             args += [\"-p\", str(port)]\n+        args.extend(parameters)\n         if dbname:\n             args += [dbname]\n-        args.extend(parameters)\n \n         env = {}\n         if passwd:\n"}, "success": true, "processing_time": 142.71256494522095, "attempts": 1, "error": null}
{"instance_id": "django__django-15863", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 7a5b28d159..7ec7cafea1 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -161,7 +161,7 @@ def floatformat(text, arg=-1):\n     try:\n         p = int(arg)\n     except ValueError:\n-        return input_val\n+        return repr(input_val)\n \n     try:\n         m = int(d) - d\n"}, "success": true, "processing_time": 163.7275960445404, "attempts": 1, "error": null}
{"instance_id": "django__django-15916", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 192d9fad94..5dd2819d51 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -630,6 +630,8 @@ def modelform_factory(\n     # creating needs to inherit from the parent's inner meta.\n     bases = (form.Meta,) if hasattr(form, \"Meta\") else ()\n     Meta = type(\"Meta\", bases, attrs)\n+    if not formfield_callback and hasattr(Meta, \"formfield_callback\"):\n+        formfield_callback = Meta.formfield_callback\n     if formfield_callback:\n         Meta.formfield_callback = staticmethod(formfield_callback)\n     # Give this new form class a reasonable name.\n"}, "success": true, "processing_time": 259.52646017074585, "attempts": 1, "error": null}
{"instance_id": "django__django-15957", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be0deb90b0..511f81b8fc 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -2162,6 +2162,13 @@ class Prefetch:\n \n         self.queryset = queryset\n         self.to_attr = to_attr\n+        if queryset is not None:\n+            self.queryset = self._clone_queryset(queryset)\n+\n+    def _clone_queryset(self, queryset):\n+        if hasattr(queryset, '_result_cache'):\n+            return queryset._chain()\n+        return queryset\n \n     def __getstate__(self):\n         obj_dict = self.__dict__.copy()\n"}, "success": true, "processing_time": 144.29777693748474, "attempts": 1, "error": null}
{"instance_id": "django__django-15973", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of \"AttributeError: 'str' object has no attribute '_meta'\" on migration when defining the \"through\" model in a many-to-many field in another app, we need to modify the `_check_relationship_model` method in `django/db/models/fields/related.py`. \n\nThe error occurs because when the `through` model is specified as a string, it is not properly resolved to the actual model class during the migration process. This results in an `AttributeError` when trying to access the `_meta` attribute of the `through` model, which is a string.\n\nHere's the step-by-step reasoning:\n\n1. **Understanding the Issue**: The problem arises when the `through` argument in a `ManyToManyField` is a string representing the model path. During migration, Django checks the relationship model, and if it's a string, it doesn't have a `_meta` attribute, leading to the error.\n\n2. **Identifying the Solution**: The solution involves resolving the `through` model string to the actual model class before checking its attributes. This can be achieved by using Django's app registry to get the model class from its string representation.\n\n3. **Modifying the `_check_relationship_model` Method**: We need to modify this method to handle the case where `self.remote_field.through` is a string. If it's a string, we should resolve it to the model class using the app registry.\n\nHere is the patch:\n\n```\n<file>django/db/models/fields/related.py</file>\n<original\n        if hasattr(self.remote_field.through, \"_meta\"):\n            qualified_model_name = \"%s.%s\" % (\n                self.remote_field.through._meta.app_label,\n                self.remote_field.through.__name__,\n            )\n        else:\n            qualified_model_name = self.remote_field.through\n\n        errors = []\n\n        if self.remote_field.through not in self.opts.apps.get_models(\n            include_auto_created=True\n        ):\n            # The relationship model is not installed.\n            errors.append(\n                checks.Error(\n                    \"Field specifies a many-to-many relation through model \"\n                    \"'%s', which has not been installed.\" % qualified_model_name,\n                    obj=self,\n                    id=\"fields.E331\",\n                )\n            )\n</original>\n<patched>\n        if isinstance(self.remote_field.through, str):\n            qualified_model_name = self.remote_field.through\n            try:\n                self.remote_field.through = self.opts.apps.get_model(\n                    self.remote_field.through\n                )\n            except LookupError:\n                errors.append(\n                    checks.Error(\n                        \"Field specifies a many-to-many relation through model \"\n                        \"'%s', which has not been installed.\" % qualified_model_name,\n                        obj=self,\n                        id=\"fields.E331\",\n                    )\n                )\n        else:\n            qualified_model_name = \"%s.%s\" % (\n                self.remote_field.through._meta.app_label,\n                self.remote_field.through.__name__,\n            )\n\n        errors = []\n\n        if self.remote_field.through not in self.opts.apps.get_models(\n            include_auto_created=True\n        ):\n            # The relationship model is not installed.\n            errors.append(\n                checks.Error(\n                    \"Field specifies a many-to-many relation through model \"\n                    \"'%s', which has not been installed.\" % qualified_model_name,\n                    obj=self,\n                    id=\"fields.E331\",\n                )\n            )\n</patched>\n```"}, "success": true, "processing_time": 617.4439477920532, "attempts": 1, "error": null}
{"instance_id": "django__django-15987", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex ac97f13161..40a8e10954 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -361,7 +361,7 @@ class Command(BaseCommand):\n         current directory.\n         \"\"\"\n         dirs = []\n-        fixture_dirs = settings.FIXTURE_DIRS\n+        fixture_dirs = [str(d) for d in settings.FIXTURE_DIRS]\n         if len(fixture_dirs) != len(set(fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n         for app_config in apps.get_app_configs():\n@@ -380,7 +380,7 @@ class Command(BaseCommand):\n                 dirs.append(app_dir)\n         dirs.extend(fixture_dirs)\n         dirs.append(\"\")\n-        return [os.path.realpath(d) for d in dirs]\n+        return [os.path.realpath(str(d)) for d in dirs]\n \n     def parse_name(self, fixture_name):\n         \"\"\"\n"}, "success": true, "processing_time": 90.84817481040955, "attempts": 1, "error": null}
{"instance_id": "django__django-16032", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/mysql/compiler.py b/django/db/backends/mysql/compiler.py\nindex bd2715fb43..04e9435879 100644\n--- a/django/db/backends/mysql/compiler.py\n+++ b/django/db/backends/mysql/compiler.py\n@@ -7,15 +7,9 @@ class SQLCompiler(compiler.SQLCompiler):\n     def as_subquery_condition(self, alias, columns, compiler):\n         qn = compiler.quote_name_unless_alias\n         qn2 = self.connection.ops.quote_name\n+        col_exprs = [\"%s.%s\" % (qn(alias), qn2(column)) for column in columns]\n         sql, params = self.as_sql()\n-        return (\n-            \"(%s) IN (%s)\"\n-            % (\n-                \", \".join(\"%s.%s\" % (qn(alias), qn2(column)) for column in columns),\n-                sql,\n-            ),\n-            params,\n-        )\n+        return \"(%s) IN (%s)\" % (\", \".join(col_exprs), sql), params\n \n \n class SQLInsertCompiler(compiler.SQLInsertCompiler, SQLCompiler):\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 27310e5d9f..b684f3897a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1513,13 +1513,14 @@ class SQLCompiler:\n         qn = compiler.quote_name_unless_alias\n         qn2 = self.connection.ops.quote_name\n \n+        col_exprs = []\n         for index, select_col in enumerate(self.query.select):\n             lhs_sql, lhs_params = self.compile(select_col)\n             rhs = \"%s.%s\" % (qn(alias), qn2(columns[index]))\n             self.query.where.add(RawSQL(\"%s = %s\" % (lhs_sql, rhs), lhs_params), AND)\n-\n+            col_exprs.append(\"%s.%s\" % (qn(alias), qn2(columns[index])))\n         sql, params = self.as_sql()\n-        return \"EXISTS (%s)\" % sql, params\n+        return \"(%s) IN (%s)\" % (\", \".join(col_exprs), sql), params\n \n     def explain_query(self):\n         result = list(self.execute_sql())\n"}, "success": true, "processing_time": 186.97925233840942, "attempts": 1, "error": null}
{"instance_id": "django__django-16082", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/functions/mixins.py b/django/db/models/functions/mixins.py\nindex caf20e131d..6e74f61595 100644\n--- a/django/db/models/functions/mixins.py\n+++ b/django/db/models/functions/mixins.py\n@@ -52,6 +52,4 @@ class NumericOutputFieldMixin:\n         source_fields = self.get_source_fields()\n         if any(isinstance(s, DecimalField) for s in source_fields):\n             return DecimalField()\n-        if any(isinstance(s, IntegerField) for s in source_fields):\n-            return FloatField()\n         return super()._resolve_output_field() if source_fields else FloatField()\n"}, "success": true, "processing_time": 136.5057463645935, "attempts": 1, "error": null}
{"instance_id": "django__django-16100", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 5f07a4208a..62e443bf43 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2010,26 +2010,27 @@ class ModelAdmin(BaseModelAdmin):\n                 request.POST, request.FILES, queryset=modified_objects\n             )\n             if formset.is_valid():\n-                changecount = 0\n-                for form in formset.forms:\n-                    if form.has_changed():\n-                        obj = self.save_form(request, form, change=True)\n-                        self.save_model(request, obj, form, change=True)\n-                        self.save_related(request, form, formsets=[], change=True)\n-                        change_msg = self.construct_change_message(request, form, None)\n-                        self.log_change(request, obj, change_msg)\n-                        changecount += 1\n-\n-                if changecount:\n-                    msg = ngettext(\n-                        \"%(count)s %(name)s was changed successfully.\",\n-                        \"%(count)s %(name)s were changed successfully.\",\n-                        changecount,\n-                    ) % {\n-                        \"count\": changecount,\n-                        \"name\": model_ngettext(self.opts, changecount),\n-                    }\n-                    self.message_user(request, msg, messages.SUCCESS)\n+                with transaction.atomic(using=router.db_for_write(self.model)):\n+                    changecount = 0\n+                    for form in formset.forms:\n+                        if form.has_changed():\n+                            obj = self.save_form(request, form, change=True)\n+                            self.save_model(request, obj, form, change=True)\n+                            self.save_related(request, form, formsets=[], change=True)\n+                            change_msg = self.construct_change_message(request, form, None)\n+                            self.log_change(request, obj, change_msg)\n+                            changecount += 1\n+\n+                    if changecount:\n+                        msg = ngettext(\n+                            \"%(count)s %(name)s was changed successfully.\",\n+                            \"%(count)s %(name)s were changed successfully.\",\n+                            changecount,\n+                        ) % {\n+                            \"count\": changecount,\n+                            \"name\": model_ngettext(self.opts, changecount),\n+                        }\n+                        self.message_user(request, msg, messages.SUCCESS)\n \n                 return HttpResponseRedirect(request.get_full_path())\n \n"}, "success": true, "processing_time": 98.21926212310791, "attempts": 1, "error": null}
{"instance_id": "django__django-16116", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex 2e97d9064b..f257e947ba 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -248,12 +248,12 @@ class Command(BaseCommand):\n                 else:\n                     self.log(\"No changes detected\")\n         else:\n+            if check_changes:\n+                sys.exit(1)\n             if self.update:\n                 self.write_to_last_migration_files(changes)\n             else:\n                 self.write_migration_files(changes)\n-            if check_changes:\n-                sys.exit(1)\n \n     def write_to_last_migration_files(self, changes):\n         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])\n"}, "success": true, "processing_time": 193.1544647216797, "attempts": 1, "error": null}
{"instance_id": "django__django-16139", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b3cfc6723c..f6c4b7fc2f 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n         if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+            password.help_text = password.help_text.format(f\"../../{self.instance.pk}/password/\")\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\n"}, "success": true, "processing_time": 90.41032791137695, "attempts": 1, "error": null}
{"instance_id": "django__django-16145", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/management/commands/changepassword.py b/django/contrib/auth/management/commands/changepassword.py\nindex 669d8cf5d0..f4fd7f160f 100644\n--- a/django/contrib/auth/management/commands/changepassword.py\n+++ b/django/contrib/auth/management/commands/changepassword.py\n@@ -38,8 +38,10 @@ class Command(BaseCommand):\n     def handle(self, *args, **options):\n         if options[\"username\"]:\n             username = options[\"username\"]\n-        else:\n+        elif options[\"username\"] is None:\n             username = getpass.getuser()\n+        else:\n+            username = '0.0.0.0'\n \n         try:\n             u = UserModel._default_manager.using(options[\"database\"]).get(\n"}, "success": true, "processing_time": 227.5264072418213, "attempts": 1, "error": null}
{"instance_id": "django__django-16255", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\nindex 27756d9d96..b40ad806ed 100644\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -168,7 +168,7 @@ class Sitemap:\n         if callable(self.lastmod):\n             try:\n                 return max([self.lastmod(item) for item in self.items()])\n-            except TypeError:\n+            except (TypeError, ValueError):\n                 return None\n         else:\n             return self.lastmod\n"}, "success": true, "processing_time": 87.61472153663635, "attempts": 1, "error": null}
{"instance_id": "django__django-16256", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex c5d87f647a..5203511e8f 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -793,6 +793,14 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         create.alters_data = True\n \n+        async def acreate(self, **kwargs):\n+            self._check_fk_val()\n+            kwargs[self.field.name] = self.instance\n+            db = router.db_for_write(self.model, instance=self.instance)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).create)(**kwargs)\n+\n+        acreate.alters_data = True\n+\n         def get_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -801,6 +809,14 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         get_or_create.alters_data = True\n \n+        async def aget_or_create(self, **kwargs):\n+            self._check_fk_val()\n+            kwargs[self.field.name] = self.instance\n+            db = router.db_for_write(self.model, instance=self.instance)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).get_or_create)(**kwargs)\n+\n+        aget_or_create.alters_data = True\n+\n         def update_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -809,6 +825,14 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         update_or_create.alters_data = True\n \n+        async def aupdate_or_create(self, **kwargs):\n+            self._check_fk_val()\n+            kwargs[self.field.name] = self.instance\n+            db = router.db_for_write(self.model, instance=self.instance)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).update_or_create)(**kwargs)\n+\n+        aupdate_or_create.alters_data = True\n+\n         # remove() and clear() are only provided if the ForeignKey can have a\n         # value of null.\n         if rel.field.null:\n"}, "success": true, "processing_time": 114.94549131393433, "attempts": 1, "error": null}
{"instance_id": "django__django-16263", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9735ce10c8..ef0c5af59e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -545,11 +545,33 @@ class Query(BaseExpression):\n \n         return dict(zip(outer_query.annotation_select, result))\n \n+    def resolve_used_annotations(self):\n+        \"\"\"\n+        Return the set of annotation aliases that are used in the query.\n+        \"\"\"\n+        used_annotations = set()\n+        # Add annotations that are used in the where clause.\n+        used_annotations.update(\n+            col.alias for col in self._gen_cols(self.where.children, include_external=True)\n+        )\n+        # Add annotations that are used in other annotations.\n+        for annotation in self.annotations.values():\n+            used_annotations.update(\n+                col.alias for col in self._gen_cols([annotation], include_external=True)\n+            )\n+        # Add annotations that are used in the order_by clause.\n+        used_annotations.update(\n+            col.alias for col in self._gen_cols(self.order_by, include_external=True)\n+        )\n+        return used_annotations\n+\n     def get_count(self, using):\n         \"\"\"\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        used_annotations = self.resolve_used_annotations()\n+        obj.set_annotation_mask(used_annotations)\n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n \n"}, "success": true, "processing_time": 299.6423079967499, "attempts": 1, "error": null}
{"instance_id": "django__django-16315", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 62273fc43c..7893c1fbc9 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -353,12 +353,14 @@ class DatabaseOperations(BaseDatabaseOperations):\n         if on_conflict == OnConflict.IGNORE:\n             return \"ON CONFLICT DO NOTHING\"\n         if on_conflict == OnConflict.UPDATE:\n+            unique_field_names = [f.db_column for f in unique_fields]\n+            update_field_names = [f.db_column for f in update_fields]\n             return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n-                \", \".join(map(self.quote_name, unique_fields)),\n+                \", \".join(map(self.quote_name, unique_field_names)),\n                 \", \".join(\n                     [\n-                        f\"{field} = EXCLUDED.{field}\"\n-                        for field in map(self.quote_name, update_fields)\n+                        f\"{self.quote_name(f)} = EXCLUDED.{self.quote_name(f)}\"\n+                        for f in update_field_names\n                     ]\n                 ),\n             )\n"}, "success": true, "processing_time": 236.23184823989868, "attempts": 1, "error": null}
{"instance_id": "django__django-16333", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex d73d1c8495..4c9a4f5556 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -141,6 +141,7 @@ class UserCreationForm(forms.ModelForm):\n         user.set_password(self.cleaned_data[\"password1\"])\n         if commit:\n             user.save()\n+            self.save_m2m()\n         return user\n \n \n"}, "success": true, "processing_time": 66.04690384864807, "attempts": 1, "error": null}
{"instance_id": "django__django-16429", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/utils/timesince.py b/django/utils/timesince.py\nindex 701c49bab9..8415449f57 100644\n--- a/django/utils/timesince.py\n+++ b/django/utils/timesince.py\n@@ -59,9 +59,9 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):\n         raise ValueError(\"depth must be greater than 0.\")\n     # Convert datetime.date to datetime.datetime for comparison.\n     if not isinstance(d, datetime.datetime):\n-        d = datetime.datetime(d.year, d.month, d.day)\n+        d = datetime.datetime(d.year, d.month, d.day, tzinfo=getattr(d, 'tzinfo', None))\n     if now and not isinstance(now, datetime.datetime):\n-        now = datetime.datetime(now.year, now.month, now.day)\n+        now = datetime.datetime(now.year, now.month, now.day, tzinfo=getattr(now, 'tzinfo', None))\n \n     now = now or datetime.datetime.now(datetime.timezone.utc if is_aware(d) else None)\n \n@@ -91,13 +91,14 @@ def timesince(d, now=None, reversed=False, time_strings=None, depth=2):\n             pivot_month -= 12\n             pivot_year += 1\n         pivot = datetime.datetime(\n-            pivot_year,\n-            pivot_month,\n-            min(MONTHS_DAYS[pivot_month - 1], d.day),\n-            d.hour,\n-            d.minute,\n-            d.second,\n-        )\n+           pivot_year,\n+           pivot_month,\n+           min(MONTHS_DAYS[pivot_month - 1], d.day),\n+           d.hour,\n+           d.minute,\n+           d.second,\n+           tzinfo=getattr(d, 'tzinfo', None),\n+       )\n     else:\n         pivot = d\n     remaining_time = (now - pivot).total_seconds()\n"}, "success": true, "processing_time": 105.7143280506134, "attempts": 1, "error": null}
{"instance_id": "django__django-16454", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of management command subparsers not retaining error formatting, we need to modify the `CommandParser` class in `django/core/management/base.py`. The goal is to ensure that when a subparser is added, it copies the relevant arguments from the parent parser, specifically `missing_args_message` and `called_from_command_line`, to improve error messages and prevent stack traces.\n\nThe `CommandParser` class is a customized `ArgumentParser` that enhances error handling for management commands. However, its current implementation does not propagate these enhancements to subparsers created via `add_subparsers`. \n\nTo fix this, we need to override the `add_subparsers` method in `CommandParser` to create a subparser action that retains the error formatting arguments. This involves defining a custom `SubparsersAction` class, `CommandSubparsersAction`, which will pass the necessary arguments to the subparsers.\n\nHere's the step-by-step reasoning and the patch:\n\n1. **Identify the Need for Custom Subparsers Action**: The default `add_subparsers` method does not provide a way to pass custom arguments to subparsers. We need to create a custom action that can do this.\n\n2. **Define Custom Subparsers Action**: We'll define a `CommandSubparsersAction` class that inherits from `argparse._SubparsersAction`. This class will override the `__call__` method to pass `missing_args_message` and `called_from_command_line` to each subparser.\n\n3. **Override `add_subparsers` in `CommandParser`**: We need to override `add_subparsers` in `CommandParser` to return an instance of `CommandSubparsersAction` instead of the default `SubparsersAction`.\n\nHere is the patch:\n\n```\n<file>django/core/management/base.py</file>\n<original>\n60     def parse_args(self, args=None, namespace=None):\n61         # Catch missing argument for a better error message\n62         if self.missing_args_message and not (\n63             args or any(not arg.startswith(\"-\") for arg in args)\n64         ):\n65             self.error(self.missing_args_message)\n66         return super().parse_args(args, namespace)\n67 \n68     def error(self, message):\n69         if self.called_from_command_line:\n70             super().error(message)\n71         else:\n72             raise CommandError(\"Error: %s\" % message)\n</original>\n<patched>\n60     def parse_args(self, args=None, namespace=None):\n61         # Catch missing argument for a better error message\n62         if self.missing_args_message and not (\n63             args or any(not arg.startswith(\"-\") for arg in args)\n64         ):\n65             self.error(self.missing_args_message)\n66         return super().parse_args(args, namespace)\n67 \n68     def error(self, message):\n69         if self.called_from_command_line:\n70             super().error(message)\n71         else:\n72             raise CommandError(\"Error: %s\" % message)\n73 \n74     def add_subparsers(self, **kwargs):\n75         # See https://github.com/python/cpython/issues/73744\n76         self._check_mutual_exclusivity()\n77         action = CommandSubparsersAction(\n78             option_strings=[],\n79             dest=self.prog,\n80             required=False,\n81             help=None,\n82             metavar=None,\n83             **kwargs,\n84         )\n85         self._actions.append(action)\n86         action.parent = self\n87         return action\n</patched>\n```\n\n```\n<file>django/core/management/base.py</file>\n<original>\nNone\n</original>\n<patched>\nclass CommandSubparsersAction(argparse._SubparsersAction):\n    def __call__(self, parser, namespace, values, option_string=None):\n        # This method is based on the stdlib's argparse.py\n        parser_name = self.dest\n        parser = self.choices.get(values, None)\n        if parser is None:\n            raise KeyError(\n                self.metavar + \": \" + values\n            )  # missing subparser argument\n        # Store the parser name in the namespace\n        setattr(namespace, parser_name, values)\n        # Store the subparser in the namespace\n        namespace.subparser = parser\n        # Parse the subparser\n        parser.missing_args_message = self.missing_args_message\n        parser.called_from_command_line = self.called_from_command_line\n        parser.parse_args(namespace.values, namespace)\n</patched>\n```"}, "success": true, "processing_time": 456.3521201610565, "attempts": 1, "error": null}
{"instance_id": "django__django-16485", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 23c3a08c67..7ace6675d5 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -183,7 +183,7 @@ def floatformat(text, arg=-1):\n     tupl = d.as_tuple()\n     units = len(tupl[1])\n     units += -tupl[2] if m else tupl[2]\n-    prec = abs(p) + units + 1\n+    prec = max(abs(p) + units + 1, 1)\n \n     # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n     # and `exponent` from Decimal.as_tuple() directly.\n"}, "success": true, "processing_time": 121.00109148025513, "attempts": 1, "error": null}
{"instance_id": "django__django-16493", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7a99b12691..f0299a41af 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -295,8 +295,8 @@ class FileField(Field):\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs[\"upload_to\"] = self.upload_to\n-        if self.storage is not default_storage:\n-            kwargs[\"storage\"] = getattr(self, \"_storage_callable\", self.storage)\n+        if hasattr(self, '_storage_callable') and callable(self._storage_callable):\n+            kwargs[\"storage\"] = self._storage_callable\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\n"}, "success": true, "processing_time": 117.74142980575562, "attempts": 1, "error": null}
{"instance_id": "django__django-16502", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex fef5532e58..05efb51aee 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -220,6 +220,11 @@ class WSGIRequestHandler(simple_server.WSGIRequestHandler):\n         if not self.parse_request():  # An error code has been sent, just exit\n             return\n \n+        if self.command == 'HEAD':\n+            self.send_response(200)\n+            self.end_headers()\n+            return\n+\n         handler = ServerHandler(\n             self.rfile, self.wfile, self.get_stderr(), self.get_environ()\n         )\n"}, "success": true, "processing_time": 531.6490592956543, "attempts": 1, "error": null}
{"instance_id": "django__django-16569", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 235aaf844c..02d040ee03 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -490,7 +490,7 @@ class BaseFormSet(RenderableFormMixin):\n                     required=False,\n                     widget=self.get_ordering_widget(),\n                 )\n-        if self.can_delete and (self.can_delete_extra or index < initial_form_count):\n+        if self.can_delete and (self.can_delete_extra or (index is not None and index < initial_form_count)):\n             form.fields[DELETION_FIELD_NAME] = BooleanField(\n                 label=_(\"Delete\"),\n                 required=False,\n"}, "success": true, "processing_time": 97.63588666915894, "attempts": 1, "error": null}
{"instance_id": "django__django-16642", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex f62dec8ce9..1a81f0a0ec 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -612,6 +612,8 @@ class FileResponse(StreamingHttpResponse):\n                     \"bzip2\": \"application/x-bzip\",\n                     \"gzip\": \"application/gzip\",\n                     \"xz\": \"application/x-xz\",\n+                    \"br\": \"application/octet-stream\",\n+                    \"Z\": \"application/octet-stream\",\n                 }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\n"}, "success": true, "processing_time": 241.7987403869629, "attempts": 1, "error": null}
{"instance_id": "django__django-16667", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 842b73e95c..f4bc74b7cd 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -1157,7 +1157,7 @@ class SelectDateWidget(Widget):\n             input_format = formats.sanitize_strftime_format(input_format)\n             try:\n                 date_value = datetime.date(int(y), int(m), int(d))\n-            except ValueError:\n+            except (ValueError, OverflowError):\n                 # Return pseudo-ISO dates with zeros for any unselected values,\n                 # e.g. '2017-0-23'.\n                 return \"%s-%s-%s\" % (y or 0, m or 0, d or 0)\n"}, "success": true, "processing_time": 123.71253252029419, "attempts": 1, "error": null}
{"instance_id": "django__django-16801", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 7f8eb128e1..5b99b20337 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -441,7 +441,8 @@ class ImageField(FileField):\n         # after their corresponding image field don't stay cleared by\n         # Model.__init__, see bug #11196.\n         # Only run post-initialization dimension update on non-abstract models\n-        if not cls._meta.abstract:\n+        # if width_field or height_field is specified.\n+        if not cls._meta.abstract and (self.width_field or self.height_field):\n             signals.post_init.connect(self.update_dimension_fields, sender=cls)\n \n     def update_dimension_fields(self, instance, force=False, *args, **kwargs):\n"}, "success": true, "processing_time": 91.50194978713989, "attempts": 1, "error": null}
{"instance_id": "django__django-17029", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex 0683f3ad3c..d5432343e8 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -370,12 +370,13 @@ class Apps:\n     def clear_cache(self):\n         \"\"\"\n         Clear all internal caches, for methods that alter the app registry.\n-\n+        \n         This is mostly used in tests.\n         \"\"\"\n         # Call expire cache on each model. This will purge\n         # the relation tree and the fields cache.\n         self.get_models.cache_clear()\n+        self.get_swappable_settings_name.cache_clear()\n         if self.ready:\n             # Circumvent self.get_models() to prevent that the cache is refilled.\n             # This particularly prevents that an empty value is cached while cloning.\n"}, "success": true, "processing_time": 78.44464445114136, "attempts": 1, "error": null}
{"instance_id": "django__django-17087", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f958589bea..e888a21ccb 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -262,6 +262,12 @@ class Field(RegisterLookupMixin):\n     def __repr__(self):\n         \"\"\"Display the module, class, and name of the field.\"\"\"\n         path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__qualname__)\n+\n+        def _get_default(self):\n+            if self.has_default():\n+                if callable(self.default):\n+                    return self.default\n+                return lambda: self.default\n         name = getattr(self, \"name\", None)\n         if name is not None:\n             return \"<%s: %s>\" % (path, name)\n@@ -978,6 +984,7 @@ class Field(RegisterLookupMixin):\n         value = getattr(model_instance, self.attname)\n         if not connection.features.supports_default_keyword_in_insert:\n             from django.db.models.expressions import DatabaseDefault\n+            from django.utils.functional import cached_property\n \n             if isinstance(value, DatabaseDefault):\n                 return self.db_default\n"}, "success": true, "processing_time": 133.80719232559204, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-13989", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 4b73d52293..56f1f19645 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6686,7 +6686,7 @@ optional.\n \n         density = bool(density) or bool(normed)\n         if density and not stacked:\n-            hist_kwargs = dict(density=density)\n+            hist_kwargs = dict(density=density, range=hist_kwargs.get('range'))\n \n         # List to store all the top coordinates of the histograms\n         tops = []\n"}, "success": true, "processing_time": 118.22904109954834, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-14623", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex da2dea6f57..761363fed4 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3264,8 +3264,8 @@ class _AxesBase(martist.Artist):\n             cbook._warn_external(\n                 f\"Attempting to set identical left == right == {left} results \"\n                 f\"in singular transformations; automatically expanding.\")\n-        left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n         left, right = self.xaxis.limit_range_for_scale(left, right)\n+        left, right = self.xaxis.get_major_locator().nonsingular(left, right)\n \n         self.viewLim.intervalx = (left, right)\n         if auto is not None:\n@@ -3644,8 +3644,8 @@ class _AxesBase(martist.Artist):\n                 f\"Attempting to set identical bottom == top == {bottom} \"\n                 f\"results in singular transformations; automatically \"\n                 f\"expanding.\")\n-        bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n         bottom, top = self.yaxis.limit_range_for_scale(bottom, top)\n+        bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n \n         self.viewLim.intervaly = (bottom, top)\n         if auto is not None:\n"}, "success": true, "processing_time": 213.37541270256042, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-21568", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of unclear datetime axis labels when using `usetex=True` in matplotlib version 3.4, we need to focus on the `_wrap_in_tex` function in `lib/matplotlib/dates.py`. This function is responsible for wrapping date strings in LaTeX math mode for proper rendering. The current implementation seems to cause spacing issues with date labels.\n\nUpon examining the `_wrap_in_tex` function, it appears that the regular expression used might not be correctly handling special characters like ':' and spaces within the date strings. This could lead to incorrect spacing and rendering of date labels when `usetex=True`.\n\nThe goal is to modify the `_wrap_in_tex` function so that it properly handles these special characters, ensuring that date labels are rendered correctly without any spacing issues.\n\nHere's the necessary patch:\n\n```\n<file>lib/matplotlib/dates.py</file>\n<original>\ndef _wrap_in_tex(text):\n    p = r'([a-zA-Z]+)'\n    ret_text = re.sub(p, r'}$$\\1$\\\\mathdefault{', text)\n    ret_text = '$\\\\mathdefault{' + ret_text.replace('-', '{-}') + '}$'\n    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n    return ret_text\n</original>\n<patched>\ndef _wrap_in_tex(text):\n    p = r'([a-zA-Z]+)'\n    ret_text = re.sub(p, r'}$$\\1$\\\\mathdefault{', text)\n    # Braces ensure dashes and colons are not spaced like binary operators.\n    ret_text = '$\\\\mathdefault{' + ret_text.replace('-', '{-}') .replace(':', '{:}') + '}$'\n    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n    return ret_text\n</patched>\n```\n\nThis modification adds the replacement of ':' with '{:}' to ensure that colons are also properly handled and do not cause spacing issues in the rendered date labels. This change should improve the rendering of datetime axis labels when `usetex=True`, making them clearer and more consistent with the expected output."}, "success": true, "processing_time": 331.50838565826416, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-22865", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex c59b0ac815..bddabd5f77 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -595,19 +595,23 @@ class Colorbar:\n         self._short_axis().set_ticks([])\n         self._short_axis().set_ticks([], minor=True)\n \n+        # Compute the X/Y mesh.\n+        X, Y = self._mesh()\n+\n         # Set self._boundaries and self._values, including extensions.\n         # self._boundaries are the edges of each square of color, and\n         # self._values are the value to map into the norm to get the\n         # color:\n         self._process_values()\n-        # Set self.vmin and self.vmax to first and last boundary, excluding\n-        # extensions:\n-        self.vmin, self.vmax = self._boundaries[self._inside][[0, -1]]\n-        # Compute the X/Y mesh.\n-        X, Y = self._mesh()\n+\n         # draw the extend triangles, and shrink the inner axes to accommodate.\n         # also adds the outline path to self.outline spine:\n         self._do_extends()\n+\n+        # Set self.vmin and self.vmax to first and last boundary, excluding\n+        # extensions:\n+        self.vmin, self.vmax = self._boundaries[self._inside][[0, -1]]\n+\n         lower, upper = self.vmin, self.vmax\n         if self._long_axis().get_inverted():\n             # If the axis is inverted, we need to swap the vmin/vmax\n"}, "success": true, "processing_time": 450.36402106285095, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-22871", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 4d8ddf3ee5..fa864feb5a 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -838,7 +838,7 @@ class ConciseDateFormatter(ticker.Formatter):\n                     if '.' in labels[nn]:\n                         labels[nn] = labels[nn][:-trailing_zeros].rstrip('.')\n \n-        if show_offset:\n+        if show_offset or (level == 0 and len(np.unique(tickdate[:, level])) == 1):\n             # set the offset string:\n             self.offset_string = tickdatetime[-1].strftime(offsetfmts[level])\n             if self._usetex:\n"}, "success": true, "processing_time": 150.20046162605286, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-23412", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py\nindex e062249589..6cf1b7a2fb 100644\n--- a/lib/matplotlib/patches.py\n+++ b/lib/matplotlib/patches.py\n@@ -549,7 +549,7 @@ class Patch(artist.Artist):\n         if self._edgecolor[3] == 0 or self._linestyle == 'None':\n             lw = 0\n         gc.set_linewidth(lw)\n-        gc.set_dashes(*self._dash_pattern)\n+        gc.set_dashes(*self._unscaled_dash_pattern)\n         gc.set_capstyle(self._capstyle)\n         gc.set_joinstyle(self._joinstyle)\n \n@@ -586,14 +586,14 @@ class Patch(artist.Artist):\n         # docstring inherited\n         if not self.get_visible():\n             return\n-        # Patch has traditionally ignored the dashoffset.\n-        with cbook._setattr_cm(\n-                 self, _dash_pattern=(0, self._dash_pattern[1])), \\\n-             self._bind_draw_path_function(renderer) as draw_path:\n+       # Use the correct dash pattern that includes the offset.\n+        with self._bind_draw_path_function(renderer) as draw_path:\n             path = self.get_path()\n             transform = self.get_transform()\n             tpath = transform.transform_path_non_affine(path)\n             affine = transform.get_affine()\n+            gc = renderer.new_gc()\n+            gc.set_dashes(*self._dash_pattern)\n             draw_path(tpath, affine,\n                       # Work around a bug in the PDF and SVG renderers, which\n                       # do not draw the hatches if the facecolor is fully\n"}, "success": true, "processing_time": 114.46132445335388, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-24026", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex c580043eeb..cc5e27894c 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -7,6 +7,7 @@ https://stackoverflow.com/q/2225995/\n \"\"\"\n \n import numpy as np\n+import matplotlib.colors as mcolors\n \n from matplotlib import _api\n \n"}, "success": true, "processing_time": 123.31691789627075, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-24627", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 90b0bf117e..96e249c9e5 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1409,6 +1409,10 @@ class _AxesBase(martist.Artist):\n             self.__clear()\n         else:\n             self.clear()\n+        # Iterate over all child artists and explicitly unset their .axes and .figure attributes\n+        for artist in self.get_children():\n+            artist.axes = None\n+            artist.figure = None\n \n     class ArtistList(MutableSequence):\n         \"\"\"\n"}, "success": true, "processing_time": 317.66338300704956, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-24637", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex efa34dd078..bfc6c76e1b 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1453,6 +1453,14 @@ or callable, default: value of *xycoords*\n         if not self.get_visible() or not self._check_xy(renderer):\n             return\n         self.update_positions(renderer)\n+\n+        gid = self.get_gid()\n+        if gid is not None:\n+            self.offsetbox.set_gid(gid)\n+            self.patch.set_gid(gid)\n+            if self.arrow_patch is not None:\n+                self.arrow_patch.set_gid(gid)\n+\n         if self.arrow_patch is not None:\n             if self.arrow_patch.figure is None and self.figure is not None:\n                 self.arrow_patch.figure = self.figure\n"}, "success": true, "processing_time": 163.58707523345947, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-24870", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 144eadeae2..7b4ca9d634 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1456,12 +1456,18 @@ class QuadContourSet(ContourSet):\n         else:\n             raise _api.nargs_error(fn, takes=\"from 1 to 4\", given=nargs)\n         z = ma.masked_invalid(z, copy=False)\n+\n+        if z.dtype == bool:\n+            if self.levels is None:\n+                self.levels = [0.5]\n+\n         self.zmax = float(z.max())\n         self.zmin = float(z.min())\n         if self.logscale and self.zmin <= 0:\n             z = ma.masked_where(z <= 0, z)\n             _api.warn_external('Log scale: values of z <= 0 have been masked')\n             self.zmin = float(z.min())\n+\n         self._process_contour_level_args(args)\n         return (x, y, z)\n \n"}, "success": true, "processing_time": 203.59950947761536, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-25332", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of the `Grouper` class not being pickleable due to the use of weak references, we need to implement the `__getstate__` and `__setstate__` methods. The `__getstate__` method will return a dictionary containing the state of the object, and the `__setstate__` method will restore the state from a dictionary.\n\nThe `Grouper` class is defined in `lib/matplotlib/cbook.py`. The issue arises because the class uses weak references, which are not pickleable. To fix this, we need to modify the `Grouper` class to include the `__getstate__` and `__setstate__` methods.\n\nHere is the patch:\n\n```\n<file>lib/matplotlib/cbook.py</file>\n<original>\n787 \n788     def __init__(self, init=()):\n789         self._mapping = {weakref.ref(x): [weakref.ref(x)] for x in init}\n790 \n791     def __contains__(self, item):\n792         return weakref.ref(item) in self._mapping\n793 \n794     def clean(self):\n795         \"\"\"Clean dead weak references from the dictionary.\"\"\"\n796         mapping = self._mapping\n797         to_drop = [key for key in mapping if key() is None]\n798         for key in to_drop:\n799             val = mapping.pop(key)\n800             val.remove(key)\n801 \n802     def join(self, a, *args):\n803         \"\"\"\n804         Join given arguments into the same set.  Accepts one or more arguments.\n805         \"\"\"\n806         mapping = self._mapping\n807         set_a = mapping.setdefault(weakref.ref(a), [weakref.ref(a)])\n808 \n809         for arg in args:\n810             set_b = mapping.get(weakref.ref(arg), [weakref.ref(arg)])\n811             if set_b is not set_a:\n812                 if len(set_b) > len(set_a):\n813                     set_a, set_b = set_b, set_a\n814                 set_a.extend(set_b)\n815                 for elem in set_b:\n816                     mapping[elem] = set_a\n817 \n818         self.clean()\n819 \n820     def joined(self, a, b):\n821         \"\"\"Return whether *a* and *b* are members of the same set.\"\"\"\n822         self.clean()\n823         return (self._mapping.get(weakref.ref(a), object())\n824                 is self._mapping.get(weakref.ref(b)))\n825 \n826     def remove(self, a):\n827         self.clean()\n828         set_a = self._mapping.pop(weakref.ref(a), None)\n829         if set_a:\n830             set_a.remove(weakref.ref(a))\n831 \n832     def __iter__(self):\n833         \"\"\"\n834         Iterate over each of the disjoint sets as a list.\n835 \n836         The iterator is invalid if interleaved with calls to join().\n837         \"\"\"\n838         self.clean()\n839         unique_groups = {id(group): group for group in self._mapping.values()}\n840         for group in unique_groups.values():\n841             yield [x() for x in group]\n842 \n843     def get_siblings(self, a):\n844         \"\"\"Return all of the items joined with *a*, including itself.\"\"\"\n845         self.clean()\n846         siblings = self._mapping.get(weakref.ref(a), [weakref.ref(a)])\n847         return [x() for x in siblings]\n</original>\n<patched>\n \n    def __getstate__(self):\n        # For pickling\n        return {\n            '_mapping': {\n                weakref.ref(k, id(k)): [weakref.ref(x, id(x)) for x in v]\n                for k, v in self._mapping.items()\n            }\n        }\n\n    def __setstate__(self, state):\n        # For unpickling\n        self._mapping = {\n            weakref.ref(k, id(k)): [weakref.ref(x, id(x)) for x in v]\n            for k, v in state['_mapping'].items()\n        }\n</patched>\n```"}, "success": true, "processing_time": 355.3362727165222, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-25479", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 38158db956..f2e5c2ba94 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -255,6 +255,8 @@ def register_cmap(name=None, cmap=None, *, override_builtin=False):\n         except AttributeError as err:\n             raise ValueError(\"Arguments must include a name or a \"\n                              \"Colormap\") from err\n+    else:\n+        cmap.name = name  # Ensure the colormap's name attribute matches\n     # override_builtin is allowed here for backward compatibility\n     # this is just a shim to enable that to work privately in\n     # the global ColormapRegistry\n"}, "success": true, "processing_time": 114.11585426330566, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-26342", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 3f84250b64..031ae80926 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -747,12 +747,35 @@ class ContourSet(ContourLabeler, mcoll.Collection):\n     \"\"\"\n \n     def __init__(self, ax, *args,\n-                 levels=None, filled=False, linewidths=None, linestyles=None,\n-                 hatches=(None,), alpha=None, origin=None, extent=None,\n-                 cmap=None, colors=None, norm=None, vmin=None, vmax=None,\n-                 extend='neither', antialiased=None, nchunk=0, locator=None,\n-                 transform=None, negative_linestyles=None, clip_path=None,\n-                 **kwargs):\n+            levels=None, filled=False, linewidths=None, linestyles=None,\n+            hatches=(None,), alpha=None, origin=None, extent=None,\n+            cmap=None, colors=None, norm=None, vmin=None, vmax=None,\n+            extend='neither', antialiased=None, nchunk=0, locator=None,\n+            transform=None, negative_linestyles=None, clip_path=None,\n+            **kwargs):\n+        super().__init__(\n+            antialiaseds=antialiased,\n+            alpha=alpha,\n+            clip_path=clip_path,\n+            transform=transform,\n+        )\n+        # Add set_paths method\n+        self._paths = None\n+\n+    def set_paths(self, paths):\n+        \"\"\"\n+        Set the paths for this ContourSet.\n+\n+        Parameters\n+        ----------\n+        paths : list of Path\n+            The new paths to set.\n+        \"\"\"\n+        if len(paths) != len(self.collections):\n+            raise ValueError(\"Number of paths must match number of collections\")\n+        self._paths = paths\n+        for i, path in enumerate(paths):\n+            self.collections[i].set_paths([path])\n         \"\"\"\n         Draw contour lines or filled regions, depending on\n         whether keyword arg *filled* is ``False`` (default) or ``True``.\n"}, "success": true, "processing_time": 169.7831687927246, "attempts": 1, "error": null}
{"instance_id": "matplotlib__matplotlib-26466", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex d4922fc517..60d8926872 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -1451,15 +1451,17 @@ class OffsetFrom:\n \n \n class _AnnotationBase:\n+    import numpy as np\n+\n     def __init__(self,\n                  xy,\n                  xycoords='data',\n                  annotation_clip=None):\n-\n-        self.xy = xy\n+ \n+        self.xy = np.array(xy)\n         self.xycoords = xycoords\n         self.set_annotation_clip(annotation_clip)\n-\n+ \n         self._draggable = None\n \n     def _get_xy(self, renderer, xy, coords):\n"}, "success": true, "processing_time": 99.30786061286926, "attempts": 1, "error": null}
{"instance_id": "mwaskom__seaborn-3069", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 4f0290a4..04e4287c 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -1627,23 +1627,33 @@ class Plotter:\n \n     def _finalize_figure(self, p: Plot) -> None:\n \n-        for sub in self._subplots:\n-            ax = sub[\"ax\"]\n-            for axis in \"xy\":\n-                axis_key = sub[axis]\n-\n-                # Axis limits\n-                if axis_key in p._limits:\n-                    convert_units = getattr(ax, f\"{axis}axis\").convert_units\n-                    a, b = p._limits[axis_key]\n-                    lo = a if a is None else convert_units(a)\n-                    hi = b if b is None else convert_units(b)\n-                    if isinstance(a, str):\n-                        lo = cast(float, lo) - 0.5\n-                    if isinstance(b, str):\n-                        hi = cast(float, hi) + 0.5\n-                    ax.set(**{f\"{axis}lim\": (lo, hi)})\n-\n-        engine_default = None if p._target is not None else \"tight\"\n-        layout_engine = p._layout_spec.get(\"engine\", engine_default)\n-        set_layout_engine(self._figure, layout_engine)\n+       from seaborn._core.scales import Nominal\n+       for sub in self._subplots:\n+           ax = sub[\"ax\"]\n+           for axis in \"xy\":\n+               axis_key = sub[axis]\n+\n+               # Axis limits\n+               if axis_key in p._limits:\n+                   convert_units = getattr(ax, f\"{axis}axis\").convert_units\n+                   a, b = p._limits[axis_key]\n+                   lo = a if a is None else convert_units(a)\n+                   hi = b if b is None else convert_units(b)\n+\n+                   scale = self._scales[axis_key]\n+                   is_nominal = isinstance(scale, Nominal) or scale._infer_nominal\n+\n+                   if is_nominal:\n+                       lo -= 0.5\n+                       hi += 0.5\n+                   else:\n+                       if isinstance(a, str):\n+                           lo = cast(float, lo) - 0.5\n+                       if isinstance(b, str):\n+                           hi = cast(float, hi) + 0.5\n+\n+                   ax.set(**{f\"{axis}lim\": (lo, hi)})\n+\n+       engine_default = None if p._target is not None else \"tight\"\n+       layout_engine = p._layout_spec.get(\"engine\", engine_default)\n+       set_layout_engine(self._figure, layout_engine)\n"}, "success": true, "processing_time": 116.54375696182251, "attempts": 1, "error": null}
{"instance_id": "mwaskom__seaborn-3187", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 55874bf2..f36c8e9a 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -378,7 +378,8 @@ class ContinuousBase(Scale):\n             axis.set_view_interval(vmin, vmax)\n             locs = axis.major.locator()\n             locs = locs[(vmin <= locs) & (locs <= vmax)]\n-            labels = axis.major.formatter.format_ticks(locs)\n+            formatter = axis.major.formatter\n+            labels = formatter.format_ticks(locs)\n             new._legend = list(locs), list(labels)\n \n         return new\n"}, "success": true, "processing_time": 88.24457812309265, "attempts": 1, "error": null}
{"instance_id": "psf__requests-1921", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex a023e4ec..7301e67c 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -200,6 +200,18 @@ class Session(SessionRedirectMixin):\n         'params', 'verify', 'cert', 'prefetch', 'adapters', 'stream',\n         'trust_env', 'max_redirects']\n \n+    @property\n+    def headers(self):\n+        return self._headers\n+\n+    @headers.setter\n+    def headers(self, value):\n+        self._headers = value\n+        if self._headers is not None:\n+            for key, val in self._headers.items():\n+                if val is None:\n+                    del self._headers[key]\n+\n     def __init__(self):\n \n         #: A case-insensitive dictionary of headers to be sent on each\n"}, "success": true, "processing_time": 92.63524079322815, "attempts": 1, "error": null}
{"instance_id": "psf__requests-2931", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/requests/models.py b/requests/models.py\nindex 9c624d3c..0e5c3de7 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -444,11 +444,15 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n                 (body, content_type) = self._encode_files(files, data)\n             else:\n                 if data:\n-                    body = self._encode_params(data)\n-                    if isinstance(data, basestring) or hasattr(data, 'read'):\n+                    if isinstance(data, bytes):\n+                        body = data\n                         content_type = None\n                     else:\n-                        content_type = 'application/x-www-form-urlencoded'\n+                        body = self._encode_params(data)\n+                        if isinstance(data, basestring) or hasattr(data, 'read'):\n+                            content_type = None\n+                        else:\n+                            content_type = 'application/x-www-form-urlencoded'\n \n             self.prepare_content_length(body)\n \n"}, "success": true, "processing_time": 75.15783381462097, "attempts": 1, "error": null}
{"instance_id": "pylint-dev__pylint-6386", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/pylint/lint/base_options.py b/pylint/lint/base_options.py\nindex c793cc85a..b9d302e99 100644\n--- a/pylint/lint/base_options.py\n+++ b/pylint/lint/base_options.py\n@@ -538,8 +538,8 @@ def _make_run_options(self: Run) -> Options:\n         (\n             \"verbose\",\n             {\n-                \"action\": _DoNothingAction,\n-                \"kwargs\": {},\n+                \"action\": \"store_true\",\n+                \"default\": False,\n                 \"short\": \"v\",\n                 \"help\": \"In verbose mode, extra non-checker-related info \"\n                 \"will be displayed.\",\n"}, "success": true, "processing_time": 302.915549993515, "attempts": 1, "error": null}
{"instance_id": "pylint-dev__pylint-6528", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 53345a6b1..a8a45d1a2 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -248,6 +248,9 @@ class PyLinter(\n         \"Reports\": \"Options related to output formatting and reporting\",\n     }\n \n+    import re\n+    from typing import Pattern\n+    \n     def __init__(\n         self,\n         options: Options = (),\n@@ -530,16 +533,15 @@ class PyLinter(\n         return needed_checkers\n \n     # pylint: disable=unused-argument\n-    @staticmethod\n     def should_analyze_file(modname: str, path: str, is_argument: bool = False) -> bool:\n         \"\"\"Returns whether a module should be checked.\n-\n+        \n         This implementation returns True for all python source file, indicating\n         that all files should be linted.\n-\n+        \n         Subclasses may override this method to indicate that modules satisfying\n         certain conditions should not be linted.\n-\n+        \n         :param str modname: The name of the module to be checked.\n         :param str path: The full path to the source code of the module.\n         :param bool is_argument: Whether the file is an argument to pylint or not.\n@@ -549,6 +551,19 @@ class PyLinter(\n         \"\"\"\n         if is_argument:\n             return True\n+        \n+        # Check if the file is ignored\n+        if self.config.ignore and modname in self.config.ignore:\n+            return False\n+        if self.config.ignore_patterns and any(\n+            modname.startswith(pattern) for pattern in self.config.ignore_patterns\n+        ):\n+            return False\n+        if self.config.ignore_paths and any(\n+            path.startswith(pattern) for pattern in self.config.ignore_paths\n+        ):\n+            return False\n+        \n         return path.endswith(\".py\")\n \n     # pylint: enable=unused-argument\n"}, "success": true, "processing_time": 364.4799437522888, "attempts": 1, "error": null}
{"instance_id": "pylint-dev__pylint-6903", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex a7e5d5574..94dce4df9 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -58,7 +58,7 @@ def _query_cpu() -> int | None:\n             cpu_shares = int(file.read().rstrip())\n         # For AWS, gives correct value * 1024.\n         avail_cpu = int(cpu_shares / 1024)\n-    return avail_cpu\n+    return avail_cpu or 1\n \n \n def _cpu_count() -> int:\n"}, "success": true, "processing_time": 103.65633702278137, "attempts": 1, "error": null}
{"instance_id": "pytest-dev__pytest-10051", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a4f4214b1..25e43b5a4 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -441,6 +441,7 @@ class LogCaptureFixture:\n     def clear(self) -> None:\n         \"\"\"Reset the list of log records and the captured log text.\"\"\"\n         self.handler.reset()\n+        self._item.stash[caplog_records_key] = {\"setup\": [], \"call\": [], \"teardown\": []}\n \n     def set_level(self, level: Union[int, str], logger: Optional[str] = None) -> None:\n         \"\"\"Set the level of a logger for the duration of a test.\n"}, "success": true, "processing_time": 75.95004653930664, "attempts": 1, "error": null}
{"instance_id": "pytest-dev__pytest-10081", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/src/_pytest/runner.py b/src/_pytest/runner.py\nindex 584c3229d..4263ada58 100644\n--- a/src/_pytest/runner.py\n+++ b/src/_pytest/runner.py\n@@ -176,6 +176,8 @@ def pytest_runtest_call(item: Item) -> None:\n \n \n def pytest_runtest_teardown(item: Item, nextitem: Optional[Item]) -> None:\n+    if item._skipped_by_unittest:\n+        return\n     _update_current_test_var(item, \"teardown\")\n     item.session._setupstate.teardown_exact(nextitem)\n     _update_current_test_var(item, None)\ndiff --git a/testing/test_runner.py b/testing/test_runner.py\nindex 2e2c462d9..5962a2b33 100644\n--- a/testing/test_runner.py\n+++ b/testing/test_runner.py\n@@ -120,7 +120,7 @@ class BaseFunctionalTests:\n             \"\"\"\n             def test_func():\n                 pass\n-        \"\"\"\n+            \"\"\"\n         )\n         rep = reports[1]\n         assert rep.passed\n@@ -128,6 +128,20 @@ class BaseFunctionalTests:\n         assert rep.outcome == \"passed\"\n         assert not rep.longrepr\n \n+    def test_class_skip_teardown_not_executed(self, pytester: Pytester) -> None:\n+        reports = pytester.runitem(\n+            \"\"\"\n+            import unittest\n+            @unittest.skip(\"hello\")\n+            class TestClass(unittest.TestCase):\n+                def test_func(self):\n+                    pass\n+                def tearDown(self):\n+                    assert False, \"tearDown should not be executed\"\n+            \"\"\"\n+        )\n+        assert len(reports) == 1\n+\n     def test_failfunction(self, pytester: Pytester) -> None:\n         reports = pytester.runitem(\n             \"\"\"\n"}, "success": true, "processing_time": 204.98653507232666, "attempts": 1, "error": null}
{"instance_id": "pytest-dev__pytest-7205", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/src/_pytest/setuponly.py b/src/_pytest/setuponly.py\nindex c9cc589ff..721fccd04 100644\n--- a/src/_pytest/setuponly.py\n+++ b/src/_pytest/setuponly.py\n@@ -1,4 +1,5 @@\n import pytest\n+from py import saferepr\n \n \n def pytest_addoption(parser):\n@@ -66,7 +67,7 @@ def _show_fixture_action(fixturedef, msg):\n             tw.write(\" (fixtures used: {})\".format(\", \".join(deps)))\n \n     if hasattr(fixturedef, \"cached_param\"):\n-        tw.write(\"[{}]\".format(fixturedef.cached_param))\n+        tw.write(\"[{}]\".format(saferepr(fixturedef.cached_param)))\n \n     tw.flush()\n \n"}, "success": true, "processing_time": 96.78440189361572, "attempts": 1, "error": null}
{"instance_id": "pytest-dev__pytest-7324", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/src/_pytest/mark/expression.py b/src/_pytest/mark/expression.py\nindex 04c73411a..f789fc24c 100644\n--- a/src/_pytest/mark/expression.py\n+++ b/src/_pytest/mark/expression.py\n@@ -129,7 +129,7 @@ class Scanner:\n \n def expression(s: Scanner) -> ast.Expression:\n     if s.accept(TokenType.EOF):\n-        ret = ast.NameConstant(False)  # type: ast.expr\n+        ret = ast.Name(id=\"False\", ctx=ast.Load())\n     else:\n         ret = expr(s)\n         s.accept(TokenType.EOF, reject=True)\n"}, "success": true, "processing_time": 273.77578115463257, "attempts": 1, "error": null}
{"instance_id": "pytest-dev__pytest-7432", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..c9bdfee89 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -291,7 +291,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = \"passed\"\n                 rep.wasxfail = xfailed.reason\n-    elif (\n+    if (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n         and type(rep.longrepr) is tuple\n"}, "success": true, "processing_time": 74.6103127002716, "attempts": 1, "error": null}
{"instance_id": "pytest-dev__pytest-7982", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex f0bdb1481..64c7fec6f 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -558,7 +558,7 @@ def visit(\n     entries = sorted(os.scandir(path), key=lambda entry: entry.name)\n     yield from entries\n     for entry in entries:\n-        if entry.is_dir(follow_symlinks=False) and recurse(entry):\n+        if entry.is_dir(follow_symlinks=True) and recurse(entry):\n             yield from visit(entry.path, recurse)\n \n \n"}, "success": true, "processing_time": 42.46777582168579, "attempts": 1, "error": null}
{"instance_id": "scikit-learn__scikit-learn-12682", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex a318c957f..3a0e4b267 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -950,13 +950,16 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n         and is overridden by `alpha` in the `omp` case.\n \n     transform_alpha : float, 1. by default\n-        If `algorithm='lasso_lars'` or `algorithm='lasso_cd'`, `alpha` is the\n-        penalty applied to the L1 norm.\n-        If `algorithm='threshold'`, `alpha` is the absolute value of the\n-        threshold below which coefficients will be squashed to zero.\n-        If `algorithm='omp'`, `alpha` is the tolerance parameter: the value of\n-        the reconstruction error targeted. In this case, it overrides\n-        `n_nonzero_coefs`.\n+         If `algorithm='lasso_lars'` or `algorithm='lasso_cd'`, `alpha` is the\n+         penalty applied to the L1 norm.\n+         If `algorithm='threshold'`, `alpha` is the absolute value of the\n+         threshold below which coefficients will be squashed to zero.\n+         If `algorithm='omp'`, `alpha` is the tolerance parameter: the value of\n+         the reconstruction error targeted. In this case, it overrides\n+         `n_nonzero_coefs`.\n+\n+    transform_max_iter : int, 1000 by default\n+         Maximum number of iterations to perform if `algorithm='lasso_cd'`.\n \n     split_sign : bool, False by default\n         Whether to split the sparse feature vector into the concatenation of\n@@ -991,12 +994,13 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n \n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n-                 split_sign=False, n_jobs=None, positive_code=False):\n+                 transform_max_iter=1000, split_sign=False, n_jobs=None, \n+                 positive_code=False):\n         self._set_sparse_coding_params(dictionary.shape[0],\n-                                       transform_algorithm,\n-                                       transform_n_nonzero_coefs,\n-                                       transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+                                        transform_algorithm,\n+                                        transform_n_nonzero_coefs,\n+                                        transform_alpha, transform_max_iter,\n+                                        split_sign, n_jobs, positive_code)\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n"}, "success": true, "processing_time": 108.96344113349915, "attempts": 1, "error": null}
{"instance_id": "scikit-learn__scikit-learn-13135", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sklearn/preprocessing/_discretization.py b/sklearn/preprocessing/_discretization.py\nindex dd969c12b..ca950771b 100644\n--- a/sklearn/preprocessing/_discretization.py\n+++ b/sklearn/preprocessing/_discretization.py\n@@ -171,7 +171,7 @@ class KBinsDiscretizer(BaseEstimator, TransformerMixin):\n \n                 # 1D k-means procedure\n                 km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)\n-                centers = km.fit(column[:, None]).cluster_centers_[:, 0]\n+                centers = np.sort(km.fit(column[:, None]).cluster_centers_[:, 0])\n                 bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5\n                 bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]\n \n"}, "success": true, "processing_time": 158.09456205368042, "attempts": 1, "error": null}
{"instance_id": "scikit-learn__scikit-learn-14141", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sklearn/utils/_show_versions.py b/sklearn/utils/_show_versions.py\nindex e5d3141bf..f30e84c4d 100644\n--- a/sklearn/utils/_show_versions.py\n+++ b/sklearn/utils/_show_versions.py\n@@ -30,6 +30,10 @@ def _get_sys_info():\n     return dict(blob)\n \n \n+import importlib\n+import sys\n+import sklearn\n+\n def _get_deps_info():\n     \"\"\"Overview of the installed version of main dependencies\n \n@@ -49,6 +53,10 @@ def _get_deps_info():\n         \"pandas\",\n         \"matplotlib\",\n     ]\n+    # Check scikit-learn version and add joblib if version > 0.20\n+    sklearn_version = tuple(map(int, sklearn.__version__.split('.')))\n+    if sklearn_version > (0, 20):\n+        deps.append(\"joblib\")\n \n     def get_version(module):\n         return module.__version__\n"}, "success": true, "processing_time": 288.4058530330658, "attempts": 1, "error": null}
{"instance_id": "scikit-learn__scikit-learn-26194", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sklearn/metrics/_ranking.py b/sklearn/metrics/_ranking.py\nindex 0cdead923..c00449a03 100644\n--- a/sklearn/metrics/_ranking.py\n+++ b/sklearn/metrics/_ranking.py\n@@ -1083,7 +1083,7 @@ def roc_curve(\n     # to make sure that the curve starts at (0, 0)\n     tps = np.r_[0, tps]\n     fps = np.r_[0, fps]\n-    thresholds = np.r_[thresholds[0] + 1, thresholds]\n+    thresholds = np.r_[min(1, thresholds[0] + 1), thresholds]\n \n     if fps[-1] <= 0:\n         warnings.warn(\n"}, "success": true, "processing_time": 84.68224000930786, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-10449", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e16ab8ce5..8217fa4fb 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1552,7 +1552,10 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if sig is None:\n             return None\n \n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        if self._signature_method_name == '__init__':\n+            return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        else:\n+            return stringify_signature(sig, **kwargs)\n \n     def _find_signature(self) -> Tuple[str, str]:\n         result = super()._find_signature()\n"}, "success": true, "processing_time": 505.2490267753601, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-10673", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 35e16e623..d1cc873ee 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -81,6 +81,7 @@ class TocTree(SphinxDirective):\n \n         # glob target documents\n         all_docnames = self.env.found_docs.copy()\n+        all_docnames.update(['genindex', 'modindex', 'search'])\n         all_docnames.remove(self.env.docname)  # remove current document\n \n         ret: List[Node] = []\n"}, "success": true, "processing_time": 147.3414125442505, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-11510", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py\nindex 19f7c0a8d..70bacc7d2 100644\n--- a/sphinx/directives/other.py\n+++ b/sphinx/directives/other.py\n@@ -376,6 +376,7 @@ class Include(BaseInclude, SphinxDirective):\n         rel_filename, filename = self.env.relfn2path(self.arguments[0])\n         self.arguments[0] = filename\n         self.env.note_included(filename)\n+        self.env.read_source(filename)\n         return super().run()\n \n \n"}, "success": true, "processing_time": 709.2712707519531, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-7440", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex d820cfe5c..51eb5628d 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -428,7 +428,7 @@ class Glossary(SphinxDirective):\n \n         if 'sorted' in self.options:\n             items.sort(key=lambda x:\n-                       unicodedata.normalize('NFD', x[0][0].lower()))\n+                       unicodedata.normalize('NFD', x[0][0]))\n \n         dlist = nodes.definition_list()\n         dlist['classes'].append('glossary')\n"}, "success": true, "processing_time": 219.3538055419922, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-7454", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex f917dbdf3..59842449e 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -31,9 +31,9 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    annotation[param.name] = typing.stringify(param.annotation) if param.annotation is not None else 'None'\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                annotation['return'] = typing.stringify(sig.return_annotation) if sig.return_annotation is not None else 'None'\n     except (TypeError, ValueError):\n         pass\n \n"}, "success": true, "processing_time": 230.98855090141296, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-7748", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f8e4be999..4fe4cf72f 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1044,7 +1044,7 @@ class DocstringSignatureMixin:\n                           RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n             # no lines in docstring, no match\n             if not doclines:\n@@ -1066,10 +1066,8 @@ class DocstringSignatureMixin:\n             tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n                                                         tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n-        return result\n+            results.append((args, retann))\n+        return results[0] if results else None\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\n"}, "success": true, "processing_time": 329.53261971473694, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-7889", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ab75aaf5a..4f34781f1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1694,7 +1694,7 @@ class TypeVarDocumenter(DataDocumenter):\n         if self.object.__contravariant__:\n             attrs.append(\"contravariant=True\")\n \n-        content = StringList([_('alias of TypeVar(%s)') % \", \".join(attrs)], source='')\n+        content = StringList([_('alias of TypeVar(%s)') % \", \".join(map(str, attrs))], source='')\n         super().add_content(content)\n \n \n"}, "success": true, "processing_time": 191.58910965919495, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-8056", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex b3daa06f1..53dadc4d4 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1083,7 +1083,7 @@ class NumpyDocstring(GoogleDocstring):\n         func = super()._escape_args_and_kwargs\n \n         if \", \" in name:\n-            return \", \".join(func(param) for param in name.split(\", \"))\n+            return \", \".join(func(param.strip()) for param in name.split(\", \"))\n         else:\n             return func(name)\n \n@@ -1095,13 +1095,14 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        names = [_escape_args_and_kwargs(name) for name in _name.split(\",\")]\n+        _name = \", \".join(names)\n         _type = _convert_numpy_type_spec(\n             _type,\n             location=self._get_location(),\n             translations=self._config.napoleon_type_aliases or {},\n         )\n-\n+ \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n         indent = self._get_indent(line) + 1\n"}, "success": true, "processing_time": 223.20594882965088, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-8120", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/util/i18n.py b/sphinx/util/i18n.py\nindex 41407f4e1..8eab59313 100644\n--- a/sphinx/util/i18n.py\n+++ b/sphinx/util/i18n.py\n@@ -186,7 +186,23 @@ def find_catalog_source_files(locale_dirs: List[str], locale: str, domains: List\n             continue  # locale path is not found\n \n         for dirpath, dirnames, filenames in os.walk(base_dir, followlinks=True):\n-            filenames = [f for f in filenames if f.endswith('.po')]\n+            filenames = [f for f in filenames if f.endswith('.po') or f.endswith('.mo')]\n+            for filename in filenames:\n+                if excluded(path.join(relpath(dirpath, base_dir), filename)):\n+                    continue\n+                base = path.splitext(filename)[0]\n+                domain = relpath(path.join(dirpath, base), base_dir).replace(path.sep, SEP)\n+                if domains and domain not in domains:\n+                    continue\n+                cat = CatalogInfo(base_dir, domain, charset)\n+                if force_all or cat.is_outdated():\n+                    catalogs.add(cat)\n+\n+    # Also consider the current directory\n+    base_dir = path.join('locale', locale, 'LC_MESSAGES')\n+    if path.exists(base_dir):\n+        for dirpath, dirnames, filenames in os.walk(base_dir, followlinks=True):\n+            filenames = [f for f in filenames if f.endswith('.po') or f.endswith('.mo')]\n             for filename in filenames:\n                 if excluded(path.join(relpath(dirpath, base_dir), filename)):\n                     continue\n"}, "success": true, "processing_time": 161.1686544418335, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-8265", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex 9bafff11c..367ae3428 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -88,7 +88,10 @@ class _UnparseVisitor(ast.NodeVisitor):\n             if arg.annotation:\n                 name += \" = %s\" % self.visit(default)\n             else:\n-                name += \"=%s\" % self.visit(default)\n+                value = self.visit(default)\n+                if isinstance(default, (ast.Tuple, ast.List)) and not isinstance(default, ast.Name):\n+                    value = f\"({value})\"\n+                name += f\"={value}\"\n         return name\n \n     def visit_arguments(self, node: ast.arguments) -> str:\n"}, "success": true, "processing_time": 122.6376690864563, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-8459", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 278e47d88..e6b7fe262 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1470,7 +1470,9 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n             self.env.app.emit('autodoc-before-process-signature', init, True)\n             try:\n                 sig = inspect.signature(init, bound_method=True,\n-                                        type_aliases=self.config.autodoc_type_aliases)\n+                                     type_aliases=self.config.autodoc_type_aliases\n+                                     if self.config.autodoc_typehints != 'description'\n+                                     else None)\n                 return self.object, '__init__', sig\n             except ValueError:\n                 pass\n"}, "success": true, "processing_time": 346.29604291915894, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-8548", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ddfd2b365..cf6d84600 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -676,7 +676,13 @@ class Documenter:\n                         return False\n                     elif name in self.get_attr(cls, '__annotations__', {}):\n                         return False\n-\n+                    # Check for members inherited from parent classes\n+                    for parent_cls in cls.__bases__:\n+                        if name in parent_cls.__dict__:\n+                            return False\n+                        elif name in self.get_attr(parent_cls, '__annotations__', {}):\n+                            return False\n+    \n             return False\n \n         ret = []\n@@ -718,6 +724,20 @@ class Documenter:\n \n             has_doc = bool(doc)\n \n+            # Adjust filtering logic for inherited members\n+            if self.options.inherited_members and inspect.isclass(self.object):\n+                keep = False\n+                for cls in self.object.__mro__:\n+                    if membername in cls.__dict__:\n+                        keep = True\n+                        break\n+                    elif membername in self.get_attr(cls, '__annotations__', {}):\n+                        keep = True\n+                        break\n+                if keep:\n+                    ret.append((membername, member, isattr))\n+                continue\n+\n             metadata = extract_metadata(doc)\n             if 'private' in metadata:\n                 # consider a member private if docstring has \"private\" metadata\n"}, "success": true, "processing_time": 361.66247749328613, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-8551", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 79d7e4f46..f178a5999 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1260,8 +1260,7 @@ class PythonDomain(Domain):\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n                 if not newname:\n-                    if modname and modname + '.' + name in self.objects and \\\n-                       self.objects[modname + '.' + name].objtype in objtypes:\n+                    if modname and name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n"}, "success": true, "processing_time": 285.2272410392761, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-8593", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 76265f5be..b8b058ca2 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -662,17 +662,20 @@ class Documenter:\n     def filter_members(self, members: ObjectMembers, want_all: bool\n                        ) -> List[Tuple[str, Any, bool]]:\n         \"\"\"Filter the given member list.\n-\n+        \n         Members are skipped if\n-\n+         \n         - they are private (except if given explicitly or the private-members\n           option is set)\n         - they are special methods (except if given explicitly or the\n           special-members option is set)\n         - they are undocumented (except if the undoc-members option is set)\n-\n+        \n         The user can override the skipping decision by connecting to the\n         ``autodoc-skip-member`` event.\n+        \n+        Additionally, members can be annotated with `:meta public:` to force\n+        their inclusion.\n         \"\"\"\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n@@ -729,14 +732,13 @@ class Documenter:\n             has_doc = bool(doc)\n \n             metadata = extract_metadata(doc)\n+            isprivate = membername.startswith('_')\n             if 'private' in metadata:\n                 # consider a member private if docstring has \"private\" metadata\n                 isprivate = True\n             elif 'public' in metadata:\n                 # consider a member public if docstring has \"public\" metadata\n                 isprivate = False\n-            else:\n-                isprivate = membername.startswith('_')\n \n             keep = False\n             if safe_getattr(member, '__sphinx_mock__', None) is not None:\n"}, "success": true, "processing_time": 214.97827792167664, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-8595", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..ba822086a 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1049,8 +1049,14 @@ class ModuleDocumenter(Documenter):\n             attr_docs = self.analyzer.attr_docs\n         else:\n             attr_docs = {}\n-\n+ \n         members = {}  # type: Dict[str, ObjectMember]\n+\n+        # Check if __all__ is set to an empty list\n+        all_members = safe_getattr(self.object, '__all__', None)\n+        if all_members is not None and len(all_members) == 0:\n+            return members\n+\n         for name in dir(self.object):\n             try:\n                 value = safe_getattr(self.object, name, None)\n@@ -1058,7 +1064,7 @@ class ModuleDocumenter(Documenter):\n                 members[name] = ObjectMember(name, value, docstring=\"\\n\".join(docstring))\n             except AttributeError:\n                 continue\n-\n+ \n         # annotation only member (ex. attr: int)\n         try:\n             for name in inspect.getannotations(self.object):\n@@ -1068,7 +1074,7 @@ class ModuleDocumenter(Documenter):\n                                                  docstring=\"\\n\".join(docstring))\n         except AttributeError:\n             pass\n-\n+ \n         return members\n \n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n"}, "success": true, "processing_time": 275.2108495235443, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-8621", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/builders/html/transforms.py b/sphinx/builders/html/transforms.py\nindex c91da57e9..3782bd4a7 100644\n--- a/sphinx/builders/html/transforms.py\n+++ b/sphinx/builders/html/transforms.py\n@@ -37,26 +37,29 @@ class KeyboardTransform(SphinxPostTransform):\n     \"\"\"\n     default_priority = 400\n     builders = ('html',)\n-    pattern = re.compile(r'(-|\\+|\\^|\\s+)')\n+    pattern = re.compile(r'(-|\\+|\\^|\\s+|(?<=[-+\\^])\\s+)')\n \n     def run(self, **kwargs: Any) -> None:\n         matcher = NodeMatcher(nodes.literal, classes=[\"kbd\"])\n         for node in self.document.traverse(matcher):  # type: nodes.literal\n-            parts = self.pattern.split(node[-1].astext())\n-            if len(parts) == 1:\n+            text = node[-1].astext()\n+            if '-' not in text and '+' not in text and '^' not in text:\n                 continue\n \n             node.pop()\n+            parts = text.split()\n             while parts:\n                 key = parts.pop(0)\n                 node += nodes.literal('', key, classes=[\"kbd\"])\n \n-                try:\n-                    # key separator (ex. -, +, ^)\n+                if parts:\n                     sep = parts.pop(0)\n-                    node += nodes.Text(sep)\n-                except IndexError:\n-                    pass\n+                    if sep in ['-', '+', '^']:\n+                        node += nodes.Text(sep)\n+                    else:\n+                        # Handle the case where the separator is not -, +, or ^\n+                        # This might not be necessary given the problem description\n+                        node += nodes.Text(sep)\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\n"}, "success": true, "processing_time": 113.29464507102966, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-9281", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex a415a7074..2dd04e039 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -430,8 +430,12 @@ def safe_getattr(obj: Any, name: str, *defargs: Any) -> Any:\n         raise AttributeError(name) from exc\n \n \n+import enum\n+\n def object_description(object: Any) -> str:\n     \"\"\"A repr() implementation that returns text safe to use in reST context.\"\"\"\n+    if isinstance(object, enum.Enum):\n+        return f\"{object.__class__.__name__}.{object.name}\"\n     if isinstance(object, dict):\n         try:\n             sorted_keys = sorted(object)\n@@ -456,7 +460,7 @@ def object_description(object: Any) -> str:\n             pass  # Cannot sort frozenset values, fall back to generic repr\n         else:\n             return \"frozenset({%s})\" % \", \".join(object_description(x)\n-                                                 for x in sorted_values)\n+                                                  for x in sorted_values)\n     try:\n         s = repr(object)\n     except Exception as exc:\n"}, "success": true, "processing_time": 261.0526900291443, "attempts": 1, "error": null}
{"instance_id": "sphinx-doc__sphinx-9591", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of cross-references not working in property's type annotations, we need to analyze the provided code context and identify the necessary modifications.\n\nThe issue seems to be related to how the `handle_signature` method in the `PyProperty` class handles type annotations. Specifically, it appears that the method is not properly resolving cross-references in type annotations.\n\nUpon examining the code, we can see that the `handle_signature` method is responsible for adding a type annotation to the signature node. However, it simply adds the type annotation as a string without resolving any cross-references.\n\nTo fix this issue, we need to modify the `handle_signature` method to properly resolve cross-references in type annotations. We can do this by using the `resolve_type` method provided by the `PythonDomain` class.\n\nHere is the necessary patch:\n\n```\n<file>sphinx/domains/python.py</file>\n<original>\n862         typ = self.options.get('type')\n863         if typ:\n864             signode += addnodes.desc_annotation(typ, ': ' + typ)\n865 \n</original>\n<patched>\n862         typ = self.options.get('type')\n863         if typ:\n864             signode += addnodes.desc_annotation(self.env.domains['python'].resolve_type(typ, self.env), ': ' + typ)\n865 \n</patched>\n```\n\nThis patch modifies the `handle_signature` method to use the `resolve_type` method to resolve cross-references in type annotations. This should fix the issue and allow cross-references to work properly in property's type annotations."}, "success": true, "processing_time": 600.8417837619781, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-12096", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 1b8005e1d2..fbc8d27eeb 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -507,7 +507,11 @@ def _eval_evalf(self, prec):\n             func = getattr(mpmath, fname)\n         except (AttributeError, KeyError):\n             try:\n-                return Float(self._imp_(*self.args), prec)\n+                result = self._imp_(*self.args)\n+                if isinstance(result, Expr):\n+                    return result.evalf(prec)\n+                else:\n+                    return Float(result, prec)\n             except (AttributeError, TypeError, ValueError):\n                 return\n \n"}, "success": true, "processing_time": 170.98681473731995, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-13031", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 7ef51bc847..80d84bff95 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -456,10 +456,10 @@ def row_insert(self, pos, other):\n \n     def row_join(self, other):\n         \"\"\"Concatenates two matrices along self's last and rhs's first column\n-\n+        \n         Examples\n         ========\n-\n+        \n         >>> from sympy import zeros, ones\n         >>> M = zeros(3)\n         >>> V = ones(3, 1)\n@@ -468,17 +468,15 @@ def row_join(self, other):\n         [0, 0, 0, 1],\n         [0, 0, 0, 1],\n         [0, 0, 0, 1]])\n-\n+        \n         See Also\n         ========\n-\n+        \n         row\n         col_join\n         \"\"\"\n-        # A null matrix can always be stacked (see  #10770)\n-        if self.cols == 0 and self.rows != other.rows:\n-            return self._new(other.rows, 0, []).row_join(other)\n-\n+        if self.cols == 0:\n+            return other\n         if self.rows != other.rows:\n             raise ShapeError(\n                 \"`self` and `rhs` must have the same number of rows.\")\n"}, "success": true, "processing_time": 392.8282368183136, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-13615", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 917717bb74..a83cc39f2a 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1932,25 +1932,7 @@ def _intersect(self, other):\n \n     def _complement(self, other):\n         if isinstance(other, Interval):\n-            nums = sorted(m for m in self.args if m.is_number)\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                # Reals cannot contain elements other than numbers and symbols.\n-\n-                intervals = []  # Build up a list of intervals between the elements\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n-                for a, b in zip(nums[:-1], nums[1:]):\n-                    intervals.append(Interval(a, b, True, True))  # both open\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-\n-                if syms != []:\n-                    return Complement(Union(intervals, evaluate=False),\n-                            FiniteSet(*syms), evaluate=False)\n-                else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n-\n+            return Complement(other, FiniteSet(*self.args), evaluate=False)\n         elif isinstance(other, FiniteSet):\n             unk = []\n             for i in self:\n@@ -1966,7 +1948,6 @@ def _complement(self, other):\n                 if c is not S.true:\n                     not_true.append(i)\n             return Complement(FiniteSet(*not_true), unk)\n-\n         return Set._complement(self, other)\n \n \n"}, "success": true, "processing_time": 164.90769577026367, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-13878", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/stats/crv.py b/sympy/stats/crv.py\nindex 6efd5571e8..1e3a1c7297 100644\n--- a/sympy/stats/crv.py\n+++ b/sympy/stats/crv.py\n@@ -143,6 +143,9 @@ class ContinuousDistribution(Basic):\n     def __call__(self, *args):\n         return self.pdf(*args)\n \n+    def _cdf(self, x):\n+        return Integral(self.pdf(var), (var, self.set.inf, x))\n+\n \n class SingleContinuousDistribution(ContinuousDistribution, NamedArgsMixin):\n     \"\"\" Continuous distribution of a single variable\n"}, "success": true, "processing_time": 725.0956490039825, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-13974", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 9dd10d219e..43a92609c4 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -313,10 +313,14 @@ def tensor_product_simp_Mul(e):\n     # TensorProducts, like an Add, Pow, Commutator, etc.\n     # TODO: This only works for the equivalent of single Qbit gates.\n     if not isinstance(e, Mul):\n+        if isinstance(e, Pow) and isinstance(e.base, TensorProduct):\n+            return tensor_product_simp_Mul(e.base) ** e.exp\n         return e\n     c_part, nc_part = e.args_cnc()\n     n_nc = len(nc_part)\n     if n_nc == 0 or n_nc == 1:\n+        if n_nc == 1 and isinstance(nc_part[0], Pow) and isinstance(nc_part[0].base, TensorProduct):\n+            return tensor_product_simp_Mul(nc_part[0].base) ** nc_part[0].exp\n         return e\n     elif e.has(TensorProduct):\n         current = nc_part[0]\n@@ -334,6 +338,9 @@ def tensor_product_simp_Mul(e):\n                     )\n                 for i in range(len(new_args)):\n                     new_args[i] = new_args[i] * next.args[i]\n+            elif isinstance(next, Pow) and isinstance(next.base, TensorProduct):\n+                for i in range(len(new_args)):\n+                    new_args[i] = new_args[i] * (next.base.args[i] ** next.exp)\n             else:\n                 # this won't quite work as we don't want next in the\n                 # TensorProduct\n@@ -382,7 +389,11 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base = tensor_product_simp(e.base)\n+        if isinstance(base, TensorProduct):\n+            return tensor_product_simp_Mul(base ** e.exp)\n+        else:\n+            return base ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n"}, "success": true, "processing_time": 373.56881880760193, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-14531", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex cc1d19fcce..376f42584f 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -215,6 +215,9 @@ def _print_LatticeOp(self, expr):\n \n     def _print_Limit(self, expr):\n         e, z, z0, dir = expr.args\n+        e = self._print(e)\n+        z = self._print(z)\n+        z0 = self._print(z0)\n         if str(dir) == \"+\":\n             return \"Limit(%s, %s, %s)\" % (e, z, z0)\n         else:\n"}, "success": true, "processing_time": 465.8011281490326, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-15345", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of `mathematica_code` giving wrong output with `Max`, we need to understand how the `mathematica_code` function works and how it handles different functions, particularly `Max`. The `mathematica_code` function is defined in the `sympy/printing/mathematica.py` file and utilizes a dictionary called `known_functions` to map SymPy functions to their Mathematica counterparts.\n\nThe issue arises because the `Max` function in SymPy is not explicitly handled in the `known_functions` dictionary. When `mathematica_code` encounters a `Max` function, it does not know how to convert it into Mathematica code correctly, leading to an incorrect output.\n\nThe solution involves adding `max` (or `Max`) to the `known_functions` dictionary with a mapping that preserves the order of its arguments, as Mathematica expects. This can be achieved by adding an entry for `max` or `Max` in the `known_functions` dictionary.\n\nHere is the necessary patch:\n\n```\n<file>sympy/printing/mathematica.py</file>\n<original>\n11 known_functions = {\n12     \"exp\": [(lambda x: True, \"Exp\")],\n13     \"log\": [(lambda x: True, \"Log\")],\n14     \"sin\": [(lambda x: True, \"Sin\")],\n15     \"cos\": [(lambda x: True, \"Cos\")],\n16     \"tan\": [(lambda x: True, \"Tan\")],\n17     \"cot\": [(lambda x: True, \"Cot\")],\n18     \"asin\": [(lambda x: True, \"ArcSin\")],\n19     \"acos\": [(lambda x: True, \"ArcCos\")],\n20     \"atan\": [(lambda x: True, \"ArcTan\")],\n21     \"sinh\": [(lambda x: True, \"Sinh\")],\n22     \"cosh\": [(lambda x: True, \"Cosh\")],\n23     \"tanh\": [(lambda x: True, \"Tanh\")],\n24     \"coth\": [(lambda x: True, \"Coth\")],\n25     \"sech\": [(lambda x: True, \"Sech\")],\n26     \"csch\": [(lambda x: True, \"Csch\")],\n27     \"asinh\": [(lambda x: True, \"ArcSinh\")],\n28     \"acosh\": [(lambda x: True, \"ArcCosh\")],\n29     \"atanh\": [(lambda x: True, \"ArcTanh\")],\n30     \"acoth\": [(lambda x: True, \"ArcCoth\")],\n31     \"asech\": [(lambda x: True, \"ArcSech\")],\n32     \"acsch\": [(lambda x: True, \"ArcCsch\")],\n33     \"conjugate\": [(lambda x: True, \"Conjugate\")],\n34 \n35 }\n</original>\n<patched>\n11 known_functions = {\n12     \"exp\": [(lambda x: True, \"Exp\")],\n13     \"log\": [(lambda x: True, \"Log\")],\n14     \"sin\": [(lambda x: True, \"Sin\")],\n15     \"cos\": [(lambda x: True, \"Cos\")],\n16     \"tan\": [(lambda x: True, \"Tan\")],\n17     \"cot\": [(lambda x: True, \"Cot\")],\n18     \"asin\": [(lambda x: True, \"ArcSin\")],\n19     \"acos\": [(lambda x: True, \"ArcCos\")],\n20     \"atan\": [(lambda x: True, \"ArcTan\")],\n21     \"sinh\": [(lambda x: True, \"Sinh\")],\n22     \"cosh\": [(lambda x: True, \"Cosh\")],\n23     \"tanh\": [(lambda x: True, \"Tanh\")],\n24     \"coth\": [(lambda x: True, \"Coth\")],\n25     \"sech\": [(lambda x: True, \"Sech\")],\n26     \"csch\": [(lambda x: True, \"Csch\")],\n27     \"asinh\": [(lambda x: True, \"ArcSinh\")],\n28     \"acosh\": [(lambda x: True, \"ArcCosh\")],\n29     \"atanh\": [(lambda x: True, \"ArcTanh\")],\n30     \"acoth\": [(lambda x: True, \"ArcCoth\")],\n31     \"asech\": [(lambda x: True, \"ArcSech\")],\n32     \"acsch\": [(lambda x: True, \"ArcCsch\")],\n33     \"conjugate\": [(lambda x: True, \"Conjugate\")],\n34     \"max\": [(lambda *x: True, \"Max\")],\n35 }\n</patched>\n```\n\nThis modification adds `max` to the `known_functions` dictionary, mapping it to `Max` in Mathematica, which should resolve the issue with `mathematica_code` and"}, "success": true, "processing_time": 522.4428474903107, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-15349", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To solve this task, let's analyze the given issue and the provided code context. The issue is related to the `Quaternion.to_rotation_matrix()` method, which is supposed to return the equivalent rotation transformation matrix of the quaternion. The problem arises when the method is called with a specific quaternion, and the resulting rotation matrix has an incorrect sign.\n\nThe given code context includes the implementation of the `Quaternion` class, which provides basic quaternion operations. The `to_rotation_matrix` method is of particular interest, as it is the source of the issue.\n\nUpon examining the `to_rotation_matrix` method, we notice that the calculation of the rotation matrix elements involves the quaternion's components (`q.a`, `q.b`, `q.c`, `q.d`) and the inverse of the quaternion's norm squared (`s = q.norm()**-2`). The method returns a 3x3 rotation matrix if no point is provided, or a 4x4 transformation matrix if a point is passed as an argument.\n\nThe issue seems to be related to the signs of the terms in the rotation matrix. Specifically, the example provided in the issue description shows that one of the `sin(x)` functions should be negative.\n\nLet's focus on the relevant part of the code:\n```python\nm10 = 2*s*(q.b*q.c + q.d*q.a)\nm21 = 2*s*(q.c*q.d + q.b*q.a)\n```\n\nTo fix the issue, we need to adjust the signs of the terms in the rotation matrix. Based on the quaternion rotation formula, the correct calculation for `m10` and `m21` should be:\n```python\nm10 = 2*s*(q.b*q.c - q.d*q.a)\nm21 = 2*s*(q.c*q.d - q.b*q.a)\n```\n\nHere is the patch:\n```\n<file>sympy/algebras/quaternion.py</file>\n<original>\n530         m10 = 2*s*(q.b*q.c + q.d*q.a)\n531         m11 = 1 - 2*s*(q.b**2 + q.d**2)\n532         m12 = 2*s*(q.c*q.d + q.b*q.a)\n533 \n534         m20 = 2*s*(q.b*q.d - q.c*q.a)\n535         m21 = 2*s*(q.c*q.d + q.b*q.a)\n536         m22 = 1 - 2*s*(q.b**2 + q.c**2)\n</original>\n</patched>\n<patched>\n530         m10 = 2*s*(q.b*q.c - q.d*q.a)\n531         m11 = 1 - 2*s*(q.b**2 + q.d**2)\n532         m12 = 2*s*(q.c*q.d + q.b*q.a)\n533 \n534         m20 = 2*s*(q.b*q.d - q.c*q.a)\n535         m21 = 2*s*(q.c*q.d - q.b*q.a)\n536         m22 = 1 - 2*s*(q.b**2 + q.c**2)\n</patched>\n```"}, "success": true, "processing_time": 472.27475786209106, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-15599", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex eae25630cc..b1ff86743b 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -123,9 +123,11 @@ def doit(p, q):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n \n-            if mod_l and all(inner.args[1] == q for inner in mod_l):\n+            was = non_mod_l[:]\n+            non_mod_l = [cls(x, q) for x in non_mod_l]\n+            changed = was != non_mod_l\n+            if changed or mod_l and all(inner.args[1] == q for inner in mod_l):\n                 # finding distributive term\n-                non_mod_l = [cls(x, q) for x in non_mod_l]\n                 mod = []\n                 non_mod = []\n                 for j in non_mod_l:\n"}, "success": true, "processing_time": 237.39064145088196, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-15809", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py\nindex 5f9fe73c5c..f4294571f8 100644\n--- a/sympy/functions/elementary/miscellaneous.py\n+++ b/sympy/functions/elementary/miscellaneous.py\n@@ -340,7 +340,7 @@ def real_root(arg, n=None, evaluate=None):\n class MinMaxBase(Expr, LatticeOp):\n     def __new__(cls, *args, **assumptions):\n         if not args:\n-            raise ValueError(\"The Max/Min functions must have arguments.\")\n+            return cls.identity\n \n         args = (sympify(arg) for arg in args)\n \n"}, "success": true, "processing_time": 86.4567437171936, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-16597", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex aa717b97ef..c8b87a56d9 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1919,6 +1919,7 @@ class Integer(Rational):\n     q = 1\n     is_integer = True\n     is_number = True\n+    is_finite = True\n \n     is_Integer = True\n \n"}, "success": true, "processing_time": 730.436418056488, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-16766", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex a3f0310735..a284707d60 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -357,6 +357,10 @@ def _print_Not(self, expr):\n         PREC = precedence(expr)\n         return self._operators['not'] + self.parenthesize(expr.args[0], PREC)\n \n+    def _print_Indexed(self, expr):\n+        base, *index = expr.args\n+        return \"{}[{}]\".format(str(base), \", \".join([self._print(ind) for ind in index]))\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\n"}, "success": true, "processing_time": 138.79650139808655, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-17139", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/simplify/fu.py b/sympy/simplify/fu.py\nindex ad1130ef96..1e21801cec 100644\n--- a/sympy/simplify/fu.py\n+++ b/sympy/simplify/fu.py\n@@ -501,6 +501,9 @@ def _f(rv):\n         if not (rv.is_Pow and rv.base.func == f):\n             return rv\n \n+        if not rv.exp.is_real:\n+            return rv\n+\n         if (rv.exp < 0) == True:\n             return rv\n         if (rv.exp > max) == True:\n"}, "success": true, "processing_time": 156.17227578163147, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-17655", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..90765bb856 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -249,35 +249,38 @@ def __len__(self):\n \n     def __mul__(self, factor):\n         \"\"\"Multiply point's coordinates by a factor.\n-\n+ \n         Notes\n         =====\n-\n+ \n         >>> from sympy.geometry.point import Point\n-\n+ \n         When multiplying a Point by a floating point number,\n         the coordinates of the Point will be changed to Floats:\n-\n+ \n         >>> Point(1, 2)*0.1\n         Point2D(0.1, 0.2)\n-\n+ \n         If this is not desired, the `scale` method can be used or\n         else only multiply or divide by integers:\n-\n+ \n         >>> Point(1, 2).scale(1.1, 1.1)\n         Point2D(11/10, 11/5)\n         >>> Point(1, 2)*11/10\n         Point2D(11/10, 11/5)\n-\n+ \n         See Also\n         ========\n-\n+ \n         sympy.geometry.point.Point.scale\n         \"\"\"\n         factor = sympify(factor)\n         coords = [simplify(x*factor) for x in self.args]\n         return Point(coords, evaluate=False)\n \n+    def __rmul__(self, factor):\n+        return self.__mul__(factor)\n+\n     def __neg__(self):\n         \"\"\"Negate the point.\"\"\"\n         coords = [-x for x in self.args]\n"}, "success": true, "processing_time": 238.81730961799622, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-18211", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/core/relational.py b/sympy/core/relational.py\nindex f581bfa3c4..2346852105 100644\n--- a/sympy/core/relational.py\n+++ b/sympy/core/relational.py\n@@ -387,12 +387,11 @@ def __nonzero__(self):\n     __bool__ = __nonzero__\n \n     def _eval_as_set(self):\n-        # self is univariate and periodicity(self, x) in (0, None)\n-        from sympy.solvers.inequalities import solve_univariate_inequality\n+        from sympy.solvers.solveset import solveset\n         syms = self.free_symbols\n         assert len(syms) == 1\n         x = syms.pop()\n-        return solve_univariate_inequality(self, x, relational=False)\n+        return solveset(self, x)\n \n     @property\n     def binary_symbols(self):\ndiff --git a/sympy/solvers/solveset.py b/sympy/solvers/solveset.py\nindex 445be3e0e8..c8e766ae3f 100644\n--- a/sympy/solvers/solveset.py\n+++ b/sympy/solvers/solveset.py\n@@ -940,11 +940,7 @@ def _solveset(f, symbol, domain, _check=False):\n                 Inequalities in the complex domain are\n                 not supported. Try the real domain by\n                 setting domain=S.Reals'''))\n-        try:\n-            result = solve_univariate_inequality(\n-            f, symbol, domain=domain, relational=False)\n-        except NotImplementedError:\n-            result = ConditionSet(symbol, f, domain)\n+        result = ConditionSet(symbol, f, domain)\n         return result\n     elif _is_modular(f, symbol):\n         result = _solve_modular(f, symbol, domain)\n"}, "success": true, "processing_time": 132.2587649822235, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-19495", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 118eda6f77..c5f5ce6d51 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -243,8 +243,8 @@ def _eval_subs(self, old, new):\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n         if cond is S.true:\n-            return ConditionSet(new, Contains(new, base), base)\n-        return self.func(self.sym, cond, base)\n+            return self.func(new if isinstance(new, Symbol) else sym, cond, base)\n+        return self.func(sym, cond, base)\n \n     def dummy_eq(self, other, symbol=None):\n         if not isinstance(other, self.func):\n"}, "success": true, "processing_time": 171.26193070411682, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-19637", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex a3f1ce2851..ac21345f71 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -513,7 +513,7 @@ def kernS(s):\n             while kern in s:\n                 kern += choice(string.ascii_letters + string.digits)\n             s = s.replace(' ', kern)\n-        hit = kern in s\n+        hit = False if ' ' not in s else kern in s\n \n     for i in range(2):\n         try:\n"}, "success": true, "processing_time": 246.24450182914734, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-19954", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex de94ddabb4..3d8e821b16 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2198,14 +2198,15 @@ def _number_blocks(blocks):\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        to_remove.append(i)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n                 # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                for i in sorted(to_remove, reverse=True):\n+                    del num_blocks[i], blocks[i]\n+                    del rep_blocks[i]\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n"}, "success": true, "processing_time": 192.90489673614502, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-20154", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex dd36dea304..cf7e141258 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -1802,9 +1802,9 @@ def partitions(n, m=None, k=None, size=False):\n         keys.append(r)\n     room = m - q - bool(r)\n     if size:\n-        yield sum(ms.values()), ms\n+        yield sum(ms.values()), ms.copy()\n     else:\n-        yield ms\n+        yield ms.copy()\n \n     while keys != [1]:\n         # Reuse any 1's.\n"}, "success": true, "processing_time": 94.68405532836914, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-20916", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/printing/conventions.py b/sympy/printing/conventions.py\nindex 9a3be6bbe9..f9f555f100 100644\n--- a/sympy/printing/conventions.py\n+++ b/sympy/printing/conventions.py\n@@ -66,6 +66,9 @@ def split_super_sub(text):\n     if m:\n         name, sub = m.groups()\n         subs.insert(0, sub)\n+    if name and name[-1].isdigit():\n+        subs.insert(0, name[-1])\n+        name = name[:-1]\n \n     return name, supers, subs\n \n"}, "success": true, "processing_time": 192.15100359916687, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-21612", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/parsing/latex/_parse_latex_antlr.py b/sympy/parsing/latex/_parse_latex_antlr.py\nindex 2e4a45ad20..2aaebaaa1f 100644\n--- a/sympy/parsing/latex/_parse_latex_antlr.py\n+++ b/sympy/parsing/latex/_parse_latex_antlr.py\n@@ -139,7 +139,7 @@ def convert_mp(mp):\n         return sympy.Mul(lh, rh, evaluate=False)\n     elif mp.DIV() or mp.CMD_DIV() or mp.COLON():\n         lh = convert_mp(mp_left)\n-        rh = convert_mp(mp_right)\n+        rh = convert_expr(mp_right)\n         return sympy.Mul(lh, sympy.Pow(rh, -1, evaluate=False), evaluate=False)\n     else:\n         if hasattr(mp, 'unary'):\n"}, "success": true, "processing_time": 378.8652856349945, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-21847", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403307..e0aae34beb 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -127,7 +127,8 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                total_degree = sum(powers.values())\n+                if min_degree <= total_degree <= max_degree:\n                     monomials_list_comm.append(Mul(*item))\n             yield from set(monomials_list_comm)\n         else:\n@@ -139,7 +140,8 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                total_degree = sum(powers.values())\n+                if min_degree <= total_degree <= max_degree:\n                     monomials_list_non_comm.append(Mul(*item))\n             yield from set(monomials_list_non_comm)\n     else:\n"}, "success": true, "processing_time": 129.03755402565002, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-22080", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 0ed6ce2eb1..faee6d337a 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -812,7 +812,10 @@ def _lambdifygenerated(x):\n         elif _module_present('sympy', namespaces):\n             from sympy.printing.pycode import SymPyPrinter as Printer # type: ignore\n         else:\n-            from sympy.printing.pycode import PythonCodePrinter as Printer # type: ignore\n+            if modules == []:\n+                from sympy.printing.lambdarepr import LambdaPrinter as Printer # type: ignore\n+            else:\n+                from sympy.printing.pycode import PythonCodePrinter as Printer # type: ignore\n         user_functions = {}\n         for m in namespaces[::-1]:\n             if isinstance(m, dict):\n"}, "success": true, "processing_time": 322.680979013443, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-22914", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 3a72ab606c..7d5ca243df 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -470,6 +470,12 @@ def _print_Symbol(self, expr):\n     _print_fresnelc = CodePrinter._print_not_supported\n     _print_fresnels = CodePrinter._print_not_supported\n \n+    def _print_Min(self, expr):\n+        return \"min({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n+\n+    def _print_Max(self, expr):\n+        return \"max({})\".format(\", \".join(self._print(arg) for arg in expr.args))\n+\n \n for k in PythonCodePrinter._kf:\n     setattr(PythonCodePrinter, '_print_%s' % k, _print_known_func)\n"}, "success": true, "processing_time": 247.51596117019653, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-23262", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 1877c3f92a..faf7fe9f8b 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -528,6 +528,12 @@ def _print_IndexedBase(self, expr):\n \n class PythonCodePrinter(AbstractPythonCodePrinter):\n \n+    def _print_Tuple(self, expr):\n+        if len(expr) == 1:\n+            return f\"({expr[0]},)\"\n+        else:\n+            return f\"({', '.join(map(str, expr))})\"\n+\n     def _print_sign(self, e):\n         return '(0.0 if {e} == 0 else {f}(1, {e}))'.format(\n             f=self._module_format('math.copysign'), e=self._print(e.args[0]))\n"}, "success": true, "processing_time": 725.1275389194489, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-23824", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/physics/hep/gamma_matrices.py b/sympy/physics/hep/gamma_matrices.py\nindex 23284e4a92..072d3eec15 100644\n--- a/sympy/physics/hep/gamma_matrices.py\n+++ b/sympy/physics/hep/gamma_matrices.py\n@@ -694,7 +694,7 @@ def kahane_simplify(expression):\n \n     # If `first_dum_pos` is not zero, it means that there are trailing free gamma\n     # matrices in front of `expression`, so multiply by them:\n-    for i in range(0, first_dum_pos):\n+    for i in range(first_dum_pos):\n         [ri.insert(0, free_pos[i]) for ri in resulting_indices]\n \n     resulting_expr = S.Zero\n"}, "success": true, "processing_time": 139.12807035446167, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-24443", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex bb7bdf32ba..71e852b6c0 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -333,8 +333,11 @@ def _image(r):\n             # both indices\n             while i < len(r):\n                 power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n+                if isinstance(domain, PermutationGroup):\n+                    if r[i] in gens:\n+                        s = domain.generators[gens.index(r[i])]\n+                    elif r[i].inverse in gens:\n+                        s = domain.generators[gens.index(r[i].inverse)].inverse\n                 else:\n                     s = r[i]\n                 if s in images:\n"}, "success": true, "processing_time": 103.47428226470947, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-24539", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 12bd2fc920..6b63c30248 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -616,12 +616,12 @@ def set_ring(self, new_ring):\n             return new_ring.from_dict(self, self.ring.domain)\n \n     def as_expr(self, *symbols):\n-        if symbols and len(symbols) != self.ring.ngens:\n-            raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))\n+        if symbols:\n+            if len(symbols) != self.ring.ngens:\n+                raise ValueError(\"The number of symbols provided does not match the number of generators in the polynomial ring.\")\n+            return expr_from_dict(self.as_expr_dict(), *symbols)\n         else:\n-            symbols = self.ring.symbols\n-\n-        return expr_from_dict(self.as_expr_dict(), *symbols)\n+            return expr_from_dict(self.as_expr_dict(), *self.ring.symbols)\n \n     def as_expr_dict(self):\n         to_sympy = self.ring.domain.to_sympy\n"}, "success": true, "processing_time": 173.07584285736084, "attempts": 1, "error": null}
{"instance_id": "sympy__sympy-24661", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 52711d1324..0e4089f47e 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1186,6 +1186,29 @@ def visit_BinOp(self, node):\n             return new_node\n         return node\n \n+    def visit_Compare(self, node):\n+        if len(node.ops) == 1:\n+            op = node.ops[0]\n+            if isinstance(op, (ast.Lt, ast.LtE, ast.Gt, ast.GtE, ast.Eq, ast.NotEq)):\n+                sympy_class = {\n+                    ast.Lt: 'Lt',\n+                    ast.LtE: 'Le',\n+                    ast.Gt: 'Gt',\n+                    ast.GtE: 'Ge',\n+                    ast.Eq: 'Eq',\n+                    ast.NotEq: 'Ne'\n+                }[type(op)]\n+                left = self.visit(node.left)\n+                right = self.visit(node.comparators[0])\n+                return ast.Call(\n+                    func=ast.Name(id=sympy_class, ctx=ast.Load()),\n+                    args=[left, right],\n+                    keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],\n+                    starargs=None,\n+                    kwargs=None\n+                )\n+        return self.generic_visit(node)\n+\n     def visit_Call(self, node):\n         new_node = self.generic_visit(node)\n         if isinstance(node.func, ast.Name) and node.func.id in self.functions:\n"}, "success": true, "processing_time": 189.0051875114441, "attempts": 1, "error": null}
{"instance_id": "ytdl-org__youtube-dl-32987", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of YouTube's webpage layout change causing the regex to fail in extracting the n function name, we need to update the regular expression in the `_extract_n_function_name` method to match the new pattern used by YouTube.\n\nThe issue arises from the fact that YouTube has changed the way it defines the `n` function, making the current regex pattern obsolete. The new pattern involves a different structure for defining the function, which the current code does not account for.\n\nUpon examining the code and the issue at hand, it becomes clear that the primary location that needs modification is the `_extract_n_function_name` method within the `youtube.py` file. This method is responsible for extracting the n function name from the JavaScript code using a regular expression.\n\nHere is the necessary modification:\n\n```\n<file>youtube_dl/extractor/youtube.py</file>\n<original>\n                 r'''(?x)\n                 \\((?:[\\w$()\\s]+,)*?\\s*      # (\n                 (?P<b>[a-z])\\s*=\\s*         # b=\n                 (?:\n                     (?:                     # expect ,c=a.get(b) (etc)\n                         String\\s*\\.\\s*fromCharCode\\s*\\(\\s*110\\s*\\)|\n                         \"n+\"\\[\\s*\\+?s*[\\w$.]+\\s*]\n                     )\\s*(?:,[\\w$()\\s]+(?=,))*|\n                        (?P<old>[\\w$]+)      # a (old[er])\n                    )\\s*\n                    (?(old)\n                                             # b.get(\"n\")\n                        (?:\\.\\s*[\\w$]+\\s*|\\[\\s*[\\w$]+\\s*]\\s*)*?\n                        (?:\\.\\s*n|\\[\\s*\"n\"\\s*]|\\.\\s*get\\s*\\(\\s*\"n\"\\s*\\))\n                        |                    # ,c=a.get(b)\n                        ,\\s*(?P<c>[a-z])\\s*=\\s*[a-z]\\s*\n                        (?:\\.\\s*[\\w$]+\\s*|\\[\\s*[\\w$]+\\s*]\\s*)*?\n                        (?:\\[\\s*(?P=b)\\s*]|\\.\\s*get\\s*\\(\\s*(?P=b)\\s*\\))\n                    )\n                    \\s*(?:\\|\\|\\s*null\\s*)?(?:\\)\\s*)?&&\\s*(?:\\(\\s*)?\n                (?(c)(?P=c)|(?P=b))\\s*=\\s*   # [c|b]=\n                                             # nfunc|nfunc[idx]\n                    (?P<nfunc>[a-zA-Z_$][\\w$]*)(?:\\s*\\[(?P<idx>\\d+)\\])?\\s*\\(\\s*[\\w$]+\\s*\\)\n                ''', jscode, 'Initial JS player n function name', group=('nfunc', 'idx'),\n                default=(None, None))\n            # thx bashonly: yt-dlp/yt-dlp/pull/10611\n            if not func_name:\n                self.report_warning('Falling back to generic n function search')\n                return self._search_regex(\n                    r'''(?xs)\n                    (?:(?<=[^\\w$])|^)       # instead of \\b, which ignores $\n                    (?P<name>(?!\\d)[a-zA-Z\\d_$]+)\\s*=\\s*function\\((?!\\d)[a-zA-Z\\d_$]+\\)\n                    \\s*\\{(?:(?!};).)+?[\"']enhanced_except_\n                ''', jscode, 'Initial JS player n function name', group='name')\n</original>\n<patched>\n                 r'''(?x)\n                 \\((?:[\\w$()\\s]+,)*?\\s*      # (\n                 (?P<b>[a-z])\\s*=\\s*         # b=\n                 (?:\n                     (?:                     # expect ,c=a.get(b) (etc)\n                         String\\s*\\.\\s*fromCharCode\\s*\\(\\s*110\\s*\\)|\n                         \"n+\"\\[\\s*\\+?s*[\\w$.]+\\s*]\n                     )\\s*(?:,[\\w$()\\s]+(?=,))*|\n                        (?P<old>[\\w$]+)      # a (old[er])\n                    )\\s*\n                    (?(old)\n                                             # b.get(\"n\")\n                        (?:\\.\\s*[\\w$]+\\s*|\\[\\s*[\\w$]+\\s*]\\s*)*?\n                        (?:\\.\\s*n|\\[\\s*\"n\"\\s*]|\\.\\s*get\\s*\\(\\s*\"n\"\\s*\\))\n                        |                    # ,c=a.get(b)\n                        ,\\s*(?P<c>[a-z])\\s*=\\s*[a-z]\\s*\n                        (?:\\.\\s*[\\w$]+\\s"}, "success": true, "processing_time": 870.3792684078217, "attempts": 1, "error": null}
{"instance_id": "ytdl-org__youtube-dl-32845", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/youtube_dl/extractor/youtube.py b/youtube_dl/extractor/youtube.py\nindex 90c16e172..155376063 100644\n--- a/youtube_dl/extractor/youtube.py\n+++ b/youtube_dl/extractor/youtube.py\n@@ -1658,7 +1658,7 @@ class YoutubeIE(YoutubeBaseInfoExtractor):\n \n     def _extract_n_function_name(self, jscode):\n         func_name, idx = self._search_regex(\n-            r'\\.get\\(\"n\"\\)\\)&&\\(b=(?P<nfunc>[a-zA-Z_$][\\w$]*)(?:\\[(?P<idx>\\d+)\\])?\\([\\w$]+\\)',\n+            r'(?:\\.get\\(\"n\"\\)\\)|^\\s*if\\(b\\)\\)&&\\(b=(?P<nfunc>[a-zA-Z_$][\\w$]*)(?:\\[(?P<idx>\\d+)\\])?\\([\\w$]+\\)',\n             jscode, 'Initial JS player n function name', group=('nfunc', 'idx'))\n         if not idx:\n             return func_name\n"}, "success": true, "processing_time": 307.05708146095276, "attempts": 1, "error": null}
{"instance_id": "ytdl-org__youtube-dl-32741", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/youtube_dl/YoutubeDL.py b/youtube_dl/YoutubeDL.py\nindex 6f2aba5ac..5aeeba1cd 100755\n--- a/youtube_dl/YoutubeDL.py\n+++ b/youtube_dl/YoutubeDL.py\n@@ -2042,7 +2042,11 @@ class YoutubeDL(object):\n             try:\n                 def checked_get_suitable_downloader(info_dict, params):\n                     ed_args = params.get('external_downloader_args')\n+                    ffmpeg_location = params.get('ffmpeg_location')\n                     dler = get_suitable_downloader(info_dict, params)\n+                    if dler == 'ffmpeg':\n+                        if ffmpeg_location:\n+                            params['ffmpeg_location'] = ffmpeg_location\n                     if ed_args and not params.get('external_downloader_args'):\n                         # external_downloader_args was cleared because external_downloader was rejected\n                         self.report_warning('Requested external downloader cannot be used: '\ndiff --git a/youtube_dl/postprocessor/ffmpeg.py b/youtube_dl/postprocessor/ffmpeg.py\nindex 801160e6c..f0cbc16c6 100644\n--- a/youtube_dl/postprocessor/ffmpeg.py\n+++ b/youtube_dl/postprocessor/ffmpeg.py\n@@ -123,6 +123,10 @@ class FFmpegPostProcessor(PostProcessor):\n                     (p, os.path.join(location, p)) for p in programs)\n                 self._versions = dict(\n                     (p, get_ffmpeg_version(self._paths[p])) for p in programs)\n+            else:\n+                self._versions = dict(\n+                    (p, get_ffmpeg_version(p)) for p in programs)\n+                self._paths = dict((p, p) for p in programs)\n         if self._versions is None:\n             self._versions = dict(\n                 (p, get_ffmpeg_version(p)) for p in programs)\n"}, "success": true, "processing_time": 140.8259654045105, "attempts": 1, "error": null}
{"instance_id": "ytdl-org__youtube-dl-32725", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/youtube_dl/extractor/filemoon.py b/youtube_dl/extractor/filemoon.py\nindex 654df9b69..6130c7dce 100644\n--- a/youtube_dl/extractor/filemoon.py\n+++ b/youtube_dl/extractor/filemoon.py\n@@ -31,10 +31,14 @@ class FileMoonIE(InfoExtractor):\n         unpacked = decode_packed_codes(packed)\n         jwplayer_sources = self._parse_json(\n             self._search_regex(\n-                r'(?s)player\\s*\\.\\s*setup\\s*\\(\\s*\\{\\s*sources\\s*:\\s*(.*?])', unpacked, 'jwplayer sources'),\n+                r'(?s)player\\.setup\\(\\{\\s*sources:\\s*(.*?)\\s*\\)', unpacked, 'jwplayer sources'),\n             video_id, transform_source=js_to_json)\n \n-        formats = self._parse_jwplayer_formats(jwplayer_sources, video_id)\n+        try:\n+            formats = self._parse_jwplayer_formats(jwplayer_sources, video_id)\n+        except ExtractorError:\n+            # Handle the error and provide a fallback or an error message\n+            pass\n \n         return {\n             'id': video_id,\n"}, "success": true, "processing_time": 343.2641339302063, "attempts": 1, "error": null}
{"instance_id": "ytdl-org__youtube-dl-31235", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/youtube_dl/extractor/neteasemusic.py b/youtube_dl/extractor/neteasemusic.py\nindex 978a05841..846b14f73 100644\n--- a/youtube_dl/extractor/neteasemusic.py\n+++ b/youtube_dl/extractor/neteasemusic.py\n@@ -25,15 +25,13 @@ class NetEaseMusicBaseIE(InfoExtractor):\n \n     @classmethod\n     def _encrypt(cls, dfsid):\n-        salt_bytes = bytearray(cls._NETEASE_SALT.encode('utf-8'))\n-        string_bytes = bytearray(compat_str(dfsid).encode('ascii'))\n-        salt_len = len(salt_bytes)\n-        for i in range(len(string_bytes)):\n-            string_bytes[i] = string_bytes[i] ^ salt_bytes[i % salt_len]\n-        m = md5()\n-        m.update(bytes(string_bytes))\n-        result = b64encode(m.digest()).decode('ascii')\n-        return result.replace('/', '_').replace('+', '-')\n+        import base64\n+        import hashlib\n+        # Modified encryption process\n+        salt = cls._NETEASE_SALT \n+        string = str(dfsid)\n+        md5_hash = hashlib.md5((salt + string).encode('utf-8')).hexdigest()\n+        return md5_hash\n \n     def extract_formats(self, info):\n         formats = []\n"}, "success": true, "processing_time": 582.8299803733826, "attempts": 1, "error": null}
{"instance_id": "ytdl-org__youtube-dl-31182", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/youtube_dl/jsinterp.py b/youtube_dl/jsinterp.py\nindex 8e119d08a..0f7c19a16 100644\n--- a/youtube_dl/jsinterp.py\n+++ b/youtube_dl/jsinterp.py\n@@ -280,6 +280,11 @@ class JSInterpreter(object):\n             return right_val\n \n         try:\n+            if left_val is None or right_val is None:\n+                if op in ('>', '<', '>=', '<='):\n+                    return False\n+                elif op in ('==', '!='):\n+                    return op == '=='\n             return opfunc(left_val, right_val)\n         except Exception as e:\n             raise self.Exception('Failed to evaluate {left_val!r} {op} {right_val!r}'.format(**locals()), expr, cause=e)\n"}, "success": true, "processing_time": 107.00481939315796, "attempts": 1, "error": null}
{"instance_id": "ytdl-org__youtube-dl-30582", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/youtube_dl/extractor/youtube.py b/youtube_dl/extractor/youtube.py\nindex 63918924d..62f65fda2 100644\n--- a/youtube_dl/extractor/youtube.py\n+++ b/youtube_dl/extractor/youtube.py\n@@ -1392,7 +1392,7 @@ class YoutubeIE(YoutubeBaseInfoExtractor):\n     # 3. https://github.com/ytdl-org/youtube-dl/issues/30097#issuecomment-950157377\n     def _extract_n_function_name(self, jscode):\n         return self._search_regex(\n-            (r'\\.get\\(\"n\"\\)\\)&&\\(b=(?P<nfunc>[a-zA-Z0-9$]{3})\\([a-zA-Z0-9]\\)',),\n+            (r'\\.get\\(\"n\"\\)\\)&&\\(b=(?P<nfunc>[a-zA-Z0-9$]{3,})\\([a-zA-Z0-9]\\)',),\n             jscode, 'Initial JS player n function name', group='nfunc')\n \n     def _extract_n_function(self, video_id, player_url):\n"}, "success": true, "processing_time": 279.39077830314636, "attempts": 1, "error": null}
{"instance_id": "ytdl-org__youtube-dl-29698", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/youtube_dl/extractor/vimeo.py b/youtube_dl/extractor/vimeo.py\nindex 0b386f450..a83744e90 100644\n--- a/youtube_dl/extractor/vimeo.py\n+++ b/youtube_dl/extractor/vimeo.py\n@@ -692,7 +692,8 @@ class VimeoIE(VimeoBaseInfoExtractor):\n                 webpage, 'page config', default='{}'), video_id, fatal=False)\n             if not page_config:\n                 return self._extract_from_api(video_id)\n-            config_url = page_config['player']['config_url']\n+            config_url = self._search_regex(\n+                r'var\\s*config\\s*=\\s*({.+?})\\s*;', webpage, 'config URL', fatal=False)\n             cc_license = page_config.get('cc_license')\n             clip = page_config.get('clip') or {}\n             timestamp = clip.get('uploaded_on')\n"}, "success": true, "processing_time": 469.89748644828796, "attempts": 1, "error": null}
{"instance_id": "ytdl-org__youtube-dl-28801", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/youtube_dl/YoutubeDL.py b/youtube_dl/YoutubeDL.py\nindex 6f2aba5ac..b293ab0c6 100755\n--- a/youtube_dl/YoutubeDL.py\n+++ b/youtube_dl/YoutubeDL.py\n@@ -2454,11 +2454,19 @@ class YoutubeDL(object):\n             [[lang, ', '.join(f['ext'] for f in reversed(formats))]\n                 for lang, formats in subtitles.items()]))\n \n-    def urlopen(self, req):\n+    def urlopen(self, req, username=None, password=None):\n         \"\"\" Start an HTTP download \"\"\"\n         if isinstance(req, compat_basestring):\n             req = sanitized_Request(req)\n+        if username and password:\n+            req = self._add_auth_info(req, username, password)\n         return self._opener.open(req, timeout=self._socket_timeout)\n+    def _add_auth_info(self, request, username, password):\n+        from urllib2 import HTTPDigestAuthHandler, build_opener\n+        auth_handler = HTTPDigestAuthHandler()\n+        auth_handler.add_password(None, username, password)\n+        opener = build_opener(auth_handler)\n+        return opener.open(request)\n \n     def print_debug_header(self):\n         if not self.params.get('verbose'):\n"}, "success": true, "processing_time": 1102.342710018158, "attempts": 1, "error": null}
{"instance_id": "ytdl-org__youtube-dl-23199", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue with the `unified_strdate` function returning `None` for dates with ordinal suffixes like \"3rd\" and \"23rd\", we need to modify the function to correctly parse these dates. The function uses `datetime.datetime.strptime` to parse the date string according to various date formats. However, the current formats do not account for ordinal suffixes.\n\nThe key insight here is to remove ordinal suffixes (\"st\", \"nd\", \"rd\", \"th\") from the date string before attempting to parse it. This can be achieved by using a regular expression to match and replace these suffixes.\n\nHere's the step-by-step reasoning:\n1. **Identify the problematic code**: The issue lies in the `unified_strdate` function within `youtube_dl/utils.py`. Specifically, the function does not handle ordinal suffixes in date strings.\n2. **Determine the fix**: To fix this, we need to preprocess the date string to remove any ordinal suffixes before passing it to `datetime.datetime.strptime`.\n3. **Implement the fix**: We will add a line to remove ordinal suffixes from the date string. This can be done using a regular expression that matches \"st\", \"nd\", \"rd\", \"th\" and replaces them with an empty string.\n\nNow, let's write the patch:\n\n```\n<file>youtube_dl/utils.py</file>\n<original>\n2838     if date_str is None:\n2839         return None\n2840     upload_date = None\n2841     # Replace commas\n2842     date_str = date_str.replace(',', ' ')\n2843     # Remove AM/PM + timezone\n2844     date_str = re.sub(r'(?i)\\s*(?:AM|PM)(?:\\s+[A-Z]+)?', '', date_str)\n2845     _, date_str = extract_timezone(date_str)\n2846 \n2847     for expression in date_formats(day_first):\n2848         try:\n</original>\n<patched>\n2838     if date_str is None:\n2839         return None\n2840     upload_date = None\n2841     # Replace commas\n2842     date_str = date_str.replace(',', ' ')\n2843     # Remove ordinal suffixes (st, nd, rd, th)\n2844     date_str = re.sub(r'\\s*(st|nd|rd|th)\\s*', '', date_str, flags=re.I)\n2845     # Remove AM/PM + timezone\n2846     date_str = re.sub(r'(?i)\\s*(?:AM|PM)(?:\\s+[A-Z]+)?', '', date_str)\n2847     _, date_str = extract_timezone(date_str)\n2848 \n2849     for expression in date_formats(day_first):\n2850         try:\n</patched>\n```"}, "success": true, "processing_time": 300.59736704826355, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-6388", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/contracts/__init__.py b/scrapy/contracts/__init__.py\nindex b300b8457..8677d42a5 100644\n--- a/scrapy/contracts/__init__.py\n+++ b/scrapy/contracts/__init__.py\n@@ -120,11 +120,11 @@ class ContractsManager:\n \n             if line.startswith(\"@\"):\n                 m = re.match(r\"@(\\w+)\\s*(.*)\", line)\n-                assert m is not None\n-                name, args = m.groups()\n-                args = re.split(r\"\\s+\", args)\n+                if m:\n+                    name, args = m.groups()\n+                    args = re.split(r\"\\s+\", args)\n \n-                contracts.append(self.contracts[name](method, *args))\n+                    contracts.append(self.contracts[name](method, *args))\n \n         return contracts\n \n"}, "success": true, "processing_time": 38.67424821853638, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5950", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/middleware.py b/scrapy/middleware.py\nindex 03e92b565..fae1ccd26 100644\n--- a/scrapy/middleware.py\n+++ b/scrapy/middleware.py\n@@ -46,7 +46,10 @@ class MiddlewareManager:\n                 enabled.append(clspath)\n             except NotConfigured as e:\n                 if e.args:\n-                    clsname = clspath.split(\".\")[-1]\n+                    if isinstance(clspath, str):\n+                        clsname = clspath.split(\".\")[-1]\n+                    else:\n+                        clsname = type(clspath).__name__\n                     logger.warning(\n                         \"Disabled %(clsname)s: %(eargs)s\",\n                         {\"clsname\": clsname, \"eargs\": e.args[0]},\n"}, "success": true, "processing_time": 341.8700547218323, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-6050", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/downloadermiddlewares/retry.py b/scrapy/downloadermiddlewares/retry.py\nindex 205bb48b1..3facb5331 100644\n--- a/scrapy/downloadermiddlewares/retry.py\n+++ b/scrapy/downloadermiddlewares/retry.py\n@@ -38,6 +38,11 @@ class BackwardsCompatibilityMetaclass(type):\n             for x in Settings().getlist(\"RETRY_EXCEPTIONS\")\n         )\n \n+    def __get__(self, instance, owner):\n+        if instance is not None:\n+            return instance.exceptions_to_retry\n+        return self\n+\n \n def get_retry_request(\n     request: Request,\n@@ -136,16 +141,20 @@ class RetryMiddleware(metaclass=BackwardsCompatibilityMetaclass):\n             int(x) for x in settings.getlist(\"RETRY_HTTP_CODES\")\n         )\n         self.priority_adjust = settings.getint(\"RETRY_PRIORITY_ADJUST\")\n-\n+        \n         if not hasattr(\n-            self, \"EXCEPTIONS_TO_RETRY\"\n-        ):  # If EXCEPTIONS_TO_RETRY is not \"overriden\"\n+            self, \"exceptions_to_retry\"\n+        ):  \n             self.exceptions_to_retry = tuple(\n                 load_object(x) if isinstance(x, str) else x\n                 for x in settings.getlist(\"RETRY_EXCEPTIONS\")\n             )\n-        else:\n-            self.exceptions_to_retry = self.EXCEPTIONS_TO_RETRY\n+        warnings.warn(\n+            \"Attribute RetryMiddleware.EXCEPTIONS_TO_RETRY is deprecated. \"\n+            \"Use the RETRY_EXCEPTIONS setting instead.\",\n+            ScrapyDeprecationWarning,\n+            stacklevel=2,\n+        )\n \n     @classmethod\n     def from_crawler(cls, crawler):\n"}, "success": true, "processing_time": 78.96992492675781, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-6013", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue presented, let's analyze the problem and the provided code context.\n\nThe issue is an `AssertionError` in the `getdictorlist` method of the `BaseSettings` class, which is part of the Scrapy framework. This method is used to get a setting value that can be either a dictionary or a list. The error occurs because the `assert isinstance(value, (dict, list))` line fails when the value is a tuple.\n\nThe `getdictorlist` method is defined as follows:\n\n```python\ndef getdictorlist(\n    self,\n    name: _SettingsKeyT,\n    default: Union[Dict[Any, Any], List[Any], None] = None,\n) -> Union[Dict[Any, Any], List[Any]]:\n    \"\"\"Get a setting value as either a :class:`dict` or a :class:`list`.\n    ...\n```\n\nThe issue arises from the fact that tuples are not considered valid types in the current implementation. To fix this, we need to modify the `getdictorlist` method to handle tuples correctly.\n\nHere's the necessary patch:\n\n```\n<file>scrapy/settings/__init__.py</file>\n<original>\n274 assert isinstance(value, (dict, list))\n275 return copy.deepcopy(value)\n</original>\n<patched>\n274 assert isinstance(value, (dict, list, tuple))\n275 return copy.deepcopy(value)\n</patched>\n```\n\nThis change allows the `getdictorlist` method to handle tuple values by adding `tuple` to the types checked in the `assert` statement. With this modification, the method will correctly handle settings that are tuples, converting them to lists or dictionaries as needed, and avoiding the `AssertionError`. \n\nAdditionally, to ensure that tuple values are properly converted to lists (since the method is expected to return a list or a dict), we could consider adding a line to convert tuples to lists before returning the deepcopy:\n\n```\n<file>scrapy/settings/__init__.py</file>\n<original>\n274 assert isinstance(value, (dict, list))\n275 return copy.deepcopy(value)\n</original>\n<patched>\n274 if isinstance(value, tuple):\n275 value = list(value)\n276 assert isinstance(value, (dict, list))\n277 return copy.deepcopy(value)\n</patched>\n```\n\nHowever, the first patch should be sufficient to resolve the immediate issue by making the `assert` statement pass for tuple values. \n\nThe second patch ensures that tuples are converted to lists, which might be the expected behavior in the context of returning a list or a dict. \n\nThese changes should resolve the `AssertionError` issue in the `getdictorlist` method when encountering tuple values."}, "success": true, "processing_time": 354.1417775154114, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5993", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/utils/conf.py b/scrapy/utils/conf.py\nindex 43a8b65a5..b270bc5c6 100644\n--- a/scrapy/utils/conf.py\n+++ b/scrapy/utils/conf.py\n@@ -55,7 +55,16 @@ def build_component_list(compdict, custom=None, convert=update_classpath):\n         return type(custom)(convert(c) for c in custom)\n \n     if custom is not None:\n-        compdict.update(custom)\n+        # Custom can be a dictionary for backward compatibility\n+        if isinstance(custom, dict):\n+            compdict.update(custom)\n+        else:\n+            warnings.warn(\n+                \"Passing a non-dictionary value to 'custom' is deprecated and will be removed in a future version.\"\n+                \"Use a dictionary or a list/tuple of components instead.\",\n+                DeprecationWarning,\n+            )\n+            compdict.update(custom)\n \n     _validate_values(compdict)\n     compdict = without_none_values(_map_keys(compdict))\n"}, "success": true, "processing_time": 106.28299236297607, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5952", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/exporters.py b/scrapy/exporters.py\nindex 4538c9ee1..2606f84bf 100644\n--- a/scrapy/exporters.py\n+++ b/scrapy/exporters.py\n@@ -142,13 +142,18 @@ class JsonItemExporter(BaseItemExporter):\n         self.file.write(b\"]\")\n \n     def export_item(self, item):\n+        itemdict = dict(self._get_serialized_fields(item))\n+        try:\n+            data = self.encoder.encode(itemdict)\n+        except Exception as e:\n+            # Handle the encoding error, e.g., log the error\n+            print(f\"Error encoding item: {e}\")\n+            return\n         if self.first_item:\n             self.first_item = False\n         else:\n             self.file.write(b\",\")\n             self._beautify_newline()\n-        itemdict = dict(self._get_serialized_fields(item))\n-        data = self.encoder.encode(itemdict)\n         self.file.write(to_bytes(data, self.encoding))\n \n \n"}, "success": true, "processing_time": 64.11296916007996, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5929", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/downloadermiddlewares/retry.py b/scrapy/downloadermiddlewares/retry.py\nindex 081642a4b..142db4923 100644\n--- a/scrapy/downloadermiddlewares/retry.py\n+++ b/scrapy/downloadermiddlewares/retry.py\n@@ -91,7 +91,7 @@ def get_retry_request(\n         max_retry_times = request.meta.get(\"max_retry_times\")\n         if max_retry_times is None:\n             max_retry_times = settings.getint(\"RETRY_TIMES\")\n-    if retry_times <= max_retry_times:\n+    if retry_times < max_retry_times:\n         logger.debug(\n             \"Retrying %(request)s (failed %(retry_times)d times): %(reason)s\",\n             {\"request\": request, \"retry_times\": retry_times, \"reason\": reason},\n"}, "success": true, "processing_time": 115.58982396125793, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5917", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/responsetypes.py b/scrapy/responsetypes.py\nindex f01e9096c..8c42c84e2 100644\n--- a/scrapy/responsetypes.py\n+++ b/scrapy/responsetypes.py\n@@ -51,7 +51,7 @@ class ResponseTypes:\n         header\"\"\"\n         if content_encoding:\n             return Response\n-        mimetype = to_unicode(content_type).split(\";\")[0].strip().lower()\n+        mimetype = to_unicode(content_type, encoding=\"latin-1\").split(\";\")[0].strip().lower()\n         return self.from_mimetype(mimetype)\n \n     def from_content_disposition(self, content_disposition):\n"}, "success": true, "processing_time": 305.2366542816162, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5847", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "To address the issue of `FileFeedStorage` creating an empty file when no items are scraped, we need to modify the `IFeedStorage` interface and its implementations to include a `cleanup` method. This method will be used to clean up the storage when no items are scraped and `FEED_STORE_EMPTY` is `False`.\n\nThe `FeedExporter` class needs to be updated to call the `cleanup` method on the storage object when no items are scraped and `FEED_STORE_EMPTY` is `False`.\n\nHere are the necessary modifications:\n\n```\n<file>scrapy/extensions/feedexport.py</file>\n<original>\n95     def open(spider):\n96         \"\"\"Open the storage for the given spider. It must return a file-like\n97         object that will be used for the exporters\"\"\"\n98 \n99     def store(file):\n100         \"\"\"Store the given file stream\"\"\"\n</original>\n<patched>\n95     def open(spider):\n96         \"\"\"Open the storage for the given spider. It must return a file-like\n97         object that will be used for the exporters\"\"\"\n98 \n99     def store(file):\n100         \"\"\"Store the given file stream\"\"\"\n101 \n102     def cleanup(file, *, feed_options):\n103         \"\"\"Clean up the storage after the spider is closed. \n104          If the feed is not empty, this method has no effect.\n105          If the feed is empty and feed_options.store_empty is False, \n104          this method must remove the file created for the feed.\n105         \"\"\"\n</patched>\n```\n\n```\n<file>scrapy/extensions/feedexport.py</file>\n<original>\n409         slot.finish_exporting()\n410         if not slot.itemcount and not slot.store_empty:\n411             # We need to call slot.storage.store nonetheless to get the file\n412             # properly closed.\n413             return defer.maybeDeferred(slot.storage.store, get_file(slot))\n</original>\n<patched>\n409         slot.finish_exporting()\n410         if not slot.itemcount and not slot.store_empty:\n411             return defer.maybeDeferred(slot.storage.cleanup, get_file(slot), feed_options=slot.feed_options)\n412         else:\n413             return defer.maybeDeferred(slot.storage.store, get_file(slot))\n</patched>\n```\n\n```\n<file>scrapy/extensions/feedexport.py</file>\n<original>\n153     def store(self, file):\n154         file.close()\n</original>\n<patched>\n153     def store(self, file):\n154         file.close()\n\n155     def cleanup(self, file, *, feed_options):\n156         if not file.closed:\n157             file.close()\n158         import os\n159         try:\n160             os.remove(file.name)\n161         except OSError:\n162             pass\n</patched>\n```"}, "success": true, "processing_time": 375.6454689502716, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5833", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/extensions/feedexport.py b/scrapy/extensions/feedexport.py\nindex cd26b5778..aaa536fb4 100644\n--- a/scrapy/extensions/feedexport.py\n+++ b/scrapy/extensions/feedexport.py\n@@ -206,11 +206,49 @@ class S3FeedStorage(BlockingFeedStorage):\n     def _store_in_thread(self, file):\n         file.seek(0)\n         kwargs = {\"ACL\": self.acl} if self.acl else {}\n-        self.s3_client.put_object(\n-            Bucket=self.bucketname, Key=self.keyname, Body=file, **kwargs\n-        )\n+        file.seek(0)\n+        file_size = file.tell()\n+        file.seek(0)\n+\n+        if file_size > 5 * 1024 * 1024 * 1024:  # 5GB\n+            self._upload_multipart(file, kwargs)\n+        else:\n+            self.s3_client.put_object(\n+                Bucket=self.bucketname, Key=self.keyname, Body=file, **kwargs\n+            )\n         file.close()\n \n+    def _upload_multipart(self, file, kwargs):\n+        mp_upload = self.s3_client.create_multipart_upload(\n+            Bucket=self.bucketname, Key=self.keyname, **kwargs\n+        )\n+\n+        parts = []\n+        part_number = 1\n+        chunk_size = 100 * 1024 * 1024  # 100MB\n+\n+        while True:\n+            chunk = file.read(chunk_size)\n+            if not chunk:\n+                break\n+\n+            part = self.s3_client.upload_part(\n+                Bucket=self.bucketname,\n+                Key=self.keyname,\n+                PartNumber=part_number,\n+                UploadId=mp_upload[\"UploadId\"],\n+                Body=chunk,\n+            )\n+            parts.append({\"PartNumber\": part_number, \"ETag\": part[\"ETag\"]})\n+            part_number += 1\n+\n+        self.s3_client.complete_multipart_upload(\n+            Bucket=self.bucketname,\n+            Key=self.keyname,\n+            UploadId=mp_upload[\"UploadId\"],\n+            MultipartUpload={\"Parts\": parts},\n+        )\n+\n \n class GCSFeedStorage(BlockingFeedStorage):\n     def __init__(self, uri, project_id, acl):\n"}, "success": true, "processing_time": 203.41898608207703, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5808", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/commands/genspider.py b/scrapy/commands/genspider.py\nindex c1565a138..3e867dd83 100644\n--- a/scrapy/commands/genspider.py\n+++ b/scrapy/commands/genspider.py\n@@ -91,6 +91,7 @@ class Command(ScrapyCommand):\n             raise UsageError()\n \n         name, url = args[0:2]\n+        url = add_http_if_no_scheme(url)\n         domain = extract_domain(url)\n         module = sanitize_module_name(name)\n \n"}, "success": true, "processing_time": 278.53167033195496, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5689", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/utils/reactor.py b/scrapy/utils/reactor.py\nindex 652733ce8..1cf0965fe 100644\n--- a/scrapy/utils/reactor.py\n+++ b/scrapy/utils/reactor.py\n@@ -67,7 +67,11 @@ def install_reactor(reactor_path, event_loop_path=None):\n                 event_loop = event_loop_class()\n                 asyncio.set_event_loop(event_loop)\n             else:\n-                event_loop = asyncio.get_event_loop()\n+                try:\n+                    event_loop = asyncio.get_event_loop()\n+                except RuntimeError:\n+                    event_loop = asyncio.new_event_loop()\n+                    asyncio.set_event_loop(event_loop)\n             asyncioreactor.install(eventloop=event_loop)\n     else:\n         *module, _ = reactor_path.split(\".\")\n"}, "success": true, "processing_time": 85.21705603599548, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5611", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/http/response/text.py b/scrapy/http/response/text.py\nindex 89516b9b6..831bd3396 100644\n--- a/scrapy/http/response/text.py\n+++ b/scrapy/http/response/text.py\n@@ -58,6 +58,8 @@ class TextResponse(Response):\n         return self._declared_encoding() or self._body_inferred_encoding()\n \n     def _declared_encoding(self):\n+        if self.body.startswith(b'\\xef\\xbb\\xbf'):\n+            return 'utf-8'\n         return (\n             self._encoding\n             or self._headers_encoding()\n@@ -115,6 +117,8 @@ class TextResponse(Response):\n \n     @memoizemethod_noargs\n     def _body_declared_encoding(self):\n+        if self.body.startswith(b'\\xef\\xbb\\xbf'):\n+            return 'utf-8'\n         return html_body_declared_encoding(self.body)\n \n     @property\n"}, "success": true, "processing_time": 279.6270115375519, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5581", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/extensions/postprocessing.py b/scrapy/extensions/postprocessing.py\nindex 79e3b1656..cf519d0af 100644\n--- a/scrapy/extensions/postprocessing.py\n+++ b/scrapy/extensions/postprocessing.py\n@@ -154,10 +154,17 @@ class PostProcessingManager(IOBase):\n         Close the target file along with all the plugins.\n         \"\"\"\n         self.head_plugin.close()\n+        self.file.close()\n \n     def writable(self) -> bool:\n         return True\n \n+    def seek(self, offset, whence=0):\n+        return self.file.seek(offset, whence)\n+\n+    def read(self, *args, **kwargs):\n+        return self.file.read(*args, **kwargs)\n+\n     def _load_plugins(self, plugins: List[Any]) -> List[Any]:\n         plugins = [load_object(plugin) for plugin in plugins]\n         return plugins\n"}, "success": true, "processing_time": 335.02741837501526, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5526", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/http/headers.py b/scrapy/http/headers.py\nindex 1a2b99b0a..bad978638 100644\n--- a/scrapy/http/headers.py\n+++ b/scrapy/http/headers.py\n@@ -8,6 +8,8 @@ class Headers(CaselessDict):\n \n     def __init__(self, seq=None, encoding='utf-8'):\n         self.encoding = encoding\n+        if seq is not None:\n+            seq = [(k, v) if isinstance(v, (list, tuple)) else (k, [v]) for k, v in seq]\n         super().__init__(seq)\n \n     def normkey(self, key):\n@@ -56,15 +58,12 @@ class Headers(CaselessDict):\n             return []\n \n     def setlist(self, key, list_):\n-        self[key] = list_\n+        self[key] = self.normvalue(list_)\n \n     def setlistdefault(self, key, default_list=()):\n         return self.setdefault(key, default_list)\n \n-    def appendlist(self, key, value):\n-        lst = self.getlist(key)\n-        lst.extend(self.normvalue(value))\n-        self[key] = lst\n+    # No change needed here as it seems to handle lists correctly\n \n     def items(self):\n         return ((k, self.getlist(k)) for k in self.keys())\ndiff --git a/scrapy/utils/datatypes.py b/scrapy/utils/datatypes.py\nindex 47df8a717..3442c0d76 100644\n--- a/scrapy/utils/datatypes.py\n+++ b/scrapy/utils/datatypes.py\n@@ -23,7 +23,10 @@ class CaselessDict(dict):\n         return dict.__getitem__(self, self.normkey(key))\n \n     def __setitem__(self, key, value):\n-        dict.__setitem__(self, self.normkey(key), self.normvalue(value))\n+        if isinstance(value, (list, tuple)):\n+            dict.__setitem__(self, self.normkey(key), value)\n+        else:\n+            dict.__setitem__(self, self.normkey(key), self.normvalue(value))\n \n     def __delitem__(self, key):\n         dict.__delitem__(self, self.normkey(key))\n"}, "success": true, "processing_time": 523.9382178783417, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-6542", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/contracts/__init__.py b/scrapy/contracts/__init__.py\nindex 9071395e3..040505ce1 100644\n--- a/scrapy/contracts/__init__.py\n+++ b/scrapy/contracts/__init__.py\n@@ -41,6 +41,7 @@ class Contract:\n             def wrapper(  # pylint: disable=inconsistent-return-statements\n                 response: Response, **cb_kwargs: Any\n             ) -> list[Any]:\n+                cb_result = None\n                 try:\n                     results.startTest(self.testcase_pre)\n                     self.pre_process(response)\n@@ -55,9 +56,9 @@ class Contract:\n                     cb_result = cb(response, **cb_kwargs)\n                     if isinstance(cb_result, (AsyncGenerator, CoroutineType)):\n                         raise TypeError(\"Contracts don't support async callbacks\")\n-                    return list(  # pylint: disable=return-in-finally\n-                        cast(Iterable[Any], iterate_spider_output(cb_result))\n-                    )\n+                return list(\n+                    cast(Iterable[Any], iterate_spider_output(cb_result))\n+                )\n \n             request.callback = wrapper\n \n@@ -86,8 +87,7 @@ class Contract:\n                     results.addError(self.testcase_post, sys.exc_info())\n                 else:\n                     results.addSuccess(self.testcase_post)\n-                finally:\n-                    return output  # pylint: disable=return-in-finally\n+                return output\n \n             request.callback = wrapper\n \n"}, "success": true, "processing_time": 67.28701615333557, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-6540", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/middleware.py b/scrapy/middleware.py\nindex b6a427895..57acdbef4 100644\n--- a/scrapy/middleware.py\n+++ b/scrapy/middleware.py\n@@ -36,7 +36,7 @@ class MiddlewareManager:\n \n     component_name = \"foo middleware\"\n \n-    def __init__(self, *middlewares: Any) -> None:\n+    def __init__(self, crawler: Crawler, *middlewares: Any) -> None:\n         self.middlewares = middlewares\n         # Only process_spider_output and process_spider_exception can be None.\n         # Only process_spider_output can be a tuple, and only until _async compatibility methods are removed.\n@@ -51,17 +51,14 @@ class MiddlewareManager:\n         raise NotImplementedError\n \n     @classmethod\n-    def from_settings(cls, settings: Settings, crawler: Crawler | None = None) -> Self:\n-        mwlist = cls._get_mwlist_from_settings(settings)\n+    def from_crawler(cls, crawler: Crawler) -> Self:\n+        mwlist = cls._get_mwlist_from_settings(crawler.settings)\n         middlewares = []\n         enabled = []\n         for clspath in mwlist:\n             try:\n                 mwcls = load_object(clspath)\n-                if crawler is not None:\n-                    mw = build_from_crawler(mwcls, crawler)\n-                else:\n-                    mw = build_from_settings(mwcls, settings)\n+                mw = build_from_crawler(mwcls, crawler)\n                 middlewares.append(mw)\n                 enabled.append(clspath)\n             except NotConfigured as e:\n@@ -71,7 +68,7 @@ class MiddlewareManager:\n                         {\"clspath\": clspath, \"eargs\": e.args[0]},\n                         extra={\"crawler\": crawler},\n                     )\n-\n+ \n         logger.info(\n             \"Enabled %(componentname)ss:\\n%(enabledlist)s\",\n             {\n@@ -80,7 +77,7 @@ class MiddlewareManager:\n             },\n             extra={\"crawler\": crawler},\n         )\n-        return cls(*middlewares)\n+        return cls(crawler, *middlewares)\n \n     @classmethod\n     def from_crawler(cls, crawler: Crawler) -> Self:\n"}, "success": true, "processing_time": 106.94339537620544, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-6469", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/http/request/__init__.py b/scrapy/http/request/__init__.py\nindex 9381a6cb3..621172147 100644\n--- a/scrapy/http/request/__init__.py\n+++ b/scrapy/http/request/__init__.py\n@@ -152,8 +152,8 @@ class Request(object_ref):\n         self.headers: Headers = Headers(headers or {}, encoding=encoding)\n         self.dont_filter: bool = dont_filter\n \n-        self._meta: Optional[Dict[str, Any]] = dict(meta) if meta else None\n-        self._cb_kwargs: Optional[Dict[str, Any]] = (\n+        self.meta: Optional[Dict[str, Any]] = dict(meta) if meta else None\n+        self.cb_kwargs: Optional[Dict[str, Any]] = (\n             dict(cb_kwargs) if cb_kwargs else None\n         )\n         self.flags: List[str] = [] if flags is None else list(flags)\n"}, "success": true, "processing_time": 500.1958529949188, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-6368", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/pipelines/media.py b/scrapy/pipelines/media.py\nindex 5f6c5cb07..db72437ca 100644\n--- a/scrapy/pipelines/media.py\n+++ b/scrapy/pipelines/media.py\n@@ -3,6 +3,7 @@ from __future__ import annotations\n import functools\n import logging\n from collections import defaultdict\n+from abc import ABC, abstractmethod\n from typing import TYPE_CHECKING\n \n from twisted.internet.defer import Deferred, DeferredList\n@@ -27,7 +28,7 @@ def _DUMMY_CALLBACK(response):\n     return response\n \n \n-class MediaPipeline:\n+class MediaPipeline(ABC):\n     LOG_FAILED_RESULTS = True\n \n     class SpiderInfo:\n@@ -192,35 +193,26 @@ class MediaPipeline:\n             defer_result(result).chainDeferred(wad)\n \n     # Overridable Interface\n+    @abstractmethod\n     def media_to_download(self, request, info, *, item=None):\n         \"\"\"Check request before starting download\"\"\"\n-        pass\n \n+    @abstractmethod\n     def get_media_requests(self, item, info):\n         \"\"\"Returns the media requests to download\"\"\"\n-        pass\n \n+    @abstractmethod\n     def media_downloaded(self, response, request, info, *, item=None):\n         \"\"\"Handler for success downloads\"\"\"\n-        return response\n \n+    @abstractmethod\n     def media_failed(self, failure, request, info):\n         \"\"\"Handler for failed downloads\"\"\"\n-        return failure\n \n+    @abstractmethod\n     def item_completed(self, results, item, info):\n         \"\"\"Called per item when all media requests has been processed\"\"\"\n-        if self.LOG_FAILED_RESULTS:\n-            for ok, value in results:\n-                if not ok:\n-                    logger.error(\n-                        \"%(class)s found errors processing %(item)s\",\n-                        {\"class\": self.__class__.__name__, \"item\": item},\n-                        exc_info=failure_to_exc_info(value),\n-                        extra={\"spider\": info.spider},\n-                    )\n-        return item\n \n+    @abstractmethod\n     def file_path(self, request, response=None, info=None, *, item=None):\n         \"\"\"Returns the path where downloaded media should be stored\"\"\"\n-        pass\n"}, "success": true, "processing_time": 153.52921843528748, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-6352", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/core/downloader/__init__.py b/scrapy/core/downloader/__init__.py\nindex 98e1af6fb..733ab3b25 100644\n--- a/scrapy/core/downloader/__init__.py\n+++ b/scrapy/core/downloader/__init__.py\n@@ -144,6 +144,13 @@ class Downloader:\n         return key, self.slots[key]\n \n     def _get_slot_key(self, request: Request, spider: Optional[Spider]) -> str:\n+        if spider is not None:\n+            import warnings\n+            warnings.warn(\n+                \"The spider argument to _get_slot_key is deprecated\",\n+                ScrapyDeprecationWarning,\n+                stacklevel=2,\n+            )\n         if self.DOWNLOAD_SLOT in request.meta:\n             return cast(str, request.meta[self.DOWNLOAD_SLOT])\n \n@@ -153,6 +160,9 @@ class Downloader:\n \n         return key\n \n+    def get_slot_key(self, request: Request) -> str:\n+        return self._get_slot_key(request, None)\n+\n     def _enqueue_request(self, request: Request, spider: Spider) -> Deferred:\n         key, slot = self._get_slot(request, spider)\n         request.meta[self.DOWNLOAD_SLOT] = key\ndiff --git a/scrapy/pqueues.py b/scrapy/pqueues.py\nindex 773825c5e..58a47ef0f 100644\n--- a/scrapy/pqueues.py\n+++ b/scrapy/pqueues.py\n@@ -180,7 +180,7 @@ class DownloaderInterface:\n         return [(self._active_downloads(slot), slot) for slot in possible_slots]\n \n     def get_slot_key(self, request: Request) -> str:\n-        return self.downloader._get_slot_key(request, None)\n+        return self.downloader.get_slot_key(request)\n \n     def _active_downloads(self, slot: str) -> int:\n         \"\"\"Return a number of requests in a Downloader for a given slot\"\"\"\n"}, "success": true, "processing_time": 65.70721173286438, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-6151", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/http/request/__init__.py b/scrapy/http/request/__init__.py\nindex 3d6cf4816..f25ca6ec7 100644\n--- a/scrapy/http/request/__init__.py\n+++ b/scrapy/http/request/__init__.py\n@@ -97,6 +97,7 @@ class Request(object_ref):\n         \"encoding\",\n         \"priority\",\n         \"dont_filter\",\n+        \"allow_offsite\",\n         \"errback\",\n         \"flags\",\n         \"cb_kwargs\",\n"}, "success": true, "processing_time": 111.46518659591675, "attempts": 1, "error": null}
{"instance_id": "scrapy__scrapy-5320", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/scrapy/utils/response.py b/scrapy/utils/response.py\nindex b3ef7b463..33a4821e2 100644\n--- a/scrapy/utils/response.py\n+++ b/scrapy/utils/response.py\n@@ -80,8 +80,8 @@ def open_in_browser(\n     body = response.body\n     if isinstance(response, HtmlResponse):\n         if b'<base' not in body:\n-            repl = f'<head><base href=\"{response.url}\">'\n-            body = body.replace(b'<head>', to_bytes(repl))\n+             repl = f'\\\\1<base href=\"{response.url}\">' \n+             body = re.sub(b\"(<head.*?>)\", to_bytes(repl), body)\n         ext = '.html'\n     elif isinstance(response, TextResponse):\n         ext = '.txt'\n"}, "success": true, "processing_time": 222.6227581501007, "attempts": 1, "error": null}
{"instance_id": "keras-team__keras-20380", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/keras/src/callbacks/callback_list.py b/keras/src/callbacks/callback_list.py\nindex b74d1ad4d..2fd54a436 100644\n--- a/keras/src/callbacks/callback_list.py\n+++ b/keras/src/callbacks/callback_list.py\n@@ -115,17 +115,19 @@ class CallbackList(Callback):\n         self._futures.append(future)\n \n     def _pythonify_logs(self, logs):\n-        result = {}\n-        for key, value in sorted(logs.items()):\n-            if isinstance(value, dict):\n-                result.update(self._pythonify_logs(value))\n-            else:\n-                try:\n-                    value = float(value)\n-                except:\n-                    pass\n-                result[key] = value\n-        return result\n+      \"\"\"Turns logs into standard form to be fed into callback methods.\"\"\"\n+      result = {}\n+      for key, value in sorted(logs.items()):\n+        if isinstance(value, dict):\n+          result.update(self._pythonify_logs(value))\n+        elif isinstance(value, (int, float)):\n+          result[key] = value\n+        else:\n+          try:\n+            result[key] = float(value)\n+          except ValueError:\n+            pass\n+      return result\n \n     def _clear_futures(self):\n         for future in self._futures:\n@@ -143,12 +145,13 @@ class CallbackList(Callback):\n             callback.on_epoch_begin(epoch, logs)\n \n     def on_epoch_end(self, epoch, logs=None):\n-        if self._async_train:\n-            self._clear_futures()\n-\n-        logs = logs or {}\n-        for callback in self.callbacks:\n-            callback.on_epoch_end(epoch, logs)\n+      if self._async_train:\n+        self._clear_futures()\n+      \n+      logs = logs or {}\n+      logs = self._pythonify_logs(logs)\n+      for callback in self.callbacks:\n+        callback.on_epoch_end(epoch, logs)\n \n     def on_train_batch_begin(self, batch, logs=None):\n         logs = logs or {}\ndiff --git a/keras/src/trainers/trainer.py b/keras/src/trainers/trainer.py\nindex 3668a988a..a3f00e80b 100644\n--- a/keras/src/trainers/trainer.py\n+++ b/keras/src/trainers/trainer.py\n@@ -965,18 +965,7 @@ class Trainer:\n                 f\"type {type(validation_freq)}.\"\n             )\n \n-    def _pythonify_logs(self, logs):\n-        result = {}\n-        for key, value in sorted(logs.items()):\n-            if isinstance(value, dict):\n-                result.update(self._pythonify_logs(value))\n-            else:\n-                try:\n-                    value = float(value)\n-                except:\n-                    pass\n-                result[key] = value\n-        return result\n+    # Remove this method as it's redundant with CallbackList's implementation\n \n     def _get_metrics_result_or_logs(self, logs):\n         \"\"\"Returns model metrics as a dict if the keys match with input logs.\n"}, "success": true, "processing_time": 90.09243440628052, "attempts": 1, "error": null}
{"instance_id": "keras-team__keras-20733", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/keras/src/ops/numpy.py b/keras/src/ops/numpy.py\nindex cfdcfa7fa..b15840d9d 100644\n--- a/keras/src/ops/numpy.py\n+++ b/keras/src/ops/numpy.py\n@@ -2,6 +2,7 @@ import builtins\n import re\n \n import numpy as np\n+import einops\n \n from keras.src import backend\n from keras.src.api_export import keras_export\n"}, "success": true, "processing_time": 407.7680621147156, "attempts": 1, "error": null}
{"instance_id": "camel-ai__camel-1627", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/camel/datagen/self_instruct/filter/instruction_filter.py b/camel/datagen/self_instruct/filter/instruction_filter.py\nindex 155cc1aa..403a5c37 100644\n--- a/camel/datagen/self_instruct/filter/instruction_filter.py\n+++ b/camel/datagen/self_instruct/filter/instruction_filter.py\n@@ -55,7 +55,7 @@ class InstructionFilter:\n \n     def filter(\n         self, prompt: str, instruction: str, return_details: bool = False\n-    ):\n+    ) -> bool | tuple[bool, list[str]]:\n         r\"\"\"Check if the given instruction passes all filter functions.\n \n         Args:\n@@ -75,7 +75,10 @@ class InstructionFilter:\n                 f.prompt = prompt\n             if not f.apply(instruction):\n                 failed_filters.append(type(f).__name__)\n-\n+                if not return_details:\n+                    return False\n+                if not return_details:\n+                    return False\n         if return_details:\n             return len(failed_filters) == 0, failed_filters\n-        return len(failed_filters) == 0\n+        return True\n"}, "success": true, "processing_time": 105.05866813659668, "attempts": 1, "error": null}
{"instance_id": "camel-ai__camel-1363", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/camel/loaders/firecrawl_reader.py b/camel/loaders/firecrawl_reader.py\nindex 27b02019..4bce1a33 100644\n--- a/camel/loaders/firecrawl_reader.py\n+++ b/camel/loaders/firecrawl_reader.py\n@@ -75,7 +75,7 @@ class Firecrawl:\n             )\n             return crawl_response\n         except Exception as e:\n-            raise RuntimeError(f\"Failed to crawl the URL: {e}\")\n+            raise RuntimeError(f\"Failed to crawl the URL: {str(e)}\") from e\n \n     def markdown_crawl(self, url: str) -> str:\n         r\"\"\"Crawl a URL and all accessible subpages and return the content in\n@@ -104,8 +104,8 @@ class Firecrawl:\n             return '\\n'.join(markdown_contents)\n         except Exception as e:\n             raise RuntimeError(\n-                f\"Failed to crawl the URL and retrieve markdown: {e}\"\n-            )\n+                f\"Failed to crawl the URL and retrieve markdown: {str(e)}\"\n+            ) from e\n \n     def check_crawl_job(self, job_id: str) -> Dict:\n         r\"\"\"Check the status of a crawl job.\n@@ -148,9 +148,12 @@ class Firecrawl:\n             RuntimeError: If the scrape process fails.\n         \"\"\"\n         try:\n-            return self.app.scrape_url(url=url, params=params)\n+            scraped_data = self.app.scrape_url(url=url, params=params)\n+            if scraped_data is None:\n+                raise ValueError(\"Scraped data is None\")\n+            return scraped_data\n         except Exception as e:\n-            raise RuntimeError(f\"Failed to scrape the URL: {e}\")\n+            raise RuntimeError(f\"Failed to scrape the URL: {str(e)}\") from e\n \n     def structured_scrape(self, url: str, response_format: BaseModel) -> Dict:\n         r\"\"\"Use LLM to extract structured data from given URL.\n@@ -178,7 +181,7 @@ class Firecrawl:\n             )\n             return data.get(\"extract\", {})\n         except Exception as e:\n-            raise RuntimeError(f\"Failed to perform structured scrape: {e}\")\n+            raise RuntimeError(f\"Failed to perform structured scrape: {str(e)}\") from e\n \n     def map_site(\n         self, url: str, params: Optional[Dict[str, Any]] = None\n"}, "success": true, "processing_time": 154.44524478912354, "attempts": 1, "error": null}
{"instance_id": "fastapi__fastapi-1524", "mode": "codereview", "model_name": "openrouter/meta-llama/llama-4-scout", "patch_saved": true, "patch_content": {"patch": "diff --git a/fastapi/encoders.py b/fastapi/encoders.py\nindex 26ceb214..744949f7 100644\n--- a/fastapi/encoders.py\n+++ b/fastapi/encoders.py\n@@ -71,6 +71,14 @@ def jsonable_encoder(\n                 by_alias=by_alias,\n                 skip_defaults=bool(exclude_unset or skip_defaults),\n             )\n+        if \"__root__\" in obj_dict:\n+            return jsonable_encoder(\n+                obj_dict[\"__root__\"],\n+                exclude_none=exclude_none,\n+                exclude_defaults=exclude_defaults,\n+                custom_encoder=encoder,\n+                sqlalchemy_safe=sqlalchemy_safe,\n+            )\n         return jsonable_encoder(\n             obj_dict,\n             exclude_none=exclude_none,\n"}, "success": true, "processing_time": 76.64951825141907, "attempts": 1, "error": null}
