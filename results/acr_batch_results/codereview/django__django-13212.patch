{
  "patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 84b4f31ec7..f4c3f2de4c 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -47,8 +47,9 @@ class RegexValidator:\n         \"\"\"\n         regex_matches = self.regex.search(str(value))\n         invalid_input = regex_matches if self.inverse_match else not regex_matches\n+        params = {'value': value}\n         if invalid_input:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params=params)\n \n     def __eq__(self, other):\n         return (\n@@ -207,13 +208,14 @@ class EmailValidator:\n             self.domain_allowlist = allowlist\n \n     def __call__(self, value):\n+        params = {'value': value}\n         if not value or '@' not in value:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params=params)\n \n         user_part, domain_part = value.rsplit('@', 1)\n \n         if not self.user_regex.match(user_part):\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params=params)\n \n         if (domain_part not in self.domain_allowlist and\n                 not self.validate_domain_part(domain_part)):\n@@ -225,7 +227,7 @@ class EmailValidator:\n             else:\n                 if self.validate_domain_part(domain_part):\n                     return\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params=params)\n \n     def validate_domain_part(self, domain_part):\n         if self.domain_regex.match(domain_part):\n"
}