{
  "patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 917717bb74..a83cc39f2a 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1932,25 +1932,7 @@ def _intersect(self, other):\n \n     def _complement(self, other):\n         if isinstance(other, Interval):\n-            nums = sorted(m for m in self.args if m.is_number)\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                # Reals cannot contain elements other than numbers and symbols.\n-\n-                intervals = []  # Build up a list of intervals between the elements\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n-                for a, b in zip(nums[:-1], nums[1:]):\n-                    intervals.append(Interval(a, b, True, True))  # both open\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-\n-                if syms != []:\n-                    return Complement(Union(intervals, evaluate=False),\n-                            FiniteSet(*syms), evaluate=False)\n-                else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n-\n+            return Complement(other, FiniteSet(*self.args), evaluate=False)\n         elif isinstance(other, FiniteSet):\n             unk = []\n             for i in self:\n@@ -1966,7 +1948,6 @@ def _complement(self, other):\n                 if c is not S.true:\n                     not_true.append(i)\n             return Complement(FiniteSet(*not_true), unk)\n-\n         return Set._complement(self, other)\n \n \n"
}