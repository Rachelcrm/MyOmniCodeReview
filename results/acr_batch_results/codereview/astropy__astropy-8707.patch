{
  "patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 8c1ac5d738..37de27922e 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -547,11 +547,25 @@ class Card(_Verify):\n     @classmethod\n     def fromstring(cls, image):\n         \"\"\"\n-        Construct a `Card` object from a (raw) string. It will pad the string\n-        if it is not the length of a card image (80 columns).  If the card\n-        image is longer than 80 columns, assume it contains ``CONTINUE``\n+        Construct a `Card` object from a (raw) string or byte string. It will\n+        pad the string if it is not the length of a card image (80 columns).  If\n+        the card image is longer than 80 columns, assume it contains ``CONTINUE``\n         card(s).\n+\n+        If a byte string is passed in, it is decoded into a string using ASCII\n+        encoding. Any invalid characters will result in a `ValueError`.\n         \"\"\"\n+        if isinstance(image, bytes):\n+            try:\n+                image = image.decode('ascii')\n+            except UnicodeDecodeError:\n+                raise ValueError(\"Input byte string is not a valid ASCII-encoded card image\")\n+        elif not isinstance(image, str):\n+            raise ValueError(\"Input data must be a string or byte string\")\n+        card = cls()\n+        card._image = _pad(image)\n+        card._verified = False\n+        return card\n \n         card = cls()\n         card._image = _pad(image)\n"
}