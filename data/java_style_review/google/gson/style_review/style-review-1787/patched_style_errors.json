[
  {
    "file": "/workspace/repo/extras/src/main/java/com/google/gson/extras/examples/rawcollections/RawCollectionsExample.java",
    "score": 1.5,
    "error_count": 17,
    "messages": [
      {
        "line": 25,
        "column": 8,
        "type": "error",
        "message": "This utility class has a non-private constructor",
        "source": "UseUtilityClass"
      },
      {
        "line": 26,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Event'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 26,
        "column": 10,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 27,
        "column": 20,
        "type": "error",
        "message": "Field 'name' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 28,
        "column": 20,
        "type": "error",
        "message": "Field 'source' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 29,
        "column": 26,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 29,
        "column": 39,
        "type": "error",
        "message": "Parameter 'source' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 41,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 16,
        "type": "error",
        "message": "Local variable 'collection' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 33,
        "type": "error",
        "message": "Raw type use may be avoided by using a diamond: `new ArrayList<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 46,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 5,
        "type": "error",
        "message": "Usage of System.out/err",
        "source": "SystemPrintln"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 12,
        "type": "error",
        "message": "Local variable 'message' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 9,
        "type": "error",
        "message": "Local variable 'number' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 11,
        "type": "error",
        "message": "Local variable 'event' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 5,
        "type": "error",
        "message": "Usage of System.out/err",
        "source": "SystemPrintln"
      }
    ]
  },
  {
    "file": "/workspace/repo/extras/src/main/java/com/google/gson/graph/GraphAdapterBuilder.java",
    "score": 0.0,
    "error_count": 65,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 47,
        "column": 40,
        "type": "error",
        "message": "Avoid excessively long variable names like constructorConstructor",
        "source": "LongVariable"
      },
      {
        "line": 53,
        "column": 43,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 55,
        "column": 29,
        "type": "error",
        "message": "Local variable 'instanceCreator' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 66,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new InstanceCreator<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 64,
        "column": 43,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 64,
        "column": 68,
        "type": "error",
        "message": "Parameter 'instanceCreator' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 66,
        "column": 7,
        "type": "error",
        "message": "Avoid throwing null pointer exceptions.",
        "source": "AvoidThrowingNullPointerException"
      },
      {
        "line": 72,
        "column": 38,
        "type": "error",
        "message": "Parameter 'gsonBuilder' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 73,
        "column": 13,
        "type": "error",
        "message": "Local variable 'factory' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 46,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Factory'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 84,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Factory(Map<Type, InstanceCreator<?>>)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 84,
        "column": 43,
        "type": "error",
        "message": "Parameter 'instanceCreators' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 89,
        "column": 31,
        "type": "error",
        "message": "The method 'create(Gson, TypeToken<T>)' has a cognitive complexity of 31, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 89,
        "column": 31,
        "type": "error",
        "message": "The method 'create(Gson, TypeToken<T>)' has an NPath complexity of 4096, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 89,
        "column": 43,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 89,
        "column": 62,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 91,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 96,
        "column": 29,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 97,
        "column": 48,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 97,
        "column": 55,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 117,
        "column": 50,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new IdentityHashMap<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 121,
        "column": 45,
        "type": "error",
        "message": "Access to field `map` on foreign value `graph` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 121,
        "column": 45,
        "type": "error",
        "message": "Call to `get` on foreign value `graph.map` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 124,
        "column": 13,
        "type": "error",
        "message": "Access to field `map` on foreign value `graph` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 125,
        "column": 13,
        "type": "error",
        "message": "Access to field `queue` on foreign value `graph` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 133,
        "column": 22,
        "type": "error",
        "message": "Avoid assignments in operands",
        "source": "AssignmentInOperand"
      },
      {
        "line": 133,
        "column": 33,
        "type": "error",
        "message": "Access to field `queue` on foreign value `graph` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 133,
        "column": 33,
        "type": "error",
        "message": "Call to `poll` on foreign value `graph.queue` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 146,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 146,
        "column": 44,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 149,
        "column": 13,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 169,
        "column": 42,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new HashMap<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 175,
        "column": 22,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 179,
        "column": 27,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 180,
        "column": 15,
        "type": "error",
        "message": "Access to field `map` on foreign value `graph` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 192,
        "column": 24,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 192,
        "column": 47,
        "type": "error",
        "message": "Access to field `map` on foreign value `graph` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 192,
        "column": 47,
        "type": "error",
        "message": "Call to `get` on foreign value `graph.map` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 195,
        "column": 15,
        "type": "error",
        "message": "Access to field `typeAdapter` on foreign value `element` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 218,
        "column": 39,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 219,
        "column": 13,
        "type": "error",
        "message": "Local variable 'graph' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 223,
        "column": 26,
        "type": "error",
        "message": "Local variable 'creator' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 224,
        "column": 14,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 225,
        "column": 7,
        "type": "error",
        "message": "Access to field `nextCreate` on foreign value `graph` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 226,
        "column": 7,
        "type": "error",
        "message": "Access to field `nextCreate` on foreign value `graph` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 226,
        "column": 26,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 231,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Graph'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 231,
        "column": 10,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 252,
        "column": 43,
        "type": "error",
        "message": "Parameter 'map' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 267,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Element'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 271,
        "column": 26,
        "type": "error",
        "message": "Avoid variables with short names like id",
        "source": "ShortVariable"
      },
      {
        "line": 287,
        "column": 31,
        "type": "error",
        "message": "It is somewhat confusing to have a field name matching the declaring class name",
        "source": "AvoidFieldNameMatchingTypeName"
      },
      {
        "line": 289,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Element(T, String, TypeAdapter<T>, JsonElement)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 289,
        "column": 15,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 289,
        "column": 29,
        "type": "error",
        "message": "Avoid variables with short names like id",
        "source": "ShortVariable"
      },
      {
        "line": 289,
        "column": 29,
        "type": "error",
        "message": "Parameter 'id' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 289,
        "column": 48,
        "type": "error",
        "message": "Parameter 'typeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 289,
        "column": 73,
        "type": "error",
        "message": "Parameter 'element' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 296,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on method 'write(JsonWriter)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 296,
        "column": 27,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 301,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on method 'read(Graph)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 301,
        "column": 21,
        "type": "error",
        "message": "Parameter 'graph' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 305,
        "column": 7,
        "type": "error",
        "message": "Access to field `nextCreate` on foreign value `graph` (degree 1)",
        "source": "LawOfDemeter"
      }
    ]
  },
  {
    "file": "/workspace/repo/extras/src/main/java/com/google/gson/interceptors/Intercept.java",
    "score": 9.5,
    "error_count": 1,
    "messages": [
      {
        "line": 63,
        "column": 48,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'postDeserialize': the method is declared in an annotation type",
        "source": "UnnecessaryModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/extras/src/main/java/com/google/gson/interceptors/InterceptorFactory.java",
    "score": 1.5,
    "error_count": 17,
    "messages": [
      {
        "line": 14,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 15,
        "column": 51,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 15,
        "column": 70,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 16,
        "column": 15,
        "type": "error",
        "message": "Local variable 'intercept' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 18,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 21,
        "column": 20,
        "type": "error",
        "message": "Local variable 'delegate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 25,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'InterceptorAdapter'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 30,
        "column": 12,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 30,
        "column": 46,
        "type": "error",
        "message": "Parameter 'delegate' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 30,
        "column": 66,
        "type": "error",
        "message": "Parameter 'intercept' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 34,
        "column": 16,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 35,
        "column": 19,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 39,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 39,
        "column": 51,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 43,
        "column": 40,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 43,
        "column": 40,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 44,
        "column": 9,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/extras/src/main/java/com/google/gson/interceptors/JsonPostDeserializer.java",
    "score": 9.5,
    "error_count": 1,
    "messages": [
      {
        "line": 32,
        "column": 15,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'postDeserialize': the method is declared in an interface type",
        "source": "UnnecessaryModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/extras/src/main/java/com/google/gson/typeadapters/PostConstructAdapterFactory.java",
    "score": 0.5,
    "error_count": 19,
    "messages": [
      {
        "line": 32,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 35,
        "column": 43,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 35,
        "column": 62,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 37,
        "column": 25,
        "type": "error",
        "message": "Local variable 'm' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 39,
        "column": 21,
        "type": "error",
        "message": "You should not modify visibility of constructors, methods or fields using setAccessible()",
        "source": "AvoidAccessibilityAlteration"
      },
      {
        "line": 40,
        "column": 36,
        "type": "error",
        "message": "Local variable 'delegate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 41,
        "column": 21,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 48,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'PostConstructAdapter'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 52,
        "column": 16,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 52,
        "column": 52,
        "type": "error",
        "message": "Parameter 'delegate' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 52,
        "column": 69,
        "type": "error",
        "message": "Parameter 'method' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 57,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 57,
        "column": 44,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 58,
        "column": 15,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 27,
        "type": "error",
        "message": "Thrown exception does not preserve the stack trace of exception 'e' on all code paths",
        "source": "PreserveStackTrace"
      },
      {
        "line": 65,
        "column": 67,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 66,
        "column": 31,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 72,
        "column": 48,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 72,
        "column": 55,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java",
    "score": 0.0,
    "error_count": 43,
    "messages": [
      {
        "line": 140,
        "column": 19,
        "type": "error",
        "message": "Field recognizeSubtypes has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 143,
        "column": 16,
        "type": "error",
        "message": "Parameter 'baseType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 143,
        "column": 33,
        "type": "error",
        "message": "Parameter 'typeFieldName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 143,
        "column": 56,
        "type": "error",
        "message": "Parameter 'maintainType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 145,
        "column": 7,
        "type": "error",
        "message": "Avoid throwing null pointer exceptions.",
        "source": "AvoidThrowingNullPointerException"
      },
      {
        "line": 158,
        "column": 50,
        "type": "error",
        "message": "Avoid using short method names",
        "source": "ShortMethodName"
      },
      {
        "line": 158,
        "column": 62,
        "type": "error",
        "message": "Parameter 'baseType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 158,
        "column": 79,
        "type": "error",
        "message": "Parameter 'typeFieldName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 158,
        "column": 102,
        "type": "error",
        "message": "Parameter 'maintainType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 166,
        "column": 50,
        "type": "error",
        "message": "Avoid using short method names",
        "source": "ShortMethodName"
      },
      {
        "line": 166,
        "column": 62,
        "type": "error",
        "message": "Parameter 'baseType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 166,
        "column": 79,
        "type": "error",
        "message": "Parameter 'typeFieldName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 174,
        "column": 50,
        "type": "error",
        "message": "Avoid using short method names",
        "source": "ShortMethodName"
      },
      {
        "line": 174,
        "column": 62,
        "type": "error",
        "message": "Parameter 'baseType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 194,
        "column": 74,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 194,
        "column": 87,
        "type": "error",
        "message": "Parameter 'label' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 196,
        "column": 7,
        "type": "error",
        "message": "Avoid throwing null pointer exceptions.",
        "source": "AvoidThrowingNullPointerException"
      },
      {
        "line": 213,
        "column": 74,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 218,
        "column": 29,
        "type": "error",
        "message": "The method 'create(Gson, TypeToken<R>)' has a cognitive complexity of 19, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 218,
        "column": 29,
        "type": "error",
        "message": "The method 'create(Gson, TypeToken<R>)' has an NPath complexity of 2048, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 218,
        "column": 41,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 218,
        "column": 60,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 220,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 222,
        "column": 14,
        "type": "error",
        "message": "Local variable 'rawType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 223,
        "column": 13,
        "type": "error",
        "message": "Local variable 'handle' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 226,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 229,
        "column": 36,
        "type": "error",
        "message": "Avoid excessively long variable names like jsonElementAdapter",
        "source": "LongVariable"
      },
      {
        "line": 232,
        "column": 38,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 233,
        "column": 22,
        "type": "error",
        "message": "Local variable 'delegate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 239,
        "column": 42,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 239,
        "column": 42,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 240,
        "column": 21,
        "type": "error",
        "message": "Local variable 'jsonElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 252,
        "column": 16,
        "type": "error",
        "message": "Local variable 'label' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 254,
        "column": 24,
        "type": "error",
        "message": "Local variable 'delegate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 262,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 262,
        "column": 53,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 263,
        "column": 18,
        "type": "error",
        "message": "Local variable 'srcType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 264,
        "column": 16,
        "type": "error",
        "message": "Declaration of 'label' can be moved closer to its usages",
        "source": "PrematureDeclaration"
      },
      {
        "line": 264,
        "column": 16,
        "type": "error",
        "message": "Local variable 'label' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 266,
        "column": 24,
        "type": "error",
        "message": "Local variable 'delegate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 271,
        "column": 20,
        "type": "error",
        "message": "Local variable 'jsonObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 278,
        "column": 20,
        "type": "error",
        "message": "Local variable 'clone' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 286,
        "column": 45,
        "type": "error",
        "message": "Local variable 'e' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/extras/src/main/java/com/google/gson/typeadapters/UtcDateTypeAdapter.java",
    "score": 0.0,
    "error_count": 60,
    "messages": [
      {
        "line": 33,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 33,
        "column": 14,
        "type": "error",
        "message": "Possible God Class (WMC=50, ATFD=10, TCC=0.000%)",
        "source": "GodClass"
      },
      {
        "line": 34,
        "column": 26,
        "type": "error",
        "message": "The final field name 'UTC_TIME_ZONE' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 37,
        "column": 32,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 37,
        "column": 42,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 41,
        "column": 14,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 31,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 47,
        "column": 31,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 52,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 54,
        "column": 16,
        "type": "error",
        "message": "Local variable 'date' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 66,
        "column": 31,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 76,
        "column": 37,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 76,
        "column": 51,
        "type": "error",
        "message": "Parameter 'millis' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 76,
        "column": 68,
        "type": "error",
        "message": "Avoid variables with short names like tz",
        "source": "ShortVariable"
      },
      {
        "line": 76,
        "column": 68,
        "type": "error",
        "message": "Parameter 'tz' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 77,
        "column": 16,
        "type": "error",
        "message": "Local variable 'calendar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 21,
        "type": "error",
        "message": "Local variable 'formatted' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 11,
        "type": "error",
        "message": "Local variable 'offset' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 7,
        "type": "error",
        "message": "Avoid if (x != y) ..; else ..;",
        "source": "ConfusingTernary"
      },
      {
        "line": 104,
        "column": 15,
        "type": "error",
        "message": "Local variable 'hours' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 104,
        "column": 32,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 105,
        "column": 15,
        "type": "error",
        "message": "Local variable 'minutes' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 105,
        "column": 34,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 123,
        "column": 44,
        "type": "error",
        "message": "Parameter 'buffer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 123,
        "column": 56,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 123,
        "column": 67,
        "type": "error",
        "message": "Parameter 'length' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 124,
        "column": 14,
        "type": "error",
        "message": "Local variable 'strValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 140,
        "column": 23,
        "type": "error",
        "message": "The method 'parse(String, ParsePosition)' has a NCSS line count of 63.",
        "source": "NcssCount"
      },
      {
        "line": 140,
        "column": 23,
        "type": "error",
        "message": "The method 'parse(String, ParsePosition)' has a cognitive complexity of 27, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 140,
        "column": 23,
        "type": "error",
        "message": "The method 'parse(String, ParsePosition)' has a cyclomatic complexity of 24.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 140,
        "column": 23,
        "type": "error",
        "message": "The method 'parse(String, ParsePosition)' has an NPath complexity of 3206, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 140,
        "column": 36,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 140,
        "column": 56,
        "type": "error",
        "message": "Parameter 'pos' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 141,
        "column": 22,
        "type": "error",
        "message": "The initializer for variable 'fail' is never used (overwritten on lines 226, 228 and 230)",
        "source": "UnusedAssignment"
      },
      {
        "line": 146,
        "column": 11,
        "type": "error",
        "message": "Local variable 'year' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 152,
        "column": 11,
        "type": "error",
        "message": "Local variable 'month' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 158,
        "column": 11,
        "type": "error",
        "message": "Local variable 'day' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 178,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 178,
        "column": 16,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 190,
        "column": 14,
        "type": "error",
        "message": "Declaration of 'timezoneId' can be moved closer to its usages",
        "source": "PrematureDeclaration"
      },
      {
        "line": 194,
        "column": 12,
        "type": "error",
        "message": "Local variable 'timezoneIndicator' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 196,
        "column": 16,
        "type": "error",
        "message": "Local variable 'timezoneOffset' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 199,
        "column": 39,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 206,
        "column": 16,
        "type": "error",
        "message": "Local variable 'timezone' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 211,
        "column": 16,
        "type": "error",
        "message": "Local variable 'calendar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 225,
        "column": 7,
        "type": "error",
        "message": "Exception thrown at line 203 is caught in this block.",
        "source": "ExceptionAsFlowControl"
      },
      {
        "line": 225,
        "column": 7,
        "type": "error",
        "message": "Exception thrown at line 208 is caught in this block.",
        "source": "ExceptionAsFlowControl"
      },
      {
        "line": 227,
        "column": 7,
        "type": "error",
        "message": "'catch' branch identical to 'IndexOutOfBoundsException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 229,
        "column": 7,
        "type": "error",
        "message": "'catch' branch identical to 'IndexOutOfBoundsException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 229,
        "column": 7,
        "type": "error",
        "message": "Exception thrown at line 192 is caught in this block.",
        "source": "ExceptionAsFlowControl"
      },
      {
        "line": 232,
        "column": 12,
        "type": "error",
        "message": "Local variable 'input' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 244,
        "column": 45,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 244,
        "column": 56,
        "type": "error",
        "message": "Parameter 'offset' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 244,
        "column": 69,
        "type": "error",
        "message": "Parameter 'expected' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 257,
        "column": 22,
        "type": "error",
        "message": "The method 'parseInt(String, int, int)' has a cyclomatic complexity of 11.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 257,
        "column": 38,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 257,
        "column": 49,
        "type": "error",
        "message": "Parameter 'beginIndex' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 257,
        "column": 65,
        "type": "error",
        "message": "Parameter 'endIndex' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 257,
        "column": 82,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 262,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      }
    ]
  },
  {
    "file": "/workspace/repo/extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java",
    "score": 0.0,
    "error_count": 67,
    "messages": [
      {
        "line": 19,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 20,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertSame'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 33,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 36,
        "column": 14,
        "type": "error",
        "message": "Local variable 'rock' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 37,
        "column": 14,
        "type": "error",
        "message": "Local variable 'scissors' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 38,
        "column": 14,
        "type": "error",
        "message": "Local variable 'paper' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 39,
        "column": 5,
        "type": "error",
        "message": "Access to field `beats` on foreign value `rock` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 40,
        "column": 5,
        "type": "error",
        "message": "Access to field `beats` on foreign value `scissors` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 41,
        "column": 5,
        "type": "error",
        "message": "Access to field `beats` on foreign value `paper` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 43,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 57,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 14,
        "type": "error",
        "message": "Local variable 'rock' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 14,
        "type": "error",
        "message": "Local variable 'scissors' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 25,
        "type": "error",
        "message": "Access to field `beats` on foreign value `rock` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 71,
        "column": 14,
        "type": "error",
        "message": "Local variable 'paper' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 78,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 14,
        "type": "error",
        "message": "Local variable 'suicide' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 93,
        "column": 10,
        "type": "error",
        "message": "Local variable 'listOfListsType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 10,
        "type": "error",
        "message": "Local variable 'listOfAnyType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 19,
        "type": "error",
        "message": "Local variable 'listOfLists' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 105,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 112,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 113,
        "column": 10,
        "type": "error",
        "message": "Local variable 'listOfAnyType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 10,
        "type": "error",
        "message": "Local variable 'listOfListsType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 121,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 123,
        "column": 19,
        "type": "error",
        "message": "Local variable 'listOfLists' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 131,
        "column": 13,
        "type": "error",
        "message": "Local variable 'google' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 135,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 140,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 150,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 155,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 157,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 160,
        "column": 13,
        "type": "error",
        "message": "Local variable 'company' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 162,
        "column": 14,
        "type": "error",
        "message": "Local variable 'jesse' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 162,
        "column": 22,
        "type": "error",
        "message": "Access to field `employees` on foreign value `company` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 162,
        "column": 22,
        "type": "error",
        "message": "Call to `get` on foreign value `company.employees` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 165,
        "column": 14,
        "type": "error",
        "message": "Local variable 'joel' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 165,
        "column": 21,
        "type": "error",
        "message": "Access to field `employees` on foreign value `company` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 165,
        "column": 21,
        "type": "error",
        "message": "Call to `get` on foreign value `company.employees` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 170,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Roshambo'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 171,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 172,
        "column": 14,
        "type": "error",
        "message": "Missing commented default access modifier on field 'beats'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 173,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Roshambo(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 173,
        "column": 21,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 178,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Employee'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 179,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 180,
        "column": 19,
        "type": "error",
        "message": "Missing commented default access modifier on field 'company'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 181,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Employee(String, Company)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 181,
        "column": 21,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 181,
        "column": 35,
        "type": "error",
        "message": "Parameter 'company' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 184,
        "column": 7,
        "type": "error",
        "message": "Access to field `employees` on foreign value `this.company` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 188,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Company'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 189,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 190,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'employees'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 191,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Company(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 191,
        "column": 20,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/extras/src/test/java/com/google/gson/interceptors/InterceptorTest.java",
    "score": 0.0,
    "error_count": 63,
    "messages": [
      {
        "line": 39,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 53,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 60,
        "column": 10,
        "type": "error",
        "message": "Local variable 'user' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 65,
        "column": 16,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 66,
        "column": 10,
        "type": "error",
        "message": "Local variable 'user' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 71,
        "column": 22,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 10,
        "type": "error",
        "message": "Local variable 'user' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 77,
        "column": 10,
        "type": "error",
        "message": "Local variable 'mapType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 82,
        "column": 24,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 26,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 89,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 89,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Local variable 'userGroup' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 38,
        "type": "error",
        "message": "Access to field `user` on foreign value `userGroup` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 95,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 101,
        "column": 49,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 104,
        "column": 20,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 106,
        "column": 20,
        "type": "error",
        "message": "Local variable 'password' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 15,
        "type": "error",
        "message": "Local variable 'userGroup' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 38,
        "type": "error",
        "message": "Access to field `user` on foreign value `userGroup` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 117,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 117,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 118,
        "column": 28,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Local variable 'userGroup' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 120,
        "column": 38,
        "type": "error",
        "message": "Access to field `user` on foreign value `userGroup` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 125,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on field 'user'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 126,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'city'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 131,
        "column": 24,
        "type": "error",
        "message": "Avoid short class names like User",
        "source": "ShortClassName"
      },
      {
        "line": 132,
        "column": 25,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_EMAIL'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 133,
        "column": 12,
        "type": "error",
        "message": "Field 'name' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 133,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 134,
        "column": 12,
        "type": "error",
        "message": "Field 'password' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 134,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'password'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 135,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'email'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 136,
        "column": 13,
        "type": "error",
        "message": "Missing commented default access modifier on field 'address'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 137,
        "column": 24,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 137,
        "column": 37,
        "type": "error",
        "message": "Parameter 'password' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 144,
        "column": 48,
        "type": "error",
        "message": "Parameter 'user' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 148,
        "column": 31,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 155,
        "column": 25,
        "type": "error",
        "message": "Avoid excessively long variable names like DEFAULT_FIRST_LINE",
        "source": "LongVariable"
      },
      {
        "line": 155,
        "column": 25,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_FIRST_LINE'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 156,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'firstLine'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 157,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'secondLine'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 158,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'city'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 159,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'state'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 160,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'zip'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 164,
        "column": 51,
        "type": "error",
        "message": "Parameter 'address' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 168,
        "column": 38,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      }
    ]
  },
  {
    "file": "/workspace/repo/extras/src/test/java/com/google/gson/typeadapters/PostConstructAdapterFactoryTest.java",
    "score": 0.0,
    "error_count": 37,
    "messages": [
      {
        "line": 26,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 27,
        "column": 17,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 27,
        "column": 17,
        "type": "error",
        "message": "The JUnit 3 test method name 'test' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 27,
        "column": 17,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 27,
        "column": 17,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 28,
        "column": 14,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 40,
        "column": 17,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 40,
        "column": 17,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 40,
        "column": 17,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 41,
        "column": 28,
        "type": "error",
        "message": "Local variable 'sandwiches' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 14,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 48,
        "column": 16,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like sandwichesFromJson",
        "source": "LongVariable"
      },
      {
        "line": 51,
        "column": 28,
        "type": "error",
        "message": "Local variable 'sandwichesFromJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Sandwich'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 60,
        "column": 32,
        "type": "error",
        "message": "Parameter 'bread' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 60,
        "column": 46,
        "type": "error",
        "message": "Parameter 'cheese' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 65,
        "column": 37,
        "type": "error",
        "message": "Avoid unused private methods such as 'validate()'.",
        "source": "UnusedPrivateMethod"
      },
      {
        "line": 66,
        "column": 17,
        "type": "error",
        "message": "Position literals first in String comparisons",
        "source": "LiteralsFirstInComparisons"
      },
      {
        "line": 72,
        "column": 24,
        "type": "error",
        "message": "Ensure you override both equals() and hashCode()",
        "source": "OverrideBothEqualsAndHashcode"
      },
      {
        "line": 72,
        "column": 24,
        "type": "error",
        "message": "The method 'equals(Object)' has a cyclomatic complexity of 11.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 72,
        "column": 38,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 72,
        "column": 38,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 74,
        "column": 17,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 77,
        "column": 17,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 81,
        "column": 17,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 83,
        "column": 13,
        "type": "error",
        "message": "This if statement can be replaced by `return !{condition};`",
        "source": "SimplifyBooleanReturns"
      },
      {
        "line": 84,
        "column": 17,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 91,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'MultipleSandwiches'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 94,
        "column": 50,
        "type": "error",
        "message": "Parameter 'sandwiches' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 99,
        "column": 24,
        "type": "error",
        "message": "Ensure you override both equals() and hashCode()",
        "source": "OverrideBothEqualsAndHashcode"
      },
      {
        "line": 99,
        "column": 38,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 99,
        "column": 38,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 101,
        "column": 17,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 104,
        "column": 17,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 107,
        "column": 13,
        "type": "error",
        "message": "This if statement can be replaced by `return !{condition};`",
        "source": "SimplifyBooleanReturns"
      },
      {
        "line": 108,
        "column": 17,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      }
    ]
  },
  {
    "file": "/workspace/repo/extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java",
    "score": 0.0,
    "error_count": 97,
    "messages": [
      {
        "line": 25,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 25,
        "column": 67,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 27,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 27,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 27,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 28,
        "column": 50,
        "type": "error",
        "message": "Local variable 'rta' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 31,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 35,
        "column": 16,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 35,
        "column": 42,
        "type": "error",
        "message": "The String literal \"Jesse\" appears 8 times in this file; the first occurrence is on line 35",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 38,
        "column": 23,
        "type": "error",
        "message": "Local variable 'deserialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 48,
        "column": 50,
        "type": "error",
        "message": "Local variable 'rta' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 16,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 59,
        "column": 23,
        "type": "error",
        "message": "Local variable 'deserialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 66,
        "column": 24,
        "type": "error",
        "message": "Local variable 'rta' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 23,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 23,
        "type": "error",
        "message": "Local variable 'deserialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 81,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 82,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 85,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 85,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 89,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 89,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 90,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 93,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 93,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 97,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 97,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 98,
        "column": 50,
        "type": "error",
        "message": "Local variable 'rta' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 103,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 103,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 108,
        "column": 50,
        "type": "error",
        "message": "Local variable 'rta' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 113,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 113,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 117,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 117,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 118,
        "column": 50,
        "type": "error",
        "message": "Local variable 'rta' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 121,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 129,
        "column": 50,
        "type": "error",
        "message": "Local variable 'rta' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 132,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 139,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 139,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 140,
        "column": 24,
        "type": "error",
        "message": "Local variable 'billingAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 142,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 145,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 152,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 152,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 153,
        "column": 24,
        "type": "error",
        "message": "Local variable 'billingAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 155,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 158,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 166,
        "column": 24,
        "type": "error",
        "message": "Local variable 'billingAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 168,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 171,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 178,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 178,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 179,
        "column": 24,
        "type": "error",
        "message": "Local variable 'billingAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 181,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 184,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 191,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 191,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 192,
        "column": 24,
        "type": "error",
        "message": "Local variable 'billingAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 195,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 198,
        "column": 12,
        "type": "error",
        "message": "Local variable 'serialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 199,
        "column": 30,
        "type": "error",
        "message": "Local variable 'deserialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 203,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'BillingInstrumentWrapper'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 204,
        "column": 23,
        "type": "error",
        "message": "Missing commented default access modifier on field 'instrument'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 205,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'BillingInstrumentWrapper(BillingInstrument)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 205,
        "column": 48,
        "type": "error",
        "message": "Parameter 'instrument' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 210,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'BillingInstrument'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 212,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'BillingInstrument(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 212,
        "column": 30,
        "type": "error",
        "message": "Parameter 'ownerName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 217,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'CreditCard'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 218,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'cvv'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 219,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'CreditCard(String, int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 219,
        "column": 23,
        "type": "error",
        "message": "Parameter 'ownerName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 219,
        "column": 38,
        "type": "error",
        "message": "Parameter 'cvv' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 225,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'BankTransfer'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 226,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'bankAccount'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 227,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'BankTransfer(String, int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 227,
        "column": 25,
        "type": "error",
        "message": "Parameter 'ownerName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 227,
        "column": 40,
        "type": "error",
        "message": "Parameter 'bankAccount' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/extras/src/test/java/com/google/gson/typeadapters/UtcDateTypeAdapterTest.java",
    "score": 0.0,
    "error_count": 32,
    "messages": [
      {
        "line": 29,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 35,
        "column": 10,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 36,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 37,
        "column": 10,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 42,
        "column": 17,
        "type": "error",
        "message": "Local variable 'timeZone' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 43,
        "column": 16,
        "type": "error",
        "message": "Local variable 'cal' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 44,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 14,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testUtcDatesOnJdkBefore1_7' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 57,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 64,
        "column": 10,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 22,
        "type": "error",
        "message": "Local variable 'iso8601Format' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expectedJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actualJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 10,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 75,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/ExclusionStrategy.java",
    "score": 8.5,
    "error_count": 3,
    "messages": [
      {
        "line": 99,
        "column": 18,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'shouldSkipField': the method is declared in an interface type",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 99,
        "column": 50,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 105,
        "column": 18,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'shouldSkipClass': the method is declared in an interface type",
        "source": "UnnecessaryModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/FieldAttributes.java",
    "score": 8.0,
    "error_count": 4,
    "messages": [
      {
        "line": 44,
        "column": 32,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 44,
        "column": 32,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 109,
        "column": 58,
        "type": "error",
        "message": "Parameter 'annotation' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 133,
        "column": 34,
        "type": "error",
        "message": "Parameter 'modifier' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/FieldNamingPolicy.java",
    "score": 0.0,
    "error_count": 36,
    "messages": [
      {
        "line": 38,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 38,
        "column": 49,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 54,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 54,
        "column": 49,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 72,
        "column": 3,
        "type": "error",
        "message": "Avoid excessively long variable names like UPPER_CAMEL_CASE_WITH_SPACES",
        "source": "LongVariable"
      },
      {
        "line": 73,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 73,
        "column": 49,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 92,
        "column": 3,
        "type": "error",
        "message": "Avoid excessively long variable names like UPPER_CASE_WITH_UNDERSCORES",
        "source": "LongVariable"
      },
      {
        "line": 93,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 93,
        "column": 49,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 110,
        "column": 3,
        "type": "error",
        "message": "Avoid excessively long variable names like LOWER_CASE_WITH_UNDERSCORES",
        "source": "LongVariable"
      },
      {
        "line": 111,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 111,
        "column": 49,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 134,
        "column": 3,
        "type": "error",
        "message": "Avoid excessively long variable names like LOWER_CASE_WITH_DASHES",
        "source": "LongVariable"
      },
      {
        "line": 135,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 135,
        "column": 49,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 158,
        "column": 3,
        "type": "error",
        "message": "Avoid excessively long variable names like LOWER_CASE_WITH_DOTS",
        "source": "LongVariable"
      },
      {
        "line": 159,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 159,
        "column": 49,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 168,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on method 'separateCamelCase(String, char)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 168,
        "column": 42,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 168,
        "column": 53,
        "type": "error",
        "message": "Parameter 'separator' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 169,
        "column": 19,
        "type": "error",
        "message": "Local variable 'translation' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 170,
        "column": 14,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 170,
        "column": 21,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 171,
        "column": 12,
        "type": "error",
        "message": "Local variable 'character' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 183,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on method 'upperCaseFirstLetter(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 183,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 183,
        "column": 45,
        "type": "error",
        "message": "Parameter 's' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 184,
        "column": 9,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 186,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 186,
        "column": 12,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 189,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 192,
        "column": 14,
        "type": "error",
        "message": "Local variable 'uppercased' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 195,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 197,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/FieldNamingStrategy.java",
    "score": 9.0,
    "error_count": 2,
    "messages": [
      {
        "line": 39,
        "column": 17,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'translateName': the method is declared in an interface type",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 39,
        "column": 37,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/Gson.java",
    "score": 0.0,
    "error_count": 279,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "A high number of imports can indicate a high degree of coupling within an object.",
        "source": "ExcessiveImports"
      },
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 141,
        "column": 14,
        "type": "error",
        "message": "Avoid short class names like Gson",
        "source": "ShortClassName"
      },
      {
        "line": 141,
        "column": 14,
        "type": "error",
        "message": "Possible God Class (WMC=97, ATFD=33, TCC=2.294%)",
        "source": "GodClass"
      },
      {
        "line": 141,
        "column": 14,
        "type": "error",
        "message": "The class 'Gson' has a total cyclomatic complexity of 97 (highest 10).",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 141,
        "column": 25,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 142,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like DEFAULT_JSON_NON_EXECUTABLE",
        "source": "LongVariable"
      },
      {
        "line": 142,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_JSON_NON_EXECUTABLE'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 143,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_LENIENT'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 144,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like DEFAULT_PRETTY_PRINT",
        "source": "LongVariable"
      },
      {
        "line": 144,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_PRETTY_PRINT'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 145,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like DEFAULT_ESCAPE_HTML",
        "source": "LongVariable"
      },
      {
        "line": 145,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_ESCAPE_HTML'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 146,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like DEFAULT_SERIALIZE_NULLS",
        "source": "LongVariable"
      },
      {
        "line": 146,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_SERIALIZE_NULLS'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 147,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like DEFAULT_COMPLEX_MAP_KEYS",
        "source": "LongVariable"
      },
      {
        "line": 147,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_COMPLEX_MAP_KEYS'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 148,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like DEFAULT_SPECIALIZE_FLOAT_VALUES",
        "source": "LongVariable"
      },
      {
        "line": 148,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_SPECIALIZE_FLOAT_VALUES'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 149,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like DEFAULT_USE_JDK_UNSAFE",
        "source": "LongVariable"
      },
      {
        "line": 149,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_USE_JDK_UNSAFE'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 150,
        "column": 23,
        "type": "error",
        "message": "Avoid excessively long variable names like DEFAULT_DATE_PATTERN",
        "source": "LongVariable"
      },
      {
        "line": 150,
        "column": 23,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_DATE_PATTERN'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 151,
        "column": 36,
        "type": "error",
        "message": "Avoid excessively long variable names like DEFAULT_FIELD_NAMING_STRATEGY",
        "source": "LongVariable"
      },
      {
        "line": 151,
        "column": 36,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_FIELD_NAMING_STRATEGY'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 152,
        "column": 33,
        "type": "error",
        "message": "Avoid excessively long variable names like DEFAULT_OBJECT_TO_NUMBER_STRATEGY",
        "source": "LongVariable"
      },
      {
        "line": 152,
        "column": 33,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_OBJECT_TO_NUMBER_STRATEGY'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 153,
        "column": 33,
        "type": "error",
        "message": "Avoid excessively long variable names like DEFAULT_NUMBER_TO_NUMBER_STRATEGY",
        "source": "LongVariable"
      },
      {
        "line": 153,
        "column": 33,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DEFAULT_NUMBER_TO_NUMBER_STRATEGY'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 155,
        "column": 31,
        "type": "error",
        "message": "Avoid excessively long variable names like JSON_NON_EXECUTABLE_PREFIX",
        "source": "LongVariable"
      },
      {
        "line": 169,
        "column": 40,
        "type": "error",
        "message": "Avoid excessively long variable names like constructorConstructor",
        "source": "LongVariable"
      },
      {
        "line": 170,
        "column": 57,
        "type": "error",
        "message": "Avoid excessively long variable names like jsonAdapterFactory",
        "source": "LongVariable"
      },
      {
        "line": 172,
        "column": 34,
        "type": "error",
        "message": "Missing commented default access modifier on field 'factories'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 174,
        "column": 18,
        "type": "error",
        "message": "Field excluder has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 174,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'excluder'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 175,
        "column": 29,
        "type": "error",
        "message": "Avoid excessively long variable names like fieldNamingStrategy",
        "source": "LongVariable"
      },
      {
        "line": 175,
        "column": 29,
        "type": "error",
        "message": "Field fieldNamingStrategy has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 175,
        "column": 29,
        "type": "error",
        "message": "Missing commented default access modifier on field 'fieldNamingStrategy'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 176,
        "column": 39,
        "type": "error",
        "message": "Missing commented default access modifier on field 'instanceCreators'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 177,
        "column": 17,
        "type": "error",
        "message": "Field serializeNulls has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 177,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on field 'serializeNulls'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 178,
        "column": 17,
        "type": "error",
        "message": "Avoid excessively long variable names like complexMapKeySerialization",
        "source": "LongVariable"
      },
      {
        "line": 178,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on field 'complexMapKeySerialization'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 179,
        "column": 17,
        "type": "error",
        "message": "Avoid excessively long variable names like generateNonExecutableJson",
        "source": "LongVariable"
      },
      {
        "line": 179,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on field 'generateNonExecutableJson'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 180,
        "column": 17,
        "type": "error",
        "message": "Field htmlSafe has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 180,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on field 'htmlSafe'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 181,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on field 'prettyPrinting'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 182,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on field 'lenient'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 183,
        "column": 17,
        "type": "error",
        "message": "Avoid excessively long variable names like serializeSpecialFloatingPointValues",
        "source": "LongVariable"
      },
      {
        "line": 183,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on field 'serializeSpecialFloatingPointValues'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 184,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on field 'useJdkUnsafe'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 185,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'datePattern'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 186,
        "column": 13,
        "type": "error",
        "message": "Missing commented default access modifier on field 'dateStyle'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 187,
        "column": 13,
        "type": "error",
        "message": "Missing commented default access modifier on field 'timeStyle'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 188,
        "column": 33,
        "type": "error",
        "message": "Avoid excessively long variable names like longSerializationPolicy",
        "source": "LongVariable"
      },
      {
        "line": 188,
        "column": 33,
        "type": "error",
        "message": "Missing commented default access modifier on field 'longSerializationPolicy'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 189,
        "column": 34,
        "type": "error",
        "message": "Missing commented default access modifier on field 'builderFactories'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 190,
        "column": 34,
        "type": "error",
        "message": "Avoid excessively long variable names like builderHierarchyFactories",
        "source": "LongVariable"
      },
      {
        "line": 190,
        "column": 34,
        "type": "error",
        "message": "Missing commented default access modifier on field 'builderHierarchyFactories'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 191,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like objectToNumberStrategy",
        "source": "LongVariable"
      },
      {
        "line": 191,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'objectToNumberStrategy'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 192,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like numberToNumberStrategy",
        "source": "LongVariable"
      },
      {
        "line": 192,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'numberToNumberStrategy'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 193,
        "column": 38,
        "type": "error",
        "message": "Missing commented default access modifier on field 'reflectionFilters'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 241,
        "column": 3,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Gson(Excluder, FieldNamingStrategy, Map<Type, InstanceCreator<?>>, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, LongSerializationPolicy, String, int, int, List<TypeAdapterFactory>, List<TypeAdapterFactory>, List<TypeAdapterFactory>, ToNumberStrategy, ToNumberStrategy, List<ReflectionAccessFilter>)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 241,
        "column": 3,
        "type": "error",
        "message": "The constructor 'Gson(Excluder, FieldNamingStrategy, Map<Type, InstanceCreator<?>>, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, LongSerializationPolicy, String, int, int, List<TypeAdapterFactory>, List<TypeAdapterFactory>, List<TypeAdapterFactory>, ToNumberStrategy, ToNumberStrategy, List<ReflectionAccessFilter>)' has a NCSS line count of 70.",
        "source": "NcssCount"
      },
      {
        "line": 241,
        "column": 7,
        "type": "error",
        "message": "Avoid long parameter lists.",
        "source": "ExcessiveParameterList"
      },
      {
        "line": 241,
        "column": 17,
        "type": "error",
        "message": "Parameter 'excluder' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 241,
        "column": 47,
        "type": "error",
        "message": "Avoid excessively long variable names like fieldNamingStrategy",
        "source": "LongVariable"
      },
      {
        "line": 241,
        "column": 47,
        "type": "error",
        "message": "Parameter 'fieldNamingStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 242,
        "column": 37,
        "type": "error",
        "message": "Parameter 'instanceCreators' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 242,
        "column": 63,
        "type": "error",
        "message": "Parameter 'serializeNulls' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 243,
        "column": 15,
        "type": "error",
        "message": "Avoid excessively long variable names like complexMapKeySerialization",
        "source": "LongVariable"
      },
      {
        "line": 243,
        "column": 15,
        "type": "error",
        "message": "Parameter 'complexMapKeySerialization' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 243,
        "column": 51,
        "type": "error",
        "message": "Avoid excessively long variable names like generateNonExecutableGson",
        "source": "LongVariable"
      },
      {
        "line": 243,
        "column": 51,
        "type": "error",
        "message": "Parameter 'generateNonExecutableGson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 243,
        "column": 86,
        "type": "error",
        "message": "Parameter 'htmlSafe' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 244,
        "column": 15,
        "type": "error",
        "message": "Parameter 'prettyPrinting' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 244,
        "column": 39,
        "type": "error",
        "message": "Parameter 'lenient' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 244,
        "column": 56,
        "type": "error",
        "message": "Avoid excessively long variable names like serializeSpecialFloatingPointValues",
        "source": "LongVariable"
      },
      {
        "line": 244,
        "column": 56,
        "type": "error",
        "message": "Parameter 'serializeSpecialFloatingPointValues' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 245,
        "column": 15,
        "type": "error",
        "message": "Parameter 'useJdkUnsafe' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 246,
        "column": 31,
        "type": "error",
        "message": "Avoid excessively long variable names like longSerializationPolicy",
        "source": "LongVariable"
      },
      {
        "line": 246,
        "column": 31,
        "type": "error",
        "message": "Parameter 'longSerializationPolicy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 246,
        "column": 63,
        "type": "error",
        "message": "Parameter 'datePattern' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 246,
        "column": 80,
        "type": "error",
        "message": "Parameter 'dateStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 247,
        "column": 11,
        "type": "error",
        "message": "Parameter 'timeStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 247,
        "column": 47,
        "type": "error",
        "message": "Parameter 'builderFactories' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 248,
        "column": 32,
        "type": "error",
        "message": "Avoid excessively long variable names like builderHierarchyFactories",
        "source": "LongVariable"
      },
      {
        "line": 248,
        "column": 32,
        "type": "error",
        "message": "Parameter 'builderHierarchyFactories' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 249,
        "column": 32,
        "type": "error",
        "message": "Avoid excessively long variable names like factoriesToBeAdded",
        "source": "LongVariable"
      },
      {
        "line": 249,
        "column": 32,
        "type": "error",
        "message": "Parameter 'factoriesToBeAdded' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 250,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like objectToNumberStrategy",
        "source": "LongVariable"
      },
      {
        "line": 250,
        "column": 24,
        "type": "error",
        "message": "Parameter 'objectToNumberStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 250,
        "column": 65,
        "type": "error",
        "message": "Avoid excessively long variable names like numberToNumberStrategy",
        "source": "LongVariable"
      },
      {
        "line": 250,
        "column": 65,
        "type": "error",
        "message": "Parameter 'numberToNumberStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 251,
        "column": 36,
        "type": "error",
        "message": "Parameter 'reflectionFilters' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 274,
        "column": 30,
        "type": "error",
        "message": "Local variable 'factories' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 292,
        "column": 25,
        "type": "error",
        "message": "Local variable 'longAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 391,
        "column": 53,
        "type": "error",
        "message": "Avoid excessively long variable names like serializeSpecialFloatingPointValues",
        "source": "LongVariable"
      },
      {
        "line": 391,
        "column": 53,
        "type": "error",
        "message": "Parameter 'serializeSpecialFloatingPointValues' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 393,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 395,
        "column": 27,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 396,
        "column": 47,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 396,
        "column": 47,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 399,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 403,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 403,
        "column": 58,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 408,
        "column": 16,
        "type": "error",
        "message": "Local variable 'doubleValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 415,
        "column": 52,
        "type": "error",
        "message": "Avoid excessively long variable names like serializeSpecialFloatingPointValues",
        "source": "LongVariable"
      },
      {
        "line": 415,
        "column": 52,
        "type": "error",
        "message": "Parameter 'serializeSpecialFloatingPointValues' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 417,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 419,
        "column": 27,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 420,
        "column": 46,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 420,
        "column": 46,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 423,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 427,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 427,
        "column": 58,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 432,
        "column": 15,
        "type": "error",
        "message": "Local variable 'floatValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 436,
        "column": 16,
        "type": "error",
        "message": "Local variable 'floatNumber' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 442,
        "column": 15,
        "type": "error",
        "message": "Missing commented default access modifier on method 'checkValidFloatingPoint(double)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 442,
        "column": 46,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 450,
        "column": 74,
        "type": "error",
        "message": "Avoid excessively long variable names like longSerializationPolicy",
        "source": "LongVariable"
      },
      {
        "line": 450,
        "column": 74,
        "type": "error",
        "message": "Parameter 'longSerializationPolicy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 452,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 454,
        "column": 27,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 455,
        "column": 47,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 455,
        "column": 47,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 458,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 462,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 462,
        "column": 58,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 474,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 474,
        "column": 62,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 477,
        "column": 51,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 477,
        "column": 51,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 478,
        "column": 16,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 486,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 486,
        "column": 67,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 488,
        "column": 18,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 488,
        "column": 25,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 493,
        "column": 56,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 493,
        "column": 56,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 494,
        "column": 20,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 497,
        "column": 18,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 501,
        "column": 13,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 502,
        "column": 25,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 517,
        "column": 53,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 519,
        "column": 20,
        "type": "error",
        "message": "Local variable 'cached' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 521,
        "column": 25,
        "type": "error",
        "message": "The String literal \"unchecked\" appears 8 times in this file; the first occurrence is on line 521",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 522,
        "column": 22,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 523,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 527,
        "column": 13,
        "type": "error",
        "message": "Avoid excessively long variable names like requiresThreadLocalCleanup",
        "source": "LongVariable"
      },
      {
        "line": 536,
        "column": 26,
        "type": "error",
        "message": "Local variable 'ongoingCall' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 538,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 542,
        "column": 28,
        "type": "error",
        "message": "Local variable 'call' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 545,
        "column": 31,
        "type": "error",
        "message": "Local variable 'factory' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 549,
        "column": 26,
        "type": "error",
        "message": "Local variable 'existingAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 619,
        "column": 90,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 623,
        "column": 7,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'skipPast'",
        "source": "AvoidReassigningParameters"
      },
      {
        "line": 627,
        "column": 29,
        "type": "error",
        "message": "Local variable 'factory' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 629,
        "column": 13,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 635,
        "column": 22,
        "type": "error",
        "message": "Local variable 'candidate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 649,
        "column": 49,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 668,
        "column": 40,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 670,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 693,
        "column": 40,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 693,
        "column": 50,
        "type": "error",
        "message": "Parameter 'typeOfSrc' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 694,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 694,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 715,
        "column": 31,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 717,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 740,
        "column": 31,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 740,
        "column": 41,
        "type": "error",
        "message": "Parameter 'typeOfSrc' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 741,
        "column": 18,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 764,
        "column": 15,
        "type": "error",
        "message": "Linguistics Antipattern - The transform method 'toJson' should not return void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 764,
        "column": 29,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 764,
        "column": 45,
        "type": "error",
        "message": "Parameter 'writer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 764,
        "column": 60,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 792,
        "column": 15,
        "type": "error",
        "message": "Linguistics Antipattern - The transform method 'toJson' should not return void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 792,
        "column": 29,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 792,
        "column": 39,
        "type": "error",
        "message": "Parameter 'typeOfSrc' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 792,
        "column": 61,
        "type": "error",
        "message": "Parameter 'writer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 792,
        "column": 76,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 794,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this JsonWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 794,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 815,
        "column": 15,
        "type": "error",
        "message": "Linguistics Antipattern - The transform method 'toJson' should not return void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 815,
        "column": 29,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 815,
        "column": 39,
        "type": "error",
        "message": "Parameter 'typeOfSrc' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 815,
        "column": 61,
        "type": "error",
        "message": "Parameter 'writer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 815,
        "column": 76,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 817,
        "column": 25,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 818,
        "column": 13,
        "type": "error",
        "message": "Local variable 'oldLenient' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 820,
        "column": 13,
        "type": "error",
        "message": "Local variable 'oldHtmlSafe' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 822,
        "column": 13,
        "type": "error",
        "message": "Local variable 'oldSerializeNulls' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 829,
        "column": 22,
        "type": "error",
        "message": "Local variable 'error' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 846,
        "column": 36,
        "type": "error",
        "message": "Parameter 'jsonElement' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 847,
        "column": 18,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 860,
        "column": 15,
        "type": "error",
        "message": "Linguistics Antipattern - The transform method 'toJson' should not return void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 860,
        "column": 34,
        "type": "error",
        "message": "Parameter 'jsonElement' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 860,
        "column": 58,
        "type": "error",
        "message": "Parameter 'writer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 860,
        "column": 73,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 862,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this JsonWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 862,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 881,
        "column": 42,
        "type": "error",
        "message": "Parameter 'writer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 885,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 903,
        "column": 42,
        "type": "error",
        "message": "Parameter 'reader' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 904,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 922,
        "column": 15,
        "type": "error",
        "message": "Linguistics Antipattern - The transform method 'toJson' should not return void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 922,
        "column": 34,
        "type": "error",
        "message": "Parameter 'jsonElement' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 922,
        "column": 58,
        "type": "error",
        "message": "Parameter 'writer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 922,
        "column": 73,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 923,
        "column": 13,
        "type": "error",
        "message": "Local variable 'oldLenient' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 925,
        "column": 13,
        "type": "error",
        "message": "Local variable 'oldHtmlSafe' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 927,
        "column": 13,
        "type": "error",
        "message": "Local variable 'oldSerializeNulls' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 934,
        "column": 22,
        "type": "error",
        "message": "Local variable 'error' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 968,
        "column": 32,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 968,
        "column": 47,
        "type": "error",
        "message": "Parameter 'classOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 968,
        "column": 64,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 969,
        "column": 7,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1000,
        "column": 32,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1000,
        "column": 43,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1000,
        "column": 59,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1028,
        "column": 32,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1028,
        "column": 51,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1028,
        "column": 67,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1030,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1032,
        "column": 18,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1060,
        "column": 32,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1060,
        "column": 47,
        "type": "error",
        "message": "Parameter 'classOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1060,
        "column": 64,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1060,
        "column": 85,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1061,
        "column": 7,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1092,
        "column": 32,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1092,
        "column": 43,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1092,
        "column": 59,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1092,
        "column": 76,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1120,
        "column": 32,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1120,
        "column": 51,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1120,
        "column": 67,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1120,
        "column": 84,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1121,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1122,
        "column": 7,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1127,
        "column": 52,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1127,
        "column": 68,
        "type": "error",
        "message": "Parameter 'reader' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1170,
        "column": 36,
        "type": "error",
        "message": "Parameter 'reader' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1170,
        "column": 49,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1170,
        "column": 65,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1170,
        "column": 82,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1203,
        "column": 16,
        "type": "error",
        "message": "The method 'fromJson(JsonReader, TypeToken<T>)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 1203,
        "column": 36,
        "type": "error",
        "message": "Parameter 'reader' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1203,
        "column": 57,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1203,
        "column": 73,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1203,
        "column": 90,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1205,
        "column": 13,
        "type": "error",
        "message": "Local variable 'oldLenient' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1210,
        "column": 22,
        "type": "error",
        "message": "Local variable 'typeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1211,
        "column": 9,
        "type": "error",
        "message": "Consider simply returning the value vs storing it in local variable 'object'",
        "source": "UnnecessaryLocalBeforeReturn"
      },
      {
        "line": 1211,
        "column": 9,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1212,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1224,
        "column": 7,
        "type": "error",
        "message": "'catch' branch identical to 'IllegalStateException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 1228,
        "column": 22,
        "type": "error",
        "message": "Local variable 'error' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1257,
        "column": 37,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1257,
        "column": 52,
        "type": "error",
        "message": "Parameter 'classOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1257,
        "column": 69,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1258,
        "column": 7,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1286,
        "column": 37,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1286,
        "column": 48,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1286,
        "column": 64,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1312,
        "column": 37,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1312,
        "column": 56,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1312,
        "column": 72,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 1314,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1319,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'FutureTypeAdapter'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 1320,
        "column": 28,
        "type": "error",
        "message": "Field delegate has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 1322,
        "column": 44,
        "type": "error",
        "message": "Parameter 'typeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1340,
        "column": 40,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 1340,
        "column": 40,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1344,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1344,
        "column": 51,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/GsonBuilder.java",
    "score": 0.0,
    "error_count": 77,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "A high number of imports can indicate a high degree of coupling within an object.",
        "source": "ExcessiveImports"
      },
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "Too many static imports may lead to messy code",
        "source": "TooManyStaticImports"
      },
      {
        "line": 86,
        "column": 14,
        "type": "error",
        "message": "Possible God Class (WMC=49, ATFD=21, TCC=13.054%)",
        "source": "GodClass"
      },
      {
        "line": 86,
        "column": 32,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 86,
        "column": 32,
        "type": "error",
        "message": "Too many fields",
        "source": "TooManyFields"
      },
      {
        "line": 88,
        "column": 35,
        "type": "error",
        "message": "Avoid excessively long variable names like longSerializationPolicy",
        "source": "LongVariable"
      },
      {
        "line": 93,
        "column": 42,
        "type": "error",
        "message": "Avoid excessively long variable names like hierarchyFactories",
        "source": "LongVariable"
      },
      {
        "line": 94,
        "column": 19,
        "type": "error",
        "message": "Field serializeNulls has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 98,
        "column": 19,
        "type": "error",
        "message": "Avoid excessively long variable names like complexMapKeySerialization",
        "source": "LongVariable"
      },
      {
        "line": 99,
        "column": 19,
        "type": "error",
        "message": "Avoid excessively long variable names like serializeSpecialFloatingPointValues",
        "source": "LongVariable"
      },
      {
        "line": 99,
        "column": 19,
        "type": "error",
        "message": "Field serializeSpecialFloatingPointValues has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 102,
        "column": 19,
        "type": "error",
        "message": "Avoid excessively long variable names like generateNonExecutableJson",
        "source": "LongVariable"
      },
      {
        "line": 102,
        "column": 19,
        "type": "error",
        "message": "Field generateNonExecutableJson has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 105,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like objectToNumberStrategy",
        "source": "LongVariable"
      },
      {
        "line": 106,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like numberToNumberStrategy",
        "source": "LongVariable"
      },
      {
        "line": 107,
        "column": 17,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedList'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 124,
        "column": 3,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'GsonBuilder(Gson)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 124,
        "column": 20,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 125,
        "column": 21,
        "type": "error",
        "message": "Access to field `excluder` on foreign value `gson` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 126,
        "column": 30,
        "type": "error",
        "message": "Access to field `fieldNamingStrategy` on foreign value `gson` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 135,
        "column": 36,
        "type": "error",
        "message": "Access to field `longSerializationPolicy` on foreign value `gson` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 142,
        "column": 35,
        "type": "error",
        "message": "Access to field `objectToNumberStrategy` on foreign value `gson` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 143,
        "column": 35,
        "type": "error",
        "message": "Access to field `numberToNumberStrategy` on foreign value `gson` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 162,
        "column": 22,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setVersion' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 162,
        "column": 40,
        "type": "error",
        "message": "Parameter 'version' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 184,
        "column": 56,
        "type": "error",
        "message": "Parameter 'modifiers' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 346,
        "column": 22,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setLongSerializationPolicy' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 346,
        "column": 73,
        "type": "error",
        "message": "Avoid excessively long variable names like serializationPolicy",
        "source": "LongVariable"
      },
      {
        "line": 346,
        "column": 73,
        "type": "error",
        "message": "Parameter 'serializationPolicy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 357,
        "column": 22,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setFieldNamingPolicy' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 357,
        "column": 61,
        "type": "error",
        "message": "Parameter 'namingConvention' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 373,
        "column": 22,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setFieldNamingStrategy' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 373,
        "column": 65,
        "type": "error",
        "message": "Avoid excessively long variable names like fieldNamingStrategy",
        "source": "LongVariable"
      },
      {
        "line": 373,
        "column": 65,
        "type": "error",
        "message": "Parameter 'fieldNamingStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 386,
        "column": 22,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setObjectToNumberStrategy' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 386,
        "column": 65,
        "type": "error",
        "message": "Avoid excessively long variable names like objectToNumberStrategy",
        "source": "LongVariable"
      },
      {
        "line": 386,
        "column": 65,
        "type": "error",
        "message": "Parameter 'objectToNumberStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 399,
        "column": 22,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setNumberToNumberStrategy' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 399,
        "column": 65,
        "type": "error",
        "message": "Avoid excessively long variable names like numberToNumberStrategy",
        "source": "LongVariable"
      },
      {
        "line": 399,
        "column": 65,
        "type": "error",
        "message": "Parameter 'numberToNumberStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 430,
        "column": 22,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setExclusionStrategies' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 430,
        "column": 66,
        "type": "error",
        "message": "Parameter 'strategies' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 432,
        "column": 28,
        "type": "error",
        "message": "Local variable 'strategy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 453,
        "column": 74,
        "type": "error",
        "message": "Parameter 'strategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 474,
        "column": 76,
        "type": "error",
        "message": "Parameter 'strategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 486,
        "column": 22,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setPrettyPrinting' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 501,
        "column": 22,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setLenient' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 534,
        "column": 22,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setDateFormat' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 534,
        "column": 43,
        "type": "error",
        "message": "Parameter 'pattern' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 554,
        "column": 22,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setDateFormat' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 554,
        "column": 40,
        "type": "error",
        "message": "Parameter 'style' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 556,
        "column": 24,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 575,
        "column": 22,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setDateFormat' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 575,
        "column": 40,
        "type": "error",
        "message": "Parameter 'dateStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 575,
        "column": 55,
        "type": "error",
        "message": "Parameter 'timeStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 578,
        "column": 24,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 604,
        "column": 47,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 604,
        "column": 60,
        "type": "error",
        "message": "Parameter 'typeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 614,
        "column": 20,
        "type": "error",
        "message": "Local variable 'typeToken' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 619,
        "column": 26,
        "type": "error",
        "message": "Local variable 'factory' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 637,
        "column": 68,
        "type": "error",
        "message": "Parameter 'factory' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 657,
        "column": 60,
        "type": "error",
        "message": "Parameter 'baseType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 657,
        "column": 77,
        "type": "error",
        "message": "Parameter 'typeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 667,
        "column": 26,
        "type": "error",
        "message": "Local variable 'factory' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 739,
        "column": 71,
        "type": "error",
        "message": "Parameter 'filter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 752,
        "column": 30,
        "type": "error",
        "message": "Local variable 'factories' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 756,
        "column": 30,
        "type": "error",
        "message": "Avoid excessively long variable names like hierarchyFactories",
        "source": "LongVariable"
      },
      {
        "line": 756,
        "column": 30,
        "type": "error",
        "message": "Local variable 'hierarchyFactories' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 771,
        "column": 46,
        "type": "error",
        "message": "Parameter 'datePattern' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 771,
        "column": 63,
        "type": "error",
        "message": "Parameter 'dateStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 771,
        "column": 78,
        "type": "error",
        "message": "Parameter 'timeStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 772,
        "column": 32,
        "type": "error",
        "message": "Parameter 'factories' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 773,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like dateAdapterFactory",
        "source": "LongVariable"
      },
      {
        "line": 774,
        "column": 13,
        "type": "error",
        "message": "Local variable 'sqlTypesSupported' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 775,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like sqlTimestampAdapterFactory",
        "source": "LongVariable"
      },
      {
        "line": 776,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like sqlDateAdapterFactory",
        "source": "LongVariable"
      },
      {
        "line": 785,
        "column": 12,
        "type": "error",
        "message": "Avoid if (x != y) ..; else ..;",
        "source": "ConfusingTernary"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/InstanceCreator.java",
    "score": 9.5,
    "error_count": 1,
    "messages": [
      {
        "line": 91,
        "column": 12,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'createInstance': the method is declared in an interface type",
        "source": "UnnecessaryModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonArray.java",
    "score": 0.0,
    "error_count": 24,
    "messages": [
      {
        "line": 34,
        "column": 83,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 41,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 54,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 54,
        "column": 24,
        "type": "error",
        "message": "Parameter 'capacity' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 66,
        "column": 17,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 24,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 81,
        "column": 27,
        "type": "error",
        "message": "Parameter 'bool' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 91,
        "column": 29,
        "type": "error",
        "message": "Parameter 'character' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 101,
        "column": 26,
        "type": "error",
        "message": "Parameter 'number' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 111,
        "column": 26,
        "type": "error",
        "message": "Parameter 'string' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 122,
        "column": 7,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'element'",
        "source": "AvoidReassigningParameters"
      },
      {
        "line": 132,
        "column": 32,
        "type": "error",
        "message": "Parameter 'array' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 144,
        "column": 30,
        "type": "error",
        "message": "Parameter 'index' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 144,
        "column": 49,
        "type": "error",
        "message": "Parameter 'element' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 156,
        "column": 37,
        "type": "error",
        "message": "Parameter 'element' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 170,
        "column": 33,
        "type": "error",
        "message": "Parameter 'index' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 181,
        "column": 39,
        "type": "error",
        "message": "Parameter 'element' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 223,
        "column": 30,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 223,
        "column": 30,
        "type": "error",
        "message": "Parameter 'i' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 228,
        "column": 9,
        "type": "error",
        "message": "Local variable 'size' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 229,
        "column": 17,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 402,
        "column": 32,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 402,
        "column": 32,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonDeserializationContext.java",
    "score": 9.0,
    "error_count": 2,
    "messages": [
      {
        "line": 43,
        "column": 16,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'deserialize': the method is declared in an interface type",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 43,
        "column": 67,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonDeserializer.java",
    "score": 9.0,
    "error_count": 2,
    "messages": [
      {
        "line": 91,
        "column": 12,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'deserialize': the method is declared in an interface type",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 92,
        "column": 14,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonElement.java",
    "score": 8.0,
    "error_count": 4,
    "messages": [
      {
        "line": 40,
        "column": 10,
        "type": "error",
        "message": "Avoid unnecessary constructors - the compiler will generate these for you",
        "source": "UnnecessaryConstructor"
      },
      {
        "line": 161,
        "column": 18,
        "type": "error",
        "message": "A getX() method which returns a boolean should be named isX()",
        "source": "BooleanGetMethodName"
      },
      {
        "line": 320,
        "column": 20,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 321,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonIOException.java",
    "score": 8.0,
    "error_count": 4,
    "messages": [
      {
        "line": 28,
        "column": 33,
        "type": "error",
        "message": "Parameter 'msg' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 32,
        "column": 33,
        "type": "error",
        "message": "Parameter 'msg' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 32,
        "column": 48,
        "type": "error",
        "message": "Parameter 'cause' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 42,
        "column": 36,
        "type": "error",
        "message": "Parameter 'cause' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonNull.java",
    "score": 8.5,
    "error_count": 3,
    "messages": [
      {
        "line": 40,
        "column": 10,
        "type": "error",
        "message": "Avoid unnecessary constructors - the compiler will generate these for you",
        "source": "UnnecessaryConstructor"
      },
      {
        "line": 40,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 66,
        "column": 32,
        "type": "error",
        "message": "Parameter 'other' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonObject.java",
    "score": 0.0,
    "error_count": 24,
    "messages": [
      {
        "line": 33,
        "column": 51,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 34,
        "column": 17,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 40,
        "column": 10,
        "type": "error",
        "message": "Avoid unnecessary constructors - the compiler will generate these for you",
        "source": "UnnecessaryConstructor"
      },
      {
        "line": 40,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 50,
        "column": 16,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 41,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 26,
        "type": "error",
        "message": "Parameter 'property' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 65,
        "column": 48,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 77,
        "column": 36,
        "type": "error",
        "message": "Parameter 'property' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 88,
        "column": 34,
        "type": "error",
        "message": "Parameter 'property' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 88,
        "column": 51,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 99,
        "column": 34,
        "type": "error",
        "message": "Parameter 'property' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 99,
        "column": 51,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 110,
        "column": 34,
        "type": "error",
        "message": "Parameter 'property' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 110,
        "column": 52,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 121,
        "column": 34,
        "type": "error",
        "message": "Parameter 'property' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 121,
        "column": 54,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 161,
        "column": 29,
        "type": "error",
        "message": "Parameter 'memberName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 171,
        "column": 33,
        "type": "error",
        "message": "Parameter 'memberName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 183,
        "column": 50,
        "type": "error",
        "message": "Parameter 'memberName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 195,
        "column": 42,
        "type": "error",
        "message": "Parameter 'memberName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 207,
        "column": 44,
        "type": "error",
        "message": "Parameter 'memberName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 217,
        "column": 32,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 217,
        "column": 32,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonParseException.java",
    "score": 7.5,
    "error_count": 5,
    "messages": [
      {
        "line": 33,
        "column": 21,
        "type": "error",
        "message": "Missing commented default access modifier on field 'serialVersionUID'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 41,
        "column": 36,
        "type": "error",
        "message": "Parameter 'msg' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 51,
        "column": 36,
        "type": "error",
        "message": "Parameter 'msg' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 51,
        "column": 51,
        "type": "error",
        "message": "Parameter 'cause' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 61,
        "column": 39,
        "type": "error",
        "message": "Parameter 'cause' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonParser.java",
    "score": 0.0,
    "error_count": 23,
    "messages": [
      {
        "line": 36,
        "column": 10,
        "type": "error",
        "message": "Avoid unnecessary constructors - the compiler will generate these for you",
        "source": "UnnecessaryConstructor"
      },
      {
        "line": 50,
        "column": 48,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 50,
        "column": 61,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 67,
        "column": 29,
        "type": "error",
        "message": "The method 'parseReader(Reader)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 67,
        "column": 48,
        "type": "error",
        "message": "Parameter 'reader' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 67,
        "column": 63,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 67,
        "column": 80,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 69,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 19,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 79,
        "column": 7,
        "type": "error",
        "message": "'catch' branch identical to 'MalformedJsonException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 97,
        "column": 52,
        "type": "error",
        "message": "Parameter 'reader' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 98,
        "column": 14,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 98,
        "column": 31,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 99,
        "column": 13,
        "type": "error",
        "message": "Local variable 'lenient' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 105,
        "column": 7,
        "type": "error",
        "message": "'catch' branch identical to 'StackOverflowError' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 114,
        "column": 35,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 114,
        "column": 48,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 120,
        "column": 35,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 120,
        "column": 48,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 120,
        "column": 65,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 126,
        "column": 39,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 126,
        "column": 52,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 126,
        "column": 69,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonPrimitive.java",
    "score": 0.0,
    "error_count": 38,
    "messages": [
      {
        "line": 41,
        "column": 21,
        "type": "error",
        "message": "The String literal \"deprecation\" appears 4 times in this file; the first occurrence is on line 41",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 42,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 42,
        "column": 32,
        "type": "error",
        "message": "Parameter 'bool' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 52,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 52,
        "column": 31,
        "type": "error",
        "message": "Parameter 'number' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 62,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 62,
        "column": 31,
        "type": "error",
        "message": "Parameter 'string' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 73,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 73,
        "column": 34,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 73,
        "column": 34,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 107,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 107,
        "column": 14,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 133,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 153,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 155,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 239,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 239,
        "column": 12,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 253,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 257,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 258,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 261,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 262,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 273,
        "column": 32,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 275,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 278,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 280,
        "column": 19,
        "type": "error",
        "message": "Local variable 'other' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 282,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 285,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 285,
        "column": 43,
        "type": "error",
        "message": "Call to `getAsNumber` on foreign value `other` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 288,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 288,
        "column": 14,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 291,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 291,
        "column": 14,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 291,
        "column": 18,
        "type": "error",
        "message": "Call to `getAsNumber` on foreign value `other` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 292,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 301,
        "column": 51,
        "type": "error",
        "message": "Parameter 'primitive' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 303,
        "column": 14,
        "type": "error",
        "message": "Local variable 'number' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 304,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonSerializationContext.java",
    "score": 9.0,
    "error_count": 2,
    "messages": [
      {
        "line": 36,
        "column": 22,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'serialize': the method is declared in an interface type",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 48,
        "column": 22,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'serialize': the method is declared in an interface type",
        "source": "UnnecessaryModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonSerializer.java",
    "score": 9.5,
    "error_count": 1,
    "messages": [
      {
        "line": 88,
        "column": 22,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'serialize': the method is declared in an interface type",
        "source": "UnnecessaryModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonStreamParser.java",
    "score": 7.0,
    "error_count": 6,
    "messages": [
      {
        "line": 61,
        "column": 34,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 69,
        "column": 34,
        "type": "error",
        "message": "Parameter 'reader' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 85,
        "column": 22,
        "type": "error",
        "message": "The method 'next()' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 85,
        "column": 36,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 94,
        "column": 7,
        "type": "error",
        "message": "'catch' branch identical to 'StackOverflowError' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 97,
        "column": 13,
        "type": "error",
        "message": "Thrown exception does not preserve the stack trace of exception 'e' on all code paths",
        "source": "PreserveStackTrace"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/JsonSyntaxException.java",
    "score": 8.0,
    "error_count": 4,
    "messages": [
      {
        "line": 29,
        "column": 37,
        "type": "error",
        "message": "Parameter 'msg' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 33,
        "column": 37,
        "type": "error",
        "message": "Parameter 'msg' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 33,
        "column": 52,
        "type": "error",
        "message": "Parameter 'cause' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 44,
        "column": 40,
        "type": "error",
        "message": "Parameter 'cause' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/LongSerializationPolicy.java",
    "score": 8.0,
    "error_count": 4,
    "messages": [
      {
        "line": 37,
        "column": 49,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 39,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 53,
        "column": 49,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 55,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/ReflectionAccessFilter.java",
    "score": 6.5,
    "error_count": 7,
    "messages": [
      {
        "line": 74,
        "column": 5,
        "type": "error",
        "message": "Avoid excessively long variable names like BLOCK_INACCESSIBLE",
        "source": "LongVariable"
      },
      {
        "line": 105,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like BLOCK_INACCESSIBLE_JAVA",
        "source": "LongVariable"
      },
      {
        "line": 106,
        "column": 50,
        "type": "error",
        "message": "Parameter 'rawClass' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 131,
        "column": 50,
        "type": "error",
        "message": "Parameter 'rawClass' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 155,
        "column": 50,
        "type": "error",
        "message": "Parameter 'rawClass' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 179,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like BLOCK_ALL_PLATFORM",
        "source": "LongVariable"
      },
      {
        "line": 180,
        "column": 50,
        "type": "error",
        "message": "Parameter 'rawClass' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/ToNumberPolicy.java",
    "score": 1.5,
    "error_count": 17,
    "messages": [
      {
        "line": 40,
        "column": 51,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 40,
        "column": 51,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 50,
        "column": 3,
        "type": "error",
        "message": "Avoid excessively long variable names like LAZILY_PARSED_NUMBER",
        "source": "LongVariable"
      },
      {
        "line": 51,
        "column": 51,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 51,
        "column": 51,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 66,
        "column": 51,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 66,
        "column": 51,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 66,
        "column": 75,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 67,
        "column": 14,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 72,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like d",
        "source": "ShortVariable"
      },
      {
        "line": 72,
        "column": 18,
        "type": "error",
        "message": "Local variable 'd' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 19,
        "type": "error",
        "message": "Thrown exception does not preserve the stack trace of exception 'longE' on all code paths",
        "source": "PreserveStackTrace"
      },
      {
        "line": 78,
        "column": 17,
        "type": "error",
        "message": "Thrown exception does not preserve the stack trace of exception 'longE' on all code paths",
        "source": "PreserveStackTrace"
      },
      {
        "line": 89,
        "column": 55,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 89,
        "column": 55,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 90,
        "column": 14,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/ToNumberStrategy.java",
    "score": 9.0,
    "error_count": 2,
    "messages": [
      {
        "line": 69,
        "column": 17,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'readNumber': the method is declared in an interface type",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 69,
        "column": 39,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/TypeAdapter.java",
    "score": 0.0,
    "error_count": 22,
    "messages": [
      {
        "line": 121,
        "column": 10,
        "type": "error",
        "message": "Avoid unnecessary constructors - the compiler will generate these for you",
        "source": "UnnecessaryConstructor"
      },
      {
        "line": 142,
        "column": 21,
        "type": "error",
        "message": "Linguistics Antipattern - The transform method 'toJson' should not return void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 142,
        "column": 35,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 142,
        "column": 42,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 143,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 188,
        "column": 27,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 189,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 189,
        "column": 53,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 196,
        "column": 42,
        "type": "error",
        "message": "Parameter 'reader' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 199,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 216,
        "column": 32,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 217,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 234,
        "column": 41,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 236,
        "column": 22,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 236,
        "column": 22,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 250,
        "column": 37,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 264,
        "column": 34,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 264,
        "column": 34,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 265,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 281,
        "column": 34,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 293,
        "column": 43,
        "type": "error",
        "message": "Parameter 'jsonTree' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 295,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/annotations/Expose.java",
    "score": 9.0,
    "error_count": 2,
    "messages": [
      {
        "line": 72,
        "column": 18,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'serialize': the method is declared in an annotation type",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 80,
        "column": 18,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'deserialize': the method is declared in an annotation type",
        "source": "UnnecessaryModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/$Gson$Preconditions.java",
    "score": 7.5,
    "error_count": 5,
    "messages": [
      {
        "line": 34,
        "column": 14,
        "type": "error",
        "message": "Avoid using dollar signs in variable/method/class/interface names",
        "source": "AvoidDollarSigns"
      },
      {
        "line": 34,
        "column": 14,
        "type": "error",
        "message": "The utility class name '$Gson$Preconditions' doesn't match '[A-Z][a-zA-Z0-9]*'",
        "source": "ClassNamingConventions"
      },
      {
        "line": 45,
        "column": 38,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 47,
        "column": 7,
        "type": "error",
        "message": "Avoid throwing null pointer exceptions.",
        "source": "AvoidThrowingNullPointerException"
      },
      {
        "line": 52,
        "column": 44,
        "type": "error",
        "message": "Parameter 'condition' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/$Gson$Types.java",
    "score": 0.0,
    "error_count": 191,
    "messages": [
      {
        "line": 44,
        "column": 14,
        "type": "error",
        "message": "Avoid using dollar signs in variable/method/class/interface names",
        "source": "AvoidDollarSigns"
      },
      {
        "line": 44,
        "column": 14,
        "type": "error",
        "message": "Possible God Class (WMC=89, ATFD=72, TCC=0.000%)",
        "source": "GodClass"
      },
      {
        "line": 44,
        "column": 14,
        "type": "error",
        "message": "The class '$Gson$Types' has a total cyclomatic complexity of 89 (highest 23).",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 44,
        "column": 14,
        "type": "error",
        "message": "The utility class name '$Gson$Types' doesn't match '[A-Z][a-zA-Z0-9]*'",
        "source": "ClassNamingConventions"
      },
      {
        "line": 44,
        "column": 32,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 45,
        "column": 23,
        "type": "error",
        "message": "Array initialization can be written shorter",
        "source": "UseShortArrayInitializer"
      },
      {
        "line": 45,
        "column": 23,
        "type": "error",
        "message": "Missing commented default access modifier on field 'EMPTY_TYPE_ARRAY'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "Parameter 'ownerType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 58,
        "column": 28,
        "type": "error",
        "message": "Parameter 'rawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 58,
        "column": 45,
        "type": "error",
        "message": "Parameter 'typeArguments' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 68,
        "column": 47,
        "type": "error",
        "message": "Parameter 'componentType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 78,
        "column": 45,
        "type": "error",
        "message": "Parameter 'bound' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 93,
        "column": 47,
        "type": "error",
        "message": "Parameter 'bound' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 108,
        "column": 40,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 110,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 110,
        "column": 16,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 114,
        "column": 25,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 114,
        "column": 25,
        "type": "error",
        "message": "Local variable 'p' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 119,
        "column": 24,
        "type": "error",
        "message": "Avoid variables with short names like g",
        "source": "ShortVariable"
      },
      {
        "line": 119,
        "column": 24,
        "type": "error",
        "message": "Local variable 'g' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 120,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 123,
        "column": 20,
        "type": "error",
        "message": "Avoid variables with short names like w",
        "source": "ShortVariable"
      },
      {
        "line": 123,
        "column": 20,
        "type": "error",
        "message": "Local variable 'w' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 124,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 132,
        "column": 42,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 135,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 138,
        "column": 25,
        "type": "error",
        "message": "Local variable 'parameterizedType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 143,
        "column": 12,
        "type": "error",
        "message": "Local variable 'rawType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 145,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 148,
        "column": 12,
        "type": "error",
        "message": "Local variable 'componentType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 154,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 157,
        "column": 14,
        "type": "error",
        "message": "Local variable 'bounds' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 163,
        "column": 14,
        "type": "error",
        "message": "Local variable 'className' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 39,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 169,
        "column": 39,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 169,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 169,
        "column": 49,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 170,
        "column": 12,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 176,
        "column": 25,
        "type": "error",
        "message": "The method 'equals(Type, Type)' has a cognitive complexity of 29, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 176,
        "column": 25,
        "type": "error",
        "message": "The method 'equals(Type, Type)' has a cyclomatic complexity of 11.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 176,
        "column": 37,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 176,
        "column": 37,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 176,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 176,
        "column": 45,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 179,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 183,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 187,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 191,
        "column": 25,
        "type": "error",
        "message": "Avoid variables with short names like pa",
        "source": "ShortVariable"
      },
      {
        "line": 191,
        "column": 25,
        "type": "error",
        "message": "Local variable 'pa' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 192,
        "column": 25,
        "type": "error",
        "message": "Avoid variables with short names like pb",
        "source": "ShortVariable"
      },
      {
        "line": 192,
        "column": 25,
        "type": "error",
        "message": "Local variable 'pb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 193,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 199,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 202,
        "column": 24,
        "type": "error",
        "message": "Avoid variables with short names like ga",
        "source": "ShortVariable"
      },
      {
        "line": 202,
        "column": 24,
        "type": "error",
        "message": "Local variable 'ga' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 203,
        "column": 24,
        "type": "error",
        "message": "Avoid variables with short names like gb",
        "source": "ShortVariable"
      },
      {
        "line": 203,
        "column": 24,
        "type": "error",
        "message": "Local variable 'gb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 204,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 208,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 211,
        "column": 20,
        "type": "error",
        "message": "Avoid variables with short names like wa",
        "source": "ShortVariable"
      },
      {
        "line": 211,
        "column": 20,
        "type": "error",
        "message": "Local variable 'wa' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 212,
        "column": 20,
        "type": "error",
        "message": "Avoid variables with short names like wb",
        "source": "ShortVariable"
      },
      {
        "line": 212,
        "column": 20,
        "type": "error",
        "message": "Local variable 'wb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 213,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 218,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 220,
        "column": 23,
        "type": "error",
        "message": "Avoid variables with short names like va",
        "source": "ShortVariable"
      },
      {
        "line": 220,
        "column": 23,
        "type": "error",
        "message": "Local variable 'va' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 221,
        "column": 23,
        "type": "error",
        "message": "Avoid variables with short names like vb",
        "source": "ShortVariable"
      },
      {
        "line": 221,
        "column": 23,
        "type": "error",
        "message": "Local variable 'vb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 222,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 231,
        "column": 42,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 240,
        "column": 23,
        "type": "error",
        "message": "The method 'getGenericSupertype(Type, Class<?>, Class<?>)' has a cognitive complexity of 17, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 240,
        "column": 23,
        "type": "error",
        "message": "The method 'getGenericSupertype(Type, Class<?>, Class<?>)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 240,
        "column": 48,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 240,
        "column": 84,
        "type": "error",
        "message": "Parameter 'supertype' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 242,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 247,
        "column": 18,
        "type": "error",
        "message": "Local variable 'interfaces' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 248,
        "column": 16,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 248,
        "column": 23,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 250,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 252,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 260,
        "column": 18,
        "type": "error",
        "message": "Local variable 'rawSupertype' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 262,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 264,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 266,
        "column": 9,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'rawType'",
        "source": "AvoidReassigningParameters"
      },
      {
        "line": 281,
        "column": 59,
        "type": "error",
        "message": "Parameter 'contextRawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 281,
        "column": 84,
        "type": "error",
        "message": "Parameter 'supertype' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 284,
        "column": 14,
        "type": "error",
        "message": "Local variable 'bounds' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 287,
        "column": 7,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'context'",
        "source": "AvoidReassigningParameters"
      },
      {
        "line": 291,
        "column": 9,
        "type": "error",
        "message": "Unnecessary qualifier '$Gson$Types': 'getGenericSupertype' is already in scope",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 298,
        "column": 49,
        "type": "error",
        "message": "Parameter 'array' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 308,
        "column": 52,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 308,
        "column": 70,
        "type": "error",
        "message": "Parameter 'contextRawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 309,
        "column": 10,
        "type": "error",
        "message": "Local variable 'collectionType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 312,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 321,
        "column": 52,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 321,
        "column": 70,
        "type": "error",
        "message": "Parameter 'contextRawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 328,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 331,
        "column": 10,
        "type": "error",
        "message": "Local variable 'mapType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 334,
        "column": 25,
        "type": "error",
        "message": "Avoid excessively long variable names like mapParameterizedType",
        "source": "LongVariable"
      },
      {
        "line": 334,
        "column": 25,
        "type": "error",
        "message": "Local variable 'mapParameterizedType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 335,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 340,
        "column": 35,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 340,
        "column": 53,
        "type": "error",
        "message": "Parameter 'contextRawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 340,
        "column": 74,
        "type": "error",
        "message": "Parameter 'toResolve' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 342,
        "column": 67,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new HashMap<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 345,
        "column": 23,
        "type": "error",
        "message": "The method 'resolve(Type, Class<?>, Type, Map<TypeVariable<?>, Type>)' has a NCSS line count of 67.",
        "source": "NcssCount"
      },
      {
        "line": 345,
        "column": 23,
        "type": "error",
        "message": "The method 'resolve(Type, Class<?>, Type, Map<TypeVariable<?>, Type>)' has a cognitive complexity of 80, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 345,
        "column": 23,
        "type": "error",
        "message": "The method 'resolve(Type, Class<?>, Type, Map<TypeVariable<?>, Type>)' has a cyclomatic complexity of 23.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 345,
        "column": 36,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 345,
        "column": 54,
        "type": "error",
        "message": "Parameter 'contextRawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 346,
        "column": 58,
        "type": "error",
        "message": "Avoid excessively long variable names like visitedTypeVariables",
        "source": "LongVariable"
      },
      {
        "line": 346,
        "column": 58,
        "type": "error",
        "message": "Parameter 'visitedTypeVariables' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 351,
        "column": 25,
        "type": "error",
        "message": "Local variable 'typeVariable' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 352,
        "column": 14,
        "type": "error",
        "message": "Avoid excessively long variable names like previouslyResolved",
        "source": "LongVariable"
      },
      {
        "line": 352,
        "column": 14,
        "type": "error",
        "message": "Local variable 'previouslyResolved' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 355,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 364,
        "column": 9,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'toResolve'",
        "source": "AvoidReassigningParameters"
      },
      {
        "line": 365,
        "column": 13,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 370,
        "column": 18,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 371,
        "column": 14,
        "type": "error",
        "message": "Local variable 'componentType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 372,
        "column": 14,
        "type": "error",
        "message": "Local variable 'newComponentType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 379,
        "column": 26,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 380,
        "column": 14,
        "type": "error",
        "message": "Local variable 'componentType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 381,
        "column": 14,
        "type": "error",
        "message": "Local variable 'newComponentType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 388,
        "column": 27,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 389,
        "column": 14,
        "type": "error",
        "message": "Local variable 'ownerType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 390,
        "column": 14,
        "type": "error",
        "message": "Local variable 'newOwnerType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 394,
        "column": 18,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 394,
        "column": 25,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 395,
        "column": 16,
        "type": "error",
        "message": "Avoid excessively long variable names like resolvedTypeArgument",
        "source": "LongVariable"
      },
      {
        "line": 395,
        "column": 16,
        "type": "error",
        "message": "Local variable 'resolvedTypeArgument' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 411,
        "column": 22,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 412,
        "column": 16,
        "type": "error",
        "message": "Avoid excessively long variable names like originalLowerBound",
        "source": "LongVariable"
      },
      {
        "line": 412,
        "column": 16,
        "type": "error",
        "message": "Local variable 'originalLowerBound' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 413,
        "column": 16,
        "type": "error",
        "message": "Avoid excessively long variable names like originalUpperBound",
        "source": "LongVariable"
      },
      {
        "line": 413,
        "column": 16,
        "type": "error",
        "message": "Local variable 'originalUpperBound' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 415,
        "column": 42,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 416,
        "column": 16,
        "type": "error",
        "message": "Local variable 'lowerBound' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 417,
        "column": 15,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 421,
        "column": 49,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 422,
        "column": 16,
        "type": "error",
        "message": "Local variable 'upperBound' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 423,
        "column": 15,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 442,
        "column": 48,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 442,
        "column": 66,
        "type": "error",
        "message": "Parameter 'contextRawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 442,
        "column": 98,
        "type": "error",
        "message": "Parameter 'unknown' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 443,
        "column": 14,
        "type": "error",
        "message": "Local variable 'declaredByRaw' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 447,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 450,
        "column": 10,
        "type": "error",
        "message": "Local variable 'declaredBy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 452,
        "column": 11,
        "type": "error",
        "message": "Local variable 'index' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 453,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 459,
        "column": 39,
        "type": "error",
        "message": "Parameter 'array' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 459,
        "column": 53,
        "type": "error",
        "message": "Parameter 'toFind' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 460,
        "column": 14,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 460,
        "column": 21,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 472,
        "column": 60,
        "type": "error",
        "message": "Parameter 'typeVariable' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 473,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like genericDeclaration",
        "source": "LongVariable"
      },
      {
        "line": 473,
        "column": 24,
        "type": "error",
        "message": "Local variable 'genericDeclaration' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 479,
        "column": 15,
        "type": "error",
        "message": "Missing commented default access modifier on method 'checkNotPrimitive(Type)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 479,
        "column": 38,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 488,
        "column": 39,
        "type": "error",
        "message": "Parameter 'ownerType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 488,
        "column": 55,
        "type": "error",
        "message": "Parameter 'rawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 488,
        "column": 72,
        "type": "error",
        "message": "Parameter 'typeArguments' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 492,
        "column": 18,
        "type": "error",
        "message": "Local variable 'rawTypeAsClass' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 493,
        "column": 17,
        "type": "error",
        "message": "Avoid excessively long variable names like isStaticOrTopLevelClass",
        "source": "LongVariable"
      },
      {
        "line": 493,
        "column": 17,
        "type": "error",
        "message": "Local variable 'isStaticOrTopLevelClass' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 498,
        "column": 44,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 501,
        "column": 16,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 501,
        "column": 23,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 520,
        "column": 44,
        "type": "error",
        "message": "Parameter 'other' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 525,
        "column": 46,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 525,
        "column": 46,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 536,
        "column": 11,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 538,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 541,
        "column": 21,
        "type": "error",
        "message": "Local variable 'stringBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 549,
        "column": 31,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 555,
        "column": 38,
        "type": "error",
        "message": "Parameter 'componentType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 564,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 564,
        "column": 44,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 577,
        "column": 31,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 590,
        "column": 36,
        "type": "error",
        "message": "Parameter 'upperBounds' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 590,
        "column": 49,
        "type": "error",
        "message": "Consider using varargs for methods or constructors which take an array the last parameter.",
        "source": "UseVarargs"
      },
      {
        "line": 590,
        "column": 56,
        "type": "error",
        "message": "Parameter 'lowerBounds' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 594,
        "column": 33,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 617,
        "column": 44,
        "type": "error",
        "message": "Parameter 'other' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 630,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 632,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 638,
        "column": 31,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
    "score": 0.0,
    "error_count": 82,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "A high number of imports can indicate a high degree of coupling within an object.",
        "source": "ExcessiveImports"
      },
      {
        "line": 58,
        "column": 63,
        "type": "error",
        "message": "Parameter 'instanceCreators' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 58,
        "column": 89,
        "type": "error",
        "message": "Parameter 'useJdkUnsafe' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 58,
        "column": 132,
        "type": "error",
        "message": "Parameter 'reflectionFilters' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 70,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on method 'checkInstantiable(Class<?>)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 70,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 70,
        "column": 44,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 71,
        "column": 9,
        "type": "error",
        "message": "Local variable 'modifiers' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 77,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 83,
        "column": 52,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 89,
        "column": 23,
        "type": "error",
        "message": "The String literal \"unchecked\" appears 7 times in this file; the first occurrence is on line 89",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 92,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 92,
        "column": 35,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 104,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 104,
        "column": 35,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 114,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like specialConstructor",
        "source": "LongVariable"
      },
      {
        "line": 114,
        "column": 26,
        "type": "error",
        "message": "Local variable 'specialConstructor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 119,
        "column": 18,
        "type": "error",
        "message": "Local variable 'filterResult' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 120,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like defaultConstructor",
        "source": "LongVariable"
      },
      {
        "line": 120,
        "column": 26,
        "type": "error",
        "message": "Local variable 'defaultConstructor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 122,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 125,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like defaultImplementation",
        "source": "LongVariable"
      },
      {
        "line": 125,
        "column": 26,
        "type": "error",
        "message": "Local variable 'defaultImplementation' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 127,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 134,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 134,
        "column": 35,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 145,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 150,
        "column": 35,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 161,
        "column": 43,
        "type": "error",
        "message": "The method 'newSpecialCollectionConstructor(Type, Class<? super T>)' has a cognitive complexity of 20, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 161,
        "column": 109,
        "type": "error",
        "message": "Parameter 'rawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 163,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 163,
        "column": 35,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 166,
        "column": 18,
        "type": "error",
        "message": "Local variable 'elementType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 17,
        "type": "error",
        "message": "Local variable 'set' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 183,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 183,
        "column": 35,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 186,
        "column": 18,
        "type": "error",
        "message": "Local variable 'elementType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 189,
        "column": 17,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 204,
        "column": 43,
        "type": "error",
        "message": "The method 'newDefaultConstructor(Class<? super T>, FilterResult)' has a cognitive complexity of 15, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 204,
        "column": 82,
        "type": "error",
        "message": "Parameter 'rawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 204,
        "column": 104,
        "type": "error",
        "message": "Parameter 'filterResult' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 207,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 214,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 217,
        "column": 13,
        "type": "error",
        "message": "Local variable 'canAccess' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 226,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 226,
        "column": 35,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 246,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 246,
        "column": 37,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 258,
        "column": 33,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 262,
        "column": 13,
        "type": "error",
        "message": "Local variable 'newInstance' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 266,
        "column": 21,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 270,
        "column": 21,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 284,
        "column": 43,
        "type": "error",
        "message": "The method 'newDefaultImplementationConstructor(Type, Class<? super T>)' has a cyclomatic complexity of 11.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 285,
        "column": 41,
        "type": "error",
        "message": "Parameter 'rawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 297,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 297,
        "column": 37,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 303,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 303,
        "column": 37,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 309,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 309,
        "column": 37,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 315,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 315,
        "column": 37,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 325,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 325,
        "column": 37,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 331,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 331,
        "column": 37,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 337,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 337,
        "column": 37,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 342,
        "column": 56,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 344,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 344,
        "column": 37,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 350,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 350,
        "column": 37,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 363,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 363,
        "column": 35,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 367,
        "column": 15,
        "type": "error",
        "message": "Local variable 'newInstance' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 369,
        "column": 20,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 370,
        "column": 23,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 370,
        "column": 40,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 380,
        "column": 35,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ObjectConstructor<>()`",
        "source": "UseDiamondOperator"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/Excluder.java",
    "score": 0.0,
    "error_count": 73,
    "messages": [
      {
        "line": 50,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 50,
        "column": 14,
        "type": "error",
        "message": "Possible God Class (WMC=49, ATFD=10, TCC=12.500%)",
        "source": "GodClass"
      },
      {
        "line": 50,
        "column": 70,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 56,
        "column": 19,
        "type": "error",
        "message": "Avoid excessively long variable names like serializeInnerClasses",
        "source": "LongVariable"
      },
      {
        "line": 58,
        "column": 35,
        "type": "error",
        "message": "Avoid excessively long variable names like serializationStrategies",
        "source": "LongVariable"
      },
      {
        "line": 59,
        "column": 35,
        "type": "error",
        "message": "Avoid excessively long variable names like deserializationStrategies",
        "source": "LongVariable"
      },
      {
        "line": 61,
        "column": 32,
        "type": "error",
        "message": "Avoid protected methods in a final class that doesnt extend anything other than Object.  Change to private or package access.",
        "source": "AvoidProtectedMethodInFinalClassNotExtending"
      },
      {
        "line": 61,
        "column": 32,
        "type": "error",
        "message": "clone() method must be public if the class implements Cloneable",
        "source": "CloneMethodMustBePublic"
      },
      {
        "line": 69,
        "column": 38,
        "type": "error",
        "message": "Avoid excessively long variable names like ignoreVersionsAfter",
        "source": "LongVariable"
      },
      {
        "line": 69,
        "column": 38,
        "type": "error",
        "message": "Parameter 'ignoreVersionsAfter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 70,
        "column": 14,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 40,
        "type": "error",
        "message": "Parameter 'modifiers' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 76,
        "column": 14,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 14,
        "type": "error",
        "message": "Local variable 'modifier' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 85,
        "column": 14,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 14,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 59,
        "type": "error",
        "message": "Parameter 'exclusionStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 97,
        "column": 15,
        "type": "error",
        "message": "Parameter 'serialization' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 97,
        "column": 38,
        "type": "error",
        "message": "Parameter 'deserialization' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 98,
        "column": 14,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 14,
        "type": "error",
        "message": "Local variable 'rawType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 112,
        "column": 13,
        "type": "error",
        "message": "Local variable 'excludeClass' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 121,
        "column": 27,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 123,
        "column": 30,
        "type": "error",
        "message": "Field delegate has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 125,
        "column": 42,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 125,
        "column": 42,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 128,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 133,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 133,
        "column": 53,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 142,
        "column": 24,
        "type": "error",
        "message": "Avoid variables with short names like d",
        "source": "ShortVariable"
      },
      {
        "line": 142,
        "column": 24,
        "type": "error",
        "message": "Local variable 'd' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 150,
        "column": 18,
        "type": "error",
        "message": "The method 'excludeField(Field, boolean)' has a cognitive complexity of 20, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 150,
        "column": 18,
        "type": "error",
        "message": "The method 'excludeField(Field, boolean)' has a cyclomatic complexity of 16.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 150,
        "column": 18,
        "type": "error",
        "message": "The method 'excludeField(Field, boolean)' has an NPath complexity of 2304, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 150,
        "column": 37,
        "type": "error",
        "message": "Parameter 'field' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 150,
        "column": 52,
        "type": "error",
        "message": "Parameter 'serialize' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 152,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 155,
        "column": 20,
        "type": "error",
        "message": "Unnecessary qualifier 'Excluder': 'IGNORE_VERSIONS' is already in scope because it is declared in an enclosing type",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 157,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 161,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 165,
        "column": 14,
        "type": "error",
        "message": "Local variable 'annotation' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 167,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 172,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 176,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 179,
        "column": 29,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 181,
        "column": 23,
        "type": "error",
        "message": "Local variable 'fieldAttributes' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 182,
        "column": 30,
        "type": "error",
        "message": "Local variable 'exclusionStrategy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 184,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 192,
        "column": 47,
        "type": "error",
        "message": "Parameter 'clazz' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 193,
        "column": 22,
        "type": "error",
        "message": "Unnecessary qualifier 'Excluder': 'IGNORE_VERSIONS' is already in scope because it is declared in an enclosing type",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 194,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 198,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 201,
        "column": 7,
        "type": "error",
        "message": "This if statement can be replaced by `return {condition};`",
        "source": "SimplifyBooleanReturns"
      },
      {
        "line": 202,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 208,
        "column": 40,
        "type": "error",
        "message": "Parameter 'clazz' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 208,
        "column": 55,
        "type": "error",
        "message": "Parameter 'serialize' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 213,
        "column": 51,
        "type": "error",
        "message": "Parameter 'clazz' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 213,
        "column": 66,
        "type": "error",
        "message": "Parameter 'serialize' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 214,
        "column": 31,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 215,
        "column": 30,
        "type": "error",
        "message": "Local variable 'exclusionStrategy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 217,
        "column": 15,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 223,
        "column": 56,
        "type": "error",
        "message": "Parameter 'clazz' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 228,
        "column": 41,
        "type": "error",
        "message": "Parameter 'clazz' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 232,
        "column": 37,
        "type": "error",
        "message": "Parameter 'clazz' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 236,
        "column": 40,
        "type": "error",
        "message": "Parameter 'since' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 236,
        "column": 53,
        "type": "error",
        "message": "Parameter 'until' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 240,
        "column": 38,
        "type": "error",
        "message": "Parameter 'annotation' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 242,
        "column": 14,
        "type": "error",
        "message": "Local variable 'annotationVersion' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 243,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 248,
        "column": 38,
        "type": "error",
        "message": "Parameter 'annotation' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 250,
        "column": 14,
        "type": "error",
        "message": "Local variable 'annotationVersion' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 251,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/JavaVersion.java",
    "score": 2.5,
    "error_count": 15,
    "messages": [
      {
        "line": 26,
        "column": 28,
        "type": "error",
        "message": "The constant name 'majorJavaVersion' doesn't match '[A-Z][A-Z_0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 29,
        "column": 12,
        "type": "error",
        "message": "Local variable 'javaVersion' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 34,
        "column": 14,
        "type": "error",
        "message": "Missing commented default access modifier on method 'getMajorJavaVersion(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 34,
        "column": 41,
        "type": "error",
        "message": "Parameter 'javaVersion' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 40,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 46,
        "column": 41,
        "type": "error",
        "message": "Parameter 'javaVersion' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 48,
        "column": 16,
        "type": "error",
        "message": "Local variable 'parts' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 11,
        "type": "error",
        "message": "Local variable 'firstVer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 53,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 60,
        "column": 49,
        "type": "error",
        "message": "Parameter 'javaVersion' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 62,
        "column": 21,
        "type": "error",
        "message": "Local variable 'num' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 64,
        "column": 14,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/JsonReaderInternalAccess.java",
    "score": 8.5,
    "error_count": 3,
    "messages": [
      {
        "line": 25,
        "column": 17,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 26,
        "column": 42,
        "type": "error",
        "message": "Do not use non-final non-private static fields",
        "source": "MutableStaticState"
      },
      {
        "line": 26,
        "column": 42,
        "type": "error",
        "message": "The static field name 'INSTANCE' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/LazilyParsedNumber.java",
    "score": 4.0,
    "error_count": 12,
    "messages": [
      {
        "line": 34,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 34,
        "column": 36,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 41,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 44,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 54,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 84,
        "column": 45,
        "type": "error",
        "message": "Avoid unused method parameters such as 'in'.",
        "source": "UnusedFormalParameter"
      },
      {
        "line": 84,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 95,
        "column": 32,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 97,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 100,
        "column": 26,
        "type": "error",
        "message": "Local variable 'other' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 101,
        "column": 14,
        "type": "error",
        "message": "Use equals() to compare strings instead of '==' or '!='",
        "source": "UseEqualsToCompareStrings"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java",
    "score": 0.0,
    "error_count": 225,
    "messages": [
      {
        "line": 42,
        "column": 14,
        "type": "error",
        "message": "Possible God Class (WMC=90, ATFD=100, TCC=4.737%)",
        "source": "GodClass"
      },
      {
        "line": 42,
        "column": 14,
        "type": "error",
        "message": "The class 'LinkedTreeMap' has a total cyclomatic complexity of 90 (highest 21).",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 42,
        "column": 90,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 43,
        "column": 23,
        "type": "error",
        "message": "The String literal \"unchecked\" appears 6 times in this file; the first occurrence is on line 43",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 44,
        "column": 77,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new Comparator<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 45,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 45,
        "column": 45,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 45,
        "column": 59,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 45,
        "column": 59,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 52,
        "column": 14,
        "type": "error",
        "message": "Missing commented default access modifier on field 'root'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 53,
        "column": 7,
        "type": "error",
        "message": "Field size has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 53,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 'size'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 54,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 'modCount'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 57,
        "column": 20,
        "type": "error",
        "message": "Missing commented default access modifier on field 'header'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 75,
        "column": 32,
        "type": "error",
        "message": "Parameter 'allowNullValues' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 88,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 88,
        "column": 46,
        "type": "error",
        "message": "Parameter 'comparator' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 88,
        "column": 66,
        "type": "error",
        "message": "Parameter 'allowNullValues' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 100,
        "column": 33,
        "type": "error",
        "message": "Parameter 'key' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 101,
        "column": 16,
        "type": "error",
        "message": "Local variable 'node' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 27,
        "type": "error",
        "message": "Access to field `value` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 105,
        "column": 47,
        "type": "error",
        "message": "Parameter 'key' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 109,
        "column": 28,
        "type": "error",
        "message": "Parameter 'key' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 109,
        "column": 35,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 111,
        "column": 7,
        "type": "error",
        "message": "Avoid throwing null pointer exceptions.",
        "source": "AvoidThrowingNullPointerException"
      },
      {
        "line": 114,
        "column": 7,
        "type": "error",
        "message": "Avoid throwing null pointer exceptions.",
        "source": "AvoidThrowingNullPointerException"
      },
      {
        "line": 116,
        "column": 16,
        "type": "error",
        "message": "Local variable 'created' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 117,
        "column": 7,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 5,
        "type": "error",
        "message": "Access to field `value` on foreign value `created` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 123,
        "column": 12,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 128,
        "column": 16,
        "type": "error",
        "message": "Local variable 'header' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 129,
        "column": 5,
        "type": "error",
        "message": "Access to field `next` on foreign value `header` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 129,
        "column": 19,
        "type": "error",
        "message": "Access to field `prev` on foreign value `header` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 132,
        "column": 36,
        "type": "error",
        "message": "Parameter 'key' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 133,
        "column": 16,
        "type": "error",
        "message": "Local variable 'node' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 134,
        "column": 27,
        "type": "error",
        "message": "Access to field `value` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 143,
        "column": 14,
        "type": "error",
        "message": "Missing commented default access modifier on method 'find(K, boolean)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 143,
        "column": 14,
        "type": "error",
        "message": "The method 'find(K, boolean)' has a cognitive complexity of 26, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 143,
        "column": 14,
        "type": "error",
        "message": "The method 'find(K, boolean)' has a cyclomatic complexity of 14.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 143,
        "column": 14,
        "type": "error",
        "message": "The method 'find(K, boolean)' has an NPath complexity of 350, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 143,
        "column": 21,
        "type": "error",
        "message": "Parameter 'key' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 143,
        "column": 34,
        "type": "error",
        "message": "Parameter 'create' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 144,
        "column": 27,
        "type": "error",
        "message": "Local variable 'comparator' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 151,
        "column": 30,
        "type": "error",
        "message": "Local variable 'comparableKey' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 162,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 166,
        "column": 20,
        "type": "error",
        "message": "Local variable 'child' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 166,
        "column": 47,
        "type": "error",
        "message": "Access to field `left` on foreign value `nearest` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 166,
        "column": 62,
        "type": "error",
        "message": "Access to field `right` on foreign value `nearest` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 177,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 181,
        "column": 16,
        "type": "error",
        "message": "Local variable 'header' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 193,
        "column": 9,
        "type": "error",
        "message": "Access to field `left` on foreign value `nearest` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 195,
        "column": 9,
        "type": "error",
        "message": "Access to field `right` on foreign value `nearest` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 206,
        "column": 14,
        "type": "error",
        "message": "Missing commented default access modifier on method 'findByObject(Object)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 206,
        "column": 34,
        "type": "error",
        "message": "Parameter 'key' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 208,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 223,
        "column": 14,
        "type": "error",
        "message": "Missing commented default access modifier on method 'findByEntry(Entry<?, ?>)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 223,
        "column": 38,
        "type": "error",
        "message": "Parameter 'entry' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 224,
        "column": 16,
        "type": "error",
        "message": "Local variable 'mine' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 225,
        "column": 13,
        "type": "error",
        "message": "Local variable 'valuesEqual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 229,
        "column": 32,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 229,
        "column": 32,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 229,
        "column": 42,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 229,
        "column": 42,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 230,
        "column": 12,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 239,
        "column": 8,
        "type": "error",
        "message": "Missing commented default access modifier on method 'removeInternal(Node<K, V>, boolean)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 239,
        "column": 34,
        "type": "error",
        "message": "Parameter 'node' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 239,
        "column": 48,
        "type": "error",
        "message": "Parameter 'unlink' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 241,
        "column": 7,
        "type": "error",
        "message": "Access to field `prev` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 241,
        "column": 24,
        "type": "error",
        "message": "Access to field `next` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 242,
        "column": 7,
        "type": "error",
        "message": "Access to field `next` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 242,
        "column": 24,
        "type": "error",
        "message": "Access to field `prev` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 247,
        "column": 16,
        "type": "error",
        "message": "Local variable 'originalParent' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 259,
        "column": 18,
        "type": "error",
        "message": "Local variable 'adjacent' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 259,
        "column": 30,
        "type": "error",
        "message": "Access to field `height` on foreign value `left` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 259,
        "column": 44,
        "type": "error",
        "message": "Access to field `height` on foreign value `right` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 259,
        "column": 60,
        "type": "error",
        "message": "Call to `last` on foreign value `left` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 259,
        "column": 74,
        "type": "error",
        "message": "Call to `first` on foreign value `right` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 263,
        "column": 14,
        "type": "error",
        "message": "Access to field `left` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 265,
        "column": 22,
        "type": "error",
        "message": "Access to field `height` on foreign value `left` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 266,
        "column": 9,
        "type": "error",
        "message": "Access to field `left` on foreign value `adjacent` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 267,
        "column": 9,
        "type": "error",
        "message": "Access to field `parent` on foreign value `left` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 268,
        "column": 9,
        "type": "error",
        "message": "Access to field `left` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 268,
        "column": 21,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 272,
        "column": 15,
        "type": "error",
        "message": "Access to field `right` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 274,
        "column": 23,
        "type": "error",
        "message": "Access to field `height` on foreign value `right` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 275,
        "column": 9,
        "type": "error",
        "message": "Access to field `right` on foreign value `adjacent` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 276,
        "column": 9,
        "type": "error",
        "message": "Access to field `parent` on foreign value `right` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 277,
        "column": 9,
        "type": "error",
        "message": "Access to field `right` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 277,
        "column": 22,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 285,
        "column": 7,
        "type": "error",
        "message": "Access to field `left` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 285,
        "column": 19,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 288,
        "column": 7,
        "type": "error",
        "message": "Access to field `right` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 288,
        "column": 20,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 298,
        "column": 14,
        "type": "error",
        "message": "Missing commented default access modifier on method 'removeInternalByKey(Object)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 298,
        "column": 41,
        "type": "error",
        "message": "Parameter 'key' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 299,
        "column": 16,
        "type": "error",
        "message": "Local variable 'node' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 306,
        "column": 43,
        "type": "error",
        "message": "Parameter 'node' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 306,
        "column": 60,
        "type": "error",
        "message": "Parameter 'replacement' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 307,
        "column": 16,
        "type": "error",
        "message": "Local variable 'parent' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 307,
        "column": 25,
        "type": "error",
        "message": "Access to field `parent` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 308,
        "column": 5,
        "type": "error",
        "message": "Access to field `parent` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 308,
        "column": 19,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 310,
        "column": 7,
        "type": "error",
        "message": "Access to field `parent` on foreign value `replacement` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 314,
        "column": 11,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 317,
        "column": 16,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 317,
        "column": 16,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 332,
        "column": 16,
        "type": "error",
        "message": "The method 'rebalance(Node<K, V>, boolean)' has a cognitive complexity of 50, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 332,
        "column": 16,
        "type": "error",
        "message": "The method 'rebalance(Node<K, V>, boolean)' has a cyclomatic complexity of 21.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 332,
        "column": 16,
        "type": "error",
        "message": "The method 'rebalance(Node<K, V>, boolean)' has an NPath complexity of 273, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 332,
        "column": 37,
        "type": "error",
        "message": "Parameter 'unbalanced' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 332,
        "column": 57,
        "type": "error",
        "message": "Parameter 'insert' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 333,
        "column": 61,
        "type": "error",
        "message": "Access to field `parent` on foreign value `node` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 334,
        "column": 18,
        "type": "error",
        "message": "Local variable 'left' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 334,
        "column": 25,
        "type": "error",
        "message": "Access to field `left` on foreign value `node` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 335,
        "column": 18,
        "type": "error",
        "message": "Local variable 'right' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 335,
        "column": 26,
        "type": "error",
        "message": "Access to field `right` on foreign value `node` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 336,
        "column": 11,
        "type": "error",
        "message": "Local variable 'leftHeight' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 337,
        "column": 11,
        "type": "error",
        "message": "Local variable 'rightHeight' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 339,
        "column": 11,
        "type": "error",
        "message": "Local variable 'delta' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 341,
        "column": 20,
        "type": "error",
        "message": "Local variable 'rightLeft' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 342,
        "column": 20,
        "type": "error",
        "message": "Local variable 'rightRight' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 343,
        "column": 13,
        "type": "error",
        "message": "Local variable 'rightRightHeight' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 344,
        "column": 13,
        "type": "error",
        "message": "Local variable 'rightLeftHeight' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 346,
        "column": 13,
        "type": "error",
        "message": "Local variable 'rightDelta' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 350,
        "column": 18,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 358,
        "column": 27,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 359,
        "column": 20,
        "type": "error",
        "message": "Local variable 'leftLeft' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 360,
        "column": 20,
        "type": "error",
        "message": "Local variable 'leftRight' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 361,
        "column": 13,
        "type": "error",
        "message": "Local variable 'leftRightHeight' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 362,
        "column": 13,
        "type": "error",
        "message": "Local variable 'leftLeftHeight' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 364,
        "column": 13,
        "type": "error",
        "message": "Local variable 'leftDelta' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 368,
        "column": 18,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 377,
        "column": 9,
        "type": "error",
        "message": "Access to field `height` on foreign value `node` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 383,
        "column": 16,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 384,
        "column": 9,
        "type": "error",
        "message": "Access to field `height` on foreign value `node` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 395,
        "column": 38,
        "type": "error",
        "message": "Parameter 'root' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 396,
        "column": 16,
        "type": "error",
        "message": "Local variable 'left' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 396,
        "column": 23,
        "type": "error",
        "message": "Access to field `left` on foreign value `root` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 397,
        "column": 16,
        "type": "error",
        "message": "Local variable 'pivot' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 398,
        "column": 16,
        "type": "error",
        "message": "Local variable 'pivotLeft' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 398,
        "column": 28,
        "type": "error",
        "message": "Access to field `left` on foreign value `pivot` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 399,
        "column": 16,
        "type": "error",
        "message": "Local variable 'pivotRight' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 399,
        "column": 29,
        "type": "error",
        "message": "Access to field `right` on foreign value `pivot` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 402,
        "column": 5,
        "type": "error",
        "message": "Access to field `right` on foreign value `root` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 410,
        "column": 5,
        "type": "error",
        "message": "Access to field `left` on foreign value `pivot` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 411,
        "column": 5,
        "type": "error",
        "message": "Access to field `parent` on foreign value `root` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 416,
        "column": 5,
        "type": "error",
        "message": "Access to field `height` on foreign value `pivot` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 423,
        "column": 39,
        "type": "error",
        "message": "Parameter 'root' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 424,
        "column": 16,
        "type": "error",
        "message": "Local variable 'pivot' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 425,
        "column": 16,
        "type": "error",
        "message": "Local variable 'right' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 425,
        "column": 24,
        "type": "error",
        "message": "Access to field `right` on foreign value `root` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 426,
        "column": 16,
        "type": "error",
        "message": "Local variable 'pivotLeft' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 426,
        "column": 28,
        "type": "error",
        "message": "Access to field `left` on foreign value `pivot` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 427,
        "column": 16,
        "type": "error",
        "message": "Local variable 'pivotRight' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 427,
        "column": 29,
        "type": "error",
        "message": "Access to field `right` on foreign value `pivot` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 430,
        "column": 5,
        "type": "error",
        "message": "Access to field `left` on foreign value `root` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 438,
        "column": 5,
        "type": "error",
        "message": "Access to field `right` on foreign value `pivot` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 439,
        "column": 5,
        "type": "error",
        "message": "Access to field `parent` on foreign value `root` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 444,
        "column": 5,
        "type": "error",
        "message": "Access to field `height` on foreign value `pivot` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 448,
        "column": 11,
        "type": "error",
        "message": "Avoid using implementation types like 'EntrySet'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 448,
        "column": 20,
        "type": "error",
        "message": "Field entrySet has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 448,
        "column": 20,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 449,
        "column": 11,
        "type": "error",
        "message": "Avoid using implementation types like 'KeySet'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 449,
        "column": 18,
        "type": "error",
        "message": "Field keySet has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 449,
        "column": 18,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 452,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'EntrySet'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 452,
        "column": 14,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 457,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'KeySet'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 457,
        "column": 12,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 461,
        "column": 16,
        "type": "error",
        "message": "Avoid short class names like Node",
        "source": "ShortClassName"
      },
      {
        "line": 461,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Node'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 462,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'parent'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 463,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'left'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 464,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'right'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 465,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'next'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 466,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'prev'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 467,
        "column": 13,
        "type": "error",
        "message": "Missing commented default access modifier on field 'key'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 468,
        "column": 19,
        "type": "error",
        "message": "Missing commented default access modifier on field 'allowNullValue'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 469,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 470,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'height'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 473,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Node(boolean)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 473,
        "column": 18,
        "type": "error",
        "message": "Parameter 'allowNullValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 480,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Node(boolean, Node<K, V>, K, Node<K, V>, Node<K, V>)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 480,
        "column": 18,
        "type": "error",
        "message": "Parameter 'allowNullValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 480,
        "column": 45,
        "type": "error",
        "message": "Parameter 'parent' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 480,
        "column": 55,
        "type": "error",
        "message": "Parameter 'key' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 480,
        "column": 71,
        "type": "error",
        "message": "Parameter 'next' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 480,
        "column": 88,
        "type": "error",
        "message": "Parameter 'prev' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 499,
        "column": 35,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 501,
        "column": 9,
        "type": "error",
        "message": "Avoid throwing null pointer exceptions.",
        "source": "AvoidThrowingNullPointerException"
      },
      {
        "line": 503,
        "column": 9,
        "type": "error",
        "message": "Local variable 'oldValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 508,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 508,
        "column": 44,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 510,
        "column": 21,
        "type": "error",
        "message": "Local variable 'other' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 511,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 554,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'next'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 554,
        "column": 23,
        "type": "error",
        "message": "Access to field `next` on foreign value `header` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 555,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'lastReturned'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 556,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'expectedModCount'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 558,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'LinkedTreeMapIterator()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 562,
        "column": 14,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 565,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on method 'nextNode()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 566,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like e",
        "source": "ShortVariable"
      },
      {
        "line": 566,
        "column": 18,
        "type": "error",
        "message": "Local variable 'e' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 567,
        "column": 11,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 573,
        "column": 14,
        "type": "error",
        "message": "Access to field `next` on foreign value `e` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 582,
        "column": 22,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 587,
        "column": 3,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 587,
        "column": 3,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'EntrySet'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 593,
        "column": 39,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new LinkedTreeMapIterator<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 600,
        "column": 46,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 600,
        "column": 46,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 604,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 604,
        "column": 44,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 606,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 609,
        "column": 18,
        "type": "error",
        "message": "Local variable 'node' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 611,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 622,
        "column": 9,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 622,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'KeySet'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 628,
        "column": 39,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new LinkedTreeMapIterator<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 635,
        "column": 46,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 635,
        "column": 46,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 639,
        "column": 44,
        "type": "error",
        "message": "Parameter 'key' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 658,
        "column": 45,
        "type": "error",
        "message": "Avoid unused method parameters such as 'in'.",
        "source": "UnusedFormalParameter"
      },
      {
        "line": 658,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/ObjectConstructor.java",
    "score": 9.5,
    "error_count": 1,
    "messages": [
      {
        "line": 32,
        "column": 12,
        "type": "error",
        "message": "Unnecessary modifier 'public' on method 'construct': the method is declared in an interface type",
        "source": "UnnecessaryModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/PreJava9DateFormatProvider.java",
    "score": 2.0,
    "error_count": 16,
    "messages": [
      {
        "line": 25,
        "column": 8,
        "type": "error",
        "message": "This utility class has a non-private constructor",
        "source": "UseUtilityClass"
      },
      {
        "line": 30,
        "column": 48,
        "type": "error",
        "message": "Parameter 'style' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 38,
        "column": 52,
        "type": "error",
        "message": "Parameter 'dateStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 38,
        "column": 67,
        "type": "error",
        "message": "Parameter 'timeStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 39,
        "column": 12,
        "type": "error",
        "message": "Local variable 'pattern' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 43,
        "column": 50,
        "type": "error",
        "message": "Parameter 'style' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 46,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 48,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 50,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 58,
        "column": 58,
        "type": "error",
        "message": "Parameter 'dateStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 61,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 63,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 65,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 73,
        "column": 58,
        "type": "error",
        "message": "Parameter 'timeStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 76,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 78,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/Primitives.java",
    "score": 0.0,
    "error_count": 44,
    "messages": [
      {
        "line": 33,
        "column": 42,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 43,
        "column": 44,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 65,
        "column": 30,
        "type": "error",
        "message": "The method 'wrap(Class<T>)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 65,
        "column": 30,
        "type": "error",
        "message": "The method 'wrap(Class<T>)' has an NPath complexity of 512, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 65,
        "column": 44,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 66,
        "column": 28,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 66,
        "column": 28,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 67,
        "column": 30,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 67,
        "column": 30,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 68,
        "column": 29,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 68,
        "column": 29,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 69,
        "column": 31,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 69,
        "column": 31,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 70,
        "column": 29,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 70,
        "column": 29,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 71,
        "column": 29,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 71,
        "column": 29,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 72,
        "column": 32,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 72,
        "column": 32,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 73,
        "column": 30,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 73,
        "column": 30,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 74,
        "column": 29,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 74,
        "column": 29,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 88,
        "column": 30,
        "type": "error",
        "message": "The method 'unwrap(Class<T>)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 88,
        "column": 30,
        "type": "error",
        "message": "The method 'unwrap(Class<T>)' has an NPath complexity of 512, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 88,
        "column": 46,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 89,
        "column": 32,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 89,
        "column": 32,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 90,
        "column": 30,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 90,
        "column": 30,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 91,
        "column": 29,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 91,
        "column": 29,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 92,
        "column": 31,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 92,
        "column": 31,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 93,
        "column": 29,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 93,
        "column": 29,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 94,
        "column": 34,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 94,
        "column": 34,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 95,
        "column": 32,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 95,
        "column": 32,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 96,
        "column": 30,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 96,
        "column": 30,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 97,
        "column": 29,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 97,
        "column": 29,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/ReflectionAccessFilterHelper.java",
    "score": 0.0,
    "error_count": 23,
    "messages": [
      {
        "line": 13,
        "column": 8,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 19,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 19,
        "column": 45,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 23,
        "column": 44,
        "type": "error",
        "message": "Parameter 'className' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 27,
        "column": 48,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 27,
        "column": 48,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 31,
        "column": 47,
        "type": "error",
        "message": "Parameter 'className' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 37,
        "column": 52,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 37,
        "column": 52,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 38,
        "column": 12,
        "type": "error",
        "message": "Local variable 'className' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 75,
        "type": "error",
        "message": "Parameter 'reflectionFilters' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 50,
        "column": 103,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 50,
        "column": 103,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 51,
        "column": 33,
        "type": "error",
        "message": "Local variable 'filter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 20,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 63,
        "column": 52,
        "type": "error",
        "message": "Parameter 'accessibleObject' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 63,
        "column": 77,
        "type": "error",
        "message": "Parameter 'object' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 74,
        "column": 24,
        "type": "error",
        "message": "Linguistics Antipattern - The variable 'canAccessMethod' indicates linguistically it is a boolean, but it is 'Method'",
        "source": "LinguisticNaming"
      },
      {
        "line": 76,
        "column": 65,
        "type": "error",
        "message": "Parameter 'accessibleObject' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 76,
        "column": 90,
        "type": "error",
        "message": "Parameter 'object' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 79,
        "column": 24,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 80,
        "column": 27,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/Streams.java",
    "score": 0.0,
    "error_count": 33,
    "messages": [
      {
        "line": 44,
        "column": 29,
        "type": "error",
        "message": "The method 'parse(JsonReader)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 44,
        "column": 46,
        "type": "error",
        "message": "Parameter 'reader' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 44,
        "column": 61,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 49,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 64,
        "column": 7,
        "type": "error",
        "message": "'catch' branch identical to 'MalformedJsonException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 72,
        "column": 40,
        "type": "error",
        "message": "Parameter 'element' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 72,
        "column": 60,
        "type": "error",
        "message": "Parameter 'writer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 76,
        "column": 55,
        "type": "error",
        "message": "Parameter 'appendable' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 88,
        "column": 5,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 88,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'AppendableWriter(Appendable)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 88,
        "column": 33,
        "type": "error",
        "message": "Parameter 'appendable' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 92,
        "column": 40,
        "type": "error",
        "message": "Parameter 'chars' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 92,
        "column": 51,
        "type": "error",
        "message": "Parameter 'offset' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 92,
        "column": 63,
        "type": "error",
        "message": "Parameter 'length' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 103,
        "column": 37,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 103,
        "column": 37,
        "type": "error",
        "message": "Parameter 'i' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 107,
        "column": 40,
        "type": "error",
        "message": "Parameter 'str' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 107,
        "column": 49,
        "type": "error",
        "message": "Parameter 'off' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 107,
        "column": 58,
        "type": "error",
        "message": "Parameter 'len' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 113,
        "column": 49,
        "type": "error",
        "message": "Parameter 'csq' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 118,
        "column": 49,
        "type": "error",
        "message": "Parameter 'csq' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 118,
        "column": 58,
        "type": "error",
        "message": "Parameter 'start' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 118,
        "column": 69,
        "type": "error",
        "message": "Parameter 'end' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 126,
        "column": 20,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 130,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on method 'setChars(char[])'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 130,
        "column": 21,
        "type": "error",
        "message": "Consider using varargs for methods or constructors which take an array the last parameter.",
        "source": "UseVarargs"
      },
      {
        "line": 130,
        "column": 28,
        "type": "error",
        "message": "Parameter 'chars' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 131,
        "column": 9,
        "type": "error",
        "message": "The user-supplied array 'chars' is stored directly.",
        "source": "ArrayIsStoredDirectly"
      },
      {
        "line": 132,
        "column": 29,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 138,
        "column": 40,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 138,
        "column": 40,
        "type": "error",
        "message": "Parameter 'i' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 141,
        "column": 53,
        "type": "error",
        "message": "Parameter 'start' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 141,
        "column": 64,
        "type": "error",
        "message": "Parameter 'end' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
    "score": 0.0,
    "error_count": 29,
    "messages": [
      {
        "line": 30,
        "column": 17,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 31,
        "column": 46,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 31,
        "column": 49,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 38,
        "column": 51,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 38,
        "column": 51,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 39,
        "column": 12,
        "type": "error",
        "message": "Local variable 'exceptionMessage' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 39,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 53,
        "column": 16,
        "type": "error",
        "message": "Local variable 'unsafeClass' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 13,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 54,
        "column": 13,
        "type": "error",
        "message": "Local variable 'f' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 7,
        "type": "error",
        "message": "You should not modify visibility of constructors, methods or fields using setAccessible()",
        "source": "AvoidAccessibilityAlteration"
      },
      {
        "line": 58,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 61,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 61,
        "column": 43,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 66,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 75,
        "column": 14,
        "type": "error",
        "message": "Local variable 'getConstructorId' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 7,
        "type": "error",
        "message": "You should not modify visibility of constructors, methods or fields using setAccessible()",
        "source": "AvoidAccessibilityAlteration"
      },
      {
        "line": 81,
        "column": 7,
        "type": "error",
        "message": "You should not modify visibility of constructors, methods or fields using setAccessible()",
        "source": "AvoidAccessibilityAlteration"
      },
      {
        "line": 82,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 85,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 85,
        "column": 43,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 90,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 101,
        "column": 7,
        "type": "error",
        "message": "You should not modify visibility of constructors, methods or fields using setAccessible()",
        "source": "AvoidAccessibilityAlteration"
      },
      {
        "line": 102,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 105,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 105,
        "column": 43,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 110,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 116,
        "column": 41,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 116,
        "column": 41,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/ArrayTypeAdapter.java",
    "score": 0.0,
    "error_count": 29,
    "messages": [
      {
        "line": 38,
        "column": 53,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 38,
        "column": 72,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 39,
        "column": 12,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 41,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 44,
        "column": 12,
        "type": "error",
        "message": "Local variable 'componentType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 22,
        "type": "error",
        "message": "Avoid excessively long variable names like componentTypeAdapter",
        "source": "LongVariable"
      },
      {
        "line": 45,
        "column": 22,
        "type": "error",
        "message": "Local variable 'componentTypeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 48,
        "column": 22,
        "type": "error",
        "message": "Local variable 'arrayAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 32,
        "type": "error",
        "message": "Avoid excessively long variable names like componentTypeAdapter",
        "source": "LongVariable"
      },
      {
        "line": 57,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 57,
        "column": 32,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 57,
        "column": 56,
        "type": "error",
        "message": "Avoid excessively long variable names like componentTypeAdapter",
        "source": "LongVariable"
      },
      {
        "line": 57,
        "column": 56,
        "type": "error",
        "message": "Parameter 'componentTypeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 57,
        "column": 87,
        "type": "error",
        "message": "Parameter 'componentType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 63,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 63,
        "column": 43,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 66,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 69,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'ArrayList'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 69,
        "column": 18,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 9,
        "type": "error",
        "message": "Local variable 'instance' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 9,
        "type": "error",
        "message": "Local variable 'size' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 14,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 89,
        "column": 11,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 42,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 94,
        "column": 54,
        "type": "error",
        "message": "Parameter 'array' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 101,
        "column": 14,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 101,
        "column": 21,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 9,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java",
    "score": 0.0,
    "error_count": 29,
    "messages": [
      {
        "line": 37,
        "column": 40,
        "type": "error",
        "message": "Avoid excessively long variable names like constructorConstructor",
        "source": "LongVariable"
      },
      {
        "line": 39,
        "column": 62,
        "type": "error",
        "message": "Avoid excessively long variable names like constructorConstructor",
        "source": "LongVariable"
      },
      {
        "line": 39,
        "column": 62,
        "type": "error",
        "message": "Parameter 'constructorConstructor' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 44,
        "column": 41,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 44,
        "column": 60,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 45,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 22,
        "type": "error",
        "message": "Local variable 'rawType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 52,
        "column": 10,
        "type": "error",
        "message": "Local variable 'elementType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 20,
        "type": "error",
        "message": "Avoid excessively long variable names like elementTypeAdapter",
        "source": "LongVariable"
      },
      {
        "line": 53,
        "column": 20,
        "type": "error",
        "message": "Local variable 'elementTypeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 26,
        "type": "error",
        "message": "Local variable 'constructor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 20,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 34,
        "type": "error",
        "message": "Avoid excessively long variable names like elementTypeAdapter",
        "source": "LongVariable"
      },
      {
        "line": 65,
        "column": 12,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 65,
        "column": 25,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 65,
        "column": 39,
        "type": "error",
        "message": "Parameter 'elementType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 66,
        "column": 24,
        "type": "error",
        "message": "Avoid excessively long variable names like elementTypeAdapter",
        "source": "LongVariable"
      },
      {
        "line": 66,
        "column": 24,
        "type": "error",
        "message": "Parameter 'elementTypeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 67,
        "column": 52,
        "type": "error",
        "message": "Parameter 'constructor' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 73,
        "column": 52,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 73,
        "column": 52,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 76,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 76,
        "column": 16,
        "type": "error",
        "message": "Return an empty collection rather than null.",
        "source": "ReturnEmptyCollectionRatherThanNull"
      },
      {
        "line": 79,
        "column": 21,
        "type": "error",
        "message": "Local variable 'collection' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 11,
        "type": "error",
        "message": "Local variable 'instance' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 89,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 89,
        "column": 63,
        "type": "error",
        "message": "Parameter 'collection' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 96,
        "column": 14,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java",
    "score": 2.5,
    "error_count": 15,
    "messages": [
      {
        "line": 49,
        "column": 72,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 60,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 70,
        "column": 41,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 70,
        "column": 41,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 73,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 78,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 78,
        "column": 45,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 79,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 79,
        "column": 12,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 23,
        "type": "error",
        "message": "Local variable 'dateFormat' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 94,
        "column": 42,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 94,
        "column": 52,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 100,
        "column": 16,
        "type": "error",
        "message": "Local variable 'dateFormat' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like dateFormatAsString",
        "source": "LongVariable"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/DefaultDateTypeAdapter.java",
    "score": 0.0,
    "error_count": 39,
    "messages": [
      {
        "line": 47,
        "column": 14,
        "type": "error",
        "message": "Class cannot be instantiated and does not provide any static methods or fields",
        "source": "MissingStaticMethodInNonInstantiatableClass"
      },
      {
        "line": 51,
        "column": 59,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new DateType<>(Date.class)`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 52,
        "column": 49,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 59,
        "column": 33,
        "type": "error",
        "message": "Parameter 'dateClass' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 65,
        "column": 38,
        "type": "error",
        "message": "Unnecessary modifier 'final' on method 'createFactory': private methods cannot be overridden",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 65,
        "column": 78,
        "type": "error",
        "message": "Parameter 'adapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 69,
        "column": 65,
        "type": "error",
        "message": "Parameter 'datePattern' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 73,
        "column": 62,
        "type": "error",
        "message": "Parameter 'style' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 77,
        "column": 62,
        "type": "error",
        "message": "Parameter 'dateStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 77,
        "column": 77,
        "type": "error",
        "message": "Parameter 'timeStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 86,
        "column": 29,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 92,
        "column": 34,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 94,
        "column": 11,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 94,
        "column": 46,
        "type": "error",
        "message": "Parameter 'dateType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 94,
        "column": 63,
        "type": "error",
        "message": "Parameter 'datePattern' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 98,
        "column": 23,
        "type": "error",
        "message": "When instantiating a SimpleDateFormat object, specify a Locale",
        "source": "SimpleDateFormatNeedsLocale"
      },
      {
        "line": 102,
        "column": 11,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 102,
        "column": 46,
        "type": "error",
        "message": "Parameter 'dateType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 102,
        "column": 60,
        "type": "error",
        "message": "Parameter 'style' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 113,
        "column": 11,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 113,
        "column": 46,
        "type": "error",
        "message": "Parameter 'dateType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 113,
        "column": 60,
        "type": "error",
        "message": "Parameter 'dateStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 113,
        "column": 75,
        "type": "error",
        "message": "Parameter 'timeStyle' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 127,
        "column": 32,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 127,
        "column": 42,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 133,
        "column": 16,
        "type": "error",
        "message": "Local variable 'dateFormat' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 134,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like dateFormatAsString",
        "source": "LongVariable"
      },
      {
        "line": 142,
        "column": 28,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 142,
        "column": 28,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 145,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 147,
        "column": 10,
        "type": "error",
        "message": "Local variable 'date' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 151,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 151,
        "column": 45,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 152,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 152,
        "column": 12,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 154,
        "column": 23,
        "type": "error",
        "message": "Local variable 'dateFormat' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 156,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 170,
        "column": 16,
        "type": "error",
        "message": "Local variable 'defaultFormat' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 172,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java",
    "score": 0.5,
    "error_count": 19,
    "messages": [
      {
        "line": 35,
        "column": 40,
        "type": "error",
        "message": "Avoid excessively long variable names like constructorConstructor",
        "source": "LongVariable"
      },
      {
        "line": 37,
        "column": 73,
        "type": "error",
        "message": "Avoid excessively long variable names like constructorConstructor",
        "source": "LongVariable"
      },
      {
        "line": 37,
        "column": 73,
        "type": "error",
        "message": "Parameter 'constructorConstructor' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 43,
        "column": 41,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 43,
        "column": 60,
        "type": "error",
        "message": "Parameter 'targetType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 44,
        "column": 22,
        "type": "error",
        "message": "Local variable 'rawType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 17,
        "type": "error",
        "message": "Local variable 'annotation' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 52,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on method 'getTypeAdapter(ConstructorConstructor, Gson, TypeToken<?>, JsonAdapter)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 52,
        "column": 18,
        "type": "error",
        "message": "The method 'getTypeAdapter(ConstructorConstructor, Gson, TypeToken<?>, JsonAdapter)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 52,
        "column": 56,
        "type": "error",
        "message": "Avoid excessively long variable names like constructorConstructor",
        "source": "LongVariable"
      },
      {
        "line": 52,
        "column": 56,
        "type": "error",
        "message": "Parameter 'constructorConstructor' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 52,
        "column": 85,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 53,
        "column": 20,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 53,
        "column": 38,
        "type": "error",
        "message": "Parameter 'annotation' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 54,
        "column": 12,
        "type": "error",
        "message": "Local variable 'instance' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 25,
        "type": "error",
        "message": "Local variable 'serializer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 66,
        "column": 27,
        "type": "error",
        "message": "Local variable 'deserializer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 22,
        "type": "error",
        "message": "Local variable 'tempAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java",
    "score": 0.0,
    "error_count": 55,
    "messages": [
      {
        "line": 39,
        "column": 14,
        "type": "error",
        "message": "The class 'JsonTreeReader' has a total cyclomatic complexity of 90 (highest 17).",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 39,
        "column": 54,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 67,
        "column": 37,
        "type": "error",
        "message": "Parameter 'element' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 16,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 104,
        "column": 15,
        "type": "error",
        "message": "Local variable 'token' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 108,
        "column": 30,
        "type": "error",
        "message": "The method 'peek()' has a cognitive complexity of 26, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 108,
        "column": 30,
        "type": "error",
        "message": "The method 'peek()' has a cyclomatic complexity of 17.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 110,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 113,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 113,
        "column": 12,
        "type": "error",
        "message": "Local variable 'o' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 15,
        "type": "error",
        "message": "Local variable 'isObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 19,
        "type": "error",
        "message": "Local variable 'iterator' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 119,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 122,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 125,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 128,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 130,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 132,
        "column": 21,
        "type": "error",
        "message": "Local variable 'primitive' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 134,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 136,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 138,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 156,
        "column": 12,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 157,
        "column": 24,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 161,
        "column": 33,
        "type": "error",
        "message": "Parameter 'expected' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 164,
        "column": 11,
        "type": "error",
        "message": "The String literal \"Expected \" appears 5 times in this file; the first occurrence is on line 164",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 164,
        "column": 36,
        "type": "error",
        "message": "The String literal \" but was \" appears 5 times in this file; the first occurrence is on line 164",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 170,
        "column": 17,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 170,
        "column": 17,
        "type": "error",
        "message": "Local variable 'i' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 171,
        "column": 21,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 172,
        "column": 12,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Local variable 'token' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 184,
        "column": 12,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 193,
        "column": 13,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 209,
        "column": 15,
        "type": "error",
        "message": "Local variable 'token' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 214,
        "column": 12,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 226,
        "column": 15,
        "type": "error",
        "message": "Local variable 'token' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 231,
        "column": 10,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 240,
        "column": 15,
        "type": "error",
        "message": "Local variable 'token' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 245,
        "column": 9,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 253,
        "column": 15,
        "type": "error",
        "message": "Missing commented default access modifier on method 'nextJsonElement()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 292,
        "column": 17,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 292,
        "column": 17,
        "type": "error",
        "message": "Local variable 'i' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 293,
        "column": 21,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 298,
        "column": 28,
        "type": "error",
        "message": "Parameter 'newTop' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 300,
        "column": 11,
        "type": "error",
        "message": "Local variable 'newLength' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 308,
        "column": 18,
        "type": "error",
        "message": "The method 'getPath(boolean)' has a cognitive complexity of 22, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 308,
        "column": 18,
        "type": "error",
        "message": "The method 'getPath(boolean)' has a cyclomatic complexity of 13.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 308,
        "column": 34,
        "type": "error",
        "message": "Parameter 'usePreviousPath' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 309,
        "column": 19,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 312,
        "column": 13,
        "type": "error",
        "message": "Avoid assignments in operands",
        "source": "AssignmentInOperand"
      },
      {
        "line": 312,
        "column": 15,
        "type": "error",
        "message": "Avoid reassigning the loop control variable 'i'",
        "source": "AvoidReassigningLoopVariables"
      },
      {
        "line": 323,
        "column": 9,
        "type": "error",
        "message": "This if statement could be combined with its parent",
        "source": "CollapsibleIfStatements"
      },
      {
        "line": 323,
        "column": 13,
        "type": "error",
        "message": "Avoid assignments in operands",
        "source": "AssignmentInOperand"
      },
      {
        "line": 323,
        "column": 15,
        "type": "error",
        "message": "Avoid reassigning the loop control variable 'i'",
        "source": "AvoidReassigningLoopVariables"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java",
    "score": 0.0,
    "error_count": 24,
    "messages": [
      {
        "line": 34,
        "column": 14,
        "type": "error",
        "message": "Possible God Class (WMC=61, ATFD=7, TCC=21.053%)",
        "source": "GodClass"
      },
      {
        "line": 34,
        "column": 54,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 76,
        "column": 32,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 79,
        "column": 20,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 21,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 86,
        "column": 19,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 106,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 16,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 125,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 43,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 138,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 146,
        "column": 44,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 148,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 163,
        "column": 45,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 168,
        "column": 45,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 170,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 176,
        "column": 43,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 184,
        "column": 44,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 192,
        "column": 42,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 197,
        "column": 44,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 199,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 203,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like d",
        "source": "ShortVariable"
      },
      {
        "line": 203,
        "column": 14,
        "type": "error",
        "message": "Local variable 'd' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java",
    "score": 0.0,
    "error_count": 57,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 106,
        "column": 40,
        "type": "error",
        "message": "Avoid excessively long variable names like constructorConstructor",
        "source": "LongVariable"
      },
      {
        "line": 107,
        "column": 17,
        "type": "error",
        "message": "Avoid excessively long variable names like complexMapKeySerialization",
        "source": "LongVariable"
      },
      {
        "line": 107,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on field 'complexMapKeySerialization'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 109,
        "column": 55,
        "type": "error",
        "message": "Avoid excessively long variable names like constructorConstructor",
        "source": "LongVariable"
      },
      {
        "line": 109,
        "column": 55,
        "type": "error",
        "message": "Parameter 'constructorConstructor' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Avoid excessively long variable names like complexMapKeySerialization",
        "source": "LongVariable"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Parameter 'complexMapKeySerialization' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 115,
        "column": 51,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 115,
        "column": 70,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 116,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 22,
        "type": "error",
        "message": "Local variable 'rawType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 120,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 123,
        "column": 12,
        "type": "error",
        "message": "Local variable 'keyAndValueTypes' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 124,
        "column": 20,
        "type": "error",
        "message": "Local variable 'keyAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 125,
        "column": 20,
        "type": "error",
        "message": "Local variable 'valueAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 26,
        "type": "error",
        "message": "Local variable 'constructor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 130,
        "column": 20,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 138,
        "column": 45,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 138,
        "column": 59,
        "type": "error",
        "message": "Parameter 'keyType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 149,
        "column": 12,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 149,
        "column": 25,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 149,
        "column": 39,
        "type": "error",
        "message": "Parameter 'keyType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 149,
        "column": 63,
        "type": "error",
        "message": "Parameter 'keyTypeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 150,
        "column": 14,
        "type": "error",
        "message": "Parameter 'valueType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 150,
        "column": 40,
        "type": "error",
        "message": "Parameter 'valueTypeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 151,
        "column": 48,
        "type": "error",
        "message": "Parameter 'constructor' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 159,
        "column": 48,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 159,
        "column": 48,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 160,
        "column": 17,
        "type": "error",
        "message": "Local variable 'peek' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 163,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 163,
        "column": 16,
        "type": "error",
        "message": "Return an empty collection rather than null.",
        "source": "ReturnEmptyCollectionRatherThanNull"
      },
      {
        "line": 166,
        "column": 17,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 172,
        "column": 13,
        "type": "error",
        "message": "Local variable 'key' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 173,
        "column": 13,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 174,
        "column": 13,
        "type": "error",
        "message": "Local variable 'replaced' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 185,
        "column": 13,
        "type": "error",
        "message": "Local variable 'key' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 186,
        "column": 13,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 187,
        "column": 13,
        "type": "error",
        "message": "Local variable 'replaced' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 197,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 197,
        "column": 59,
        "type": "error",
        "message": "Parameter 'map' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 200,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 205,
        "column": 30,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 214,
        "column": 25,
        "type": "error",
        "message": "Local variable 'keys' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 216,
        "column": 15,
        "type": "error",
        "message": "Local variable 'values' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 217,
        "column": 28,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 218,
        "column": 21,
        "type": "error",
        "message": "Local variable 'keyElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 226,
        "column": 18,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 226,
        "column": 25,
        "type": "error",
        "message": "Local variable 'size' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 235,
        "column": 18,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 235,
        "column": 25,
        "type": "error",
        "message": "Local variable 'size' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 236,
        "column": 23,
        "type": "error",
        "message": "Local variable 'keyElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 244,
        "column": 44,
        "type": "error",
        "message": "Parameter 'keyElement' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 246,
        "column": 23,
        "type": "error",
        "message": "Local variable 'primitive' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 248,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 250,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 252,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/NumberTypeAdapter.java",
    "score": 3.5,
    "error_count": 13,
    "messages": [
      {
        "line": 39,
        "column": 43,
        "type": "error",
        "message": "Avoid excessively long variable names like LAZILY_PARSED_NUMBER_FACTORY",
        "source": "LongVariable"
      },
      {
        "line": 43,
        "column": 11,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 43,
        "column": 46,
        "type": "error",
        "message": "Parameter 'toNumberStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 47,
        "column": 65,
        "type": "error",
        "message": "Parameter 'toNumberStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 51,
        "column": 74,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 57,
        "column": 64,
        "type": "error",
        "message": "Parameter 'toNumberStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 59,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 65,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 65,
        "column": 43,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 66,
        "column": 15,
        "type": "error",
        "message": "Local variable 'jsonToken' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 79,
        "column": 42,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 79,
        "column": 54,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/ObjectTypeAdapter.java",
    "score": 0.0,
    "error_count": 33,
    "messages": [
      {
        "line": 49,
        "column": 11,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 49,
        "column": 34,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 49,
        "column": 57,
        "type": "error",
        "message": "Parameter 'toNumberStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 56,
        "column": 25,
        "type": "error",
        "message": "The String literal \"unchecked\" appears 4 times in this file; the first occurrence is on line 56",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 57,
        "column": 55,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 57,
        "column": 74,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 59,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 66,
        "column": 64,
        "type": "error",
        "message": "Parameter 'toNumberStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 68,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 78,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 78,
        "column": 45,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 78,
        "column": 59,
        "type": "error",
        "message": "Parameter 'peeked' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 82,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 85,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 92,
        "column": 42,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 92,
        "column": 42,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 92,
        "column": 56,
        "type": "error",
        "message": "Parameter 'peeked' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 95,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 97,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 99,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 109,
        "column": 27,
        "type": "error",
        "message": "The method 'read(JsonReader)' has a cognitive complexity of 23, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 109,
        "column": 27,
        "type": "error",
        "message": "The method 'read(JsonReader)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 109,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 109,
        "column": 43,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 116,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 119,
        "column": 19,
        "type": "error",
        "message": "Local variable 'stack' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 131,
        "column": 17,
        "type": "error",
        "message": "Local variable 'isNesting' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 139,
        "column": 24,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 143,
        "column": 31,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 42,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 169,
        "column": 54,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 172,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 176,
        "column": 25,
        "type": "error",
        "message": "Local variable 'typeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java",
    "score": 0.0,
    "error_count": 99,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "A high number of imports can indicate a high degree of coupling within an object.",
        "source": "ExcessiveImports"
      },
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 54,
        "column": 40,
        "type": "error",
        "message": "Avoid excessively long variable names like constructorConstructor",
        "source": "LongVariable"
      },
      {
        "line": 57,
        "column": 57,
        "type": "error",
        "message": "Avoid excessively long variable names like jsonAdapterFactory",
        "source": "LongVariable"
      },
      {
        "line": 60,
        "column": 62,
        "type": "error",
        "message": "Avoid excessively long variable names like constructorConstructor",
        "source": "LongVariable"
      },
      {
        "line": 60,
        "column": 62,
        "type": "error",
        "message": "Parameter 'constructorConstructor' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 61,
        "column": 27,
        "type": "error",
        "message": "Parameter 'fieldNamingPolicy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 61,
        "column": 55,
        "type": "error",
        "message": "Parameter 'excluder' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 62,
        "column": 47,
        "type": "error",
        "message": "Avoid excessively long variable names like jsonAdapterFactory",
        "source": "LongVariable"
      },
      {
        "line": 62,
        "column": 47,
        "type": "error",
        "message": "Parameter 'jsonAdapterFactory' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 63,
        "column": 36,
        "type": "error",
        "message": "Parameter 'reflectionFilters' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 71,
        "column": 38,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 71,
        "column": 38,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 71,
        "column": 49,
        "type": "error",
        "message": "Parameter 'serialize' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 76,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 76,
        "column": 44,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 77,
        "column": 20,
        "type": "error",
        "message": "Local variable 'annotation' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 79,
        "column": 14,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 83,
        "column": 12,
        "type": "error",
        "message": "Local variable 'serializedName' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 14,
        "type": "error",
        "message": "Local variable 'alternates' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 89,
        "column": 18,
        "type": "error",
        "message": "Local variable 'fieldNames' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 17,
        "type": "error",
        "message": "Local variable 'alternate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 97,
        "column": 51,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 98,
        "column": 22,
        "type": "error",
        "message": "Local variable 'raw' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 104,
        "column": 18,
        "type": "error",
        "message": "Local variable 'filterResult' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 13,
        "type": "error",
        "message": "Local variable 'blockInaccessible' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 26,
        "type": "error",
        "message": "Local variable 'constructor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 46,
        "type": "error",
        "message": "Parameter 'object' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 115,
        "column": 60,
        "type": "error",
        "message": "Parameter 'field' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 124,
        "column": 51,
        "type": "error",
        "message": "The method 'createBoundField(Gson, Field, String, TypeToken<?>, boolean, boolean, boolean)' has a cognitive complexity of 16, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 124,
        "column": 51,
        "type": "error",
        "message": "The method 'createBoundField(Gson, Field, String, TypeToken<?>, boolean, boolean, boolean)' has an NPath complexity of 256, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 126,
        "column": 45,
        "type": "error",
        "message": "Parameter 'serialize' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 126,
        "column": 64,
        "type": "error",
        "message": "Parameter 'deserialize' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 129,
        "column": 17,
        "type": "error",
        "message": "Local variable 'annotation' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 136,
        "column": 19,
        "type": "error",
        "message": "Avoid excessively long variable names like jsonAdapterPresent",
        "source": "LongVariable"
      },
      {
        "line": 137,
        "column": 25,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 142,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on method 'write(JsonWriter, Object)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 142,
        "column": 39,
        "type": "error",
        "message": "Parameter 'writer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 142,
        "column": 54,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 144,
        "column": 26,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 144,
        "column": 26,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 149,
        "column": 16,
        "type": "error",
        "message": "Local variable 'fieldValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 150,
        "column": 13,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 155,
        "column": 29,
        "type": "error",
        "message": "Avoid variables with short names like t",
        "source": "ShortVariable"
      },
      {
        "line": 155,
        "column": 29,
        "type": "error",
        "message": "Local variable 't' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 159,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on method 'read(JsonReader, Object)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 159,
        "column": 38,
        "type": "error",
        "message": "Parameter 'reader' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 159,
        "column": 53,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 161,
        "column": 16,
        "type": "error",
        "message": "Local variable 'fieldValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 172,
        "column": 35,
        "type": "error",
        "message": "The method 'getBoundFields(Gson, TypeToken<?>, Class<?>, boolean)' has a cognitive complexity of 31, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 172,
        "column": 35,
        "type": "error",
        "message": "The method 'getBoundFields(Gson, TypeToken<?>, Class<?>, boolean)' has a cyclomatic complexity of 16.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 172,
        "column": 35,
        "type": "error",
        "message": "The method 'getBoundFields(Gson, TypeToken<?>, Class<?>, boolean)' has an NPath complexity of 490, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 172,
        "column": 55,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 173,
        "column": 29,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 175,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 178,
        "column": 10,
        "type": "error",
        "message": "Local variable 'declaredType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 178,
        "column": 25,
        "type": "error",
        "message": "Call to `getType` on foreign value `type` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 179,
        "column": 14,
        "type": "error",
        "message": "Local variable 'originalRaw' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 181,
        "column": 15,
        "type": "error",
        "message": "Local variable 'fields' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 185,
        "column": 22,
        "type": "error",
        "message": "Local variable 'filterResult' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 191,
        "column": 9,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'blockInaccessible'",
        "source": "AvoidReassigningParameters"
      },
      {
        "line": 194,
        "column": 18,
        "type": "error",
        "message": "Local variable 'field' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 196,
        "column": 17,
        "type": "error",
        "message": "Local variable 'deserialize' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 205,
        "column": 14,
        "type": "error",
        "message": "Local variable 'fieldType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 206,
        "column": 22,
        "type": "error",
        "message": "Local variable 'fieldNames' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 208,
        "column": 18,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 208,
        "column": 25,
        "type": "error",
        "message": "Local variable 'size' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 209,
        "column": 18,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 210,
        "column": 23,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 211,
        "column": 22,
        "type": "error",
        "message": "Local variable 'boundField' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 213,
        "column": 22,
        "type": "error",
        "message": "Local variable 'replaced' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 214,
        "column": 33,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 221,
        "column": 7,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'type'",
        "source": "AvoidReassigningParameters"
      },
      {
        "line": 222,
        "column": 7,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'raw'",
        "source": "AvoidReassigningParameters"
      },
      {
        "line": 227,
        "column": 19,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'BoundField'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 228,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 229,
        "column": 19,
        "type": "error",
        "message": "Missing commented default access modifier on field 'serialized'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 230,
        "column": 19,
        "type": "error",
        "message": "Missing commented default access modifier on field 'deserialized'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 232,
        "column": 33,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 232,
        "column": 47,
        "type": "error",
        "message": "Parameter 'serialized' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 232,
        "column": 67,
        "type": "error",
        "message": "Parameter 'deserialized' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 237,
        "column": 19,
        "type": "error",
        "message": "Missing commented default access modifier on method 'write(JsonWriter, Object)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 238,
        "column": 19,
        "type": "error",
        "message": "Missing commented default access modifier on method 'read(JsonReader, Object)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 245,
        "column": 5,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 245,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Adapter(ObjectConstructor<T>, Map<String, BoundField>)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 245,
        "column": 34,
        "type": "error",
        "message": "Parameter 'constructor' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 245,
        "column": 71,
        "type": "error",
        "message": "Parameter 'boundFields' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 250,
        "column": 40,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 250,
        "column": 40,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 253,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 256,
        "column": 9,
        "type": "error",
        "message": "Local variable 'instance' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 261,
        "column": 18,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 262,
        "column": 22,
        "type": "error",
        "message": "Local variable 'field' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 278,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 278,
        "column": 51,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 286,
        "column": 25,
        "type": "error",
        "message": "Local variable 'boundField' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/SerializationDelegatingTypeAdapter.java",
    "score": 9.5,
    "error_count": 1,
    "messages": [
      {
        "line": 8,
        "column": 17,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java",
    "score": 0.0,
    "error_count": 51,
    "messages": [
      {
        "line": 44,
        "column": 14,
        "type": "error",
        "message": "Missing commented default access modifier on field 'gson'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 51,
        "column": 35,
        "type": "error",
        "message": "Field delegate has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 53,
        "column": 10,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 53,
        "column": 44,
        "type": "error",
        "message": "Parameter 'serializer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 53,
        "column": 76,
        "type": "error",
        "message": "Parameter 'deserializer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 54,
        "column": 12,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 54,
        "column": 31,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 54,
        "column": 61,
        "type": "error",
        "message": "Parameter 'skipPast' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 54,
        "column": 79,
        "type": "error",
        "message": "Parameter 'nullSafe' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 63,
        "column": 44,
        "type": "error",
        "message": "Parameter 'serializer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 63,
        "column": 76,
        "type": "error",
        "message": "Parameter 'deserializer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 64,
        "column": 31,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 64,
        "column": 50,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 64,
        "column": 80,
        "type": "error",
        "message": "Parameter 'skipPast' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 68,
        "column": 38,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 68,
        "column": 38,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 70,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 72,
        "column": 17,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 79,
        "column": 42,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 79,
        "column": 49,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 82,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 88,
        "column": 17,
        "type": "error",
        "message": "Local variable 'tree' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 20,
        "type": "error",
        "message": "Avoid variables with short names like d",
        "source": "ShortVariable"
      },
      {
        "line": 94,
        "column": 20,
        "type": "error",
        "message": "Local variable 'd' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 112,
        "column": 60,
        "type": "error",
        "message": "Parameter 'exactType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 112,
        "column": 78,
        "type": "error",
        "message": "Parameter 'typeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 121,
        "column": 20,
        "type": "error",
        "message": "Parameter 'exactType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 121,
        "column": 38,
        "type": "error",
        "message": "Parameter 'typeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 123,
        "column": 13,
        "type": "error",
        "message": "Local variable 'matchRawType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 123,
        "column": 28,
        "type": "error",
        "message": "Call to `getType` on foreign value `exactType` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 132,
        "column": 16,
        "type": "error",
        "message": "Parameter 'hierarchyType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 132,
        "column": 38,
        "type": "error",
        "message": "Parameter 'typeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 143,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'SingleTypeFactory(Object, TypeToken<?>, boolean, Class<?>)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 143,
        "column": 30,
        "type": "error",
        "message": "Parameter 'typeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 143,
        "column": 56,
        "type": "error",
        "message": "Parameter 'exactType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 143,
        "column": 75,
        "type": "error",
        "message": "Parameter 'matchRawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 144,
        "column": 18,
        "type": "error",
        "message": "Parameter 'hierarchyType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 147,
        "column": 13,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 150,
        "column": 13,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 159,
        "column": 43,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 159,
        "column": 62,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 160,
        "column": 15,
        "type": "error",
        "message": "Local variable 'matches' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 161,
        "column": 55,
        "type": "error",
        "message": "Call to `getType` on foreign value `exactType` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 170,
        "column": 17,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 171,
        "column": 51,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 174,
        "column": 51,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 174,
        "column": 61,
        "type": "error",
        "message": "Parameter 'typeOfSrc' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 178,
        "column": 52,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 178,
        "column": 63,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 178,
        "column": 79,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java",
    "score": 0.0,
    "error_count": 21,
    "messages": [
      {
        "line": 32,
        "column": 3,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 32,
        "column": 3,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'TypeAdapterRuntimeTypeWrapper(Gson, TypeAdapter<T>, Type)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 32,
        "column": 38,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 32,
        "column": 62,
        "type": "error",
        "message": "Parameter 'delegate' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 32,
        "column": 77,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 39,
        "column": 28,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 39,
        "column": 28,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 44,
        "column": 32,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 44,
        "column": 39,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 52,
        "column": 10,
        "type": "error",
        "message": "Local variable 'runtimeType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 9,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 55,
        "column": 22,
        "type": "error",
        "message": "Avoid excessively long variable names like runtimeTypeAdapter",
        "source": "LongVariable"
      },
      {
        "line": 55,
        "column": 22,
        "type": "error",
        "message": "Local variable 'runtimeTypeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 7,
        "type": "error",
        "message": "Avoid if (x != y) ..; else ..;",
        "source": "ConfusingTernary"
      },
      {
        "line": 61,
        "column": 14,
        "type": "error",
        "message": "Avoid if (x != y) ..; else ..;",
        "source": "ConfusingTernary"
      },
      {
        "line": 81,
        "column": 22,
        "type": "error",
        "message": "Local variable 'delegate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 33,
        "type": "error",
        "message": "Call to `getSerializationDelegate` on foreign value `(SerializationDelegatingTypeAdapter<?>) typeAdapter` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 83,
        "column": 11,
        "type": "error",
        "message": "Use equals() to compare object references.",
        "source": "CompareObjectsWithEquals"
      },
      {
        "line": 86,
        "column": 7,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'typeAdapter'",
        "source": "AvoidReassigningParameters"
      },
      {
        "line": 95,
        "column": 70,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 97,
        "column": 7,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'type'",
        "source": "AvoidReassigningParameters"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java",
    "score": 0.0,
    "error_count": 304,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "A high number of imports can indicate a high degree of coupling within an object.",
        "source": "ExcessiveImports"
      },
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 72,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 74,
        "column": 45,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 79,
        "column": 34,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 85,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 87,
        "column": 43,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 88,
        "column": 29,
        "type": "error",
        "message": "The method 'read(JsonReader)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 88,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 88,
        "column": 45,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 89,
        "column": 14,
        "type": "error",
        "message": "Local variable 'bitset' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 98,
        "column": 15,
        "type": "error",
        "message": "Local variable 'intValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 34,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 123,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 123,
        "column": 56,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 125,
        "column": 16,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 125,
        "column": 23,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 13,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 21,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 133,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 135,
        "column": 69,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 137,
        "column": 36,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 137,
        "column": 36,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 138,
        "column": 17,
        "type": "error",
        "message": "Local variable 'peek' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 141,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 144,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 149,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 149,
        "column": 47,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 158,
        "column": 79,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 159,
        "column": 46,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 159,
        "column": 46,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 162,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 167,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 167,
        "column": 57,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 172,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 175,
        "column": 65,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 177,
        "column": 35,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 177,
        "column": 35,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 180,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 196,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 196,
        "column": 46,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 205,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 208,
        "column": 66,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 210,
        "column": 35,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 210,
        "column": 35,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 213,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 223,
        "column": 22,
        "type": "error",
        "message": "Number 65535 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 229,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 229,
        "column": 46,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 238,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 241,
        "column": 68,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 243,
        "column": 35,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 243,
        "column": 35,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 246,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 255,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 255,
        "column": 46,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 263,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 266,
        "column": 50,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 267,
        "column": 52,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 267,
        "column": 52,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 274,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 274,
        "column": 63,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 278,
        "column": 42,
        "type": "error",
        "message": "Avoid excessively long variable names like ATOMIC_INTEGER_FACTORY",
        "source": "LongVariable"
      },
      {
        "line": 278,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 279,
        "column": 39,
        "type": "error",
        "message": "Unnecessary qualifier 'TypeAdapters': 'ATOMIC_INTEGER' is already in scope because it is declared in an enclosing type",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 281,
        "column": 50,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 282,
        "column": 52,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 282,
        "column": 52,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 285,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 285,
        "column": 63,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 289,
        "column": 42,
        "type": "error",
        "message": "Avoid excessively long variable names like ATOMIC_BOOLEAN_FACTORY",
        "source": "LongVariable"
      },
      {
        "line": 289,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 290,
        "column": 39,
        "type": "error",
        "message": "Unnecessary qualifier 'TypeAdapters': 'ATOMIC_BOOLEAN' is already in scope because it is declared in an enclosing type",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 292,
        "column": 55,
        "type": "error",
        "message": "Avoid excessively long variable names like ATOMIC_INTEGER_ARRAY",
        "source": "LongVariable"
      },
      {
        "line": 292,
        "column": 55,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 293,
        "column": 57,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 293,
        "column": 57,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 294,
        "column": 23,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 298,
        "column": 17,
        "type": "error",
        "message": "Local variable 'integer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 305,
        "column": 13,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 306,
        "column": 28,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 312,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 312,
        "column": 68,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 314,
        "column": 16,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 314,
        "column": 23,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 320,
        "column": 42,
        "type": "error",
        "message": "Avoid excessively long variable names like ATOMIC_INTEGER_ARRAY_FACTORY",
        "source": "LongVariable"
      },
      {
        "line": 320,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 321,
        "column": 44,
        "type": "error",
        "message": "Unnecessary qualifier 'TypeAdapters': 'ATOMIC_INTEGER_ARRAY' is already in scope because it is declared in an enclosing type",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 323,
        "column": 65,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 325,
        "column": 35,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 325,
        "column": 35,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 328,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 337,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 337,
        "column": 46,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 346,
        "column": 66,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 348,
        "column": 35,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 348,
        "column": 35,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 351,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 356,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 356,
        "column": 46,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 362,
        "column": 16,
        "type": "error",
        "message": "Local variable 'floatNumber' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 368,
        "column": 67,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 370,
        "column": 35,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 370,
        "column": 35,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 373,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 378,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 378,
        "column": 46,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 387,
        "column": 73,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 389,
        "column": 38,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 389,
        "column": 38,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 392,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 394,
        "column": 14,
        "type": "error",
        "message": "Local variable 'str' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 395,
        "column": 27,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 401,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 401,
        "column": 49,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 406,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 409,
        "column": 67,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 411,
        "column": 35,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 411,
        "column": 35,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 412,
        "column": 17,
        "type": "error",
        "message": "Local variable 'peek' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 415,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 419,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 424,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 424,
        "column": 46,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 429,
        "column": 76,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 430,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 430,
        "column": 49,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 433,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 435,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 435,
        "column": 14,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 439,
        "column": 39,
        "type": "error",
        "message": "The String literal \"Failed parsing \\'\" appears 4 times in this file; the first occurrence is on line 439",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 443,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 443,
        "column": 60,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 448,
        "column": 76,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 449,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 449,
        "column": 49,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 452,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 454,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 454,
        "column": 14,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 462,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 462,
        "column": 60,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 467,
        "column": 55,
        "type": "error",
        "message": "Avoid excessively long variable names like LAZILY_PARSED_NUMBER",
        "source": "LongVariable"
      },
      {
        "line": 467,
        "column": 93,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 471,
        "column": 57,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 471,
        "column": 57,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 474,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 479,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 479,
        "column": 68,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 484,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 486,
        "column": 82,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 488,
        "column": 42,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 488,
        "column": 42,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 491,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 496,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 496,
        "column": 53,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 501,
        "column": 42,
        "type": "error",
        "message": "Avoid excessively long variable names like STRING_BUILDER_FACTORY",
        "source": "LongVariable"
      },
      {
        "line": 501,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 504,
        "column": 80,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 506,
        "column": 41,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 506,
        "column": 41,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 509,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 514,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 514,
        "column": 52,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 519,
        "column": 42,
        "type": "error",
        "message": "Avoid excessively long variable names like STRING_BUFFER_FACTORY",
        "source": "LongVariable"
      },
      {
        "line": 519,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 522,
        "column": 61,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 524,
        "column": 32,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 524,
        "column": 32,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 527,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 529,
        "column": 14,
        "type": "error",
        "message": "Local variable 'nextString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 533,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 533,
        "column": 43,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 538,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 540,
        "column": 61,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 542,
        "column": 32,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 542,
        "column": 32,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 545,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 548,
        "column": 16,
        "type": "error",
        "message": "Local variable 'nextString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 555,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 555,
        "column": 43,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 560,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 562,
        "column": 78,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 564,
        "column": 40,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 564,
        "column": 40,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 567,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 573,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 573,
        "column": 51,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 578,
        "column": 42,
        "type": "error",
        "message": "Avoid excessively long variable names like INET_ADDRESS_FACTORY",
        "source": "LongVariable"
      },
      {
        "line": 578,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 581,
        "column": 63,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 583,
        "column": 33,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 583,
        "column": 33,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 586,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 588,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 588,
        "column": 14,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 596,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 596,
        "column": 44,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 601,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 603,
        "column": 45,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 605,
        "column": 37,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 605,
        "column": 37,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 606,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 606,
        "column": 14,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 614,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 614,
        "column": 48,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 618,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 620,
        "column": 71,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 629,
        "column": 37,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 629,
        "column": 37,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 632,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 642,
        "column": 16,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 643,
        "column": 13,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 663,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 663,
        "column": 48,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 685,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 688,
        "column": 67,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 690,
        "column": 35,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 690,
        "column": 35,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 693,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 695,
        "column": 14,
        "type": "error",
        "message": "Local variable 'locale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 696,
        "column": 23,
        "type": "error",
        "message": "Local variable 'tokenizer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 710,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 712,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 718,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 718,
        "column": 46,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 723,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 725,
        "column": 78,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 730,
        "column": 52,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 730,
        "column": 52,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 730,
        "column": 66,
        "type": "error",
        "message": "Parameter 'peeked' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 734,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 737,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 744,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 744,
        "column": 49,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 744,
        "column": 63,
        "type": "error",
        "message": "Parameter 'peeked' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 747,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 749,
        "column": 18,
        "type": "error",
        "message": "Local variable 'number' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 750,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 752,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 762,
        "column": 34,
        "type": "error",
        "message": "The method 'read(JsonReader)' has a cognitive complexity of 24, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 762,
        "column": 34,
        "type": "error",
        "message": "The method 'read(JsonReader)' has a cyclomatic complexity of 11.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 762,
        "column": 34,
        "type": "error",
        "message": "The method 'read(JsonReader)' has an NPath complexity of 276, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 762,
        "column": 50,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 762,
        "column": 50,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 764,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 773,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 776,
        "column": 26,
        "type": "error",
        "message": "Local variable 'stack' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 788,
        "column": 19,
        "type": "error",
        "message": "Local variable 'isNesting' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 822,
        "column": 27,
        "type": "error",
        "message": "The method 'write(JsonWriter, JsonElement)' has a cognitive complexity of 19, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 822,
        "column": 27,
        "type": "error",
        "message": "The method 'write(JsonWriter, JsonElement)' has a cyclomatic complexity of 11.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 822,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 822,
        "column": 61,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 826,
        "column": 23,
        "type": "error",
        "message": "Local variable 'primitive' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 837,
        "column": 26,
        "type": "error",
        "message": "Local variable 'e' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 844,
        "column": 45,
        "type": "error",
        "message": "Local variable 'e' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 856,
        "column": 42,
        "type": "error",
        "message": "Avoid excessively long variable names like JSON_ELEMENT_FACTORY",
        "source": "LongVariable"
      },
      {
        "line": 856,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 864,
        "column": 12,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 869,
        "column": 17,
        "type": "error",
        "message": "Local variable 'constantFields' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 869,
        "column": 84,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new PrivilegedAction<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 871,
        "column": 21,
        "type": "error",
        "message": "Local variable 'fields' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 872,
        "column": 13,
        "type": "error",
        "message": "Avoid using implementation types like 'ArrayList'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 872,
        "column": 30,
        "type": "error",
        "message": "Avoid excessively long variable names like constantFieldsList",
        "source": "LongVariable"
      },
      {
        "line": 872,
        "column": 30,
        "type": "error",
        "message": "Local variable 'constantFieldsList' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 873,
        "column": 24,
        "type": "error",
        "message": "Local variable 'f' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 879,
        "column": 21,
        "type": "error",
        "message": "Local variable 'constantFields' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 884,
        "column": 20,
        "type": "error",
        "message": "Local variable 'constantField' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 885,
        "column": 29,
        "type": "error",
        "message": "The String literal \"unchecked\" appears 7 times in this file; the first occurrence is on line 885",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 886,
        "column": 13,
        "type": "error",
        "message": "Local variable 'constant' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 886,
        "column": 27,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 888,
        "column": 18,
        "type": "error",
        "message": "Local variable 'toStringVal' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 890,
        "column": 26,
        "type": "error",
        "message": "Local variable 'annotation' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 893,
        "column": 25,
        "type": "error",
        "message": "Local variable 'alternate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 905,
        "column": 40,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 905,
        "column": 40,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 908,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 910,
        "column": 14,
        "type": "error",
        "message": "Local variable 'key' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 911,
        "column": 9,
        "type": "error",
        "message": "Local variable 'constant' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 915,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 915,
        "column": 51,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 921,
        "column": 72,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 924,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 930,
        "column": 22,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 935,
        "column": 18,
        "type": "error",
        "message": "Generics names should be a one letter long and upper case.",
        "source": "GenericsNaming"
      },
      {
        "line": 939,
        "column": 74,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 945,
        "column": 18,
        "type": "error",
        "message": "Generics names should be a one letter long and upper case.",
        "source": "GenericsNaming"
      },
      {
        "line": 949,
        "column": 74,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 953,
        "column": 51,
        "type": "error",
        "message": "The String literal \",adapter=\" appears 4 times in this file; the first occurrence is on line 953",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 958,
        "column": 18,
        "type": "error",
        "message": "Generics names should be a one letter long and upper case.",
        "source": "GenericsNaming"
      },
      {
        "line": 962,
        "column": 74,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 963,
        "column": 26,
        "type": "error",
        "message": "Local variable 'rawType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 973,
        "column": 18,
        "type": "error",
        "message": "Generics names should be a one letter long and upper case.",
        "source": "GenericsNaming"
      },
      {
        "line": 977,
        "column": 74,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 978,
        "column": 26,
        "type": "error",
        "message": "Local variable 'rawType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 992,
        "column": 18,
        "type": "error",
        "message": "Generics names should be a one letter long and upper case.",
        "source": "GenericsNaming"
      },
      {
        "line": 996,
        "column": 25,
        "type": "error",
        "message": "Generics names should be a one letter long and upper case.",
        "source": "GenericsNaming"
      },
      {
        "line": 996,
        "column": 77,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 999,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1002,
        "column": 50,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1002,
        "column": 58,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1006,
        "column": 47,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 1006,
        "column": 47,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1007,
        "column": 16,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java",
    "score": 0.0,
    "error_count": 76,
    "messages": [
      {
        "line": 21,
        "column": 8,
        "type": "error",
        "message": "Possible God Class (WMC=62, ATFD=17, TCC=10.714%)",
        "source": "GodClass"
      },
      {
        "line": 21,
        "column": 8,
        "type": "error",
        "message": "This utility class has a non-private constructor",
        "source": "UseUtilityClass"
      },
      {
        "line": 48,
        "column": 38,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 59,
        "column": 38,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 59,
        "column": 52,
        "type": "error",
        "message": "Parameter 'millis' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 71,
        "column": 38,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 71,
        "column": 52,
        "type": "error",
        "message": "Parameter 'millis' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 71,
        "column": 69,
        "type": "error",
        "message": "Avoid variables with short names like tz",
        "source": "ShortVariable"
      },
      {
        "line": 71,
        "column": 69,
        "type": "error",
        "message": "Parameter 'tz' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 72,
        "column": 18,
        "type": "error",
        "message": "Local variable 'calendar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 79,
        "column": 23,
        "type": "error",
        "message": "Local variable 'formatted' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 97,
        "column": 13,
        "type": "error",
        "message": "Local variable 'offset' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 98,
        "column": 9,
        "type": "error",
        "message": "Avoid if (x != y) ..; else ..;",
        "source": "ConfusingTernary"
      },
      {
        "line": 99,
        "column": 17,
        "type": "error",
        "message": "Local variable 'hours' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 34,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 100,
        "column": 17,
        "type": "error",
        "message": "Local variable 'minutes' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 36,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 127,
        "column": 24,
        "type": "error",
        "message": "The method 'parse(String, ParsePosition)' has a NCSS line count of 96.",
        "source": "NcssCount"
      },
      {
        "line": 127,
        "column": 24,
        "type": "error",
        "message": "The method 'parse(String, ParsePosition)' has a cognitive complexity of 53, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 127,
        "column": 24,
        "type": "error",
        "message": "The method 'parse(String, ParsePosition)' has a cyclomatic complexity of 36.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 127,
        "column": 24,
        "type": "error",
        "message": "The method 'parse(String, ParsePosition)' has an NPath complexity of 121698, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 127,
        "column": 37,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 127,
        "column": 57,
        "type": "error",
        "message": "Parameter 'pos' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 128,
        "column": 26,
        "type": "error",
        "message": "The initializer for variable 'fail' is never used (overwritten on lines 268, 270 and 272)",
        "source": "UnusedAssignment"
      },
      {
        "line": 133,
        "column": 17,
        "type": "error",
        "message": "Local variable 'year' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 139,
        "column": 17,
        "type": "error",
        "message": "Local variable 'month' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 145,
        "column": 17,
        "type": "error",
        "message": "Local variable 'day' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 147,
        "column": 17,
        "type": "error",
        "message": "Declaration of 'hour' can be moved closer to its usages",
        "source": "PrematureDeclaration"
      },
      {
        "line": 148,
        "column": 17,
        "type": "error",
        "message": "Declaration of 'minutes' can be moved closer to its usages",
        "source": "PrematureDeclaration"
      },
      {
        "line": 149,
        "column": 17,
        "type": "error",
        "message": "Declaration of 'seconds' can be moved closer to its usages",
        "source": "PrematureDeclaration"
      },
      {
        "line": 150,
        "column": 17,
        "type": "error",
        "message": "Declaration of 'milliseconds' can be moved closer to its usages",
        "source": "PrematureDeclaration"
      },
      {
        "line": 153,
        "column": 21,
        "type": "error",
        "message": "Local variable 'hasT' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 156,
        "column": 26,
        "type": "error",
        "message": "Local variable 'calendar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 160,
        "column": 17,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 177,
        "column": 26,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 177,
        "column": 26,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 180,
        "column": 25,
        "type": "error",
        "message": "Deeply nested if..then statements are hard to read",
        "source": "AvoidDeeplyNestedIfStmts"
      },
      {
        "line": 180,
        "column": 59,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 182,
        "column": 25,
        "type": "error",
        "message": "Deeply nested if..then statements are hard to read",
        "source": "AvoidDeeplyNestedIfStmts"
      },
      {
        "line": 184,
        "column": 33,
        "type": "error",
        "message": "Local variable 'endOffset' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 185,
        "column": 33,
        "type": "error",
        "message": "Local variable 'parseEndOffset' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 186,
        "column": 33,
        "type": "error",
        "message": "Local variable 'fraction' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 209,
        "column": 33,
        "type": "error",
        "message": "The initializer for variable 'timezone' is never used (overwritten on lines 213, 224 and 233)",
        "source": "UnusedAssignment"
      },
      {
        "line": 210,
        "column": 18,
        "type": "error",
        "message": "Local variable 'timezoneIndicator' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 212,
        "column": 38,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 230,
        "column": 28,
        "type": "error",
        "message": "Local variable 'timezoneId' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 235,
        "column": 28,
        "type": "error",
        "message": "Local variable 'act' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 242,
        "column": 32,
        "type": "error",
        "message": "Local variable 'cleaned' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 253,
        "column": 22,
        "type": "error",
        "message": "Local variable 'calendar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 267,
        "column": 11,
        "type": "error",
        "message": "Exception thrown at line 244 is caught in this block.",
        "source": "ExceptionAsFlowControl"
      },
      {
        "line": 267,
        "column": 11,
        "type": "error",
        "message": "Exception thrown at line 250 is caught in this block.",
        "source": "ExceptionAsFlowControl"
      },
      {
        "line": 269,
        "column": 11,
        "type": "error",
        "message": "'catch' branch identical to 'IndexOutOfBoundsException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 271,
        "column": 11,
        "type": "error",
        "message": "'catch' branch identical to 'IndexOutOfBoundsException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 271,
        "column": 11,
        "type": "error",
        "message": "Exception thrown at line 206 is caught in this block.",
        "source": "ExceptionAsFlowControl"
      },
      {
        "line": 274,
        "column": 16,
        "type": "error",
        "message": "Local variable 'input' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 279,
        "column": 24,
        "type": "error",
        "message": "Avoid variables with short names like ex",
        "source": "ShortVariable"
      },
      {
        "line": 279,
        "column": 24,
        "type": "error",
        "message": "Local variable 'ex' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 292,
        "column": 47,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 292,
        "column": 58,
        "type": "error",
        "message": "Parameter 'offset' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 292,
        "column": 71,
        "type": "error",
        "message": "Parameter 'expected' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 305,
        "column": 24,
        "type": "error",
        "message": "The method 'parseInt(String, int, int)' has a cyclomatic complexity of 11.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 305,
        "column": 40,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 305,
        "column": 51,
        "type": "error",
        "message": "Parameter 'beginIndex' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 305,
        "column": 67,
        "type": "error",
        "message": "Parameter 'endIndex' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 305,
        "column": 84,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 310,
        "column": 13,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 338,
        "column": 46,
        "type": "error",
        "message": "Parameter 'buffer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 338,
        "column": 58,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 338,
        "column": 69,
        "type": "error",
        "message": "Parameter 'length' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 339,
        "column": 16,
        "type": "error",
        "message": "Local variable 'strValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 349,
        "column": 47,
        "type": "error",
        "message": "Parameter 'string' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 349,
        "column": 59,
        "type": "error",
        "message": "Parameter 'offset' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 351,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 351,
        "column": 18,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 352,
        "column": 37,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 352,
        "column": 37,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/reflect/ReflectionHelper.java",
    "score": 3.0,
    "error_count": 14,
    "messages": [
      {
        "line": 8,
        "column": 8,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 18,
        "column": 43,
        "type": "error",
        "message": "Parameter 'field' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 18,
        "column": 57,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 20,
        "column": 7,
        "type": "error",
        "message": "You should not modify visibility of constructors, methods or fields using setAccessible()",
        "source": "AvoidAccessibilityAlteration"
      },
      {
        "line": 21,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 32,
        "column": 60,
        "type": "error",
        "message": "Parameter 'constructor' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 33,
        "column": 19,
        "type": "error",
        "message": "Local variable 'stringBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 37,
        "column": 16,
        "type": "error",
        "message": "Local variable 'parameters' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 57,
        "type": "error",
        "message": "Parameter 'constructor' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 58,
        "column": 7,
        "type": "error",
        "message": "You should not modify visibility of constructors, methods or fields using setAccessible()",
        "source": "AvoidAccessibilityAlteration"
      },
      {
        "line": 59,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 60,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 68,
        "column": 99,
        "type": "error",
        "message": "Parameter 'exception' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/sql/SqlDateTypeAdapter.java",
    "score": 4.5,
    "error_count": 11,
    "messages": [
      {
        "line": 40,
        "column": 35,
        "type": "error",
        "message": "Missing commented default access modifier on field 'FACTORY'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 42,
        "column": 72,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 48,
        "column": 37,
        "type": "error",
        "message": "When instantiating a SimpleDateFormat object, specify a Locale",
        "source": "SimpleDateFormatNeedsLocale"
      },
      {
        "line": 50,
        "column": 11,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 54,
        "column": 40,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 54,
        "column": 40,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 57,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 59,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 59,
        "column": 12,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 32,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 72,
        "column": 51,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/sql/SqlTimeTypeAdapter.java",
    "score": 4.0,
    "error_count": 12,
    "messages": [
      {
        "line": 41,
        "column": 35,
        "type": "error",
        "message": "Missing commented default access modifier on field 'FACTORY'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 43,
        "column": 72,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 48,
        "column": 37,
        "type": "error",
        "message": "When instantiating a SimpleDateFormat object, specify a Locale",
        "source": "SimpleDateFormatNeedsLocale"
      },
      {
        "line": 50,
        "column": 11,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 53,
        "column": 41,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 53,
        "column": 41,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 56,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 14,
        "type": "error",
        "message": "Local variable 'date' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 42,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 69,
        "column": 52,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/sql/SqlTimestampTypeAdapter.java",
    "score": 4.0,
    "error_count": 12,
    "messages": [
      {
        "line": 14,
        "column": 1,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 15,
        "column": 35,
        "type": "error",
        "message": "Missing commented default access modifier on field 'FACTORY'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 17,
        "column": 53,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 17,
        "column": 72,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 20,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 29,
        "column": 11,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 29,
        "column": 53,
        "type": "error",
        "message": "Parameter 'dateTypeAdapter' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 34,
        "column": 36,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 34,
        "column": 36,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 35,
        "column": 10,
        "type": "error",
        "message": "Local variable 'date' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 40,
        "column": 32,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 40,
        "column": 47,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/internal/sql/SqlTypesSupport.java",
    "score": 6.0,
    "error_count": 8,
    "messages": [
      {
        "line": 20,
        "column": 14,
        "type": "error",
        "message": "The class 'SqlTypesSupport' is suspected to be a Data Class (WOC=0.000%, NOPA=6, NOAM=0, WMC=1)",
        "source": "DataClass"
      },
      {
        "line": 25,
        "column": 31,
        "type": "error",
        "message": "Avoid excessively long variable names like SUPPORTS_SQL_TYPES",
        "source": "LongVariable"
      },
      {
        "line": 28,
        "column": 48,
        "type": "error",
        "message": "Avoid excessively long variable names like TIMESTAMP_DATE_TYPE",
        "source": "LongVariable"
      },
      {
        "line": 39,
        "column": 37,
        "type": "error",
        "message": "Avoid excessively long variable names like classNotFoundException",
        "source": "LongVariable"
      },
      {
        "line": 45,
        "column": 36,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new DateType<>(java.sql.Date.class)`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 46,
        "column": 60,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 50,
        "column": 41,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new DateType<>(Timestamp.class)`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 51,
        "column": 56,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/reflect/TypeToken.java",
    "score": 0.0,
    "error_count": 72,
    "messages": [
      {
        "line": 55,
        "column": 8,
        "type": "error",
        "message": "Possible God Class (WMC=56, ATFD=29, TCC=4.575%)",
        "source": "GodClass"
      },
      {
        "line": 55,
        "column": 27,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 58,
        "column": 21,
        "type": "error",
        "message": "Field hashCode has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 79,
        "column": 26,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 91,
        "column": 10,
        "type": "error",
        "message": "Local variable 'superclass' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 93,
        "column": 25,
        "type": "error",
        "message": "Local variable 'parameterized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 129,
        "column": 44,
        "type": "error",
        "message": "Parameter 'cls' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 140,
        "column": 40,
        "type": "error",
        "message": "Parameter 'from' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 142,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 146,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 150,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 152,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 153,
        "column": 22,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new HashMap<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 170,
        "column": 48,
        "type": "error",
        "message": "Parameter 'token' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 178,
        "column": 48,
        "type": "error",
        "message": "Parameter 'from' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 178,
        "column": 71,
        "type": "error",
        "message": "Avoid variables with short names like to",
        "source": "ShortVariable"
      },
      {
        "line": 178,
        "column": 71,
        "type": "error",
        "message": "Parameter 'to' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 179,
        "column": 10,
        "type": "error",
        "message": "Avoid excessively long variable names like toGenericComponentType",
        "source": "LongVariable"
      },
      {
        "line": 179,
        "column": 10,
        "type": "error",
        "message": "Local variable 'toGenericComponentType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 181,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like t",
        "source": "ShortVariable"
      },
      {
        "line": 191,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 192,
        "column": 22,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new HashMap<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 203,
        "column": 26,
        "type": "error",
        "message": "The method 'isAssignableFrom(Type, ParameterizedType, Map<String, Type>)' has a cognitive complexity of 16, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 203,
        "column": 26,
        "type": "error",
        "message": "The method 'isAssignableFrom(Type, ParameterizedType, Map<String, Type>)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 203,
        "column": 48,
        "type": "error",
        "message": "Parameter 'from' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 203,
        "column": 72,
        "type": "error",
        "message": "Avoid variables with short names like to",
        "source": "ShortVariable"
      },
      {
        "line": 203,
        "column": 72,
        "type": "error",
        "message": "Parameter 'to' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 204,
        "column": 25,
        "type": "error",
        "message": "Parameter 'typeVarMap' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 207,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 211,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 215,
        "column": 14,
        "type": "error",
        "message": "Local variable 'clazz' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 223,
        "column": 14,
        "type": "error",
        "message": "Local variable 'tArgs' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 224,
        "column": 25,
        "type": "error",
        "message": "Local variable 'tParams' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 227,
        "column": 25,
        "type": "error",
        "message": "Local variable 'var' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 229,
        "column": 27,
        "type": "error",
        "message": "Avoid variables with short names like v",
        "source": "ShortVariable"
      },
      {
        "line": 229,
        "column": 27,
        "type": "error",
        "message": "Local variable 'v' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 237,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 241,
        "column": 15,
        "type": "error",
        "message": "Local variable 'itype' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 243,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 248,
        "column": 10,
        "type": "error",
        "message": "Local variable 'sType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 256,
        "column": 55,
        "type": "error",
        "message": "Parameter 'from' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 257,
        "column": 25,
        "type": "error",
        "message": "Avoid variables with short names like to",
        "source": "ShortVariable"
      },
      {
        "line": 257,
        "column": 25,
        "type": "error",
        "message": "Parameter 'to' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 257,
        "column": 47,
        "type": "error",
        "message": "Parameter 'typeVarMap' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 259,
        "column": 14,
        "type": "error",
        "message": "Local variable 'fromArgs' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 260,
        "column": 14,
        "type": "error",
        "message": "Local variable 'toArgs' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 263,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 266,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 272,
        "column": 12,
        "type": "error",
        "message": "Parameter 'token' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 272,
        "column": 31,
        "type": "error",
        "message": "Parameter 'expected' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 275,
        "column": 19,
        "type": "error",
        "message": "Local variable 'exceptionMessage' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 277,
        "column": 19,
        "type": "error",
        "message": "Local variable 'clazz' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 290,
        "column": 39,
        "type": "error",
        "message": "Parameter 'from' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 290,
        "column": 50,
        "type": "error",
        "message": "Avoid variables with short names like to",
        "source": "ShortVariable"
      },
      {
        "line": 290,
        "column": 50,
        "type": "error",
        "message": "Parameter 'to' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 290,
        "column": 72,
        "type": "error",
        "message": "Parameter 'typeMap' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 301,
        "column": 48,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 301,
        "column": 48,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 313,
        "column": 39,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 320,
        "column": 47,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 341,
        "column": 52,
        "type": "error",
        "message": "Parameter 'rawType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 341,
        "column": 69,
        "type": "error",
        "message": "Parameter 'typeArguments' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 351,
        "column": 14,
        "type": "error",
        "message": "Local variable 'rawClass' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 352,
        "column": 23,
        "type": "error",
        "message": "Local variable 'typeVariables' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 354,
        "column": 9,
        "type": "error",
        "message": "Local variable 'expectedArgsCount' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 355,
        "column": 9,
        "type": "error",
        "message": "Local variable 'actualArgsCount' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 362,
        "column": 12,
        "type": "error",
        "message": "Local variable 'typeArgument' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 363,
        "column": 16,
        "type": "error",
        "message": "Local variable 'rawTypeArgument' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 364,
        "column": 23,
        "type": "error",
        "message": "Local variable 'typeVariable' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 366,
        "column": 17,
        "type": "error",
        "message": "Local variable 'bound' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 367,
        "column": 18,
        "type": "error",
        "message": "Local variable 'rawBound' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 382,
        "column": 44,
        "type": "error",
        "message": "Parameter 'componentType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/stream/JsonReader.java",
    "score": 0.0,
    "error_count": 238,
    "messages": [
      {
        "line": 192,
        "column": 8,
        "type": "error",
        "message": "The class 'JsonReader' has a total cyclomatic complexity of 397 (highest 49).",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 192,
        "column": 46,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 193,
        "column": 29,
        "type": "error",
        "message": "Avoid excessively long variable names like MIN_INCOMPLETE_INTEGER",
        "source": "LongVariable"
      },
      {
        "line": 196,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like PEEKED_BEGIN_OBJECT",
        "source": "LongVariable"
      },
      {
        "line": 198,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like PEEKED_BEGIN_ARRAY",
        "source": "LongVariable"
      },
      {
        "line": 203,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like PEEKED_SINGLE_QUOTED",
        "source": "LongVariable"
      },
      {
        "line": 204,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like PEEKED_DOUBLE_QUOTED",
        "source": "LongVariable"
      },
      {
        "line": 208,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like PEEKED_SINGLE_QUOTED_NAME",
        "source": "LongVariable"
      },
      {
        "line": 209,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like PEEKED_DOUBLE_QUOTED_NAME",
        "source": "LongVariable"
      },
      {
        "line": 210,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like PEEKED_UNQUOTED_NAME",
        "source": "LongVariable"
      },
      {
        "line": 220,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like NUMBER_CHAR_DECIMAL",
        "source": "LongVariable"
      },
      {
        "line": 221,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like NUMBER_CHAR_FRACTION_DIGIT",
        "source": "LongVariable"
      },
      {
        "line": 223,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like NUMBER_CHAR_EXP_SIGN",
        "source": "LongVariable"
      },
      {
        "line": 224,
        "column": 28,
        "type": "error",
        "message": "Avoid excessively long variable names like NUMBER_CHAR_EXP_DIGIT",
        "source": "LongVariable"
      },
      {
        "line": 227,
        "column": 24,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 232,
        "column": 20,
        "type": "error",
        "message": "Missing commented default access modifier on field 'BUFFER_SIZE'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 246,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 'peeked'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 258,
        "column": 15,
        "type": "error",
        "message": "Avoid excessively long variable names like peekedNumberLength",
        "source": "LongVariable"
      },
      {
        "line": 272,
        "column": 3,
        "type": "error",
        "message": "Non-static initializers are confusing",
        "source": "NonStaticInitializer"
      },
      {
        "line": 290,
        "column": 28,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 290,
        "column": 28,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 333,
        "column": 40,
        "type": "error",
        "message": "Parameter 'lenient' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 349,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 367,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 385,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 402,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 408,
        "column": 30,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 420,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 430,
        "column": 20,
        "type": "error",
        "message": "The method 'peek()' has a cyclomatic complexity of 20.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 431,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 438,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 440,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 442,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 444,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 448,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 451,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 453,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 458,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 461,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 469,
        "column": 21,
        "type": "error",
        "message": "The String literal \"fallthrough\" appears 5 times in this file; the first occurrence is on line 469",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 470,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on method 'doPeek()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 470,
        "column": 7,
        "type": "error",
        "message": "The method 'doPeek()' has a NCSS line count of 113.",
        "source": "NcssCount"
      },
      {
        "line": 470,
        "column": 7,
        "type": "error",
        "message": "The method 'doPeek()' has a cognitive complexity of 63, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 470,
        "column": 7,
        "type": "error",
        "message": "The method 'doPeek()' has a cyclomatic complexity of 49.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 470,
        "column": 7,
        "type": "error",
        "message": "The method 'doPeek()' has an NPath complexity of 4992, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 471,
        "column": 9,
        "type": "error",
        "message": "Local variable 'peekStack' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 476,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 476,
        "column": 11,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 479,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 491,
        "column": 13,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 491,
        "column": 13,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 494,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 503,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 503,
        "column": 11,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 506,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 509,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 511,
        "column": 9,
        "type": "error",
        "message": "Avoid if (x != y) ..; else ..;",
        "source": "ConfusingTernary"
      },
      {
        "line": 512,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 520,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 528,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 528,
        "column": 11,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 547,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 547,
        "column": 11,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 549,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 558,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 558,
        "column": 9,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 562,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 571,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 577,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 579,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 581,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 583,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 590,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 595,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 606,
        "column": 15,
        "type": "error",
        "message": "The method 'peekKeyword()' has a cognitive complexity of 17, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 606,
        "column": 15,
        "type": "error",
        "message": "The method 'peekKeyword()' has a cyclomatic complexity of 15.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 606,
        "column": 15,
        "type": "error",
        "message": "The method 'peekKeyword()' has an NPath complexity of 280, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 608,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 625,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 629,
        "column": 9,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 632,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 636,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 642,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 650,
        "column": 15,
        "type": "error",
        "message": "The method 'peekNumber()' has a NCSS line count of 77.",
        "source": "NcssCount"
      },
      {
        "line": 650,
        "column": 15,
        "type": "error",
        "message": "The method 'peekNumber()' has a cognitive complexity of 56, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 650,
        "column": 15,
        "type": "error",
        "message": "The method 'peekNumber()' has a cyclomatic complexity of 36.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 650,
        "column": 15,
        "type": "error",
        "message": "The method 'peekNumber()' has an NPath complexity of 2486, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 652,
        "column": 12,
        "type": "error",
        "message": "Local variable 'buffer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 653,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 654,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like l",
        "source": "ShortVariable"
      },
      {
        "line": 661,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 669,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 678,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 678,
        "column": 12,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 689,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 696,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 704,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 711,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 718,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 725,
        "column": 13,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 727,
        "column": 16,
        "type": "error",
        "message": "Local variable 'newValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 740,
        "column": 106,
        "type": "error",
        "message": "Avoid unnecessary comparisons in boolean expressions",
        "source": "SimplifyBooleanExpressions"
      },
      {
        "line": 743,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 747,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 754,
        "column": 19,
        "type": "error",
        "message": "The method 'isLiteral(char)' has a cyclomatic complexity of 17.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 754,
        "column": 34,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 754,
        "column": 34,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 773,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 787,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 815,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 828,
        "column": 22,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 850,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 857,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 874,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 897,
        "column": 17,
        "type": "error",
        "message": "The method 'nextDouble()' has a cyclomatic complexity of 14.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 898,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 906,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 906,
        "column": 14,
        "type": "error",
        "message": "Unnecessary cast (double)",
        "source": "UnnecessaryCast"
      },
      {
        "line": 920,
        "column": 14,
        "type": "error",
        "message": "The value assigned to field 'peeked' is never used (overwritten on line 927)",
        "source": "UnusedAssignment"
      },
      {
        "line": 921,
        "column": 12,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 926,
        "column": 20,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 942,
        "column": 15,
        "type": "error",
        "message": "The method 'nextLong()' has a cognitive complexity of 15, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 942,
        "column": 15,
        "type": "error",
        "message": "The method 'nextLong()' has a cyclomatic complexity of 13.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 943,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 951,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 964,
        "column": 14,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 967,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 975,
        "column": 14,
        "type": "error",
        "message": "The value assigned to field 'peeked' is never used (overwritten on line 982)",
        "source": "UnusedAssignment"
      },
      {
        "line": 976,
        "column": 12,
        "type": "error",
        "message": "Local variable 'asDouble' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 977,
        "column": 10,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 981,
        "column": 20,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 997,
        "column": 18,
        "type": "error",
        "message": "The method 'nextQuotedValue(char)' has a cognitive complexity of 21, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 997,
        "column": 18,
        "type": "error",
        "message": "The method 'nextQuotedValue(char)' has a cyclomatic complexity of 11.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 997,
        "column": 39,
        "type": "error",
        "message": "Parameter 'quote' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 999,
        "column": 12,
        "type": "error",
        "message": "Local variable 'buffer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1002,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 1003,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like l",
        "source": "ShortVariable"
      },
      {
        "line": 1007,
        "column": 13,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 1007,
        "column": 13,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1011,
        "column": 15,
        "type": "error",
        "message": "Local variable 'len' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1013,
        "column": 13,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1018,
        "column": 25,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 1020,
        "column": 15,
        "type": "error",
        "message": "Local variable 'len' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1022,
        "column": 17,
        "type": "error",
        "message": "Local variable 'estimatedLength' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1030,
        "column": 25,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 1032,
        "column": 23,
        "type": "error",
        "message": "The value assigned to field 'lineStart' is never used (reassigned every iteration)",
        "source": "UnusedAssignment"
      },
      {
        "line": 1037,
        "column": 13,
        "type": "error",
        "message": "Local variable 'estimatedLength' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1052,
        "column": 18,
        "type": "error",
        "message": "The method 'nextUnquotedValue()' has a cognitive complexity of 18, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 1052,
        "column": 18,
        "type": "error",
        "message": "The method 'nextUnquotedValue()' has a cyclomatic complexity of 24.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 1052,
        "column": 18,
        "type": "error",
        "message": "The method 'nextUnquotedValue()' has an NPath complexity of 410, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 1054,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 1059,
        "column": 9,
        "type": "error",
        "message": "Switch statements should be exhaustive, add a default case (or missing enum branches)",
        "source": "SwitchStmtsShouldHaveDefault"
      },
      {
        "line": 1102,
        "column": 12,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1107,
        "column": 37,
        "type": "error",
        "message": "Parameter 'quote' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1109,
        "column": 12,
        "type": "error",
        "message": "Local variable 'buffer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1111,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 1112,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like l",
        "source": "ShortVariable"
      },
      {
        "line": 1115,
        "column": 13,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 1115,
        "column": 13,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1119,
        "column": 25,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 1124,
        "column": 25,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 1126,
        "column": 23,
        "type": "error",
        "message": "The value assigned to field 'lineStart' is never used (reassigned every iteration)",
        "source": "UnusedAssignment"
      },
      {
        "line": 1135,
        "column": 16,
        "type": "error",
        "message": "The method 'skipUnquotedValue()' has a cyclomatic complexity of 19.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 1137,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 1139,
        "column": 9,
        "type": "error",
        "message": "Switch statements should be exhaustive, add a default case (or missing enum branches)",
        "source": "SwitchStmtsShouldHaveDefault"
      },
      {
        "line": 1175,
        "column": 14,
        "type": "error",
        "message": "The method 'nextInt()' has a cognitive complexity of 17, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 1175,
        "column": 14,
        "type": "error",
        "message": "The method 'nextInt()' has a cyclomatic complexity of 15.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 1176,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 1189,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1205,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1213,
        "column": 14,
        "type": "error",
        "message": "The value assigned to field 'peeked' is never used (overwritten on line 1220)",
        "source": "UnusedAssignment"
      },
      {
        "line": 1214,
        "column": 12,
        "type": "error",
        "message": "Local variable 'asDouble' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1219,
        "column": 20,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 1240,
        "column": 15,
        "type": "error",
        "message": "The method 'skipValue()' has a cognitive complexity of 15, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 1240,
        "column": 15,
        "type": "error",
        "message": "The method 'skipValue()' has a cyclomatic complexity of 14.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 1243,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 1276,
        "column": 25,
        "type": "error",
        "message": "Parameter 'newTop' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1278,
        "column": 11,
        "type": "error",
        "message": "Local variable 'newLength' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1292,
        "column": 12,
        "type": "error",
        "message": "Local variable 'buffer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1294,
        "column": 5,
        "type": "error",
        "message": "Avoid if (x != y) ..; else ..;",
        "source": "ConfusingTernary"
      },
      {
        "line": 1303,
        "column": 12,
        "type": "error",
        "message": "Avoid assignments in operands",
        "source": "AssignmentInOperand"
      },
      {
        "line": 1310,
        "column": 9,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'minimum'",
        "source": "AvoidReassigningParameters"
      },
      {
        "line": 1314,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1326,
        "column": 15,
        "type": "error",
        "message": "The method 'nextNonWhitespace(boolean)' has a cognitive complexity of 30, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 1326,
        "column": 15,
        "type": "error",
        "message": "The method 'nextNonWhitespace(boolean)' has a cyclomatic complexity of 18.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 1326,
        "column": 15,
        "type": "error",
        "message": "The method 'nextNonWhitespace(boolean)' has an NPath complexity of 422, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 1326,
        "column": 41,
        "type": "error",
        "message": "Parameter 'throwOnEof' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1335,
        "column": 12,
        "type": "error",
        "message": "Local variable 'buffer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1336,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 1337,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like l",
        "source": "ShortVariable"
      },
      {
        "line": 1348,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 1348,
        "column": 11,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1349,
        "column": 16,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 1351,
        "column": 21,
        "type": "error",
        "message": "The value assigned to field 'lineStart' is never used (reassigned every iteration)",
        "source": "UnusedAssignment"
      },
      {
        "line": 1357,
        "column": 16,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 1361,
        "column": 19,
        "type": "error",
        "message": "Local variable 'charsLoaded' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1364,
        "column": 13,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1369,
        "column": 14,
        "type": "error",
        "message": "Local variable 'peek' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1390,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1392,
        "column": 23,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 1405,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1428,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 1428,
        "column": 12,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1429,
        "column": 16,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 1433,
        "column": 23,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 1442,
        "column": 33,
        "type": "error",
        "message": "Parameter 'toFind' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1443,
        "column": 9,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1446,
        "column": 26,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 1448,
        "column": 21,
        "type": "error",
        "message": "The value assigned to field 'lineStart' is never used (reassigned every iteration)",
        "source": "UnusedAssignment"
      },
      {
        "line": 1456,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1456,
        "column": 7,
        "type": "error",
        "message": "Avoid using a branching statement as the last in a loop.",
        "source": "AvoidBranchingStatementAsLastInLoop"
      },
      {
        "line": 1465,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on method 'locationString()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 1466,
        "column": 9,
        "type": "error",
        "message": "Local variable 'line' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1467,
        "column": 9,
        "type": "error",
        "message": "Local variable 'column' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1471,
        "column": 18,
        "type": "error",
        "message": "The method 'getPath(boolean)' has a cyclomatic complexity of 14.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 1471,
        "column": 34,
        "type": "error",
        "message": "Parameter 'usePreviousPath' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1472,
        "column": 19,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1474,
        "column": 7,
        "type": "error",
        "message": "Switch statements should be exhaustive, add a default case (or missing enum branches)",
        "source": "SwitchStmtsShouldHaveDefault"
      },
      {
        "line": 1546,
        "column": 16,
        "type": "error",
        "message": "The method 'readEscapeCharacter()' has a cognitive complexity of 17, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 1546,
        "column": 16,
        "type": "error",
        "message": "The method 'readEscapeCharacter()' has a cyclomatic complexity of 27.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 1551,
        "column": 10,
        "type": "error",
        "message": "Local variable 'escaped' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1559,
        "column": 16,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 1559,
        "column": 25,
        "type": "error",
        "message": "Local variable 'end' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1560,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 1560,
        "column": 14,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1573,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1576,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1579,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1582,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1585,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1588,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1610,
        "column": 42,
        "type": "error",
        "message": "Parameter 'message' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1623,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 1626,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 1626,
        "column": 9,
        "type": "error",
        "message": "Local variable 'p' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1627,
        "column": 12,
        "type": "error",
        "message": "Local variable 'buf' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1638,
        "column": 59,
        "type": "error",
        "message": "Parameter 'reader' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1643,
        "column": 13,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/stream/JsonScope.java",
    "score": 6.0,
    "error_count": 8,
    "messages": [
      {
        "line": 31,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on field 'EMPTY_ARRAY'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 37,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on field 'NONEMPTY_ARRAY'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 43,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on field 'EMPTY_OBJECT'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 49,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on field 'DANGLING_NAME'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 55,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on field 'NONEMPTY_OBJECT'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 60,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on field 'EMPTY_DOCUMENT'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 65,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on field 'NONEMPTY_DOCUMENT'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 70,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on field 'CLOSED'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/stream/JsonWriter.java",
    "score": 0.0,
    "error_count": 57,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "Too many static imports may lead to messy code",
        "source": "TooManyStaticImports"
      },
      {
        "line": 136,
        "column": 8,
        "type": "error",
        "message": "The class 'JsonWriter' has a total cyclomatic complexity of 101 (highest 10).",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 136,
        "column": 57,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 139,
        "column": 32,
        "type": "error",
        "message": "Avoid excessively long variable names like VALID_JSON_NUMBER_PATTERN",
        "source": "LongVariable"
      },
      {
        "line": 152,
        "column": 33,
        "type": "error",
        "message": "Avoid excessively long variable names like HTML_SAFE_REPLACEMENT_CHARS",
        "source": "LongVariable"
      },
      {
        "line": 178,
        "column": 3,
        "type": "error",
        "message": "Non-static initializers are confusing",
        "source": "NonStaticInitializer"
      },
      {
        "line": 206,
        "column": 28,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 218,
        "column": 38,
        "type": "error",
        "message": "Parameter 'indent' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 220,
        "column": 21,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 238,
        "column": 40,
        "type": "error",
        "message": "Parameter 'lenient' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 256,
        "column": 41,
        "type": "error",
        "message": "Parameter 'htmlSafe' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 272,
        "column": 47,
        "type": "error",
        "message": "Parameter 'serializeNulls' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 280,
        "column": 24,
        "type": "error",
        "message": "A getX() method which returns a boolean should be named isX()",
        "source": "BooleanGetMethodName"
      },
      {
        "line": 328,
        "column": 31,
        "type": "error",
        "message": "Parameter 'empty' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 328,
        "column": 43,
        "type": "error",
        "message": "Parameter 'openBracket' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 339,
        "column": 32,
        "type": "error",
        "message": "Parameter 'empty' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 339,
        "column": 43,
        "type": "error",
        "message": "Parameter 'nonempty' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 339,
        "column": 58,
        "type": "error",
        "message": "Parameter 'closeBracket' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 341,
        "column": 9,
        "type": "error",
        "message": "Local variable 'context' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 357,
        "column": 25,
        "type": "error",
        "message": "Parameter 'newTop' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 377,
        "column": 31,
        "type": "error",
        "message": "Parameter 'topOfStack' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 387,
        "column": 33,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 403,
        "column": 22,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 413,
        "column": 34,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 415,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 434,
        "column": 38,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 436,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 454,
        "column": 24,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 455,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 468,
        "column": 35,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 481,
        "column": 35,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 483,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 502,
        "column": 33,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 521,
        "column": 34,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 536,
        "column": 32,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 547,
        "column": 70,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 547,
        "column": 70,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 565,
        "column": 21,
        "type": "error",
        "message": "The method 'value(Number)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 565,
        "column": 34,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 567,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 571,
        "column": 12,
        "type": "error",
        "message": "Local variable 'string' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 572,
        "column": 9,
        "type": "error",
        "message": "Position literals first in String comparisons",
        "source": "LiteralsFirstInComparisons"
      },
      {
        "line": 572,
        "column": 39,
        "type": "error",
        "message": "Position literals first in String comparisons",
        "source": "LiteralsFirstInComparisons"
      },
      {
        "line": 572,
        "column": 68,
        "type": "error",
        "message": "Position literals first in String comparisons",
        "source": "LiteralsFirstInComparisons"
      },
      {
        "line": 577,
        "column": 31,
        "type": "error",
        "message": "Local variable 'numberClass' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 608,
        "column": 9,
        "type": "error",
        "message": "Local variable 'size' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 615,
        "column": 30,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 616,
        "column": 14,
        "type": "error",
        "message": "Local variable 'replacements' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 619,
        "column": 9,
        "type": "error",
        "message": "Local variable 'length' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 621,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 621,
        "column": 12,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 623,
        "column": 15,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 628,
        "column": 23,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 630,
        "column": 23,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 653,
        "column": 14,
        "type": "error",
        "message": "Too many control variables in the for statement",
        "source": "ForLoopVariableCount"
      },
      {
        "line": 653,
        "column": 21,
        "type": "error",
        "message": "Local variable 'size' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 663,
        "column": 9,
        "type": "error",
        "message": "Local variable 'context' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/main/java/com/google/gson/stream/MalformedJsonException.java",
    "score": 8.0,
    "error_count": 4,
    "messages": [
      {
        "line": 28,
        "column": 40,
        "type": "error",
        "message": "Parameter 'msg' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 32,
        "column": 40,
        "type": "error",
        "message": "Parameter 'msg' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 32,
        "column": 55,
        "type": "error",
        "message": "Parameter 'throwable' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 36,
        "column": 43,
        "type": "error",
        "message": "Parameter 'throwable' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/CommentsTest.java",
    "score": 7.5,
    "error_count": 5,
    "messages": [
      {
        "line": 27,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 32,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 32,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 33,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 18,
        "type": "error",
        "message": "Local variable 'abc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/DefaultInetAddressTypeAdapterTest.java",
    "score": 6.0,
    "error_count": 8,
    "messages": [
      {
        "line": 28,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 37,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 37,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 37,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 38,
        "column": 17,
        "type": "error",
        "message": "Local variable 'address' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 38,
        "column": 49,
        "type": "error",
        "message": "Do not hard code the IP address ${variableName}",
        "source": "AvoidUsingHardCodedIP"
      },
      {
        "line": 39,
        "column": 12,
        "type": "error",
        "message": "Local variable 'jsonAddress' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 17,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/DefaultMapJsonSerializerTest.java",
    "score": 0.0,
    "error_count": 26,
    "messages": [
      {
        "line": 31,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 32,
        "column": 16,
        "type": "error",
        "message": "Field 'gson' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 35,
        "column": 25,
        "type": "error",
        "message": "Local variable 'emptyMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 36,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 38,
        "column": 16,
        "type": "error",
        "message": "Avoid excessively long variable names like emptyMapJsonObject",
        "source": "LongVariable"
      },
      {
        "line": 38,
        "column": 16,
        "type": "error",
        "message": "Local variable 'emptyMapJsonObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 43,
        "column": 10,
        "type": "error",
        "message": "Local variable 'mapType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 44,
        "column": 25,
        "type": "error",
        "message": "Local variable 'emptyMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 48,
        "column": 16,
        "type": "error",
        "message": "Avoid excessively long variable names like emptyMapJsonObject",
        "source": "LongVariable"
      },
      {
        "line": 48,
        "column": 16,
        "type": "error",
        "message": "Local variable 'emptyMapJsonObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 53,
        "column": 10,
        "type": "error",
        "message": "Local variable 'mapType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 25,
        "type": "error",
        "message": "Local variable 'myMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 12,
        "type": "error",
        "message": "Local variable 'key' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 16,
        "type": "error",
        "message": "Local variable 'mapJsonObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/ExposeAnnotationExclusionStrategyTest.java",
    "score": 0.0,
    "error_count": 42,
    "messages": [
      {
        "line": 31,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 32,
        "column": 20,
        "type": "error",
        "message": "Field 'excluder' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 40,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 40,
        "column": 11,
        "type": "error",
        "message": "Local variable 'f' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 46,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 46,
        "column": 11,
        "type": "error",
        "message": "Local variable 'f' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 52,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 52,
        "column": 11,
        "type": "error",
        "message": "Local variable 'f' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 58,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 58,
        "column": 11,
        "type": "error",
        "message": "Local variable 'f' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 64,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 64,
        "column": 11,
        "type": "error",
        "message": "Local variable 'f' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 53,
        "type": "error",
        "message": "Parameter 'fieldName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 69,
        "column": 64,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 74,
        "column": 18,
        "type": "error",
        "message": "The class 'MockObject' is suspected to be a Data Class (WOC=0.000%, NOPA=5, NOAM=0, WMC=0)",
        "source": "DataClass"
      },
      {
        "line": 74,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 76,
        "column": 22,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      },
      {
        "line": 79,
        "column": 22,
        "type": "error",
        "message": "Avoid excessively long variable names like explicitlyExposedField",
        "source": "LongVariable"
      },
      {
        "line": 79,
        "column": 22,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      },
      {
        "line": 82,
        "column": 22,
        "type": "error",
        "message": "Avoid excessively long variable names like explicitlyHiddenField",
        "source": "LongVariable"
      },
      {
        "line": 82,
        "column": 22,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      },
      {
        "line": 85,
        "column": 22,
        "type": "error",
        "message": "Avoid excessively long variable names like explicitlyDifferentModeField",
        "source": "LongVariable"
      },
      {
        "line": 85,
        "column": 22,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      },
      {
        "line": 87,
        "column": 22,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/FieldAttributesTest.java",
    "score": 1.0,
    "error_count": 18,
    "messages": [
      {
        "line": 31,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 42,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 45,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 45,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 10,
        "type": "error",
        "message": "Local variable 'expectedType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like Foo",
        "source": "ShortClassName"
      },
      {
        "line": 73,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java",
    "score": 0.0,
    "error_count": 30,
    "messages": [
      {
        "line": 3,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 4,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertNotEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 14,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 18,
        "column": 16,
        "type": "error",
        "message": "Local variable 'argumentPairs' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 30,
        "column": 19,
        "type": "error",
        "message": "Local variable 'pair' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 38,
        "column": 16,
        "type": "error",
        "message": "Local variable 'argumentPairs' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 19,
        "type": "error",
        "message": "Local variable 'pair' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 63,
        "column": 5,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 65,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 65,
        "column": 11,
        "type": "error",
        "message": "Missing commented default access modifier on field 'i'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 68,
        "column": 25,
        "type": "error",
        "message": "Local variable 'policies' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 11,
        "type": "error",
        "message": "Local variable 'field' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 12,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 12,
        "type": "error",
        "message": "Local variable 'oldLocale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 57,
        "type": "error",
        "message": "When doing a String.toLowerCase()/toUpperCase() call, use a Locale",
        "source": "UseLocaleWithCaseConversions"
      },
      {
        "line": 86,
        "column": 30,
        "type": "error",
        "message": "Local variable 'policy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 100,
        "column": 5,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 102,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like I",
        "source": "ShortVariable"
      },
      {
        "line": 102,
        "column": 11,
        "type": "error",
        "message": "Missing commented default access modifier on field 'I'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 102,
        "column": 11,
        "type": "error",
        "message": "The field name 'I' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 105,
        "column": 25,
        "type": "error",
        "message": "Local variable 'policies' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 11,
        "type": "error",
        "message": "Local variable 'field' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 112,
        "column": 12,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 12,
        "type": "error",
        "message": "Local variable 'oldLocale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 121,
        "column": 57,
        "type": "error",
        "message": "When doing a String.toLowerCase()/toUpperCase() call, use a Locale",
        "source": "UseLocaleWithCaseConversions"
      },
      {
        "line": 123,
        "column": 30,
        "type": "error",
        "message": "Local variable 'policy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/GenericArrayTypeTest.java",
    "score": 3.5,
    "error_count": 13,
    "messages": [
      {
        "line": 34,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 44,
        "column": 10,
        "type": "error",
        "message": "Local variable 'parameterizedType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 10,
        "type": "error",
        "message": "Local variable 'genericArrayType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 18,
        "type": "error",
        "message": "Call to `hashCode` on foreign value `genericArrayType` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 53,
        "column": 10,
        "type": "error",
        "message": "Avoid excessively long variable names like differentGenericArrayType",
        "source": "LongVariable"
      },
      {
        "line": 53,
        "column": 10,
        "type": "error",
        "message": "Local variable 'differentGenericArrayType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 17,
        "type": "error",
        "message": "Call to `equals` on foreign value `differentGenericArrayType` (degree 2)",
        "source": "LawOfDemeter"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/GsonBuilderTest.java",
    "score": 0.0,
    "error_count": 55,
    "messages": [
      {
        "line": 19,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 20,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertNotNull'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 21,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertNotSame'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 22,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.fail'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 37,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 38,
        "column": 79,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 42,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 49,
        "column": 17,
        "type": "error",
        "message": "Local variable 'builder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 51,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 60,
        "column": 10,
        "type": "error",
        "message": "Local variable 'otherGson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 72,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 53,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 81,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 105,
        "column": 46,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 107,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 18,
        "type": "error",
        "message": "Local variable 'customClass3' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 119,
        "column": 45,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 120,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 123,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 18,
        "type": "error",
        "message": "Local variable 'customClass3' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 130,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'CustomClass1'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 131,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'CustomClass2'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 132,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'CustomClass3'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 133,
        "column": 25,
        "type": "error",
        "message": "Avoid excessively long variable names like NO_ARG_CONSTRUCTOR_VALUE",
        "source": "LongVariable"
      },
      {
        "line": 133,
        "column": 25,
        "type": "error",
        "message": "Missing commented default access modifier on field 'NO_ARG_CONSTRUCTOR_VALUE'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 135,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 135,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 's'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 137,
        "column": 32,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 137,
        "column": 32,
        "type": "error",
        "message": "Parameter 's' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 148,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 155,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'HasModifiers'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 156,
        "column": 20,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 156,
        "column": 20,
        "type": "error",
        "message": "Field 'a' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 157,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 157,
        "column": 21,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 158,
        "column": 29,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 159,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like d",
        "source": "ShortVariable"
      },
      {
        "line": 159,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'd'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 164,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 170,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'HasTransients'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 171,
        "column": 22,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 171,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on field 'a'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 176,
        "column": 12,
        "type": "error",
        "message": "Local variable 'types' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 184,
        "column": 15,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 190,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 191,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 209,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 214,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 215,
        "column": 17,
        "type": "error",
        "message": "Local variable 'builder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/GsonTest.java",
    "score": 0.0,
    "error_count": 109,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 42,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 42,
        "column": 46,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 48,
        "column": 44,
        "type": "error",
        "message": "Avoid excessively long variable names like CUSTOM_FIELD_NAMING_STRATEGY",
        "source": "LongVariable"
      },
      {
        "line": 49,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 54,
        "column": 41,
        "type": "error",
        "message": "Avoid excessively long variable names like CUSTOM_OBJECT_TO_NUMBER_STRATEGY",
        "source": "LongVariable"
      },
      {
        "line": 55,
        "column": 41,
        "type": "error",
        "message": "Avoid excessively long variable names like CUSTOM_NUMBER_TO_NUMBER_STRATEGY",
        "source": "LongVariable"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 58,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 59,
        "column": 20,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new HashMap<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 61,
        "column": 42,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 62,
        "column": 22,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 62,
        "column": 59,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 73,
        "column": 10,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 20,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new HashMap<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 76,
        "column": 42,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 77,
        "column": 22,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 77,
        "column": 59,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 81,
        "column": 10,
        "type": "error",
        "message": "Local variable 'clone' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 85,
        "column": 18,
        "type": "error",
        "message": "Access to field `factories` on foreign value `original` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 85,
        "column": 49,
        "type": "error",
        "message": "Access to field `factories` on foreign value `clone` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 88,
        "column": 24,
        "type": "error",
        "message": "The class 'TestTypeAdapter' might be a test class, but it contains no test cases.",
        "source": "TestClassWithoutTestCases"
      },
      {
        "line": 92,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testGetAdapter_Null' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 96,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 100,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 105,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 105,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testGetAdapter_Concurrency' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 105,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 105,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 106,
        "column": 5,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 111,
        "column": 42,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 116,
        "column": 25,
        "type": "error",
        "message": "Avoid excessively long variable names like adapterInstancesCreated",
        "source": "LongVariable"
      },
      {
        "line": 120,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 131,
        "column": 22,
        "type": "error",
        "message": "Local variable 'thread' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 140,
        "column": 27,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 151,
        "column": 20,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 158,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 158,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testNewJsonWriter_Default' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 158,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 158,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 159,
        "column": 18,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 160,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 160,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 162,
        "column": 21,
        "type": "error",
        "message": "The String literal \"test\" appears 5 times in this file; the first occurrence is on line 162",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 180,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 180,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testNewJsonWriter_Custom' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 180,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 181,
        "column": 18,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 182,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 182,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 204,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 204,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testNewJsonReader_Default' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 204,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 205,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 206,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 206,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 207,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 215,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 215,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testNewJsonReader_Custom' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 215,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 216,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 217,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 217,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 229,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 229,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 229,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 230,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 231,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 235,
        "column": 53,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 239,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 262,
        "column": 46,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 264,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 268,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 272,
        "column": 18,
        "type": "error",
        "message": "Local variable 'customClass3' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 281,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 281,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 281,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 282,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 284,
        "column": 55,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 288,
        "column": 48,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 307,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 309,
        "column": 53,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 313,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 334,
        "column": 10,
        "type": "error",
        "message": "Local variable 'otherGson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 335,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 338,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 341,
        "column": 18,
        "type": "error",
        "message": "Local variable 'customClass3' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 345,
        "column": 45,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 346,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 349,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 352,
        "column": 18,
        "type": "error",
        "message": "Local variable 'customClass3' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 356,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'CustomClass1'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 357,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'CustomClass2'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 358,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'CustomClass3'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 359,
        "column": 25,
        "type": "error",
        "message": "Avoid excessively long variable names like NO_ARG_CONSTRUCTOR_VALUE",
        "source": "LongVariable"
      },
      {
        "line": 359,
        "column": 25,
        "type": "error",
        "message": "Missing commented default access modifier on field 'NO_ARG_CONSTRUCTOR_VALUE'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 361,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 361,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 's'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 363,
        "column": 32,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 363,
        "column": 32,
        "type": "error",
        "message": "Parameter 's' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java",
    "score": 0.0,
    "error_count": 50,
    "messages": [
      {
        "line": 31,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 44,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 51,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 59,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 68,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 68,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 68,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 69,
        "column": 9,
        "type": "error",
        "message": "Local variable 'intialValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 79,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 87,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 95,
        "column": 16,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 100,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 102,
        "column": 58,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 106,
        "column": 60,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 107,
        "column": 16,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 113,
        "column": 19,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Abstract'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 113,
        "column": 19,
        "type": "error",
        "message": "No abstract method which means that the keyword is most likely used to prevent instantiation. Use a private or protected constructor instead.",
        "source": "AbstractClassWithoutAnyMethod"
      },
      {
        "line": 113,
        "column": 19,
        "type": "error",
        "message": "This abstract class does not have any abstract methods",
        "source": "AbstractClassWithoutAbstractMethod"
      },
      {
        "line": 114,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 114,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'a'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 117,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Concrete'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 118,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 118,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 122,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 122,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 122,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 123,
        "column": 14,
        "type": "error",
        "message": "Local variable 'instance' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 22,
        "type": "error",
        "message": "The String literal \"{\\\"a\\\":\\\"android\\\"}\" appears 4 times in this file; the first occurrence is on line 126",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 130,
        "column": 22,
        "type": "error",
        "message": "The String literal \"{\\\"b\\\":\\\"beep\\\",\\\"a\\\":\\\"android\\\"}\" appears 4 times in this file; the first occurrence is on line 130",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 136,
        "column": 40,
        "type": "error",
        "message": "Parameter 'expected' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 136,
        "column": 59,
        "type": "error",
        "message": "Parameter 'instanceType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 136,
        "column": 81,
        "type": "error",
        "message": "Avoid excessively long variable names like registerAbstractDeserializer",
        "source": "LongVariable"
      },
      {
        "line": 136,
        "column": 81,
        "type": "error",
        "message": "Parameter 'registerAbstractDeserializer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 137,
        "column": 15,
        "type": "error",
        "message": "Avoid excessively long variable names like registerAbstractHierarchyDeserializer",
        "source": "LongVariable"
      },
      {
        "line": 137,
        "column": 15,
        "type": "error",
        "message": "Parameter 'registerAbstractHierarchyDeserializer' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 137,
        "column": 61,
        "type": "error",
        "message": "Parameter 'instance' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 138,
        "column": 32,
        "type": "error",
        "message": "Local variable 'deserializer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 138,
        "column": 67,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new JsonDeserializer<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 140,
        "column": 54,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 144,
        "column": 17,
        "type": "error",
        "message": "Local variable 'builder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 151,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/InnerClassExclusionStrategyTest.java",
    "score": 0.5,
    "error_count": 19,
    "messages": [
      {
        "line": 28,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 31,
        "column": 20,
        "type": "error",
        "message": "Field 'excluder' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 33,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 33,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 34,
        "column": 14,
        "type": "error",
        "message": "Local variable 'clazz' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 39,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 39,
        "column": 11,
        "type": "error",
        "message": "Local variable 'f' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 44,
        "column": 14,
        "type": "error",
        "message": "Local variable 'clazz' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 49,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 49,
        "column": 11,
        "type": "error",
        "message": "Local variable 'f' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 3,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 53,
        "column": 3,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'InnerClass'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 56,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'StaticNestedClass'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/JavaSerializationTest.java",
    "score": 0.0,
    "error_count": 24,
    "messages": [
      {
        "line": 37,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 41,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 43,
        "column": 26,
        "type": "error",
        "message": "Local variable 'serialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 49,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 50,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 18,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 18,
        "type": "error",
        "message": "Local variable 'serialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 57,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 18,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 59,
        "column": 18,
        "type": "error",
        "message": "Local variable 'serialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 66,
        "column": 34,
        "type": "error",
        "message": "Parameter 'object' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 67,
        "column": 27,
        "type": "error",
        "message": "Local variable 'bytesOut' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 24,
        "type": "error",
        "message": "Local variable 'out' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 26,
        "type": "error",
        "message": "Local variable 'bytesIn' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 23,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 72,
        "column": 23,
        "type": "error",
        "message": "Local variable 'in' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/JsonArrayTest.java",
    "score": 0.0,
    "error_count": 49,
    "messages": [
      {
        "line": 25,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 27,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 27,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 32,
        "column": 15,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 32,
        "column": 15,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 33,
        "column": 15,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 33,
        "column": 15,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 59,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 59,
        "column": 19,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 71,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 76,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 76,
        "column": 19,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 79,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 79,
        "column": 19,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 15,
        "type": "error",
        "message": "Local variable 'firstEntry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Local variable 'copy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 109,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 109,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 113,
        "column": 19,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "The method 'testFailedGetArrayValues()' has an NPath complexity of 256, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 122,
        "column": 15,
        "type": "error",
        "message": "Local variable 'jsonArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 128,
        "column": 20,
        "type": "error",
        "message": "The String literal \"Expected an exception message\" appears 8 times in this file; the first occurrence is on line 128",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 185,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 185,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testGetAs_WrongArraySize' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 185,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 185,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 186,
        "column": 15,
        "type": "error",
        "message": "Local variable 'jsonArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/JsonNullTest.java",
    "score": 6.0,
    "error_count": 8,
    "messages": [
      {
        "line": 25,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 28,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 28,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 36,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 36,
        "column": 14,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/JsonObjectTest.java",
    "score": 0.0,
    "error_count": 102,
    "messages": [
      {
        "line": 37,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 37,
        "column": 46,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 40,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 41,
        "column": 12,
        "type": "error",
        "message": "Local variable 'propertyName' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 41,
        "column": 27,
        "type": "error",
        "message": "The String literal \"property\" appears 5 times in this file; the first occurrence is on line 41",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 45,
        "column": 19,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 17,
        "type": "error",
        "message": "Local variable 'removedElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "Local variable 'propertyName' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 59,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 17,
        "type": "error",
        "message": "Local variable 'jsonElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 70,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 74,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 74,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 81,
        "column": 12,
        "type": "error",
        "message": "Local variable 'propertyName' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 87,
        "column": 17,
        "type": "error",
        "message": "Local variable 'jsonElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 92,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 92,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 92,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 93,
        "column": 12,
        "type": "error",
        "message": "Local variable 'propertyName' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 17,
        "type": "error",
        "message": "Local variable 'jsonElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 106,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 106,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 106,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 107,
        "column": 12,
        "type": "error",
        "message": "Local variable 'propertyName' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 108,
        "column": 10,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 17,
        "type": "error",
        "message": "Local variable 'jsonElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 120,
        "column": 10,
        "type": "error",
        "message": "Local variable 'character' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 127,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 127,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 128,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 130,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 137,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 137,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 138,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 144,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 144,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 145,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 149,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 154,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 154,
        "column": 16,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 155,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 155,
        "column": 16,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 159,
        "column": 11,
        "type": "error",
        "message": "The String literal \"foo\" appears 5 times in this file; the first occurrence is on line 159",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 166,
        "column": 11,
        "type": "error",
        "message": "The String literal \"bar\" appears 5 times in this file; the first occurrence is on line 166",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 176,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 176,
        "column": 16,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 177,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 177,
        "column": 16,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 191,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 191,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 191,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 192,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 192,
        "column": 16,
        "type": "error",
        "message": "Local variable 'o' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 205,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 205,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 205,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 206,
        "column": 16,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Local variable 'firstEntry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 210,
        "column": 16,
        "type": "error",
        "message": "Local variable 'copy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 220,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 220,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 220,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 221,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 221,
        "column": 16,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 236,
        "column": 19,
        "type": "error",
        "message": "Local variable 'expectedKeys' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 239,
        "column": 22,
        "type": "error",
        "message": "Local variable 'iterator' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 253,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 253,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 253,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 254,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 254,
        "column": 16,
        "type": "error",
        "message": "Local variable 'o' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 258,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expectedEntries' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 264,
        "column": 13,
        "type": "error",
        "message": "Avoid excessively long variable names like expectedEntriesList",
        "source": "LongVariable"
      },
      {
        "line": 273,
        "column": 34,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 285,
        "column": 32,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 292,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 292,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 300,
        "column": 14,
        "type": "error",
        "message": "Avoid excessively long variable names like expectedEntriesQueue",
        "source": "LongVariable"
      },
      {
        "line": 300,
        "column": 14,
        "type": "error",
        "message": "Local variable 'expectedEntriesQueue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/JsonParserParameterizedTest.java",
    "score": 7.0,
    "error_count": 6,
    "messages": [
      {
        "line": 3,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 14,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 29,
        "column": 42,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 31,
        "column": 17,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 35,
        "column": 17,
        "type": "error",
        "message": "Local variable 'deserialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 36,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actualSerialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/JsonParserTest.java",
    "score": 0.0,
    "error_count": 76,
    "messages": [
      {
        "line": 34,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 34,
        "column": 46,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 37,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 44,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 52,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 17,
        "type": "error",
        "message": "Avoid variables with short names like e",
        "source": "ShortVariable"
      },
      {
        "line": 53,
        "column": 17,
        "type": "error",
        "message": "Local variable 'e' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 60,
        "column": 17,
        "type": "error",
        "message": "Avoid variables with short names like e",
        "source": "ShortVariable"
      },
      {
        "line": 60,
        "column": 17,
        "type": "error",
        "message": "Local variable 'e' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 66,
        "column": 17,
        "type": "error",
        "message": "Avoid variables with short names like e",
        "source": "ShortVariable"
      },
      {
        "line": 66,
        "column": 17,
        "type": "error",
        "message": "Local variable 'e' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 75,
        "column": 12,
        "type": "error",
        "message": "Local variable 'unquotedSentence' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 83,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 17,
        "type": "error",
        "message": "Avoid variables with short names like e",
        "source": "ShortVariable"
      },
      {
        "line": 84,
        "column": 17,
        "type": "error",
        "message": "Local variable 'e' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 87,
        "column": 16,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 93,
        "column": 39,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 93,
        "column": 39,
        "type": "error",
        "message": "Parameter 's' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 93,
        "column": 46,
        "type": "error",
        "message": "Parameter 'times' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 94,
        "column": 19,
        "type": "error",
        "message": "Local variable 'stringBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 102,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 102,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 103,
        "column": 9,
        "type": "error",
        "message": "Local variable 'times' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 17,
        "type": "error",
        "message": "Number 10000 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 105,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 122,
        "column": 9,
        "type": "error",
        "message": "Local variable 'times' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 122,
        "column": 17,
        "type": "error",
        "message": "Number 10000 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 124,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 131,
        "column": 19,
        "type": "error",
        "message": "Local variable 'next' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 142,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this StringReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 142,
        "column": 18,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 143,
        "column": 17,
        "type": "error",
        "message": "Avoid variables with short names like e",
        "source": "ShortVariable"
      },
      {
        "line": 143,
        "column": 17,
        "type": "error",
        "message": "Local variable 'e' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 149,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 149,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 150,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 151,
        "column": 21,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 152,
        "column": 21,
        "type": "error",
        "message": "Local variable 'expectedOne' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 154,
        "column": 21,
        "type": "error",
        "message": "Local variable 'expectedTwo' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 156,
        "column": 21,
        "type": "error",
        "message": "Ensure that resources like this CharArrayReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 156,
        "column": 21,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 158,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 158,
        "column": 16,
        "type": "error",
        "message": "Local variable 'parser' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 160,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 161,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 162,
        "column": 21,
        "type": "error",
        "message": "Local variable 'actualOne' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 164,
        "column": 21,
        "type": "error",
        "message": "Local variable 'actualTwo' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/JsonPrimitiveTest.java",
    "score": 0.0,
    "error_count": 177,
    "messages": [
      {
        "line": 29,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 29,
        "column": 49,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 32,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 32,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 33,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 36,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 36,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 38,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 41,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 41,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 43,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 46,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 46,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 48,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 51,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 51,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 30,
        "type": "error",
        "message": "The String literal \"true\" appears 4 times in this file; the first occurrence is on line 68",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 79,
        "column": 19,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 85,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 85,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 85,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 86,
        "column": 19,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 89,
        "column": 42,
        "type": "error",
        "message": "Number 0.00001 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 90,
        "column": 41,
        "type": "error",
        "message": "Number 0.00001 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testAsNumber_Boolean' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 100,
        "column": 19,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 134,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 134,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 134,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 135,
        "column": 19,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 138,
        "column": 44,
        "type": "error",
        "message": "Number 0.00001 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 139,
        "column": 44,
        "type": "error",
        "message": "Number 0.00001 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 141,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 147,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 147,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 147,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 148,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 148,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 148,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 149,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 149,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 154,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 154,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 154,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 155,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 155,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 155,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 156,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 156,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 156,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 161,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 161,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 161,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 162,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 162,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 162,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 163,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 163,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 163,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 168,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 168,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 168,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 169,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 169,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 170,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 170,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 176,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 176,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 176,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 177,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 177,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 177,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 182,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 182,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 182,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 183,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 183,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 183,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 184,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 184,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 184,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit conversion from int to Number",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 189,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 189,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 189,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 190,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 190,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 190,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 191,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 191,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 196,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 196,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 196,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 197,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 197,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 197,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 198,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 198,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 198,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 203,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 203,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 203,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 204,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 204,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 204,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 205,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 205,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 210,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 210,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 210,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 211,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 211,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 211,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 212,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 212,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 217,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 217,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 217,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 218,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 218,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 218,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 219,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 219,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 219,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 224,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 224,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 224,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 225,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 225,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 225,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 226,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 226,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 231,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 231,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 231,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 232,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p1",
        "source": "ShortVariable"
      },
      {
        "line": 232,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 232,
        "column": 42,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 233,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like p2",
        "source": "ShortVariable"
      },
      {
        "line": 233,
        "column": 19,
        "type": "error",
        "message": "Local variable 'p2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 238,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 238,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 238,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 246,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 246,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 246,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 266,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 266,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 266,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 274,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 274,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 275,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 275,
        "column": 19,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 276,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 276,
        "column": 19,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 282,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 282,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 282,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 288,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 288,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 289,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 289,
        "column": 19,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/JsonStreamParserTest.java",
    "score": 2.5,
    "error_count": 15,
    "messages": [
      {
        "line": 27,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 37,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actualOne' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 39,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actualTwo' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/LongSerializationPolicyTest.java",
    "score": 0.0,
    "error_count": 29,
    "messages": [
      {
        "line": 27,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 29,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 29,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 29,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 30,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 33,
        "column": 19,
        "type": "error",
        "message": "Local variable 'jsonPrimitive' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 40,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 48,
        "column": 29,
        "type": "error",
        "message": "Local variable 'policy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 58,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 19,
        "type": "error",
        "message": "Local variable 'jsonPrimitive' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 76,
        "column": 29,
        "type": "error",
        "message": "Local variable 'policy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 79,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/MixedStreamTest.java",
    "score": 0.0,
    "error_count": 89,
    "messages": [
      {
        "line": 30,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 30,
        "column": 53,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 51,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 66,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this StringReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 67,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 68,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 77,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 77,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 78,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 79,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 79,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 91,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 91,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 92,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 93,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 109,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 110,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 111,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 122,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 123,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 123,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 125,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 132,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 132,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 133,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 134,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 136,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 143,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 143,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 144,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 145,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 156,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 156,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 156,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 157,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 158,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 161,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 161,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 164,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 169,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 169,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 170,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 171,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 174,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 174,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 176,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 179,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 179,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 183,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 183,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 183,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 184,
        "column": 18,
        "type": "error",
        "message": "Local variable 'contents' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 185,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 199,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 199,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 199,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 200,
        "column": 18,
        "type": "error",
        "message": "Local variable 'doubles' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 202,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 204,
        "column": 18,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 205,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 210,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 217,
        "column": 16,
        "type": "error",
        "message": "Avoid short class names like Car",
        "source": "ShortClassName"
      },
      {
        "line": 217,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Car'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 218,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 219,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'color'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 221,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Car(String, int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 221,
        "column": 16,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 221,
        "column": 26,
        "type": "error",
        "message": "Parameter 'color' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 227,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Car()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 233,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 233,
        "column": 44,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/MockExclusionStrategy.java",
    "score": 8.5,
    "error_count": 3,
    "messages": [
      {
        "line": 29,
        "column": 40,
        "type": "error",
        "message": "Parameter 'skipClass' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 29,
        "column": 59,
        "type": "error",
        "message": "Parameter 'skipField' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 35,
        "column": 50,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/ObjectTypeAdapterParameterizedTest.java",
    "score": 7.0,
    "error_count": 6,
    "messages": [
      {
        "line": 3,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 14,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 29,
        "column": 37,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 31,
        "column": 17,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 35,
        "column": 12,
        "type": "error",
        "message": "Local variable 'deserialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 36,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actualSerialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java",
    "score": 0.0,
    "error_count": 38,
    "messages": [
      {
        "line": 27,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 32,
        "column": 15,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 40,
        "column": 12,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 45,
        "column": 25,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 51,
        "column": 25,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 60,
        "column": 39,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 60,
        "column": 39,
        "type": "error",
        "message": "Parameter 's' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 60,
        "column": 46,
        "type": "error",
        "message": "Parameter 'times' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 61,
        "column": 19,
        "type": "error",
        "message": "Local variable 'stringBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 71,
        "column": 9,
        "type": "error",
        "message": "Local variable 'times' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 17,
        "type": "error",
        "message": "Number 10000 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 73,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 91,
        "column": 9,
        "type": "error",
        "message": "Local variable 'times' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 17,
        "type": "error",
        "message": "Number 10000 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 93,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 106,
        "column": 11,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 106,
        "column": 11,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 107,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 107,
        "column": 12,
        "type": "error",
        "message": "Field 'a' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 107,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'a'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 108,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 108,
        "column": 12,
        "type": "error",
        "message": "Field 'b' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 108,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/OverrideCoreTypeAdaptersTest.java",
    "score": 0.0,
    "error_count": 29,
    "messages": [
      {
        "line": 28,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 29,
        "column": 45,
        "type": "error",
        "message": "Avoid excessively long variable names like booleanAsIntAdapter",
        "source": "LongVariable"
      },
      {
        "line": 29,
        "column": 45,
        "type": "error",
        "message": "The constant name 'booleanAsIntAdapter' doesn't match '[A-Z][A-Z_0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 29,
        "column": 82,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 30,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 30,
        "column": 57,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 33,
        "column": 46,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 33,
        "column": 46,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 34,
        "column": 11,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 39,
        "column": 44,
        "type": "error",
        "message": "Avoid excessively long variable names like swapCaseStringAdapter",
        "source": "LongVariable"
      },
      {
        "line": 39,
        "column": 44,
        "type": "error",
        "message": "The constant name 'swapCaseStringAdapter' doesn't match '[A-Z][A-Z_0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 39,
        "column": 83,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 40,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 40,
        "column": 56,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 43,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 43,
        "column": 45,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 49,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 18,
        "type": "error",
        "message": "The String literal \"true\" appears 4 times in this file; the first occurrence is on line 52",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 60,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 71,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java",
    "score": 0.0,
    "error_count": 52,
    "messages": [
      {
        "line": 36,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 40,
        "column": 34,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 48,
        "column": 14,
        "type": "error",
        "message": "Local variable 'valueAsJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 20,
        "type": "error",
        "message": "The method 'getExpectedJson(Object)' has a cognitive complexity of 18, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 52,
        "column": 20,
        "type": "error",
        "message": "The method 'getExpectedJson(Object)' has a cyclomatic complexity of 13.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 52,
        "column": 43,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 53,
        "column": 16,
        "type": "error",
        "message": "Local variable 'clazz' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 57,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 61,
        "column": 18,
        "type": "error",
        "message": "Local variable 'method' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 18,
        "type": "error",
        "message": "Local variable 'results' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 21,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 66,
        "column": 11,
        "type": "error",
        "message": "'catch' branch identical to 'SecurityException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 67,
        "column": 21,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 68,
        "column": 11,
        "type": "error",
        "message": "'catch' branch identical to 'SecurityException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 69,
        "column": 21,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 70,
        "column": 11,
        "type": "error",
        "message": "'catch' branch identical to 'SecurityException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 71,
        "column": 21,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 72,
        "column": 11,
        "type": "error",
        "message": "'catch' branch identical to 'SecurityException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 73,
        "column": 21,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 85,
        "column": 34,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 87,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 90,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 93,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 95,
        "column": 30,
        "type": "error",
        "message": "Local variable 'other' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 98,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 101,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 118,
        "column": 49,
        "type": "error",
        "message": "Parameter 'instanceOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 129,
        "column": 68,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 130,
        "column": 16,
        "type": "error",
        "message": "Local variable 'clazz' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 130,
        "column": 35,
        "type": "error",
        "message": "Access to field `value` on foreign value `obj` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 130,
        "column": 35,
        "type": "error",
        "message": "Call to `getClass` on foreign value `obj.value` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 131,
        "column": 15,
        "type": "error",
        "message": "Local variable 'addQuotes' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 132,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 132,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 17,
        "type": "error",
        "message": "Access to field `value` on foreign value `obj` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 133,
        "column": 17,
        "type": "error",
        "message": "Call to `getClass` on foreign value `obj.value` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 137,
        "column": 17,
        "type": "error",
        "message": "Access to field `value` on foreign value `obj` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 145,
        "column": 67,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 146,
        "column": 34,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 147,
        "column": 18,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 148,
        "column": 9,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 16,
        "type": "error",
        "message": "Call to `getClass` on foreign value `value` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 154,
        "column": 69,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 154,
        "column": 80,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 155,
        "column": 52,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 156,
        "column": 12,
        "type": "error",
        "message": "Local variable 'genericClass' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 157,
        "column": 16,
        "type": "error",
        "message": "Local variable 'rawType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 158,
        "column": 14,
        "type": "error",
        "message": "Local variable 'className' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 159,
        "column": 19,
        "type": "error",
        "message": "Local variable 'jsonElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 163,
        "column": 21,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 171,
        "column": 30,
        "type": "error",
        "message": "Local variable 'typeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/ParameterizedTypeTest.java",
    "score": 4.0,
    "error_count": 12,
    "messages": [
      {
        "line": 34,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 44,
        "column": 10,
        "type": "error",
        "message": "Local variable 'parameterizedType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 18,
        "type": "error",
        "message": "Call to `hashCode` on foreign value `parameterizedType` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 53,
        "column": 10,
        "type": "error",
        "message": "Avoid excessively long variable names like differentParameterizedType",
        "source": "LongVariable"
      },
      {
        "line": 53,
        "column": 10,
        "type": "error",
        "message": "Local variable 'differentParameterizedType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 17,
        "type": "error",
        "message": "Call to `equals` on foreign value `differentParameterizedType` (degree 2)",
        "source": "LawOfDemeter"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/PrimitiveTypeAdapter.java",
    "score": 0.0,
    "error_count": 21,
    "messages": [
      {
        "line": 30,
        "column": 7,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 33,
        "column": 16,
        "type": "error",
        "message": "The method 'adaptType(Object, Class<T>)' has a cognitive complexity of 22, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 33,
        "column": 16,
        "type": "error",
        "message": "The method 'adaptType(Object, Class<T>)' has a cyclomatic complexity of 21.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 33,
        "column": 33,
        "type": "error",
        "message": "Parameter 'from' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 33,
        "column": 48,
        "type": "error",
        "message": "Avoid variables with short names like to",
        "source": "ShortVariable"
      },
      {
        "line": 33,
        "column": 48,
        "type": "error",
        "message": "Parameter 'to' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 34,
        "column": 14,
        "type": "error",
        "message": "Local variable 'aClass' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 37,
        "column": 16,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 38,
        "column": 31,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 39,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 45,
        "column": 24,
        "type": "error",
        "message": "Local variable 'constructor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 46,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 49,
        "column": 9,
        "type": "error",
        "message": "'catch' branch identical to 'NoSuchMethodException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 51,
        "column": 9,
        "type": "error",
        "message": "'catch' branch identical to 'NoSuchMethodException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 53,
        "column": 9,
        "type": "error",
        "message": "'catch' branch identical to 'NoSuchMethodException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 60,
        "column": 16,
        "type": "error",
        "message": "Local variable 'valuesMethod' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 19,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 64,
        "column": 9,
        "type": "error",
        "message": "'catch' branch identical to 'NoSuchMethodException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 65,
        "column": 19,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      },
      {
        "line": 66,
        "column": 9,
        "type": "error",
        "message": "'catch' branch identical to 'NoSuchMethodException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 67,
        "column": 19,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/ToNumberPolicyTest.java",
    "score": 0.0,
    "error_count": 34,
    "messages": [
      {
        "line": 27,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 28,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 28,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 28,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 29,
        "column": 22,
        "type": "error",
        "message": "Local variable 'strategy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 30,
        "column": 55,
        "type": "error",
        "message": "The String literal \"10.1\" appears 6 times in this file; the first occurrence is on line 30",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 31,
        "column": 18,
        "type": "error",
        "message": "Number 3.141592653589793D should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 31,
        "column": 69,
        "type": "error",
        "message": "The String literal \"3.141592653589793238462643383279\" appears 6 times in this file; the first occurrence is on line 31",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 33,
        "column": 38,
        "type": "error",
        "message": "The String literal \"1e400\" appears 6 times in this file; the first occurrence is on line 33",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 38,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 46,
        "column": 22,
        "type": "error",
        "message": "Local variable 'strategy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 53,
        "column": 22,
        "type": "error",
        "message": "Local variable 'strategy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 18,
        "type": "error",
        "message": "Number 3.141592653589793D should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 94,
        "column": 22,
        "type": "error",
        "message": "Local variable 'strategy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 108,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 109,
        "column": 51,
        "type": "error",
        "message": "The String literal \"null\" appears 4 times in this file; the first occurrence is on line 109",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 113,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 118,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 123,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 130,
        "column": 47,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 134,
        "column": 54,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 135,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/TypeAdapterTest.java",
    "score": 0.0,
    "error_count": 20,
    "messages": [
      {
        "line": 3,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 4,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertNull'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 5,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.fail'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 13,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 15,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 16,
        "column": 25,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 21,
        "column": 47,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 35,
        "column": 15,
        "type": "error",
        "message": "The JUnit 4 test method name 'testToJson_ThrowingIOException' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 35,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 37,
        "column": 26,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 37,
        "column": 51,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 42,
        "column": 48,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 62,
        "column": 44,
        "type": "error",
        "message": "The constant name 'adapter' doesn't match '[A-Z][A-Z_0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 62,
        "column": 69,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 63,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 63,
        "column": 56,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 67,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 67,
        "column": 45,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "The JUnit 4 test method name 'testFromJson_Reader_TrailingData' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "The JUnit 4 test method name 'testFromJson_String_TrailingData' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/VersionExclusionStrategyTest.java",
    "score": 2.0,
    "error_count": 16,
    "messages": [
      {
        "line": 19,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertFalse'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 20,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertTrue'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 32,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 37,
        "column": 14,
        "type": "error",
        "message": "Local variable 'excluder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 39,
        "column": 69,
        "type": "error",
        "message": "The String literal \"someField\" appears 9 times in this file; the first occurrence is on line 39",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 51,
        "column": 14,
        "type": "error",
        "message": "Local variable 'excluder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 64,
        "column": 14,
        "type": "error",
        "message": "Local variable 'excluder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 79,
        "column": 22,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      },
      {
        "line": 83,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 86,
        "column": 22,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      },
      {
        "line": 91,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 95,
        "column": 22,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/common/MoreAsserts.java",
    "score": 0.0,
    "error_count": 23,
    "messages": [
      {
        "line": 33,
        "column": 8,
        "type": "error",
        "message": "This utility class has a non-private constructor",
        "source": "UseUtilityClass"
      },
      {
        "line": 40,
        "column": 55,
        "type": "error",
        "message": "Parameter 'collection' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 40,
        "column": 69,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 41,
        "column": 12,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 53,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 49,
        "column": 53,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 49,
        "column": 63,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 49,
        "column": 63,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 53,
        "column": 24,
        "type": "error",
        "message": "Avoid using equals() to compare against null",
        "source": "EqualsNull"
      },
      {
        "line": 57,
        "column": 53,
        "type": "error",
        "message": "Parameter 'method' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 58,
        "column": 9,
        "type": "error",
        "message": "Local variable 'modifiers' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 51,
        "type": "error",
        "message": "Parameter 'method' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 63,
        "column": 19,
        "type": "error",
        "message": "Local variable 'builder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 19,
        "type": "error",
        "message": "Local variable 'paramType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 54,
        "type": "error",
        "message": "Parameter 'baseClass' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 80,
        "column": 74,
        "type": "error",
        "message": "Parameter 'subClass' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 80,
        "column": 97,
        "type": "error",
        "message": "Parameter 'ignoredMethods' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 81,
        "column": 17,
        "type": "error",
        "message": "Avoid excessively long variable names like requiredOverriddenMethods",
        "source": "LongVariable"
      },
      {
        "line": 81,
        "column": 17,
        "type": "error",
        "message": "Local variable 'requiredOverriddenMethods' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 17,
        "type": "error",
        "message": "Local variable 'method' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 17,
        "type": "error",
        "message": "Local variable 'method' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 17,
        "type": "error",
        "message": "Local variable 'ignoredMethod' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Local variable 'foundIgnored' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/common/TestTypes.java",
    "score": 0.0,
    "error_count": 85,
    "messages": [
      {
        "line": 37,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 37,
        "column": 8,
        "type": "error",
        "message": "The class 'TestTypes' might be a test class, but it contains no test cases.",
        "source": "TestClassWithoutTestCases"
      },
      {
        "line": 39,
        "column": 17,
        "type": "error",
        "message": "Avoid short class names like Base",
        "source": "ShortClassName"
      },
      {
        "line": 39,
        "column": 17,
        "type": "error",
        "message": "The class 'Base' is suspected to be a Data Class (WOC=0.000%, NOPA=5, NOAM=0, WMC=0)",
        "source": "DataClass"
      },
      {
        "line": 47,
        "column": 17,
        "type": "error",
        "message": "Avoid short class names like Sub",
        "source": "ShortClassName"
      },
      {
        "line": 50,
        "column": 25,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      },
      {
        "line": 56,
        "column": 36,
        "type": "error",
        "message": "Parameter 'base' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 64,
        "column": 36,
        "type": "error",
        "message": "Consider using varargs for methods or constructors which take an array the last parameter.",
        "source": "UseVarargs"
      },
      {
        "line": 64,
        "column": 43,
        "type": "error",
        "message": "Parameter 'base' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 65,
        "column": 7,
        "type": "error",
        "message": "The user-supplied array 'base' is stored directly.",
        "source": "ArrayIsStoredDirectly"
      },
      {
        "line": 72,
        "column": 58,
        "type": "error",
        "message": "Parameter 'base' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 81,
        "column": 18,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 18,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 97,
        "column": 25,
        "type": "error",
        "message": "Avoid excessively long variable names like someConstantStringInstanceField",
        "source": "LongVariable"
      },
      {
        "line": 99,
        "column": 33,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 115,
        "column": 33,
        "type": "error",
        "message": "Parameter 'longValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 115,
        "column": 48,
        "type": "error",
        "message": "Parameter 'intValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 115,
        "column": 66,
        "type": "error",
        "message": "Parameter 'booleanValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 115,
        "column": 87,
        "type": "error",
        "message": "Parameter 'stringValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 127,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 127,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 20,
        "type": "error",
        "message": "The method 'equals(Object)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 149,
        "column": 20,
        "type": "error",
        "message": "The method 'equals(Object)' has an NPath complexity of 256, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 149,
        "column": 34,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 151,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 151,
        "column": 9,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 153,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 153,
        "column": 9,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 155,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 155,
        "column": 9,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 156,
        "column": 23,
        "type": "error",
        "message": "Local variable 'other' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 158,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 158,
        "column": 9,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 160,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 160,
        "column": 9,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 162,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 162,
        "column": 9,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 165,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 165,
        "column": 11,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 167,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 167,
        "column": 9,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 183,
        "column": 40,
        "type": "error",
        "message": "Parameter 'longValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 183,
        "column": 59,
        "type": "error",
        "message": "Parameter 'intValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 183,
        "column": 77,
        "type": "error",
        "message": "Parameter 'booleanValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 190,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 190,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 207,
        "column": 27,
        "type": "error",
        "message": "Consider using varargs for methods or constructors which take an array the last parameter.",
        "source": "UseVarargs"
      },
      {
        "line": 207,
        "column": 34,
        "type": "error",
        "message": "Parameter 'longArray' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 208,
        "column": 7,
        "type": "error",
        "message": "The user-supplied array 'longArray' is stored directly.",
        "source": "ArrayIsStoredDirectly"
      },
      {
        "line": 212,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 212,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 216,
        "column": 17,
        "type": "error",
        "message": "Local variable 'l' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 217,
        "column": 9,
        "type": "error",
        "message": "Avoid if (x != y) ..; else ..;",
        "source": "ConfusingTernary"
      },
      {
        "line": 234,
        "column": 20,
        "type": "error",
        "message": "Ensure you override both equals() and hashCode()",
        "source": "OverrideBothEqualsAndHashcode"
      },
      {
        "line": 234,
        "column": 34,
        "type": "error",
        "message": "Parameter 'other' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 247,
        "column": 35,
        "type": "error",
        "message": "Parameter 'primitive1' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 247,
        "column": 63,
        "type": "error",
        "message": "Parameter 'primitive2' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 253,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 253,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 260,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 260,
        "column": 44,
        "type": "error",
        "message": "Parameter 'sb' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 275,
        "column": 33,
        "type": "error",
        "message": "Avoid excessively long variable names like transientLongValue",
        "source": "LongVariable"
      },
      {
        "line": 282,
        "column": 42,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 288,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 288,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 304,
        "column": 45,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 308,
        "column": 57,
        "type": "error",
        "message": "Parameter 'bag' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 308,
        "column": 66,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 335,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 335,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 337,
        "column": 28,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 355,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 376,
        "column": 27,
        "type": "error",
        "message": "Consider using varargs for methods or constructors which take an array the last parameter.",
        "source": "UseVarargs"
      },
      {
        "line": 376,
        "column": 36,
        "type": "error",
        "message": "Parameter 'array' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 377,
        "column": 7,
        "type": "error",
        "message": "The user-supplied array 'array' is stored directly.",
        "source": "ArrayIsStoredDirectly"
      },
      {
        "line": 386,
        "column": 45,
        "type": "error",
        "message": "Parameter 'bag' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 392,
        "column": 48,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 393,
        "column": 53,
        "type": "error",
        "message": "Avoid variables with short names like g",
        "source": "ShortVariable"
      },
      {
        "line": 398,
        "column": 46,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 398,
        "column": 46,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 398,
        "column": 53,
        "type": "error",
        "message": "Avoid variables with short names like g",
        "source": "ShortVariable"
      },
      {
        "line": 398,
        "column": 53,
        "type": "error",
        "message": "Parameter 'g' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 412,
        "column": 39,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 416,
        "column": 41,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 417,
        "column": 16,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/ArrayTest.java",
    "score": 0.0,
    "error_count": 135,
    "messages": [
      {
        "line": 19,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertArrayEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 38,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 38,
        "column": 41,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 48,
        "column": 11,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 53,
        "column": 11,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 11,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 58,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 59,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 60,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 11,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Local variable 'actualObject2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 83,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 84,
        "column": 14,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 85,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 91,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 92,
        "column": 14,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 93,
        "column": 14,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 100,
        "column": 23,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 16,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 102,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 18,
        "type": "error",
        "message": "The String literal \"[null]\" appears 4 times in this file; the first occurrence is on line 103",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 106,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 106,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 107,
        "column": 23,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 111,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 113,
        "column": 14,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 120,
        "column": 14,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 124,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 124,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 124,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 125,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 14,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 131,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 131,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 132,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 132,
        "column": 14,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 12,
        "type": "error",
        "message": "Local variable 'output' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 137,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 137,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 137,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 138,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 139,
        "column": 14,
        "type": "error",
        "message": "Local variable 'arrayType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 144,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 144,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 145,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 145,
        "column": 19,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 146,
        "column": 9,
        "type": "error",
        "message": "Local variable 'arraySize' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 148,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeToSerialize' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 150,
        "column": 27,
        "type": "error",
        "message": "Local variable 'arrayOfCollection' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 152,
        "column": 11,
        "type": "error",
        "message": "Local variable 'startValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 154,
        "column": 7,
        "type": "error",
        "message": "Avoid using implementation types like 'ArrayList'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 154,
        "column": 26,
        "type": "error",
        "message": "Local variable 'tmpList' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 165,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 169,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 169,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 170,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 171,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 172,
        "column": 27,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 180,
        "column": 14,
        "type": "error",
        "message": "Array initialization can be written shorter",
        "source": "UseShortArrayInitializer"
      },
      {
        "line": 180,
        "column": 14,
        "type": "error",
        "message": "Local variable 'objs' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 181,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 187,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 187,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 187,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 188,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 189,
        "column": 14,
        "type": "error",
        "message": "Local variable 'objs' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 197,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 197,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 197,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 198,
        "column": 22,
        "type": "error",
        "message": "Local variable 'classWithObjects' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 199,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bagOfPrimitives' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 200,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like classWithObjectsJson",
        "source": "LongVariable"
      },
      {
        "line": 200,
        "column": 12,
        "type": "error",
        "message": "Local variable 'classWithObjectsJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 201,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like bagOfPrimitivesJson",
        "source": "LongVariable"
      },
      {
        "line": 201,
        "column": 12,
        "type": "error",
        "message": "Local variable 'bagOfPrimitivesJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 203,
        "column": 14,
        "type": "error",
        "message": "Local variable 'objects' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 204,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 210,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 210,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 211,
        "column": 14,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 212,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 216,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 216,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 217,
        "column": 14,
        "type": "error",
        "message": "Local variable 'values' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 224,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 224,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 224,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 225,
        "column": 16,
        "type": "error",
        "message": "Local variable 'items' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 229,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 234,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 234,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 235,
        "column": 16,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 239,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 239,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 240,
        "column": 13,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 247,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 247,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 248,
        "column": 14,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 255,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 255,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 255,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 256,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 258,
        "column": 16,
        "type": "error",
        "message": "Local variable 'items' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 263,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 263,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 264,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 265,
        "column": 13,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 270,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 270,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 271,
        "column": 14,
        "type": "error",
        "message": "Local variable 'stringArrays' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/CircularReferenceTest.java",
    "score": 0.0,
    "error_count": 53,
    "messages": [
      {
        "line": 38,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 48,
        "column": 33,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 48,
        "column": 33,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 33,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 49,
        "column": 33,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 5,
        "type": "error",
        "message": "Access to field `children` on foreign value `a` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 51,
        "column": 5,
        "type": "error",
        "message": "Access to field `children` on foreign value `b` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 52,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 60,
        "column": 27,
        "type": "error",
        "message": "Local variable 'objA' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 5,
        "type": "error",
        "message": "Access to field `ref` on foreign value `objA` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 63,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 33,
        "type": "error",
        "message": "Local variable 'objA' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 5,
        "type": "error",
        "message": "Access to field `children` on foreign value `objA` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 71,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 79,
        "column": 28,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 5,
        "type": "error",
        "message": "Access to field `child` on foreign value `obj` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 81,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 69,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 83,
        "column": 36,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 84,
        "column": 20,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 97,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 97,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 98,
        "column": 33,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 98,
        "column": 33,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 33,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 99,
        "column": 33,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 33,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 100,
        "column": 33,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 5,
        "type": "error",
        "message": "Access to field `children` on foreign value `a` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 102,
        "column": 5,
        "type": "error",
        "message": "Access to field `children` on foreign value `a` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 103,
        "column": 5,
        "type": "error",
        "message": "Access to field `children` on foreign value `b` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 108,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 33,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 21,
        "type": "error",
        "message": "Access to field `children` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 114,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 115,
        "column": 45,
        "type": "error",
        "message": "Field 'children' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 115,
        "column": 45,
        "type": "error",
        "message": "Missing commented default access modifier on field 'children'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 118,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 119,
        "column": 28,
        "type": "error",
        "message": "Missing commented default access modifier on field 'child'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 122,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 124,
        "column": 35,
        "type": "error",
        "message": "Missing commented default access modifier on field 'children'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/CollectionTest.java",
    "score": 0.0,
    "error_count": 224,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 19,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertArrayEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 51,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 51,
        "column": 46,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 60,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 60,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 61,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 10,
        "type": "error",
        "message": "Local variable 'targetType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 18,
        "type": "error",
        "message": "The String literal \"[1,2,3,4,5,6,7,8,9]\" appears 5 times in this file; the first occurrence is on line 64",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 10,
        "type": "error",
        "message": "Local variable 'collectionType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 11,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 76,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 10,
        "type": "error",
        "message": "Local variable 'collectionType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 31,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 79,
        "column": 13,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 11,
        "type": "error",
        "message": "Local variable 'start' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 92,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 92,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 92,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 93,
        "column": 18,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 10,
        "type": "error",
        "message": "Local variable 'linkedListType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 41,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedList'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 97,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 102,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 102,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 103,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 104,
        "column": 10,
        "type": "error",
        "message": "Local variable 'linkedListType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 104,
        "column": 41,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedList'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 105,
        "column": 18,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 111,
        "column": 19,
        "type": "error",
        "message": "Local variable 'queue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 10,
        "type": "error",
        "message": "Local variable 'queueType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 120,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 120,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 120,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 121,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 122,
        "column": 10,
        "type": "error",
        "message": "Local variable 'queueType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 123,
        "column": 19,
        "type": "error",
        "message": "Local variable 'queue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 130,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 130,
        "column": 31,
        "type": "error",
        "message": "Avoid using implementation types like 'PriorityQueue'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 131,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'PriorityQueue'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 131,
        "column": 28,
        "type": "error",
        "message": "Local variable 'queue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 134,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 135,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 136,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 140,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 140,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 140,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 141,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 141,
        "column": 31,
        "type": "error",
        "message": "Avoid using implementation types like 'Vector'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 141,
        "column": 31,
        "type": "error",
        "message": "Consider replacing this Vector with the newer java.util.List",
        "source": "ReplaceVectorWithList"
      },
      {
        "line": 142,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'Vector'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 142,
        "column": 5,
        "type": "error",
        "message": "Consider replacing this Vector with the newer java.util.List",
        "source": "ReplaceVectorWithList"
      },
      {
        "line": 142,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 144,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 145,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 146,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 147,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 151,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 151,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 151,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 152,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 152,
        "column": 31,
        "type": "error",
        "message": "Avoid using implementation types like 'Stack'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 152,
        "column": 31,
        "type": "error",
        "message": "Consider replacing this Vector with the newer java.util.List",
        "source": "ReplaceVectorWithList"
      },
      {
        "line": 153,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'Stack'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 153,
        "column": 5,
        "type": "error",
        "message": "Consider replacing this Vector with the newer java.util.List",
        "source": "ReplaceVectorWithList"
      },
      {
        "line": 153,
        "column": 20,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 155,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 156,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 157,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 158,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 162,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 162,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 163,
        "column": 18,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 167,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 168,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfList' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 173,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 173,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 174,
        "column": 18,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 178,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 179,
        "column": 10,
        "type": "error",
        "message": "Local variable 'expectedType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 180,
        "column": 18,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 186,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 186,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 186,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 187,
        "column": 18,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 188,
        "column": 16,
        "type": "error",
        "message": "The String literal \"Hello\" appears 5 times in this file; the first occurrence is on line 188",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 189,
        "column": 16,
        "type": "error",
        "message": "The String literal \"World\" appears 5 times in this file; the first occurrence is on line 189",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 190,
        "column": 18,
        "type": "error",
        "message": "The String literal \"[\\\"Hello\\\",\\\"World\\\"]\" appears 4 times in this file; the first occurrence is on line 190",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 192,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 196,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 196,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 196,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 197,
        "column": 18,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 203,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 208,
        "column": 18,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 214,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 214,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 214,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 215,
        "column": 27,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 216,
        "column": 21,
        "type": "error",
        "message": "Local variable 'objA' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 217,
        "column": 21,
        "type": "error",
        "message": "Local variable 'objB' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 221,
        "column": 12,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 224,
        "column": 26,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 229,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 229,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 229,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 230,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 231,
        "column": 10,
        "type": "error",
        "message": "Local variable 'collectionType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 232,
        "column": 24,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 238,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 238,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 239,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 243,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 243,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 244,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bag1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 245,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 246,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 250,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 250,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 250,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 252,
        "column": 19,
        "type": "error",
        "message": "Local variable 'integers' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 257,
        "column": 19,
        "type": "error",
        "message": "Local variable 'strings' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 262,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 262,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 262,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 263,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bag' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 264,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 265,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 267,
        "column": 17,
        "type": "error",
        "message": "Local variable 'bag1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 270,
        "column": 27,
        "type": "error",
        "message": "Local variable 'values' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 277,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 277,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 277,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 278,
        "column": 35,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 279,
        "column": 10,
        "type": "error",
        "message": "Local variable 'collectionType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 287,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 287,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 287,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 288,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 289,
        "column": 10,
        "type": "error",
        "message": "Local variable 'collectionType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 290,
        "column": 35,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 296,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 296,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 296,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 297,
        "column": 33,
        "type": "error",
        "message": "Local variable 'collection' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 298,
        "column": 21,
        "type": "error",
        "message": "Local variable 'objA' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 299,
        "column": 21,
        "type": "error",
        "message": "Local variable 'objB' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 304,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 309,
        "column": 43,
        "type": "error",
        "message": "Avoid excessively long variable names like deserializedCollection",
        "source": "LongVariable"
      },
      {
        "line": 309,
        "column": 43,
        "type": "error",
        "message": "Local variable 'deserializedCollection' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 315,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 315,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 315,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 316,
        "column": 23,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 317,
        "column": 5,
        "type": "error",
        "message": "Access to field `longs` on foreign value `object` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 318,
        "column": 5,
        "type": "error",
        "message": "Access to field `longs` on foreign value `object` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 319,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 321,
        "column": 23,
        "type": "error",
        "message": "Local variable 'copy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 325,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 325,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 326,
        "column": 10,
        "type": "error",
        "message": "Local variable 'listOfString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 327,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like stringListSerializer",
        "source": "LongVariable"
      },
      {
        "line": 327,
        "column": 12,
        "type": "error",
        "message": "Local variable 'stringListSerializer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 328,
        "column": 59,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 333,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 339,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'HasArrayListField'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 340,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'ArrayList'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 340,
        "column": 21,
        "type": "error",
        "message": "Missing commented default access modifier on field 'longs'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 343,
        "column": 49,
        "type": "error",
        "message": "Parameter 'collection' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 344,
        "column": 11,
        "type": "error",
        "message": "Local variable 'ints' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 345,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 346,
        "column": 5,
        "type": "error",
        "message": "This for loop can be replaced by a foreach loop",
        "source": "ForLoopCanBeForeach"
      },
      {
        "line": 346,
        "column": 22,
        "type": "error",
        "message": "Local variable 'iterator' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 347,
        "column": 14,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 349,
        "column": 19,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 360,
        "column": 79,
        "type": "error",
        "message": "Parameter 'collection' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 370,
        "column": 9,
        "type": "error",
        "message": "Field 'value' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 370,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 371,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Entry(int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 371,
        "column": 15,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 375,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 375,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 375,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 376,
        "column": 16,
        "type": "error",
        "message": "Local variable 'set' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 379,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 383,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 383,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 383,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 384,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 385,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 386,
        "column": 16,
        "type": "error",
        "message": "Local variable 'set' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 388,
        "column": 16,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 393,
        "column": 11,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 393,
        "column": 11,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 395,
        "column": 11,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 395,
        "column": 11,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 397,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 397,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 397,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 398,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 405,
        "column": 14,
        "type": "error",
        "message": "Local variable 'bigClass' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 406,
        "column": 16,
        "type": "error",
        "message": "Local variable 'small' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 406,
        "column": 24,
        "type": "error",
        "message": "Access to field `inBig` on foreign value `bigClass` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 406,
        "column": 24,
        "type": "error",
        "message": "Call to `get` on foreign value `bigClass.inBig` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 408,
        "column": 27,
        "type": "error",
        "message": "Access to field `inSmall` on foreign value `small` (degree 2)",
        "source": "LawOfDemeter"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/ConcurrencyTest.java",
    "score": 0.0,
    "error_count": 30,
    "messages": [
      {
        "line": 33,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 47,
        "column": 14,
        "type": "error",
        "message": "Local variable 'myObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 71,
        "column": 21,
        "type": "error",
        "message": "Local variable 'executor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 20,
        "type": "error",
        "message": "Local variable 'myObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 30,
        "type": "error",
        "message": "A catch statement should never catch throwable since it includes errors.",
        "source": "AvoidCatchingThrowable"
      },
      {
        "line": 98,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 98,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 102,
        "column": 21,
        "type": "error",
        "message": "Local variable 'executor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 30,
        "type": "error",
        "message": "A catch statement should never catch throwable since it includes errors.",
        "source": "AvoidCatchingThrowable"
      },
      {
        "line": 126,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 126,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'a'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 127,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 127,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 128,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 128,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'i'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 130,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'MyObject()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 134,
        "column": 28,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 134,
        "column": 28,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 134,
        "column": 38,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 134,
        "column": 38,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 134,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 134,
        "column": 45,
        "type": "error",
        "message": "Parameter 'i' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/CustomDeserializerTest.java",
    "score": 0.0,
    "error_count": 64,
    "messages": [
      {
        "line": 39,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 52,
        "column": 16,
        "type": "error",
        "message": "Local variable 'data' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 16,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 60,
        "column": 23,
        "type": "error",
        "message": "Local variable 'dataWrapper' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 23,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 42,
        "type": "error",
        "message": "Call to `getWrappedData` on foreign value `actual` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 76,
        "column": 30,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 94,
        "column": 41,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 103,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 105,
        "column": 47,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 106,
        "column": 16,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 107,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jsonObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 108,
        "column": 14,
        "type": "error",
        "message": "Local variable 'dataString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 113,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 114,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 55,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 117,
        "column": 38,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 117,
        "column": 54,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 118,
        "column": 16,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 122,
        "column": 14,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 127,
        "column": 25,
        "type": "error",
        "message": "Missing commented default access modifier on field 'TYPE_ACCESS'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 134,
        "column": 13,
        "type": "error",
        "message": "Unnecessary modifier 'private' on constructor 'SubTypes(Type)': enum constructors are implicitly private",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 134,
        "column": 27,
        "type": "error",
        "message": "Parameter 'subClass' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 142,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 143,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'field1'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 146,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 148,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'field2'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 151,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 151,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 152,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 156,
        "column": 20,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 160,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 161,
        "column": 10,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 166,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 170,
        "column": 20,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 174,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 175,
        "column": 24,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 180,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 184,
        "column": 20,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 188,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 189,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 194,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 194,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 194,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 195,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 199,
        "column": 20,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 203,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 204,
        "column": 24,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 205,
        "column": 16,
        "type": "error",
        "message": "Access to field `bases` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 206,
        "column": 16,
        "type": "error",
        "message": "Access to field `bases` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 210,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'bases'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/CustomSerializerTest.java",
    "score": 0.0,
    "error_count": 32,
    "messages": [
      {
        "line": 43,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 45,
        "column": 16,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 45,
        "column": 16,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 46,
        "column": 11,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 17,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 17,
        "type": "error",
        "message": "Local variable 'base' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 33,
        "type": "error",
        "message": "The String literal \"base\" appears 4 times in this file; the first occurrence is on line 52",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 56,
        "column": 16,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 56,
        "column": 16,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 57,
        "column": 11,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 17,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 17,
        "type": "error",
        "message": "Local variable 'base' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 16,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 67,
        "column": 16,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 11,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 30,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 17,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 16,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 23,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 20,
        "type": "error",
        "message": "Local variable 'serializerKey' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 16,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 81,
        "column": 16,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 82,
        "column": 11,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 85,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 17,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 87,
        "column": 17,
        "type": "error",
        "message": "Local variable 'base' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 16,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 91,
        "column": 16,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 92,
        "column": 11,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 20,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/CustomTypeAdaptersTest.java",
    "score": 0.0,
    "error_count": 192,
    "messages": [
      {
        "line": 46,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 46,
        "column": 54,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 56,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 60,
        "column": 20,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 26,
        "type": "error",
        "message": "The String literal \"value\" appears 6 times in this file; the first occurrence is on line 62",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 66,
        "column": 34,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 71,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 81,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 75,
        "column": 20,
        "type": "error",
        "message": "Local variable 'jsonObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 13,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 34,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 86,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disable_testCustomSerializersOfSelf' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 87,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 88,
        "column": 10,
        "type": "error",
        "message": "Local variable 'basicGson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 89,
        "column": 9,
        "type": "error",
        "message": "Local variable 'newFooObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like jsonFromCustomSerializer",
        "source": "LongVariable"
      },
      {
        "line": 90,
        "column": 12,
        "type": "error",
        "message": "Local variable 'jsonFromCustomSerializer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 12,
        "type": "error",
        "message": "Local variable 'jsonFromGson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 96,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disable_testCustomDeserializersOfSelf' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 97,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 98,
        "column": 10,
        "type": "error",
        "message": "Local variable 'basicGson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 9,
        "type": "error",
        "message": "Local variable 'expectedFoo' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 9,
        "type": "error",
        "message": "Local variable 'newFooObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 108,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 34,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 120,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 122,
        "column": 68,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 123,
        "column": 54,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 124,
        "column": 13,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 128,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 129,
        "column": 34,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 133,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 133,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 134,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 136,
        "column": 41,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 137,
        "column": 20,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 142,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 150,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 150,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 150,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 151,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 153,
        "column": 41,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 154,
        "column": 20,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 159,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 168,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like Base",
        "source": "ShortClassName"
      },
      {
        "line": 169,
        "column": 9,
        "type": "error",
        "message": "Field 'baseValue' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 169,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'baseValue'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 172,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 174,
        "column": 9,
        "type": "error",
        "message": "Field 'derivedValue' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 174,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'derivedValue'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 182,
        "column": 17,
        "type": "error",
        "message": "Avoid short class names like Foo",
        "source": "ShortClassName"
      },
      {
        "line": 190,
        "column": 20,
        "type": "error",
        "message": "Parameter 'key' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 190,
        "column": 30,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 198,
        "column": 40,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 198,
        "column": 51,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 198,
        "column": 87,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 199,
        "column": 16,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 204,
        "column": 38,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 204,
        "column": 48,
        "type": "error",
        "message": "Parameter 'typeOfSrc' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 204,
        "column": 84,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 209,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 209,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 209,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 210,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 212,
        "column": 58,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 212,
        "column": 58,
        "type": "error",
        "message": "Parameter 's' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 212,
        "column": 66,
        "type": "error",
        "message": "Avoid variables with short names like t",
        "source": "ShortVariable"
      },
      {
        "line": 212,
        "column": 94,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 221,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 221,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 221,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 222,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 225,
        "column": 50,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 225,
        "column": 61,
        "type": "error",
        "message": "Avoid variables with short names like t",
        "source": "ShortVariable"
      },
      {
        "line": 234,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 234,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 235,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 237,
        "column": 43,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 238,
        "column": 23,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 238,
        "column": 23,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 239,
        "column": 19,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 245,
        "column": 12,
        "type": "error",
        "message": "Local variable 'data' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 246,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 250,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 250,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 251,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 253,
        "column": 59,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 254,
        "column": 72,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 255,
        "column": 16,
        "type": "error",
        "message": "Local variable 'str' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 256,
        "column": 16,
        "type": "error",
        "message": "Local variable 'data' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 263,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 264,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 265,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 266,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 273,
        "column": 12,
        "type": "error",
        "message": "Field 'part1' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 273,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'part1'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 274,
        "column": 12,
        "type": "error",
        "message": "Field 'part2' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 274,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'part2'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 276,
        "column": 32,
        "type": "error",
        "message": "Parameter 'string' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 277,
        "column": 16,
        "type": "error",
        "message": "Local variable 'parts' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 281,
        "column": 32,
        "type": "error",
        "message": "Parameter 'part1' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 281,
        "column": 46,
        "type": "error",
        "message": "Parameter 'part2' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 287,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 295,
        "column": 59,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 300,
        "column": 57,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 302,
        "column": 14,
        "type": "error",
        "message": "Local variable 'contents' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 308,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 308,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 309,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 312,
        "column": 10,
        "type": "error",
        "message": "Local variable 'setType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 313,
        "column": 18,
        "type": "error",
        "message": "Local variable 'holder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 313,
        "column": 44,
        "type": "error",
        "message": "The String literal \"Jacob\" appears 6 times in this file; the first occurrence is on line 313",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 313,
        "column": 53,
        "type": "error",
        "message": "The String literal \"Tomaw\" appears 6 times in this file; the first occurrence is on line 313",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 314,
        "column": 23,
        "type": "error",
        "message": "Local variable 'setOfHolders' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 316,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 321,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 321,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 322,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 325,
        "column": 18,
        "type": "error",
        "message": "Local variable 'holder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 326,
        "column": 23,
        "type": "error",
        "message": "Local variable 'setOfHolders' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 328,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 333,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 333,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 333,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 334,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 337,
        "column": 10,
        "type": "error",
        "message": "Local variable 'setType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 338,
        "column": 23,
        "type": "error",
        "message": "Local variable 'setOfHolders' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 340,
        "column": 18,
        "type": "error",
        "message": "Local variable 'foo' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 346,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 346,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 347,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 350,
        "column": 10,
        "type": "error",
        "message": "Local variable 'mapType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 351,
        "column": 18,
        "type": "error",
        "message": "Local variable 'holder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 352,
        "column": 31,
        "type": "error",
        "message": "Local variable 'mapOfHolders' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 354,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 359,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 359,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 360,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 363,
        "column": 18,
        "type": "error",
        "message": "Local variable 'holder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 364,
        "column": 31,
        "type": "error",
        "message": "Local variable 'mapOfHolders' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 366,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 371,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 371,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 371,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 372,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 375,
        "column": 10,
        "type": "error",
        "message": "Local variable 'mapType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 376,
        "column": 31,
        "type": "error",
        "message": "Local variable 'mapOfFoo' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 378,
        "column": 18,
        "type": "error",
        "message": "Local variable 'foo' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 383,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 383,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 384,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 387,
        "column": 23,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 388,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 392,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 392,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 393,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 396,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 397,
        "column": 23,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 402,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 402,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 402,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 403,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 413,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'data'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 415,
        "column": 30,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 421,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on field 'wrappedData'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 423,
        "column": 41,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 428,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 430,
        "column": 45,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 431,
        "column": 18,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 437,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 439,
        "column": 47,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 440,
        "column": 16,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 441,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jsonObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 442,
        "column": 19,
        "type": "error",
        "message": "Local variable 'jsonElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 444,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 450,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 452,
        "column": 41,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 452,
        "column": 52,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 458,
        "column": 39,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java",
    "score": 0.0,
    "error_count": 323,
    "messages": [
      {
        "line": 16,
        "column": 1,
        "type": "error",
        "message": "A high number of imports can indicate a high degree of coupling within an object.",
        "source": "ExcessiveImports"
      },
      {
        "line": 16,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 66,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 66,
        "column": 8,
        "type": "error",
        "message": "This class has a bunch of public methods and attributes",
        "source": "ExcessivePublicCount"
      },
      {
        "line": 66,
        "column": 55,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 89,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 100,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 111,
        "column": 12,
        "type": "error",
        "message": "Local variable 'urlValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 23,
        "type": "error",
        "message": "The String literal \"http://google.com/\" appears 4 times in this file; the first occurrence is on line 111",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 112,
        "column": 9,
        "type": "error",
        "message": "Local variable 'url' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 116,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 116,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 117,
        "column": 12,
        "type": "error",
        "message": "Local variable 'urlValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 119,
        "column": 9,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 126,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 127,
        "column": 23,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 131,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 131,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 132,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 23,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 137,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 138,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'url'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 142,
        "column": 12,
        "type": "error",
        "message": "Local variable 'uriValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 143,
        "column": 9,
        "type": "error",
        "message": "Local variable 'uri' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 147,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 147,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 148,
        "column": 12,
        "type": "error",
        "message": "Local variable 'uriValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 150,
        "column": 9,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 154,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 154,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 154,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 185,
        "column": 65,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 185,
        "column": 65,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 189,
        "column": 22,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 189,
        "column": 67,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 189,
        "column": 82,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 189,
        "column": 82,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 190,
        "column": 18,
        "type": "error",
        "message": "The String literal \"null\" appears 8 times in this file; the first occurrence is on line 190",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 194,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 194,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 195,
        "column": 12,
        "type": "error",
        "message": "Local variable 'uuidValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 196,
        "column": 10,
        "type": "error",
        "message": "Local variable 'uuid' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 200,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 200,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 201,
        "column": 12,
        "type": "error",
        "message": "Local variable 'uuidValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 202,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 203,
        "column": 10,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 208,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 212,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 212,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 213,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 214,
        "column": 12,
        "type": "error",
        "message": "Local variable 'locale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 218,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 218,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 219,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 223,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 223,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 224,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 225,
        "column": 12,
        "type": "error",
        "message": "Local variable 'locale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 229,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 229,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 230,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 231,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 235,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 235,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 235,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 236,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 237,
        "column": 12,
        "type": "error",
        "message": "Local variable 'locale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 243,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 243,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 244,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 245,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 246,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 250,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 250,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 251,
        "column": 25,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 252,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 253,
        "column": 25,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 257,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 257,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 258,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 264,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 264,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 265,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 266,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 270,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 270,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 271,
        "column": 25,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 272,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 273,
        "column": 25,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 277,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 277,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 277,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 285,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 285,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 285,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 293,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 293,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 293,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 294,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 295,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'HashSet'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 295,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 295,
        "column": 21,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 304,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 304,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 305,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 306,
        "column": 12,
        "type": "error",
        "message": "Local variable 'bits' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 310,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 314,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 314,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 314,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 315,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 320,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 348,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 348,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 348,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 349,
        "column": 10,
        "type": "error",
        "message": "Local variable 'now' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 349,
        "column": 25,
        "type": "error",
        "message": "Number 1315806903103L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 350,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 358,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 358,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 358,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 359,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 360,
        "column": 10,
        "type": "error",
        "message": "Local variable 'extracted' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 368,
        "column": 44,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 368,
        "column": 54,
        "type": "error",
        "message": "Parameter 'year' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 368,
        "column": 64,
        "type": "error",
        "message": "Parameter 'month' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 368,
        "column": 75,
        "type": "error",
        "message": "Parameter 'day' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 375,
        "column": 44,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 375,
        "column": 54,
        "type": "error",
        "message": "Parameter 'hours' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 375,
        "column": 65,
        "type": "error",
        "message": "Parameter 'minutes' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 375,
        "column": 78,
        "type": "error",
        "message": "Parameter 'seconds' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 381,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 381,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 381,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 382,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 383,
        "column": 10,
        "type": "error",
        "message": "Local variable 'now' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 383,
        "column": 25,
        "type": "error",
        "message": "Number 1315806903103L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 384,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 392,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 392,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 393,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 394,
        "column": 10,
        "type": "error",
        "message": "Local variable 'now' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 394,
        "column": 25,
        "type": "error",
        "message": "Number 1315806903103L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 395,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 396,
        "column": 10,
        "type": "error",
        "message": "Local variable 'extracted' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 400,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 400,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 400,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 401,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 402,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 411,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 411,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 411,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 412,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 413,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 414,
        "column": 14,
        "type": "error",
        "message": "Local variable 'cal' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 423,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 423,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 423,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 424,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 425,
        "column": 23,
        "type": "error",
        "message": "Local variable 'cal' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 426,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 435,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 435,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 435,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 436,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 437,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 438,
        "column": 23,
        "type": "error",
        "message": "Local variable 'cal' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 447,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 447,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 448,
        "column": 12,
        "type": "error",
        "message": "Local variable 'pattern' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 448,
        "column": 22,
        "type": "error",
        "message": "The String literal \"yyyy-MM-dd\" appears 4 times in this file; the first occurrence is on line 448",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 449,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 450,
        "column": 10,
        "type": "error",
        "message": "Local variable 'now' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 450,
        "column": 25,
        "type": "error",
        "message": "Number 1315806903103L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 451,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 456,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 456,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 457,
        "column": 12,
        "type": "error",
        "message": "Local variable 'pattern' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 458,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 459,
        "column": 10,
        "type": "error",
        "message": "Local variable 'now' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 459,
        "column": 25,
        "type": "error",
        "message": "Number 1315806903103L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 460,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 461,
        "column": 10,
        "type": "error",
        "message": "Local variable 'extracted' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 467,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 467,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 468,
        "column": 12,
        "type": "error",
        "message": "Local variable 'pattern' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 469,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 474,
        "column": 22,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 475,
        "column": 29,
        "type": "error",
        "message": "Number 1315806903103L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 480,
        "column": 10,
        "type": "error",
        "message": "Local variable 'now' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 480,
        "column": 25,
        "type": "error",
        "message": "Number 1315806903103L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 481,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 486,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 486,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 486,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 487,
        "column": 10,
        "type": "error",
        "message": "Local variable 'listOfDates' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 488,
        "column": 14,
        "type": "error",
        "message": "Local variable 'defaultTimeZone' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 490,
        "column": 12,
        "type": "error",
        "message": "Local variable 'defaultLocale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 493,
        "column": 12,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 494,
        "column": 18,
        "type": "error",
        "message": "Local variable 'dates' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 495,
        "column": 14,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 504,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 504,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 504,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 507,
        "column": 59,
        "type": "error",
        "message": "The String literal \"foo\" appears 7 times in this file; the first occurrence is on line 507",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 511,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 511,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 511,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 522,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 522,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 522,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 527,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 527,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 527,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 532,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 532,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 533,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 540,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 540,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 540,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 541,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 546,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 551,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 551,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 552,
        "column": 16,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 554,
        "column": 16,
        "type": "error",
        "message": "The String literal \"bar\" appears 4 times in this file; the first occurrence is on line 554",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 558,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 558,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 558,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 559,
        "column": 16,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 563,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 564,
        "column": 17,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 567,
        "column": 16,
        "type": "error",
        "message": "Local variable 'actualObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 571,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 571,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 571,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 576,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 576,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 576,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 587,
        "column": 16,
        "type": "error",
        "message": "Field 'value' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 587,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 588,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithBigDecimal(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 588,
        "column": 32,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 591,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on method 'getExpectedJson()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 597,
        "column": 16,
        "type": "error",
        "message": "Field 'value' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 597,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 598,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithBigInteger(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 598,
        "column": 32,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 601,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on method 'getExpectedJson()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 606,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 606,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 607,
        "column": 16,
        "type": "error",
        "message": "Local variable 'props' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 609,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 610,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 614,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 614,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 615,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 616,
        "column": 16,
        "type": "error",
        "message": "Local variable 'props' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 620,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 620,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 621,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'TreeSet'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 621,
        "column": 21,
        "type": "error",
        "message": "Local variable 'treeSet' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 623,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 627,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 627,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 628,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 629,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 629,
        "column": 31,
        "type": "error",
        "message": "Avoid using implementation types like 'TreeSet'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 630,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'TreeSet'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 630,
        "column": 21,
        "type": "error",
        "message": "Local variable 'treeSet' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 634,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 634,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 635,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 635,
        "column": 19,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 635,
        "column": 42,
        "type": "error",
        "message": "The String literal \"abc\" appears 4 times in this file; the first occurrence is on line 635",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 636,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 640,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 640,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 641,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 641,
        "column": 19,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 645,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 645,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 646,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 646,
        "column": 18,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 647,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 651,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 651,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 652,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 652,
        "column": 18,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 656,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 658,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 658,
        "column": 48,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 662,
        "column": 37,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 662,
        "column": 37,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 663,
        "column": 14,
        "type": "error",
        "message": "Local variable 'className' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 672,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'NumberAsStringAdapter'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 674,
        "column": 5,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 674,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'NumberAsStringAdapter(Class<? extends Number>)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 674,
        "column": 51,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 674,
        "column": 57,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 677,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 677,
        "column": 56,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 680,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 680,
        "column": 45,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 683,
        "column": 16,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/DelegateTypeAdapterTest.java",
    "score": 0.5,
    "error_count": 19,
    "messages": [
      {
        "line": 38,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 57,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "The value assigned to variable 'bags' is never used",
        "source": "UnusedAssignment"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 66,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 12,
        "type": "error",
        "message": "The value assigned to variable 'bags' is never used",
        "source": "UnusedAssignment"
      },
      {
        "line": 73,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 77,
        "column": 53,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 77,
        "column": 72,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 79,
        "column": 29,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 81,
        "column": 38,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 81,
        "column": 45,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 87,
        "column": 34,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 87,
        "column": 34,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/EnumTest.java",
    "score": 0.0,
    "error_count": 98,
    "messages": [
      {
        "line": 47,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 47,
        "column": 40,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 63,
        "column": 12,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 24,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expectedJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 80,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 24,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 88,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 92,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 92,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 92,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 93,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 18,
        "type": "error",
        "message": "Unnecessary modifier 'static' on enum 'MyEnum': nested enums are implicitly static",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 103,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 104,
        "column": 26,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      },
      {
        "line": 105,
        "column": 26,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 123,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 123,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 123,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 135,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 135,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 135,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 136,
        "column": 26,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 140,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 143,
        "column": 10,
        "type": "error",
        "message": "Local variable 'collectionType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 144,
        "column": 26,
        "type": "error",
        "message": "Local variable 'actualJsonList' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 149,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 149,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 154,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 154,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 154,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 155,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'EnumSet'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 155,
        "column": 23,
        "type": "error",
        "message": "Local variable 'foo' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 156,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 159,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 159,
        "column": 31,
        "type": "error",
        "message": "Avoid using implementation types like 'EnumSet'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 160,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'EnumSet'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 160,
        "column": 23,
        "type": "error",
        "message": "Local variable 'bar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 166,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 166,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 166,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 167,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'EnumMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 167,
        "column": 29,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 172,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 172,
        "column": 31,
        "type": "error",
        "message": "Avoid using implementation types like 'EnumMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 173,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'EnumMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 173,
        "column": 19,
        "type": "error",
        "message": "Local variable 'actualMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 174,
        "column": 15,
        "type": "error",
        "message": "Local variable 'expectedMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 180,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on method 'defeats()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 185,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on method 'defeats()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 190,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on method 'defeats()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 195,
        "column": 23,
        "type": "error",
        "message": "Missing commented default access modifier on method 'defeats()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 198,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 200,
        "column": 53,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 204,
        "column": 55,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 205,
        "column": 16,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 218,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 218,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 218,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 226,
        "column": 12,
        "type": "error",
        "message": "Field 'value' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 226,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 227,
        "column": 9,
        "type": "error",
        "message": "Field 'index' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 227,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'index'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 228,
        "column": 13,
        "type": "error",
        "message": "Unnecessary modifier 'private' on constructor 'Color(String, int)': enum constructors are implicitly private",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 228,
        "column": 26,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 228,
        "column": 37,
        "type": "error",
        "message": "Parameter 'index' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 234,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 234,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 234,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 244,
        "column": 5,
        "type": "error",
        "message": "Avoid variables with short names like A",
        "source": "ShortVariable"
      },
      {
        "line": 256,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 256,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 256,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 262,
        "column": 5,
        "type": "error",
        "message": "Avoid variables with short names like A",
        "source": "ShortVariable"
      },
      {
        "line": 263,
        "column": 5,
        "type": "error",
        "message": "Avoid variables with short names like B",
        "source": "ShortVariable"
      },
      {
        "line": 265,
        "column": 26,
        "type": "error",
        "message": "Field toString has the same name as a method",
        "source": "AvoidFieldNameMatchingMethodName"
      },
      {
        "line": 267,
        "column": 33,
        "type": "error",
        "message": "Parameter 'toString' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/EnumWithObfuscatedTest.java",
    "score": 6.5,
    "error_count": 7,
    "messages": [
      {
        "line": 29,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 47,
        "column": 17,
        "type": "error",
        "message": "Local variable 'enumConstant' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 48,
        "column": 7,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 51,
        "column": 9,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/EscapingTest.java",
    "score": 0.0,
    "error_count": 33,
    "messages": [
      {
        "line": 32,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 42,
        "column": 14,
        "type": "error",
        "message": "Local variable 'valueWithQuotes' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 43,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like jsonRepresentation",
        "source": "LongVariable"
      },
      {
        "line": 43,
        "column": 12,
        "type": "error",
        "message": "Local variable 'jsonRepresentation' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 44,
        "column": 14,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 49,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 50,
        "column": 18,
        "type": "error",
        "message": "Local variable 'strings' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 62,
        "column": 21,
        "type": "error",
        "message": "Local variable 'objWithPrimitives' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like jsonRepresentation",
        "source": "LongVariable"
      },
      {
        "line": 63,
        "column": 12,
        "type": "error",
        "message": "Local variable 'jsonRepresentation' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 21,
        "type": "error",
        "message": "Local variable 'expectedObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 73,
        "column": 10,
        "type": "error",
        "message": "Local variable 'escapeHtmlGson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 10,
        "type": "error",
        "message": "Local variable 'noEscapeHtmlGson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 12,
        "type": "error",
        "message": "Local variable 'escapedJsonForm' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like nonEscapedJsonForm",
        "source": "LongVariable"
      },
      {
        "line": 78,
        "column": 12,
        "type": "error",
        "message": "Local variable 'nonEscapedJsonForm' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 85,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 85,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 86,
        "column": 21,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 87,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 88,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 89,
        "column": 21,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/ExclusionStrategyFunctionalTest.java",
    "score": 0.0,
    "error_count": 69,
    "messages": [
      {
        "line": 38,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 38,
        "column": 63,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 39,
        "column": 42,
        "type": "error",
        "message": "Avoid excessively long variable names like EXCLUDE_SAMPLE_OBJECT_FOR_TEST",
        "source": "LongVariable"
      },
      {
        "line": 40,
        "column": 62,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 43,
        "column": 55,
        "type": "error",
        "message": "Parameter 'clazz' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 57,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 65,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 66,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 25,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 73,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 73,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 74,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 16,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 45,
        "type": "error",
        "message": "Number 1212311L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 80,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 18,
        "type": "error",
        "message": "Number 1212311L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 89,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 96,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 96,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 97,
        "column": 25,
        "type": "error",
        "message": "Local variable 'testObj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 16,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 115,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 116,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 122,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 122,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 122,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 123,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 127,
        "column": 25,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 133,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 134,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 137,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 138,
        "column": 25,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 142,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 142,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 142,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 143,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 146,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 152,
        "column": 52,
        "type": "error",
        "message": "Parameter 'exclusionStrategy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 152,
        "column": 79,
        "type": "error",
        "message": "Parameter 'serialization' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 153,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 166,
        "column": 18,
        "type": "error",
        "message": "Unnecessary modifier 'static' on annotation 'Foo': nested annotation types are implicitly static",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 170,
        "column": 18,
        "type": "error",
        "message": "The class 'SampleObjectForTest' might be a test class, but it contains no test cases.",
        "source": "TestClassWithoutTestCases"
      },
      {
        "line": 177,
        "column": 35,
        "type": "error",
        "message": "Number 12345L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 180,
        "column": 36,
        "type": "error",
        "message": "Parameter 'annotatedField' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 180,
        "column": 59,
        "type": "error",
        "message": "Parameter 'stringField' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 180,
        "column": 77,
        "type": "error",
        "message": "Parameter 'longField' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 190,
        "column": 42,
        "type": "error",
        "message": "Parameter 'typeToSkip' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 194,
        "column": 55,
        "type": "error",
        "message": "Parameter 'clazz' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 195,
        "column": 14,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 198,
        "column": 62,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 198,
        "column": 62,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/ExposeFieldsTest.java",
    "score": 0.0,
    "error_count": 72,
    "messages": [
      {
        "line": 33,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 47,
        "column": 28,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 48,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 54,
        "column": 28,
        "type": "error",
        "message": "Local variable 'object1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 28,
        "type": "error",
        "message": "Local variable 'object2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 28,
        "type": "error",
        "message": "Local variable 'object3' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 30,
        "type": "error",
        "message": "Local variable 'objects' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 59,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 60,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 70,
        "column": 28,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 75,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 28,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 83,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 84,
        "column": 30,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 85,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 91,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 92,
        "column": 30,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 98,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 98,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 99,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 29,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 106,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 106,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 107,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 108,
        "column": 29,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 35,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 115,
        "column": 27,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 116,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 116,
        "column": 43,
        "type": "error",
        "message": "Missing commented default access modifier on field 'c'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 117,
        "column": 47,
        "type": "error",
        "message": "Avoid variables with short names like d",
        "source": "ShortVariable"
      },
      {
        "line": 117,
        "column": 47,
        "type": "error",
        "message": "Missing commented default access modifier on field 'd'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 118,
        "column": 64,
        "type": "error",
        "message": "Avoid variables with short names like e",
        "source": "ShortVariable"
      },
      {
        "line": 118,
        "column": 64,
        "type": "error",
        "message": "Missing commented default access modifier on field 'e'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 120,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 120,
        "column": 43,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 120,
        "column": 54,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 120,
        "column": 54,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 123,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 123,
        "column": 43,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 123,
        "column": 54,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 123,
        "column": 54,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 123,
        "column": 62,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 123,
        "column": 62,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 123,
        "column": 72,
        "type": "error",
        "message": "Avoid variables with short names like d",
        "source": "ShortVariable"
      },
      {
        "line": 123,
        "column": 72,
        "type": "error",
        "message": "Parameter 'd' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 123,
        "column": 80,
        "type": "error",
        "message": "Avoid variables with short names like e",
        "source": "ShortVariable"
      },
      {
        "line": 123,
        "column": 80,
        "type": "error",
        "message": "Parameter 'e' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 132,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 132,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 142,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 143,
        "column": 23,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 143,
        "column": 23,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      },
      {
        "line": 144,
        "column": 23,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 144,
        "column": 23,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      },
      {
        "line": 147,
        "column": 18,
        "type": "error",
        "message": "Unnecessary modifier 'static' on interface 'SomeInterface': member interfaces are implicitly static",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 151,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 155,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 165,
        "column": 50,
        "type": "error",
        "message": "Parameter 'interfaceField' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/FieldExclusionTest.java",
    "score": 2.5,
    "error_count": 15,
    "messages": [
      {
        "line": 31,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 55,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 17,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 12,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 73,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 75,
        "column": 27,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 84,
        "column": 31,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/FieldNamingTest.java",
    "score": 0.0,
    "error_count": 50,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "Too many static imports may lead to messy code",
        "source": "TooManyStaticImports"
      },
      {
        "line": 32,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 33,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 33,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 34,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 42,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 49,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 50,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 58,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 66,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 73,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 74,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 58,
        "type": "error",
        "message": "Parameter 'fieldNamingPolicy' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 88,
        "column": 18,
        "type": "error",
        "message": "The class 'TestNames' might be a test class, but it contains no test cases.",
        "source": "TestClassWithoutTestCases"
      },
      {
        "line": 88,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 89,
        "column": 9,
        "type": "error",
        "message": "Field 'lowerCamel' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 89,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'lowerCamel'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 90,
        "column": 9,
        "type": "error",
        "message": "Field 'UpperCamel' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 90,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'UpperCamel'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 90,
        "column": 9,
        "type": "error",
        "message": "The field name 'UpperCamel' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 91,
        "column": 9,
        "type": "error",
        "message": "Avoid excessively long variable names like _lowerCamelLeadingUnderscore",
        "source": "LongVariable"
      },
      {
        "line": 91,
        "column": 9,
        "type": "error",
        "message": "Field '_lowerCamelLeadingUnderscore' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 91,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field '_lowerCamelLeadingUnderscore'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 91,
        "column": 9,
        "type": "error",
        "message": "The field name '_lowerCamelLeadingUnderscore' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 92,
        "column": 9,
        "type": "error",
        "message": "Avoid excessively long variable names like _UpperCamelLeadingUnderscore",
        "source": "LongVariable"
      },
      {
        "line": 92,
        "column": 9,
        "type": "error",
        "message": "Field '_UpperCamelLeadingUnderscore' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 92,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field '_UpperCamelLeadingUnderscore'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 92,
        "column": 9,
        "type": "error",
        "message": "The field name '_UpperCamelLeadingUnderscore' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 93,
        "column": 9,
        "type": "error",
        "message": "Field 'lower_words' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 93,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'lower_words'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 93,
        "column": 9,
        "type": "error",
        "message": "The field name 'lower_words' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 94,
        "column": 9,
        "type": "error",
        "message": "Field 'UPPER_WORDS' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 94,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'UPPER_WORDS'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 94,
        "column": 9,
        "type": "error",
        "message": "The field name 'UPPER_WORDS' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 95,
        "column": 42,
        "type": "error",
        "message": "Field 'annotated' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 95,
        "column": 42,
        "type": "error",
        "message": "Missing commented default access modifier on field 'annotated'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 96,
        "column": 9,
        "type": "error",
        "message": "Field 'lowerId' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 96,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'lowerId'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 97,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like _9",
        "source": "ShortVariable"
      },
      {
        "line": 97,
        "column": 9,
        "type": "error",
        "message": "Field '_9' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 97,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field '_9'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 97,
        "column": 9,
        "type": "error",
        "message": "The field name '_9' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/GsonVersionDiagnosticsTest.java",
    "score": 4.0,
    "error_count": 12,
    "messages": [
      {
        "line": 37,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 38,
        "column": 32,
        "type": "error",
        "message": "Avoid excessively long variable names like GSON_VERSION_PATTERN",
        "source": "LongVariable"
      },
      {
        "line": 49,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 81,
        "column": 69,
        "type": "error",
        "message": "Parameter 'expected' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 82,
        "column": 12,
        "type": "error",
        "message": "Local variable 'msg' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 9,
        "type": "error",
        "message": "Local variable 'start' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 9,
        "type": "error",
        "message": "Local variable 'end' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 88,
        "column": 12,
        "type": "error",
        "message": "Local variable 'version' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 93,
        "column": 24,
        "type": "error",
        "message": "The class 'TestType' might be a test class, but it contains no test cases.",
        "source": "TestClassWithoutTestCases"
      },
      {
        "line": 95,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 95,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'a'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/InheritanceTest.java",
    "score": 0.0,
    "error_count": 105,
    "messages": [
      {
        "line": 48,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 48,
        "column": 47,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 58,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 64,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 73,
        "column": 24,
        "type": "error",
        "message": "Local variable 'sub' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 16,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 17,
        "type": "error",
        "message": "Local variable 'base' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 80,
        "column": 12,
        "type": "error",
        "message": "Array initialization can be written shorter",
        "source": "UseShortArrayInitializer"
      },
      {
        "line": 80,
        "column": 12,
        "type": "error",
        "message": "Local variable 'baseClasses' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 29,
        "type": "error",
        "message": "Local variable 'sub' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 16,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 15,
        "type": "error",
        "message": "Local variable 'bases' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 22,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 89,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 89,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 90,
        "column": 22,
        "type": "error",
        "message": "Local variable 'baseClasses' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 93,
        "column": 34,
        "type": "error",
        "message": "Local variable 'sub' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 16,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Local variable 'bases' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 22,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 101,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 102,
        "column": 10,
        "type": "error",
        "message": "Local variable 'base' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 16,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 108,
        "column": 10,
        "type": "error",
        "message": "Local variable 'base' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 113,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 113,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 114,
        "column": 10,
        "type": "error",
        "message": "Local variable 'base' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 16,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 120,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 120,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 120,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 121,
        "column": 10,
        "type": "error",
        "message": "Local variable 'base' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 122,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 127,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 127,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 128,
        "column": 10,
        "type": "error",
        "message": "Local variable 'base' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 129,
        "column": 16,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 133,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 134,
        "column": 10,
        "type": "error",
        "message": "Local variable 'base' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 135,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 140,
        "column": 24,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      },
      {
        "line": 142,
        "column": 44,
        "type": "error",
        "message": "Parameter 'primitive1' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 142,
        "column": 72,
        "type": "error",
        "message": "Parameter 'primitive2' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 147,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 147,
        "column": 44,
        "type": "error",
        "message": "Parameter 'sb' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 154,
        "column": 19,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 159,
        "column": 17,
        "type": "error",
        "message": "Local variable 'queue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 164,
        "column": 16,
        "type": "error",
        "message": "Local variable 'set' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 26,
        "type": "error",
        "message": "Local variable 'sortedSet' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 174,
        "column": 40,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 180,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 183,
        "column": 40,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 192,
        "column": 27,
        "type": "error",
        "message": "Field 'list' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 193,
        "column": 25,
        "type": "error",
        "message": "Field 'queue' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 194,
        "column": 24,
        "type": "error",
        "message": "Field 'set' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 195,
        "column": 34,
        "type": "error",
        "message": "Field 'sortedSet' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 197,
        "column": 61,
        "type": "error",
        "message": "Parameter 'list' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 197,
        "column": 79,
        "type": "error",
        "message": "Parameter 'queue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 197,
        "column": 97,
        "type": "error",
        "message": "Parameter 'set' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 198,
        "column": 30,
        "type": "error",
        "message": "Parameter 'sortedSet' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 205,
        "column": 13,
        "type": "error",
        "message": "Missing commented default access modifier on method 'listContains(int[])'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 205,
        "column": 33,
        "type": "error",
        "message": "Parameter 'values' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 206,
        "column": 16,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 208,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 214,
        "column": 13,
        "type": "error",
        "message": "Missing commented default access modifier on method 'queueContains(long[])'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 214,
        "column": 35,
        "type": "error",
        "message": "Parameter 'values' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 215,
        "column": 17,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 217,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 223,
        "column": 13,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setContains' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 223,
        "column": 13,
        "type": "error",
        "message": "Missing commented default access modifier on method 'setContains(float[])'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 223,
        "column": 34,
        "type": "error",
        "message": "Parameter 'values' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 224,
        "column": 18,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 226,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 232,
        "column": 13,
        "type": "error",
        "message": "Missing commented default access modifier on method 'sortedSetContains(char[])'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 232,
        "column": 39,
        "type": "error",
        "message": "Parameter 'values' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 233,
        "column": 17,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 235,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 242,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 242,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 256,
        "column": 48,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 256,
        "column": 48,
        "type": "error",
        "message": "Parameter 'sb' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 256,
        "column": 66,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 256,
        "column": 66,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 259,
        "column": 19,
        "type": "error",
        "message": "Local variable 'o' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 260,
        "column": 9,
        "type": "error",
        "message": "Avoid if (x != y) ..; else ..;",
        "source": "ConfusingTernary"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/InstanceCreatorTest.java",
    "score": 0.0,
    "error_count": 35,
    "messages": [
      {
        "line": 39,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 42,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 10,
        "type": "error",
        "message": "Local variable 'base' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 55,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 10,
        "type": "error",
        "message": "Local variable 'base' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 9,
        "type": "error",
        "message": "Local variable 'sub' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 73,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 24,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 38,
        "type": "error",
        "message": "Access to field `base` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 89,
        "column": 5,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 90,
        "column": 35,
        "type": "error",
        "message": "Local variable 'listCreator' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 68,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new InstanceCreator<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 95,
        "column": 10,
        "type": "error",
        "message": "Local variable 'listOfStringType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 18,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 104,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 104,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 106,
        "column": 5,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 107,
        "column": 35,
        "type": "error",
        "message": "Local variable 'sortedSetCreator' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 73,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new InstanceCreator<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 112,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 10,
        "type": "error",
        "message": "Local variable 'sortedSetType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/InterfaceTest.java",
    "score": 2.5,
    "error_count": 15,
    "messages": [
      {
        "line": 29,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 47,
        "column": 23,
        "type": "error",
        "message": "Local variable 'objWrapper' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 18,
        "type": "error",
        "message": "Unnecessary modifier 'static' on interface 'TestObjectInterface': member interfaces are implicitly static",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 55,
        "column": 18,
        "type": "error",
        "message": "The class 'TestObject' might be a test class, but it contains no test cases.",
        "source": "TestClassWithoutTestCases"
      },
      {
        "line": 55,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 57,
        "column": 20,
        "type": "error",
        "message": "Field 'someStringValue' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 59,
        "column": 31,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 64,
        "column": 18,
        "type": "error",
        "message": "The class 'TestObjectWrapper' might be a test class, but it contains no test cases.",
        "source": "TestClassWithoutTestCases"
      },
      {
        "line": 64,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 66,
        "column": 33,
        "type": "error",
        "message": "Field 'obj' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 68,
        "column": 51,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/InternationalizationTest.java",
    "score": 0.0,
    "error_count": 29,
    "messages": [
      {
        "line": 27,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 37,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 38,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 39,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 44,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 46,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 51,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 57,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like supplementaryCodePoint",
        "source": "LongVariable"
      },
      {
        "line": 57,
        "column": 12,
        "type": "error",
        "message": "Local variable 'supplementaryCodePoint' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 64,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like supplementaryCodePoint",
        "source": "LongVariable"
      },
      {
        "line": 64,
        "column": 12,
        "type": "error",
        "message": "Local variable 'supplementaryCodePoint' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 71,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like supplementaryCodePoint",
        "source": "LongVariable"
      },
      {
        "line": 71,
        "column": 12,
        "type": "error",
        "message": "Local variable 'supplementaryCodePoint' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/Java17RecordTest.java",
    "score": 6.0,
    "error_count": 8,
    "messages": [
      {
        "line": 18,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 19,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertThrows'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 31,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 36,
        "column": 14,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 63,
        "column": 18,
        "type": "error",
        "message": "Unnecessary modifier 'static' on record 'MyRecord': records are implicitly static",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 64,
        "column": 38,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 65,
        "column": 79,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/JavaUtilConcurrentAtomicTest.java",
    "score": 0.0,
    "error_count": 41,
    "messages": [
      {
        "line": 34,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 44,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 46,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 51,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 58,
        "column": 16,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 60,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 65,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 22,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 22,
        "type": "error",
        "message": "Access to field `value` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 70,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 75,
        "column": 24,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 85,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 95,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 98,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 108,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/JavaUtilTest.java",
    "score": 3.5,
    "error_count": 13,
    "messages": [
      {
        "line": 29,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 40,
        "column": 25,
        "type": "error",
        "message": "Access to field `value` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 41,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 51,
        "column": 14,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 55,
        "column": 16,
        "type": "error",
        "message": "Local variable 'props' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnClassesTest.java",
    "score": 0.0,
    "error_count": 107,
    "messages": [
      {
        "line": 42,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 45,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 46,
        "column": 37,
        "type": "error",
        "message": "The String literal \"bar\" appears 4 times in this file; the first occurrence is on line 46",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 52,
        "column": 10,
        "type": "error",
        "message": "Local variable 'user' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 9,
        "type": "error",
        "message": "Local variable 'baz' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 63,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 66,
        "column": 7,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 66,
        "column": 7,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 71,
        "column": 20,
        "type": "error",
        "message": "Local variable 'typeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 49,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 72,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 75,
        "column": 42,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 75,
        "column": 42,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 79,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 37,
        "type": "error",
        "message": "The String literal \"abcd\" appears 5 times in this file; the first occurrence is on line 82",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 89,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 89,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 89,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 90,
        "column": 23,
        "type": "error",
        "message": "Local variable 'serializer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 54,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new JsonSerializer<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 96,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 7,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 18,
        "type": "error",
        "message": "The String literal \"jsonAdapter\" appears 4 times in this file; the first occurrence is on line 102",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 108,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 108,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 108,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 109,
        "column": 25,
        "type": "error",
        "message": "Local variable 'deserializer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 60,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new JsonDeserializer<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 111,
        "column": 54,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 115,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 120,
        "column": 7,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 124,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 124,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 125,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 126,
        "column": 14,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 131,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 131,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 132,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 136,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 136,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 137,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 138,
        "column": 19,
        "type": "error",
        "message": "Local variable 'fromJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 143,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like A",
        "source": "ShortClassName"
      },
      {
        "line": 144,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 145,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'A(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 145,
        "column": 14,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 148,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'JsonAdapter'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 149,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 152,
        "column": 42,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 152,
        "column": 42,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 160,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like C",
        "source": "ShortClassName"
      },
      {
        "line": 161,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 162,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'C(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 162,
        "column": 14,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 165,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'JsonAdapterFactory'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 167,
        "column": 31,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 168,
        "column": 50,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 172,
        "column": 46,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 172,
        "column": 46,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 181,
        "column": 24,
        "type": "error",
        "message": "Avoid short class names like B",
        "source": "ShortClassName"
      },
      {
        "line": 182,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'B(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 182,
        "column": 14,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 190,
        "column": 46,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 191,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithIncorrectJsonAdapter(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 191,
        "column": 42,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 198,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like User",
        "source": "ShortClassName"
      },
      {
        "line": 199,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'firstName'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 199,
        "column": 18,
        "type": "error",
        "message": "Use one line for each declaration, it enhances code readability.",
        "source": "OneDeclarationPerLine"
      },
      {
        "line": 200,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'User(String, String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 200,
        "column": 17,
        "type": "error",
        "message": "Parameter 'firstName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 200,
        "column": 35,
        "type": "error",
        "message": "Parameter 'lastName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 205,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 206,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 206,
        "column": 54,
        "type": "error",
        "message": "Parameter 'user' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 214,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 214,
        "column": 43,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 218,
        "column": 16,
        "type": "error",
        "message": "Local variable 'nameParts' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 224,
        "column": 15,
        "type": "error",
        "message": "Avoid the use of value in annotations when its the only element",
        "source": "UnnecessaryAnnotationValueElement"
      },
      {
        "line": 225,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 228,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 230,
        "column": 34,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 235,
        "column": 42,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 235,
        "column": 42,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 242,
        "column": 18,
        "type": "error",
        "message": "Unnecessary modifier 'static' on enum 'Foo': nested enums are implicitly static",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 243,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 244,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 244,
        "column": 53,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 248,
        "column": 42,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 248,
        "column": 42,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 253,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 253,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 254,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 260,
        "column": 24,
        "type": "error",
        "message": "Avoid short class names like D",
        "source": "ShortClassName"
      },
      {
        "line": 261,
        "column": 46,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 261,
        "column": 46,
        "type": "error",
        "message": "This final field could be made static",
        "source": "FinalFieldCouldBeStatic"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/JsonAdapterAnnotationOnFieldsTest.java",
    "score": 0.0,
    "error_count": 140,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 37,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 39,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 40,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 14,
        "type": "error",
        "message": "Local variable 'computer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 43,
        "column": 48,
        "type": "error",
        "message": "Access to field `user` on foreign value `computer` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 47,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 48,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 11,
        "type": "error",
        "message": "Local variable 'computer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 18,
        "type": "error",
        "message": "The String literal \"GizmoPartTypeAdapterFactory\" appears 6 times in this file; the first occurrence is on line 51",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 51,
        "column": 49,
        "type": "error",
        "message": "Access to field `part` on foreign value `computer` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 55,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 60,
        "column": 14,
        "type": "error",
        "message": "Local variable 'computer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 43,
        "type": "error",
        "message": "Access to field `user` on foreign value `computer` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 65,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 47,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 74,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 12,
        "type": "error",
        "message": "Local variable 'gadget' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 18,
        "type": "error",
        "message": "The String literal \"PartJsonFieldAnnotationAdapter\" appears 6 times in this file; the first occurrence is on line 77",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 77,
        "column": 52,
        "type": "error",
        "message": "Access to field `part` on foreign value `gadget` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 81,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 85,
        "column": 48,
        "type": "error",
        "message": "Access to field `user` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 90,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'part'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 91,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Gadget(Part)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 91,
        "column": 17,
        "type": "error",
        "message": "Parameter 'part' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 98,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'part'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 99,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Gizmo(Part)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 99,
        "column": 16,
        "type": "error",
        "message": "Parameter 'part' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 104,
        "column": 24,
        "type": "error",
        "message": "Avoid short class names like Part",
        "source": "ShortClassName"
      },
      {
        "line": 105,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 106,
        "column": 24,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 111,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 112,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 115,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 115,
        "column": 43,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 121,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 123,
        "column": 29,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 124,
        "column": 48,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 128,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 128,
        "column": 44,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 137,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'user'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 138,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Computer(User)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 138,
        "column": 19,
        "type": "error",
        "message": "Parameter 'user' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 144,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like User",
        "source": "ShortClassName"
      },
      {
        "line": 144,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 146,
        "column": 25,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 151,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 152,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 155,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 155,
        "column": 43,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 164,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'user'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 165,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Computer2(User)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 165,
        "column": 20,
        "type": "error",
        "message": "Parameter 'user' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 171,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 174,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 174,
        "column": 43,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 181,
        "column": 44,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 184,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 184,
        "column": 43,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 190,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 190,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 190,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 191,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 192,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 193,
        "column": 24,
        "type": "error",
        "message": "Local variable 'gadget' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 194,
        "column": 52,
        "type": "error",
        "message": "Access to field `part1` on foreign value `gadget` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 195,
        "column": 27,
        "type": "error",
        "message": "Access to field `part2` on foreign value `gadget` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 199,
        "column": 67,
        "type": "error",
        "message": "Missing commented default access modifier on field 'part1'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 200,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'part2'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 201,
        "column": 33,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'GadgetWithTwoParts(Part, Part)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 201,
        "column": 57,
        "type": "error",
        "message": "Parameter 'part1' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 201,
        "column": 69,
        "type": "error",
        "message": "Parameter 'part2' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 208,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 209,
        "column": 12,
        "type": "error",
        "message": "Local variable 'fromJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 211,
        "column": 28,
        "type": "error",
        "message": "Local variable 'gadget' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 214,
        "column": 12,
        "type": "error",
        "message": "Local variable 'toJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 219,
        "column": 17,
        "type": "error",
        "message": "Avoid the use of value in annotations when its the only element",
        "source": "UnnecessaryAnnotationValueElement"
      },
      {
        "line": 220,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'part'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 222,
        "column": 41,
        "type": "error",
        "message": "Parameter 'part' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 228,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 228,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 228,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 229,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 230,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 232,
        "column": 28,
        "type": "error",
        "message": "Local variable 'gadget' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 233,
        "column": 52,
        "type": "error",
        "message": "Access to field `part` on foreign value `gadget` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 237,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 237,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 237,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 238,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 239,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 241,
        "column": 29,
        "type": "error",
        "message": "Local variable 'gadget' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 247,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'part'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 249,
        "column": 42,
        "type": "error",
        "message": "Parameter 'part' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 255,
        "column": 36,
        "type": "error",
        "message": "Missing commented default access modifier on field 'ADAPTER'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 255,
        "column": 61,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 256,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 256,
        "column": 56,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 259,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 259,
        "column": 45,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 265,
        "column": 16,
        "type": "error",
        "message": "Local variable 'cls' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 267,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 276,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 276,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 276,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 277,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 278,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 280,
        "column": 12,
        "type": "error",
        "message": "Local variable 'computer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 281,
        "column": 49,
        "type": "error",
        "message": "Access to field `part` on foreign value `computer` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 281,
        "column": 49,
        "type": "error",
        "message": "Call to `get` on foreign value `computer.part` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 286,
        "column": 16,
        "type": "error",
        "message": "Field 'part' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 286,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'part'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 287,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Gizmo2(List<Part>)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 287,
        "column": 23,
        "type": "error",
        "message": "Parameter 'part' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 292,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 294,
        "column": 29,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 295,
        "column": 48,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 299,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 299,
        "column": 44,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java",
    "score": 0.0,
    "error_count": 69,
    "messages": [
      {
        "line": 37,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 40,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 41,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 43,
        "column": 14,
        "type": "error",
        "message": "Local variable 'computer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 44,
        "column": 36,
        "type": "error",
        "message": "Access to field `user2` on foreign value `computer` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 45,
        "column": 18,
        "type": "error",
        "message": "The String literal \"UserSerializerDeserializer\" appears 4 times in this file; the first occurrence is on line 45",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 45,
        "column": 48,
        "type": "error",
        "message": "Access to field `user3` on foreign value `computer` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 49,
        "column": 51,
        "type": "error",
        "message": "Missing commented default access modifier on field 'user1'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 50,
        "column": 53,
        "type": "error",
        "message": "Missing commented default access modifier on field 'user2'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 51,
        "column": 63,
        "type": "error",
        "message": "Missing commented default access modifier on field 'user3'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 52,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Computer(User, User, User)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 52,
        "column": 19,
        "type": "error",
        "message": "Parameter 'user1' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 52,
        "column": 31,
        "type": "error",
        "message": "Parameter 'user2' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 52,
        "column": 43,
        "type": "error",
        "message": "Parameter 'user3' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 59,
        "column": 24,
        "type": "error",
        "message": "Avoid short class names like User",
        "source": "ShortClassName"
      },
      {
        "line": 61,
        "column": 25,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 76,
        "column": 16,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 88,
        "column": 16,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 94,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 95,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 97,
        "column": 15,
        "type": "error",
        "message": "Local variable 'computer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 98,
        "column": 49,
        "type": "error",
        "message": "Access to field `user` on foreign value `computer` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 102,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on field 'user'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 103,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Computer2(User2)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 103,
        "column": 21,
        "type": "error",
        "message": "Parameter 'user' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 111,
        "column": 26,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 123,
        "column": 16,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 130,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 131,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 137,
        "column": 56,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 137,
        "column": 56,
        "type": "error",
        "message": "Field 'a' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 137,
        "column": 56,
        "type": "error",
        "message": "Missing commented default access modifier on field 'a'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 138,
        "column": 58,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 138,
        "column": 58,
        "type": "error",
        "message": "Field 'b' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 138,
        "column": 58,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 139,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Container(String, int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 139,
        "column": 22,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 139,
        "column": 22,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 139,
        "column": 29,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 139,
        "column": 29,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 145,
        "column": 24,
        "type": "error",
        "message": "Avoid short class names like Base",
        "source": "ShortClassName"
      },
      {
        "line": 147,
        "column": 7,
        "type": "error",
        "message": "Field 'value' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 147,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 148,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Base(T)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 148,
        "column": 12,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 166,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 167,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 15,
        "type": "error",
        "message": "Local variable 'computer3' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 170,
        "column": 48,
        "type": "error",
        "message": "Access to field `user1` on foreign value `computer3` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 175,
        "column": 89,
        "type": "error",
        "message": "Missing commented default access modifier on field 'user1'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 176,
        "column": 17,
        "type": "error",
        "message": "Avoid the use of value in annotations when its the only element",
        "source": "UnnecessaryAnnotationValueElement"
      },
      {
        "line": 176,
        "column": 71,
        "type": "error",
        "message": "Missing commented default access modifier on field 'user2'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 177,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Computer3(User, User)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 177,
        "column": 20,
        "type": "error",
        "message": "Parameter 'user1' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 177,
        "column": 32,
        "type": "error",
        "message": "Parameter 'user2' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/JsonArrayTest.java",
    "score": 0.0,
    "error_count": 30,
    "messages": [
      {
        "line": 28,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 30,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 30,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Local variable 'jsonArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Local variable 'jsonArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like x",
        "source": "ShortVariable"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 66,
        "column": 15,
        "type": "error",
        "message": "Local variable 'jsonArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like x",
        "source": "ShortVariable"
      },
      {
        "line": 71,
        "column": 9,
        "type": "error",
        "message": "Number 2.13232 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 79,
        "column": 10,
        "type": "error",
        "message": "Number 0.00234 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Local variable 'jsonArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 100,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 101,
        "column": 15,
        "type": "error",
        "message": "Local variable 'jsonArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 115,
        "column": 15,
        "type": "error",
        "message": "Local variable 'jsonArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 119,
        "column": 19,
        "type": "error",
        "message": "Number 12121 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 130,
        "column": 15,
        "type": "error",
        "message": "Local variable 'jsonArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 145,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 145,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 146,
        "column": 15,
        "type": "error",
        "message": "Local variable 'jsonArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/JsonParserTest.java",
    "score": 0.0,
    "error_count": 43,
    "messages": [
      {
        "line": 44,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 54,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 60,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 60,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 60,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 61,
        "column": 16,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 21,
        "type": "error",
        "message": "The String literal \"stringValue\" appears 5 times in this file; the first occurrence is on line 62",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 62,
        "column": 36,
        "type": "error",
        "message": "The String literal \"foo\" appears 5 times in this file; the first occurrence is on line 62",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 63,
        "column": 21,
        "type": "error",
        "message": "The String literal \"intValue\" appears 4 times in this file; the first occurrence is on line 63",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 64,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 70,
        "column": 16,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 81,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 81,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 16,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 89,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 96,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 98,
        "column": 16,
        "type": "error",
        "message": "Local variable 'primitive1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 16,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 106,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 112,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 112,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 112,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 113,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this StringReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 113,
        "column": 18,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 16,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 124,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 124,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 124,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 125,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 131,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 131,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 132,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/JsonTreeTest.java",
    "score": 0.0,
    "error_count": 43,
    "messages": [
      {
        "line": 20,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 29,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 29,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 29,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 30,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bag' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 30,
        "column": 62,
        "type": "error",
        "message": "The String literal \"foo\" appears 5 times in this file; the first occurrence is on line 30",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 31,
        "column": 17,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 33,
        "column": 16,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 34,
        "column": 37,
        "type": "error",
        "message": "Local variable 'children' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 43,
        "column": 30,
        "type": "error",
        "message": "Local variable 'bag' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 44,
        "column": 17,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 46,
        "column": 16,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 37,
        "type": "error",
        "message": "Local variable 'children' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 56,
        "column": 30,
        "type": "error",
        "message": "Local variable 'bag' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 17,
        "type": "error",
        "message": "Local variable 'jsonElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 59,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 64,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bag' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 42,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 69,
        "column": 62,
        "type": "error",
        "message": "Parameter 'child' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 70,
        "column": 41,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 19,
        "type": "error",
        "message": "Local variable 'node' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 9,
        "type": "error",
        "message": "This if statement could be combined with its parent",
        "source": "CollapsibleIfStatements"
      },
      {
        "line": 83,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 83,
        "column": 11,
        "type": "error",
        "message": "Field 'f' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 83,
        "column": 11,
        "type": "error",
        "message": "Missing commented default access modifier on field 'f'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 84,
        "column": 42,
        "type": "error",
        "message": "Avoid variables with short names like l",
        "source": "ShortVariable"
      },
      {
        "line": 84,
        "column": 42,
        "type": "error",
        "message": "Parameter 'l' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 84,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 84,
        "column": 49,
        "type": "error",
        "message": "Parameter 'i' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 84,
        "column": 60,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 84,
        "column": 60,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 84,
        "column": 70,
        "type": "error",
        "message": "Parameter 'string' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 84,
        "column": 84,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 84,
        "column": 84,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/LeniencyTest.java",
    "score": 8.0,
    "error_count": 4,
    "messages": [
      {
        "line": 29,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 40,
        "column": 18,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java",
    "score": 0.0,
    "error_count": 63,
    "messages": [
      {
        "line": 29,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 32,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 33,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 37,
        "column": 24,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 40,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 26,
        "type": "error",
        "message": "Local variable 'otherMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 56,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testTwoTypesCollapseToOneSerialize' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 57,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 25,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 71,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 72,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 76,
        "column": 12,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 85,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 24,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 100,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 30,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `map` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 103,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 104,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 108,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 108,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 108,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 109,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 112,
        "column": 30,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 11,
        "type": "error",
        "message": "Local variable 'key' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 17,
        "type": "error",
        "message": "Access to field `map` on foreign value `map` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 113,
        "column": 17,
        "type": "error",
        "message": "Call to `iterator` on foreign value `map.map.keySet()` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 113,
        "column": 17,
        "type": "error",
        "message": "Call to `keySet` on foreign value `map.map` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 114,
        "column": 11,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 19,
        "type": "error",
        "message": "Access to field `map` on foreign value `map` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 114,
        "column": 19,
        "type": "error",
        "message": "Call to `iterator` on foreign value `map.map.values()` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 114,
        "column": 19,
        "type": "error",
        "message": "Call to `values` on foreign value `map.map` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 119,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Point'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 120,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like x",
        "source": "ShortVariable"
      },
      {
        "line": 120,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'x'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 121,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like y",
        "source": "ShortVariable"
      },
      {
        "line": 121,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'y'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 122,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Point(int, int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 122,
        "column": 15,
        "type": "error",
        "message": "Avoid variables with short names like x",
        "source": "ShortVariable"
      },
      {
        "line": 122,
        "column": 15,
        "type": "error",
        "message": "Parameter 'x' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 122,
        "column": 22,
        "type": "error",
        "message": "Avoid variables with short names like y",
        "source": "ShortVariable"
      },
      {
        "line": 122,
        "column": 22,
        "type": "error",
        "message": "Parameter 'y' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 126,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Point()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 127,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 127,
        "column": 44,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 138,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'PointWithProperty'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 139,
        "column": 19,
        "type": "error",
        "message": "Missing commented default access modifier on field 'map'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/MapTest.java",
    "score": 0.0,
    "error_count": 327,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 52,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 52,
        "column": 8,
        "type": "error",
        "message": "This class has a bunch of public methods and attributes",
        "source": "ExcessivePublicCount"
      },
      {
        "line": 52,
        "column": 39,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 62,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 66,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 71,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 71,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 72,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 26,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 21,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 76,
        "column": 21,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 80,
        "column": 25,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 89,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 96,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 97,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 101,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 102,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 104,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 105,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 111,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 111,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 112,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 118,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 120,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 122,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 123,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 129,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 131,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 132,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 137,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 137,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 137,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 138,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 141,
        "column": 23,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 146,
        "column": 23,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 150,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 150,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 151,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 152,
        "column": 18,
        "type": "error",
        "message": "The String literal \"456\" appears 11 times in this file; the first occurrence is on line 152",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 153,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 154,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 156,
        "column": 18,
        "type": "error",
        "message": "The String literal \"{\\\"123\\\":\\\"456\\\"}\" appears 12 times in this file; the first occurrence is on line 156",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 159,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 159,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 159,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 160,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 161,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 167,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 167,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 167,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 168,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 176,
        "column": 10,
        "type": "error",
        "message": "Local variable 'longValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 176,
        "column": 22,
        "type": "error",
        "message": "Number 9876543210L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 177,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 178,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 179,
        "column": 23,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 185,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 185,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 185,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 186,
        "column": 10,
        "type": "error",
        "message": "Local variable 'longKey' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 186,
        "column": 20,
        "type": "error",
        "message": "Number 9876543210L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 187,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 188,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 189,
        "column": 23,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 195,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 195,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 195,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 196,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 196,
        "column": 36,
        "type": "error",
        "message": "Avoid using implementation types like 'HashMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 197,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'HashMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 197,
        "column": 30,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 203,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 203,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 203,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 204,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 205,
        "column": 32,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 211,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 211,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 211,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 212,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 213,
        "column": 36,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 217,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 221,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 221,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 221,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 222,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 222,
        "column": 36,
        "type": "error",
        "message": "Avoid using implementation types like 'ConcurrentHashMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 223,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'ConcurrentHashMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 223,
        "column": 40,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 227,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 231,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 231,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 231,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 232,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 233,
        "column": 45,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 237,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 241,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 241,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 241,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 242,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 242,
        "column": 36,
        "type": "error",
        "message": "Avoid using implementation types like 'ConcurrentSkipListMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 243,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'ConcurrentSkipListMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 243,
        "column": 44,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 247,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 251,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 251,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 252,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'MyParameterizedMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 252,
        "column": 40,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 254,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 254,
        "column": 31,
        "type": "error",
        "message": "Avoid using implementation types like 'MyParameterizedMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 255,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 261,
        "column": 15,
        "type": "error",
        "message": "Missing commented default access modifier on field 'foo'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 262,
        "column": 5,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 262,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'MyParameterizedMap(int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 262,
        "column": 28,
        "type": "error",
        "message": "Parameter 'foo' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 267,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 267,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 268,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'MyMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 268,
        "column": 11,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 270,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 274,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 274,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 274,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 275,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 276,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 276,
        "column": 31,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedHashMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 277,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedHashMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 277,
        "column": 36,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 282,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 282,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 282,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 283,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 283,
        "column": 88,
        "type": "error",
        "message": "Avoid using implementation types like 'MyMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 288,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 289,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'MyMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 289,
        "column": 11,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 294,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 294,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 295,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 297,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 299,
        "column": 68,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 301,
        "column": 23,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 302,
        "column": 23,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 309,
        "column": 23,
        "type": "error",
        "message": "Local variable 'src' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 320,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 321,
        "column": 25,
        "type": "error",
        "message": "Field 'map' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 321,
        "column": 25,
        "type": "error",
        "message": "Missing commented default access modifier on field 'map'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 327,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 327,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 327,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 328,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 329,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 329,
        "column": 20,
        "type": "error",
        "message": "The String literal \"name1\" appears 4 times in this file; the first occurrence is on line 329",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 330,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 330,
        "column": 20,
        "type": "error",
        "message": "The String literal \"name2\" appears 4 times in this file; the first occurrence is on line 330",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 331,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 339,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 339,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 339,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 340,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 341,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 342,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 343,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 344,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 349,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 349,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 350,
        "column": 58,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 352,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 354,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 359,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 359,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 359,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 360,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 361,
        "column": 33,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 363,
        "column": 18,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 367,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 371,
        "column": 9,
        "type": "error",
        "message": "Field 'foo' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 371,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'foo'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 377,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 377,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 377,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 378,
        "column": 38,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 379,
        "column": 25,
        "type": "error",
        "message": "Local variable 'nestedMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 383,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 392,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 392,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 392,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 393,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 394,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 395,
        "column": 38,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 396,
        "column": 25,
        "type": "error",
        "message": "Local variable 'nested' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 404,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 404,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 405,
        "column": 25,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 407,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 414,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 414,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 415,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 421,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 421,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 422,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 429,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 429,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 429,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 430,
        "column": 25,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 434,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedHashMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 434,
        "column": 35,
        "type": "error",
        "message": "Local variable 'innerMap' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 457,
        "column": 21,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 457,
        "column": 21,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 457,
        "column": 21,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 458,
        "column": 14,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 459,
        "column": 19,
        "type": "error",
        "message": "Local variable 'subType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 460,
        "column": 21,
        "type": "error",
        "message": "The String literal \"Test\" appears 4 times in this file; the first occurrence is on line 460",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 463,
        "column": 12,
        "type": "error",
        "message": "Local variable 'subTypeJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 464,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 467,
        "column": 10,
        "type": "error",
        "message": "Avoid excessively long variable names like gsonWithComplexKeys",
        "source": "LongVariable"
      },
      {
        "line": 467,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gsonWithComplexKeys' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 473,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 478,
        "column": 21,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 478,
        "column": 21,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 478,
        "column": 21,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 479,
        "column": 14,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 480,
        "column": 19,
        "type": "error",
        "message": "Local variable 'subType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 484,
        "column": 10,
        "type": "error",
        "message": "Local variable 'tempGson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 485,
        "column": 12,
        "type": "error",
        "message": "Local variable 'subTypeJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 486,
        "column": 23,
        "type": "error",
        "message": "Avoid excessively long variable names like baseTypeJsonElement",
        "source": "LongVariable"
      },
      {
        "line": 487,
        "column": 12,
        "type": "error",
        "message": "Local variable 'baseTypeJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 488,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 491,
        "column": 36,
        "type": "error",
        "message": "Local variable 'baseTypeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 491,
        "column": 72,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new JsonSerializer<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 512,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 512,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 512,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 513,
        "column": 33,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 514,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `map` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 515,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `map` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 516,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `map` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 518,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 528,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 528,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 528,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 529,
        "column": 24,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 532,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 537,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 537,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 538,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 539,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 546,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 546,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 547,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 548,
        "column": 25,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 554,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 554,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 555,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 556,
        "column": 25,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 562,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 562,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 563,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 564,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 570,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 570,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 571,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 578,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 578,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 579,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 580,
        "column": 38,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 587,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 587,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 588,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 589,
        "column": 38,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 592,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 596,
        "column": 37,
        "type": "error",
        "message": "Parameter 'key1' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 596,
        "column": 45,
        "type": "error",
        "message": "Parameter 'value1' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 596,
        "column": 55,
        "type": "error",
        "message": "Parameter 'key2' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 596,
        "column": 63,
        "type": "error",
        "message": "Parameter 'value2' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 597,
        "column": 15,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 603,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 603,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 604,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 605,
        "column": 25,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 607,
        "column": 17,
        "type": "error",
        "message": "Local variable 'tree' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 611,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Point'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 612,
        "column": 23,
        "type": "error",
        "message": "Avoid variables with short names like x",
        "source": "ShortVariable"
      },
      {
        "line": 613,
        "column": 23,
        "type": "error",
        "message": "Avoid variables with short names like y",
        "source": "ShortVariable"
      },
      {
        "line": 615,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Point(int, int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 615,
        "column": 15,
        "type": "error",
        "message": "Avoid variables with short names like x",
        "source": "ShortVariable"
      },
      {
        "line": 615,
        "column": 15,
        "type": "error",
        "message": "Parameter 'x' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 615,
        "column": 22,
        "type": "error",
        "message": "Avoid variables with short names like y",
        "source": "ShortVariable"
      },
      {
        "line": 615,
        "column": 22,
        "type": "error",
        "message": "Parameter 'y' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 620,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 620,
        "column": 44,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 633,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'MapClass'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 637,
        "column": 23,
        "type": "error",
        "message": "Unnecessary modifier 'final' on method 'addBase': the method is already in a final class",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 637,
        "column": 38,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 637,
        "column": 59,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 641,
        "column": 23,
        "type": "error",
        "message": "Unnecessary modifier 'final' on method 'addSub': the method is already in a final class",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 641,
        "column": 37,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 641,
        "column": 57,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 646,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'MapWithGeneralMapParameters'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 647,
        "column": 31,
        "type": "error",
        "message": "Missing commented default access modifier on field 'map'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/MoreSpecificTypeSerializationTest.java",
    "score": 0.0,
    "error_count": 97,
    "messages": [
      {
        "line": 35,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 45,
        "column": 25,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 46,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 52,
        "column": 22,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 37,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 62,
        "column": 23,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 13,
        "type": "error",
        "message": "The String literal \"base\" appears 4 times in this file; the first occurrence is on line 63",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 64,
        "column": 13,
        "type": "error",
        "message": "The String literal \"sub\" appears 4 times in this file; the first occurrence is on line 64",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 65,
        "column": 37,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 66,
        "column": 16,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 16,
        "type": "error",
        "message": "Local variable 'sub' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 77,
        "column": 38,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 32,
        "type": "error",
        "message": "The String literal \"one\" appears 4 times in this file; the first occurrence is on line 78",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 78,
        "column": 39,
        "type": "error",
        "message": "The String literal \"two\" appears 4 times in this file; the first occurrence is on line 78",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 79,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 89,
        "column": 43,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 92,
        "column": 50,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 103,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 103,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 104,
        "column": 44,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 50,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 16,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 16,
        "type": "error",
        "message": "Local variable 'sub' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like Base",
        "source": "ShortClassName"
      },
      {
        "line": 117,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 117,
        "column": 9,
        "type": "error",
        "message": "Field 'b' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 117,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 118,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Base(int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 118,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 118,
        "column": 14,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 123,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like Sub",
        "source": "ShortClassName"
      },
      {
        "line": 124,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 124,
        "column": 9,
        "type": "error",
        "message": "Field 's' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 124,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 's'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 125,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Sub(int, int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 125,
        "column": 13,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 125,
        "column": 13,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 125,
        "column": 20,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 125,
        "column": 20,
        "type": "error",
        "message": "Parameter 's' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 132,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 132,
        "column": 10,
        "type": "error",
        "message": "Field 'b' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 132,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 133,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithBaseFields(Base)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 133,
        "column": 30,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 133,
        "column": 30,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 139,
        "column": 22,
        "type": "error",
        "message": "Field 'collection' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 139,
        "column": 22,
        "type": "error",
        "message": "Missing commented default access modifier on field 'collection'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 140,
        "column": 23,
        "type": "error",
        "message": "Field 'map' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 140,
        "column": 23,
        "type": "error",
        "message": "Missing commented default access modifier on field 'map'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 141,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithContainersOfBaseFields(Collection<Base>, Map<String, Base>)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 141,
        "column": 54,
        "type": "error",
        "message": "Parameter 'collection' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 141,
        "column": 84,
        "type": "error",
        "message": "Parameter 'map' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 148,
        "column": 7,
        "type": "error",
        "message": "Avoid variables with short names like t",
        "source": "ShortVariable"
      },
      {
        "line": 148,
        "column": 7,
        "type": "error",
        "message": "Field 't' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 148,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 't'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 149,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ParameterizedBase(T)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 149,
        "column": 25,
        "type": "error",
        "message": "Avoid variables with short names like t",
        "source": "ShortVariable"
      },
      {
        "line": 149,
        "column": 25,
        "type": "error",
        "message": "Parameter 't' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 155,
        "column": 7,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 155,
        "column": 7,
        "type": "error",
        "message": "Field 's' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 155,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 's'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 156,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ParameterizedSub(T, T)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 156,
        "column": 24,
        "type": "error",
        "message": "Avoid variables with short names like t",
        "source": "ShortVariable"
      },
      {
        "line": 156,
        "column": 24,
        "type": "error",
        "message": "Parameter 't' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 156,
        "column": 29,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 156,
        "column": 29,
        "type": "error",
        "message": "Parameter 's' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 163,
        "column": 31,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 163,
        "column": 31,
        "type": "error",
        "message": "Field 'b' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 163,
        "column": 31,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 164,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithParameterizedBaseFields(ParameterizedBase<String>)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 164,
        "column": 64,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 164,
        "column": 64,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 170,
        "column": 43,
        "type": "error",
        "message": "Field 'collection' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 170,
        "column": 43,
        "type": "error",
        "message": "Missing commented default access modifier on field 'collection'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 171,
        "column": 44,
        "type": "error",
        "message": "Field 'map' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 171,
        "column": 44,
        "type": "error",
        "message": "Missing commented default access modifier on field 'map'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 172,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithContainersOfParameterizedBaseFields(Collection<ParameterizedBase<String>>, Map<String, ParameterizedBase<String>>)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 172,
        "column": 88,
        "type": "error",
        "message": "Parameter 'collection' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 173,
        "column": 48,
        "type": "error",
        "message": "Parameter 'map' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java",
    "score": 0.0,
    "error_count": 118,
    "messages": [
      {
        "line": 36,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 36,
        "column": 48,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 46,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 46,
        "type": "error",
        "message": "The String literal \"blah\" appears 6 times in this file; the first occurrence is on line 47",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 49,
        "column": 11,
        "type": "error",
        "message": "Access to field `someConstantStringInstanceField` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 49,
        "column": 52,
        "type": "error",
        "message": "The String literal \"\\\"}\" appears 6 times in this file; the first occurrence is on line 49",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 53,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 19,
        "type": "error",
        "message": "Avoid excessively long variable names like deserializedObject",
        "source": "LongVariable"
      },
      {
        "line": 55,
        "column": 19,
        "type": "error",
        "message": "Local variable 'deserializedObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 18,
        "type": "error",
        "message": "The String literal \"someValue\" appears 6 times in this file; the first occurrence is on line 56",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 60,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 11,
        "type": "error",
        "message": "Access to field `someConstantStringInstanceField` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 66,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 66,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 67,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 13,
        "type": "error",
        "message": "Access to field `someConstantStringInstanceField` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 73,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 73,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 74,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 19,
        "type": "error",
        "message": "Avoid excessively long variable names like deserializedObject",
        "source": "LongVariable"
      },
      {
        "line": 76,
        "column": 19,
        "type": "error",
        "message": "Local variable 'deserializedObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 81,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 19,
        "type": "error",
        "message": "Avoid excessively long variable names like deserializedObject",
        "source": "LongVariable"
      },
      {
        "line": 83,
        "column": 19,
        "type": "error",
        "message": "Local variable 'deserializedObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 88,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 92,
        "column": 11,
        "type": "error",
        "message": "Access to field `someConstantStringInstanceField` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 96,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 98,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 19,
        "type": "error",
        "message": "Avoid excessively long variable names like deserializedObject",
        "source": "LongVariable"
      },
      {
        "line": 99,
        "column": 19,
        "type": "error",
        "message": "Local variable 'deserializedObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 103,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 104,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 105,
        "column": 35,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 106,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 111,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 112,
        "column": 35,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 35,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 118,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 119,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 120,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 121,
        "column": 32,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 129,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 131,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 11,
        "type": "error",
        "message": "Access to field `someConstantStringInstanceField` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 136,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 136,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 137,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 139,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 140,
        "column": 19,
        "type": "error",
        "message": "Avoid excessively long variable names like deserializedObject",
        "source": "LongVariable"
      },
      {
        "line": 140,
        "column": 19,
        "type": "error",
        "message": "Local variable 'deserializedObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 144,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 144,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 145,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 147,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 11,
        "type": "error",
        "message": "Access to field `someConstantStringInstanceField` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 152,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 152,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 153,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 155,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 156,
        "column": 19,
        "type": "error",
        "message": "Avoid excessively long variable names like deserializedObject",
        "source": "LongVariable"
      },
      {
        "line": 156,
        "column": 19,
        "type": "error",
        "message": "Local variable 'deserializedObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 160,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 160,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 161,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 162,
        "column": 30,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 163,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 167,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 167,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 167,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 168,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 170,
        "column": 12,
        "type": "error",
        "message": "Local variable 'escapedFieldName' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 173,
        "column": 31,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 178,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 178,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 182,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'AtName'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 183,
        "column": 36,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 183,
        "column": 36,
        "type": "error",
        "message": "Missing commented default access modifier on field 'f'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 188,
        "column": 39,
        "type": "error",
        "message": "Avoid variables with short names like f",
        "source": "ShortVariable"
      },
      {
        "line": 188,
        "column": 39,
        "type": "error",
        "message": "Parameter 'f' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 189,
        "column": 14,
        "type": "error",
        "message": "When doing a String.toLowerCase()/toUpperCase() call, use a Locale",
        "source": "UseLocaleWithCaseConversions"
      },
      {
        "line": 195,
        "column": 20,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 196,
        "column": 40,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 198,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 198,
        "column": 45,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 202,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 202,
        "column": 44,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 206,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 206,
        "column": 45,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 206,
        "column": 55,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 206,
        "column": 55,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 215,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithComplexFieldName(long)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 215,
        "column": 36,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/NullObjectAndFieldTest.java",
    "score": 0.0,
    "error_count": 99,
    "messages": [
      {
        "line": 42,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 42,
        "column": 54,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 52,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 60,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 60,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 61,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 66,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 66,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 67,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 22,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 75,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 22,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 81,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 22,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 91,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 92,
        "column": 35,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 93,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 100,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 101,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 35,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 108,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 22,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 115,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 22,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 117,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 123,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 124,
        "column": 22,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 125,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 130,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 130,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 130,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 154,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 155,
        "column": 33,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 157,
        "column": 16,
        "type": "error",
        "message": "Access to field `array` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 157,
        "column": 44,
        "type": "error",
        "message": "Access to field `array` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 171,
        "column": 34,
        "type": "error",
        "message": "Avoid excessively long variable names like MY_BOOLEAN_DEFAULT",
        "source": "LongVariable"
      },
      {
        "line": 172,
        "column": 11,
        "type": "error",
        "message": "Missing commented default access modifier on field 'array'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 173,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'str1'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 173,
        "column": 12,
        "type": "error",
        "message": "Use one line for each declaration, it enhances code readability.",
        "source": "OneDeclarationPerLine"
      },
      {
        "line": 174,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'int1'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 175,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'int2'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 176,
        "column": 13,
        "type": "error",
        "message": "Missing commented default access modifier on field 'bool1'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 177,
        "column": 13,
        "type": "error",
        "message": "Missing commented default access modifier on field 'bool2'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 183,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 188,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 189,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'str'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 190,
        "column": 11,
        "type": "error",
        "message": "Missing commented default access modifier on field 'array'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 191,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'col'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 194,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 197,
        "column": 18,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 203,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 203,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 204,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 205,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 206,
        "column": 21,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 210,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 210,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 211,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 214,
        "column": 40,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 218,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 220,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 224,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 224,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 225,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 227,
        "column": 79,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 228,
        "column": 42,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 232,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 233,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 237,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 238,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/ObjectTest.java",
    "score": 0.0,
    "error_count": 226,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 55,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 55,
        "column": 8,
        "type": "error",
        "message": "This class has a bunch of public methods and attributes",
        "source": "ExcessivePublicCount"
      },
      {
        "line": 55,
        "column": 42,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 79,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 86,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 86,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 87,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 88,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 95,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 95,
        "column": 65,
        "type": "error",
        "message": "The String literal \"stringValue\" appears 5 times in this file; the first occurrence is on line 95",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 100,
        "column": 21,
        "type": "error",
        "message": "Local variable 'src' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 106,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 106,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 107,
        "column": 28,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 111,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 113,
        "column": 12,
        "type": "error",
        "message": "Local variable 'jsonString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 118,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 119,
        "column": 36,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 123,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 123,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 124,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 125,
        "column": 33,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 131,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 132,
        "column": 33,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 17,
        "type": "error",
        "message": "Access to field `transientLongValue` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 136,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 136,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 140,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 140,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 141,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 142,
        "column": 23,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 143,
        "column": 23,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 147,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 147,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 148,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 154,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 157,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 160,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 160,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 164,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 164,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 165,
        "column": 12,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 169,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 169,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 170,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 177,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 177,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 178,
        "column": 12,
        "type": "error",
        "message": "Local variable 'myNullObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 179,
        "column": 12,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 183,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 183,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 184,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 188,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 188,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 189,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 191,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 195,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 195,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 196,
        "column": 20,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 200,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 200,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 201,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 202,
        "column": 20,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 206,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 206,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 207,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 211,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 211,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 212,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 213,
        "column": 19,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 217,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 217,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 217,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 218,
        "column": 22,
        "type": "error",
        "message": "Local variable 'classWithObjects' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 219,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bagOfPrimitives' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 220,
        "column": 12,
        "type": "error",
        "message": "Local variable 'stringValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 221,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like classWithObjectsJson",
        "source": "LongVariable"
      },
      {
        "line": 221,
        "column": 12,
        "type": "error",
        "message": "Local variable 'classWithObjectsJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 222,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like bagOfPrimitivesJson",
        "source": "LongVariable"
      },
      {
        "line": 222,
        "column": 12,
        "type": "error",
        "message": "Local variable 'bagOfPrimitivesJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 224,
        "column": 20,
        "type": "error",
        "message": "Local variable 'classWithArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 226,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 236,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 236,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 237,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 238,
        "column": 20,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 245,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 245,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 246,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 247,
        "column": 22,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 251,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 251,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 251,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 252,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 253,
        "column": 30,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 255,
        "column": 16,
        "type": "error",
        "message": "Access to field `children` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 258,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 259,
        "column": 24,
        "type": "error",
        "message": "Field 'children' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 259,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'children'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 262,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 262,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 263,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 264,
        "column": 20,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 271,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 271,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 272,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 273,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 277,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 277,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 278,
        "column": 30,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 282,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 282,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 283,
        "column": 39,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 288,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 288,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 294,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 294,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 309,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 309,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 310,
        "column": 20,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 318,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 318,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 319,
        "column": 26,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 320,
        "column": 5,
        "type": "error",
        "message": "Access to field `member` on foreign value `obj` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 321,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 325,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 327,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'member'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 330,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 330,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 330,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 331,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 331,
        "column": 12,
        "type": "error",
        "message": "Local variable 'p' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 332,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 332,
        "column": 18,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 333,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 338,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 338,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 339,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like p",
        "source": "ShortVariable"
      },
      {
        "line": 340,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 346,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 347,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 347,
        "column": 18,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 351,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 353,
        "column": 9,
        "type": "error",
        "message": "Field 'value1' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 353,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value1'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 354,
        "column": 13,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 354,
        "column": 13,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 355,
        "column": 11,
        "type": "error",
        "message": "Field 'value2' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 355,
        "column": 11,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value2'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 364,
        "column": 27,
        "type": "error",
        "message": "Local variable 'row' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 371,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 371,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 373,
        "column": 30,
        "type": "error",
        "message": "Local variable 'row' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 381,
        "column": 30,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 396,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 397,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 397,
        "column": 16,
        "type": "error",
        "message": "Field 'a' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 406,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 406,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 406,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 407,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 408,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bag' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 414,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 414,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 414,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 431,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 431,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 431,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 432,
        "column": 32,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 434,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 443,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 443,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 443,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 444,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 445,
        "column": 32,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 451,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 452,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 452,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'a'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 453,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 453,
        "column": 12,
        "type": "error",
        "message": "Field 'b' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 453,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 454,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 454,
        "column": 12,
        "type": "error",
        "message": "Field 'c' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 454,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'c'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 457,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 457,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 458,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 459,
        "column": 16,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 460,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 467,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 467,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 467,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 468,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 469,
        "column": 13,
        "type": "error",
        "message": "Local variable 'product' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 474,
        "column": 5,
        "type": "error",
        "message": "Access to field `departments` on foreign value `product` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 479,
        "column": 5,
        "type": "error",
        "message": "Access to field `attributes` on foreign value `product` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 486,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 486,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 486,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 487,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 487,
        "column": 18,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 488,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `a` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 496,
        "column": 10,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 497,
        "column": 25,
        "type": "error",
        "message": "Missing commented default access modifier on field 'map'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 500,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Department'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 505,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Product'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 506,
        "column": 26,
        "type": "error",
        "message": "Field 'attributes' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 507,
        "column": 30,
        "type": "error",
        "message": "Field 'departments' may be declared final",
        "source": "ImmutableField"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/ParameterizedTypesTest.java",
    "score": 0.0,
    "error_count": 194,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 19,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 20,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertTrue'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 50,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 50,
        "column": 37,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 60,
        "column": 34,
        "type": "error",
        "message": "Local variable 'src' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfSrc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bag' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 42,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 10,
        "type": "error",
        "message": "Local variable 'expectedType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 21,
        "type": "error",
        "message": "Avoid excessively long variable names like bagDefaultInstance",
        "source": "LongVariable"
      },
      {
        "line": 71,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bagDefaultInstance' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 42,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 70,
        "type": "error",
        "message": "Local variable 'src' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 47,
        "type": "error",
        "message": "The String literal \"abc\" appears 5 times in this file; the first occurrence is on line 84",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 85,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfSrc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 87,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 88,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 95,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfTarget' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 97,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 70,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 70,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 108,
        "column": 10,
        "type": "error",
        "message": "Local variable 'ptIntegerType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 10,
        "type": "error",
        "message": "Local variable 'ptStringType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 34,
        "type": "error",
        "message": "Local variable 'intTarget' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 33,
        "type": "error",
        "message": "Local variable 'stringTarget' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 124,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 125,
        "column": 10,
        "type": "error",
        "message": "Local variable 'ptIntegerType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 10,
        "type": "error",
        "message": "Local variable 'ptStringType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 127,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 134,
        "column": 34,
        "type": "error",
        "message": "Local variable 'src' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 136,
        "column": 34,
        "type": "error",
        "message": "Local variable 'intTarget' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 137,
        "column": 22,
        "type": "error",
        "message": "Access to field `value` on foreign value `intTarget` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 139,
        "column": 33,
        "type": "error",
        "message": "Local variable 'srcStr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 141,
        "column": 33,
        "type": "error",
        "message": "Local variable 'stringTarget' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 147,
        "column": 12,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 148,
        "column": 34,
        "type": "error",
        "message": "Local variable 'src' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfSrc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 156,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bag' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 157,
        "column": 42,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 158,
        "column": 10,
        "type": "error",
        "message": "Local variable 'expectedType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 159,
        "column": 21,
        "type": "error",
        "message": "Avoid excessively long variable names like bagDefaultInstance",
        "source": "LongVariable"
      },
      {
        "line": 159,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bagDefaultInstance' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 160,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 164,
        "column": 12,
        "type": "error",
        "message": "Ensure that resources like this StringReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 164,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 165,
        "column": 34,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 171,
        "column": 39,
        "type": "error",
        "message": "Parameter 'args' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 177,
        "column": 13,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 178,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 179,
        "column": 19,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 182,
        "column": 21,
        "type": "error",
        "message": "Local variable 'arrayOfLists' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 184,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfSrc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 185,
        "column": 38,
        "type": "error",
        "message": "Local variable 'objToSerialize' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 187,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 194,
        "column": 13,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 195,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 196,
        "column": 19,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 199,
        "column": 21,
        "type": "error",
        "message": "Local variable 'arrayOfLists' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 201,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfSrc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 202,
        "column": 38,
        "type": "error",
        "message": "Local variable 'objToSerialize' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 204,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 205,
        "column": 38,
        "type": "error",
        "message": "Avoid excessively long variable names like objAfterDeserialization",
        "source": "LongVariable"
      },
      {
        "line": 205,
        "column": 38,
        "type": "error",
        "message": "Local variable 'objAfterDeserialization' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 212,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfSrc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 213,
        "column": 38,
        "type": "error",
        "message": "Local variable 'objToSerialize' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 215,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 216,
        "column": 38,
        "type": "error",
        "message": "Avoid excessively long variable names like objAfterDeserialization",
        "source": "LongVariable"
      },
      {
        "line": 216,
        "column": 38,
        "type": "error",
        "message": "Local variable 'objAfterDeserialization' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 223,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 225,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfSrc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 226,
        "column": 38,
        "type": "error",
        "message": "Local variable 'objToSerialize' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 228,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 229,
        "column": 38,
        "type": "error",
        "message": "Avoid excessively long variable names like objAfterDeserialization",
        "source": "LongVariable"
      },
      {
        "line": 229,
        "column": 38,
        "type": "error",
        "message": "Local variable 'objAfterDeserialization' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 236,
        "column": 19,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 240,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfSrc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 241,
        "column": 38,
        "type": "error",
        "message": "Local variable 'objToSerialize' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 243,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 244,
        "column": 38,
        "type": "error",
        "message": "Avoid excessively long variable names like objAfterDeserialization",
        "source": "LongVariable"
      },
      {
        "line": 244,
        "column": 38,
        "type": "error",
        "message": "Local variable 'objAfterDeserialization' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 251,
        "column": 19,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 254,
        "column": 21,
        "type": "error",
        "message": "Local variable 'arrayOfLists' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 256,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfSrc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 257,
        "column": 38,
        "type": "error",
        "message": "Local variable 'objToSerialize' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 259,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 265,
        "column": 19,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 268,
        "column": 21,
        "type": "error",
        "message": "Local variable 'arrayOfLists' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 270,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfSrc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 271,
        "column": 38,
        "type": "error",
        "message": "Local variable 'objToSerialize' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 273,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 274,
        "column": 38,
        "type": "error",
        "message": "Avoid excessively long variable names like objAfterDeserialization",
        "source": "LongVariable"
      },
      {
        "line": 274,
        "column": 38,
        "type": "error",
        "message": "Local variable 'objAfterDeserialization' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 286,
        "column": 23,
        "type": "error",
        "message": "Avoid excessively long variable names like typeParameterArray",
        "source": "LongVariable"
      },
      {
        "line": 287,
        "column": 27,
        "type": "error",
        "message": "Avoid excessively long variable names like listOfTypeParameters",
        "source": "LongVariable"
      },
      {
        "line": 288,
        "column": 29,
        "type": "error",
        "message": "Avoid excessively long variable names like arrayOfListOfTypeParameters",
        "source": "LongVariable"
      },
      {
        "line": 289,
        "column": 37,
        "type": "error",
        "message": "Avoid excessively long variable names like listOfWildcardTypeParameters",
        "source": "LongVariable"
      },
      {
        "line": 290,
        "column": 39,
        "type": "error",
        "message": "Avoid excessively long variable names like arrayOfListOfWildcardTypeParameters",
        "source": "LongVariable"
      },
      {
        "line": 293,
        "column": 23,
        "type": "error",
        "message": "The String literal \"unused\" appears 4 times in this file; the first occurrence is on line 293",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 298,
        "column": 38,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 298,
        "column": 47,
        "type": "error",
        "message": "Parameter 'array' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 298,
        "column": 62,
        "type": "error",
        "message": "Parameter 'list' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 298,
        "column": 78,
        "type": "error",
        "message": "Parameter 'arrayOfList' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 299,
        "column": 27,
        "type": "error",
        "message": "Parameter 'wildcardList' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 299,
        "column": 41,
        "type": "error",
        "message": "Consider using varargs for methods or constructors which take an array the last parameter.",
        "source": "UseVarargs"
      },
      {
        "line": 299,
        "column": 61,
        "type": "error",
        "message": "Avoid excessively long variable names like arrayOfWildcardList",
        "source": "LongVariable"
      },
      {
        "line": 299,
        "column": 61,
        "type": "error",
        "message": "Parameter 'arrayOfWildcardList' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 301,
        "column": 7,
        "type": "error",
        "message": "The user-supplied array 'array' is stored directly.",
        "source": "ArrayIsStoredDirectly"
      },
      {
        "line": 303,
        "column": 7,
        "type": "error",
        "message": "The user-supplied array 'arrayOfList' is stored directly.",
        "source": "ArrayIsStoredDirectly"
      },
      {
        "line": 305,
        "column": 7,
        "type": "error",
        "message": "The user-supplied array 'arrayOfWildcardList' is stored directly.",
        "source": "ArrayIsStoredDirectly"
      },
      {
        "line": 308,
        "column": 19,
        "type": "error",
        "message": "The method 'getExpectedJson()' has a cognitive complexity of 16, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 308,
        "column": 19,
        "type": "error",
        "message": "The method 'getExpectedJson()' has a cyclomatic complexity of 12.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 308,
        "column": 19,
        "type": "error",
        "message": "The method 'getExpectedJson()' has an NPath complexity of 486, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 309,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 309,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 364,
        "column": 22,
        "type": "error",
        "message": "The value assigned to variable 'needsComma' is never used",
        "source": "UnusedAssignment"
      },
      {
        "line": 370,
        "column": 55,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 370,
        "column": 55,
        "type": "error",
        "message": "Parameter 'sb' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 370,
        "column": 81,
        "type": "error",
        "message": "Parameter 'iterable' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 372,
        "column": 14,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 381,
        "column": 55,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 381,
        "column": 55,
        "type": "error",
        "message": "Parameter 'sb' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 381,
        "column": 59,
        "type": "error",
        "message": "Consider using varargs for methods or constructors which take an array the last parameter.",
        "source": "UseVarargs"
      },
      {
        "line": 381,
        "column": 79,
        "type": "error",
        "message": "Parameter 'arrayOfList' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 383,
        "column": 30,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 398,
        "column": 30,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 404,
        "column": 7,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 404,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 'a'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 405,
        "column": 7,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 405,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 406,
        "column": 7,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 406,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 'c'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 407,
        "column": 7,
        "type": "error",
        "message": "Avoid variables with short names like d",
        "source": "ShortVariable"
      },
      {
        "line": 407,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 'd'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 408,
        "column": 7,
        "type": "error",
        "message": "Avoid variables with short names like e",
        "source": "ShortVariable"
      },
      {
        "line": 408,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 'e'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 413,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'MultiParameters(A, B, C, D, E)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 413,
        "column": 23,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 413,
        "column": 23,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 413,
        "column": 28,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 413,
        "column": 28,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 413,
        "column": 33,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 413,
        "column": 33,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 413,
        "column": 38,
        "type": "error",
        "message": "Avoid variables with short names like d",
        "source": "ShortVariable"
      },
      {
        "line": 413,
        "column": 38,
        "type": "error",
        "message": "Parameter 'd' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 413,
        "column": 43,
        "type": "error",
        "message": "Avoid variables with short names like e",
        "source": "ShortVariable"
      },
      {
        "line": 413,
        "column": 43,
        "type": "error",
        "message": "Parameter 'e' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 434,
        "column": 20,
        "type": "error",
        "message": "The method 'equals(Object)' has a cognitive complexity of 23, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 434,
        "column": 20,
        "type": "error",
        "message": "The method 'equals(Object)' has a cyclomatic complexity of 19.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 434,
        "column": 20,
        "type": "error",
        "message": "The method 'equals(Object)' has an NPath complexity of 8192, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 434,
        "column": 34,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 436,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 439,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 442,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 444,
        "column": 38,
        "type": "error",
        "message": "Local variable 'other' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 447,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 450,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 454,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 457,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 461,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 464,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 468,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 471,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 475,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 478,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 487,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like q",
        "source": "ShortVariable"
      },
      {
        "line": 487,
        "column": 9,
        "type": "error",
        "message": "Field 'q' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 487,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'q'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 489,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 491,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like q2",
        "source": "ShortVariable"
      },
      {
        "line": 491,
        "column": 9,
        "type": "error",
        "message": "Field 'q2' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 491,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'q2'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 504,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 508,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 509,
        "column": 24,
        "type": "error",
        "message": "Local variable 'amount' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 510,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 517,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 518,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 519,
        "column": 24,
        "type": "error",
        "message": "Local variable 'amount' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 524,
        "column": 58,
        "type": "error",
        "message": "Parameter 'object' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 526,
        "column": 20,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 532,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 533,
        "column": 31,
        "type": "error",
        "message": "Local variable 'typeToken' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 533,
        "column": 56,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeToken<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 534,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 537,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jsonObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 539,
        "column": 17,
        "type": "error",
        "message": "Local variable 'jsonArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 546,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 559,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/PrettyPrintingTest.java",
    "score": 0.0,
    "error_count": 48,
    "messages": [
      {
        "line": 39,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 52,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 52,
        "column": 21,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 27,
        "type": "error",
        "message": "Local variable 'listOfB' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 10,
        "type": "error",
        "message": "Local variable 'typeOfSrc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 63,
        "column": 20,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 68,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 69,
        "column": 11,
        "type": "error",
        "message": "Array initialization can be written shorter",
        "source": "UseShortArrayInitializer"
      },
      {
        "line": 69,
        "column": 11,
        "type": "error",
        "message": "Local variable 'ints' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 75,
        "column": 13,
        "type": "error",
        "message": "Array initialization can be written shorter",
        "source": "UseShortArrayInitializer"
      },
      {
        "line": 75,
        "column": 13,
        "type": "error",
        "message": "Local variable 'ints' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 83,
        "column": 21,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 85,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 91,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 99,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 100,
        "column": 18,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `obj` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 102,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 108,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'map'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 109,
        "column": 9,
        "type": "error",
        "message": "Field 'value' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 109,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 112,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 112,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 113,
        "column": 15,
        "type": "error",
        "message": "Array initialization can be written shorter",
        "source": "UseShortArrayInitializer"
      },
      {
        "line": 113,
        "column": 15,
        "type": "error",
        "message": "Local variable 'ints' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 29,
        "type": "error",
        "message": "Parameter 'msg' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 120,
        "column": 7,
        "type": "error",
        "message": "Usage of System.out/err",
        "source": "SystemPrintln"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/PrimitiveCharacterTest.java",
    "score": 6.0,
    "error_count": 8,
    "messages": [
      {
        "line": 29,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 45,
        "column": 10,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/PrimitiveTest.java",
    "score": 0.0,
    "error_count": 459,
    "messages": [
      {
        "line": 19,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertArrayEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 42,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 42,
        "column": 8,
        "type": "error",
        "message": "The class 'PrimitiveTest' has a total cyclomatic complexity of 161 (highest 5).",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 42,
        "column": 8,
        "type": "error",
        "message": "This class has a bunch of public methods and attributes",
        "source": "ExcessivePublicCount"
      },
      {
        "line": 42,
        "column": 45,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 56,
        "column": 9,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 75,
        "column": 10,
        "type": "error",
        "message": "Local variable 'boxed' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 10,
        "type": "error",
        "message": "Local variable 'primitive' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 12,
        "type": "error",
        "message": "Local variable 'bytes' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 115,
        "column": 40,
        "type": "error",
        "message": "Number 32768 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 120,
        "column": 11,
        "type": "error",
        "message": "Local variable 'boxed' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 122,
        "column": 11,
        "type": "error",
        "message": "Local variable 'primitive' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 125,
        "column": 13,
        "type": "error",
        "message": "Local variable 'shorts' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 37,
        "type": "error",
        "message": "Number 32768 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 126,
        "column": 47,
        "type": "error",
        "message": "Number 32767 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 152,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 152,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 152,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 160,
        "column": 45,
        "type": "error",
        "message": "Number 2147483648L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 164,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 164,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 164,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 176,
        "column": 18,
        "type": "error",
        "message": "The String literal \"1.5\" appears 8 times in this file; the first occurrence is on line 176",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 181,
        "column": 18,
        "type": "error",
        "message": "The String literal \"1.0\" appears 4 times in this file; the first occurrence is on line 181",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 186,
        "column": 18,
        "type": "error",
        "message": "The String literal \"Infinity\" appears 10 times in this file; the first occurrence is on line 186",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 189,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 189,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 189,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 200,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 200,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 200,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 201,
        "column": 9,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 208,
        "column": 10,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 208,
        "column": 18,
        "type": "error",
        "message": "Number 333961828784581L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 212,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 212,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 213,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 214,
        "column": 10,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 215,
        "column": 18,
        "type": "error",
        "message": "Number 333961828784581L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 218,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 218,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 218,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 223,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 223,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 223,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 224,
        "column": 10,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 232,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 232,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 232,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 233,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 239,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 239,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 239,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 244,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 244,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 244,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 251,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 251,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 251,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 252,
        "column": 13,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 258,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 258,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 258,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 259,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 267,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 267,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 267,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 283,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 283,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 284,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 288,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 288,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 288,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 289,
        "column": 48,
        "type": "error",
        "message": "Number 122.08234335D should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 290,
        "column": 46,
        "type": "error",
        "message": "Number 122.08112002D should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 293,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 293,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 293,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 295,
        "column": 19,
        "type": "error",
        "message": "Number 122.08858585D should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 298,
        "column": 18,
        "type": "error",
        "message": "Number 122.023900008D should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 301,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 301,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 301,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 302,
        "column": 14,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 308,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 308,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 308,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 309,
        "column": 12,
        "type": "error",
        "message": "Local variable 'doubleValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 310,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 311,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 314,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 315,
        "column": 18,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 318,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 318,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 318,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 319,
        "column": 12,
        "type": "error",
        "message": "Local variable 'doubleValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 320,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 321,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 324,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 325,
        "column": 18,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 328,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 328,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 328,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 329,
        "column": 14,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 331,
        "column": 16,
        "type": "error",
        "message": "Local variable 'values' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 334,
        "column": 20,
        "type": "error",
        "message": "Number 0.004761904761904762 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 335,
        "column": 20,
        "type": "error",
        "message": "Number 3.4013606962703525E-4 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 336,
        "column": 20,
        "type": "error",
        "message": "Number 7.936508173034305E-4 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 337,
        "column": 20,
        "type": "error",
        "message": "Number 0.0011904761904761906 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 341,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 341,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 341,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 342,
        "column": 12,
        "type": "error",
        "message": "Local variable 'doubleValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 343,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 344,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 347,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 348,
        "column": 18,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 351,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 351,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 352,
        "column": 16,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 353,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 357,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 357,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 358,
        "column": 16,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 359,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 363,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 363,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 363,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 364,
        "column": 18,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 374,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 374,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 375,
        "column": 16,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 376,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 380,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 380,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 381,
        "column": 16,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 382,
        "column": 16,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 386,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 386,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 387,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expectedValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 388,
        "column": 16,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 389,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actualValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 394,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 394,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 395,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 396,
        "column": 16,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 397,
        "column": 16,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 402,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 402,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 403,
        "column": 12,
        "type": "error",
        "message": "Local variable 'doubleValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 404,
        "column": 16,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 405,
        "column": 16,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 409,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 409,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 410,
        "column": 12,
        "type": "error",
        "message": "Local variable 'doubleValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 411,
        "column": 16,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 412,
        "column": 16,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 416,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 416,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 417,
        "column": 16,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 417,
        "column": 40,
        "type": "error",
        "message": "The String literal \"12121211243123245845384534687435634558945453489543985435\" appears 6 times in this file; the first occurrence is on line 417",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 421,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 421,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 422,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 423,
        "column": 16,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 427,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 427,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 427,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 428,
        "column": 18,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 438,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 438,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 439,
        "column": 16,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 440,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 444,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 444,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 445,
        "column": 16,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 446,
        "column": 16,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 450,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 450,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 451,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 457,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 457,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 458,
        "column": 24,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 459,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 463,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 463,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 464,
        "column": 24,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 465,
        "column": 24,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 469,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 469,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 470,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 471,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 472,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expectedJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 474,
        "column": 18,
        "type": "error",
        "message": "Avoid excessively long variable names like serializableString",
        "source": "LongVariable"
      },
      {
        "line": 474,
        "column": 18,
        "type": "error",
        "message": "Local variable 'serializableString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 475,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actualJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 479,
        "column": 49,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 483,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 483,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 483,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 484,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 485,
        "column": 14,
        "type": "error",
        "message": "Local variable 'nan' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 487,
        "column": 12,
        "type": "error",
        "message": "The String literal \"Gson should not accept NaN for serialization\" appears 4 times in this file; the first occurrence is on line 487",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 490,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 497,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 497,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 497,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 498,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 499,
        "column": 12,
        "type": "error",
        "message": "Local variable 'nan' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 500,
        "column": 18,
        "type": "error",
        "message": "The String literal \"NaN\" appears 9 times in this file; the first occurrence is on line 500",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 504,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 504,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 504,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 509,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 509,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 509,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 510,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 511,
        "column": 13,
        "type": "error",
        "message": "Local variable 'nan' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 516,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 523,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 523,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 523,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 524,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 525,
        "column": 11,
        "type": "error",
        "message": "Local variable 'nan' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 530,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 530,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 530,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 535,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 535,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 536,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 543,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 543,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 543,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 544,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 545,
        "column": 14,
        "type": "error",
        "message": "Local variable 'infinity' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 550,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 557,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 557,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 557,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 558,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 559,
        "column": 12,
        "type": "error",
        "message": "Local variable 'infinity' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 564,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 564,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 564,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 569,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 569,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 569,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 570,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 571,
        "column": 13,
        "type": "error",
        "message": "Local variable 'infinity' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 576,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 583,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 583,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 583,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 584,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 585,
        "column": 11,
        "type": "error",
        "message": "Local variable 'infinity' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 590,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 590,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 590,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 595,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 595,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 596,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 603,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 603,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 603,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 604,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 605,
        "column": 14,
        "type": "error",
        "message": "Local variable 'negativeInfinity' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 607,
        "column": 12,
        "type": "error",
        "message": "The String literal \"Gson should not accept negative infinity for serialization by default\" appears 4 times in this file; the first occurrence is on line 607",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 610,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 617,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 617,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 617,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 618,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 619,
        "column": 12,
        "type": "error",
        "message": "Local variable 'negativeInfinity' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 620,
        "column": 18,
        "type": "error",
        "message": "The String literal \"-Infinity\" appears 9 times in this file; the first occurrence is on line 620",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 624,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 624,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 624,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 629,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 629,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 629,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 630,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 631,
        "column": 13,
        "type": "error",
        "message": "Local variable 'negativeInfinity' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 636,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 643,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 643,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 643,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 644,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 645,
        "column": 11,
        "type": "error",
        "message": "Local variable 'negativeInfinity' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 650,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 650,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 650,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 655,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 655,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 656,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 663,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 663,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 663,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 673,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 673,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 673,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 682,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 682,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 682,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 683,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 684,
        "column": 12,
        "type": "error",
        "message": "Local variable 'serializedForm' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 687,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 691,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 691,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 691,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 694,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 695,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 701,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 701,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 701,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 702,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 711,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 711,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 712,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 713,
        "column": 27,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 714,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 717,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 718,
        "column": 13,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 718,
        "column": 13,
        "type": "error",
        "message": "Missing commented default access modifier on field 'i'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 721,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 721,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 721,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 722,
        "column": 21,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 723,
        "column": 21,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 724,
        "column": 21,
        "type": "error",
        "message": "Unnecessary explicit unboxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 727,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 727,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 728,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 729,
        "column": 21,
        "type": "error",
        "message": "The String literal \"{\\'abc\\':1}\" appears 6 times in this file; the first occurrence is on line 729",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 734,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 734,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 735,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 741,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 741,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 742,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 748,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 748,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 749,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 755,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 755,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 756,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 762,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 762,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 763,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 769,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 769,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 770,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 776,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 776,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 777,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 783,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 783,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 784,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 790,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 790,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 791,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 797,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 797,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 798,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 804,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 804,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 805,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 806,
        "column": 21,
        "type": "error",
        "message": "The String literal \"[1,2,3,4]\" appears 5 times in this file; the first occurrence is on line 806",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 811,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 811,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 812,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 818,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 818,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 819,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 825,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 825,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 826,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 832,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 832,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 833,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 839,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 839,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 840,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 846,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 846,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 847,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 853,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 853,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 854,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 860,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 860,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 861,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 867,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 867,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 871,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 871,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 871,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 872,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 873,
        "column": 21,
        "type": "error",
        "message": "The String literal \"1.02\" appears 4 times in this file; the first occurrence is on line 873",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 877,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 882,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 887,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 894,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 894,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 895,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 902,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 902,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 903,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 910,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 910,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 911,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 918,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 918,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 918,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 919,
        "column": 42,
        "type": "error",
        "message": "The String literal \"-122.08e-2132\" appears 6 times in this file; the first occurrence is on line 919",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 929,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 929,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 930,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 931,
        "column": 11,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 935,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 935,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 936,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 937,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 941,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 941,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 942,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 949,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 949,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 950,
        "column": 16,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 955,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 955,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 956,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/PrintFormattingTest.java",
    "score": 0.5,
    "error_count": 19,
    "messages": [
      {
        "line": 36,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 47,
        "column": 18,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 58,
        "column": 16,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 59,
        "column": 21,
        "type": "error",
        "message": "The String literal \"field1\" appears 4 times in this file; the first occurrence is on line 59",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 60,
        "column": 21,
        "type": "error",
        "message": "The String literal \"field2\" appears 4 times in this file; the first occurrence is on line 60",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 61,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 66,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 66,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 66,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 16,
        "type": "error",
        "message": "Local variable 'obj' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 57,
        "type": "error",
        "message": "Parameter 'str' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 77,
        "column": 15,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/RawSerializationTest.java",
    "score": 0.0,
    "error_count": 38,
    "messages": [
      {
        "line": 31,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 42,
        "column": 25,
        "type": "error",
        "message": "Local variable 'ints' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 43,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 48,
        "column": 21,
        "type": "error",
        "message": "Local variable 'foos' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 54,
        "column": 14,
        "type": "error",
        "message": "Local variable 'bar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expectedJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 65,
        "column": 19,
        "type": "error",
        "message": "Local variable 'bar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 66,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expectedJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 76,
        "column": 24,
        "type": "error",
        "message": "Local variable 'bar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expectedJson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like Foo",
        "source": "ShortClassName"
      },
      {
        "line": 88,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 88,
        "column": 9,
        "type": "error",
        "message": "Field 'b' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 88,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 89,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Foo(int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 89,
        "column": 13,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 89,
        "column": 13,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 94,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like Bar",
        "source": "ShortClassName"
      },
      {
        "line": 96,
        "column": 7,
        "type": "error",
        "message": "Avoid variables with short names like t",
        "source": "ShortVariable"
      },
      {
        "line": 96,
        "column": 7,
        "type": "error",
        "message": "Field 't' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 96,
        "column": 7,
        "type": "error",
        "message": "Missing commented default access modifier on field 't'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 97,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Bar(T)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 97,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like t",
        "source": "ShortVariable"
      },
      {
        "line": 97,
        "column": 11,
        "type": "error",
        "message": "Parameter 't' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java",
    "score": 0.0,
    "error_count": 77,
    "messages": [
      {
        "line": 41,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 41,
        "column": 50,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 51,
        "column": 12,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 21,
        "type": "error",
        "message": "Local variable 'src' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 58,
        "column": 21,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 59,
        "column": 12,
        "type": "error",
        "message": "Ensure that resources like this StringReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 59,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 60,
        "column": 21,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 65,
        "column": 18,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 18,
        "type": "error",
        "message": "The String literal \"null\" appears 6 times in this file; the first occurrence is on line 67",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 71,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this StringReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 71,
        "column": 18,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 13,
        "type": "error",
        "message": "Local variable 'nullIntObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 77,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 18,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 83,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 84,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 85,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this StringReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 85,
        "column": 18,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 13,
        "type": "error",
        "message": "Local variable 'nullIntObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 91,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 92,
        "column": 21,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 93,
        "column": 30,
        "type": "error",
        "message": "The String literal \"one\" appears 4 times in this file; the first occurrence is on line 93",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 94,
        "column": 30,
        "type": "error",
        "message": "The String literal \"two\" appears 4 times in this file; the first occurrence is on line 94",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 95,
        "column": 21,
        "type": "error",
        "message": "Ensure that resources like this CharArrayReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 95,
        "column": 21,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 22,
        "type": "error",
        "message": "Local variable 'parser' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 97,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actualOne' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 99,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actualTwo' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 103,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 103,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 104,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 105,
        "column": 21,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 106,
        "column": 21,
        "type": "error",
        "message": "Local variable 'expectedOne' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 108,
        "column": 21,
        "type": "error",
        "message": "Local variable 'expectedTwo' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 21,
        "type": "error",
        "message": "Ensure that resources like this CharArrayReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 110,
        "column": 21,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 22,
        "type": "error",
        "message": "Local variable 'parser' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 112,
        "column": 21,
        "type": "error",
        "message": "Local variable 'actualOne' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 21,
        "type": "error",
        "message": "Local variable 'actualTwo' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 120,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 127,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 127,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 128,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 139,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 139,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 139,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 140,
        "column": 5,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 141,
        "column": 13,
        "type": "error",
        "message": "StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).",
        "source": "AvoidStringBufferField"
      },
      {
        "line": 141,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'stringBuilder'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 142,
        "column": 11,
        "type": "error",
        "message": "Missing commented default access modifier on field 'toStringCallCount'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 145,
        "column": 37,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 145,
        "column": 37,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 153,
        "column": 11,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'csq'",
        "source": "AvoidReassigningParameters"
      },
      {
        "line": 160,
        "column": 54,
        "type": "error",
        "message": "Parameter 'start' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 160,
        "column": 65,
        "type": "error",
        "message": "Parameter 'end' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 162,
        "column": 11,
        "type": "error",
        "message": "Avoid reassigning parameters such as 'csq'",
        "source": "AvoidReassigningParameters"
      },
      {
        "line": 166,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 166,
        "column": 16,
        "type": "error",
        "message": "Local variable 's' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 173,
        "column": 22,
        "type": "error",
        "message": "Local variable 'appendable' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/ReflectionAccessFilterTest.java",
    "score": 0.0,
    "error_count": 63,
    "messages": [
      {
        "line": 3,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 4,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.fail'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 5,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assume.assumeNotNull'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 30,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 30,
        "column": 41,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 32,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 45,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 12,
        "type": "error",
        "message": "The String literal \"Expected exception; test needs to be run with Java >= 9\" appears 5 times in this file; the first occurrence is on line 52",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 68,
        "column": 7,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      },
      {
        "line": 71,
        "column": 20,
        "type": "error",
        "message": "Local variable 'pointConstructor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 12,
        "type": "error",
        "message": "Local variable 'point' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 79,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 97,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 108,
        "column": 11,
        "type": "error",
        "message": "The String literal \"Register a TypeAdapter for this type or adjust the access filter.\" appears 4 times in this file; the first occurrence is on line 108",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 115,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 116,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 134,
        "column": 23,
        "type": "error",
        "message": "The String literal \"unused\" appears 4 times in this file; the first occurrence is on line 134",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 135,
        "column": 24,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 139,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 140,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 165,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 167,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 167,
        "column": 16,
        "type": "error",
        "message": "Field 'i' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 169,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 171,
        "column": 16,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 171,
        "column": 16,
        "type": "error",
        "message": "Field 'i' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 176,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 178,
        "column": 54,
        "type": "error",
        "message": "Parameter 'rawClass' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 184,
        "column": 54,
        "type": "error",
        "message": "Parameter 'rawClass' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 215,
        "column": 17,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 215,
        "column": 17,
        "type": "error",
        "message": "Field 'i' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 217,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 221,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 246,
        "column": 54,
        "type": "error",
        "message": "Parameter 'rawClass' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 253,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 257,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 258,
        "column": 13,
        "type": "error",
        "message": "Avoid unnecessary constructors - the compiler will generate these for you",
        "source": "UnnecessaryConstructor"
      },
      {
        "line": 263,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 264,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 286,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 286,
        "column": 19,
        "type": "error",
        "message": "Field 's' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 288,
        "column": 49,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 288,
        "column": 49,
        "type": "error",
        "message": "Parameter 's' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 294,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 295,
        "column": 17,
        "type": "error",
        "message": "Local variable 'gsonBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 319,
        "column": 72,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 319,
        "column": 72,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 325,
        "column": 10,
        "type": "error",
        "message": "Unnecessary semicolon",
        "source": "UnnecessarySemicolon"
      },
      {
        "line": 348,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 349,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 362,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 384,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 391,
        "column": 13,
        "type": "error",
        "message": "Local variable 'deserialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 401,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 408,
        "column": 13,
        "type": "error",
        "message": "Local variable 'deserialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 417,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 418,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/ReflectionAccessTest.java",
    "score": 0.0,
    "error_count": 32,
    "messages": [
      {
        "line": 3,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 4,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertNull'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 5,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertTrue'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 6,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.fail'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 24,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 26,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 27,
        "column": 20,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 29,
        "column": 13,
        "type": "error",
        "message": "Avoid unnecessary constructors - the compiler will generate these for you",
        "source": "UnnecessaryConstructor"
      },
      {
        "line": 33,
        "column": 70,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 33,
        "column": 70,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 33,
        "column": 73,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 34,
        "column": 9,
        "type": "error",
        "message": "Local variable 'url' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Call to `getCodeSource` on foreign value `c.getProtectionDomain()` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Call to `getLocation` on foreign value `c.getProtectionDomain().getCodeSource()` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 35,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this URLClassLoader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 35,
        "column": 20,
        "type": "error",
        "message": "Local variable 'classLoader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 43,
        "column": 14,
        "type": "error",
        "message": "Local variable 'clazz' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 22,
        "type": "error",
        "message": "Avoid excessively long variable names like accessDeclaredMembers",
        "source": "LongVariable"
      },
      {
        "line": 46,
        "column": 22,
        "type": "error",
        "message": "Avoid excessively long variable names like suppressAccessChecks",
        "source": "LongVariable"
      },
      {
        "line": 47,
        "column": 21,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 48,
        "column": 21,
        "type": "error",
        "message": "Avoid excessively long variable names like restrictiveManager",
        "source": "LongVariable"
      },
      {
        "line": 48,
        "column": 21,
        "type": "error",
        "message": "Local variable 'restrictiveManager' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 46,
        "type": "error",
        "message": "Parameter 'perm' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 73,
        "column": 52,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 75,
        "column": 40,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 80,
        "column": 41,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 80,
        "column": 41,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 108,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 109,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 14,
        "type": "error",
        "message": "Local variable 'internalClass' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java",
    "score": 1.5,
    "error_count": 17,
    "messages": [
      {
        "line": 3,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 4,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertNotNull'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 5,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertTrue'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 20,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 32,
        "column": 27,
        "type": "error",
        "message": "Local variable 'withSet' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 33,
        "column": 24,
        "type": "error",
        "message": "Local variable 'iterator' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 33,
        "column": 35,
        "type": "error",
        "message": "Access to field `collection` on foreign value `withSet` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 33,
        "column": 35,
        "type": "error",
        "message": "Call to `iterator` on foreign value `withSet.collection` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 36,
        "column": 21,
        "type": "error",
        "message": "Access to field `collection` on foreign value `withSet` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 37,
        "column": 14,
        "type": "error",
        "message": "Local variable 'first' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 37,
        "column": 22,
        "type": "error",
        "message": "Call to `next` on foreign value `iterator` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 38,
        "column": 14,
        "type": "error",
        "message": "Local variable 'second' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 38,
        "column": 23,
        "type": "error",
        "message": "Call to `next` on foreign value `iterator` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 44,
        "column": 3,
        "type": "error",
        "message": "Missing commented default access modifier on nested enum 'TestEnum'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 46,
        "column": 18,
        "type": "error",
        "message": "The class 'TestEnumSetCollection' might be a test class, but it contains no test cases.",
        "source": "TestClassWithoutTestCases"
      },
      {
        "line": 46,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/RuntimeTypeAdapterFactoryFunctionalTest.java",
    "score": 0.0,
    "error_count": 47,
    "messages": [
      {
        "line": 40,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 62,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Shape'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 63,
        "column": 21,
        "type": "error",
        "message": "Missing commented default access modifier on field 'type'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 64,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Shape(ShapeType)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 64,
        "column": 21,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Missing commented default access modifier on field 'radius'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 80,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Circle(int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 80,
        "column": 16,
        "type": "error",
        "message": "Parameter 'radius' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Missing commented default access modifier on field 'side'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 85,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Square(int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 85,
        "column": 16,
        "type": "error",
        "message": "Parameter 'side' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 89,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'RuntimeTypeAdapterFactory'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 95,
        "column": 50,
        "type": "error",
        "message": "Parameter 'baseType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 95,
        "column": 67,
        "type": "error",
        "message": "Parameter 'typeFieldName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 97,
        "column": 9,
        "type": "error",
        "message": "Avoid throwing null pointer exceptions.",
        "source": "AvoidThrowingNullPointerException"
      },
      {
        "line": 107,
        "column": 52,
        "type": "error",
        "message": "Avoid using short method names",
        "source": "ShortMethodName"
      },
      {
        "line": 107,
        "column": 64,
        "type": "error",
        "message": "Parameter 'baseType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 107,
        "column": 81,
        "type": "error",
        "message": "Parameter 'typeFieldName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 115,
        "column": 52,
        "type": "error",
        "message": "Avoid using short method names",
        "source": "ShortMethodName"
      },
      {
        "line": 115,
        "column": 64,
        "type": "error",
        "message": "Parameter 'baseType' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 126,
        "column": 76,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 126,
        "column": 89,
        "type": "error",
        "message": "Parameter 'label' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 128,
        "column": 9,
        "type": "error",
        "message": "Avoid throwing null pointer exceptions.",
        "source": "AvoidThrowingNullPointerException"
      },
      {
        "line": 145,
        "column": 76,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 149,
        "column": 53,
        "type": "error",
        "message": "Parameter 'gson' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 149,
        "column": 72,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 151,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 156,
        "column": 40,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 157,
        "column": 24,
        "type": "error",
        "message": "Local variable 'delegate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 162,
        "column": 29,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 163,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 163,
        "column": 44,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 164,
        "column": 23,
        "type": "error",
        "message": "Local variable 'jsonElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 165,
        "column": 23,
        "type": "error",
        "message": "Local variable 'labelJsonElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 170,
        "column": 18,
        "type": "error",
        "message": "Local variable 'label' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 172,
        "column": 26,
        "type": "error",
        "message": "Local variable 'delegate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 180,
        "column": 48,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 180,
        "column": 55,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 181,
        "column": 20,
        "type": "error",
        "message": "Local variable 'srcType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 182,
        "column": 18,
        "type": "error",
        "message": "Declaration of 'label' can be moved closer to its usages",
        "source": "PrematureDeclaration"
      },
      {
        "line": 182,
        "column": 18,
        "type": "error",
        "message": "Local variable 'label' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 184,
        "column": 26,
        "type": "error",
        "message": "Local variable 'delegate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 191,
        "column": 24,
        "type": "error",
        "message": "Local variable 'clone' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 193,
        "column": 49,
        "type": "error",
        "message": "Local variable 'e' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/SecurityTest.java",
    "score": 0.0,
    "error_count": 27,
    "messages": [
      {
        "line": 30,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 34,
        "column": 31,
        "type": "error",
        "message": "Avoid excessively long variable names like JSON_NON_EXECUTABLE_PREFIX",
        "source": "LongVariable"
      },
      {
        "line": 34,
        "column": 60,
        "type": "error",
        "message": "The String literal \")]}\\'\\n\" appears 4 times in this file; the first occurrence is on line 34",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 45,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 46,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 51,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 58,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 59,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 80,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/SerializedNameTest.java",
    "score": 0.0,
    "error_count": 20,
    "messages": [
      {
        "line": 23,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 26,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 26,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 27,
        "column": 13,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 32,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 32,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 32,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 47,
        "column": 36,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 47,
        "column": 36,
        "type": "error",
        "message": "Field 'a' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 47,
        "column": 36,
        "type": "error",
        "message": "Missing commented default access modifier on field 'a'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 48,
        "column": 73,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 48,
        "column": 73,
        "type": "error",
        "message": "Field 'b' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 48,
        "column": 73,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 49,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'MyClass(String, String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 49,
        "column": 20,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 49,
        "column": 20,
        "type": "error",
        "message": "Parameter 'a' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 49,
        "column": 30,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 49,
        "column": 30,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/StreamingTypeAdaptersTest.java",
    "score": 0.0,
    "error_count": 122,
    "messages": [
      {
        "line": 38,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 38,
        "column": 63,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 41,
        "column": 44,
        "type": "error",
        "message": "Field 'mapAdapter' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 42,
        "column": 42,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeToken<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 45,
        "column": 11,
        "type": "error",
        "message": "Local variable 'truck' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 46,
        "column": 5,
        "type": "error",
        "message": "Access to field `passengers` on foreign value `truck` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 46,
        "column": 49,
        "type": "error",
        "message": "The String literal \"Jesse\" appears 6 times in this file; the first occurrence is on line 46",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 46,
        "column": 74,
        "type": "error",
        "message": "The String literal \"Jodie\" appears 4 times in this file; the first occurrence is on line 46",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 55,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 11,
        "type": "error",
        "message": "Local variable 'truck' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 63,
        "column": 11,
        "type": "error",
        "message": "Local variable 'truck' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 5,
        "type": "error",
        "message": "Access to field `passengers` on foreign value `truck` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 64,
        "column": 24,
        "type": "error",
        "message": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "source": "NullAssignment"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 70,
        "column": 11,
        "type": "error",
        "message": "Local variable 'truck' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 75,
        "column": 11,
        "type": "error",
        "message": "Local variable 'truck' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 5,
        "type": "error",
        "message": "Access to field `passengers` on foreign value `truck` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 81,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 81,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 82,
        "column": 11,
        "type": "error",
        "message": "Local variable 'truck' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 86,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 88,
        "column": 11,
        "type": "error",
        "message": "Local variable 'truck' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 89,
        "column": 5,
        "type": "error",
        "message": "Access to field `passengers` on foreign value `truck` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 96,
        "column": 11,
        "type": "error",
        "message": "Local variable 'truck' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 25,
        "type": "error",
        "message": "Local variable 'personNameAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 60,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 102,
        "column": 47,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 102,
        "column": 47,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 103,
        "column": 16,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 106,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 106,
        "column": 58,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 115,
        "column": 25,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 121,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 122,
        "column": 25,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 129,
        "column": 27,
        "type": "error",
        "message": "Local variable 'arrayAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 129,
        "column": 75,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeToken<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 133,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 133,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 134,
        "column": 27,
        "type": "error",
        "message": "Local variable 'arrayAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 134,
        "column": 75,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeToken<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 135,
        "column": 14,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 139,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 139,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 140,
        "column": 29,
        "type": "error",
        "message": "Local variable 'arrayAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 140,
        "column": 77,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeToken<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 141,
        "column": 16,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 145,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 145,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 146,
        "column": 29,
        "type": "error",
        "message": "Local variable 'arrayAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 146,
        "column": 77,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeToken<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 147,
        "column": 16,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 148,
        "column": 16,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 152,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 152,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 152,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 153,
        "column": 25,
        "type": "error",
        "message": "Local variable 'typeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 153,
        "column": 54,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 154,
        "column": 47,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 154,
        "column": 47,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 155,
        "column": 18,
        "type": "error",
        "message": "Local variable 'values' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 158,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 158,
        "column": 58,
        "type": "error",
        "message": "Parameter 'person' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 166,
        "column": 5,
        "type": "error",
        "message": "Access to field `passengers` on foreign value `truck` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 167,
        "column": 5,
        "type": "error",
        "message": "Access to field `passengers` on foreign value `truck` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 168,
        "column": 5,
        "type": "error",
        "message": "Access to field `passengers` on foreign value `truck` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 169,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 172,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 172,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 173,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 174,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 183,
        "column": 16,
        "type": "error",
        "message": "Access to field `passengers` on foreign value `truck` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 184,
        "column": 27,
        "type": "error",
        "message": "Access to field `passengers` on foreign value `truck` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 184,
        "column": 27,
        "type": "error",
        "message": "Call to `get` on foreign value `truck.passengers` (degree 2)",
        "source": "LawOfDemeter"
      },
      {
        "line": 187,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 187,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 188,
        "column": 23,
        "type": "error",
        "message": "Local variable 'nodeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 189,
        "column": 10,
        "type": "error",
        "message": "Local variable 'root' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 190,
        "column": 5,
        "type": "error",
        "message": "Access to field `left` on foreign value `root` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 191,
        "column": 5,
        "type": "error",
        "message": "Access to field `right` on foreign value `root` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 198,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 198,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 198,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 199,
        "column": 16,
        "type": "error",
        "message": "Local variable 'truckObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 201,
        "column": 15,
        "type": "error",
        "message": "Local variable 'passengersArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 202,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jesseObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 208,
        "column": 11,
        "type": "error",
        "message": "Local variable 'truck' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 213,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Truck'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 214,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'horsePower'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 215,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'passengers'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 218,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Person'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 219,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'age'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 220,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 221,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Person(String, int)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 221,
        "column": 19,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 221,
        "column": 29,
        "type": "error",
        "message": "Parameter 'age' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 226,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 226,
        "column": 44,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 236,
        "column": 10,
        "type": "error",
        "message": "Avoid short class names like Node",
        "source": "ShortClassName"
      },
      {
        "line": 236,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Node'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 237,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'label'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 238,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on field 'left'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 239,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on field 'right'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 240,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Node(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 240,
        "column": 17,
        "type": "error",
        "message": "Parameter 'label' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/StringTest.java",
    "score": 0.0,
    "error_count": 76,
    "messages": [
      {
        "line": 13,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 13,
        "column": 42,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 22,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 22,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 23,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 27,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 27,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 28,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 29,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 33,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 33,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 34,
        "column": 12,
        "type": "error",
        "message": "Local variable 'valueWithQuotes' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 35,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like jsonRepresentation",
        "source": "LongVariable"
      },
      {
        "line": 35,
        "column": 12,
        "type": "error",
        "message": "Local variable 'jsonRepresentation' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 40,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 41,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 46,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 52,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 59,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 64,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 70,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 75,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 81,
        "column": 12,
        "type": "error",
        "message": "Local variable 'valueWithQuotes' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like jsonRepresentation",
        "source": "LongVariable"
      },
      {
        "line": 82,
        "column": 12,
        "type": "error",
        "message": "Local variable 'jsonRepresentation' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 12,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 88,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 89,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 95,
        "column": 14,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 100,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 101,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 111,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 112,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 130,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 131,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 135,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 135,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 136,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 137,
        "column": 12,
        "type": "error",
        "message": "Local variable 'value' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/ToNumberPolicyFunctionalTest.java",
    "score": 0.0,
    "error_count": 45,
    "messages": [
      {
        "line": 34,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 35,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 35,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 35,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 36,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 37,
        "column": 38,
        "type": "error",
        "message": "The String literal \"null\" appears 10 times in this file; the first occurrence is on line 37",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 43,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 44,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 55,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 66,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 38,
        "type": "error",
        "message": "The String literal \"10.0\" appears 6 times in this file; the first occurrence is on line 72",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 79,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 94,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 98,
        "column": 18,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 10,
        "type": "error",
        "message": "Avoid excessively long variable names like objectCollectionType",
        "source": "LongVariable"
      },
      {
        "line": 102,
        "column": 10,
        "type": "error",
        "message": "Local variable 'objectCollectionType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 24,
        "type": "error",
        "message": "Local variable 'objects' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 105,
        "column": 10,
        "type": "error",
        "message": "Avoid excessively long variable names like numberCollectionType",
        "source": "LongVariable"
      },
      {
        "line": 105,
        "column": 10,
        "type": "error",
        "message": "Local variable 'numberCollectionType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 106,
        "column": 24,
        "type": "error",
        "message": "Local variable 'numbers' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 110,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 111,
        "column": 22,
        "type": "error",
        "message": "Local variable 'fail' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 41,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 117,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 121,
        "column": 18,
        "type": "error",
        "message": "Local variable 'numbers' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 123,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 126,
        "column": 7,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      },
      {
        "line": 128,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 131,
        "column": 7,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java",
    "score": 0.0,
    "error_count": 46,
    "messages": [
      {
        "line": 39,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 44,
        "column": 29,
        "type": "error",
        "message": "Avoid excessively long variable names like TYPE_COURSE_HISTORY",
        "source": "LongVariable"
      },
      {
        "line": 58,
        "column": 23,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new Assignment<>(null, null)`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 62,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 68,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 68,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 69,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 27,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 23,
        "type": "error",
        "message": "Access to field `id` on foreign value `target.getStudents().get(0)` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 73,
        "column": 23,
        "type": "error",
        "message": "Access to field `id` on foreign value `target.getStudents().get(1)` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 74,
        "column": 23,
        "type": "error",
        "message": "Call to `getId` on foreign value `target` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 77,
        "column": 24,
        "type": "error",
        "message": "Avoid short class names like Id",
        "source": "ShortClassName"
      },
      {
        "line": 78,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 79,
        "column": 23,
        "type": "error",
        "message": "The String literal \"unused\" appears 5 times in this file; the first occurrence is on line 79",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 80,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'typeOfId'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 82,
        "column": 23,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 82,
        "column": 35,
        "type": "error",
        "message": "Parameter 'typeOfId' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 95,
        "column": 42,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 95,
        "column": 53,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 96,
        "column": 16,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 100,
        "column": 25,
        "type": "error",
        "message": "Local variable 'parameterizedType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 12,
        "type": "error",
        "message": "Local variable 'typeOfId' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 108,
        "column": 40,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 115,
        "column": 17,
        "type": "error",
        "message": "Avoid variables with short names like id",
        "source": "ShortVariable"
      },
      {
        "line": 115,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on field 'id'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 116,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 121,
        "column": 32,
        "type": "error",
        "message": "Avoid variables with short names like id",
        "source": "ShortVariable"
      },
      {
        "line": 121,
        "column": 32,
        "type": "error",
        "message": "Parameter 'id' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 121,
        "column": 43,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 129,
        "column": 25,
        "type": "error",
        "message": "Missing commented default access modifier on field 'students'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 135,
        "column": 40,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 138,
        "column": 33,
        "type": "error",
        "message": "Parameter 'courseId' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 138,
        "column": 47,
        "type": "error",
        "message": "Parameter 'numAssignments' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 139,
        "column": 23,
        "type": "error",
        "message": "Parameter 'assignment' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 139,
        "column": 49,
        "type": "error",
        "message": "Parameter 'players' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 148,
        "column": 19,
        "type": "error",
        "message": "Missing commented default access modifier on method 'getStudents()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 155,
        "column": 37,
        "type": "error",
        "message": "Avoid variables with short names like id",
        "source": "ShortVariable"
      },
      {
        "line": 161,
        "column": 41,
        "type": "error",
        "message": "Avoid variables with short names like id",
        "source": "ShortVariable"
      },
      {
        "line": 161,
        "column": 41,
        "type": "error",
        "message": "Parameter 'id' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 161,
        "column": 47,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 168,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 169,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'numClasses'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/TypeAdapterPrecedenceTest.java",
    "score": 0.0,
    "error_count": 52,
    "messages": [
      {
        "line": 34,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 34,
        "column": 63,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 35,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 35,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 35,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 36,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 66,
        "type": "error",
        "message": "The String literal \"foo\" appears 16 times in this file; the first occurrence is on line 42",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 47,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 56,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 55,
        "type": "error",
        "message": "The String literal \"serializer\" appears 5 times in this file; the first occurrence is on line 57",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 58,
        "column": 57,
        "type": "error",
        "message": "The String literal \"deserializer\" appears 5 times in this file; the first occurrence is on line 58",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 59,
        "column": 56,
        "type": "error",
        "message": "The String literal \"type adapter\" appears 5 times in this file; the first occurrence is on line 59",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 66,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 76,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 85,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 85,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 85,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 86,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 95,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 96,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 105,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 105,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 105,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 106,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like Foo",
        "source": "ShortClassName"
      },
      {
        "line": 116,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 117,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 118,
        "column": 24,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 124,
        "column": 30,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new JsonSerializer<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 126,
        "column": 40,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 127,
        "column": 45,
        "type": "error",
        "message": "The String literal \" via \" appears 4 times in this file; the first occurrence is on line 127",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 133,
        "column": 32,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new JsonDeserializer<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 135,
        "column": 42,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 142,
        "column": 27,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeAdapter<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 143,
        "column": 44,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 143,
        "column": 44,
        "type": "error",
        "message": "Parameter 'in' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 146,
        "column": 46,
        "type": "error",
        "message": "Parameter 'out' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 146,
        "column": 55,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/TypeHierarchyAdapterTest.java",
    "score": 0.0,
    "error_count": 72,
    "messages": [
      {
        "line": 35,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 37,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 37,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 37,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 38,
        "column": 13,
        "type": "error",
        "message": "Local variable 'andy' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 41,
        "column": 5,
        "type": "error",
        "message": "Access to field `minions` on foreign value `andy` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 47,
        "column": 9,
        "type": "error",
        "message": "Local variable 'eric' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 5,
        "type": "error",
        "message": "Access to field `assistant` on foreign value `eric` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 52,
        "column": 5,
        "type": "error",
        "message": "Access to field `minions` on foreign value `eric` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 58,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 13,
        "type": "error",
        "message": "Local variable 'company' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 5,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `company` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 66,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 106,
        "column": 13,
        "type": "error",
        "message": "Local variable 'copied' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 108,
        "column": 18,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `copied` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 108,
        "column": 37,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `company` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 109,
        "column": 18,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `copied` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 109,
        "column": 47,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `company` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 110,
        "column": 18,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `copied` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 110,
        "column": 48,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `company` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 111,
        "column": 18,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `copied` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 111,
        "column": 48,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `company` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 112,
        "column": 18,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `copied` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 112,
        "column": 48,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `company` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 113,
        "column": 18,
        "type": "error",
        "message": "Access to field `minions` on foreign value `(Manager) copied.ceo.minions[2]` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 113,
        "column": 29,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `copied` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 114,
        "column": 9,
        "type": "error",
        "message": "Access to field `minions` on foreign value `(Manager) company.ceo.minions[2]` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 114,
        "column": 20,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `company` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 115,
        "column": 18,
        "type": "error",
        "message": "Access to field `minions` on foreign value `(Manager) copied.ceo.minions[2]` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 115,
        "column": 29,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `copied` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 116,
        "column": 9,
        "type": "error",
        "message": "Access to field `minions` on foreign value `(Manager) company.ceo.minions[2]` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 116,
        "column": 20,
        "type": "error",
        "message": "Access to field `ceo` on foreign value `company` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 119,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 120,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 125,
        "column": 13,
        "type": "error",
        "message": "Local variable 'manager' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 128,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 130,
        "column": 13,
        "type": "error",
        "message": "Local variable 'copied' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 135,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 135,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 135,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 142,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'ManagerAdapter'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 143,
        "column": 54,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 144,
        "column": 15,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 148,
        "column": 52,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 153,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'EmployeeAdapter'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 154,
        "column": 53,
        "type": "error",
        "message": "Parameter 'employee' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 155,
        "column": 34,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 156,
        "column": 18,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 168,
        "column": 55,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 169,
        "column": 36,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 169,
        "column": 52,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 170,
        "column": 18,
        "type": "error",
        "message": "Local variable 'object' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 174,
        "column": 19,
        "type": "error",
        "message": "Local variable 'assistant' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 177,
        "column": 9,
        "type": "error",
        "message": "Access to field `assistant` on foreign value `(CEO) result` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 181,
        "column": 19,
        "type": "error",
        "message": "Local variable 'minons' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 186,
        "column": 9,
        "type": "error",
        "message": "Access to field `minions` on foreign value `(Manager) result` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 198,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Employee'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 199,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'userid'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 200,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on field 'startDate'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 202,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Employee(String, long)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 202,
        "column": 21,
        "type": "error",
        "message": "Parameter 'userid' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 202,
        "column": 34,
        "type": "error",
        "message": "Parameter 'startDate' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 207,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Employee()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 210,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Manager'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 211,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'minions'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 214,
        "column": 10,
        "type": "error",
        "message": "Avoid short class names like CEO",
        "source": "ShortClassName"
      },
      {
        "line": 214,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'CEO'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 215,
        "column": 14,
        "type": "error",
        "message": "Missing commented default access modifier on field 'assistant'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 218,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Company'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 219,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'ceo'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/TypeVariableTest.java",
    "score": 0.0,
    "error_count": 52,
    "messages": [
      {
        "line": 34,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 37,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 38,
        "column": 9,
        "type": "error",
        "message": "Local variable 'bar1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 39,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'ArrayList'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 39,
        "column": 24,
        "type": "error",
        "message": "Local variable 'arrayList' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 43,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `bar1` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 44,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `bar1` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 44,
        "column": 39,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new ArrayList<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 45,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 9,
        "type": "error",
        "message": "Local variable 'bar2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 52,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 26,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 5,
        "type": "error",
        "message": "Access to field `map` on foreign value `original` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 55,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 63,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 10,
        "type": "error",
        "message": "Local variable 'blue1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 10,
        "type": "error",
        "message": "Local variable 'blue2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 17,
        "type": "error",
        "message": "Avoid short class names like Blue",
        "source": "ShortClassName"
      },
      {
        "line": 77,
        "column": 25,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 82,
        "column": 20,
        "type": "error",
        "message": "Ensure you override both equals() and hashCode()",
        "source": "OverrideBothEqualsAndHashcode"
      },
      {
        "line": 82,
        "column": 34,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 82,
        "column": 34,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 84,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 86,
        "column": 12,
        "type": "error",
        "message": "Local variable 'blue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 17,
        "type": "error",
        "message": "Avoid short class names like Red",
        "source": "ShortClassName"
      },
      {
        "line": 96,
        "column": 18,
        "type": "error",
        "message": "Parameter 'redField' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 102,
        "column": 17,
        "type": "error",
        "message": "Avoid short class names like Foo",
        "source": "ShortClassName"
      },
      {
        "line": 107,
        "column": 12,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 109,
        "column": 18,
        "type": "error",
        "message": "Parameter 'sValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 109,
        "column": 28,
        "type": "error",
        "message": "Parameter 'tValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 109,
        "column": 44,
        "type": "error",
        "message": "Parameter 'redField' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 117,
        "column": 20,
        "type": "error",
        "message": "Ensure you override both equals() and hashCode()",
        "source": "OverrideBothEqualsAndHashcode"
      },
      {
        "line": 117,
        "column": 34,
        "type": "error",
        "message": "Avoid variables with short names like o",
        "source": "ShortVariable"
      },
      {
        "line": 117,
        "column": 34,
        "type": "error",
        "message": "Parameter 'o' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 119,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 121,
        "column": 17,
        "type": "error",
        "message": "Local variable 'realFoo' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 129,
        "column": 17,
        "type": "error",
        "message": "Avoid short class names like Bar",
        "source": "ShortClassName"
      },
      {
        "line": 134,
        "column": 23,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 134,
        "column": 23,
        "type": "error",
        "message": "Parameter 's' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 134,
        "column": 34,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 134,
        "column": 34,
        "type": "error",
        "message": "Parameter 'i' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 134,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 134,
        "column": 45,
        "type": "error",
        "message": "Parameter 'b' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/UncategorizedTest.java",
    "score": 0.0,
    "error_count": 39,
    "messages": [
      {
        "line": 40,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 50,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 51,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 56,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 63,
        "column": 27,
        "type": "error",
        "message": "Local variable 'objA' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 27,
        "type": "error",
        "message": "Local variable 'objB' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 5,
        "type": "error",
        "message": "Access to field `ref` on foreign value `objB` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 66,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 70,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 71,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 76,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bag' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 21,
        "type": "error",
        "message": "Local variable 'deserialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 87,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 88,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 104,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 104,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 105,
        "column": 19,
        "type": "error",
        "message": "Local variable 'integers' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like Base",
        "source": "ShortClassName"
      },
      {
        "line": 112,
        "column": 19,
        "type": "error",
        "message": "Missing commented default access modifier on field 'opType'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 115,
        "column": 5,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 115,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Derived1()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 118,
        "column": 5,
        "type": "error",
        "message": "It is a good practice to call super() in a constructor",
        "source": "CallSuperInConstructor"
      },
      {
        "line": 118,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Derived2()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 120,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 121,
        "column": 51,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 122,
        "column": 16,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 123,
        "column": 14,
        "type": "error",
        "message": "Local variable 'opTypeStr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 124,
        "column": 21,
        "type": "error",
        "message": "Local variable 'opType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 127,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/functional/VersioningTest.java",
    "score": 0.0,
    "error_count": 65,
    "messages": [
      {
        "line": 18,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 19,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertFalse'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 20,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertNull'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 21,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertTrue'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 36,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 36,
        "column": 29,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 37,
        "column": 28,
        "type": "error",
        "message": "Avoid variables with short names like A",
        "source": "ShortVariable"
      },
      {
        "line": 38,
        "column": 28,
        "type": "error",
        "message": "Avoid variables with short names like B",
        "source": "ShortVariable"
      },
      {
        "line": 39,
        "column": 28,
        "type": "error",
        "message": "Avoid variables with short names like C",
        "source": "ShortVariable"
      },
      {
        "line": 40,
        "column": 28,
        "type": "error",
        "message": "Avoid variables with short names like D",
        "source": "ShortVariable"
      },
      {
        "line": 42,
        "column": 46,
        "type": "error",
        "message": "Parameter 'version' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 48,
        "column": 14,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 64,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 89,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 14,
        "type": "error",
        "message": "Local variable 'version1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 16,
        "type": "error",
        "message": "Local variable 'version1_1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 16,
        "type": "error",
        "message": "The local variable name 'version1_1' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "LocalVariableNamingConventions"
      },
      {
        "line": 102,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 108,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 16,
        "type": "error",
        "message": "Local variable 'version1_2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 16,
        "type": "error",
        "message": "The local variable name 'version1_2' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "LocalVariableNamingConventions"
      },
      {
        "line": 118,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 119,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 125,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 128,
        "column": 21,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 129,
        "column": 5,
        "type": "error",
        "message": "Access to field `longValue` on foreign value `expected` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 130,
        "column": 5,
        "type": "error",
        "message": "Access to field `intValue` on foreign value `expected` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 131,
        "column": 5,
        "type": "error",
        "message": "Access to field `booleanValue` on foreign value `expected` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 132,
        "column": 21,
        "type": "error",
        "message": "Local variable 'actual' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 137,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 139,
        "column": 22,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 141,
        "column": 31,
        "type": "error",
        "message": "The String literal \"\\\"b\\\":\" appears 4 times in this file; the first occurrence is on line 141",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 157,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 158,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 181,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 181,
        "column": 21,
        "type": "error",
        "message": "Field 'a' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 181,
        "column": 21,
        "type": "error",
        "message": "Missing commented default access modifier on field 'a'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 182,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 182,
        "column": 21,
        "type": "error",
        "message": "Field 'b' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 182,
        "column": 21,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 185,
        "column": 18,
        "type": "error",
        "message": "The class name 'Version1_1' doesn't match '[A-Z][a-zA-Z0-9]*'",
        "source": "ClassNamingConventions"
      },
      {
        "line": 186,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 186,
        "column": 21,
        "type": "error",
        "message": "Field 'c' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 186,
        "column": 21,
        "type": "error",
        "message": "Missing commented default access modifier on field 'c'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 190,
        "column": 18,
        "type": "error",
        "message": "The class name 'Version1_2' doesn't match '[A-Z][a-zA-Z0-9]*'",
        "source": "ClassNamingConventions"
      },
      {
        "line": 190,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 192,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like d",
        "source": "ShortVariable"
      },
      {
        "line": 192,
        "column": 9,
        "type": "error",
        "message": "Field 'd' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 192,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'd'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 195,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 196,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 196,
        "column": 9,
        "type": "error",
        "message": "Field 'a' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 196,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'a'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 200,
        "column": 9,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 200,
        "column": 9,
        "type": "error",
        "message": "Field 'b' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 200,
        "column": 9,
        "type": "error",
        "message": "Missing commented default access modifier on field 'b'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/ConstructorConstructorTest.java",
    "score": 3.0,
    "error_count": 14,
    "messages": [
      {
        "line": 3,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 4,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.fail'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 13,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 14,
        "column": 34,
        "type": "error",
        "message": "Avoid excessively long variable names like constructorConstructor",
        "source": "LongVariable"
      },
      {
        "line": 14,
        "column": 34,
        "type": "error",
        "message": "Field 'constructorConstructor' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 19,
        "column": 27,
        "type": "error",
        "message": "This abstract class does not have any abstract methods",
        "source": "AbstractClassWithoutAbstractMethod"
      },
      {
        "line": 30,
        "column": 15,
        "type": "error",
        "message": "The JUnit 4 test method name 'testGet_AbstractClassNoArgConstructor' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 30,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 31,
        "column": 38,
        "type": "error",
        "message": "Local variable 'constructor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 35,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "The JUnit 4 test method name 'testGet_Interface' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 46,
        "column": 34,
        "type": "error",
        "message": "Local variable 'constructor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/GsonBuildConfigTest.java",
    "score": 9.0,
    "error_count": 2,
    "messages": [
      {
        "line": 18,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertFalse'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 27,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/GsonTypesTest.java",
    "score": 0.0,
    "error_count": 23,
    "messages": [
      {
        "line": 25,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 27,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 27,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 27,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 36,
        "column": 11,
        "type": "error",
        "message": "Avoid short class names like D",
        "source": "ShortClassName"
      },
      {
        "line": 36,
        "column": 11,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 38,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 49,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 49,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 49,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 52,
        "column": 10,
        "type": "error",
        "message": "Local variable 'type' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 24,
        "type": "error",
        "message": "Avoid short class names like A",
        "source": "ShortClassName"
      },
      {
        "line": 58,
        "column": 24,
        "type": "error",
        "message": "Avoid short class names like B",
        "source": "ShortClassName"
      },
      {
        "line": 60,
        "column": 24,
        "type": "error",
        "message": "Avoid short class names like C",
        "source": "ShortClassName"
      },
      {
        "line": 67,
        "column": 48,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 67,
        "column": 54,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 68,
        "column": 47,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 68,
        "column": 47,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 69,
        "column": 23,
        "type": "error",
        "message": "Local variable 'ptype' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 12,
        "type": "error",
        "message": "Avoid excessively long variable names like actualTypeArguments",
        "source": "LongVariable"
      },
      {
        "line": 70,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actualTypeArguments' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 42,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 71,
        "column": 42,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/JavaVersionTest.java",
    "score": 7.5,
    "error_count": 5,
    "messages": [
      {
        "line": 18,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 19,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertTrue'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 28,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 60,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/LazilyParsedNumberTest.java",
    "score": 1.5,
    "error_count": 17,
    "messages": [
      {
        "line": 27,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 28,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 28,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 29,
        "column": 24,
        "type": "error",
        "message": "Avoid variables with short names like n1",
        "source": "ShortVariable"
      },
      {
        "line": 29,
        "column": 24,
        "type": "error",
        "message": "Local variable 'n1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 30,
        "column": 24,
        "type": "error",
        "message": "Local variable 'n1Another' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 35,
        "column": 24,
        "type": "error",
        "message": "Avoid variables with short names like n1",
        "source": "ShortVariable"
      },
      {
        "line": 35,
        "column": 24,
        "type": "error",
        "message": "Local variable 'n1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 36,
        "column": 24,
        "type": "error",
        "message": "Local variable 'n1Another' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 41,
        "column": 27,
        "type": "error",
        "message": "Local variable 'out' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 24,
        "type": "error",
        "message": "Local variable 'objOut' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 46,
        "column": 23,
        "type": "error",
        "message": "Local variable 'objIn' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 12,
        "type": "error",
        "message": "Local variable 'deserialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java",
    "score": 0.0,
    "error_count": 107,
    "messages": [
      {
        "line": 34,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 34,
        "column": 55,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 36,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 37,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 37,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 38,
        "column": 18,
        "type": "error",
        "message": "The String literal \"android\" appears 8 times in this file; the first occurrence is on line 38",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 39,
        "column": 18,
        "type": "error",
        "message": "The String literal \"cola\" appears 4 times in this file; the first occurrence is on line 39",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 40,
        "column": 18,
        "type": "error",
        "message": "The String literal \"bbq\" appears 4 times in this file; the first occurrence is on line 40",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 45,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 46,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 46,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 40,
        "type": "error",
        "message": "Avoid variables with short names like it",
        "source": "ShortVariable"
      },
      {
        "line": 50,
        "column": 40,
        "type": "error",
        "message": "Local variable 'it' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 58,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 59,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 59,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 60,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 63,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 63,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 68,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 76,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 76,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testPutNullValue_Forbidden' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 85,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 85,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 89,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 89,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 97,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 97,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 97,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 98,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 98,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 27,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 113,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testEntrySetValueNull_Forbidden' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 113,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 113,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 114,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 114,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 27,
        "type": "error",
        "message": "Local variable 'entry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 120,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 120,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 128,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 129,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 129,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 134,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 134,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 134,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 135,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 135,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 142,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 142,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 154,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 154,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 160,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 160,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 160,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 161,
        "column": 12,
        "type": "error",
        "message": "Local variable 'random' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 161,
        "column": 32,
        "type": "error",
        "message": "Number 1367593214724L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 162,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 162,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 163,
        "column": 14,
        "type": "error",
        "message": "Local variable 'keys' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 170,
        "column": 14,
        "type": "error",
        "message": "Local variable 'key' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 176,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 176,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 176,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 177,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 177,
        "column": 35,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 186,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 186,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 187,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 187,
        "column": 36,
        "type": "error",
        "message": "Local variable 'map1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 193,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'LinkedTreeMap'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 193,
        "column": 36,
        "type": "error",
        "message": "Local variable 'map2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 202,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 202,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 203,
        "column": 27,
        "type": "error",
        "message": "Local variable 'out' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 204,
        "column": 24,
        "type": "error",
        "message": "Local variable 'objOut' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 205,
        "column": 26,
        "type": "error",
        "message": "Local variable 'map' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 210,
        "column": 23,
        "type": "error",
        "message": "Local variable 'objIn' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 212,
        "column": 26,
        "type": "error",
        "message": "Local variable 'deserialized' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 218,
        "column": 59,
        "type": "error",
        "message": "Parameter 'actual' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 218,
        "column": 72,
        "type": "error",
        "message": "Parameter 'expected' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 219,
        "column": 5,
        "type": "error",
        "message": "Avoid using implementation types like 'ArrayList'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 219,
        "column": 18,
        "type": "error",
        "message": "Local variable 'actualList' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 220,
        "column": 12,
        "type": "error",
        "message": "Local variable 't' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/StreamsTest.java",
    "score": 0.0,
    "error_count": 24,
    "messages": [
      {
        "line": 3,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 4,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.fail'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 10,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 12,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 13,
        "column": 19,
        "type": "error",
        "message": "Local variable 'stringBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 14,
        "column": 12,
        "type": "error",
        "message": "Ensure that resources like this Writer object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 14,
        "column": 12,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 31,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 34,
        "column": 7,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      },
      {
        "line": 34,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 34,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 38,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 41,
        "column": 7,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      },
      {
        "line": 41,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 41,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 46,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 49,
        "column": 7,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      },
      {
        "line": 49,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 49,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 53,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 56,
        "column": 7,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      },
      {
        "line": 56,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 56,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 59,
        "column": 12,
        "type": "error",
        "message": "Local variable 'actualOutput' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/UnsafeAllocatorInstantiationTest.java",
    "score": 4.0,
    "error_count": 12,
    "messages": [
      {
        "line": 24,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 29,
        "column": 26,
        "type": "error",
        "message": "No abstract method which means that the keyword is most likely used to prevent instantiation. Use a private or protected constructor instead.",
        "source": "AbstractClassWithoutAnyMethod"
      },
      {
        "line": 29,
        "column": 26,
        "type": "error",
        "message": "This abstract class does not have any abstract methods",
        "source": "AbstractClassWithoutAbstractMethod"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 39,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 64,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 65,
        "column": 19,
        "type": "error",
        "message": "Local variable 'instance' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/bind/DefaultDateTypeAdapterTest.java",
    "score": 0.0,
    "error_count": 71,
    "messages": [
      {
        "line": 38,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 38,
        "column": 58,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 44,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 48,
        "column": 59,
        "type": "error",
        "message": "Parameter 'locale' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 49,
        "column": 14,
        "type": "error",
        "message": "Local variable 'defaultTimeZone' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 50,
        "column": 46,
        "type": "error",
        "message": "The String literal \"UTC\" appears 4 times in this file; the first occurrence is on line 50",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 51,
        "column": 12,
        "type": "error",
        "message": "Local variable 'defaultLocale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 14,
        "type": "error",
        "message": "Local variable 'afterYearSep' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 14,
        "type": "error",
        "message": "Local variable 'afterYearLongSep' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 14,
        "type": "error",
        "message": "Local variable 'utcFull' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 78,
        "column": 46,
        "type": "error",
        "message": "Avoid using literals in if statements",
        "source": "AvoidLiteralsInIfCondition"
      },
      {
        "line": 81,
        "column": 14,
        "type": "error",
        "message": "Local variable 'defaultTimeZone' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 83,
        "column": 12,
        "type": "error",
        "message": "Local variable 'defaultLocale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 14,
        "type": "error",
        "message": "Local variable 'afterYearSep' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 109,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 109,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 110,
        "column": 14,
        "type": "error",
        "message": "Local variable 'defaultTimeZone' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 112,
        "column": 12,
        "type": "error",
        "message": "Local variable 'defaultLocale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 133,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 133,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 133,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 134,
        "column": 14,
        "type": "error",
        "message": "Local variable 'defaultTimeZone' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 136,
        "column": 12,
        "type": "error",
        "message": "Local variable 'defaultLocale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 139,
        "column": 14,
        "type": "error",
        "message": "Local variable 'afterYearSep' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 149,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 149,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 150,
        "column": 24,
        "type": "error",
        "message": "Local variable 'adapterFactory' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 158,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 158,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 159,
        "column": 9,
        "type": "error",
        "message": "Local variable 'dateStyle' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 160,
        "column": 23,
        "type": "error",
        "message": "Local variable 'dateTypeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 161,
        "column": 16,
        "type": "error",
        "message": "Local variable 'formatter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 162,
        "column": 10,
        "type": "error",
        "message": "Local variable 'currentDate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 164,
        "column": 12,
        "type": "error",
        "message": "Local variable 'dateString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 168,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 168,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 169,
        "column": 12,
        "type": "error",
        "message": "Local variable 'pattern' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 170,
        "column": 23,
        "type": "error",
        "message": "Local variable 'dateTypeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 171,
        "column": 16,
        "type": "error",
        "message": "Local variable 'formatter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 171,
        "column": 28,
        "type": "error",
        "message": "When instantiating a SimpleDateFormat object, specify a Locale",
        "source": "SimpleDateFormatNeedsLocale"
      },
      {
        "line": 172,
        "column": 10,
        "type": "error",
        "message": "Local variable 'currentDate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 174,
        "column": 12,
        "type": "error",
        "message": "Local variable 'dateString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 178,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 178,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 179,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 185,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 185,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 185,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 186,
        "column": 23,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 191,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 191,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 192,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 193,
        "column": 25,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 199,
        "column": 67,
        "type": "error",
        "message": "Parameter 'adapterFactory' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 200,
        "column": 23,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 205,
        "column": 46,
        "type": "error",
        "message": "Parameter 'formatted' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 205,
        "column": 76,
        "type": "error",
        "message": "Parameter 'adapterFactory' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 206,
        "column": 23,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 210,
        "column": 43,
        "type": "error",
        "message": "Parameter 'date' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 210,
        "column": 68,
        "type": "error",
        "message": "Parameter 'adapterFactory' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 211,
        "column": 23,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 216,
        "column": 42,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 216,
        "column": 42,
        "type": "error",
        "message": "Parameter 's' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/bind/JsonElementReaderTest.java",
    "score": 0.0,
    "error_count": 131,
    "messages": [
      {
        "line": 28,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 28,
        "column": 59,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 30,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 30,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 30,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 31,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 32,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 32,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 41,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 42,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 51,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 52,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 53,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 80,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 81,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 82,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 91,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 92,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 92,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 98,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 98,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 98,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 99,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 100,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 108,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 109,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 116,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 116,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 117,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 118,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 125,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 125,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 125,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 126,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 127,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 127,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 141,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 142,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 143,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 143,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 159,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 159,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 159,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 160,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 161,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 161,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 166,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 166,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 166,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 167,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 168,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 168,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 179,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 180,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 181,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 181,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 195,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 195,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 195,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 196,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 197,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 197,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 202,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 202,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 202,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 203,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 204,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 204,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 215,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 215,
        "column": 15,
        "type": "error",
        "message": "The method 'testWrongType()' has a cognitive complexity of 16, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 215,
        "column": 15,
        "type": "error",
        "message": "The method 'testWrongType()' has a cyclomatic complexity of 17.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 215,
        "column": 15,
        "type": "error",
        "message": "The method 'testWrongType()' has an NPath complexity of 65536, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 215,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 215,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 216,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 217,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 217,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 219,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 224,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 229,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 234,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 239,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 244,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 249,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 254,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 259,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 264,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 272,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 277,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 282,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 287,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 292,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 297,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 306,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 306,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 306,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 308,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 308,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 310,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 319,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 327,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 334,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 341,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 341,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 342,
        "column": 17,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 343,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 343,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 346,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java",
    "score": 0.0,
    "error_count": 31,
    "messages": [
      {
        "line": 33,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testSkipValue_emptyJsonObject' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 35,
        "column": 20,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 35,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 35,
        "column": 20,
        "type": "error",
        "message": "Local variable 'in' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testSkipValue_filledJsonObject' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 41,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 15,
        "type": "error",
        "message": "Local variable 'jsonArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonObject2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 20,
        "type": "error",
        "message": "Avoid variables with short names like in",
        "source": "ShortVariable"
      },
      {
        "line": 53,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 53,
        "column": 20,
        "type": "error",
        "message": "Local variable 'in' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 58,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testHasNext_endOfDocument' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 58,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 59,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 59,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 65,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 67,
        "column": 5,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 74,
        "column": 15,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 77,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 95,
        "column": 18,
        "type": "error",
        "message": "Local variable 'ignoredMethods' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java",
    "score": 0.0,
    "error_count": 104,
    "messages": [
      {
        "line": 30,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 30,
        "column": 56,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 31,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 32,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 32,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 42,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 42,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 55,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 55,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 64,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 64,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 79,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 80,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 80,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 94,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 94,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 97,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 104,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 104,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 105,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 105,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 115,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 115,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 124,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 124,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 125,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 125,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 129,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 130,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 130,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 134,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 134,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 135,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 135,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 139,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 139,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 140,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 140,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 141,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like n",
        "source": "ShortVariable"
      },
      {
        "line": 141,
        "column": 12,
        "type": "error",
        "message": "Local variable 'n' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 145,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 145,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 146,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 146,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 147,
        "column": 13,
        "type": "error",
        "message": "Local variable 'bool' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 151,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 151,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 152,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 152,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 153,
        "column": 13,
        "type": "error",
        "message": "Local variable 'bool' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 157,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 157,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 158,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 158,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 171,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 171,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 171,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 172,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 172,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 175,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 180,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 185,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 190,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 195,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 200,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 207,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 208,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 208,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 211,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 212,
        "column": 20,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 216,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 217,
        "column": 20,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 221,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 222,
        "column": 20,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 226,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 227,
        "column": 20,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 231,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 232,
        "column": 20,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 236,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 237,
        "column": 20,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 243,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 243,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 244,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this JsonTreeWriter object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 244,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 246,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 258,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 258,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 259,
        "column": 18,
        "type": "error",
        "message": "Local variable 'ignoredMethods' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java",
    "score": 0.0,
    "error_count": 29,
    "messages": [
      {
        "line": 32,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 34,
        "column": 21,
        "type": "error",
        "message": "The String literal \"unused\" appears 4 times in this file; the first occurrence is on line 34",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 35,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like Foo1",
        "source": "ShortClassName"
      },
      {
        "line": 35,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 39,
        "column": 18,
        "type": "error",
        "message": "Avoid short class names like Foo2",
        "source": "ShortClassName"
      },
      {
        "line": 39,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 49,
        "column": 23,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 82,
        "column": 18,
        "type": "error",
        "message": "The class 'TestType' might be a test class, but it contains no test cases.",
        "source": "TestClassWithoutTestCases"
      },
      {
        "line": 82,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 83,
        "column": 25,
        "type": "error",
        "message": "Missing commented default access modifier on field 'superType'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 87,
        "column": 18,
        "type": "error",
        "message": "The class 'TestType2' might be a test class, but it contains no test cases.",
        "source": "TestClassWithoutTestCases"
      },
      {
        "line": 87,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 88,
        "column": 37,
        "type": "error",
        "message": "Missing commented default access modifier on field 'superReversedType'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 91,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 91,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 93,
        "column": 27,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 97,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 97,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 99,
        "column": 28,
        "type": "error",
        "message": "Local variable 'adapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java",
    "score": 0.0,
    "error_count": 36,
    "messages": [
      {
        "line": 3,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 4,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertThrows'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 5,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.fail'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 17,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 17,
        "column": 31,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 24,
        "column": 18,
        "type": "error",
        "message": "Local variable 'utc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 25,
        "column": 27,
        "type": "error",
        "message": "Local variable 'calendar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 33,
        "column": 27,
        "type": "error",
        "message": "Local variable 'calendar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 37,
        "column": 14,
        "type": "error",
        "message": "Local variable 'date' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 38,
        "column": 16,
        "type": "error",
        "message": "Local variable 'dateStr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 39,
        "column": 16,
        "type": "error",
        "message": "Local variable 'expectedDate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 14,
        "type": "error",
        "message": "Local variable 'time' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 45,
        "column": 21,
        "type": "error",
        "message": "Number 1530209176870L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 46,
        "column": 14,
        "type": "error",
        "message": "Local variable 'date' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 16,
        "type": "error",
        "message": "Local variable 'dateStr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 48,
        "column": 16,
        "type": "error",
        "message": "Local variable 'expectedDate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 14,
        "type": "error",
        "message": "Local variable 'time' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 21,
        "type": "error",
        "message": "Number 1530209176870L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 55,
        "column": 14,
        "type": "error",
        "message": "Local variable 'date' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 16,
        "type": "error",
        "message": "Local variable 'dateStr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 57,
        "column": 16,
        "type": "error",
        "message": "Local variable 'expectedDate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 16,
        "type": "error",
        "message": "Local variable 'dateStr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 14,
        "type": "error",
        "message": "Local variable 'date' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 14,
        "type": "error",
        "message": "Local variable 'expectedDate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 14,
        "type": "error",
        "message": "Local variable 'dateStr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 7,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 81,
        "column": 14,
        "type": "error",
        "message": "Local variable 'dateStr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 7,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 91,
        "column": 16,
        "type": "error",
        "message": "Local variable 'dateStr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 92,
        "column": 14,
        "type": "error",
        "message": "Local variable 'date' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 93,
        "column": 27,
        "type": "error",
        "message": "Local variable 'calendar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 95,
        "column": 14,
        "type": "error",
        "message": "Local variable 'expectedDate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 16,
        "type": "error",
        "message": "Local variable 'dateStr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 14,
        "type": "error",
        "message": "Local variable 'date' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 27,
        "type": "error",
        "message": "Local variable 'calendar' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 105,
        "column": 14,
        "type": "error",
        "message": "Local variable 'expectedDate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/sql/SqlTypesGsonTest.java",
    "score": 0.0,
    "error_count": 61,
    "messages": [
      {
        "line": 16,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 16,
        "column": 48,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 44,
        "column": 65,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 44,
        "column": 65,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 48,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 49,
        "column": 5,
        "type": "error",
        "message": "Unnecessary qualifier 'java.sql': 'Date' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 49,
        "column": 19,
        "type": "error",
        "message": "Local variable 'instant' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 33,
        "type": "error",
        "message": "Unnecessary qualifier 'java.sql': 'Date' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 49,
        "column": 47,
        "type": "error",
        "message": "Number 1259875082000L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 50,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 54,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 55,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 5,
        "type": "error",
        "message": "Unnecessary qualifier 'java.sql': 'Date' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 56,
        "column": 19,
        "type": "error",
        "message": "Local variable 'extracted' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 51,
        "type": "error",
        "message": "Unnecessary qualifier 'java.sql': 'Date' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 62,
        "column": 14,
        "type": "error",
        "message": "Local variable 'defaultTimeZone' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 12,
        "type": "error",
        "message": "Local variable 'defaultLocale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 7,
        "type": "error",
        "message": "Unnecessary qualifier 'java.sql': 'Date' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 67,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sqlDate' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 35,
        "type": "error",
        "message": "Unnecessary qualifier 'java.sql': 'Date' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 68,
        "column": 12,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 14,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 20,
        "type": "error",
        "message": "The String literal \"\\\"1970-01-01\\\"\" appears 4 times in this file; the first occurrence is on line 70",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 71,
        "column": 55,
        "type": "error",
        "message": "Unnecessary qualifier 'java.sql': 'Date' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 78,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 79,
        "column": 10,
        "type": "error",
        "message": "Local variable 'now' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 79,
        "column": 25,
        "type": "error",
        "message": "Number 1259875082000L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 80,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 85,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 10,
        "type": "error",
        "message": "Local variable 'extracted' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 90,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 91,
        "column": 15,
        "type": "error",
        "message": "Local variable 'now' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 91,
        "column": 25,
        "type": "error",
        "message": "Unnecessary qualifier 'java.sql': 'Timestamp' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 91,
        "column": 44,
        "type": "error",
        "message": "Number 1259875082000L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 92,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 100,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 100,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 101,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 102,
        "column": 15,
        "type": "error",
        "message": "Local variable 'extracted' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 108,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 108,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 108,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 109,
        "column": 14,
        "type": "error",
        "message": "Local variable 'defaultTimeZone' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 12,
        "type": "error",
        "message": "Local variable 'defaultLocale' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 17,
        "type": "error",
        "message": "Local variable 'timestamp' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 12,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 14,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/internal/sql/SqlTypesSupportTest.java",
    "score": 8.0,
    "error_count": 4,
    "messages": [
      {
        "line": 5,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 6,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 6,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 6,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/metrics/PerformanceTest.java",
    "score": 0.0,
    "error_count": 143,
    "messages": [
      {
        "line": 40,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 40,
        "column": 47,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 53,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 57,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testStringDeserialization' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 58,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 58,
        "column": 19,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 16,
        "type": "error",
        "message": "Local variable 'stackTrace' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 16,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 9,
        "type": "error",
        "message": "Usage of System.out/err",
        "source": "SystemPrintln"
      },
      {
        "line": 74,
        "column": 37,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 74,
        "column": 50,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 75,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 85,
        "column": 23,
        "type": "error",
        "message": "The String literal \"unused\" appears 6 times in this file; the first occurrence is on line 85",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 89,
        "column": 35,
        "type": "error",
        "message": "Parameter 'message' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 89,
        "column": 51,
        "type": "error",
        "message": "Parameter 'stackTrace' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 97,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 98,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'value'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 105,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'CollectionEntry(String, String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 105,
        "column": 28,
        "type": "error",
        "message": "Parameter 'name' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 105,
        "column": 41,
        "type": "error",
        "message": "Parameter 'value' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testLargeCollectionSerialization' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 115,
        "column": 9,
        "type": "error",
        "message": "Local variable 'count' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 17,
        "type": "error",
        "message": "Number 1400000 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 116,
        "column": 27,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 126,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testLargeCollectionDeserialization' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 127,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 127,
        "column": 19,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 128,
        "column": 9,
        "type": "error",
        "message": "Local variable 'count' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 128,
        "column": 17,
        "type": "error",
        "message": "Number 87000 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 140,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 141,
        "column": 10,
        "type": "error",
        "message": "Local variable 'collectionType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 141,
        "column": 41,
        "type": "error",
        "message": "Avoid using implementation types like 'ArrayList'; use the interface instead",
        "source": "LooseCoupling"
      },
      {
        "line": 142,
        "column": 27,
        "type": "error",
        "message": "Local variable 'list' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 150,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 150,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testByteArraySerialization' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 151,
        "column": 21,
        "type": "error",
        "message": "Number 4145152 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 151,
        "column": 44,
        "type": "error",
        "message": "Number 1036288 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 152,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like ba",
        "source": "ShortVariable"
      },
      {
        "line": 152,
        "column": 14,
        "type": "error",
        "message": "Local variable 'ba' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 157,
        "column": 7,
        "type": "error",
        "message": "Usage of System.out/err",
        "source": "SystemPrintln"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disable_testByteArrayDeserialization' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 166,
        "column": 28,
        "type": "error",
        "message": "Number 10639296 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 166,
        "column": 59,
        "type": "error",
        "message": "Number 16384 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 167,
        "column": 21,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 167,
        "column": 21,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 179,
        "column": 14,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 180,
        "column": 14,
        "type": "error",
        "message": "Avoid variables with short names like ba",
        "source": "ShortVariable"
      },
      {
        "line": 180,
        "column": 14,
        "type": "error",
        "message": "Local variable 'ba' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 181,
        "column": 7,
        "type": "error",
        "message": "Usage of System.out/err",
        "source": "SystemPrintln"
      },
      {
        "line": 194,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 194,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testSerializeClasses' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 195,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 195,
        "column": 19,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 197,
        "column": 7,
        "type": "error",
        "message": "Access to field `list` on foreign value `c` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 199,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like w",
        "source": "ShortVariable"
      },
      {
        "line": 199,
        "column": 18,
        "type": "error",
        "message": "Local variable 'w' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 200,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like t1",
        "source": "ShortVariable"
      },
      {
        "line": 200,
        "column": 10,
        "type": "error",
        "message": "Local variable 't1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 204,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like t2",
        "source": "ShortVariable"
      },
      {
        "line": 204,
        "column": 10,
        "type": "error",
        "message": "Local variable 't2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 205,
        "column": 10,
        "type": "error",
        "message": "Local variable 'avg' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 206,
        "column": 5,
        "type": "error",
        "message": "Usage of System.out/err",
        "source": "SystemPrintln"
      },
      {
        "line": 209,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 209,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testDeserializeClasses' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 210,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 211,
        "column": 21,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 212,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like t1",
        "source": "ShortVariable"
      },
      {
        "line": 212,
        "column": 10,
        "type": "error",
        "message": "Local variable 't1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 216,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like t2",
        "source": "ShortVariable"
      },
      {
        "line": 216,
        "column": 10,
        "type": "error",
        "message": "Local variable 't2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 217,
        "column": 10,
        "type": "error",
        "message": "Local variable 'avg' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 218,
        "column": 5,
        "type": "error",
        "message": "Usage of System.out/err",
        "source": "SystemPrintln"
      },
      {
        "line": 221,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 221,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disable_testLargeObjectSerializationAndDeserialization' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 222,
        "column": 23,
        "type": "error",
        "message": "Local variable 'largeObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 223,
        "column": 26,
        "type": "error",
        "message": "Number 100000 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 227,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like t1",
        "source": "ShortVariable"
      },
      {
        "line": 228,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 229,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like t2",
        "source": "ShortVariable"
      },
      {
        "line": 230,
        "column": 5,
        "type": "error",
        "message": "Usage of System.out/err",
        "source": "SystemPrintln"
      },
      {
        "line": 230,
        "column": 62,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 235,
        "column": 5,
        "type": "error",
        "message": "Usage of System.out/err",
        "source": "SystemPrintln"
      },
      {
        "line": 235,
        "column": 64,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 239,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 239,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testSerializeExposedClasses' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 240,
        "column": 28,
        "type": "error",
        "message": "Avoid variables with short names like c1",
        "source": "ShortVariable"
      },
      {
        "line": 240,
        "column": 28,
        "type": "error",
        "message": "Local variable 'c1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 242,
        "column": 7,
        "type": "error",
        "message": "Access to field `list` on foreign value `c1` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 244,
        "column": 28,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 244,
        "column": 28,
        "type": "error",
        "message": "Local variable 'c' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 245,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like w",
        "source": "ShortVariable"
      },
      {
        "line": 245,
        "column": 18,
        "type": "error",
        "message": "Local variable 'w' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 246,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like t1",
        "source": "ShortVariable"
      },
      {
        "line": 246,
        "column": 10,
        "type": "error",
        "message": "Local variable 't1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 250,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like t2",
        "source": "ShortVariable"
      },
      {
        "line": 250,
        "column": 10,
        "type": "error",
        "message": "Local variable 't2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 251,
        "column": 10,
        "type": "error",
        "message": "Local variable 'avg' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 252,
        "column": 5,
        "type": "error",
        "message": "Usage of System.out/err",
        "source": "SystemPrintln"
      },
      {
        "line": 255,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 255,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testDeserializeExposedClasses' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 256,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 257,
        "column": 30,
        "type": "error",
        "message": "Local variable 'target' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 258,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like t1",
        "source": "ShortVariable"
      },
      {
        "line": 258,
        "column": 10,
        "type": "error",
        "message": "Local variable 't1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 262,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like t2",
        "source": "ShortVariable"
      },
      {
        "line": 262,
        "column": 10,
        "type": "error",
        "message": "Local variable 't2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 263,
        "column": 10,
        "type": "error",
        "message": "Local variable 'avg' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 264,
        "column": 5,
        "type": "error",
        "message": "Usage of System.out/err",
        "source": "SystemPrintln"
      },
      {
        "line": 267,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 267,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testLargeGsonMapRoundTrip' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 267,
        "column": 52,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 268,
        "column": 21,
        "type": "error",
        "message": "Local variable 'original' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 269,
        "column": 26,
        "type": "error",
        "message": "Number 1000000 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 273,
        "column": 10,
        "type": "error",
        "message": "Local variable 'gson' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 274,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 275,
        "column": 10,
        "type": "error",
        "message": "Local variable 'longToLong' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 280,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 280,
        "column": 19,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 294,
        "column": 12,
        "type": "error",
        "message": "Consider simply returning the value vs storing it in local variable 'json'",
        "source": "UnnecessaryLocalBeforeReturn"
      },
      {
        "line": 294,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 300,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'field'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 301,
        "column": 32,
        "type": "error",
        "message": "Missing commented default access modifier on field 'list'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 302,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithList()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 305,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithList(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 305,
        "column": 26,
        "type": "error",
        "message": "Parameter 'field' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 312,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'field'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 313,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithField()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 316,
        "column": 34,
        "type": "error",
        "message": "Parameter 'field' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 324,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'field'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 326,
        "column": 39,
        "type": "error",
        "message": "Missing commented default access modifier on field 'list'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 327,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithListOfObjects()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 330,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithListOfObjects(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 330,
        "column": 35,
        "type": "error",
        "message": "Parameter 'field' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 338,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on field 'field'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 339,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithExposedField()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 342,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'ClassWithExposedField(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 342,
        "column": 34,
        "type": "error",
        "message": "Parameter 'field' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java",
    "score": 0.0,
    "error_count": 89,
    "messages": [
      {
        "line": 31,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 33,
        "column": 17,
        "type": "error",
        "message": "Missing commented default access modifier on field 'listOfInteger'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 34,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'listOfNumber'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 35,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'listOfString'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 36,
        "column": 11,
        "type": "error",
        "message": "Missing commented default access modifier on field 'listOfUnknown'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 37,
        "column": 21,
        "type": "error",
        "message": "Missing commented default access modifier on field 'listOfSetOfString'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 38,
        "column": 16,
        "type": "error",
        "message": "Avoid excessively long variable names like listOfSetOfUnknown",
        "source": "LongVariable"
      },
      {
        "line": 38,
        "column": 16,
        "type": "error",
        "message": "Missing commented default access modifier on field 'listOfSetOfUnknown'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 40,
        "column": 22,
        "type": "error",
        "message": "The String literal \"deprecation\" appears 4 times in this file; the first occurrence is on line 40",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 41,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 49,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 49,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 50,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 50,
        "column": 10,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 51,
        "column": 10,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 62,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 63,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 63,
        "column": 10,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 64,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 64,
        "column": 10,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 76,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 77,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like a",
        "source": "ShortVariable"
      },
      {
        "line": 77,
        "column": 10,
        "type": "error",
        "message": "Local variable 'a' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 10,
        "type": "error",
        "message": "Avoid variables with short names like b",
        "source": "ShortVariable"
      },
      {
        "line": 78,
        "column": 10,
        "type": "error",
        "message": "Local variable 'b' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 88,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 89,
        "column": 18,
        "type": "error",
        "message": "Avoid excessively long variable names like expectedStringArray",
        "source": "LongVariable"
      },
      {
        "line": 89,
        "column": 18,
        "type": "error",
        "message": "Local variable 'expectedStringArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 92,
        "column": 18,
        "type": "error",
        "message": "Avoid excessively long variable names like expectedListOfStringArray",
        "source": "LongVariable"
      },
      {
        "line": 92,
        "column": 18,
        "type": "error",
        "message": "Local variable 'expectedListOfStringArray' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 93,
        "column": 10,
        "type": "error",
        "message": "Local variable 'listOfString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 99,
        "column": 7,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      },
      {
        "line": 99,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 99,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 103,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 103,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 103,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 104,
        "column": 18,
        "type": "error",
        "message": "Avoid excessively long variable names like expectedListOfString",
        "source": "LongVariable"
      },
      {
        "line": 104,
        "column": 18,
        "type": "error",
        "message": "Local variable 'expectedListOfString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 18,
        "type": "error",
        "message": "Avoid excessively long variable names like expectedMapOfStringToString",
        "source": "LongVariable"
      },
      {
        "line": 107,
        "column": 18,
        "type": "error",
        "message": "Local variable 'expectedMapOfStringToString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 18,
        "type": "error",
        "message": "Avoid excessively long variable names like expectedListOfListOfListOfString",
        "source": "LongVariable"
      },
      {
        "line": 110,
        "column": 18,
        "type": "error",
        "message": "Local variable 'expectedListOfListOfListOfString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 10,
        "type": "error",
        "message": "Local variable 'listOfString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 112,
        "column": 10,
        "type": "error",
        "message": "Avoid excessively long variable names like listOfListOfString",
        "source": "LongVariable"
      },
      {
        "line": 112,
        "column": 10,
        "type": "error",
        "message": "Local variable 'listOfListOfString' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 18,
        "type": "error",
        "message": "Avoid excessively long variable names like expectedWithExactArg",
        "source": "LongVariable"
      },
      {
        "line": 115,
        "column": 18,
        "type": "error",
        "message": "Local variable 'expectedWithExactArg' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 18,
        "type": "error",
        "message": "Avoid excessively long variable names like expectedWithSubclassArg",
        "source": "LongVariable"
      },
      {
        "line": 118,
        "column": 18,
        "type": "error",
        "message": "Local variable 'expectedWithSubclassArg' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 121,
        "column": 18,
        "type": "error",
        "message": "Avoid excessively long variable names like expectedSatisfyingTwoBounds",
        "source": "LongVariable"
      },
      {
        "line": 121,
        "column": 18,
        "type": "error",
        "message": "Local variable 'expectedSatisfyingTwoBounds' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 125,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 125,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testParameterizedFactory_Invalid' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 125,
        "column": 15,
        "type": "error",
        "message": "The method 'testParameterizedFactory_Invalid()' has a cyclomatic complexity of 11.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 125,
        "column": 15,
        "type": "error",
        "message": "The method 'testParameterizedFactory_Invalid()' has an NPath complexity of 1024, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 125,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 125,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 126,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 129,
        "column": 7,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      },
      {
        "line": 129,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 129,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 132,
        "column": 22,
        "type": "error",
        "message": "Local variable 'arrayType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 132,
        "column": 53,
        "type": "error",
        "message": "Call to `getType` on foreign value `TypeToken.getArray(String.class)` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 166,
        "column": 13,
        "type": "error",
        "message": "The String literal \"for type variable T declared by \" appears 5 times in this file; the first occurrence is on line 166",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 207,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 210,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 210,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 210,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 211,
        "column": 18,
        "type": "error",
        "message": "Local variable 'typeToken' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 220,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 220,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 220,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 221,
        "column": 5,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 222,
        "column": 5,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 223,
        "column": 5,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 248,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 248,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 262,
        "column": 1,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 264,
        "column": 1,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 267,
        "column": 10,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 267,
        "column": 10,
        "type": "error",
        "message": "No abstract method which means that the keyword is most likely used to prevent instantiation. Use a private or protected constructor instead.",
        "source": "AbstractClassWithoutAnyMethod"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java",
    "score": 1.0,
    "error_count": 18,
    "messages": [
      {
        "line": 26,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 29,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 29,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 29,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 30,
        "column": 12,
        "type": "error",
        "message": "Local variable 'device' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 34,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 35,
        "column": 12,
        "type": "error",
        "message": "Local variable 'device' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 41,
        "column": 12,
        "type": "error",
        "message": "Avoid variables with short names like id",
        "source": "ShortVariable"
      },
      {
        "line": 41,
        "column": 12,
        "type": "error",
        "message": "Field 'id' may be declared final",
        "source": "ImmutableField"
      },
      {
        "line": 41,
        "column": 12,
        "type": "error",
        "message": "Missing commented default access modifier on field 'id'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 42,
        "column": 5,
        "type": "error",
        "message": "Missing commented default access modifier on constructor 'Device(String)'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 42,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like id",
        "source": "ShortVariable"
      },
      {
        "line": 42,
        "column": 19,
        "type": "error",
        "message": "Parameter 'id' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 46,
        "column": 18,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'JsonAdapterFactory'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 49,
        "column": 49,
        "type": "error",
        "message": "The constant name 'recursiveCall' doesn't match '[A-Z][A-Z_0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 51,
        "column": 80,
        "type": "error",
        "message": "Parameter 'type' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 54,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/regression/OSGiTest.java",
    "score": 0.0,
    "error_count": 27,
    "messages": [
      {
        "line": 28,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 29,
        "column": 17,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 29,
        "column": 17,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 29,
        "column": 17,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 30,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like mf",
        "source": "ShortVariable"
      },
      {
        "line": 30,
        "column": 18,
        "type": "error",
        "message": "Local variable 'mf' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 31,
        "column": 16,
        "type": "error",
        "message": "Local variable 'importPkg' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 36,
        "column": 17,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 36,
        "column": 17,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 36,
        "column": 17,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 37,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like mf",
        "source": "ShortVariable"
      },
      {
        "line": 37,
        "column": 18,
        "type": "error",
        "message": "Local variable 'mf' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 38,
        "column": 16,
        "type": "error",
        "message": "Local variable 'importPkg' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 40,
        "column": 21,
        "type": "error",
        "message": "Local variable 'dep' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 42,
        "type": "error",
        "message": "Parameter 'pkg' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 50,
        "column": 19,
        "type": "error",
        "message": "Local variable 'urls' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 18,
        "type": "error",
        "message": "Local variable 'u' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 39,
        "type": "error",
        "message": "In J2EE, getClassLoader() might not work as expected.  Use Thread.currentThread().getContextClassLoader() instead.",
        "source": "UseProperClassLoader"
      },
      {
        "line": 52,
        "column": 25,
        "type": "error",
        "message": "Avoid variables with short names like is",
        "source": "ShortVariable"
      },
      {
        "line": 52,
        "column": 25,
        "type": "error",
        "message": "Ensure that resources like this InputStream object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 52,
        "column": 25,
        "type": "error",
        "message": "Local variable 'is' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 53,
        "column": 22,
        "type": "error",
        "message": "Avoid variables with short names like mf",
        "source": "ShortVariable"
      },
      {
        "line": 53,
        "column": 22,
        "type": "error",
        "message": "Local variable 'mf' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 56,
        "column": 17,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 64,
        "column": 48,
        "type": "error",
        "message": "Parameter 'msg' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 64,
        "column": 60,
        "type": "error",
        "message": "Parameter 'wholeText' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 64,
        "column": 78,
        "type": "error",
        "message": "Parameter 'subString' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java",
    "score": 0.0,
    "error_count": 46,
    "messages": [
      {
        "line": 30,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assert.assertEquals'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 31,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'org.junit.Assume.assumeTrue'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 35,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 35,
        "column": 33,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 45,
        "column": 18,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 47,
        "column": 21,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 48,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 48,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 18,
        "type": "error",
        "message": "The String literal \"$.a\" appears 12 times in this file; the first occurrence is on line 55",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 79,
        "column": 18,
        "type": "error",
        "message": "The String literal \"$.a[5].c\" appears 4 times in this file; the first occurrence is on line 79",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 104,
        "column": 21,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 105,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 105,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 134,
        "column": 18,
        "type": "error",
        "message": "The String literal \"$.b\" appears 10 times in this file; the first occurrence is on line 134",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 159,
        "column": 21,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 160,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 160,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 168,
        "column": 18,
        "type": "error",
        "message": "The String literal \"$[0]\" appears 13 times in this file; the first occurrence is on line 168",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 176,
        "column": 18,
        "type": "error",
        "message": "The String literal \"$[1]\" appears 10 times in this file; the first occurrence is on line 176",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 183,
        "column": 18,
        "type": "error",
        "message": "The String literal \"$[2]\" appears 7 times in this file; the first occurrence is on line 183",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 200,
        "column": 21,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 203,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 203,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 215,
        "column": 21,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 216,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 216,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 224,
        "column": 21,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 225,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 225,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 228,
        "column": 18,
        "type": "error",
        "message": "The String literal \"$.null\" appears 4 times in this file; the first occurrence is on line 228",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 232,
        "column": 21,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 233,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 233,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 246,
        "column": 21,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 247,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 247,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 254,
        "column": 21,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 255,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 255,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 282,
        "column": 21,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 283,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 283,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 312,
        "column": 49,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 317,
        "column": 49,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 318,
        "column": 21,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 323,
        "column": 25,
        "type": "error",
        "message": "Missing commented default access modifier on method 'create(String)'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java",
    "score": 0.0,
    "error_count": 721,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "Too many static imports may lead to messy code",
        "source": "TooManyStaticImports"
      },
      {
        "line": 37,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 37,
        "column": 14,
        "type": "error",
        "message": "Possible God Class (WMC=240, ATFD=59, TCC=0.000%)",
        "source": "GodClass"
      },
      {
        "line": 37,
        "column": 14,
        "type": "error",
        "message": "The class 'JsonReaderTest' has a total cyclomatic complexity of 240 (highest 14).",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 37,
        "column": 14,
        "type": "error",
        "message": "This class has a bunch of public methods and attributes",
        "source": "ExcessivePublicCount"
      },
      {
        "line": 37,
        "column": 52,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 38,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 39,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 39,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 47,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 48,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 48,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 55,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 56,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 56,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 67,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 68,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 68,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 75,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 76,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 76,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 83,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 83,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 94,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 95,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 95,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 108,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 108,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 114,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 115,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 115,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 126,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 126,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 126,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 127,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 129,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 129,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 143,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 143,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 143,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 144,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 144,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 155,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 155,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 155,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 156,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 156,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 167,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 167,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 167,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 168,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 172,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 172,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 184,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 184,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 185,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 190,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 190,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 192,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 200,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 201,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 204,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 204,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 208,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 208,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 208,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 209,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 214,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 221,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 221,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 221,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 222,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 242,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 242,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 267,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 267,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 268,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 269,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 269,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 271,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 278,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 278,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 279,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 280,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 280,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 282,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 289,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 289,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 290,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 291,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 291,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 293,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 300,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 300,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 300,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 301,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 301,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 308,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 308,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 308,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 309,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 327,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 327,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 331,
        "column": 18,
        "type": "error",
        "message": "Number 1.7976931348623157E308 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 336,
        "column": 18,
        "type": "error",
        "message": "Number 2.2250738585072014E-308 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 337,
        "column": 18,
        "type": "error",
        "message": "Number 3.141592653589793 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 338,
        "column": 18,
        "type": "error",
        "message": "Number 2.718281828459045 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 351,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 351,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 352,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 353,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 353,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 355,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 362,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 362,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 363,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 364,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 364,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 366,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 373,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 373,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 373,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 374,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 375,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 375,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 384,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 384,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 384,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 385,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 386,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 386,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 395,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 395,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 396,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 397,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 397,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 399,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 406,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 406,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 406,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 407,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 412,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 412,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 423,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 429,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 439,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 439,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testNumberWithOctalPrefix' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 440,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 441,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 441,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 468,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 468,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 468,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 469,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 469,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 477,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 477,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 477,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 478,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 478,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 482,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 491,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 491,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 491,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 535,
        "column": 40,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      },
      {
        "line": 535,
        "column": 40,
        "type": "error",
        "message": "Parameter 's' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 536,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 536,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 538,
        "column": 18,
        "type": "error",
        "message": "Unnecessary qualifier 'JsonToken': 'STRING' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 541,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 541,
        "column": 16,
        "type": "error",
        "message": "Local variable 'strictReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 545,
        "column": 7,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      },
      {
        "line": 549,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 549,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 549,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 550,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 550,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 554,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 562,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 562,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 562,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 563,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 563,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 567,
        "column": 19,
        "type": "error",
        "message": "Number 9223372036854775808L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 570,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 570,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 570,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 571,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 571,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 575,
        "column": 18,
        "type": "error",
        "message": "Number 9223372036854775807L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 578,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 578,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 578,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 579,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 579,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 583,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 590,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 590,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 590,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 591,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 591,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 595,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 606,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 606,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 606,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 607,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 607,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 618,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 618,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testPeekLargerThanLongMaxValue' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 619,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 619,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 626,
        "column": 7,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      },
      {
        "line": 634,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 634,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testPeekLargerThanLongMinValue' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 635,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 635,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 644,
        "column": 19,
        "type": "error",
        "message": "Number 9223372036854775809d should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 651,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 651,
        "column": 15,
        "type": "error",
        "message": "The instance method name 'disabled_testHighPrecisionLong' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 652,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 653,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 653,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 655,
        "column": 18,
        "type": "error",
        "message": "Number 9223372036854775806L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 659,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 659,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 659,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 660,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 660,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 664,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 669,
        "column": 19,
        "type": "error",
        "message": "Number 92233720368547758080d should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 672,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 672,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 672,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 673,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 673,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 680,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 680,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 680,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 681,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 681,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 693,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 693,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 693,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 694,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 694,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 697,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 704,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 704,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 704,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 705,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 705,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 709,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 716,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 716,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 716,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 717,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 718,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 718,
        "column": 18,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 726,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 727,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 727,
        "column": 18,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 734,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 735,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 735,
        "column": 18,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 746,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 746,
        "column": 15,
        "type": "error",
        "message": "The method 'testNextFailuresDoNotAdvance()' has a cyclomatic complexity of 11.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 746,
        "column": 15,
        "type": "error",
        "message": "The method 'testNextFailuresDoNotAdvance()' has an NPath complexity of 1024, current threshold is 200",
        "source": "NPathComplexity"
      },
      {
        "line": 746,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 746,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 747,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 747,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 749,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 755,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 760,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 765,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 770,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 775,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 781,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 786,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 791,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 796,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 806,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 806,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 806,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 807,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 807,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 809,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 818,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 818,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 819,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 819,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 821,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 828,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 828,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 829,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 829,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 831,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 838,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 838,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 838,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 839,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 842,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 851,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 858,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 858,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 858,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 859,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 872,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 872,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 872,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 873,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 876,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 885,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 892,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 892,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 892,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 893,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 911,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 911,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 911,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 912,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 914,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 922,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 930,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 937,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 937,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 937,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 938,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 954,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 954,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 954,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 955,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 957,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 965,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 973,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 980,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 980,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 981,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 981,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 983,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 990,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 990,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 991,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 991,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 997,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 997,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 998,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 998,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1000,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1007,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1007,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1008,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1008,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1010,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1017,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1017,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1018,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1018,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1024,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1024,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1025,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1025,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1027,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1034,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1034,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1035,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1035,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1037,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1044,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1044,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1045,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1045,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1047,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1054,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1054,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1055,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1055,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1061,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1061,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1062,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1062,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1064,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1071,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1071,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1072,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1072,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1078,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1078,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1079,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1079,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1081,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1088,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1088,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1089,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1089,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1091,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1099,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1099,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1099,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1100,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1100,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1107,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1107,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1108,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1108,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1110,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1118,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1118,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1118,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1119,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1119,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1122,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1130,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1130,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1130,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1131,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1131,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1139,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1139,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1139,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1140,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1140,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1143,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1151,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1151,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1151,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1152,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1155,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1163,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1172,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1178,
        "column": 36,
        "type": "error",
        "message": "The String literal \"[,]\" appears 4 times in this file; the first occurrence is on line 1,178",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 1180,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1187,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1187,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1187,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1188,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1218,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1218,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1218,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1219,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1222,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1230,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1239,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1247,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1254,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1254,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1255,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1255,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1258,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1265,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1265,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1265,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1266,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1266,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1276,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1276,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1277,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1277,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1280,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1287,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1287,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1287,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1288,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1288,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1292,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1292,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1296,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1296,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader3' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1297,
        "column": 18,
        "type": "error",
        "message": "Unnecessary qualifier 'JsonToken': 'NULL' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 1301,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1301,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader4' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1305,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1305,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader5' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1309,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1309,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader6' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1314,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1314,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1315,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1315,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1320,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1320,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1321,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1321,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1322,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1329,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1329,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1330,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1330,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1331,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1338,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1338,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1339,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1339,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1346,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1346,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1347,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1347,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1354,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1354,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1354,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1355,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1355,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1357,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1365,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 1365,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1365,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1366,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1366,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1371,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1371,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1372,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1372,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1374,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1381,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 1381,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1381,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1386,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 1386,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1386,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1387,
        "column": 12,
        "type": "error",
        "message": "Local variable 'spaces' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1392,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 1392,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1392,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1397,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 1397,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1397,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1402,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 1402,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1402,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1407,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 1407,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1407,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1412,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 1412,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1412,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1416,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 1416,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1416,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1420,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 1420,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1420,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1425,
        "column": 44,
        "type": "error",
        "message": "Parameter 'message' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1425,
        "column": 60,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1427,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1427,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1439,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1439,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1451,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1451,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1451,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1452,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1452,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1468,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1468,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1468,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1469,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1469,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1471,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1478,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1478,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1478,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1479,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1479,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1482,
        "column": 18,
        "type": "error",
        "message": "Unnecessary qualifier 'JsonToken': 'STRING' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 1488,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1488,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1489,
        "column": 12,
        "type": "error",
        "message": "Local variable 'literal' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1490,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1490,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1497,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1497,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1497,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1499,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1499,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1512,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1512,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1512,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1514,
        "column": 12,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1520,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1520,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1535,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1535,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1536,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1536,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1538,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1545,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1545,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1546,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1546,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1548,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1555,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1555,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1556,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1556,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1558,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1565,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1565,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1565,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1566,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1566,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1571,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1578,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1578,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1579,
        "column": 12,
        "type": "error",
        "message": "Local variable 'stringChars' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1581,
        "column": 12,
        "type": "error",
        "message": "Local variable 'string' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1582,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1583,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1583,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1589,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1589,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1590,
        "column": 12,
        "type": "error",
        "message": "Local variable 'stringChars' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1592,
        "column": 12,
        "type": "error",
        "message": "Local variable 'string' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1593,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1594,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1594,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1601,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1601,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1601,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1602,
        "column": 12,
        "type": "error",
        "message": "Local variable 'stringChars' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1604,
        "column": 12,
        "type": "error",
        "message": "Local variable 'string' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1605,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1606,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1606,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1610,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1617,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 1617,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1617,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1618,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1618,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1625,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1625,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1626,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1626,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1632,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 1632,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1632,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1633,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1633,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1639,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1639,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1640,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1640,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1646,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1646,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1647,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1647,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1653,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1653,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1654,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1654,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1660,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1660,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1661,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1661,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1667,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1667,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1667,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1668,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1668,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1674,
        "column": 18,
        "type": "error",
        "message": "Unnecessary qualifier 'JsonToken': 'BOOLEAN' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 1676,
        "column": 18,
        "type": "error",
        "message": "Unnecessary qualifier 'JsonToken': 'END_OBJECT' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 1681,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1681,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1681,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1682,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1682,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1686,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1693,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1693,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1693,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1694,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1694,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1699,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1706,
        "column": 30,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 1706,
        "column": 30,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1706,
        "column": 37,
        "type": "error",
        "message": "Parameter 'count' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1707,
        "column": 12,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1712,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1712,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1712,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1758,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1758,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 1758,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1759,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1759,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1762,
        "column": 18,
        "type": "error",
        "message": "Unnecessary qualifier 'JsonToken': 'STRING' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 1763,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 1773,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 1773,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 1774,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 1774,
        "column": 19,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1779,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1779,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1781,
        "column": 15,
        "type": "error",
        "message": "Local variable 'token' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1782,
        "column": 18,
        "type": "error",
        "message": "Unnecessary qualifier 'JsonToken': 'NUMBER' is already in scope because it is imported in this file",
        "source": "UnnecessaryFullyQualifiedName"
      },
      {
        "line": 1785,
        "column": 16,
        "type": "error",
        "message": "The method 'assertDocument(String, Object[])' has a cognitive complexity of 24, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 1785,
        "column": 16,
        "type": "error",
        "message": "The method 'assertDocument(String, Object[])' has a cyclomatic complexity of 14.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 1785,
        "column": 38,
        "type": "error",
        "message": "Parameter 'document' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1785,
        "column": 58,
        "type": "error",
        "message": "Parameter 'expectations' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 1786,
        "column": 16,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 1786,
        "column": 16,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1788,
        "column": 17,
        "type": "error",
        "message": "Local variable 'expectation' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 1822,
        "column": 38,
        "type": "error",
        "message": "Avoid variables with short names like s",
        "source": "ShortVariable"
      }
    ]
  },
  {
    "file": "/workspace/repo/gson/src/test/java/com/google/gson/stream/JsonWriterTest.java",
    "score": 0.0,
    "error_count": 227,
    "messages": [
      {
        "line": 27,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 27,
        "column": 14,
        "type": "error",
        "message": "Possible God Class (WMC=77, ATFD=17, TCC=0.000%)",
        "source": "GodClass"
      },
      {
        "line": 27,
        "column": 52,
        "type": "error",
        "message": "This class has too many methods, consider refactoring it.",
        "source": "TooManyMethods"
      },
      {
        "line": 29,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 29,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 29,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 30,
        "column": 18,
        "type": "error",
        "message": "Local variable 'string1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 31,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writer1' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 36,
        "column": 18,
        "type": "error",
        "message": "Local variable 'string2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 37,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writer2' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 18,
        "type": "error",
        "message": "Local variable 'string3' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 43,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writer3' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 48,
        "column": 18,
        "type": "error",
        "message": "Local variable 'string4' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 49,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writer4' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 54,
        "column": 18,
        "type": "error",
        "message": "Local variable 'string5' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 55,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writert' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 61,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 62,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 65,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 73,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 77,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 84,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 85,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 86,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 89,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 96,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 96,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 97,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 98,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 107,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 108,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 109,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 111,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 118,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 118,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 119,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 120,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 123,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 130,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 130,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 131,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 132,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 135,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 142,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 142,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 143,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 144,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 146,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 149,
        "column": 14,
        "type": "error",
        "message": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "source": "AvoidCatchingNPE"
      },
      {
        "line": 149,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 154,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 155,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 163,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 163,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 164,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 165,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 175,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 176,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 177,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 195,
        "column": 20,
        "type": "error",
        "message": "The String literal \"Numeric values must be finite, but was Infinity\" appears 4 times in this file; the first occurrence is on line 195",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 199,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 199,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 199,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 200,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 201,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 223,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 223,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 223,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 224,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 225,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 228,
        "column": 24,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 234,
        "column": 24,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 240,
        "column": 24,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 253,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 253,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 254,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 255,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 265,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 265,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 266,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 267,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 277,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 277,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 278,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 279,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 282,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 283,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 284,
        "column": 22,
        "type": "error",
        "message": "Unnecessary explicit boxing",
        "source": "UnnecessaryBoxing"
      },
      {
        "line": 290,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 290,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 291,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 292,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 300,
        "column": 22,
        "type": "error",
        "message": "Number 2.2250739E-38f should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 301,
        "column": 22,
        "type": "error",
        "message": "Number 3.723379f should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 320,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 320,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 321,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 322,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 330,
        "column": 22,
        "type": "error",
        "message": "Number 2.2250738585072014E-308 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 346,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 346,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 347,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 348,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 364,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 364,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 365,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 366,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 383,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 383,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 384,
        "column": 14,
        "type": "error",
        "message": "Local variable 'validNumbers' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 405,
        "column": 17,
        "type": "error",
        "message": "Local variable 'validNumber' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 406,
        "column": 20,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 407,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 416,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 416,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 416,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 417,
        "column": 14,
        "type": "error",
        "message": "Local variable 'malformedNumbers' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 444,
        "column": 17,
        "type": "error",
        "message": "Local variable 'malformedNumber' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 445,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 455,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 455,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 456,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 457,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 465,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 465,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 466,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 467,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 476,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 476,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 477,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 478,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 485,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 485,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 486,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 487,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 528,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 528,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 529,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 530,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 537,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 537,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 538,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 539,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 545,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 545,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 546,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 547,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 553,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 553,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 554,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 555,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 570,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 570,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 571,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 572,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 589,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 589,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 590,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 591,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 601,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 601,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 602,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 603,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 618,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 618,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 619,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 620,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 629,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 629,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 630,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 631,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 649,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 666,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 666,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 667,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 668,
        "column": 16,
        "type": "error",
        "message": "Local variable 'jsonWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 686,
        "column": 12,
        "type": "error",
        "message": "Local variable 'expected' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 703,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 703,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 704,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 705,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 715,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 715,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 716,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 717,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 720,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 727,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 727,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 727,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 728,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 729,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 733,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 738,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 743,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 748,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 755,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 755,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 756,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 757,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 761,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 768,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 768,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 769,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 770,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 774,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 781,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 781,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 782,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 783,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 787,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 794,
        "column": 15,
        "type": "error",
        "message": "JUnit tests should include assert() or fail()",
        "source": "JUnitTestsShouldIncludeAssert"
      },
      {
        "line": 794,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 794,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 795,
        "column": 18,
        "type": "error",
        "message": "Local variable 'stringWriter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 796,
        "column": 16,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitives.java",
    "score": 0.0,
    "error_count": 21,
    "messages": [
      {
        "line": 34,
        "column": 31,
        "type": "error",
        "message": "Parameter 'longValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 34,
        "column": 46,
        "type": "error",
        "message": "Parameter 'intValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 34,
        "column": 64,
        "type": "error",
        "message": "Parameter 'booleanValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 34,
        "column": 85,
        "type": "error",
        "message": "Parameter 'stringValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 46,
        "column": 19,
        "type": "error",
        "message": "Avoid variables with short names like sb",
        "source": "ShortVariable"
      },
      {
        "line": 46,
        "column": 19,
        "type": "error",
        "message": "Local variable 'sb' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 32,
        "type": "error",
        "message": "Parameter 'obj' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 69,
        "column": 22,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 69,
        "column": 22,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 70,
        "column": 22,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 70,
        "column": 22,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 71,
        "column": 39,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 71,
        "column": 39,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 72,
        "column": 21,
        "type": "error",
        "message": "Local variable 'other' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 73,
        "column": 45,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 73,
        "column": 45,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 74,
        "column": 37,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 74,
        "column": 37,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 75,
        "column": 39,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 75,
        "column": 39,
        "type": "error",
        "message": "This statement should have braces",
        "source": "ControlStatementBraces"
      },
      {
        "line": 77,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      }
    ]
  },
  {
    "file": "/workspace/repo/metrics/src/main/java/com/google/gson/metrics/BagOfPrimitivesDeserializationBenchmark.java",
    "score": 0.0,
    "error_count": 31,
    "messages": [
      {
        "line": 32,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 37,
        "column": 36,
        "type": "error",
        "message": "Parameter 'args' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 42,
        "column": 8,
        "type": "error",
        "message": "Missing commented default access modifier on method 'setUp()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 42,
        "column": 16,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 44,
        "column": 21,
        "type": "error",
        "message": "Local variable 'bag' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 51,
        "column": 46,
        "type": "error",
        "message": "Parameter 'reps' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 60,
        "column": 48,
        "type": "error",
        "message": "Parameter 'reps' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 62,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this StringReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 62,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like jr",
        "source": "ShortVariable"
      },
      {
        "line": 63,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 63,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 16,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 71,
        "column": 13,
        "type": "error",
        "message": "Position literals first in String comparisons",
        "source": "LiteralsFirstInComparisons"
      },
      {
        "line": 73,
        "column": 20,
        "type": "error",
        "message": "Position literals first in String comparisons",
        "source": "LiteralsFirstInComparisons"
      },
      {
        "line": 75,
        "column": 20,
        "type": "error",
        "message": "Position literals first in String comparisons",
        "source": "LiteralsFirstInComparisons"
      },
      {
        "line": 77,
        "column": 20,
        "type": "error",
        "message": "Position literals first in String comparisons",
        "source": "LiteralsFirstInComparisons"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "The method 'timeBagOfPrimitivesReflectionStreaming(int)' has a cognitive complexity of 19, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "The method 'timeBagOfPrimitivesReflectionStreaming(int)' has a cyclomatic complexity of 10.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 93,
        "column": 58,
        "type": "error",
        "message": "Parameter 'reps' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 93,
        "column": 64,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 95,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this StringReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 95,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 96,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like jr",
        "source": "ShortVariable"
      },
      {
        "line": 96,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 96,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 98,
        "column": 23,
        "type": "error",
        "message": "Local variable 'bag' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 100,
        "column": 16,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 101,
        "column": 20,
        "type": "error",
        "message": "Local variable 'field' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 103,
        "column": 22,
        "type": "error",
        "message": "Local variable 'fieldType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 25,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      }
    ]
  },
  {
    "file": "/workspace/repo/metrics/src/main/java/com/google/gson/metrics/CollectionsDeserializationBenchmark.java",
    "score": 0.0,
    "error_count": 34,
    "messages": [
      {
        "line": 34,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 36,
        "column": 88,
        "type": "error",
        "message": "Explicit type arguments can be replaced by a diamond: `new TypeToken<>()`",
        "source": "UseDiamondOperator"
      },
      {
        "line": 41,
        "column": 36,
        "type": "error",
        "message": "Parameter 'args' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 46,
        "column": 8,
        "type": "error",
        "message": "Missing commented default access modifier on method 'setUp()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 46,
        "column": 16,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 48,
        "column": 27,
        "type": "error",
        "message": "Local variable 'bags' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 42,
        "type": "error",
        "message": "Parameter 'reps' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 67,
        "column": 44,
        "type": "error",
        "message": "Parameter 'reps' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 69,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this StringReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 69,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 70,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like jr",
        "source": "ShortVariable"
      },
      {
        "line": 70,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 70,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 29,
        "type": "error",
        "message": "Local variable 'bags' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 80,
        "column": 18,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 81,
        "column": 15,
        "type": "error",
        "message": "Position literals first in String comparisons",
        "source": "LiteralsFirstInComparisons"
      },
      {
        "line": 83,
        "column": 22,
        "type": "error",
        "message": "Position literals first in String comparisons",
        "source": "LiteralsFirstInComparisons"
      },
      {
        "line": 85,
        "column": 22,
        "type": "error",
        "message": "Position literals first in String comparisons",
        "source": "LiteralsFirstInComparisons"
      },
      {
        "line": 87,
        "column": 22,
        "type": "error",
        "message": "Position literals first in String comparisons",
        "source": "LiteralsFirstInComparisons"
      },
      {
        "line": 105,
        "column": 15,
        "type": "error",
        "message": "The method 'timeCollectionsReflectionStreaming(int)' has a cognitive complexity of 25, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 105,
        "column": 15,
        "type": "error",
        "message": "The method 'timeCollectionsReflectionStreaming(int)' has a cyclomatic complexity of 11.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 105,
        "column": 54,
        "type": "error",
        "message": "Parameter 'reps' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 105,
        "column": 60,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 107,
        "column": 20,
        "type": "error",
        "message": "Ensure that resources like this StringReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 107,
        "column": 20,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 108,
        "column": 18,
        "type": "error",
        "message": "Avoid variables with short names like jr",
        "source": "ShortVariable"
      },
      {
        "line": 108,
        "column": 18,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 108,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jr' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 110,
        "column": 29,
        "type": "error",
        "message": "Local variable 'bags' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 113,
        "column": 25,
        "type": "error",
        "message": "Local variable 'bag' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 115,
        "column": 18,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 116,
        "column": 22,
        "type": "error",
        "message": "Local variable 'field' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 118,
        "column": 24,
        "type": "error",
        "message": "Local variable 'fieldType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 128,
        "column": 27,
        "type": "error",
        "message": "Avoid throwing raw exception types.",
        "source": "AvoidThrowingRawExceptionTypes"
      }
    ]
  },
  {
    "file": "/workspace/repo/metrics/src/main/java/com/google/gson/metrics/NonUploadingCaliperRunner.java",
    "score": 5.5,
    "error_count": 9,
    "messages": [
      {
        "line": 5,
        "column": 1,
        "type": "error",
        "message": "This utility class has a non-private constructor",
        "source": "UseUtilityClass"
      },
      {
        "line": 6,
        "column": 41,
        "type": "error",
        "message": "Parameter 'first' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 6,
        "column": 58,
        "type": "error",
        "message": "Parameter 'others' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 8,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 10,
        "column": 16,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 17,
        "column": 35,
        "type": "error",
        "message": "Avoid variables with short names like c",
        "source": "ShortVariable"
      },
      {
        "line": 17,
        "column": 35,
        "type": "error",
        "message": "Parameter 'c' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 17,
        "column": 38,
        "type": "error",
        "message": "Consider using varargs for methods or constructors which take an array the last parameter.",
        "source": "UseVarargs"
      },
      {
        "line": 17,
        "column": 47,
        "type": "error",
        "message": "Parameter 'args' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/metrics/src/main/java/com/google/gson/metrics/ParseBenchmark.java",
    "score": 0.0,
    "error_count": 211,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "A high number of imports can indicate a high degree of coupling within an object.",
        "source": "ExcessiveImports"
      },
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 41,
        "column": 1,
        "type": "error",
        "message": "Unused import 'java.lang.reflect.Type'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 57,
        "column": 14,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 58,
        "column": 19,
        "type": "error",
        "message": "Missing commented default access modifier on field 'document'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 59,
        "column": 14,
        "type": "error",
        "message": "Missing commented default access modifier on field 'api'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 66,
        "column": 32,
        "type": "error",
        "message": "The field 'gsonType' of serializable class 'com.google.gson.metrics.ParseBenchmark$Document' is of non-serializable type 'com.google.gson.reflect.TypeToken<?>'.",
        "source": "NonSerializableClass"
      },
      {
        "line": 69,
        "column": 13,
        "type": "error",
        "message": "Unnecessary modifier 'private' on constructor 'Document(TypeToken<?>, TypeReference<?>)': enum constructors are implicitly private",
        "source": "UnnecessaryModifier"
      },
      {
        "line": 69,
        "column": 35,
        "type": "error",
        "message": "Parameter 'typeToken' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 69,
        "column": 63,
        "type": "error",
        "message": "Parameter 'typeReference' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 77,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on method 'newParser()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 82,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on method 'newParser()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 87,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on method 'newParser()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 92,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on method 'newParser()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 97,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on method 'newParser()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 102,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on method 'newParser()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 106,
        "column": 21,
        "type": "error",
        "message": "Missing commented default access modifier on method 'newParser()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 113,
        "column": 8,
        "type": "error",
        "message": "Missing commented default access modifier on method 'setUp()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 113,
        "column": 16,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 118,
        "column": 29,
        "type": "error",
        "message": "Parameter 'reps' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 118,
        "column": 35,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 124,
        "column": 46,
        "type": "error",
        "message": "Parameter 'path' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 124,
        "column": 52,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 125,
        "column": 9,
        "type": "error",
        "message": "Local variable 'url' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 129,
        "column": 10,
        "type": "error",
        "message": "Local variable 'file' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 136,
        "column": 49,
        "type": "error",
        "message": "Parameter 'fileName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 136,
        "column": 59,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 137,
        "column": 13,
        "type": "error",
        "message": "Local variable 'zipFile' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 138,
        "column": 5,
        "type": "error",
        "message": "Consider using a try-with-resources statement instead of explicitly closing the resource",
        "source": "UseTryWithResources"
      },
      {
        "line": 139,
        "column": 16,
        "type": "error",
        "message": "Local variable 'zipEntry' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 140,
        "column": 14,
        "type": "error",
        "message": "Ensure that resources like this InputStreamReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 140,
        "column": 14,
        "type": "error",
        "message": "Local variable 'reader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 141,
        "column": 14,
        "type": "error",
        "message": "Local variable 'buffer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 142,
        "column": 20,
        "type": "error",
        "message": "Local variable 'writer' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 144,
        "column": 14,
        "type": "error",
        "message": "Avoid assignments in operands",
        "source": "AssignmentInOperand"
      },
      {
        "line": 155,
        "column": 36,
        "type": "error",
        "message": "Parameter 'args' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 155,
        "column": 42,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 159,
        "column": 3,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Parser'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 160,
        "column": 48,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 163,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 165,
        "column": 30,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 166,
        "column": 41,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 166,
        "column": 41,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 172,
        "column": 18,
        "type": "error",
        "message": "The method 'readToken(JsonReader)' has a cyclomatic complexity of 13.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 172,
        "column": 62,
        "type": "error",
        "message": "Parameter 'reader' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 211,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 213,
        "column": 30,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 214,
        "column": 41,
        "type": "error",
        "message": "Ensure that resources like this JsonReader object are closed after use",
        "source": "CloseResource"
      },
      {
        "line": 214,
        "column": 41,
        "type": "error",
        "message": "Local variable 'jsonReader' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 221,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 223,
        "column": 17,
        "type": "error",
        "message": "The method 'parse(char[], Document)' has a cyclomatic complexity of 14.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 223,
        "column": 30,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 224,
        "column": 19,
        "type": "error",
        "message": "Local variable 'jsonFactory' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 225,
        "column": 45,
        "type": "error",
        "message": "Avoid variables with short names like jp",
        "source": "ShortVariable"
      },
      {
        "line": 225,
        "column": 45,
        "type": "error",
        "message": "Local variable 'jp' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 228,
        "column": 19,
        "type": "error",
        "message": "Local variable 'token' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 263,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 265,
        "column": 30,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 270,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 276,
        "column": 30,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 276,
        "column": 45,
        "type": "error",
        "message": "Parameter 'document' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 281,
        "column": 18,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 282,
        "column": 39,
        "type": "error",
        "message": "The constant name 'mapper' doesn't match '[A-Z][A-Z_0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 293,
        "column": 30,
        "type": "error",
        "message": "Parameter 'data' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 293,
        "column": 45,
        "type": "error",
        "message": "Parameter 'document' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 298,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Tweet'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 298,
        "column": 22,
        "type": "error",
        "message": "Too many fields",
        "source": "TooManyFields"
      },
      {
        "line": 299,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'coordinates'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 300,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'favorited'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 301,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'created_at'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 301,
        "column": 24,
        "type": "error",
        "message": "The field name 'created_at' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 302,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'truncated'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 303,
        "column": 25,
        "type": "error",
        "message": "Missing commented default access modifier on field 'retweeted_status'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 303,
        "column": 25,
        "type": "error",
        "message": "The field name 'retweeted_status' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 304,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'id_str'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 304,
        "column": 26,
        "type": "error",
        "message": "The field name 'id_str' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 305,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like in_reply_to_id_str",
        "source": "LongVariable"
      },
      {
        "line": 305,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'in_reply_to_id_str'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 305,
        "column": 26,
        "type": "error",
        "message": "The field name 'in_reply_to_id_str' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 306,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'contributors'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 307,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'text'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 308,
        "column": 24,
        "type": "error",
        "message": "Avoid variables with short names like id",
        "source": "ShortVariable"
      },
      {
        "line": 308,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'id'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 309,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'retweet_count'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 309,
        "column": 26,
        "type": "error",
        "message": "The field name 'retweet_count' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 310,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like in_reply_to_status_id_str",
        "source": "LongVariable"
      },
      {
        "line": 310,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'in_reply_to_status_id_str'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 310,
        "column": 26,
        "type": "error",
        "message": "The field name 'in_reply_to_status_id_str' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 311,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'geo'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 312,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'retweeted'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 313,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like in_reply_to_user_id",
        "source": "LongVariable"
      },
      {
        "line": 313,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'in_reply_to_user_id'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 313,
        "column": 26,
        "type": "error",
        "message": "The field name 'in_reply_to_user_id' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 314,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like in_reply_to_screen_name",
        "source": "LongVariable"
      },
      {
        "line": 314,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'in_reply_to_screen_name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 314,
        "column": 26,
        "type": "error",
        "message": "The field name 'in_reply_to_screen_name' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 315,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'place'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 316,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'user'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 317,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'source'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 318,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like in_reply_to_user_id_str",
        "source": "LongVariable"
      },
      {
        "line": 318,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'in_reply_to_user_id_str'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 318,
        "column": 26,
        "type": "error",
        "message": "The field name 'in_reply_to_user_id_str' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 321,
        "column": 10,
        "type": "error",
        "message": "Avoid short class names like User",
        "source": "ShortClassName"
      },
      {
        "line": 321,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'User'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 321,
        "column": 21,
        "type": "error",
        "message": "Too many fields",
        "source": "TooManyFields"
      },
      {
        "line": 322,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 323,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like profile_sidebar_border_color",
        "source": "LongVariable"
      },
      {
        "line": 323,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'profile_sidebar_border_color'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 323,
        "column": 26,
        "type": "error",
        "message": "The field name 'profile_sidebar_border_color' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 324,
        "column": 27,
        "type": "error",
        "message": "Avoid excessively long variable names like profile_background_tile",
        "source": "LongVariable"
      },
      {
        "line": 324,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'profile_background_tile'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 324,
        "column": 27,
        "type": "error",
        "message": "The field name 'profile_background_tile' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 325,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like profile_sidebar_fill_color",
        "source": "LongVariable"
      },
      {
        "line": 325,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'profile_sidebar_fill_color'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 325,
        "column": 26,
        "type": "error",
        "message": "The field name 'profile_sidebar_fill_color' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 326,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'created_at'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 326,
        "column": 24,
        "type": "error",
        "message": "The field name 'created_at' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 327,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'location'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 328,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'profile_image_url'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 328,
        "column": 26,
        "type": "error",
        "message": "The field name 'profile_image_url' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 329,
        "column": 27,
        "type": "error",
        "message": "Avoid excessively long variable names like follow_request_sent",
        "source": "LongVariable"
      },
      {
        "line": 329,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'follow_request_sent'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 329,
        "column": 27,
        "type": "error",
        "message": "The field name 'follow_request_sent' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 330,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like profile_link_color",
        "source": "LongVariable"
      },
      {
        "line": 330,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'profile_link_color'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 330,
        "column": 26,
        "type": "error",
        "message": "The field name 'profile_link_color' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 331,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'is_translator'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 331,
        "column": 27,
        "type": "error",
        "message": "The field name 'is_translator' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 332,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'id_str'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 332,
        "column": 26,
        "type": "error",
        "message": "The field name 'id_str' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 333,
        "column": 23,
        "type": "error",
        "message": "Missing commented default access modifier on field 'favourites_count'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 333,
        "column": 23,
        "type": "error",
        "message": "The field name 'favourites_count' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 334,
        "column": 27,
        "type": "error",
        "message": "Avoid excessively long variable names like contributors_enabled",
        "source": "LongVariable"
      },
      {
        "line": 334,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'contributors_enabled'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 334,
        "column": 27,
        "type": "error",
        "message": "The field name 'contributors_enabled' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 335,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'url'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 336,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'default_profile'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 336,
        "column": 27,
        "type": "error",
        "message": "The field name 'default_profile' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 337,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'utc_offset'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 337,
        "column": 24,
        "type": "error",
        "message": "The field name 'utc_offset' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 338,
        "column": 24,
        "type": "error",
        "message": "Avoid variables with short names like id",
        "source": "ShortVariable"
      },
      {
        "line": 338,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'id'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 339,
        "column": 27,
        "type": "error",
        "message": "Avoid excessively long variable names like profile_use_background_image",
        "source": "LongVariable"
      },
      {
        "line": 339,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'profile_use_background_image'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 339,
        "column": 27,
        "type": "error",
        "message": "The field name 'profile_use_background_image' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 340,
        "column": 23,
        "type": "error",
        "message": "Missing commented default access modifier on field 'listed_count'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 340,
        "column": 23,
        "type": "error",
        "message": "The field name 'listed_count' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 341,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'lang'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 342,
        "column": 69,
        "type": "error",
        "message": "Missing commented default access modifier on field 'isProtected'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 343,
        "column": 23,
        "type": "error",
        "message": "Missing commented default access modifier on field 'followers_count'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 343,
        "column": 23,
        "type": "error",
        "message": "The field name 'followers_count' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 344,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like profile_text_color",
        "source": "LongVariable"
      },
      {
        "line": 344,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'profile_text_color'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 344,
        "column": 26,
        "type": "error",
        "message": "The field name 'profile_text_color' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 345,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like profile_background_color",
        "source": "LongVariable"
      },
      {
        "line": 345,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'profile_background_color'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 345,
        "column": 26,
        "type": "error",
        "message": "The field name 'profile_background_color' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 346,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'time_zone'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 346,
        "column": 26,
        "type": "error",
        "message": "The field name 'time_zone' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 347,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'description'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 348,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'notifications'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 349,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'geo_enabled'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 349,
        "column": 27,
        "type": "error",
        "message": "The field name 'geo_enabled' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 350,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'verified'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 351,
        "column": 26,
        "type": "error",
        "message": "Avoid excessively long variable names like profile_background_image_url",
        "source": "LongVariable"
      },
      {
        "line": 351,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'profile_background_image_url'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 351,
        "column": 26,
        "type": "error",
        "message": "The field name 'profile_background_image_url' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 352,
        "column": 27,
        "type": "error",
        "message": "Avoid excessively long variable names like defalut_profile_image",
        "source": "LongVariable"
      },
      {
        "line": 352,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'defalut_profile_image'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 352,
        "column": 27,
        "type": "error",
        "message": "The field name 'defalut_profile_image' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 353,
        "column": 23,
        "type": "error",
        "message": "Missing commented default access modifier on field 'friends_count'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 353,
        "column": 23,
        "type": "error",
        "message": "The field name 'friends_count' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 354,
        "column": 23,
        "type": "error",
        "message": "Missing commented default access modifier on field 'statuses_count'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 354,
        "column": 23,
        "type": "error",
        "message": "The field name 'statuses_count' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 355,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'screen_name'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 355,
        "column": 26,
        "type": "error",
        "message": "The field name 'screen_name' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 356,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'following'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 357,
        "column": 27,
        "type": "error",
        "message": "Avoid excessively long variable names like show_all_inline_media",
        "source": "LongVariable"
      },
      {
        "line": 357,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'show_all_inline_media'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 357,
        "column": 27,
        "type": "error",
        "message": "The field name 'show_all_inline_media' doesn't match '[a-z][a-zA-Z0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 360,
        "column": 10,
        "type": "error",
        "message": "Avoid short class names like Feed",
        "source": "ShortClassName"
      },
      {
        "line": 360,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Feed'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 361,
        "column": 26,
        "type": "error",
        "message": "Avoid variables with short names like id",
        "source": "ShortVariable"
      },
      {
        "line": 361,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'id'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 362,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'title'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 363,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'description'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 364,
        "column": 19,
        "type": "error",
        "message": "The String literal \"alternate\" appears 4 times in this file; the first occurrence is on line 364",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 364,
        "column": 72,
        "type": "error",
        "message": "Missing commented default access modifier on field 'alternates'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 365,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'updated'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 366,
        "column": 30,
        "type": "error",
        "message": "Missing commented default access modifier on field 'items'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 369,
        "column": 21,
        "type": "error",
        "message": "Local variable 'result' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 375,
        "column": 11,
        "type": "error",
        "message": "Avoid variables with short names like i",
        "source": "ShortVariable"
      },
      {
        "line": 376,
        "column": 17,
        "type": "error",
        "message": "Local variable 'item' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 383,
        "column": 10,
        "type": "error",
        "message": "Avoid short class names like Link",
        "source": "ShortClassName"
      },
      {
        "line": 383,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Link'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 384,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'href'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 391,
        "column": 10,
        "type": "error",
        "message": "Avoid short class names like Item",
        "source": "ShortClassName"
      },
      {
        "line": 391,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Item'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 392,
        "column": 32,
        "type": "error",
        "message": "Missing commented default access modifier on field 'categories'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 393,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'title'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 394,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'published'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 395,
        "column": 24,
        "type": "error",
        "message": "Missing commented default access modifier on field 'updated'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 396,
        "column": 72,
        "type": "error",
        "message": "Missing commented default access modifier on field 'alternates'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 397,
        "column": 27,
        "type": "error",
        "message": "Missing commented default access modifier on field 'content'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 398,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'author'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 399,
        "column": 36,
        "type": "error",
        "message": "Missing commented default access modifier on field 'likingUsers'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 413,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'Content'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 414,
        "column": 26,
        "type": "error",
        "message": "It is somewhat confusing to have a field name matching the declaring class name",
        "source": "AvoidFieldNameMatchingTypeName"
      },
      {
        "line": 414,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'content'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 421,
        "column": 10,
        "type": "error",
        "message": "Missing commented default access modifier on nested class 'ReaderUser'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 422,
        "column": 26,
        "type": "error",
        "message": "Missing commented default access modifier on field 'userId'",
        "source": "CommentDefaultAccessModifier"
      }
    ]
  },
  {
    "file": "/workspace/repo/metrics/src/main/java/com/google/gson/metrics/SerializationBenchmark.java",
    "score": 7.5,
    "error_count": 5,
    "messages": [
      {
        "line": 30,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 37,
        "column": 36,
        "type": "error",
        "message": "Parameter 'args' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 42,
        "column": 8,
        "type": "error",
        "message": "Missing commented default access modifier on method 'setUp()'",
        "source": "CommentDefaultAccessModifier"
      },
      {
        "line": 42,
        "column": 16,
        "type": "error",
        "message": "A method/constructor should not explicitly throw java.lang.Exception",
        "source": "SignatureDeclareThrowsException"
      },
      {
        "line": 47,
        "column": 43,
        "type": "error",
        "message": "Parameter 'reps' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/proto/src/main/java/com/google/gson/protobuf/ProtoTypeAdapter.java",
    "score": 0.0,
    "error_count": 105,
    "messages": [
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "A high number of imports can indicate a high degree of coupling within an object.",
        "source": "ExcessiveImports"
      },
      {
        "line": 17,
        "column": 1,
        "type": "error",
        "message": "High amount of different objects as members denotes a high coupling",
        "source": "CouplingBetweenObjects"
      },
      {
        "line": 72,
        "column": 8,
        "type": "error",
        "message": "Possible God Class (WMC=48, ATFD=37, TCC=10.714%)",
        "source": "GodClass"
      },
      {
        "line": 72,
        "column": 8,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 90,
        "column": 17,
        "type": "error",
        "message": "This class has only private constructors and may be final",
        "source": "ClassWithOnlyPrivateConstructorsShouldBeFinal"
      },
      {
        "line": 91,
        "column": 56,
        "type": "error",
        "message": "Avoid excessively long variable names like serializedNameExtensions",
        "source": "LongVariable"
      },
      {
        "line": 92,
        "column": 60,
        "type": "error",
        "message": "Avoid excessively long variable names like serializedEnumValueExtensions",
        "source": "LongVariable"
      },
      {
        "line": 97,
        "column": 39,
        "type": "error",
        "message": "Parameter 'enumSerialization' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 97,
        "column": 69,
        "type": "error",
        "message": "Avoid excessively long variable names like fromFieldNameFormat",
        "source": "LongVariable"
      },
      {
        "line": 97,
        "column": 69,
        "type": "error",
        "message": "Parameter 'fromFieldNameFormat' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 98,
        "column": 20,
        "type": "error",
        "message": "Parameter 'toFieldNameFormat' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 101,
        "column": 7,
        "type": "error",
        "message": "Overridable method called during object construction: Builder.setEnumSerialization(EnumSerialization)",
        "source": "ConstructorCallsOverridableMethod"
      },
      {
        "line": 102,
        "column": 7,
        "type": "error",
        "message": "Overridable method called during object construction: Builder.setFieldNameSerializationFormat(CaseFormat, CaseFormat)",
        "source": "ConstructorCallsOverridableMethod"
      },
      {
        "line": 105,
        "column": 20,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setEnumSerialization' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 105,
        "column": 59,
        "type": "error",
        "message": "Parameter 'enumSerialization' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 125,
        "column": 20,
        "type": "error",
        "message": "Linguistics Antipattern - The setter 'setFieldNameSerializationFormat' should not return any type except void linguistically",
        "source": "LinguisticNaming"
      },
      {
        "line": 125,
        "column": 63,
        "type": "error",
        "message": "Avoid excessively long variable names like fromFieldNameFormat",
        "source": "LongVariable"
      },
      {
        "line": 125,
        "column": 63,
        "type": "error",
        "message": "Parameter 'fromFieldNameFormat' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 126,
        "column": 20,
        "type": "error",
        "message": "Parameter 'toFieldNameFormat' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 145,
        "column": 41,
        "type": "error",
        "message": "Avoid excessively long variable names like serializedNameExtension",
        "source": "LongVariable"
      },
      {
        "line": 145,
        "column": 41,
        "type": "error",
        "message": "Parameter 'serializedNameExtension' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 170,
        "column": 45,
        "type": "error",
        "message": "Avoid excessively long variable names like serializedEnumValueExtension",
        "source": "LongVariable"
      },
      {
        "line": 170,
        "column": 45,
        "type": "error",
        "message": "Parameter 'serializedEnumValueExtension' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 190,
        "column": 77,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 193,
        "column": 79,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 193,
        "column": 79,
        "type": "error",
        "message": "The constant name 'mapOfMapOfMethods' doesn't match '[A-Z][A-Z_0-9]*'",
        "source": "FieldNamingConventions"
      },
      {
        "line": 196,
        "column": 35,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 197,
        "column": 28,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 198,
        "column": 28,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 199,
        "column": 54,
        "type": "error",
        "message": "Avoid excessively long variable names like serializedNameExtensions",
        "source": "LongVariable"
      },
      {
        "line": 199,
        "column": 54,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 200,
        "column": 58,
        "type": "error",
        "message": "Avoid excessively long variable names like serializedEnumValueExtensions",
        "source": "LongVariable"
      },
      {
        "line": 200,
        "column": 58,
        "type": "error",
        "message": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "source": "FieldDeclarationsShouldBeAtStartOfClass"
      },
      {
        "line": 202,
        "column": 46,
        "type": "error",
        "message": "Parameter 'enumSerialization' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 203,
        "column": 18,
        "type": "error",
        "message": "Parameter 'protoFormat' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 204,
        "column": 18,
        "type": "error",
        "message": "Parameter 'jsonFormat' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 205,
        "column": 44,
        "type": "error",
        "message": "Avoid excessively long variable names like serializedNameExtensions",
        "source": "LongVariable"
      },
      {
        "line": 205,
        "column": 44,
        "type": "error",
        "message": "Parameter 'serializedNameExtensions' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 206,
        "column": 48,
        "type": "error",
        "message": "Avoid excessively long variable names like serializedEnumValueExtensions",
        "source": "LongVariable"
      },
      {
        "line": 206,
        "column": 48,
        "type": "error",
        "message": "Parameter 'serializedEnumValueExtensions' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 215,
        "column": 40,
        "type": "error",
        "message": "Parameter 'src' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 216,
        "column": 32,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 217,
        "column": 16,
        "type": "error",
        "message": "Local variable 'ret' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 220,
        "column": 45,
        "type": "error",
        "message": "Local variable 'fieldPair' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 222,
        "column": 14,
        "type": "error",
        "message": "Local variable 'name' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 224,
        "column": 11,
        "type": "error",
        "message": "Call to `getType` on foreign value `desc` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 228,
        "column": 21,
        "type": "error",
        "message": "Local variable 'array' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 230,
        "column": 43,
        "type": "error",
        "message": "Local variable 'enumDescs' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 232,
        "column": 36,
        "type": "error",
        "message": "Local variable 'enumDesc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 237,
        "column": 31,
        "type": "error",
        "message": "Local variable 'enumDesc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 237,
        "column": 42,
        "type": "error",
        "message": "Useless parentheses.",
        "source": "UselessParentheses"
      },
      {
        "line": 248,
        "column": 18,
        "type": "error",
        "message": "The method 'deserialize(JsonElement, Type, JsonDeserializationContext)' has a cognitive complexity of 26, current threshold is 15",
        "source": "CognitiveComplexity"
      },
      {
        "line": 248,
        "column": 18,
        "type": "error",
        "message": "The method 'deserialize(JsonElement, Type, JsonDeserializationContext)' has a cyclomatic complexity of 22.",
        "source": "CyclomaticComplexity"
      },
      {
        "line": 248,
        "column": 42,
        "type": "error",
        "message": "Parameter 'json' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 248,
        "column": 53,
        "type": "error",
        "message": "Parameter 'typeOfT' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 249,
        "column": 34,
        "type": "error",
        "message": "Parameter 'context' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 249,
        "column": 50,
        "type": "error",
        "message": "A method or constructor should not explicitly declare unchecked exceptions in its 'throws' clause",
        "source": "AvoidUncheckedExceptionsInSignatures"
      },
      {
        "line": 251,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jsonObject' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 253,
        "column": 32,
        "type": "error",
        "message": "Local variable 'protoClass' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 261,
        "column": 25,
        "type": "error",
        "message": "Local variable 'protoBuilder' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 264,
        "column": 17,
        "type": "error",
        "message": "Local variable 'defaultInstance' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 267,
        "column": 20,
        "type": "error",
        "message": "Local variable 'protoDescriptor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 270,
        "column": 30,
        "type": "error",
        "message": "Local variable 'fieldDescriptor' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 271,
        "column": 18,
        "type": "error",
        "message": "Local variable 'jsonFieldName' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 274,
        "column": 23,
        "type": "error",
        "message": "Local variable 'jsonElement' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 278,
        "column": 17,
        "type": "error",
        "message": "Call to `getType` on foreign value `fieldDescriptor` (degree 1)",
        "source": "LawOfDemeter"
      },
      {
        "line": 281,
        "column": 49,
        "type": "error",
        "message": "Local variable 'enumCollection' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 283,
        "column": 34,
        "type": "error",
        "message": "Local variable 'element' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 297,
        "column": 22,
        "type": "error",
        "message": "Avoid excessively long variable names like protoArrayFieldName",
        "source": "LongVariable"
      },
      {
        "line": 297,
        "column": 22,
        "type": "error",
        "message": "Local variable 'protoArrayFieldName' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 299,
        "column": 21,
        "type": "error",
        "message": "Local variable 'protoArrayField' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 300,
        "column": 20,
        "type": "error",
        "message": "Avoid excessively long variable names like protoArrayFieldType",
        "source": "LongVariable"
      },
      {
        "line": 300,
        "column": 20,
        "type": "error",
        "message": "Local variable 'protoArrayFieldType' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 304,
        "column": 22,
        "type": "error",
        "message": "Local variable 'field' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 313,
        "column": 9,
        "type": "error",
        "message": "'catch' branch identical to 'SecurityException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 315,
        "column": 9,
        "type": "error",
        "message": "'catch' branch identical to 'SecurityException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 317,
        "column": 9,
        "type": "error",
        "message": "'catch' branch identical to 'SecurityException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 319,
        "column": 9,
        "type": "error",
        "message": "'catch' branch identical to 'SecurityException' branch",
        "source": "IdenticalCatchBranches"
      },
      {
        "line": 322,
        "column": 7,
        "type": "error",
        "message": "Exception thrown at line 256 is caught in this block.",
        "source": "ExceptionAsFlowControl"
      },
      {
        "line": 322,
        "column": 7,
        "type": "error",
        "message": "Exception thrown at line 312 is caught in this block.",
        "source": "ExceptionAsFlowControl"
      },
      {
        "line": 322,
        "column": 7,
        "type": "error",
        "message": "Exception thrown at line 314 is caught in this block.",
        "source": "ExceptionAsFlowControl"
      },
      {
        "line": 322,
        "column": 7,
        "type": "error",
        "message": "Exception thrown at line 316 is caught in this block.",
        "source": "ExceptionAsFlowControl"
      },
      {
        "line": 322,
        "column": 7,
        "type": "error",
        "message": "Exception thrown at line 318 is caught in this block.",
        "source": "ExceptionAsFlowControl"
      },
      {
        "line": 322,
        "column": 7,
        "type": "error",
        "message": "Exception thrown at line 320 is caught in this block.",
        "source": "ExceptionAsFlowControl"
      },
      {
        "line": 322,
        "column": 14,
        "type": "error",
        "message": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "source": "AvoidCatchingGenericException"
      },
      {
        "line": 331,
        "column": 53,
        "type": "error",
        "message": "Parameter 'options' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 331,
        "column": 69,
        "type": "error",
        "message": "Parameter 'defaultName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 332,
        "column": 42,
        "type": "error",
        "message": "Local variable 'extension' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 334,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 344,
        "column": 62,
        "type": "error",
        "message": "Parameter 'options' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 344,
        "column": 78,
        "type": "error",
        "message": "Parameter 'defaultValue' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 345,
        "column": 46,
        "type": "error",
        "message": "Local variable 'extension' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 347,
        "column": 9,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 357,
        "column": 51,
        "type": "error",
        "message": "Parameter 'enumDesc' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 359,
        "column": 7,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 373,
        "column": 74,
        "type": "error",
        "message": "Parameter 'desc' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 374,
        "column": 19,
        "type": "error",
        "message": "Parameter 'jsonElement' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 377,
        "column": 32,
        "type": "error",
        "message": "Local variable 'enumDesc' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 378,
        "column": 16,
        "type": "error",
        "message": "Local variable 'enumValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 380,
        "column": 11,
        "type": "error",
        "message": "A method should have only one exit point, and that should be the last statement in the method",
        "source": "OnlyOneReturn"
      },
      {
        "line": 387,
        "column": 27,
        "type": "error",
        "message": "Local variable 'fieldValue' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 396,
        "column": 50,
        "type": "error",
        "message": "Parameter 'clazz' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 396,
        "column": 64,
        "type": "error",
        "message": "Parameter 'methodName' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 397,
        "column": 19,
        "type": "error",
        "message": "Parameter 'methodParamTypes' is not assigned and could be declared final",
        "source": "MethodArgumentCouldBeFinal"
      },
      {
        "line": 401,
        "column": 39,
        "type": "error",
        "message": "Local variable 'previous' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithAnnotationsTest.java",
    "score": 0.0,
    "error_count": 41,
    "messages": [
      {
        "line": 18,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'com.google.common.truth.Truth.assertThat'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 19,
        "column": 1,
        "type": "error",
        "message": "Unused static import 'com.google.common.truth.Truth.assertWithMessage'",
        "source": "UnnecessaryImport"
      },
      {
        "line": 41,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 43,
        "column": 16,
        "type": "error",
        "message": "Avoid excessively long variable names like gsonWithEnumNumbers",
        "source": "LongVariable"
      },
      {
        "line": 44,
        "column": 16,
        "type": "error",
        "message": "Avoid excessively long variable names like gsonWithLowerHyphen",
        "source": "LongVariable"
      },
      {
        "line": 49,
        "column": 30,
        "type": "error",
        "message": "Local variable 'protoTypeAdapter' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 68,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 68,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testProtoWithAnnotations_deserialize' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 68,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 68,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 69,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 33,
        "type": "error",
        "message": "The String literal \"{  %n\" appears 5 times in this file; the first occurrence is on line 69",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 102,
        "column": 26,
        "type": "error",
        "message": "Local variable 'proto' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 107,
        "column": 27,
        "type": "error",
        "message": "Number 9864653135687L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 112,
        "column": 19,
        "type": "error",
        "message": "Number 98798465 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 119,
        "column": 24,
        "type": "error",
        "message": "Number 56684 should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 122,
        "column": 12,
        "type": "error",
        "message": "Local variable 'rebuilt' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 145,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 145,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testProtoWithAnnotations_deserializeUnknownEnumValue' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 145,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 146,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 149,
        "column": 18,
        "type": "error",
        "message": "Local variable 'proto' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testProtoWithAnnotations_deserializeUnrecognizedEnumValue' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 153,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 154,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 157,
        "column": 5,
        "type": "error",
        "message": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "source": "JUnitUseExpected"
      },
      {
        "line": 160,
        "column": 7,
        "type": "error",
        "message": "Avoid empty catch blocks",
        "source": "EmptyCatchBlock"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testProtoWithAnnotations_deserializeWithEnumNumbers' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 165,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 183,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 183,
        "column": 15,
        "type": "error",
        "message": "The JUnit 3 test method name 'testProtoWithAnnotations_serialize' doesn't match 'test[A-Z0-9][a-zA-Z0-9]*'",
        "source": "MethodNamingConventions"
      },
      {
        "line": 183,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 183,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 184,
        "column": 26,
        "type": "error",
        "message": "Local variable 'proto' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 189,
        "column": 31,
        "type": "error",
        "message": "Number 468406876880768L should separate every third digit with an underscore",
        "source": "UseUnderscoresInNumericLiterals"
      },
      {
        "line": 200,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 223,
        "column": 26,
        "type": "error",
        "message": "Local variable 'rebuilt' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java",
    "score": 0.0,
    "error_count": 20,
    "messages": [
      {
        "line": 35,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 59,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 60,
        "column": 29,
        "type": "error",
        "message": "Local variable 'proto' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 51,
        "type": "error",
        "message": "The String literal \"foo\" appears 5 times in this file; the first occurrence is on line 63",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 66,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 72,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 73,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 74,
        "column": 29,
        "type": "error",
        "message": "Local variable 'proto' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 78,
        "column": 18,
        "type": "error",
        "message": "The String literal \"bar\" appears 4 times in this file; the first occurrence is on line 78",
        "source": "AvoidDuplicateLiterals"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 82,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 93,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 95,
        "column": 34,
        "type": "error",
        "message": "Local variable 'proto' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  },
  {
    "file": "/workspace/repo/proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java",
    "score": 0.0,
    "error_count": 23,
    "messages": [
      {
        "line": 27,
        "column": 8,
        "type": "error",
        "message": "Each class should declare at least one constructor",
        "source": "AtLeastOneConstructor"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 40,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 41,
        "column": 17,
        "type": "error",
        "message": "Local variable 'proto' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 42,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 46,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 47,
        "column": 17,
        "type": "error",
        "message": "Local variable 'proto' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 52,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 53,
        "column": 16,
        "type": "error",
        "message": "Avoid unused local variables such as 'descriptor'.",
        "source": "UnusedLocalVariable"
      },
      {
        "line": 54,
        "column": 17,
        "type": "error",
        "message": "Local variable 'proto' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 58,
        "column": 12,
        "type": "error",
        "message": "Local variable 'json' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 63,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 64,
        "column": 17,
        "type": "error",
        "message": "Local variable 'proto' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Probable detached JUnit test case.",
        "source": "DetachedTestCase"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Unit tests should not contain more than 1 assert(s).",
        "source": "JUnitTestContainsTooManyAsserts"
      },
      {
        "line": 69,
        "column": 15,
        "type": "error",
        "message": "Unit tests that execute tests should use the @Test annotation. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "source": "JUnit4TestShouldUseTestAnnotation"
      },
      {
        "line": 70,
        "column": 17,
        "type": "error",
        "message": "Local variable 'proto' could be declared final",
        "source": "LocalVariableCouldBeFinal"
      }
    ]
  }
]