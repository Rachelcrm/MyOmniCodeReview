{"org": "facebook", "repo": "zstd", "number": 3942, "fix_patch": "diff --git a/programs/zstd.1.md b/programs/zstd.1.md\nindex c5d0ef70a36..646e3cf28eb 100644\n--- a/programs/zstd.1.md\n+++ b/programs/zstd.1.md\n@@ -225,15 +225,17 @@ the last one takes effect.\n     This parameter defines a loose target: compressed blocks will target this size \"on average\", but individual blocks can still be larger or smaller.\n     Enabling this feature can decrease compression speed by up to ~10% at level 1.\n     Higher levels will see smaller relative speed regression, becoming invisible at higher settings.\n-* `-o FILE`:\n-    save result into `FILE`.\n * `-f`, `--force`:\n     disable input and output checks. Allows overwriting existing files, input\n     from console, output to stdout, operating on links, block devices, etc.\n     During decompression and when the output destination is stdout, pass-through\n     unrecognized formats as-is.\n * `-c`, `--stdout`:\n-    write to standard output (even if it is the console); keep original files unchanged.\n+    write to standard output (even if it is the console); keep original files (disable `--rm`).\n+* `-o FILE`:\n+    save result into `FILE`.\n+    Note that this operation is in conflict with `-c`.\n+    If both operations are present on the command line, the last expressed one wins.\n * `--[no-]sparse`:\n     enable / disable sparse FS support,\n     to make files with many zeroes smaller on disk.\ndiff --git a/programs/zstdcli.c b/programs/zstdcli.c\nindex 1cb16ef50e7..9dd6b051a7b 100644\n--- a/programs/zstdcli.c\n+++ b/programs/zstdcli.c\n@@ -962,7 +962,7 @@ int main(int argCount, const char* argv[])\n                 if (!strcmp(argument, \"--help\")) { usageAdvanced(programName); CLEAN_RETURN(0); }\n                 if (!strcmp(argument, \"--verbose\")) { g_displayLevel++; continue; }\n                 if (!strcmp(argument, \"--quiet\")) { g_displayLevel--; continue; }\n-                if (!strcmp(argument, \"--stdout\")) { forceStdout=1; outFileName=stdoutmark; removeSrcFile=0; continue; }\n+                if (!strcmp(argument, \"--stdout\")) { forceStdout=1; outFileName=stdoutmark; continue; }\n                 if (!strcmp(argument, \"--ultra\")) { ultra=1; continue; }\n                 if (!strcmp(argument, \"--check\")) { FIO_setChecksumFlag(prefs, 2); continue; }\n                 if (!strcmp(argument, \"--no-check\")) { FIO_setChecksumFlag(prefs, 0); continue; }\n@@ -1176,7 +1176,10 @@ int main(int argCount, const char* argv[])\n                         operation=zom_decompress; argument++; break;\n \n                     /* Force stdout, even if stdout==console */\n-                case 'c': forceStdout=1; outFileName=stdoutmark; removeSrcFile=0; argument++; break;\n+                case 'c': forceStdout=1; outFileName=stdoutmark; argument++; break;\n+\n+                    /* destination file name */\n+                case 'o': argument++; NEXT_FIELD(outFileName); break;\n \n                     /* do not store filename - gzip compatibility - nothing to do */\n                 case 'n': argument++; break;\n@@ -1202,9 +1205,6 @@ int main(int argCount, const char* argv[])\n                     /* test compressed file */\n                 case 't': operation=zom_test; argument++; break;\n \n-                    /* destination file name */\n-                case 'o': argument++; NEXT_FIELD(outFileName); break;\n-\n                     /* limit memory */\n                 case 'M':\n                     argument++;\n"}
{"org": "facebook", "repo": "zstd", "number": 3530, "fix_patch": "diff --git a/lib/compress/zstd_compress.c b/lib/compress/zstd_compress.c\nindex dc70dfbd82e..72108311ace 100644\n--- a/lib/compress/zstd_compress.c\n+++ b/lib/compress/zstd_compress.c\n@@ -1178,16 +1178,39 @@ size_t ZSTD_CCtx_setParametersUsingCCtxParams(\n \n size_t ZSTD_CCtx_setCParams(ZSTD_CCtx* cctx, ZSTD_compressionParameters cparams)\n {\n+    ZSTD_STATIC_ASSERT(sizeof(cparams) == 7 * 4 /* all params are listed below */);\n     DEBUGLOG(4, \"ZSTD_CCtx_setCParams\");\n-    assert(cctx != NULL);\n-    if (cctx->streamStage != zcss_init) {\n-        /* All parameters in @cparams are allowed to be updated during MT compression.\n-         * This must be signaled, so that MT compression picks up the changes */\n-        cctx->cParamsChanged = 1;\n-    }\n-    /* only update if parameters are valid */\n+    /* only update if all parameters are valid */\n     FORWARD_IF_ERROR(ZSTD_checkCParams(cparams), \"\");\n-    cctx->requestedParams.cParams = cparams;\n+    FORWARD_IF_ERROR(ZSTD_CCtx_setParameter(cctx, ZSTD_c_windowLog, cparams.windowLog), \"\");\n+    FORWARD_IF_ERROR(ZSTD_CCtx_setParameter(cctx, ZSTD_c_chainLog, cparams.chainLog), \"\");\n+    FORWARD_IF_ERROR(ZSTD_CCtx_setParameter(cctx, ZSTD_c_hashLog, cparams.hashLog), \"\");\n+    FORWARD_IF_ERROR(ZSTD_CCtx_setParameter(cctx, ZSTD_c_searchLog, cparams.searchLog), \"\");\n+    FORWARD_IF_ERROR(ZSTD_CCtx_setParameter(cctx, ZSTD_c_minMatch, cparams.minMatch), \"\");\n+    FORWARD_IF_ERROR(ZSTD_CCtx_setParameter(cctx, ZSTD_c_targetLength, cparams.targetLength), \"\");\n+    FORWARD_IF_ERROR(ZSTD_CCtx_setParameter(cctx, ZSTD_c_strategy, cparams.strategy), \"\");\n+    return 0;\n+}\n+\n+size_t ZSTD_CCtx_setFParams(ZSTD_CCtx* cctx, ZSTD_frameParameters fparams)\n+{\n+    ZSTD_STATIC_ASSERT(sizeof(fparams) == 3 * 4 /* all params are listed below */);\n+    DEBUGLOG(4, \"ZSTD_CCtx_setFParams\");\n+    FORWARD_IF_ERROR(ZSTD_CCtx_setParameter(cctx, ZSTD_c_contentSizeFlag, fparams.contentSizeFlag != 0), \"\");\n+    FORWARD_IF_ERROR(ZSTD_CCtx_setParameter(cctx, ZSTD_c_checksumFlag, fparams.checksumFlag != 0), \"\");\n+    FORWARD_IF_ERROR(ZSTD_CCtx_setParameter(cctx, ZSTD_c_dictIDFlag, fparams.noDictIDFlag == 0), \"\");\n+    return 0;\n+}\n+\n+size_t ZSTD_CCtx_setParams(ZSTD_CCtx* cctx, ZSTD_parameters params)\n+{\n+    DEBUGLOG(4, \"ZSTD_CCtx_setParams\");\n+    /* First check cParams, because we want to update all or none. */\n+    FORWARD_IF_ERROR(ZSTD_checkCParams(params.cParams), \"\");\n+    /* Next set fParams, because this could fail if the cctx isn't in init stage. */\n+    FORWARD_IF_ERROR(ZSTD_CCtx_setFParams(cctx, params.fParams), \"\");\n+    /* Finally set cParams, which should succeed. */\n+    FORWARD_IF_ERROR(ZSTD_CCtx_setCParams(cctx, params.cParams), \"\");\n     return 0;\n }\n \ndiff --git a/lib/zstd.h b/lib/zstd.h\nindex 6c0c8eecbfe..56c43624a85 100644\n--- a/lib/zstd.h\n+++ b/lib/zstd.h\n@@ -1803,12 +1803,26 @@ ZSTDLIB_STATIC_API size_t ZSTD_checkCParams(ZSTD_compressionParameters params);\n ZSTDLIB_STATIC_API ZSTD_compressionParameters ZSTD_adjustCParams(ZSTD_compressionParameters cPar, unsigned long long srcSize, size_t dictSize);\n \n /*! ZSTD_CCtx_setCParams() :\n- *  Set all parameters provided within @cparams into the working @cctx.\n+ *  Set all parameters provided within @p cparams into the working @p cctx.\n  *  Note : if modifying parameters during compression (MT mode only),\n  *         note that changes to the .windowLog parameter will be ignored.\n- * @return 0 on success, or an error code (can be checked with ZSTD_isError()) */\n+ * @return 0 on success, or an error code (can be checked with ZSTD_isError()).\n+ *         On failure, no parameters are updated.\n+ */\n ZSTDLIB_STATIC_API size_t ZSTD_CCtx_setCParams(ZSTD_CCtx* cctx, ZSTD_compressionParameters cparams);\n \n+/*! ZSTD_CCtx_setFParams() :\n+ *  Set all parameters provided within @p fparams into the working @p cctx.\n+ * @return 0 on success, or an error code (can be checked with ZSTD_isError()).\n+ */\n+ZSTDLIB_STATIC_API size_t ZSTD_CCtx_setFParams(ZSTD_CCtx* cctx, ZSTD_frameParameters fparams);\n+\n+/*! ZSTD_CCtx_setParams() :\n+ *  Set all parameters provided within @p params into the working @p cctx.\n+ * @return 0 on success, or an error code (can be checked with ZSTD_isError()).\n+ */\n+ZSTDLIB_STATIC_API size_t ZSTD_CCtx_setParams(ZSTD_CCtx* cctx, ZSTD_parameters params);\n+\n /*! ZSTD_compress_advanced() :\n  *  Note : this function is now DEPRECATED.\n  *         It can be replaced by ZSTD_compress2(), in combination with ZSTD_CCtx_setParameter() and other parameter setters.\n@@ -2452,12 +2466,9 @@ size_t ZSTD_initCStream_usingDict(ZSTD_CStream* zcs,\n                            int compressionLevel);\n \n /*! ZSTD_initCStream_advanced() :\n- * This function is DEPRECATED, and is approximately equivalent to:\n+ * This function is DEPRECATED, and is equivalent to:\n  *     ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);\n- *     // Pseudocode: Set each zstd parameter and leave the rest as-is.\n- *     for ((param, value) : params) {\n- *         ZSTD_CCtx_setParameter(zcs, param, value);\n- *     }\n+ *     ZSTD_CCtx_setParams(zcs, params);\n  *     ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);\n  *     ZSTD_CCtx_loadDictionary(zcs, dict, dictSize);\n  *\n@@ -2486,12 +2497,9 @@ ZSTDLIB_STATIC_API\n size_t ZSTD_initCStream_usingCDict(ZSTD_CStream* zcs, const ZSTD_CDict* cdict);\n \n /*! ZSTD_initCStream_usingCDict_advanced() :\n- *   This function is DEPRECATED, and is approximately equivalent to:\n+ *   This function is DEPRECATED, and is equivalent to:\n  *     ZSTD_CCtx_reset(zcs, ZSTD_reset_session_only);\n- *     // Pseudocode: Set each zstd frame parameter and leave the rest as-is.\n- *     for ((fParam, value) : fParams) {\n- *         ZSTD_CCtx_setParameter(zcs, fParam, value);\n- *     }\n+ *     ZSTD_CCtx_setFParams(zcs, fParams);\n  *     ZSTD_CCtx_setPledgedSrcSize(zcs, pledgedSrcSize);\n  *     ZSTD_CCtx_refCDict(zcs, cdict);\n  *\n"}
{"org": "facebook", "repo": "zstd", "number": 3438, "fix_patch": "diff --git a/lib/compress/zstd_compress.c b/lib/compress/zstd_compress.c\nindex 3a48e7dcd48..e0bcbfb165b 100644\n--- a/lib/compress/zstd_compress.c\n+++ b/lib/compress/zstd_compress.c\n@@ -1412,7 +1412,8 @@ static ZSTD_compressionParameters\n ZSTD_adjustCParams_internal(ZSTD_compressionParameters cPar,\n                             unsigned long long srcSize,\n                             size_t dictSize,\n-                            ZSTD_cParamMode_e mode)\n+                            ZSTD_cParamMode_e mode,\n+                            ZSTD_paramSwitch_e useRowMatchFinder)\n {\n     const U64 minSrcSize = 513; /* (1<<9) + 1 */\n     const U64 maxWindowResize = 1ULL << (ZSTD_WINDOWLOG_MAX-1);\n@@ -1465,11 +1466,40 @@ ZSTD_adjustCParams_internal(ZSTD_compressionParameters cPar,\n     if (cPar.windowLog < ZSTD_WINDOWLOG_ABSOLUTEMIN)\n         cPar.windowLog = ZSTD_WINDOWLOG_ABSOLUTEMIN;  /* minimum wlog required for valid frame header */\n \n+    /* We can't use more than 32 bits of hash in total, so that means that we require:\n+     * (hashLog + 8) <= 32 && (chainLog + 8) <= 32\n+     */\n     if (mode == ZSTD_cpm_createCDict && ZSTD_CDictIndicesAreTagged(&cPar)) {\n         U32 const maxShortCacheHashLog = 32 - ZSTD_SHORT_CACHE_TAG_BITS;\n         if (cPar.hashLog > maxShortCacheHashLog) {\n             cPar.hashLog = maxShortCacheHashLog;\n         }\n+        if (cPar.chainLog > maxShortCacheHashLog) {\n+            cPar.chainLog = maxShortCacheHashLog;\n+        }\n+    }\n+\n+\n+    /* At this point, we aren't 100% sure if we are using the row match finder.\n+     * Unless it is explicitly disabled, conservatively assume that it is enabled.\n+     * In this case it will only be disabled for small sources, so shrinking the\n+     * hash log a little bit shouldn't result in any ratio loss.\n+     */\n+    if (useRowMatchFinder == ZSTD_ps_auto)\n+        useRowMatchFinder = ZSTD_ps_enable;\n+\n+    /* We can't hash more than 32-bits in total. So that means that we require:\n+     * (hashLog - rowLog + 8) <= 32\n+     */\n+    if (ZSTD_rowMatchFinderUsed(cPar.strategy, useRowMatchFinder)) {\n+        /* Switch to 32-entry rows if searchLog is 5 (or more) */\n+        U32 const rowLog = BOUNDED(4, cPar.searchLog, 6);\n+        U32 const maxRowHashLog = 32 - ZSTD_ROW_HASH_TAG_BITS;\n+        U32 const maxHashLog = maxRowHashLog + rowLog;\n+        assert(cPar.hashLog >= rowLog);\n+        if (cPar.hashLog > maxHashLog) {\n+            cPar.hashLog = maxHashLog;\n+        }\n     }\n \n     return cPar;\n@@ -1482,7 +1512,7 @@ ZSTD_adjustCParams(ZSTD_compressionParameters cPar,\n {\n     cPar = ZSTD_clampCParams(cPar);   /* resulting cPar is necessarily valid (all parameters within range) */\n     if (srcSize == 0) srcSize = ZSTD_CONTENTSIZE_UNKNOWN;\n-    return ZSTD_adjustCParams_internal(cPar, srcSize, dictSize, ZSTD_cpm_unknown);\n+    return ZSTD_adjustCParams_internal(cPar, srcSize, dictSize, ZSTD_cpm_unknown, ZSTD_ps_auto);\n }\n \n static ZSTD_compressionParameters ZSTD_getCParams_internal(int compressionLevel, unsigned long long srcSizeHint, size_t dictSize, ZSTD_cParamMode_e mode);\n@@ -1513,7 +1543,7 @@ ZSTD_compressionParameters ZSTD_getCParamsFromCCtxParams(\n     ZSTD_overrideCParams(&cParams, &CCtxParams->cParams);\n     assert(!ZSTD_checkCParams(cParams));\n     /* srcSizeHint == 0 means 0 */\n-    return ZSTD_adjustCParams_internal(cParams, srcSizeHint, dictSize, mode);\n+    return ZSTD_adjustCParams_internal(cParams, srcSizeHint, dictSize, mode, CCtxParams->useRowMatchFinder);\n }\n \n static size_t\n@@ -2185,7 +2215,8 @@ ZSTD_resetCCtx_byAttachingCDict(ZSTD_CCtx* cctx,\n         }\n \n         params.cParams = ZSTD_adjustCParams_internal(adjusted_cdict_cParams, pledgedSrcSize,\n-                                                     cdict->dictContentSize, ZSTD_cpm_attachDict);\n+                                                     cdict->dictContentSize, ZSTD_cpm_attachDict,\n+                                                     params.useRowMatchFinder);\n         params.cParams.windowLog = windowLog;\n         params.useRowMatchFinder = cdict->useRowMatchFinder;    /* cdict overrides */\n         FORWARD_IF_ERROR(ZSTD_resetCCtx_internal(cctx, &params, pledgedSrcSize,\n@@ -6740,7 +6771,7 @@ static ZSTD_compressionParameters ZSTD_getCParams_internal(int compressionLevel,\n             cp.targetLength = (unsigned)(-clampedCompressionLevel);\n         }\n         /* refine parameters based on srcSize & dictSize */\n-        return ZSTD_adjustCParams_internal(cp, srcSizeHint, dictSize, mode);\n+        return ZSTD_adjustCParams_internal(cp, srcSizeHint, dictSize, mode, ZSTD_ps_auto);\n     }\n }\n \ndiff --git a/lib/compress/zstd_lazy.c b/lib/compress/zstd_lazy.c\nindex 810bf011cfb..a2473427299 100644\n--- a/lib/compress/zstd_lazy.c\n+++ b/lib/compress/zstd_lazy.c\n@@ -759,7 +759,6 @@ size_t ZSTD_HcFindBestMatch(\n ***********************************/\n /* Constants for row-based hash */\n #define ZSTD_ROW_HASH_TAG_OFFSET 16     /* byte offset of hashes in the match state's tagTable from the beginning of a row */\n-#define ZSTD_ROW_HASH_TAG_BITS 8        /* nb bits to use for the tag */\n #define ZSTD_ROW_HASH_TAG_MASK ((1u << ZSTD_ROW_HASH_TAG_BITS) - 1)\n #define ZSTD_ROW_HASH_MAX_ENTRIES 64    /* absolute maximum number of entries per row, for all configurations */\n \ndiff --git a/lib/compress/zstd_lazy.h b/lib/compress/zstd_lazy.h\nindex c24f1c794d3..3bde67331e4 100644\n--- a/lib/compress/zstd_lazy.h\n+++ b/lib/compress/zstd_lazy.h\n@@ -25,6 +25,8 @@ extern \"C\" {\n  */\n #define ZSTD_LAZY_DDSS_BUCKET_LOG 2\n \n+#define ZSTD_ROW_HASH_TAG_BITS 8        /* nb bits to use for the tag */\n+\n U32 ZSTD_insertAndFindFirstIndex(ZSTD_matchState_t* ms, const BYTE* ip);\n void ZSTD_row_update(ZSTD_matchState_t* const ms, const BYTE* ip);\n \n@@ -116,7 +118,7 @@ size_t ZSTD_compressBlock_lazy2_extDict_row(\n size_t ZSTD_compressBlock_btlazy2_extDict(\n         ZSTD_matchState_t* ms, seqStore_t* seqStore, U32 rep[ZSTD_REP_NUM],\n         void const* src, size_t srcSize);\n-        \n+\n \n #if defined (__cplusplus)\n }\n"}
