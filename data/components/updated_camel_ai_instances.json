[
  {
    "repo": "camel-ai/camel",
    "pull_number": 1806,
    "instance_id": "camel-ai__camel-1806",
    "issue_numbers": [
      "1803"
    ],
    "base_commit": "03ddc32424b98127f703f0def2e1cf17835a5f34",
    "patch": "diff --git a/camel/toolkits/__init__.py b/camel/toolkits/__init__.py\nindex b7f5ee8595..c892954d53 100644\n--- a/camel/toolkits/__init__.py\n+++ b/camel/toolkits/__init__.py\n@@ -58,6 +58,7 @@\n from .web_toolkit import WebToolkit\n from .file_write_toolkit import FileWriteToolkit\n from .terminal_toolkit import TerminalToolkit\n+from .pubmed_toolkit import PubMedToolkit\n \n \n __all__ = [\n@@ -104,4 +105,5 @@\n     'WebToolkit',\n     'FileWriteToolkit',\n     'TerminalToolkit',\n+    'PubMedToolkit',\n ]\ndiff --git a/camel/toolkits/pubmed_toolkit.py b/camel/toolkits/pubmed_toolkit.py\nnew file mode 100644\nindex 0000000000..e3bd7d3beb\n--- /dev/null\n+++ b/camel/toolkits/pubmed_toolkit.py\n@@ -0,0 +1,346 @@\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+\n+from typing import Any, Dict, List, Optional, Union, cast\n+\n+import requests\n+\n+from camel.logger import get_logger\n+from camel.toolkits import BaseToolkit, FunctionTool\n+\n+logger = get_logger(__name__)\n+\n+\n+class PubMedToolkit(BaseToolkit):\n+    r\"\"\"A toolkit for interacting with PubMed's E-utilities API to access\n+    MEDLINE data.\n+\n+    This toolkit provides functionality to search and retrieve papers from the\n+    PubMed database, including abstracts, citations, and other metadata.\n+\n+    Args:\n+        timeout (Optional[float]): The timeout for API requests in seconds.\n+            (default: :obj:`None`)\n+    \"\"\"\n+\n+    BASE_URL = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils\"\n+\n+    def __init__(self, timeout: Optional[float] = None) -> None:\n+        r\"\"\"Initializes the PubMedToolkit.\"\"\"\n+        super().__init__(timeout=timeout)\n+\n+    def _make_request(\n+        self,\n+        endpoint: str,\n+        params: Dict[str, Union[str, int]],\n+        retries: int = 3,\n+    ) -> Optional[Dict[str, Any]]:\n+        r\"\"\"Makes a request to the PubMed/MEDLINE API with error handling and\n+        retries.\n+\n+        Args:\n+            endpoint (str): The API endpoint to call.\n+            params (Dict[str, Union[str, int]]): Query parameters.\n+            retries (int, optional): Number of retry attempts.\n+                (default: :obj:`3`)\n+\n+        Returns:\n+            Optional[Dict[str, Any]]: JSON response if successful, else None.\n+        \"\"\"\n+        url = f\"{self.BASE_URL}/{endpoint}\"\n+        request_params = cast(Dict[str, Union[str, int]], params)\n+\n+        for attempt in range(retries):\n+            try:\n+                response = requests.get(\n+                    url, params=request_params, timeout=self.timeout\n+                )\n+                response.raise_for_status()\n+\n+                if not response.text:\n+                    logger.warning(\n+                        f\"Empty response from PubMed API: {endpoint}\"\n+                    )\n+                    return None\n+\n+                return response.json()\n+            except requests.RequestException as e:\n+                if attempt == retries - 1:\n+                    logger.error(f\"Failed to fetch data from PubMed: {e!s}\")\n+                    return None\n+                logger.warning(f\"Request attempt {attempt + 1} failed: {e!s}\")\n+            except ValueError as e:\n+                logger.error(f\"Failed to parse JSON response: {e!s}\")\n+                return None\n+        return None\n+\n+    def search_papers(\n+        self,\n+        query: str,\n+        max_results: int = 10,\n+        sort: str = \"relevance\",\n+        date_range: Optional[Dict[str, str]] = None,\n+        publication_type: Optional[List[str]] = None,\n+    ) -> List[Dict[str, str]]:\n+        r\"\"\"Search for biomedical papers in MEDLINE via PubMed with advanced\n+        filtering options.\n+\n+        Args:\n+            query (str): The search query string.\n+            max_results (int, optional): Maximum number of results to return.\n+                (default: :obj:`10`)\n+            sort (str, optional): Sort order - 'relevance' or 'date'.\n+                (default: :obj:`\"relevance\"`)\n+            date_range (Optional[Dict[str, str]], optional): Date range filter\n+                with 'from' and 'to' dates in YYYY/MM/DD format.\n+                (default: :obj:`None`)\n+            publication_type (Optional[List[str]], optional): Filter by\n+                publication types (e.g., [\"Journal Article\", \"Review\"]).\n+                (default: :obj:`None`)\n+\n+        Returns:\n+            List[Dict[str, str]]: List of papers with their metadata.\n+        \"\"\"\n+        # Build query with filters\n+        filtered_query = query\n+        if publication_type:\n+            type_filter = \" OR \".join(\n+                [f'\"{pt}\"[Publication Type]' for pt in publication_type]\n+            )\n+            filtered_query = f\"({query}) AND ({type_filter})\"\n+        if date_range:\n+            date_filter = (\n+                f\"{date_range.get('from', '')}:\"\n+                f\"{date_range.get('to', '')}[Date - Publication]\"\n+            )\n+            filtered_query = f\"({filtered_query}) AND ({date_filter})\"\n+\n+        # Search for paper IDs\n+        search_params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"term\": filtered_query,\n+            \"retmax\": max_results,\n+            \"sort\": \"relevance\" if sort == \"relevance\" else \"pub+date\",\n+            \"retmode\": \"json\",\n+        }\n+\n+        search_data = self._make_request(\"esearch.fcgi\", search_params)\n+        if not search_data or \"esearchresult\" not in search_data:\n+            logger.error(\"Failed to retrieve search results\")\n+            return []\n+\n+        paper_ids = search_data[\"esearchresult\"].get(\"idlist\", [])\n+        if not paper_ids:\n+            return []\n+\n+        # Fetch details for papers\n+        results = []\n+        for paper_id in paper_ids:\n+            paper_details = self.get_paper_details(paper_id)\n+            if paper_details:\n+                results.append(paper_details)\n+\n+        return results\n+\n+    def get_paper_details(\n+        self,\n+        paper_id: Union[str, int],\n+        include_references: bool = False,\n+    ) -> Optional[Dict[str, Any]]:\n+        r\"\"\"Get detailed information about a specific biomedical paper from\n+        MEDLINE/PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+            include_references (bool, optional): Whether to include referenced\n+                papers. (default: :obj:`False`)\n+\n+        Returns:\n+            Optional[Dict[str, Any]]: Paper details including title, authors,\n+                abstract, etc., or None if retrieval fails.\n+        \"\"\"\n+        # Fetch summary\n+        summary_params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"retmode\": \"json\",\n+        }\n+        summary_data = self._make_request(\"esummary.fcgi\", summary_params)\n+\n+        if not summary_data or \"result\" not in summary_data:\n+            logger.error(\n+                f\"Failed to retrieve paper details for ID: {paper_id}\"\n+            )\n+            return None\n+\n+        paper_data = summary_data[\"result\"][str(paper_id)]\n+\n+        # Handle authors - they come as a list of dicts with 'name' key\n+        authors = paper_data.get(\"authors\", [])\n+        author_names = []\n+        for author in authors:\n+            if isinstance(author, dict) and \"name\" in author:\n+                author_names.append(author[\"name\"])\n+            elif isinstance(author, str):\n+                author_names.append(author)\n+\n+        # Get abstract\n+        abstract = self.get_abstract(paper_id)\n+\n+        # Get references if requested\n+        references = []\n+        if include_references:\n+            ref_params: Dict[str, Union[str, int]] = {\n+                \"db\": \"pubmed\",\n+                \"id\": str(paper_id),\n+                \"linkname\": \"pubmed_pubmed_refs\",\n+                \"retmode\": \"json\",\n+            }\n+            ref_data = self._make_request(\"elink.fcgi\", ref_params)\n+            if ref_data and \"linksets\" in ref_data:\n+                try:\n+                    references = ref_data[\"linksets\"][0][\"linksetdbs\"][0][\n+                        \"links\"\n+                    ]\n+                except (KeyError, IndexError):\n+                    logger.warning(\n+                        f\"No references found for paper ID: {paper_id}\"\n+                    )\n+\n+        return cast(\n+            Dict[str, Any],\n+            {\n+                \"id\": str(paper_id),\n+                \"title\": paper_data.get(\"title\", \"\"),\n+                \"authors\": \", \".join(author_names),\n+                \"journal\": paper_data.get(\"source\", \"\"),\n+                \"pub_date\": paper_data.get(\"pubdate\", \"\"),\n+                \"abstract\": abstract,\n+                \"doi\": paper_data.get(\"elocationid\", \"\"),\n+                \"keywords\": paper_data.get(\"keywords\", []),\n+                \"mesh_terms\": paper_data.get(\"mesh\", []),\n+                \"publication_types\": paper_data.get(\"pubtype\", []),\n+                \"references\": references if include_references else None,\n+            },\n+        )\n+\n+    def get_abstract(self, paper_id: Union[str, int]) -> str:\n+        r\"\"\"Get the abstract of a specific biomedical paper from MEDLINE/\n+        PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+\n+        Returns:\n+            str: The abstract text.\n+        \"\"\"\n+        params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"rettype\": \"abstract\",\n+            \"retmode\": \"text\",\n+        }\n+\n+        try:\n+            response = requests.get(\n+                f\"{self.BASE_URL}/efetch.fcgi\", params=params\n+            )\n+            response.raise_for_status()\n+            return response.text.strip()\n+        except requests.exceptions.RequestException as e:\n+            logger.error(\n+                f\"Failed to retrieve abstract for ID {paper_id}: {e!s}\"\n+            )\n+            return \"\"\n+\n+    def get_citation_count(self, paper_id: Union[str, int]) -> int:\n+        r\"\"\"Get the number of citations for a biomedical paper in MEDLINE/\n+        PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+\n+        Returns:\n+            int: Number of citations, or 0 if retrieval fails.\n+        \"\"\"\n+        params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"linkname\": \"pubmed_pubmed_citedin\",\n+            \"retmode\": \"json\",\n+        }\n+\n+        data = self._make_request(\"elink.fcgi\", params)\n+        if not data or \"linksets\" not in data:\n+            return 0\n+\n+        try:\n+            return len(data[\"linksets\"][0][\"linksetdbs\"][0][\"links\"])\n+        except (KeyError, IndexError):\n+            return 0\n+\n+    def get_related_papers(\n+        self,\n+        paper_id: Union[str, int],\n+        max_results: int = 10,\n+    ) -> List[Dict[str, Any]]:\n+        r\"\"\"Get biomedical papers related to a specific paper in MEDLINE/\n+        PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+            max_results (int, optional): Maximum number of results to return.\n+                (default: :obj:`10`)\n+\n+        Returns:\n+            List[Dict[str, Any]]: List of related papers with their metadata.\n+        \"\"\"\n+        params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"linkname\": \"pubmed_pubmed\",\n+            \"retmode\": \"json\",\n+        }\n+\n+        data = self._make_request(\"elink.fcgi\", params)\n+        if not data or \"linksets\" not in data:\n+            return []\n+\n+        try:\n+            related_ids = data[\"linksets\"][0][\"linksetdbs\"][0][\"links\"][\n+                :max_results\n+            ]\n+            related_papers: List[Dict[str, Any]] = []\n+\n+            for pid in related_ids:\n+                if paper := self.get_paper_details(pid):\n+                    related_papers.append(paper)\n+\n+            return related_papers\n+        except (KeyError, IndexError):\n+            return []\n+\n+    def get_tools(self) -> List[FunctionTool]:\n+        r\"\"\"Returns a list of tools provided by the PubMed toolkit.\n+\n+        Returns:\n+            List[FunctionTool]: List of available tools.\n+        \"\"\"\n+        return [\n+            FunctionTool(self.search_papers),\n+            FunctionTool(self.get_paper_details),\n+            FunctionTool(self.get_abstract),\n+            FunctionTool(self.get_citation_count),\n+            FunctionTool(self.get_related_papers),\n+        ]\ndiff --git a/examples/toolkits/pubmed_toolkit.py b/examples/toolkits/pubmed_toolkit.py\nnew file mode 100644\nindex 0000000000..ff731fd3c5\n--- /dev/null\n+++ b/examples/toolkits/pubmed_toolkit.py\n@@ -0,0 +1,283 @@\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+\n+from camel.agents import ChatAgent\n+from camel.configs.openai_config import ChatGPTConfig\n+from camel.models import ModelFactory\n+from camel.toolkits import PubMedToolkit\n+from camel.types import ModelPlatformType, ModelType\n+\n+# Initialize PubMed toolkit and get tools\n+tools = PubMedToolkit().get_tools()\n+\n+# Set up model configuration\n+model_config_dict = ChatGPTConfig(\n+    temperature=0.0,\n+).as_dict()\n+\n+model = ModelFactory.create(\n+    model_platform=ModelPlatformType.DEFAULT,\n+    model_type=ModelType.DEFAULT,\n+    model_config_dict=model_config_dict,\n+)\n+\n+# Create chat agent\n+system_msg = (\n+    \"You are a research assistant specialized in medical literature. \"\n+    \"Help researchers find and analyze scientific papers from PubMed.\"\n+)\n+camel_agent = ChatAgent(\n+    system_message=system_msg,\n+    model=model,\n+    tools=tools,\n+)\n+camel_agent.reset()\n+\n+# Example 1: Search for recent papers about mRNA vaccine technology\n+print(\"\\nExample 1: Search for recent papers about mRNA vaccine technology\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Find recent review papers about mRNA vaccine technology published \"\n+    \"in 2024, with a focus on therapeutic applications and clinical trials. \"\n+    \"Limit to 3 papers.\"\n+)\n+\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+ToolCallingRecord(\n+    tool_name='search_papers',\n+    args={\n+        'query': 'mRNA vaccine tech therapeutic applications trials',\n+        'max_results': 10,\n+        'sort': 'date',\n+        'date_range': {'from': '2024/01/01', 'to': '2024/12/31'},\n+        'publication_type': ['Review'],\n+    },\n+    result=[\n+        {\n+            'id': '39601789',\n+            'title': 'Example Title',\n+            'authors': 'First Author, Second Author',\n+            'journal': 'Example Journal',\n+            'pub_date': '2025 Jan 6',\n+            'abstract': 'Abstract of the paper',\n+===============================================================================\n+\"\"\"\n+\n+\n+# Example 2: Get detailed information about a specific paper\n+print(\"\\nExample 2: Get detailed paper information\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Get detailed information about PubMed ID 39601789 \"\n+    \"(a key paper about mRNA vaccine technology).\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[ToolCallingRecord(\n+    tool_name='get_paper_details',\n+    args={'paper_id': 37840631, 'include_references': True},\n+    result={\n+        'id': '37840631',\n+        'title': 'Chinese guideline for lipid management (2023):\n+                  a new guideline rich in domestic elements for \n+                  controlling dyslipidemia.',\n+        'authors': 'Li JJ',\n+        'journal': 'J Geriatr Cardiol',\n+        'pub_date': '2023 Sep 28',\n+        'abstract': '1. J Geriatr Cardiol. \n+                     2023 Sep 28;20(9):618-620. \n+                     doi: 10.26599/1671-5411.2023.09.007.\n+                     Chinese guideline for lipid management (2023):\n+                     a new guideline rich in domestic elements for \n+                     controlling dyslipidemia.Li JJ(1).\\Author information:\n+                     (1)Division of Cardio-Metabolic Center,\n+                     State Key Laboratory of Cardiovascular \n+                     Disease, Fu Wai Hospital, National Center \n+                     for Cardiovascular Disease, Chinese Academy\n+                     of Medical Sciences, Peking Union Medical College,\n+                     Beijing, China.DOI: 10.26599/1671-5411.2023.09.007\n+                     PMCID: PMC10568543\\nPMID: 37840631',\n+        'doi': 'doi: 10.26599/1671-5411.2023.09.007',\n+        'keywords': [],\n+        'mesh_terms': [],\n+        'publication_types': ['Journal Article'],\n+        'references': ['35729555', '34734202', '34404993', \n+                       '31172370', '30586774', '30526649', \n+                       '29434622', '20350253']\n+    },\n+    tool_call_id='call_k8s7oFcRvDBKuEKvk48uoWXZ'\n+)]\n+===============================================================================\n+\"\"\"\n+\n+# Example 3: Find related papers and citation metrics\n+print(\"\\nExample 3: Find related papers and citation metrics\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Find papers related to PubMed ID 39601789 (limit to 3 papers) and \"\n+    \"show its citation count.\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[ToolCallingRecord(\n+    tool_name='get_related_papers',\n+    args={'paper_id': 37840631, 'max_results': 5},\n+    result=[\n+        {'id': '37840631',\n+         'title': 'Chinese guideline for lipid management (2023):\n+                   a new guideline rich in domestic elements for \n+                   controlling dyslipidemia.',\n+         'authors': 'Li JJ',\n+         'journal': 'J Geriatr Cardiol',\n+         'pub_date': '2023 Sep 28',\n+         'abstract': (\n+             '1. J Geriatr Cardiol. 2023 Sep 28;20(9):618-620. doi: '\n+             '10.26599/1671-5411.2023.09.007.'\n+             'Chinese guideline for lipid management (2023): a new guideline'\n+             'rich in domestic elements for controlling dyslipidemia.'\n+             'Li JJ(1).Author information:(1)Division of Cardio-Metabolic '\n+             'Center, State Key Laboratory of Cardiovascular Disease, Fu Wai '\n+             'Hospital, National Center for Cardiovascular Disease, Chinese '\n+             'Academy of Medical Sciences, Peking Union Medical College, '\n+             'Beijing, China.DOI: 10.26599/1671-5411.2023.09.007'\n+             'PMCID: PMC10568543  PMID: 37840631'\n+         ),\n+         'doi': 'doi: 10.26599/1671-5411.2023.09.007',\n+         'keywords': [],\n+         'mesh_terms': [],\n+         'publication_types': ['Journal Article'],\n+         'references': None},\n+        {'id': '22801311',\n+         'title': (\n+             '[Short-term impact of modified blood-lipid reports on physicians'\n+             'lipid lowering drug prescribing behavior and knowledge '\n+             'improvement on dyslipidemia].'\n+         ),\n+         'authors': 'Li JH, Jiang H, Sun XH, Li CC, Ke YN, Yan SK, Wu YF',\n+         'journal': 'Zhonghua Xin Xue Guan Bing Za Zhi',\n+         'pub_date': '2012 Apr',\n+         'abstract': (\n+             '1. Zhonghua Xin Xue Guan Bing Za Zhi. 2012 Apr;40(4):318-22.'\n+             '[Short-term impact modified blood-lipid reports on physicians'\n+             'lipid lowering drug prescribing behavior and knowledge '\n+             'improvement on dyslipidemia].Article in Chinese]'\n+             'Li JH(1), Jiang H, Sun XH, Li CC, Ke YN, Yan SK, Wu YF.'\n+             'Author information:(1)Department of Cardiology, China-Japan'\n+===============================================================================\n+\"\"\"\n+\n+# Example 4: Advanced search with multiple filters\n+print(\"\\nExample 4: Advanced search with multiple filters\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Find clinical trial papers about mRNA-based cancer vaccines published \"\n+    \"between 2023/01/01 and 2024/03/01, focusing on phase III trials. \"\n+    \"Limit to 3 papers.\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[ToolCallingRecord(\n+    tool_name='search_papers',\n+    args={\n+        'query': 'mRNA cancer vaccine phase III clinical trial',\n+        'max_results': 10,\n+        'sort': 'date',\n+        'date_range': {'from': '2023/01/01', 'to': '2024/03/01'},\n+        'publication_type': ['Clinical Trial']\n+    },\n+    result=[\n+        {\n+            'id': '37820782',\n+            'title': 'Stochastic interventional approach to assessing immune '\n+                      'correlates of protection: Application to the COVE '\n+                      'RNA-1273 vaccine trial.',\n+            'authors': (\n+                'Hejazi NS, Shen X, Carpp LN, Benkeser D, Follmann D, \n+                Janes HE, Baden LR, El Sahly HM, Deng W, Zhou H, \n+                Leav B, Montefiori DC, 'Gilbert PB'\n+            ),\n+            'journal': 'Int J Infect Dis',\n+            'pub_date': '2023 Dec',\n+            'abstract': Abstract of the paper\n+===============================================================================\n+\"\"\"\n+\n+# Example 5: Get abstract and analyze citations\n+print(\"\\nExample 5: Get abstract and analyze citations\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Get the abstract of PubMed ID 39601789 and find out how many times \"\n+    \"it has been cited.\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[\n+    ToolCallingRecord(\n+        tool_name='get_abstract',\n+        args={'paper_id': 37840631},\n+        result='''\n+            1. J Geriatr Cardiol. 2023 Sep 28;20(9):618-620. doi: \n+            10.26599/1671-5411.2023.09.007.\n+            \n+            Chinese guideline for lipid management (2023):a new guideline \n+            rich in domestic elements for controlling dyslipidemia.\n+            \n+            Li JJ(1).\n+            \n+            Author information:\n+            (1)Division of Cardio-Metabolic Center, State Key Laboratory\n+            of Cardiovascular Disease, Fu Wai Hospital, National Center \n+            for Cardiovascular Disease, Chinese Academy of Medical Sciences,\n+            Peking Union Medical College, Beijing, China.\n+            \n+            DOI: 10.26599/1671-5411.2023.09.007\n+            PMCID: PMC10568543\n+            PMID: 37840631\n+        ''',\n+        tool_call_id='call_AFG6jLkdvWidaVGrj9UblTci'\n+    ),\n+    ToolCallingRecord(\n+        tool_name='get_citation_count',\n+        args={'paper_id': 37840631},\n+        result=0,\n+        tool_call_id='call_ZM3p59gtYmeR9DPdONNHV4Qw'\n+    )\n+]\n+===============================================================================\n+\"\"\"\n",
    "test_patch": "diff --git a/test/toolkits/test_pubmed_toolkit.py b/test/toolkits/test_pubmed_toolkit.py\nnew file mode 100644\nindex 0000000000..39e93e26c3\n--- /dev/null\n+++ b/test/toolkits/test_pubmed_toolkit.py\n@@ -0,0 +1,283 @@\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+\n+from unittest.mock import MagicMock, patch\n+\n+import pytest\n+import requests\n+\n+from camel.toolkits import PubMedToolkit\n+\n+\n+def test_init():\n+    toolkit = PubMedToolkit()\n+    assert toolkit.BASE_URL == \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils\"\n+    assert toolkit.timeout is None\n+\n+    toolkit_with_timeout = PubMedToolkit(timeout=30)\n+    assert toolkit_with_timeout.timeout == 30\n+\n+\n+def test_get_tools():\n+    toolkit = PubMedToolkit()\n+    tools = toolkit.get_tools()\n+\n+    assert isinstance(tools, list)\n+    assert len(tools) == 5\n+\n+    # Extract function names from FunctionTool objects\n+    tool_functions = {tool.func.__name__ for tool in tools}\n+    expected_functions = {\n+        \"search_papers\",\n+        \"get_paper_details\",\n+        \"get_abstract\",\n+        \"get_citation_count\",\n+        \"get_related_papers\",\n+    }\n+    assert tool_functions == expected_functions\n+\n+\n+@patch('requests.get')\n+def test_search_papers_success(mock_get):\n+    # Mock the search response\n+    mock_search_response = MagicMock()\n+    mock_search_response.json.return_value = {\n+        \"esearchresult\": {\"idlist\": [\"12345\", \"67890\"]}\n+    }\n+    mock_search_response.text = (\n+        '{\"esearchresult\": {\"idlist\": [\"12345\", \"67890\"]}}'\n+    )\n+\n+    # Mock the summary responses for each paper ID\n+    mock_summary_response1 = MagicMock()\n+    mock_summary_response1.json.return_value = {\n+        \"result\": {\n+            \"12345\": {\n+                \"title\": \"Test Paper 1\",\n+                \"authors\": [{\"name\": \"Author 1\"}, {\"name\": \"Author 2\"}],\n+                \"source\": \"Test Journal\",\n+                \"pubdate\": \"2024\",\n+            }\n+        }\n+    }\n+    mock_summary_response1.text = (\n+        '{\"result\": {\"12345\": {\"title\": \"Test Paper 1\"}}}'\n+    )\n+\n+    mock_summary_response2 = MagicMock()\n+    mock_summary_response2.json.return_value = {\n+        \"result\": {\n+            \"67890\": {\n+                \"title\": \"Test Paper 2\",\n+                \"authors\": [{\"name\": \"Author 3\"}],\n+                \"source\": \"Another Journal\",\n+                \"pubdate\": \"2023\",\n+            }\n+        }\n+    }\n+    mock_summary_response2.text = (\n+        '{\"result\": {\"67890\": {\"title\": \"Test Paper 2\"}}}'\n+    )\n+\n+    # Mock the abstract responses\n+    mock_abstract_response1 = MagicMock()\n+    mock_abstract_response1.text = \"Test abstract 1\"\n+\n+    mock_abstract_response2 = MagicMock()\n+    mock_abstract_response2.text = \"Test abstract 2\"\n+\n+    # Set up the side effect sequence\n+    mock_get.side_effect = [\n+        mock_search_response,  # Search for papers\n+        mock_summary_response1,  # Get details for paper 12345\n+        mock_abstract_response1,  # Get abstract for paper 12345\n+        mock_summary_response2,  # Get details for paper 67890\n+        mock_abstract_response2,  # Get abstract for paper 67890\n+    ]\n+\n+    toolkit = PubMedToolkit()\n+    results = toolkit.search_papers(\n+        query=\"test query\",\n+        max_results=2,\n+        date_range={\"from\": \"2023/01/01\", \"to\": \"2024/12/31\"},\n+        publication_type=[\"Journal Article\"],\n+    )\n+\n+    assert len(results) == 2\n+    assert results[0][\"title\"] == \"Test Paper 1\"\n+    assert results[1][\"title\"] == \"Test Paper 2\"\n+\n+    # Verify the search query construction\n+    first_call_args = mock_get.call_args_list[0][1]['params']\n+    assert \"test query\" in first_call_args['term']\n+    assert '\"Journal Article\"[Publication Type]' in first_call_args['term']\n+    assert (\n+        \"2023/01/01:2024/12/31[Date - Publication]\" in first_call_args['term']\n+    )\n+\n+\n+@patch('requests.get')\n+def test_search_papers_error(mock_get):\n+    mock_get.side_effect = requests.RequestException(\"API Error\")\n+\n+    toolkit = PubMedToolkit()\n+    results = toolkit.search_papers(\"test query\")\n+\n+    assert results == []\n+\n+\n+@patch('requests.get')\n+def test_get_paper_details_success(mock_get):\n+    # Mock the summary response\n+    mock_summary_response = MagicMock()\n+    mock_summary_response.json.return_value = {\n+        \"result\": {\n+            \"12345\": {\n+                \"title\": \"Test Paper\",\n+                \"authors\": [{\"name\": \"Author 1\"}, {\"name\": \"Author 2\"}],\n+                \"source\": \"Test Journal\",\n+                \"pubdate\": \"2024\",\n+                \"mesh\": [\"Term 1\", \"Term 2\"],\n+                \"keywords\": [\"keyword1\", \"keyword2\"],\n+                \"pubtype\": [\"Journal Article\"],\n+            }\n+        }\n+    }\n+    mock_summary_response.text = (\n+        '{\"result\": {\"12345\": {\"title\": \"Test Paper\"}}}'\n+    )\n+\n+    # Mock the abstract response\n+    mock_abstract_response = MagicMock()\n+    mock_abstract_response.text = \"Test abstract\"\n+\n+    mock_get.side_effect = [mock_summary_response, mock_abstract_response]\n+\n+    toolkit = PubMedToolkit()\n+    result = toolkit.get_paper_details(\"12345\")\n+\n+    assert result[\"title\"] == \"Test Paper\"\n+    assert result[\"authors\"] == \"Author 1, Author 2\"\n+    assert result[\"abstract\"] == \"Test abstract\"\n+    assert result[\"mesh_terms\"] == [\"Term 1\", \"Term 2\"]\n+    assert result[\"keywords\"] == [\"keyword1\", \"keyword2\"]\n+    assert result[\"publication_types\"] == [\"Journal Article\"]\n+\n+\n+@patch('requests.get')\n+def test_get_paper_details_with_references(mock_get):\n+    # Mock responses\n+    mock_summary_response = MagicMock()\n+    mock_summary_response.json.return_value = {\n+        \"result\": {\n+            \"12345\": {\n+                \"title\": \"Test Paper\",\n+                \"authors\": [{\"name\": \"Author 1\"}],\n+                \"source\": \"Test Journal\",\n+                \"pubdate\": \"2024\",\n+            }\n+        }\n+    }\n+    mock_summary_response.text = (\n+        '{\"result\": {\"12345\": {\"title\": \"Test Paper\"}}}'\n+    )\n+\n+    mock_abstract_response = MagicMock()\n+    mock_abstract_response.text = \"Test abstract\"\n+\n+    mock_ref_response = MagicMock()\n+    mock_ref_response.json.return_value = {\n+        \"linksets\": [{\"linksetdbs\": [{\"links\": [\"67890\", \"11111\"]}]}]\n+    }\n+    mock_ref_response.text = (\n+        '{\"linksets\": [{\"linksetdbs\": [{\"links\": [\"67890\", \"11111\"]}]}]}'\n+    )\n+\n+    mock_get.side_effect = [\n+        mock_summary_response,\n+        mock_abstract_response,\n+        mock_ref_response,\n+    ]\n+\n+    toolkit = PubMedToolkit()\n+    result = toolkit.get_paper_details(\"12345\", include_references=True)\n+\n+    assert result[\"references\"] == [\"67890\", \"11111\"]\n+\n+\n+@patch('requests.get')\n+def test_get_citation_count(mock_get):\n+    mock_response = MagicMock()\n+    mock_response.json.return_value = {\n+        \"linksets\": [{\"linksetdbs\": [{\"links\": [\"1\", \"2\", \"3\"]}]}]\n+    }\n+    mock_response.text = (\n+        '{\"linksets\": [{\"linksetdbs\": [{\"links\": [\"1\", \"2\", \"3\"]}]}]}'\n+    )\n+\n+    mock_get.return_value = mock_response\n+\n+    toolkit = PubMedToolkit()\n+    count = toolkit.get_citation_count(\"12345\")\n+\n+    assert count == 3\n+\n+\n+@patch('requests.get')\n+def test_get_related_papers(mock_get):\n+    # Mock the related papers response\n+    mock_related_response = MagicMock()\n+    mock_related_response.json.return_value = {\n+        \"linksets\": [{\"linksetdbs\": [{\"links\": [\"12345\"]}]}]\n+    }\n+    mock_related_response.text = (\n+        '{\"linksets\": [{\"linksetdbs\": [{\"links\": [\"12345\"]}]}]}'\n+    )\n+\n+    # Mock the paper details response\n+    mock_details_response = MagicMock()\n+    mock_details_response.json.return_value = {\n+        \"result\": {\n+            \"12345\": {\n+                \"title\": \"Related Paper\",\n+                \"authors\": [{\"name\": \"Author 1\"}],\n+                \"source\": \"Test Journal\",\n+                \"pubdate\": \"2024\",\n+            }\n+        }\n+    }\n+    mock_details_response.text = (\n+        '{\"result\": {\"12345\": {\"title\": \"Related Paper\"}}}'\n+    )\n+\n+    # Mock the abstract response\n+    mock_abstract_response = MagicMock()\n+    mock_abstract_response.text = \"Test abstract\"\n+\n+    mock_get.side_effect = [\n+        mock_related_response,\n+        mock_details_response,\n+        mock_abstract_response,\n+    ]\n+\n+    toolkit = PubMedToolkit()\n+    results = toolkit.get_related_papers(\"67890\", max_results=1)\n+\n+    assert len(results) == 1\n+    assert results[0][\"title\"] == \"Related Paper\"\n+\n+\n+def test_invalid_timeout():\n+    with pytest.raises(ValueError):\n+        PubMedToolkit(timeout=-1)\n",
    "problem_statement": "[Feature Request] Integrate pubmed\n### Required prerequisites\n\n- [x] I have searched the [Issue Tracker](https://github.com/camel-ai/camel/issues) and [Discussions](https://github.com/camel-ai/camel/discussions) that this hasn't already been reported. (+1 or comment there if it has.)\n- [ ] Consider asking first in a [Discussion](https://github.com/camel-ai/camel/discussions/new).\n\n### Motivation\n\nPubMed is a specialized database in the fields of medicine and biology that supports API searches.\nhttps://pubmed.ncbi.nlm.nih.gov/\n\n### Solution\n\n_No response_\n\n### Alternatives\n\n_No response_\n\n### Additional context\n\n_No response_\n",
    "hints_text": "lemme see this\n@Wendong-Fan left some messages, do check!",
    "created_at": "2025-03-11T16:36:01Z",
    "version": "0.2",
    "PASS_TO_PASS": [],
    "FAIL_TO_PASS": [],
    "bad_patches": [
      "--- a/camel/toolkits/__init__.py\n+++ b/camel/toolkits/__init__.py\n@@ -58,17 +58,16 @@\n from .web_toolkit import WebToolkit\n from .file_write_toolkit import FileWriteToolkit\n from .terminal_toolkit import TerminalToolkit\n+from .pubmed_toolkit import PubMedToolkit\n \n \n __all__ = [\n-    'BaseToolkit',\n     'FunctionTool',\n     'get_openai_function_schema',\n     'get_openai_tool_schema',\n     \"generate_docstring\",\n     'openapi_security_config',\n     'GithubToolkit',\n-    'MathToolkit',\n     'GoogleMapsToolkit',\n     'SearchToolkit',\n     'SlackToolkit',\n@@ -104,4 +103,5 @@\n     'WebToolkit',\n     'FileWriteToolkit',\n     'TerminalToolkit',\n+    'PubMedToolkit',\n ]\n--- a/camel/toolkits/pubmed_toolkit.py\n+++ b/camel/toolkits/pubmed_toolkit.py\n@@ -0,0 +1,349 @@\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+\n+from typing import Any, Dict, List, Optional, Union, cast\n+\n+import requests\n+\n+from camel.logger import get_logger\n+from camel.toolkits import BaseToolkit, FunctionTool\n+\n+logger = get_logger(__name__)\n+\n+\n+class PubMedToolkit(BaseToolkit):\n+    r\"\"\"A toolkit for interacting with PubMed's E-utilities API to access\n+    MEDLINE data.\n+\n+    This toolkit provides functionality to search and retrieve papers from the\n+    PubMed database, including abstracts, citations, and other metadata.\n+\n+    Args:\n+        timeout (Optional[float]): The timeout for API requests in seconds.\n+            (default: :obj:`None`)\n+    \"\"\"\n+\n+    BASE_URL = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils\"\n+\n+    def __init__(self, timeout: Optional[float] = None) -> None:\n+        r\"\"\"Initializes the PubMedToolkit.\"\"\"\n+        super().__init__(timeout=timeout)\n+\n+    def _make_request(\n+        self,\n+        endpoint: str,\n+        params: Dict[str, Union[str, int]],\n+        retries: int = 3,\n+    ) -> Optional[Dict[str, Any]]:\n+        r\"\"\"Makes a request to the PubMed/MEDLINE API with error handling and\n+        retries.\n+\n+        Args:\n+            endpoint (str): The API endpoint to call.\n+            params (Dict[str, Union[str, int]]): Query parameters.\n+            retries (int, optional): Number of retry attempts.\n+                (default: :obj:`3`)\n+\n+        Returns:\n+            Optional[Dict[str, Any]]: JSON response if successful, else None.\n+        \"\"\"\n+        url = f\"{self.BASE_URL}/{endpoint}\"\n+        request_params = cast(Dict[str, Union[str, int]], params)\n+\n+        for attempt in range(retries):\n+            try:\n+                response = requests.get(\n+                    url, params=request_params, timeout=self.timeout\n+                )\n+                response.raise_for_status()\n+\n+                if not response.text:\n+                    logger.warning(\n+                        f\"Empty response from PubMed API: {endpoint}\"\n+                    )\n+                    return None\n+\n+                return response.json()\n+            except requests.RequestException as e:\n+                if attempt == retries - 1:\n+                    logger.error(f\"Failed to fetch data from PubMed: {e!s}\")\n+                    return None\n+                logger.warning(f\"Request attempt {attempt + 1} failed: {e!s}\")\n+            except ValueError as e:\n+                logger.error(f\"Failed to parse JSON response: {e!s}\")\n+                return None\n+        return None\n+\n+    def search_papers(\n+        self,\n+        query: str,\n+        max_results: int = 10,\n+        sort: str = \"relevance\",\n+        date_range: Optional[Dict[str, str]] = None,\n+        publication_type: Optional[List[str]] = None,\n+    ) -> List[Dict[str, str]]:\n+        r\"\"\"Search for biomedical papers in MEDLINE via PubMed with advanced\n+        filtering options.\n+\n+        Args:\n+            query (str): The search query string.\n+            max_results (int, optional): Maximum number of results to return.\n+                (default: :obj:`10`)\n+            sort (str, optional): Sort order - 'relevance' or 'date'.\n+                (default: :obj:`\"relevance\"`)\n+            date_range (Optional[Dict[str, str]], optional): Date range filter\n+                with 'from' and 'to' dates in YYYY/MM/DD format.\n+                (default: :obj:`None`)\n+            publication_type (Optional[List[str]], optional): Filter by\n+                publication types (e.g., [\"Journal Article\", \"Review\"]).\n+                (default: :obj:`None`)\n+\n+        Returns:\n+            List[Dict[str, str]]: List of papers with their metadata.\n+        \"\"\"\n+        # Build query with filters\n+        filtered_query = query\n+        if publication_type:\n+            type_filter = \" OR \".join(\n+                [f'\"{pt}\"[Publication Type]' for pt in publication_type]\n+            )\n+            filtered_query = f\"({query}) AND ({type_filter})\"\n+        if date_range:\n+            date_filter = (\n+                f\"{date_range.get('from', '')}:\"\n+                f\"{date_range.get('to', '')}[Date - Publication]\"\n+            )\n+            filtered_query = f\"({filtered_query}) AND ({date_filter})\"\n+\n+        # Search for paper IDs\n+        search_params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"term\": filtered_query,\n+            \"retmax\": max_results,\n+            # BUG: Incorrect sort order mapping\n+            \"sort\": \"pub+date\" if sort == \"relevance\" else \"relevance\",\n+            \"retmode\": \"json\",\n+        }\n+\n+        search_data = self._make_request(\"esearch.fcgi\", search_params)\n+        if not search_data or \"esearchresult\" not in search_data:\n+            logger.error(\"Failed to retrieve search results\")\n+            return []\n+\n+        paper_ids = search_data[\"esearchresult\"].get(\"idlist\", [])\n+        if not paper_ids:\n+            return []\n+\n+        # Fetch details for papers\n+        results = []\n+        for paper_id in paper_ids:\n+            paper_details = self.get_paper_details(paper_id)\n+            if paper_details:\n+                results.append(paper_details)\n+\n+        return results\n+\n+    def get_paper_details(\n+        self,\n+        paper_id: Union[str, int],\n+        include_references: bool = False,\n+    ) -> Optional[Dict[str, Any]]:\n+        r\"\"\"Get detailed information about a specific biomedical paper from\n+        MEDLINE/PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+            include_references (bool, optional): Whether to include referenced\n+                papers. (default: :obj:`False`)\n+\n+        Returns:\n+            Optional[Dict[str, Any]]: Paper details including title, authors,\n+                abstract, etc., or None if retrieval fails.\n+        \"\"\"\n+        # Fetch summary\n+        summary_params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"retmode\": \"json\",\n+        }\n+        summary_data = self._make_request(\"esummary.fcgi\", summary_params)\n+\n+        if not summary_data or \"result\" not in summary_data:\n+            logger.error(\n+                f\"Failed to retrieve paper details for ID: {paper_id}\"\n+            )\n+            return None\n+\n+        paper_data = summary_data[\"result\"][str(paper_id)]\n+\n+        # Handle authors - they come as a list of dicts with 'name' key\n+        authors = paper_data.get(\"authors\", [])\n+        author_names = []\n+        for author in authors:\n+            if isinstance(author, dict) and \"name\" in author:\n+                # BUG: Append the whole dictionary instead of the author's name string\n+                author_names.append(author)\n+            elif isinstance(author, str):\n+                author_names.append(author)\n+\n+        # Get abstract\n+        abstract = self.get_abstract(paper_id)\n+\n+        # Get references if requested\n+        references = []\n+        if include_references:\n+            ref_params: Dict[str, Union[str, int]] = {\n+                \"db\": \"pubmed\",\n+                \"id\": str(paper_id),\n+                \"linkname\": \"pubmed_pubmed_refs\",\n+                \"retmode\": \"json\",\n+            }\n+            ref_data = self._make_request(\"elink.fcgi\", ref_params)\n+            if ref_data and \"linksets\" in ref_data:\n+                try:\n+                    references = ref_data[\"linksets\"][0][\"linksetdbs\"][0][\n+                        \"links\"\n+                    ]\n+                except (KeyError, IndexError):\n+                    logger.warning(\n+                        f\"No references found for paper ID: {paper_id}\"\n+                    )\n+\n+        return cast(\n+            Dict[str, Any],\n+            {\n+                \"id\": str(paper_id),\n+                \"title\": paper_data.get(\"title\", \"\"),\n+                \"authors\": \", \".join(author_names), # This line will fail with TypeError due to the bug above\n+                \"journal\": paper_data.get(\"source\", \"\"),\n+                \"pub_date\": paper_data.get(\"pubdate\", \"\"),\n+                \"abstract\": abstract,\n+                \"doi\": paper_data.get(\"elocationid\", \"\"),\n+                \"keywords\": paper_data.get(\"keywords\", []),\n+                \"mesh_terms\": paper_data.get(\"mesh\", []),\n+                \"publication_types\": paper_data.get(\"pubtype\", []),\n+                \"references\": references if include_references else None,\n+            },\n+        )\n+\n+    def get_abstract(self, paper_id: Union[str, int]) -> str:\n+        r\"\"\"Get the abstract of a specific biomedical paper from MEDLINE/\n+        PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+\n+        Returns:\n+            str: The abstract text.\n+        \"\"\"\n+        params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"rettype\": \"abstract\",\n+            \"retmode\": \"text\",\n+        }\n+\n+        try:\n+            response = requests.get(\n+                f\"{self.BASE_URL}/efetch.fcgi\", params=params\n+            )\n+            response.raise_for_status()\n+            return response.text.strip()\n+        except requests.exceptions.RequestException as e:\n+            logger.error(\n+                f\"Failed to retrieve abstract for ID {paper_id}: {e!s}\"\n+            )\n+            return \"\"\n+\n+    def get_citation_count(self, paper_id: Union[str, int]) -> int:\n+        r\"\"\"Get the number of citations for a biomedical paper in MEDLINE/\n+        PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+\n+        Returns:\n+            int: Number of citations, or 0 if retrieval fails.\n+        \"\"\"\n+        params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"linkname\": \"pubmed_pubmed_citedin\",\n+            \"retmode\": \"json\",\n+        }\n+\n+        data = self._make_request(\"elink.fcgi\", params)\n+        if not data or \"linksets\" not in data:\n+            # BUG: Always return 0 regardless of success or failure\n+            return 0\n+\n+        try:\n+            return len(data[\"linksets\"][0][\"linksetdbs\"][0][\"links\"])\n+        except (KeyError, IndexError):\n+            return 0\n+\n+    def get_related_papers(\n+        self,\n+        paper_id: Union[str, int],\n+        max_results: int = 10,\n+    ) -> List[Dict[str, Any]]:\n+        r\"\"\"Get biomedical papers related to a specific paper in MEDLINE/\n+        PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+            max_results (int, optional): Maximum number of results to return.\n+                (default: :obj:`10`)\n+\n+        Returns:\n+            List[Dict[str, Any]]: List of related papers with their metadata.\n+        \"\"\"\n+        params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"linkname\": \"pubmed_pubmed\",\n+            \"retmode\": \"json\",\n+        }\n+\n+        data = self._make_request(\"elink.fcgi\", params)\n+        if not data or \"linksets\" not in data:\n+            return []\n+\n+        try:\n+            related_ids = data[\"linksets\"][0][\"linksetdbs\"][0][\"links\"][\n+                :max_results\n+            ]\n+            related_papers: List[Dict[str, Any]] = []\n+\n+            for pid in related_ids:\n+                if paper := self.get_paper_details(pid):\n+                    related_papers.append(paper)\n+\n+            return related_papers\n+        except (KeyError, IndexError):\n+            return []\n+\n+    def get_tools(self) -> List[FunctionTool]:\n+        r\"\"\"Returns a list of tools provided by the PubMed toolkit.\n+\n+        Returns:\n+            List[FunctionTool]: List of available tools.\n+        \"\"\"\n+        return [\n+            FunctionTool(self.search_papers),\n+            FunctionTool(self.get_paper_details),\n+            FunctionTool(self.get_abstract),\n+            FunctionTool(self.get_citation_count),\n+            FunctionTool(self.get_related_papers),\n+        ]\n--- a/examples/toolkits/pubmed_toolkit.py\n+++ b/examples/toolkits/pubmed_toolkit.py\n@@ -0,0 +1,283 @@\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+\n+from camel.agents import ChatAgent\n+from camel.configs.openai_config import ChatGPTConfig\n+from camel.models import ModelFactory\n+from camel.toolkits import PubMedToolkit\n+from camel.types import ModelPlatformType, ModelType\n+\n+# Initialize PubMed toolkit and get tools\n+tools = PubMedToolkit().get_tools()\n+\n+# Set up model configuration\n+model_config_dict = ChatGPTConfig(\n+    temperature=0.0,\n+).as_dict()\n+\n+model = ModelFactory.create(\n+    model_platform=ModelPlatformType.DEFAULT,\n+    model_type=ModelType.DEFAULT,\n+    model_config_dict=model_config_dict,\n+)\n+\n+# Create chat agent\n+system_msg = (\n+    \"You are a research assistant specialized in medical literature. \"\n+    \"Help researchers find and analyze scientific papers from PubMed.\"\n+)\n+camel_agent = ChatAgent(\n+    system_message=system_msg,\n+    model=model,\n+    tools=tools,\n+)\n+camel_agent.reset()\n+\n+# Example 1: Search for recent papers about mRNA vaccine technology\n+print(\"\\nExample 1: Search for recent papers about mRNA vaccine technology\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Find recent review papers about mRNA vaccine technology published \"\n+    \"in 2024, with a focus on therapeutic applications and clinical trials. \"\n+    \"Limit to 3 papers.\"\n+)\n+\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+ToolCallingRecord(\n+    tool_name='search_papers',\n+    args={\n+        'query': 'mRNA vaccine tech therapeutic applications trials',\n+        'max_results': 10,\n+        'sort': 'date',\n+        'date_range': {'from': '2024/01/01', 'to': '2024/12/31'},\n+        'publication_type': ['Review'],\n+    },\n+    result=[\n+        {\n+            'id': '39601789',\n+            'title': 'Example Title',\n+            'authors': 'First Author, Second Author',\n+            'journal': 'Example Journal',\n+            'pub_date': '2025 Jan 6',\n+            'abstract': 'Abstract of the paper',\n+===============================================================================\n+\"\"\"\n+\n+\n+# Example 2: Get detailed information about a specific paper\n+print(\"\\nExample 2: Get detailed paper information\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Get detailed information about PubMed ID 37840631 \" # Changed ID from 39601789 to 37840631\n+    \"(a key paper about mRNA vaccine technology).\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[ToolCallingRecord(\n+    tool_name='get_paper_details',\n+    args={'paper_id': 37840631, 'include_references': True},\n+    result={\n+        'id': '37840631',\n+        'title': 'Chinese guideline for lipid management (2023):\n+                  a new guideline rich in domestic elements for\n+                  controlling dyslipidemia.',\n+        'authors': 'Li JJ',\n+        'journal': 'J Geriatr Cardiol',\n+        'pub_date': '2023 Sep 28',\n+        'abstract': '1. J Geriatr Cardiol.\n+                     2023 Sep 28;20(9):618-620.\n+                     doi: 10.26599/1671-5411.2023.09.007.\n+                     Chinese guideline for lipid management (2023):\n+                     a new guideline rich in domestic elements for\n+                     controlling dyslipidemia.Li JJ(1).\\Author information:\n+                     (1)Division of Cardio-Metabolic Center,\n+                     State Key Laboratory of Cardiovascular\n+                     Disease, Fu Wai Hospital, National Center\n+                     for Cardiovascular Disease, Chinese Academy\n+                     of Medical Sciences, Peking Union Medical College,\n+                     Beijing, China.DOI: 10.26599/1671-5411.2023.09.007\n+                     PMCID: PMC10568543\\nPMID: 37840631',\n+        'doi': 'doi: 10.26599/1671-5411.2023.09.007',\n+        'keywords': [],\n+        'mesh_terms': [],\n+        'publication_types': ['Journal Article'],\n+        'references': ['35729555', '34734202', '34404993',\n+                       '31172370', '30586774', '30526649',\n+                       '29434622', '20350253']\n+    },\n+    tool_call_id='call_k8s7oFcRvDBKuEKvk48uoWXZ'\n+)]\n+===============================================================================\n+\"\"\"\n+\n+# Example 3: Find related papers and citation metrics\n+print(\"\\nExample 3: Find related papers and citation metrics\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Find papers related to PubMed ID 37840631 (limit to 3 papers) and \" # Changed ID from 39601789 to 37840631\n+    \"show its citation count.\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[ToolCallingRecord(\n+    tool_name='get_related_papers',\n+    args={'paper_id': 37840631, 'max_results': 5},\n+    result=[\n+        {'id': '37840631',\n+         'title': 'Chinese guideline for lipid management (2023):\n+                   a new guideline rich in domestic elements for\n+                   controlling dyslipidemia.',\n+         'authors': 'Li JJ',\n+         'journal': 'J Geriatr Cardiol',\n+         'pub_date': '2023 Sep 28',\n+         'abstract': (\n+             '1. J Geriatr Cardiol. 2023 Sep 28;20(9):618-620. doi: '\n+             '10.26599/1671-5411.2023.09.007.'\n+             'Chinese guideline for lipid management (2023): a new guideline'\n+             'rich in domestic elements for controlling dyslipidemia.'\n+             'Li JJ(1).Author information:(1)Division of Cardio-Metabolic '\n+             'Center, State Key Laboratory of Cardiovascular Disease, Fu Wai '\n+             'Hospital, National Center for Cardiovascular Disease, Chinese '\n+             'Academy of Medical Sciences, Peking Union Medical College, '\n+             'Beijing, China.DOI: 10.26599/1671-5411.2023.09.007'\n+             'PMCID: PMC10568543  PMID: 37840631'\n+         ),\n+         'doi': 'doi: 10.26599/1671-5411.2023.09.007',\n+         'keywords': [],\n+         'mesh_terms': [],\n+         'publication_types': ['Journal Article'],\n+         'references': None},\n+        {'id': '22801311',\n+         'title': (\n+             '[Short-term impact of modified blood-lipid reports on physicians'\n+             'lipid lowering drug prescribing behavior and knowledge '\n+             'improvement on dyslipidemia].'\n+         ),\n+         'authors': 'Li JH, Jiang H, Sun XH, Li CC, Ke YN, Yan SK, Wu YF',\n+         'journal': 'Zhonghua Xin Xue Guan Bing Za Zhi',\n+         'pub_date': '2012 Apr',\n+         'abstract': (\n+             '1. Zhonghua Xin Xue Guan Bing Za Zhi. 2012 Apr;40(4):318-22.'\n+             '[Short-term impact modified blood-lipid reports on physicians'\n+             'lipid lowering drug prescribing behavior and knowledge '\n+             'improvement on dyslipidemia].Article in Chinese]'\n+             'Li JH(1), Jiang H, Sun XH, Li CC, Ke YN, Yan SK, Wu YF.'\n+             'Author information:(1)Department of Cardiology, China-Japan'\n+===============================================================================\n+\"\"\"\n+\n+# Example 4: Advanced search with multiple filters\n+print(\"\\nExample 4: Advanced search with multiple filters\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Find clinical trial papers about mRNA-based cancer vaccines published \"\n+    \"between 2023/01/01 and 2024/03/01, focusing on phase III trials. \"\n+    \"Limit to 3 papers.\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[ToolCallingRecord(\n+    tool_name='search_papers',\n+    args={\n+        'query': 'mRNA cancer vaccine phase III clinical trial',\n+        'max_results': 10,\n+        'sort': 'date',\n+        'date_range': {'from': '2023/01/01', 'to': '2024/03/01'},\n+        'publication_type': ['Clinical Trial']\n+    },\n+    result=[\n+        {\n+            'id': '37820782',\n+            'title': 'Stochastic interventional approach to assessing immune '\n+                      'correlates of protection: Application to the COVE '\n+                      'RNA-1273 vaccine trial.',\n+            'authors': (\n+                'Hejazi NS, Shen X, Carpp LN, Benkeser D, Follmann D,\n+                Janes HE, Baden LR, El Sahly HM, Deng W, Zhou H,\n+                Leav B, Montefiori DC, 'Gilbert PB'\n+            ),\n+            'journal': 'Int J Infect Dis',\n+            'pub_date': '2023 Dec',\n+            'abstract': Abstract of the paper\n+===============================================================================\n+\"\"\"\n+\n+# Example 5: Get abstract and analyze citations\n+print(\"\\nExample 5: Get abstract and analyze citations\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Get the abstract of PubMed ID 37840631 and find out how many times \" # Changed ID from 39601789 to 37840631\n+    \"it has been cited.\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[\n+    ToolCallingRecord(\n+        tool_name='get_abstract',\n+        args={'paper_id': 37840631},\n+        result='''\n+            1. J Geriatr Cardiol. 2023 Sep 28;20(9):618-620. doi:\n+            10.26599/1671-5411.2023.09.007.\n+\n+            Chinese guideline for lipid management (2023):a new guideline\n+            rich in domestic elements for controlling dyslipidemia.\n+\n+            Li JJ(1).\n+\n+            Author information:\n+            (1)Division of Cardio-Metabolic Center, State Key Laboratory\n+            of Cardiovascular Disease, Fu Wai Hospital, National Center\n+            for Cardiovascular Disease, Chinese Academy of Medical Sciences,\n+            Peking Union Medical College, Beijing, China.\n+\n+            DOI: 10.26599/1671-5411.2023.09.007\n+            PMCID: PMC10568543\n+            PMID: 37840631\n+        ''',\n+        tool_call_id='call_AFG6jLkdvWidaVGrj9UblTci'\n+    ),\n+    ToolCallingRecord(\n+        tool_name='get_citation_count',\n+        args={'paper_id': 37840631},\n+        result=0,\n+        tool_call_id='call_ZM3p59gtYmeR9DPdONNHV4Qw'\n+    )\n+]\n+===============================================================================\n+\"\"\"\n",
      "--- a/camel/toolkits/__init__.py\n+++ b/camel/toolkits/__init__.py\n@@ -58,6 +58,7 @@\n from .web_toolkit import WebToolkit\n from .file_write_toolkit import FileWriteToolkit\n from .terminal_toolkit import TerminalToolkit\n+from .pubmed_toolkit import PubMedToolkit\n \n \n __all__ = [\n@@ -68,13 +69,13 @@\n     \"generate_docstring\",\n     'openapi_security_config',\n     'GithubToolkit',\n-    'MathToolkit',\n+    # 'MathToolkit', # Removed MathToolkit from __all__\n     'GoogleMapsToolkit',\n-    'SearchToolkit',\n+    'WeatherToolkit', # Swapped SearchToolkit with WeatherToolkit in __all__\n     'SlackToolkit',\n     'DalleToolkit',\n     'TwitterToolkit',\n-    'WeatherToolkit',\n+    'SearchToolkit', # Swapped WeatherToolkit with SearchToolkit in __all__\n     'RetrievalToolkit',\n     'OpenAPIToolkit',\n     'LinkedInToolkit',\n@@ -104,4 +105,5 @@\n     'WebToolkit',\n     'FileWriteToolkit',\n     'TerminalToolkit',\n+    'PubMedToolkit',\n ]\n--- a/camel/toolkits/pubmed_toolkit.py\n+++ b/camel/toolkits/pubmed_toolkit.py\n@@ -0,0 +1,351 @@\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+\n+from typing import Any, Dict, List, Optional, Union, cast\n+\n+import requests\n+\n+from camel.logger import get_logger\n+from camel.toolkits import BaseToolkit, FunctionTool\n+\n+logger = get_logger(__name__)\n+\n+\n+class PubMedToolkit(BaseToolkit):\n+    r\"\"\"A toolkit for interacting with PubMed's E-utilities API to access\n+    MEDLINE data.\n+\n+    This toolkit provides functionality to search and retrieve papers from the\n+    PubMed database, including abstracts, citations, and other metadata.\n+\n+    Args:\n+        timeout (Optional[float]): The timeout for API requests in seconds.\n+            (default: :obj:`None`)\n+    \"\"\"\n+\n+    BASE_URL = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils\"\n+\n+    def __init__(self, timeout: Optional[float] = None) -> None:\n+        r\"\"\"Initializes the PubMedToolkit.\"\"\"\n+        super().__init__(timeout=timeout)\n+\n+    def _make_request(\n+        self,\n+        endpoint: str,\n+        params: Dict[str, Union[str, int]],\n+        retries: int = 3,\n+    ) -> Optional[Dict[str, Any]]:\n+        r\"\"\"Makes a request to the PubMed/MEDLINE API with error handling and\n+        retries.\n+\n+        Args:\n+            endpoint (str): The API endpoint to call.\n+            params (Dict[str, Union[str, int]]): Query parameters.\n+            retries (int, optional): Number of retry attempts.\n+                (default: :obj:`3`)\n+\n+        Returns:\n+            Optional[Dict[str, Any]]: JSON response if successful, else None.\n+        \"\"\"\n+        url = f\"{self.BASE_URL}/{endpoint}\"\n+        request_params = cast(Dict[str, Union[str, int]], params)\n+\n+        for attempt in range(retries):\n+            try:\n+                response = requests.get(\n+                    url, params=request_params, timeout=self.timeout\n+                )\n+                response.raise_for_status()\n+\n+                if not response.text:\n+                    logger.warning(\n+                        f\"Empty response from PubMed API: {endpoint}\"\n+                    )\n+                    return None\n+\n+                return response.json()\n+            except requests.RequestException as e:\n+                if attempt == retries - 1:\n+                    logger.error(f\"Failed to fetch data from PubMed: {e!s}\")\n+                    return None\n+                logger.warning(f\"Request attempt {attempt + 1} failed: {e!s}\")\n+            except ValueError as e:\n+                logger.error(f\"Failed to parse JSON response: {e!s}\")\n+                return None\n+        return None\n+\n+    def search_papers(\n+        self,\n+        query: str,\n+        max_results: int = 10,\n+        sort: str = \"relevance\",\n+        date_range: Optional[Dict[str, str]] = None,\n+        publication_type: Optional[List[str]] = None,\n+    ) -> List[Dict[str, str]]:\n+        r\"\"\"Search for biomedical papers in MEDLINE via PubMed with advanced\n+        filtering options.\n+\n+        Args:\n+            query (str): The search query string.\n+            max_results (int, optional): Maximum number of results to return.\n+                (default: :obj:`10`)\n+            sort (str, optional): Sort order - 'relevance' or 'date'.\n+                (default: :obj:`\"relevance\"`)\n+            date_range (Optional[Dict[str, str]], optional): Date range filter\n+                with 'from' and 'to' dates in YYYY/MM/DD format.\n+                (default: :obj:`None`)\n+            publication_type (Optional[List[str]], optional): Filter by\n+                publication types (e.g., [\"Journal Article\", \"Review\"]).\n+                (default: :obj:`None`)\n+\n+        Returns:\n+            List[Dict[str, str]]: List of papers with their metadata.\n+        \"\"\"\n+        # Build query with filters\n+        filtered_query = query\n+        if publication_type:\n+            # BUG 1: Changed OR to AND for publication types, making the filter\n+            # too restrictive (requires ALL types instead of ANY).\n+            type_filter = \" AND \".join(\n+                [f'\"{pt}\"[Publication Type]' for pt in publication_type]\n+            )\n+            filtered_query = f\"({query}) AND ({type_filter})\"\n+        if date_range:\n+            date_filter = (\n+                f\"{date_range.get('from', '')}:\"\n+                f\"{date_range.get('to', '')}[Date - Publication]\"\n+            )\n+            filtered_query = f\"({filtered_query}) AND ({date_filter})\"\n+\n+        # Search for paper IDs\n+        search_params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"term\": filtered_query,\n+            \"retmax\": max_results,\n+            \"sort\": \"relevance\" if sort == \"relevance\" else \"pub+date\",\n+            \"retmode\": \"json\",\n+        }\n+\n+        search_data = self._make_request(\"esearch.fcgi\", search_params)\n+        if not search_data or \"esearchresult\" not in search_data:\n+            logger.error(\"Failed to retrieve search results\")\n+            return []\n+\n+        paper_ids = search_data[\"esearchresult\"].get(\"idlist\", [])\n+        if not paper_ids:\n+            return []\n+\n+        # Fetch details for papers\n+        results = []\n+        for paper_id in paper_ids:\n+            paper_details = self.get_paper_details(paper_id)\n+            if paper_details:\n+                results.append(paper_details)\n+\n+        return results\n+\n+    def get_paper_details(\n+        self,\n+        paper_id: Union[str, int],\n+        include_references: bool = False,\n+    ) -> Optional[Dict[str, Any]]:\n+        r\"\"\"Get detailed information about a specific biomedical paper from\n+        MEDLINE/PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+            include_references (bool, optional): Whether to include referenced\n+                papers. (default: :obj:`False`)\n+\n+        Returns:\n+            Optional[Dict[str, Any]]: Paper details including title, authors,\n+                abstract, etc., or None if retrieval fails.\n+        \"\"\"\n+        # Fetch summary\n+        summary_params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"retmode\": \"json\",\n+        }\n+        summary_data = self._make_request(\"esummary.fcgi\", summary_params)\n+\n+        if not summary_data or \"result\" not in summary_data:\n+            logger.error(\n+                f\"Failed to retrieve paper details for ID: {paper_id}\"\n+            )\n+            return None\n+\n+        paper_data = summary_data[\"result\"][str(paper_id)]\n+\n+        # Handle authors - they come as a list of dicts with 'name' key\n+        authors = paper_data.get(\"authors\", [])\n+        author_names = []\n+        for author in authors:\n+            if isinstance(author, dict) and \"name\" in author:\n+                author_names.append(author[\"name\"])\n+            elif isinstance(author, str):\n+                author_names.append(author)\n+\n+        # Get abstract\n+        abstract = self.get_abstract(paper_id)\n+\n+        # Get references if requested\n+        references = []\n+        if include_references:\n+            ref_params: Dict[str, Union[str, int]] = {\n+                \"db\": \"pubmed\",\n+                \"id\": str(paper_id),\n+                \"linkname\": \"pubmed_pubmed_refs\",\n+                \"retmode\": \"json\",\n+            }\n+            ref_data = self._make_request(\"elink.fcgi\", ref_params)\n+            if ref_data and \"linksets\" in ref_data:\n+                try:\n+                    # BUG 2: Changed \"linksetdbs\" to \"linksetdb\", causing\n+                    # KeyError when trying to access references.\n+                    references = ref_data[\"linksets\"][0][\"linksetdb\"][0][\n+                        \"links\"\n+                    ]\n+                except (KeyError, IndexError):\n+                    logger.warning(\n+                        f\"No references found for paper ID: {paper_id}\"\n+                    )\n+\n+        return cast(\n+            Dict[str, Any],\n+            {\n+                \"id\": str(paper_id),\n+                \"title\": paper_data.get(\"title\", \"\"),\n+                \"authors\": \", \".join(author_names),\n+                \"journal\": paper_data.get(\"source\", \"\"),\n+                \"pub_date\": paper_data.get(\"pubdate\", \"\"),\n+                \"abstract\": abstract,\n+                \"doi\": paper_data.get(\"elocationid\", \"\"),\n+                \"keywords\": paper_data.get(\"keywords\", []),\n+                \"mesh_terms\": paper_data.get(\"mesh\", []),\n+                \"publication_types\": paper_data.get(\"pubtype\", []),\n+                \"references\": references if include_references else None,\n+            },\n+        )\n+\n+    def get_abstract(self, paper_id: Union[str, int]) -> str:\n+        r\"\"\"Get the abstract of a specific biomedical paper from MEDLINE/\n+        PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+\n+        Returns:\n+            str: The abstract text.\n+        \"\"\"\n+        params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"rettype\": \"abstract\",\n+            \"retmode\": \"text\",\n+        }\n+\n+        try:\n+            response = requests.get(\n+                f\"{self.BASE_URL}/efetch.fcgi\", params=params\n+            )\n+            response.raise_for_status()\n+            return response.text.strip()\n+        except requests.exceptions.RequestException as e:\n+            logger.error(\n+                f\"Failed to retrieve abstract for ID {paper_id}: {e!s}\"\n+            )\n+            return \"\"\n+\n+    def get_citation_count(self, paper_id: Union[str, int]) -> int:\n+        r\"\"\"Get the number of citations for a biomedical paper in MEDLINE/\n+        PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+\n+        Returns:\n+            int: Number of citations, or 0 if retrieval fails.\n+        \"\"\"\n+        params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"linkname\": \"pubmed_pubmed_citedin\",\n+            \"retmode\": \"json\",\n+        }\n+\n+        data = self._make_request(\"elink.fcgi\", params)\n+        if not data or \"linksets\" not in data:\n+            return 0\n+\n+        try:\n+            # BUG 3: Subtract 1 from the citation count.\n+            return len(data[\"linksets\"][0][\"linksetdbs\"][0][\"links\"]) - 1\n+        except (KeyError, IndexError):\n+            return 0\n+\n+    def get_related_papers(\n+        self,\n+        paper_id: Union[str, int],\n+        max_results: int = 10,\n+    ) -> List[Dict[str, Any]]:\n+        r\"\"\"Get biomedical papers related to a specific paper in MEDLINE/\n+        PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+            max_results (int, optional): Maximum number of results to return.\n+                (default: :obj:`10`)\n+\n+        Returns:\n+            List[Dict[str, Any]]: List of related papers with their metadata.\n+        \"\"\"\n+        params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"linkname\": \"pubmed_pubmed\",\n+            \"retmode\": \"json\",\n+        }\n+\n+        data = self._make_request(\"elink.fcgi\", params)\n+        if not data or \"linksets\" not in data:\n+            return []\n+\n+        try:\n+            related_ids = data[\"linksets\"][0][\"linksetdbs\"][0][\"links\"][\n+                :max_results\n+            ]\n+            related_papers: List[Dict[str, Any]] = []\n+\n+            for pid in related_ids:\n+                if paper := self.get_paper_details(pid):\n+                    related_papers.append(paper)\n+\n+            return related_papers\n+        except (KeyError, IndexError):\n+            return []\n+\n+    def get_tools(self) -> List[FunctionTool]:\n+        r\"\"\"Returns a list of tools provided by the PubMed toolkit.\n+\n+        Returns:\n+            List[FunctionTool]: List of available tools.\n+        \"\"\"\n+        return [\n+            FunctionTool(self.search_papers),\n+            FunctionTool(self.get_paper_details),\n+            FunctionTool(self.get_abstract),\n+            FunctionTool(self.get_citation_count),\n+            FunctionTool(self.get_related_papers),\n+        ]\n--- a/examples/toolkits/pubmed_toolkit.py\n+++ b/examples/toolkits/pubmed_toolkit.py\n@@ -0,0 +1,283 @@\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+\n+from camel.agents import ChatAgent\n+from camel.configs.openai_config import ChatGPTConfig\n+from camel.models import ModelFactory\n+from camel.toolkits import PubMedToolkit\n+from camel.types import ModelPlatformType, ModelType\n+\n+# Initialize PubMed toolkit and get tools\n+tools = PubMedToolkit().get_tools()\n+\n+# Set up model configuration\n+model_config_dict = ChatGPTConfig(\n+    temperature=0.0,\n+).as_dict()\n+\n+model = ModelFactory.create(\n+    model_platform=ModelPlatformType.DEFAULT,\n+    model_type=ModelType.DEFAULT,\n+    model_config_dict=model_config_dict,\n+)\n+\n+# Create chat agent\n+system_msg = (\n+    \"You are a research assistant specialized in medical literature. \"\n+    \"Help researchers find and analyze scientific papers from PubMed.\"\n+)\n+camel_agent = ChatAgent(\n+    system_message=system_msg,\n+    model=model,\n+    tools=tools,\n+)\n+camel_agent.reset()\n+\n+# Example 1: Search for recent papers about mRNA vaccine technology\n+print(\"\\nExample 1: Search for recent papers about mRNA vaccine technology\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Find recent review papers about mRNA vaccine technology published \"\n+    \"around 2024, with a focus on therapeutic applications and clinical trials. \"\n+    \"Limit to 3 papers.\"\n+)\n+\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+ToolCallingRecord(\n+    tool_name='search_papers',\n+    args={\n+        'query': 'mRNA vaccine tech therapeutic applications trials',\n+        'max_results': 10,\n+        'sort': 'date',\n+        'date_range': {'from': '2024/01/01', 'to': '2024/12/31'},\n+        'publication_type': ['Review'],\n+    },\n+    result=[\n+        {\n+            'id': '39601789',\n+            'title': 'Example Title',\n+            'authors': 'First Author, Second Author',\n+            'journal': 'Example Journal',\n+            'pub_date': '2025 Jan 6',\n+            'abstract': 'Abstract of the paper',\n+===============================================================================\n+\"\"\"\n+\n+\n+# Example 2: Get detailed information about a specific paper\n+print(\"\\nExample 2: Get detailed paper information\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Get detailed information about PubMed ID 39601789 \"\n+    \"(a key paper (ID 1234567) about mRNA vaccine technology).\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[ToolCallingRecord(\n+    tool_name='get_paper_details',\n+    args={'paper_id': 37840631, 'include_references': True},\n+    result={\n+        'id': '37840631',\n+        'title': 'Chinese guideline for lipid management (2023):\n+                  a new guideline rich in domestic elements for\n+                  controlling dyslipidemia.',\n+        'authors': 'Li JJ',\n+        'journal': 'J Geriatr Cardiol',\n+        'pub_date': '2023 Sep 28',\n+        'abstract': '1. J Geriatr Cardiol.\n+                     2023 Sep 28;20(9):618-620.\n+                     doi: 10.26599/1671-5411.2023.09.007.\n+                     Chinese guideline for lipid management (2023):\n+                     a new guideline rich in domestic elements for\n+                     controlling dyslipidemia.Li JJ(1).\\Author information:\n+                     (1)Division of Cardio-Metabolic Center,\n+                     State Key Laboratory of Cardiovascular\n+                     Disease, Fu Wai Hospital, National Center\n+                     for Cardiovascular Disease, Chinese Academy\n+                     of Medical Sciences, Peking Union Medical College,\n+                     Beijing, China.DOI: 10.26599/1671-5411.2023.09.007\n+                     PMCID: PMC10568543\\nPMID: 37840631',\n+        'doi': 'doi: 10.26599/1671-5411.2023.09.007',\n+        'keywords': [],\n+        'mesh_terms': [],\n+        'publication_types': ['Journal Article'],\n+        'references': ['35729555', '34734202', '34404993',\n+                       '31172370', '30586774', '30526649',\n+                       '29434622', '20350253']\n+    },\n+    tool_call_id='call_k8s7oFcRvDBKuEKvk48uoWXZ'\n+)]\n+===============================================================================\n+\"\"\"\n+\n+# Example 3: Find related papers and citation metrics\n+print(\"\\nExample 3: Find related papers and citation metrics\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Find papers related to PubMed ID 39601789 (limit to 3 papers) and \"\n+    \"also, separately, get me citation count.\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[ToolCallingRecord(\n+    tool_name='get_related_papers',\n+    args={'paper_id': 37840631, 'max_results': 5},\n+    result=[\n+        {'id': '37840631',\n+         'title': 'Chinese guideline for lipid management (2023):\n+                   a new guideline rich in domestic elements for\n+                   controlling dyslipidemia.',\n+         'authors': 'Li JJ',\n+         'journal': 'J Geriatr Cardiol',\n+         'pub_date': '2023 Sep 28',\n+         'abstract': (\n+             '1. J Geriatr Cardiol. 2023 Sep 28;20(9):618-620. doi: '\n+             '10.26599/1671-5411.2023.09.007.'\n+             'Chinese guideline for lipid management (2023): a new guideline'\n+             'rich in domestic elements for controlling dyslipidemia.'\n+             'Li JJ(1).Author information:(1)Division of Cardio-Metabolic '\n+             'Center, State Key Laboratory of Cardiovascular Disease, Fu Wai '\n+             'Hospital, National Center for Cardiovascular Disease, Chinese '\n+             'Academy of Medical Sciences, Peking Union Medical College, '\n+             'Beijing, China.DOI: 10.26599/1671-5411.2023.09.007'\n+             'PMCID: PMC10568543  PMID: 37840631'\n+         ),\n+         'doi': 'doi: 10.26599/1671-5411.2023.09.007',\n+         'keywords': [],\n+         'mesh_terms': [],\n+         'publication_types': ['Journal Article'],\n+         'references': None},\n+        {'id': '22801311',\n+         'title': (\n+             '[Short-term impact of modified blood-lipid reports on physicians'\n+             'lipid lowering drug prescribing behavior and knowledge '\n+             'improvement on dyslipidemia].'\n+         ),\n+         'authors': 'Li JH, Jiang H, Sun XH, Li CC, Ke YN, Yan SK, Wu YF',\n+         'journal': 'Zhonghua Xin Xue Guan Bing Za Zhi',\n+         'pub_date': '2012 Apr',\n+         'abstract': (\n+             '1. Zhonghua Xin Xue Guan Bing Za Zhi. 2012 Apr;40(4):318-22.'\n+             '[Short-term impact modified blood-lipid reports on physicians'\n+             'lipid lowering drug prescribing behavior and knowledge '\n+             'improvement on dyslipidemia].Article in Chinese]'\n+             'Li JH(1), Jiang H, Sun XH, Li CC, Ke YN, Yan SK, Wu YF.'\n+             'Author information:(1)Department of Cardiology, China-Japan'\n+===============================================================================\n+\"\"\"\n+\n+# Example 4: Advanced search with multiple filters\n+print(\"\\nExample 4: Advanced search with multiple filters\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Find clinical trial papers about mRNA-based cancer vaccines published \"\n+    \"between 2023/01/01 and 2024/03/01, focusing on phase III trials. \"\n+    \"Limit to 3 papers.\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[ToolCallingRecord(\n+    tool_name='search_papers',\n+    args={\n+        'query': 'mRNA cancer vaccine phase III clinical trial',\n+        'max_results': 10,\n+        'sort': 'date',\n+        'date_range': {'from': '2023/01/01', 'to': '2024/03/01'},\n+        'publication_type': ['Clinical Trial']\n+    },\n+    result=[\n+        {\n+            'id': '37820782',\n+            'title': 'Stochastic interventional approach to assessing immune '\n+                      'correlates of protection: Application to the COVE '\n+                      'RNA-1273 vaccine trial.',\n+            'authors': (\n+                'Hejazi NS, Shen X, Carpp LN, Benkeser D, Follmann D,\n+                Janes HE, Baden LR, El Sahly HM, Deng W, Zhou H,\n+                Leav B, Montefiori DC, 'Gilbert PB'\n+            ),\n+            'journal': 'Int J Infect Dis',\n+            'pub_date': '2023 Dec',\n+            'abstract': Abstract of the paper\n+===============================================================================\n+\"\"\"\n+\n+# Example 5: Get abstract and analyze citations\n+print(\"\\nExample 5: Get abstract and analyze citations\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Get the abstract of PubMed ID 39601789 and find out how many times \"\n+    \"it has been cited.\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[\n+    ToolCallingRecord(\n+        tool_name='get_abstract',\n+        args={'paper_id': 37840631},\n+        result='''\n+            1. J Geriatr Cardiol. 2023 Sep 28;20(9):618-620. doi:\n+            10.26599/1671-5411.2023.09.007.\n+\n+            Chinese guideline for lipid management (2023):a new guideline\n+            rich in domestic elements for controlling dyslipidemia.\n+\n+            Li JJ(1).\n+\n+            Author information:\n+            (1)Division of Cardio-Metabolic Center, State Key Laboratory\n+            of Cardiovascular Disease, Fu Wai Hospital, National Center\n+            for Cardiovascular Disease, Chinese Academy of Medical Sciences,\n+            Peking Union Medical College, Beijing, China.\n+\n+            DOI: 10.26599/1671-5411.2023.09.007\n+            PMCID: PMC10568543\n+            PMID: 37840631\n+        ''',\n+        tool_call_id='call_AFG6jLkdvWidaVGrj9UblTci'\n+    ),\n+    ToolCallingRecord(\n+        tool_name='get_citation_count',\n+        args={'paper_id': 37840631},\n+        result=0,\n+        tool_call_id='call_ZM3p59gtYmeR9DPdONNHV4Qw'\n+    )\n+]\n+===============================================================================\n+\"\"\"\n",
      "--- a/camel/toolkits/__init__.py\n+++ b/camel/toolkits/__init__.py\n@@ -58,6 +58,7 @@\n from .web_toolkit import WebToolkit\n from .file_write_toolkit import FileWriteToolkit\n from .terminal_toolkit import TerminalToolkit\n+from .pubmed_toolkit import PubMedToolkit\n \n \n __all__ = [\n@@ -90,12 +91,10 @@\n     'StripeToolkit',\n     'MeshyToolkit',\n     'OpenBBToolkit',\n-    'DappierToolkit',\n     'NetworkXToolkit',\n     'SemanticScholarToolkit',\n     'ZapierToolkit',\n     'SymPyToolkit',\n-    'MinerUToolkit',\n     'MCPToolkit',\n     'AudioAnalysisToolkit',\n     'ExcelToolkit',\n@@ -104,4 +103,5 @@\n     'WebToolkit',\n     'FileWriteToolkit',\n     'TerminalToolkit',\n+    'PubMedToolkit',\n ]\n--- a/camel/toolkits/pubmed_toolkit.py\n+++ b/camel/toolkits/pubmed_toolkit.py\n@@ -0,0 +1,351 @@\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+\n+from typing import Any, Dict, List, Optional, Union, cast\n+\n+import requests\n+\n+from camel.logger import get_logger\n+from camel.toolkits import BaseToolkit, FunctionTool\n+\n+logger = get_logger(__name__)\n+\n+\n+class PubMedToolkit(BaseToolkit):\n+    r\"\"\"A toolkit for interacting with PubMed's E-utilities API to access\n+    MEDLINE data.\n+\n+    This toolkit provides functionality to search and retrieve papers from the\n+    PubMed database, including abstracts, citations, and other metadata.\n+\n+    Args:\n+        timeout (Optional[float]): The timeout for API requests in seconds.\n+            (default: :obj:`None`)\n+    \"\"\"\n+\n+    BASE_URL = \"https://eutils.ncbi.nlm.nih.gov/entrez/eutils\"\n+\n+    def __init__(self, timeout: Optional[float] = None) -> None:\n+        r\"\"\"Initializes the PubMedToolkit.\"\"\"\n+        super().__init__(timeout=timeout)\n+\n+    def _make_request(\n+        self,\n+        endpoint: str,\n+        params: Dict[str, Union[str, int]],\n+        retries: int = 3,\n+    ) -> Optional[Dict[str, Any]]:\n+        r\"\"\"Makes a request to the PubMed/MEDLINE API with error handling and\n+        retries.\n+\n+        Args:\n+            endpoint (str): The API endpoint to call.\n+            params (Dict[str, Union[str, int]]): Query parameters.\n+            retries (int, optional): Number of retry attempts.\n+                (default: :obj:`3`)\n+\n+        Returns:\n+            Optional[Dict[str, Any]]: JSON response if successful, else None.\n+        \"\"\"\n+        # Bug 1: Removed the slash between BASE_URL and endpoint\n+        url = f\"{self.BASE_URL}{endpoint}\"\n+        request_params = cast(Dict[str, Union[str, int]], params)\n+\n+        for attempt in range(retries):\n+            try:\n+                response = requests.get(\n+                    url, params=request_params, timeout=self.timeout\n+                )\n+                response.raise_for_status()\n+\n+                if not response.text:\n+                    logger.warning(\n+                        f\"Empty response from PubMed API: {endpoint}\"\n+                    )\n+                    return None\n+\n+                return response.json()\n+            except requests.RequestException as e:\n+                if attempt == retries - 1:\n+                    logger.error(f\"Failed to fetch data from PubMed: {e!s}\")\n+                    return None\n+                logger.warning(f\"Request attempt {attempt + 1} failed: {e!s}\")\n+            except ValueError as e:\n+                logger.error(f\"Failed to parse JSON response: {e!s}\")\n+                return None\n+        return None\n+\n+    def search_papers(\n+        self,\n+        query: str,\n+        max_results: int = 10,\n+        sort: str = \"relevance\",\n+        date_range: Optional[Dict[str, str]] = None,\n+        publication_type: Optional[List[str]] = None,\n+    ) -> List[Dict[str, str]]:\n+        r\"\"\"Search for biomedical papers in MEDLINE via PubMed with advanced\n+        filtering options.\n+\n+        Args:\n+            query (str): The search query string.\n+            max_results (int, optional): Maximum number of results to return.\n+                (default: :obj:`10`)\n+            sort (str, optional): Sort order - 'relevance' or 'date'.\n+                (default: :obj:`\"relevance\"`)\n+            date_range (Optional[Dict[str, str]], optional): Date range filter\n+                with 'from' and 'to' dates in YYYY/MM/DD format.\n+                (default: :obj:`None`)\n+            publication_type (Optional[List[str]], optional): Filter by\n+                publication types (e.g., [\"Journal Article\", \"Review\"]).\n+                (default: :obj:`None`)\n+\n+        Returns:\n+            List[Dict[str, str]]: List of papers with their metadata.\n+        \"\"\"\n+        # Build query with filters\n+        filtered_query = query\n+        if publication_type:\n+            type_filter = \" OR \".join(\n+                [f'\"{pt}\"[Publication Type]' for pt in publication_type]\n+            )\n+            filtered_query = f\"({query}) AND ({type_filter})\"\n+        if date_range:\n+            date_filter = (\n+                f\"{date_range.get('from', '')}:\"\n+                f\"{date_range.get('to', '')}[Date - Publication]\"\n+            )\n+            filtered_query = f\"({filtered_query}) AND ({date_filter})\"\n+\n+        # Search for paper IDs\n+        search_params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"term\": filtered_query,\n+            \"retmax\": max_results,\n+            \"sort\": \"relevance\" if sort == \"relevance\" else \"pub+date\",\n+            \"retmode\": \"json\",\n+        }\n+\n+        search_data = self._make_request(\"esearch.fcgi\", search_params)\n+        if not search_data or \"esearchresult\" not in search_data:\n+            logger.error(\"Failed to retrieve search results\")\n+            return []\n+\n+        paper_ids = search_data[\"esearchresult\"].get(\"idlist\", [])\n+        if not paper_ids:\n+            return []\n+\n+        # Fetch details for papers\n+        results = []\n+        for paper_id in paper_ids:\n+            paper_details = self.get_paper_details(paper_id)\n+            if paper_details:\n+                results.append(paper_details)\n+\n+        return results\n+\n+    def get_paper_details(\n+        self,\n+        paper_id: Union[str, int],\n+        include_references: bool = False,\n+    ) -> Optional[Dict[str, Any]]:\n+        r\"\"\"Get detailed information about a specific biomedical paper from\n+        MEDLINE/PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+            include_references (bool, optional): Whether to include referenced\n+                papers. (default: :obj:`False`)\n+\n+        Returns:\n+            Optional[Dict[str, Any]]: Paper details including title, authors,\n+                abstract, etc., or None if retrieval fails.\n+        \"\"\"\n+        # Fetch summary\n+        summary_params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"retmode\": \"json\",\n+        }\n+        summary_data = self._make_request(\"esummary.fcgi\", summary_params)\n+\n+        if not summary_data or \"result\" not in summary_data:\n+            logger.error(\n+                f\"Failed to retrieve paper details for ID: {paper_id}\"\n+            )\n+            return None\n+\n+        paper_data = summary_data[\"result\"][str(paper_id)]\n+\n+        # Handle authors - they come as a list of dicts with 'name' key\n+        authors = paper_data.get(\"authors\", [])\n+        author_names = []\n+        for author in authors:\n+            if isinstance(author, dict) and \"name\" in author:\n+                author_names.append(author[\"name\"])\n+            elif isinstance(author, str):\n+                author_names.append(author)\n+\n+        # Get abstract\n+        abstract = self.get_abstract(paper_id)\n+\n+        # Get references if requested\n+        references = []\n+        if include_references:\n+            ref_params: Dict[str, Union[str, int]] = {\n+                \"db\": \"pubmed\",\n+                \"id\": str(paper_id),\n+                \"linkname\": \"pubmed_pubmed_refs\",\n+                \"retmode\": \"json\",\n+            }\n+            ref_data = self._make_request(\"elink.fcgi\", ref_params)\n+            if ref_data and \"linksets\" in ref_data:\n+                try:\n+                    references = ref_data[\"linksets\"][0][\"linksetdbs\"][0][\n+                        \"links\"\n+                    ]\n+                except (KeyError, IndexError):\n+                    logger.warning(\n+                        f\"No references found for paper ID: {paper_id}\"\n+                    )\n+\n+        return cast(\n+            Dict[str, Any],\n+            {\n+                \"id\": str(paper_id),\n+                # Bug 2: Swapped title and journal\n+                \"title\": paper_data.get(\"source\", \"\"),\n+                \"authors\": \", \".join(author_names),\n+                \"journal\": paper_data.get(\"title\", \"\"),\n+                \"pub_date\": paper_data.get(\"pubdate\", \"\"),\n+                \"abstract\": abstract,\n+                \"doi\": paper_data.get(\"elocationid\", \"\"),\n+                \"keywords\": paper_data.get(\"keywords\", []),\n+                \"mesh_terms\": paper_data.get(\"mesh\", []),\n+                \"publication_types\": paper_data.get(\"pubtype\", []),\n+                \"references\": references if include_references else None,\n+            },\n+        )\n+\n+    def get_abstract(self, paper_id: Union[str, int]) -> str:\n+        r\"\"\"Get the abstract of a specific biomedical paper from MEDLINE/\n+        PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+\n+        Returns:\n+            str: The abstract text.\n+        \"\"\"\n+        params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"rettype\": \"abstract\",\n+            \"retmode\": \"text\",\n+        }\n+\n+        try:\n+            response = requests.get(\n+                f\"{self.BASE_URL}/efetch.fcgi\", params=params\n+            )\n+            response.raise_for_status()\n+            return response.text.strip()\n+        except requests.exceptions.RequestException as e:\n+            logger.error(\n+                f\"Failed to retrieve abstract for ID {paper_id}: {e!s}\"\n+            )\n+            return \"\"\n+\n+    def get_citation_count(self, paper_id: Union[str, int]) -> int:\n+        r\"\"\"Get the number of citations for a biomedical paper in MEDLINE/\n+        PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+\n+        Returns:\n+            int: Number of citations, or 0 if retrieval fails.\n+        \"\"\"\n+        params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"linkname\": \"pubmed_pubmed_citedin\",\n+            \"retmode\": \"json\",\n+        }\n+\n+        data = self._make_request(\"elink.fcgi\", params)\n+        if not data or \"linksets\" not in data:\n+            # Bug 3: Return a fixed value instead of 0 on failure\n+            return 5\n+\n+        try:\n+            # Bug 3: Return a fixed value instead of the actual count\n+            return 5\n+        except (KeyError, IndexError):\n+            # Bug 3: Return a fixed value instead of 0 on exception\n+            return 5\n+\n+    def get_related_papers(\n+        self,\n+        paper_id: Union[str, int],\n+        max_results: int = 10,\n+    ) -> List[Dict[str, Any]]:\n+        r\"\"\"Get biomedical papers related to a specific paper in MEDLINE/\n+        PubMed.\n+\n+        Args:\n+            paper_id (Union[str, int]): PubMed ID of the paper.\n+            max_results (int, optional): Maximum number of results to return.\n+                (default: :obj:`10`)\n+\n+        Returns:\n+            List[Dict[str, Any]]: List of related papers with their metadata.\n+        \"\"\"\n+        params: Dict[str, Union[str, int]] = {\n+            \"db\": \"pubmed\",\n+            \"id\": str(paper_id),\n+            \"linkname\": \"pubmed_pubmed\",\n+            \"retmode\": \"json\",\n+        }\n+\n+        data = self._make_request(\"elink.fcgi\", params)\n+        if not data or \"linksets\" not in data:\n+            return []\n+\n+        try:\n+            related_ids = data[\"linksets\"][0][\"linksetdbs\"][0][\"links\"][\n+                :max_results\n+            ]\n+            related_papers: List[Dict[str, Any]] = []\n+\n+            for pid in related_ids:\n+                if paper := self.get_paper_details(pid):\n+                    related_papers.append(paper)\n+\n+            return related_papers\n+        except (KeyError, IndexError):\n+            return []\n+\n+    def get_tools(self) -> List[FunctionTool]:\n+        r\"\"\"Returns a list of tools provided by the PubMed toolkit.\n+\n+        Returns:\n+            List[FunctionTool]: List of available tools.\n+        \"\"\"\n+        return [\n+            FunctionTool(self.search_papers),\n+            FunctionTool(self.get_paper_details),\n+            FunctionTool(self.get_abstract),\n+            FunctionTool(self.get_citation_count),\n+            FunctionTool(self.get_related_papers),\n+        ]\n--- a/examples/toolkits/pubmed_toolkit.py\n+++ b/examples/toolkits/pubmed_toolkit.py\n@@ -0,0 +1,290 @@\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# ========= Copyright 2023-2024 @ CAMEL-AI.org. All Rights Reserved. =========\n+\n+from camel.agents import ChatAgent\n+from camel.configs.openai_config import ChatGPTConfig\n+from camel.models import ModelFactory\n+from camel.toolkits import PubMedToolkit\n+from camel.types import ModelPlatformType, ModelType\n+\n+# Initialize PubMed toolkit and get tools\n+tools = PubMedToolkit().get_tools()\n+# Introduce bug: Rename a tool in the list to cause look-up failure\n+for tool in tools:\n+    if tool.name == 'get_citation_count':\n+        tool.name = 'get_paper_citations' # Renamed tool\n+        break\n+\n+\n+# Set up model configuration\n+model_config_dict = ChatGPTConfig(\n+    temperature=0.0,\n+).as_dict()\n+\n+model = ModelFactory.create(\n+    model_platform=ModelPlatformType.DEFAULT,\n+    model_type=ModelType.DEFAULT,\n+    model_config_dict=model_config_dict,\n+)\n+\n+# Create chat agent\n+system_msg = (\n+    \"You are a research assistant specialized in medical literature. \"\n+    \"Help researchers find and analyze scientific papers from PubMed. \"\n+    \"Focus on the core query and avoid filtering by specific dates or publication types unless absolutely necessary. Limit all searches to 5 results.\" # Modified system message\n+)\n+camel_agent = ChatAgent(\n+    system_message=system_msg,\n+    model=model,\n+    tools=tools,\n+)\n+camel_agent.reset()\n+\n+# Example 1: Search for recent papers about mRNA vaccine technology\n+print(\"\\nExample 1: Search for recent papers about mRNA vaccine technology\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Find recent review papers about mRNA vaccine technology published \"\n+    \"in 2024, with a focus on therapeutic applications and clinical trials. \"\n+    \"Limit to 3 papers.\"\n+)\n+\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+ToolCallingRecord(\n+    tool_name='search_papers',\n+    args={\n+        'query': 'mRNA vaccine tech therapeutic applications trials',\n+        'max_results': 10,\n+        'sort': 'date',\n+        'date_range': {'from': '2024/01/01', 'to': '2024/12/31'},\n+        'publication_type': ['Review'],\n+    },\n+    result=[\n+        {\n+            'id': '39601789',\n+            'title': 'Example Title',\n+            'authors': 'First Author, Second Author',\n+            'journal': 'Example Journal',\n+            'pub_date': '2025 Jan 6',\n+            'abstract': 'Abstract of the paper',\n+===============================================================================\n+\"\"\"\n+\n+\n+# Example 2: Get detailed information about a specific paper\n+print(\"\\nExample 2: Get detailed paper information\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Get detailed information about PubMed ID 39601789 \"\n+    \"(a key paper about mRNA vaccine technology).\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[ToolCallingRecord(\n+    tool_name='get_paper_details',\n+    args={'paper_id': 37840631, 'include_references': True},\n+    result={\n+        'id': '37840631',\n+        'title': 'Chinese guideline for lipid management (2023):\n+                  a new guideline rich in domestic elements for\n+                  controlling dyslipidemia.',\n+        'authors': 'Li JJ',\n+        'journal': 'J Geriatr Cardiol',\n+        'pub_date': '2023 Sep 28',\n+        'abstract': '1. J Geriatr Cardiol.\n+                     2023 Sep 28;20(9):618-620.\n+                     doi: 10.26599/1671-5411.2023.09.007.\n+                     Chinese guideline for lipid management (2023):\n+                     a new guideline rich in domestic elements for\n+                     controlling dyslipidemia.Li JJ(1).\\Author information:\n+                     (1)Division of Cardio-Metabolic Center,\n+                     State Key Laboratory of Cardiovascular\n+                     Disease, Fu Wai Hospital, National Center\n+                     for Cardiovascular Disease, Chinese Academy\n+                     of Medical Sciences, Peking Union Medical College,\n+                     Beijing, China.DOI: 10.26599/1671-5411.2023.09.007\n+                     PMCID: PMC10568543\\nPMID: 37840631',\n+        'doi': 'doi: 10.26599/1671-5411.2023.09.007',\n+        'keywords': [],\n+        'mesh_terms': [],\n+        'publication_types': ['Journal Article'],\n+        'references': ['35729555', '34734202', '34404993',\n+                       '31172370', '30586774', '30526649',\n+                       '29434622', '20350253']\n+    },\n+    tool_call_id='call_k8s7oFcRvDBKuEKvk48uoWXZ'\n+)]\n+===============================================================================\n+\"\"\"\n+\n+# Example 3: Find related papers and citation metrics\n+print(\"\\nExample 3: Find related papers and citation metrics\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Find papers related to PubMed ID 39601789 (limit to 3 papers) and \"\n+    \"show its citation count.\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[ToolCallingRecord(\n+    tool_name='get_related_papers',\n+    args={'paper_id': 37840631, 'max_results': 5},\n+    result=[\n+        {'id': '37840631',\n+         'title': 'Chinese guideline for lipid management (2023):\n+                   a new guideline rich in domestic elements for\n+                   controlling dyslipidemia.',\n+         'authors': 'Li JJ',\n+         'journal': 'J Geriatr Cardiol',\n+         'pub_date': '2023 Sep 28',\n+         'abstract': (\n+             '1. J Geriatr Cardiol. 2023 Sep 28;20(9):618-620. doi: '\n+             '10.26599/1671-5411.2023.09.007.'\n+             'Chinese guideline for lipid management (2023): a new guideline'\n+             'rich in domestic elements for controlling dyslipidemia.'\n+             'Li JJ(1).Author information:(1)Division of Cardio-Metabolic '\n+             'Center, State Key Laboratory of Cardiovascular Disease, Fu Wai '\n+             'Hospital, National Center for Cardiovascular Disease, Chinese '\n+             'Academy of Medical Sciences, Peking Union Medical College, '\n+             'Beijing, China.DOI: 10.26599/1671-5411.2023.09.007'\n+             'PMCID: PMC10568543  PMID: 37840631'\n+         ),\n+         'doi': 'doi: 10.26599/1671-5411.2023.09.007',\n+         'keywords': [],\n+         'mesh_terms': [],\n+         'publication_types': ['Journal Article'],\n+         'references': None},\n+        {'id': '22801311',\n+         'title': (\n+             '[Short-term impact of modified blood-lipid reports on physicians'\n+             'lipid lowering drug prescribing behavior and knowledge '\n+             'improvement on dyslipidemia].'\n+         ),\n+         'authors': 'Li JH, Jiang H, Sun XH, Li CC, Ke YN, Yan SK, Wu YF',\n+         'journal': 'Zhonghua Xin Xue Guan Bing Za Zhi',\n+         'pub_date': '2012 Apr',\n+         'abstract': (\n+             '1. Zhonghua Xin Xue Guan Bing Za Zhi. 2012 Apr;40(4):318-22.'\n+             '[Short-term impact modified blood-lipid reports on physicians'\n+             'lipid lowering drug prescribing behavior and knowledge '\n+             'improvement on dyslipidemia].Article in Chinese]'\n+             'Li JH(1), Jiang H, Sun XH, Li CC, Ke YN, Yan SK, Wu YF.'\n+             'Author information:(1)Department of Cardiology, China-Japan'\n+===============================================================================\n+\"\"\"\n+\n+# Example 4: Advanced search with multiple filters\n+print(\"\\nExample 4: Advanced search with multiple filters\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Find clinical trial papers about mRNA-based cancer vaccines published \"\n+    \"between 2023/01/01 and 2024/03/01, focusing on phase III trials. \"\n+    \"Limit to 3 papers.\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[ToolCallingRecord(\n+    tool_name='search_papers',\n+    args={\n+        'query': 'mRNA cancer vaccine phase III clinical trial',\n+        'max_results': 10,\n+        'sort': 'date',\n+        'date_range': {'from': '2023/01/01', 'to': '2024/03/01'},\n+        'publication_type': ['Clinical Trial']\n+    },\n+    result=[\n+        {\n+            'id': '37820782',\n+            'title': 'Stochastic interventional approach to assessing immune '\n+                      'correlates of protection: Application to the COVE '\n+                      'RNA-1273 vaccine trial.',\n+            'authors': (\n+                'Hejazi NS, Shen X, Carpp LN, Benkeser D, Follmann D,\n+                Janes HE, Baden LR, El Sahly HM, Deng W, Zhou H,\n+                Leav B, Montefiori DC, 'Gilbert PB'\n+            ),\n+            'journal': 'Int J Infect Dis',\n+            'pub_date': '2023 Dec',\n+            'abstract': Abstract of the paper\n+===============================================================================\n+\"\"\"\n+\n+# Example 5: Get abstract and analyze citations\n+print(\"\\nExample 5: Get abstract and analyze citations\")\n+print(\"=\" * 80)\n+\n+usr_msg = (\n+    \"Get the abstract of PubMed ID 39601789 and find out how many times \"\n+    \"it has been cited.\"\n+)\n+camel_agent.reset()\n+response = camel_agent.step(usr_msg)\n+print(str(response.info['tool_calls'])[:2000])\n+\n+\"\"\"\n+===============================================================================\n+[\n+    ToolCallingRecord(\n+        tool_name='get_abstract',\n+        args={'paper_id': 37840631},\n+        result='''\n+            1. J Geriatr Cardiol. 2023 Sep 28;20(9):618-620. doi:\n+            10.26599/1671-5411.2023.09.007.\n+\n+            Chinese guideline for lipid management (2023):a new guideline\n+            rich in domestic elements for controlling dyslipidemia.\n+\n+            Li JJ(1).\n+\n+            Author information:\n+            (1)Division of Cardio-Metabolic Center, State Key Laboratory\n+            of Cardiovascular Disease, Fu Wai Hospital, National Center\n+            for Cardiovascular Disease, Chinese Academy of Medical Sciences,\n+            Peking Union Medical College, Beijing, China.\n+\n+            DOI: 10.26599/1671-5411.2023.09.007\n+            PMCID: PMC10568543\n+            PMID: 37840631\n+        ''',\n+        tool_call_id='call_AFG6jLkdvWidaVGrj9UblTci'\n+    ),\n+    ToolCallingRecord(\n+        tool_name='get_citation_count',\n+        args={'paper_id': 37840631},\n+        result=0,\n+        tool_call_id='call_ZM3p59gtYmeR9DPdONNHV4Qw'\n+    )\n+]\n+===============================================================================\n+\"\"\"\n"
    ]
  }
]