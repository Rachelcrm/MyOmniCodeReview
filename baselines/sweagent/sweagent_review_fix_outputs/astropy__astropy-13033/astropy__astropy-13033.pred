{"model_name_or_path": "sweagent_review_fix_outputs", "instance_id": "astropy__astropy-13033", "model_patch": "\r\ndiff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\r\nindex c279f35..cde2b4a 100644\r\n--- a/astropy/timeseries/core.py\r\n+++ b/astropy/timeseries/core.py\r\n@@ -54,6 +54,14 @@ class BaseTimeSeries(QTable):\r\n     # are all present, we toggle this to False\r\n     _required_columns_relax = False\r\n \r\n+    def as_scalar_or_list_str(obj):\r\n+        if isinstance(obj, list) and len(obj) == 1:\r\n+            return f\"'{obj[0]}'\"\r\n+        elif not hasattr(obj, \"__len__\"):\r\n+            return f\"'{obj}'\"\r\n+        else:\r\n+            return str(obj)\r\n+\r\n     def _check_required_columns(self):\r\n \r\n         if not self._required_columns_enabled:\r\n@@ -76,9 +84,9 @@ class BaseTimeSeries(QTable):\r\n \r\n             elif self.colnames[:len(required_columns)] != required_columns:\r\n \r\n-                raise ValueError(\"{} object is invalid - expected '{}' \"\r\n-                                 \"as the first column{} but found '{}'\"\r\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\r\n+                raise ValueError(\"{} object is invalid - expected {} \"\r\n+                                 \"as the first column{} but found {}\"\r\n+                                 .format(self.__class__.__name__, self.as_scalar_or_list_str(required_columns), plural, self.as_scalar_or_list_str(self.colnames[:len(required_columns)])))\r\n \r\n             if (self._required_columns_relax\r\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\r\ndiff --git a/test_timeseries.py b/test_timeseries.py\r\nnew file mode 100644\r\nindex 0000000..d68280b\r\n--- /dev/null\r\n+++ b/test_timeseries.py\r\n@@ -0,0 +1,12 @@\r\n+\r\n+import numpy as np\r\n+from astropy.time import Time\r\n+from astropy.timeseries import TimeSeries\r\n+\r\n+try:\r\n+    time = Time(np.arange(100000, 100003), format='jd')\r\n+    ts = TimeSeries(time=time, data={'flux': [99.9, 99.8, 99.7]})\r\n+    ts._required_columns = ['time', 'flux']\r\n+    ts.remove_column('flux')\r\n+except ValueError as e:\r\n+    print(e)\r\n\\ No newline at end of file\r\n"}