
diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py
index 8bece5a..d1bac37 100644
--- a/astropy/units/decorators.py
+++ b/astropy/units/decorators.py
@@ -220,7 +220,7 @@ class QuantityInput:
             # Call the original function with any equivalencies in force.
             with add_enabled_equivalencies(self.equivalencies):
                 return_ = wrapped_function(*func_args, **func_kwargs)
-            if wrapped_signature.return_annotation is not inspect.Signature.empty:
+            if wrapped_signature.return_annotation is not inspect.Signature.empty and return_ is not None:
                 return return_.to(wrapped_signature.return_annotation)
             else:
                 return return_
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000..f93f201
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,13 @@
+
+import astropy.units as u
+
+
+class PoC(object):
+
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        pass
+
+
+if __name__ == '__main__':
+    poc = PoC(1.*u.V)
\ No newline at end of file
diff --git a/test_quantity_input.py b/test_quantity_input.py
new file mode 100644
index 0000000..59ff472
--- /dev/null
+++ b/test_quantity_input.py
@@ -0,0 +1,17 @@
+
+import astropy.units as u
+
+
+def test_quantity_input_with_none_return_type():
+    class PoC(object):
+
+        @u.quantity_input
+        def __init__(self, voltage: u.V) -> None:
+            pass
+
+    poc = PoC(1.*u.V)
+    assert poc is not None
+
+
+test_quantity_input_with_none_return_type()
+print("Test completed successfully, no errors.")
\ No newline at end of file
