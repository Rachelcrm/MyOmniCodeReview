{"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-13977", "model_patch": "\r\ndiff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\r\nindex b98abfa..930258d 100644\r\n--- a/astropy/units/quantity.py\r\n+++ b/astropy/units/quantity.py\r\n@@ -670,7 +670,10 @@ class Quantity(np.ndarray):\r\n             arrays.append(converter(input_) if converter else input_)\r\n \r\n         # Call our superclass's __array_ufunc__\r\n-        result = super().__array_ufunc__(function, method, *arrays, **kwargs)\r\n+        try:\r\n+            result = super().__array_ufunc__(function, method, *arrays, **kwargs)\r\n+        except ValueError:\r\n+            return NotImplemented\r\n         # If unit is None, a plain array is expected (e.g., comparisons), which\r\n         # means we're done.\r\n         # We're also done if the result was None (for method 'at') or\r\ndiff --git a/test_duck_array.py b/test_duck_array.py\r\nnew file mode 100644\r\nindex 0000000..215047a\r\n--- /dev/null\r\n+++ b/test_duck_array.py\r\n@@ -0,0 +1,29 @@\r\n+\r\n+import dataclasses\r\n+import numpy as np\r\n+import astropy.units as u\r\n+\r\n+@dataclasses.dataclass\r\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\r\n+    ndarray: u.Quantity\r\n+\r\n+    @property\r\n+    def unit(self) -> u.UnitBase:\r\n+        return self.ndarray.unit\r\n+\r\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\r\n+\r\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\r\n+\r\n+        for inp in inputs:\r\n+            if isinstance(inp, np.ndarray):\r\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\r\n+                if result is not NotImplemented:\r\n+                    return DuckArray(result)\r\n+\r\n+        return NotImplemented\r\n+\r\n+try:\r\n+    result = (1 * u.m) + DuckArray(1 * u.mm)\r\n+except ValueError as e:\r\n+    print(f\"Caught ValueError: {e}\")\r\n\\ No newline at end of file\r\n"}