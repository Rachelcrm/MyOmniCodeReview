
diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfa..930258d 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -670,7 +670,10 @@ class Quantity(np.ndarray):
             arrays.append(converter(input_) if converter else input_)
 
         # Call our superclass's __array_ufunc__
-        result = super().__array_ufunc__(function, method, *arrays, **kwargs)
+        try:
+            result = super().__array_ufunc__(function, method, *arrays, **kwargs)
+        except ValueError:
+            return NotImplemented
         # If unit is None, a plain array is expected (e.g., comparisons), which
         # means we're done.
         # We're also done if the result was None (for method 'at') or
diff --git a/test_duck_array.py b/test_duck_array.py
new file mode 100644
index 0000000..215047a
--- /dev/null
+++ b/test_duck_array.py
@@ -0,0 +1,29 @@
+
+import dataclasses
+import numpy as np
+import astropy.units as u
+
+@dataclasses.dataclass
+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):
+    ndarray: u.Quantity
+
+    @property
+    def unit(self) -> u.UnitBase:
+        return self.ndarray.unit
+
+    def __array_ufunc__(self, function, method, *inputs, **kwargs):
+
+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]
+
+        for inp in inputs:
+            if isinstance(inp, np.ndarray):
+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)
+                if result is not NotImplemented:
+                    return DuckArray(result)
+
+        return NotImplemented
+
+try:
+    result = (1 * u.m) + DuckArray(1 * u.mm)
+except ValueError as e:
+    print(f"Caught ValueError: {e}")
\ No newline at end of file
