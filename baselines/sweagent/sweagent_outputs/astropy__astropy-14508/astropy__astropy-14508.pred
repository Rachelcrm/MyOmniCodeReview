{"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-14508", "model_patch": "\r\ndiff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\r\nindex 118bfce..0a2bc74 100644\r\n--- a/astropy/io/fits/card.py\r\n+++ b/astropy/io/fits/card.py\r\n@@ -1299,7 +1299,9 @@ def _format_value(value):\r\n \r\n def _format_float(value):\r\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\r\n-    value_str = f\"{value:.16G}\"\r\n+    value_str = str(value)\r\n+    if len(value_str) > 20:\r\n+        value_str = f\"{value:.16G}\"\r\n     if \".\" not in value_str and \"E\" not in value_str:\r\n         value_str += \".0\"\r\n     elif \"E\" in value_str:\r\ndiff --git a/create_test_fits.py b/create_test_fits.py\r\nnew file mode 100644\r\nindex 0000000..ac7f9b6\r\n--- /dev/null\r\n+++ b/create_test_fits.py\r\n@@ -0,0 +1,12 @@\r\n+\r\n+from astropy.io import fits\r\n+import numpy as np\r\n+\r\n+# Create a primary HDU with a minimal header\r\n+hdu = fits.PrimaryHDU(data=np.zeros((10, 10)))\r\n+\r\n+# Add the specific card to the header\r\n+hdu.header['HIERARCH ESO IFM CL RADIUS'] = (0.009125, '[m] radius arround actuator to avoid')\r\n+\r\n+# Write the FITS file\r\n+hdu.writeto('test.fits', overwrite=True)\r\n\\ No newline at end of file\r\ndiff --git a/reproduce_issue.py b/reproduce_issue.py\r\nnew file mode 100644\r\nindex 0000000..3fd506a\r\n--- /dev/null\r\n+++ b/reproduce_issue.py\r\n@@ -0,0 +1,13 @@\r\n+\r\n+from astropy.io import fits\r\n+\r\n+# Assuming 'test.fits' is available in the current directory\r\n+hdr = fits.getheader('test.fits')\r\n+c = hdr.cards['ESO IFM CL RADIUS']\r\n+\r\n+print(repr(c))\r\n+print(str(c))\r\n+\r\n+new_c = fits.Card(f'HIERARCH {c.keyword}', c.value, c.comment)\r\n+print(repr(new_c))\r\n+print(str(new_c))\r\n\\ No newline at end of file\r\ndiff --git a/test_card.py b/test_card.py\r\nnew file mode 100644\r\nindex 0000000..10188db\r\n--- /dev/null\r\n+++ b/test_card.py\r\n@@ -0,0 +1,15 @@\r\n+\r\n+import unittest\r\n+from astropy.io import fits\r\n+\r\n+class TestFitsCard(unittest.TestCase):\r\n+    def test_float_representation(self):\r\n+        # Create a card with the specific float value and comment\r\n+        card = fits.Card('HIERARCH ESO IFM CL RADIUS', 0.009125, '[m] radius arround actuator to avoid')\r\n+        \r\n+        # Check the string representation\r\n+        expected_str = 'HIERARCH ESO IFM CL RADIUS = 0.009125 / [m] radius arround actuator to avoid    '\r\n+        self.assertEqual(str(card), expected_str)\r\n+\r\n+if __name__ == '__main__':\r\n+    unittest.main()\r\n\\ No newline at end of file\r\n"}