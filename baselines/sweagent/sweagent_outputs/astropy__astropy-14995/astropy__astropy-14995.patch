
diff --git a/astropy/nddata/tests/test_nddata.py b/astropy/nddata/tests/test_nddata.py
index 033b555..efdeca6 100644
--- a/astropy/nddata/tests/test_nddata.py
+++ b/astropy/nddata/tests/test_nddata.py
@@ -11,7 +11,7 @@ import pytest
 from numpy.testing import assert_array_equal
 
 from astropy import units as u
-from astropy.nddata import NDDataArray
+from astropy.nddata import NDDataArray, NDDataRef
 from astropy.nddata import _testing as nd_testing
 from astropy.nddata.nddata import NDData
 from astropy.nddata.nduncertainty import StdDevUncertainty
@@ -707,3 +707,28 @@ def test_collapse(mask, unit, propagate_uncertainties, operation_ignores_mask):
             # as the data array, so we can just check for equality:
             if method in ext_methods and propagate_uncertainties:
                 assert np.ma.all(np.ma.equal(astropy_method, nddata_method))
+
+
+def test_nddataref_mask_propagation():
+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+    nref_nomask = NDDataRef(array)
+    nref_mask = NDDataRef(array, mask=mask)
+
+    # multiply no mask by constant (no mask * no mask)
+    assert nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask is None
+
+    # multiply no mask by itself (no mask * no mask)
+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None
+
+    # multiply mask by constant (mask * no mask)
+    with pytest.raises(TypeError):
+        nref_mask.multiply(1., handle_mask=np.bitwise_or).mask
+
+    # multiply mask by itself (mask * mask)
+    assert np.array_equal(nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask, mask)
+
+    # multiply mask by no mask (mask * no mask)
+    with pytest.raises(TypeError):
+        nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask
\ No newline at end of file
diff --git a/test_nddataref_mask_propagation.py b/test_nddataref_mask_propagation.py
new file mode 100644
index 0000000..6223b35
--- /dev/null
+++ b/test_nddataref_mask_propagation.py
@@ -0,0 +1,32 @@
+
+import numpy as np
+from astropy.nddata import NDDataRef
+
+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+# multiply no mask by constant (no mask * no mask)
+assert nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask is None
+
+# multiply no mask by itself (no mask * no mask)
+assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None
+
+# multiply mask by constant (mask * no mask)
+try:
+    nref_mask.multiply(1., handle_mask=np.bitwise_or).mask
+except TypeError as e:
+    print("TypeError occurred as expected: ", e)
+
+# multiply mask by itself (mask * mask)
+assert np.array_equal(nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask, mask)
+
+# multiply mask by no mask (mask * no mask)
+try:
+    nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask
+except TypeError as e:
+    print("TypeError occurred as expected: ", e)
+
+print("Script completed successfully, no errors.")
\ No newline at end of file
