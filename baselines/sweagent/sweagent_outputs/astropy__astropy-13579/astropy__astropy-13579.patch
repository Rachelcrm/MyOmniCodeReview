
diff --git a/astropy/wcs/tests/test_wcs.py b/astropy/wcs/tests/test_wcs.py
index 80f9c38..ceffbbe 100644
--- a/astropy/wcs/tests/test_wcs.py
+++ b/astropy/wcs/tests/test_wcs.py
@@ -1578,3 +1578,52 @@ def test_swapaxes_same_val_roundtrip():
 
     # check round-tripping:
     assert np.allclose(w.wcs_world2pix([val_ref], 0)[0], imcoord, rtol=0, atol=1e-8)
+
+
+def test_sliced_low_level_wcs_world_to_pixel():
+    import numpy as np
+    import astropy.wcs
+    from astropy.coordinates import SkyCoord
+    import astropy.units as u
+
+    nx = 100
+    ny = 25
+    nz = 2
+    wcs_header = {
+        'WCSAXES': 3,
+        'CRPIX1': (nx + 1)/2,
+        'CRPIX2': (ny + 1)/2,
+        'CRPIX3': 1.0,
+        'PC1_1': 0.0,
+        'PC1_2': -1.0,
+        'PC1_3': 0.0,
+        'PC2_1': 1.0,
+        'PC2_2': 0.0,
+        'PC2_3': -1.0,
+        'CDELT1': 5,
+        'CDELT2': 5,
+        'CDELT3': 0.055,
+        'CUNIT1': 'arcsec',
+        'CUNIT2': 'arcsec',
+        'CUNIT3': 'Angstrom',
+        'CTYPE1': 'HPLN-TAN',
+        'CTYPE2': 'HPLT-TAN',
+        'CTYPE3': 'WAVE',
+        'CRVAL1': 0.0,
+        'CRVAL2': 0.0,
+        'CRVAL3': 1.05,
+    }
+    fits_wcs = astropy.wcs.WCS(header=wcs_header)
+
+    pt = SkyCoord(Tx=0*u.arcsec, Ty=0*u.arcsec, frame=astropy.wcs.utils.wcs_to_celestial_frame(fits_wcs))
+    px, py, pz = fits_wcs.world_to_pixel(pt, 1.05*u.angstrom)
+
+    assert np.isclose(px, 49.5)
+    assert np.isclose(py, 12.0)
+
+    ll_sliced_wcs = astropy.wcs.wcsapi.SlicedLowLevelWCS(fits_wcs, 0)
+    hl_sliced_wcs = astropy.wcs.wcsapi.HighLevelWCSWrapper(ll_sliced_wcs)
+    px_sliced, py_sliced = hl_sliced_wcs.world_to_pixel(pt)
+
+    assert np.isclose(px_sliced, 49.5)
+    assert np.isclose(py_sliced, 12.0)
\ No newline at end of file
