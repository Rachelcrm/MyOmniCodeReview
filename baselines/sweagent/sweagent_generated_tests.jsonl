{"instance_id": "astropy__astropy-12907", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-12907", "model_patch": "\r\ndiff --git a/astropy/modeling/tests/test_separable.py b/astropy/modeling/tests/test_separable.py\r\nindex 8dfe5c8..a3a0c85 100644\r\n--- a/astropy/modeling/tests/test_separable.py\r\n+++ b/astropy/modeling/tests/test_separable.py\r\n@@ -148,3 +148,25 @@ def test_custom_model_separable():\r\n \r\n     assert not model_c().separable\r\n     assert np.all(separability_matrix(model_c()) == [True, True])\r\n+def test_separability_matrix_nested_compound_models():\r\n+    cm = models.Linear1D(10) & models.Linear1D(5)\r\n+    expected_matrix_cm = np.array([[True, False], [False, True]])\r\n+    assert np.array_equal(separability_matrix(cm), expected_matrix_cm)\r\n+\r\n+    complex_model = models.Pix2Sky_TAN() & models.Linear1D(10) & models.Linear1D(5)\r\n+    expected_matrix_complex = np.array([\r\n+        [True, True, False, False],\r\n+        [True, True, False, False],\r\n+        [False, False, True, False],\r\n+        [False, False, False, True]\r\n+    ])\r\n+    assert np.array_equal(separability_matrix(complex_model), expected_matrix_complex)\r\n+\r\n+    nested_model = models.Pix2Sky_TAN() & cm\r\n+    expected_matrix_nested = np.array([\r\n+        [True, True, False, False],\r\n+        [True, True, False, False],\r\n+        [False, False, True, True],\r\n+        [False, False, True, True]\r\n+    ])\r\n+    assert np.array_equal(separability_matrix(nested_model), expected_matrix_nested)\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-13033", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-13033", "model_patch": "\r\ndiff --git a/astropy/timeseries/tests/test_common.py b/astropy/timeseries/tests/test_common.py\r\nindex c873ac6..2cd4a10 100644\r\n--- a/astropy/timeseries/tests/test_common.py\r\n+++ b/astropy/timeseries/tests/test_common.py\r\n@@ -83,6 +83,12 @@ class TestTimeSeries(CommonTimeSeriesTests):\r\n         ts = self.series['time', 'a']\r\n         assert isinstance(ts, TimeSeries)\r\n \r\n+    def test_remove_required_column(self):\r\n+        ts = TimeSeries(time=INPUT_TIME, data=PLAIN_TABLE)\r\n+        ts._required_columns = ['time', 'a']\r\n+        with pytest.raises(ValueError) as exc:\r\n+            ts.remove_column('a')\r\n+        assert \"required columns are missing\" in str(exc.value)\r\n \r\n class TestBinnedTimeSeries(CommonTimeSeriesTests):\r\n \r\n"}}
{"instance_id": "astropy__astropy-13236", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-13236", "model_patch": "\r\ndiff --git a/astropy/table/table.py b/astropy/table/table.py\r\nindex 5afe212..a024b83 100644\r\n--- a/astropy/table/table.py\r\n+++ b/astropy/table/table.py\r\n@@ -1243,6 +1243,7 @@ class Table:\r\n         # mixin class\r\n         if (not isinstance(data, Column) and not data_is_mixin\r\n                 and isinstance(data, np.ndarray) and len(data.dtype) > 1):\r\n+            warnings.warn(\"In future version 5.2, structured arrays will be added as a Column. Please wrap your data in a Column.\", FutureWarning)\r\n             data = data.view(NdarrayMixin)\r\n             data_is_mixin = True\r\n \r\ndiff --git a/astropy/table/tests/test_table.py b/astropy/table/tests/test_table.py\r\nindex 3fd1c5c..b76655e 100644\r\n--- a/astropy/table/tests/test_table.py\r\n+++ b/astropy/table/tests/test_table.py\r\n@@ -1304,6 +1304,14 @@ class TestSort():\r\n         assert t.dtype.names == ('c',)\r\n \r\n \r\n+\r\n+def test_structured_array_future_warning():\r\n+    import numpy as np\r\n+    from astropy.table import Table\r\n+    structured_array = np.array([(1, 2.0), (3, 4.0)], dtype=[('a', 'i4'), ('b', 'f4')])\r\n+    with pytest.warns(FutureWarning, match=\"In future version 5.2, structured arrays will be added as a Column.\"):\r\n+        Table(structured_array)\r\n+\r\n @pytest.mark.parametrize('kwargs', [{}, {'kind': 'stable'}, {'kind': 'quicksort'}])\r\n def test_sort_kind(kwargs):\r\n     t = Table()\r\n"}}
{"instance_id": "astropy__astropy-13398", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-13398", "model_patch": "\r\ndiff --git a/astropy/coordinates/tests/test_icrs_observed_transformations.py b/astropy/coordinates/tests/test_icrs_observed_transformations.py\r\nindex 23150b7..884f1a7 100644\r\n--- a/astropy/coordinates/tests/test_icrs_observed_transformations.py\r\n+++ b/astropy/coordinates/tests/test_icrs_observed_transformations.py\r\n@@ -76,3 +76,31 @@ def test_icrs_hadec_consistency():\r\n     roundtrip = icoo.transform_to(hd_frame).transform_to(\r\n         CIRS()).transform_to(icoo)\r\n     assert_allclose(roundtrip.separation_3d(icoo), 0*u.mm, atol=1*u.mm)\r\n+def test_itrs_observed_consistency():\r\n+    \"\"\"\r\n+    Check ITRS<->AltAz and ITRS<->HADec for consistency.\r\n+    \"\"\"\r\n+    usph = golden_spiral_grid(200)\r\n+    dist = np.linspace(0.5, 1, len(usph)) * u.km * 1e5\r\n+    icoo = SkyCoord(x=usph.lon, y=usph.lat, z=dist, representation_type='cartesian', frame='itrs')\r\n+\r\n+    observer = EarthLocation(28*u.deg, 23*u.deg, height=2000.*u.km)\r\n+    obstime = Time('J2010')\r\n+    aa_frame = AltAz(obstime=obstime, location=observer)\r\n+    hd_frame = HADec(obstime=obstime, location=observer)\r\n+\r\n+    # check that ITRS-AltAz and ITRS->AltAz are consistent\r\n+    aa1 = icoo.transform_to(aa_frame)\r\n+    assert_allclose(aa1.separation_3d(icoo), 0*u.mm, atol=1*u.mm)\r\n+\r\n+    # check that ITRS-HADec and ITRS->HADec are consistent\r\n+    hd1 = icoo.transform_to(hd_frame)\r\n+    assert_allclose(hd1.separation_3d(icoo), 0*u.mm, atol=1*u.mm)\r\n+\r\n+    # check roundtrip for AltAz\r\n+    roundtrip_aa = icoo.transform_to(aa_frame).transform_to(icoo)\r\n+    assert_allclose(roundtrip_aa.separation_3d(icoo), 0*u.mm, atol=1*u.mm)\r\n+\r\n+    # check roundtrip for HADec\r\n+    roundtrip_hd = icoo.transform_to(hd_frame).transform_to(icoo)\r\n+    assert_allclose(roundtrip_hd.separation_3d(icoo), 0*u.mm, atol=1*u.mm)\r\n"}}
{"instance_id": "astropy__astropy-13453", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-13453", "model_patch": "\r\ndiff --git a/astropy/io/ascii/tests/test_html.py b/astropy/io/ascii/tests/test_html.py\r\nindex 0515efa..f8150c9 100644\r\n--- a/astropy/io/ascii/tests/test_html.py\r\n+++ b/astropy/io/ascii/tests/test_html.py\r\n@@ -728,3 +728,38 @@ def test_read_html_unicode():\r\n                 '</table>']\r\n     dat = Table.read(table_in, format='ascii.html')\r\n     assert np.all(dat['col1'] == ['\u0394', '\u0394'])\r\n+@pytest.mark.skipif('not HAS_BS4')\r\n+def test_html_format_respected():\r\n+    \"\"\"\r\n+    Test that the formats argument is respected when writing tables to HTML.\r\n+    \"\"\"\r\n+    t = Table([(1.23875234858e-24, 3.2348748432e-15), (2, 4)], names=('a', 'b'))\r\n+    buffer_output = StringIO()\r\n+    t.write(buffer_output, format='html', formats={'a': lambda x: f\"{x:.2e}\"})\r\n+\r\n+    expected_output = '''<html>\r\n+ <head>\r\n+  <meta charset=\"utf-8\"/>\r\n+  <meta content=\"text/html;charset=UTF-8\" http-equiv=\"Content-type\"/>\r\n+ </head>\r\n+ <body>\r\n+  <table>\r\n+   <thead>\r\n+    <tr>\r\n+     <th>a</th>\r\n+     <th>b</th>\r\n+    </tr>\r\n+   </thead>\r\n+   <tr>\r\n+    <td>1.24e-24</td>\r\n+    <td>2</td>\r\n+   </tr>\r\n+   <tr>\r\n+    <td>3.23e-15</td>\r\n+    <td>4</td>\r\n+   </tr>\r\n+  </table>\r\n+ </body>\r\n+</html>'''\r\n+\r\n+    assert buffer_output.getvalue().strip() == expected_output.strip()\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-13579", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-13579", "model_patch": "\r\ndiff --git a/astropy/wcs/tests/test_wcs.py b/astropy/wcs/tests/test_wcs.py\r\nindex 80f9c38..ceffbbe 100644\r\n--- a/astropy/wcs/tests/test_wcs.py\r\n+++ b/astropy/wcs/tests/test_wcs.py\r\n@@ -1578,3 +1578,52 @@ def test_swapaxes_same_val_roundtrip():\r\n \r\n     # check round-tripping:\r\n     assert np.allclose(w.wcs_world2pix([val_ref], 0)[0], imcoord, rtol=0, atol=1e-8)\r\n+\r\n+\r\n+def test_sliced_low_level_wcs_world_to_pixel():\r\n+    import numpy as np\r\n+    import astropy.wcs\r\n+    from astropy.coordinates import SkyCoord\r\n+    import astropy.units as u\r\n+\r\n+    nx = 100\r\n+    ny = 25\r\n+    nz = 2\r\n+    wcs_header = {\r\n+        'WCSAXES': 3,\r\n+        'CRPIX1': (nx + 1)/2,\r\n+        'CRPIX2': (ny + 1)/2,\r\n+        'CRPIX3': 1.0,\r\n+        'PC1_1': 0.0,\r\n+        'PC1_2': -1.0,\r\n+        'PC1_3': 0.0,\r\n+        'PC2_1': 1.0,\r\n+        'PC2_2': 0.0,\r\n+        'PC2_3': -1.0,\r\n+        'CDELT1': 5,\r\n+        'CDELT2': 5,\r\n+        'CDELT3': 0.055,\r\n+        'CUNIT1': 'arcsec',\r\n+        'CUNIT2': 'arcsec',\r\n+        'CUNIT3': 'Angstrom',\r\n+        'CTYPE1': 'HPLN-TAN',\r\n+        'CTYPE2': 'HPLT-TAN',\r\n+        'CTYPE3': 'WAVE',\r\n+        'CRVAL1': 0.0,\r\n+        'CRVAL2': 0.0,\r\n+        'CRVAL3': 1.05,\r\n+    }\r\n+    fits_wcs = astropy.wcs.WCS(header=wcs_header)\r\n+\r\n+    pt = SkyCoord(Tx=0*u.arcsec, Ty=0*u.arcsec, frame=astropy.wcs.utils.wcs_to_celestial_frame(fits_wcs))\r\n+    px, py, pz = fits_wcs.world_to_pixel(pt, 1.05*u.angstrom)\r\n+\r\n+    assert np.isclose(px, 49.5)\r\n+    assert np.isclose(py, 12.0)\r\n+\r\n+    ll_sliced_wcs = astropy.wcs.wcsapi.SlicedLowLevelWCS(fits_wcs, 0)\r\n+    hl_sliced_wcs = astropy.wcs.wcsapi.HighLevelWCSWrapper(ll_sliced_wcs)\r\n+    px_sliced, py_sliced = hl_sliced_wcs.world_to_pixel(pt)\r\n+\r\n+    assert np.isclose(px_sliced, 49.5)\r\n+    assert np.isclose(py_sliced, 12.0)\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-13977", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-13977", "model_patch": "\r\ndiff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\r\nindex b98abfa..930258d 100644\r\n--- a/astropy/units/quantity.py\r\n+++ b/astropy/units/quantity.py\r\n@@ -670,7 +670,10 @@ class Quantity(np.ndarray):\r\n             arrays.append(converter(input_) if converter else input_)\r\n \r\n         # Call our superclass's __array_ufunc__\r\n-        result = super().__array_ufunc__(function, method, *arrays, **kwargs)\r\n+        try:\r\n+            result = super().__array_ufunc__(function, method, *arrays, **kwargs)\r\n+        except ValueError:\r\n+            return NotImplemented\r\n         # If unit is None, a plain array is expected (e.g., comparisons), which\r\n         # means we're done.\r\n         # We're also done if the result was None (for method 'at') or\r\ndiff --git a/test_duck_array.py b/test_duck_array.py\r\nnew file mode 100644\r\nindex 0000000..215047a\r\n--- /dev/null\r\n+++ b/test_duck_array.py\r\n@@ -0,0 +1,29 @@\r\n+\r\n+import dataclasses\r\n+import numpy as np\r\n+import astropy.units as u\r\n+\r\n+@dataclasses.dataclass\r\n+class DuckArray(np.lib.mixins.NDArrayOperatorsMixin):\r\n+    ndarray: u.Quantity\r\n+\r\n+    @property\r\n+    def unit(self) -> u.UnitBase:\r\n+        return self.ndarray.unit\r\n+\r\n+    def __array_ufunc__(self, function, method, *inputs, **kwargs):\r\n+\r\n+        inputs = [inp.ndarray if isinstance(inp, DuckArray) else inp for inp in inputs]\r\n+\r\n+        for inp in inputs:\r\n+            if isinstance(inp, np.ndarray):\r\n+                result = inp.__array_ufunc__(function, method, *inputs, **kwargs)\r\n+                if result is not NotImplemented:\r\n+                    return DuckArray(result)\r\n+\r\n+        return NotImplemented\r\n+\r\n+try:\r\n+    result = (1 * u.m) + DuckArray(1 * u.mm)\r\n+except ValueError as e:\r\n+    print(f\"Caught ValueError: {e}\")\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-14096", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-14096", "model_patch": "\r\ndiff --git a/astropy/tests/test_custom_coord.py b/astropy/tests/test_custom_coord.py\r\nnew file mode 100644\r\nindex 0000000..194a1fe\r\n--- /dev/null\r\n+++ b/astropy/tests/test_custom_coord.py\r\n@@ -0,0 +1,13 @@\r\n+\r\n+import pytest\r\n+import astropy.coordinates as coord\r\n+\r\n+class custom_coord(coord.SkyCoord):\r\n+    @property\r\n+    def prop(self):\r\n+        return self.random_attr\r\n+\r\n+def test_custom_coord_error_message():\r\n+    c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')\r\n+    with pytest.raises(AttributeError, match=\"'custom_coord' object has no attribute 'random_attr'\"):\r\n+        c.prop\r\n\\ No newline at end of file\r\ndiff --git a/test_skycoord.py b/test_skycoord.py\r\nnew file mode 100644\r\nindex 0000000..ef5f148\r\n--- /dev/null\r\n+++ b/test_skycoord.py\r\n@@ -0,0 +1,12 @@\r\n+\r\n+import astropy.coordinates as coord\r\n+\r\n+\r\n+class custom_coord(coord.SkyCoord):\r\n+    @property\r\n+    def prop(self):\r\n+        return self.random_attr\r\n+\r\n+\r\n+c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')\r\n+c.prop\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-14182", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-14182", "model_patch": "\r\ndiff --git a/astropy/table/tests/test_table.py b/astropy/table/tests/test_table.py\r\nindex dda2609..2e2625c 100644\r\n--- a/astropy/table/tests/test_table.py\r\n+++ b/astropy/table/tests/test_table.py\r\n@@ -3223,6 +3223,13 @@ def test_read_write_tilde_path(path_type, home_is_tmpdir):\r\n     assert not os.path.exists(test_file)\r\n \r\n \r\n+def test_rst_header_rows():\r\n+    tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\r\n+    output = StringIO()\r\n+    tbl.write(output, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\r\n+    expected_output = \"\"\"===== ========\\n wave response\\n===== ========\\n350.0      0.7\\n950.0      1.2\\n===== ========\\n\"\"\"\r\n+    assert output.getvalue() == expected_output\r\n+\r\n def test_add_list_order():\r\n     t = Table()\r\n     names = list(map(str, range(20)))\r\ndiff --git a/test_rst_header.py b/test_rst_header.py\r\nnew file mode 100644\r\nindex 0000000..1884013\r\n--- /dev/null\r\n+++ b/test_rst_header.py\r\n@@ -0,0 +1,11 @@\r\n+\r\n+from astropy.table import QTable\r\n+import astropy.units as u\r\n+import sys\r\n+\r\n+tbl = QTable({'wave': [350, 950]*u.nm, 'response': [0.7, 1.2]*u.count})\r\n+\r\n+# This should work without errors\r\n+tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\r\n+\r\n+print(\"Script completed successfully, no errors.\")\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-14309", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-14309", "model_patch": "\r\ndiff --git a/astropy/io/registry/tests/test_registries.py b/astropy/io/registry/tests/test_registries.py\r\nindex 188d7a7..4472e21 100644\r\n--- a/astropy/io/registry/tests/test_registries.py\r\n+++ b/astropy/io/registry/tests/test_registries.py\r\n@@ -1139,3 +1139,10 @@ class TestSubclass:\r\n         assert t[\"a\"].unit == u.m\r\n         assert t[\"a\"].format == \"{:13.4f}\"\r\n         assert t[\"a\"].description == \"hello\"\r\n+def test_identify_format_index_error():\r\n+    from astropy.io.registry import identify_format\r\n+    from astropy.table import Table\r\n+\r\n+    # This should raise an IndexError\r\n+    with pytest.raises(IndexError, match=\"tuple index out of range\"):\r\n+        identify_format(\"write\", Table, \"bububu.ecsv\", None, [], {})\r\n\\ No newline at end of file\r\ndiff --git a/run_test.py b/run_test.py\r\nnew file mode 100644\r\nindex 0000000..bc8c4e6\r\n--- /dev/null\r\n+++ b/run_test.py\r\n@@ -0,0 +1,11 @@\r\n+\r\n+from astropy.io.registry.tests.test_registries import test_identify_format_index_error\r\n+\r\n+if __name__ == \"__main__\":\r\n+    try:\r\n+        test_identify_format_index_error()\r\n+        print(\"Test passed: IndexError was raised as expected.\")\r\n+    except AssertionError as e:\r\n+        print(f\"Test failed: {e}\")\r\n+    except Exception as e:\r\n+        print(f\"An unexpected exception occurred: {e}\")\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-14365", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-14365", "model_patch": "\r\ndiff --git a/astropy/io/ascii/tests/test_qdp.py b/astropy/io/ascii/tests/test_qdp.py\r\nindex ef24e6f..981871e 100644\r\n--- a/astropy/io/ascii/tests/test_qdp.py\r\n+++ b/astropy/io/ascii/tests/test_qdp.py\r\n@@ -43,6 +43,27 @@ def test_get_tables_from_qdp_file(tmp_path):\r\n     assert np.isclose(table2[\"MJD_nerr\"][0], -2.37847222222222e-05)\r\n \r\n \r\n+def test_lowercase_commands(tmp_path):\r\n+    # Create a QDP file with lowercase commands\r\n+    qdp_content = \"\"\"\r\n+    read serr 1 2\r\n+    1 0.5 1 0.5\r\n+    \"\"\"\r\n+\r\n+    path = tmp_path / \"lowercase_test.qdp\"\r\n+    with open(path, \"w\") as f:\r\n+        f.write(qdp_content)\r\n+\r\n+    # Attempt to read the QDP file\r\n+    try:\r\n+        table = ascii.read(path, format='ascii.qdp')\r\n+        assert len(table) == 1\r\n+        assert table['col1'][0] == 1\r\n+        assert table['col2'][0] == 0.5\r\n+        assert table['col3'][0] == 1\r\n+        assert table['col4'][0] == 0.5\r\n+    except Exception as e:\r\n+        pytest.fail(f\"Reading lowercase QDP commands failed: {e}\")\r\n def test_roundtrip(tmp_path):\r\n     example_qdp = \"\"\"\r\n     ! Swift/XRT hardness ratio of trigger: XXXX, name: BUBU X-2\r\ndiff --git a/reproduce_issue.py b/reproduce_issue.py\r\nnew file mode 100644\r\nindex 0000000..007f67c\r\n--- /dev/null\r\n+++ b/reproduce_issue.py\r\n@@ -0,0 +1,8 @@\r\n+\r\n+from astropy.table import Table\r\n+\r\n+try:\r\n+    table = Table.read('test.qdp', format='ascii.qdp')\r\n+    print(\"Script completed successfully, no errors.\")\r\n+except Exception as e:\r\n+    print(f\"Error: {e}\")\r\n\\ No newline at end of file\r\ndiff --git a/test.qdp b/test.qdp\r\nnew file mode 100644\r\nindex 0000000..e98e5bc\r\n--- /dev/null\r\n+++ b/test.qdp\r\n@@ -0,0 +1,3 @@\r\n+\r\n+read serr 1 2\r\n+1 0.5 1 0.5\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-14369", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-14369", "model_patch": "\r\ndiff --git a/astropy/io/ascii/tests/test_cds.py b/astropy/io/ascii/tests/test_cds.py\r\nindex 0f5523c..fc10c35 100644\r\n--- a/astropy/io/ascii/tests/test_cds.py\r\n+++ b/astropy/io/ascii/tests/test_cds.py\r\n@@ -85,6 +85,35 @@ def test_roundtrip_mrt_table():\r\n     assert lines == exp_output\r\n \r\n \r\n+def test_cds_units_parsing():\r\n+    \"\"\"\r\n+    Test to ensure that composite units are correctly parsed from MRT files.\r\n+    \"\"\"\r\n+    mrt_data = \"\"\"\r\n+    Title:\r\n+    Authors:\r\n+    Table:\r\n+    =================================================================================\r\n+    Byte-by-byte Description of file: tab.txt\r\n+    --------------------------------------------------------------------------------\r\n+       Bytes Format Units           Label      Explanations\r\n+    --------------------------------------------------------------------------------\r\n+       1- 10 A10    ---            ID         ID\r\n+      12- 21 F10.5  10+3J/m/s/kpc2    SBCONT     Cont surface brightness\r\n+      23- 32 F10.5  10-7J/s/kpc2     SBLINE     Line surface brightness\r\n+    --------------------------------------------------------------------------------\r\n+    ID0001     70.99200   38.51040      \r\n+    ID0001     13.05120   28.19240      \r\n+    ID0001     3.83610    10.98370      \r\n+    ID0001     1.99101    6.78822       \r\n+    ID0001     1.31142    5.01932      \r\n+    \"\"\"\r\n+    \r\n+    table = ascii.read(mrt_data, format='ascii.cds')\r\n+    assert table['SBCONT'].unit == u.Unit('10+3J/m/s/kpc2')\r\n+    assert table['SBLINE'].unit == u.Unit('10-7J/s/kpc2')\r\n+\r\n+\r\n def test_write_byte_by_byte_units():\r\n     t = ascii.read(test_dat)\r\n     col_units = [None, u.C, u.kg, u.m / u.s, u.year]\r\ndiff --git a/reproduce_mrt_issue.py b/reproduce_mrt_issue.py\r\nnew file mode 100644\r\nindex 0000000..fa7a6ec\r\n--- /dev/null\r\n+++ b/reproduce_mrt_issue.py\r\n@@ -0,0 +1,5 @@\r\n+\r\n+from astropy.table import Table\r\n+\r\n+dat = Table.read('tab.txt', format='ascii.cds')\r\n+print(dat)\r\n\\ No newline at end of file\r\ndiff --git a/tab.txt b/tab.txt\r\nnew file mode 100644\r\nindex 0000000..a7e9d61\r\n--- /dev/null\r\n+++ b/tab.txt\r\n@@ -0,0 +1,18 @@\r\n+\r\n+Title:\r\n+Authors:\r\n+Table:\r\n+================================================================================\r\n+Byte-by-byte Description of file: tab.txt\r\n+--------------------------------------------------------------------------------\r\n+   Bytes Format Units           Label      Explanations\r\n+--------------------------------------------------------------------------------\r\n+   1- 10 A10    ---            ID         ID\r\n+  12- 21 F10.5  10+3J/m/s/kpc2    SBCONT     Cont surface brightness\r\n+  23- 32 F10.5  10-7J/s/kpc2 SBLINE     Line surface brightness\r\n+--------------------------------------------------------------------------------\r\n+ID0001     70.99200   38.51040      \r\n+ID0001     13.05120   28.19240      \r\n+ID0001     3.83610    10.98370      \r\n+ID0001     1.99101    6.78822       \r\n+ID0001     1.31142    5.01932      \r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-14508", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-14508", "model_patch": "\r\ndiff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\r\nindex 118bfce..0a2bc74 100644\r\n--- a/astropy/io/fits/card.py\r\n+++ b/astropy/io/fits/card.py\r\n@@ -1299,7 +1299,9 @@ def _format_value(value):\r\n \r\n def _format_float(value):\r\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\r\n-    value_str = f\"{value:.16G}\"\r\n+    value_str = str(value)\r\n+    if len(value_str) > 20:\r\n+        value_str = f\"{value:.16G}\"\r\n     if \".\" not in value_str and \"E\" not in value_str:\r\n         value_str += \".0\"\r\n     elif \"E\" in value_str:\r\ndiff --git a/create_test_fits.py b/create_test_fits.py\r\nnew file mode 100644\r\nindex 0000000..ac7f9b6\r\n--- /dev/null\r\n+++ b/create_test_fits.py\r\n@@ -0,0 +1,12 @@\r\n+\r\n+from astropy.io import fits\r\n+import numpy as np\r\n+\r\n+# Create a primary HDU with a minimal header\r\n+hdu = fits.PrimaryHDU(data=np.zeros((10, 10)))\r\n+\r\n+# Add the specific card to the header\r\n+hdu.header['HIERARCH ESO IFM CL RADIUS'] = (0.009125, '[m] radius arround actuator to avoid')\r\n+\r\n+# Write the FITS file\r\n+hdu.writeto('test.fits', overwrite=True)\r\n\\ No newline at end of file\r\ndiff --git a/reproduce_issue.py b/reproduce_issue.py\r\nnew file mode 100644\r\nindex 0000000..3fd506a\r\n--- /dev/null\r\n+++ b/reproduce_issue.py\r\n@@ -0,0 +1,13 @@\r\n+\r\n+from astropy.io import fits\r\n+\r\n+# Assuming 'test.fits' is available in the current directory\r\n+hdr = fits.getheader('test.fits')\r\n+c = hdr.cards['ESO IFM CL RADIUS']\r\n+\r\n+print(repr(c))\r\n+print(str(c))\r\n+\r\n+new_c = fits.Card(f'HIERARCH {c.keyword}', c.value, c.comment)\r\n+print(repr(new_c))\r\n+print(str(new_c))\r\n\\ No newline at end of file\r\ndiff --git a/test_card.py b/test_card.py\r\nnew file mode 100644\r\nindex 0000000..10188db\r\n--- /dev/null\r\n+++ b/test_card.py\r\n@@ -0,0 +1,15 @@\r\n+\r\n+import unittest\r\n+from astropy.io import fits\r\n+\r\n+class TestFitsCard(unittest.TestCase):\r\n+    def test_float_representation(self):\r\n+        # Create a card with the specific float value and comment\r\n+        card = fits.Card('HIERARCH ESO IFM CL RADIUS', 0.009125, '[m] radius arround actuator to avoid')\r\n+        \r\n+        # Check the string representation\r\n+        expected_str = 'HIERARCH ESO IFM CL RADIUS = 0.009125 / [m] radius arround actuator to avoid    '\r\n+        self.assertEqual(str(card), expected_str)\r\n+\r\n+if __name__ == '__main__':\r\n+    unittest.main()\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-14539", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-14539", "model_patch": "\r\ndiff --git a/astropy/io/fits/tests/test_fitsdiff.py b/astropy/io/fits/tests/test_fitsdiff.py\r\nindex 0753c9c..b1ad61a 100644\r\n--- a/astropy/io/fits/tests/test_fitsdiff.py\r\n+++ b/astropy/io/fits/tests/test_fitsdiff.py\r\n@@ -345,3 +345,14 @@ class Test_FITSDiff(FitsTestCase):\r\n \r\n         with open(os.path.expanduser(self.temp(\"diff_report.txt\"))) as f:\r\n             assert \"Extra keyword 'TESTKEY' in b: 'testval'\" in f.read()\r\n+\r\n+    def test_vla_no_diff(self):\r\n+        # Create a VLA column\r\n+        col = fits.Column('a', format='QD', array=[[0], [0, 0]])\r\n+        hdu = fits.BinTableHDU.from_columns([col])\r\n+        tmp_file = self.temp('vla_test.fits')\r\n+        hdu.writeto(tmp_file, overwrite=True)\r\n+\r\n+        # Compare the file to itself\r\n+        diff = FITSDiff(tmp_file, tmp_file)\r\n+        assert diff.identical, 'FITSDiff should report identical for the same file'\r\n\\ No newline at end of file\r\ndiff --git a/reproduce_fitsdiff.py b/reproduce_fitsdiff.py\r\nnew file mode 100644\r\nindex 0000000..5cfc6da\r\n--- /dev/null\r\n+++ b/reproduce_fitsdiff.py\r\n@@ -0,0 +1,8 @@\r\n+\r\n+from astropy.io import fits\r\n+col = fits.Column('a', format='QD', array=[[0], [0, 0]])\r\n+hdu = fits.BinTableHDU.from_columns([col])\r\n+hdu.writeto('diffbug.fits', overwrite=True)\r\n+\r\n+print(fits.FITSDiff('diffbug.fits', 'diffbug.fits').identical)\r\n+fits.printdiff('diffbug.fits', 'diffbug.fits')\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-14598", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-14598", "model_patch": "\r\ndiff --git a/astropy/io/fits/tests/test_fits_card.py b/astropy/io/fits/tests/test_fits_card.py\r\nnew file mode 100644\r\nindex 0000000..0bc0f09\r\n--- /dev/null\r\n+++ b/astropy/io/fits/tests/test_fits_card.py\r\n@@ -0,0 +1,10 @@\r\n+\r\n+from astropy.io import fits\r\n+import pytest\r\n+\r\n+\r\n+def test_fits_card_double_single_quotes():\r\n+    for n in range(60, 70):\r\n+        card1 = fits.Card('CONFIG', \"x\" * n + \"''\")\r\n+        card2 = fits.Card.fromstring(str(card1))\r\n+        assert card1.value == card2.value, f\"Mismatch at length {n}: {card1.value} != {card2.value}\"\r\n\\ No newline at end of file\r\ndiff --git a/reproduce_fits_issue.py b/reproduce_fits_issue.py\r\nnew file mode 100644\r\nindex 0000000..c33a260\r\n--- /dev/null\r\n+++ b/reproduce_fits_issue.py\r\n@@ -0,0 +1,10 @@\r\n+\r\n+from astropy.io import fits\r\n+\r\n+for n in range(60, 70):\r\n+    card1 = fits.Card('CONFIG', \"x\" * n + \"''\")\r\n+    card2 = fits.Card.fromstring(str(card1))\r\n+    print(n, len(card1.value), card1.value == card2.value)\r\n+    if card1.value != card2.value:\r\n+        print(card1.value)\r\n+        print(card2.value)\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-14995", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-14995", "model_patch": "\r\ndiff --git a/astropy/nddata/tests/test_nddata.py b/astropy/nddata/tests/test_nddata.py\r\nindex 033b555..efdeca6 100644\r\n--- a/astropy/nddata/tests/test_nddata.py\r\n+++ b/astropy/nddata/tests/test_nddata.py\r\n@@ -11,7 +11,7 @@ import pytest\r\n from numpy.testing import assert_array_equal\r\n \r\n from astropy import units as u\r\n-from astropy.nddata import NDDataArray\r\n+from astropy.nddata import NDDataArray, NDDataRef\r\n from astropy.nddata import _testing as nd_testing\r\n from astropy.nddata.nddata import NDData\r\n from astropy.nddata.nduncertainty import StdDevUncertainty\r\n@@ -707,3 +707,28 @@ def test_collapse(mask, unit, propagate_uncertainties, operation_ignores_mask):\r\n             # as the data array, so we can just check for equality:\r\n             if method in ext_methods and propagate_uncertainties:\r\n                 assert np.ma.all(np.ma.equal(astropy_method, nddata_method))\r\n+\r\n+\r\n+def test_nddataref_mask_propagation():\r\n+    array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\r\n+    mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\r\n+\r\n+    nref_nomask = NDDataRef(array)\r\n+    nref_mask = NDDataRef(array, mask=mask)\r\n+\r\n+    # multiply no mask by constant (no mask * no mask)\r\n+    assert nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask is None\r\n+\r\n+    # multiply no mask by itself (no mask * no mask)\r\n+    assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\r\n+\r\n+    # multiply mask by constant (mask * no mask)\r\n+    with pytest.raises(TypeError):\r\n+        nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\r\n+\r\n+    # multiply mask by itself (mask * mask)\r\n+    assert np.array_equal(nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask, mask)\r\n+\r\n+    # multiply mask by no mask (mask * no mask)\r\n+    with pytest.raises(TypeError):\r\n+        nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\r\n\\ No newline at end of file\r\ndiff --git a/test_nddataref_mask_propagation.py b/test_nddataref_mask_propagation.py\r\nnew file mode 100644\r\nindex 0000000..6223b35\r\n--- /dev/null\r\n+++ b/test_nddataref_mask_propagation.py\r\n@@ -0,0 +1,32 @@\r\n+\r\n+import numpy as np\r\n+from astropy.nddata import NDDataRef\r\n+\r\n+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\r\n+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\r\n+\r\n+nref_nomask = NDDataRef(array)\r\n+nref_mask = NDDataRef(array, mask=mask)\r\n+\r\n+# multiply no mask by constant (no mask * no mask)\r\n+assert nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask is None\r\n+\r\n+# multiply no mask by itself (no mask * no mask)\r\n+assert nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask is None\r\n+\r\n+# multiply mask by constant (mask * no mask)\r\n+try:\r\n+    nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\r\n+except TypeError as e:\r\n+    print(\"TypeError occurred as expected: \", e)\r\n+\r\n+# multiply mask by itself (mask * mask)\r\n+assert np.array_equal(nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask, mask)\r\n+\r\n+# multiply mask by no mask (mask * no mask)\r\n+try:\r\n+    nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\r\n+except TypeError as e:\r\n+    print(\"TypeError occurred as expected: \", e)\r\n+\r\n+print(\"Script completed successfully, no errors.\")\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-7166", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-7166", "model_patch": "\r\ndiff --git a/astropy/utils/tests/test_misc.py b/astropy/utils/tests/test_misc.py\r\nindex 4f632e8..451a105 100644\r\n--- a/astropy/utils/tests/test_misc.py\r\n+++ b/astropy/utils/tests/test_misc.py\r\n@@ -88,6 +88,21 @@ def test_inherit_docstrings():\r\n         # TODO: Maybe if __doc__ is None this test should be skipped instead?\r\n         assert Subclass.__call__.__doc__ == \"FOO\"\r\n \r\n+def test_inherit_docstrings_with_property():\r\n+    class Base(metaclass=misc.InheritDocstrings):\r\n+        @property\r\n+        def foo(self):\r\n+            \"FOO\"\r\n+            return 'foo'\r\n+\r\n+    class Subclass(Base):\r\n+        @property\r\n+        def foo(self):\r\n+            return 'subclass foo'\r\n+\r\n+    if Base.foo.__doc__ is not None:\r\n+        # TODO: Maybe if __doc__ is None this test should be skipped instead?\r\n+        assert Subclass.foo.__doc__ == \"FOO\"\r\n \r\n def test_set_locale():\r\n     # First, test if the required locales are available\r\n"}}
{"instance_id": "astropy__astropy-7336", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-7336", "model_patch": "\r\ndiff --git a/astropy/units/decorators.py b/astropy/units/decorators.py\r\nindex 8bece5a..d1bac37 100644\r\n--- a/astropy/units/decorators.py\r\n+++ b/astropy/units/decorators.py\r\n@@ -220,7 +220,7 @@ class QuantityInput:\r\n             # Call the original function with any equivalencies in force.\r\n             with add_enabled_equivalencies(self.equivalencies):\r\n                 return_ = wrapped_function(*func_args, **func_kwargs)\r\n-            if wrapped_signature.return_annotation is not inspect.Signature.empty:\r\n+            if wrapped_signature.return_annotation is not inspect.Signature.empty and return_ is not None:\r\n                 return return_.to(wrapped_signature.return_annotation)\r\n             else:\r\n                 return return_\r\ndiff --git a/reproduce.py b/reproduce.py\r\nnew file mode 100644\r\nindex 0000000..f93f201\r\n--- /dev/null\r\n+++ b/reproduce.py\r\n@@ -0,0 +1,13 @@\r\n+\r\n+import astropy.units as u\r\n+\r\n+\r\n+class PoC(object):\r\n+\r\n+    @u.quantity_input\r\n+    def __init__(self, voltage: u.V) -> None:\r\n+        pass\r\n+\r\n+\r\n+if __name__ == '__main__':\r\n+    poc = PoC(1.*u.V)\r\n\\ No newline at end of file\r\ndiff --git a/test_quantity_input.py b/test_quantity_input.py\r\nnew file mode 100644\r\nindex 0000000..59ff472\r\n--- /dev/null\r\n+++ b/test_quantity_input.py\r\n@@ -0,0 +1,17 @@\r\n+\r\n+import astropy.units as u\r\n+\r\n+\r\n+def test_quantity_input_with_none_return_type():\r\n+    class PoC(object):\r\n+\r\n+        @u.quantity_input\r\n+        def __init__(self, voltage: u.V) -> None:\r\n+            pass\r\n+\r\n+    poc = PoC(1.*u.V)\r\n+    assert poc is not None\r\n+\r\n+\r\n+test_quantity_input_with_none_return_type()\r\n+print(\"Test completed successfully, no errors.\")\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-7606", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-7606", "model_patch": "\r\ndiff --git a/astropy/units/tests/test_units.py b/astropy/units/tests/test_units.py\r\nindex 000c12d..aa307be 100644\r\n--- a/astropy/units/tests/test_units.py\r\n+++ b/astropy/units/tests/test_units.py\r\n@@ -800,3 +800,8 @@ def test_unit_summary_prefixes():\r\n             assert prefixes == 'No'\r\n         elif unit.name == 'vox':\r\n             assert prefixes == 'Yes'\r\n+def test_unrecognized_unit_equality_with_none():\r\n+    # Test that comparing an UnrecognizedUnit with None does not raise an error\r\n+    x = u.Unit('asdf', parse_strict='silent')\r\n+    assert not (x == None)  # Should be False\r\n+    assert x != None\r\n\\ No newline at end of file\r\ndiff --git a/test_unit_equality.py b/test_unit_equality.py\r\nnew file mode 100644\r\nindex 0000000..753b9b4\r\n--- /dev/null\r\n+++ b/test_unit_equality.py\r\n@@ -0,0 +1,10 @@\r\n+\r\n+from astropy.units import Unit\r\n+\r\n+x = Unit('asdf', parse_strict='silent')\r\n+\r\n+try:\r\n+    result = (x == None)  # Should be False\r\n+    print(\"Comparison result:\", result)\r\n+except TypeError as e:\r\n+    print(\"Error:\", e)\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-7671", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-7671", "model_patch": "\r\ndiff --git a/astropy/tests/tests/test_minversion.py b/astropy/tests/tests/test_minversion.py\r\nnew file mode 100644\r\nindex 0000000..d121bf0\r\n--- /dev/null\r\n+++ b/astropy/tests/tests/test_minversion.py\r\n@@ -0,0 +1,10 @@\r\n+\r\n+from astropy.utils import minversion\r\n+import pytest\r\n+\r\n+def test_minversion_failure():\r\n+    with pytest.raises(TypeError):\r\n+        assert not minversion('numpy', '1.14dev')\r\n+\r\n+if __name__ == \"__main__\":\r\n+    pytest.main()\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-8707", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-8707", "model_patch": "\r\ndiff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\r\nindex ad07e6d..45c7c8a 100644\r\n--- a/astropy/io/fits/header.py\r\n+++ b/astropy/io/fits/header.py\r\n@@ -332,6 +332,10 @@ class Header:\r\n         Creates an HDU header from a byte string containing the entire header\r\n         data.\r\n \r\n+        If `data` is of type `bytes`, it will be decoded to `str` using ASCII encoding.\r\n+\r\n+        If `data` is of type `bytes`, it will be decoded to `str` using ASCII encoding.\r\n+\r\n         Parameters\r\n         ----------\r\n         data : str\r\ndiff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\r\nindex 7c1725a..dec29db 100644\r\n--- a/astropy/io/fits/tests/test_header.py\r\n+++ b/astropy/io/fits/tests/test_header.py\r\n@@ -2794,3 +2794,19 @@ class TestRecordValuedKeywordCards(FitsTestCase):\r\n         with open(self.temp('mode.fits'), mode=mode) as ff:\r\n             hdu = fits.ImageHDU(data=np.ones(5))\r\n             hdu.writeto(ff)\r\n+    def test_fromstring_with_bytes_and_str(self):\r\n+        header_str = 'SIMPLE  =                    T / file does conform to FITS standard'\r\n+        header_bytes = header_str.encode('ascii')\r\n+\r\n+        # Test with str input\r\n+        header_from_str = fits.Header.fromstring(header_str)\r\n+        assert header_from_str is not None\r\n+\r\n+        # Test with bytes input\r\n+        header_from_bytes = fits.Header.fromstring(header_bytes)\r\n+        assert header_from_bytes is not None\r\n+\r\n+        # Ensure both headers are equivalent\r\n+        assert header_from_str == header_from_bytes\r\n+\r\n+        print(\"Test for fromstring with bytes and str passed.\")\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "astropy__astropy-8872", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "astropy__astropy-8872", "model_patch": "\r\ndiff --git a/astropy/units/tests/test_quantity.py b/astropy/units/tests/test_quantity.py\r\nindex be18e65..61d321e 100644\r\n--- a/astropy/units/tests/test_quantity.py\r\n+++ b/astropy/units/tests/test_quantity.py\r\n@@ -37,6 +37,22 @@ except ImportError:\r\n \r\n class TestQuantityCreation:\r\n \r\n+    def test_float16_dtype(self):\r\n+        # Test that np.float16 gets upgraded to np.float64\r\n+        q = np.float16(1) * u.km\r\n+        assert q.dtype == np.float64\r\n+\r\n+        # Test that other float types retain their dtype\r\n+        q32 = np.float32(1) * u.km\r\n+        assert q32.dtype == np.float32\r\n+\r\n+        q64 = np.float64(1) * u.km\r\n+        assert q64.dtype == np.float64\r\n+\r\n+        q128 = np.float128(1) * u.km\r\n+        assert q128.dtype == np.float128\r\n+\r\n+\r\n     def test_1(self):\r\n         # create objects through operations with Unit objects:\r\n \r\n"}}
{"instance_id": "django__django-10097", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "django__django-10097", "model_patch": "\r\ndiff --git a/tests/validators/invalid_urls.txt b/tests/validators/invalid_urls.txt\r\nindex 04a0b5f..43d1289 100644\r\n--- a/tests/validators/invalid_urls.txt\r\n+++ b/tests/validators/invalid_urls.txt\r\n@@ -56,4 +56,5 @@ http://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.example.\r\n http://example.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.com\r\n http://example.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r\n http://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.aaaaaaaaaaaaaaaaaaaaaaaaa\r\n+http://foo/bar@example.com\r\n https://test.[com\r\n"}}
{"instance_id": "psf__requests-1724", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "psf__requests-1724", "model_patch": "\r\ndiff --git a/test_requests.py b/test_requests.py\r\nindex a593db3..e2d24e2 100755\r\n--- a/test_requests.py\r\n+++ b/test_requests.py\r\n@@ -55,6 +55,15 @@ class RequestsTestCase(unittest.TestCase):\r\n         requests.put\r\n         requests.patch\r\n         requests.post\r\n+    def test_unicode_method_name(self):\r\n+        \"\"\"Test for UnicodeDecodeError with Unicode method name.\"\"\"\r\n+        files = {u'file': open(u'/usr/bin/diff', u'rb')}\r\n+        try:\r\n+            response = requests.request(method=u'POST', url=u'http://httpbin.org/post', files=files)\r\n+            self.assertTrue(response.ok)\r\n+        except UnicodeDecodeError:\r\n+            self.fail(\"UnicodeDecodeError occurred with Unicode method name.\")\r\n+\r\n \r\n     def test_invalid_url(self):\r\n         with pytest.raises(MissingSchema):\r\n"}}
{"instance_id": "scikit-learn__scikit-learn-12585", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "scikit-learn__scikit-learn-12585", "model_patch": "\r\ndiff --git a/reproduce_clone_issue.py b/reproduce_clone_issue.py\r\nnew file mode 100644\r\nindex 0000000..e753e1d\r\n--- /dev/null\r\n+++ b/reproduce_clone_issue.py\r\n@@ -0,0 +1,9 @@\r\n+\r\n+from sklearn.preprocessing import StandardScaler\r\n+from sklearn.base import clone\r\n+\r\n+try:\r\n+    clone(StandardScaler(with_mean=StandardScaler))\r\n+    print(\"Script completed successfully, no errors.\")\r\n+except Exception as e:\r\n+    print(\"Error:\", e)\r\n\\ No newline at end of file\r\ndiff --git a/sklearn/base.py b/sklearn/base.py\r\nindex 56ffb18..3499827 100644\r\n--- a/sklearn/base.py\r\n+++ b/sklearn/base.py\r\n@@ -48,7 +48,7 @@ def clone(estimator, safe=True):\r\n     # XXX: not handling dictionaries\r\n     if estimator_type in (list, tuple, set, frozenset):\r\n         return estimator_type([clone(e, safe=safe) for e in estimator])\r\n-    elif not hasattr(estimator, 'get_params'):\r\n+    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):\r\n         if not safe:\r\n             return copy.deepcopy(estimator)\r\n         else:\r\ndiff --git a/sklearn/tests/test_base.py b/sklearn/tests/test_base.py\r\nindex ebcb389..1e465ef 100644\r\n--- a/sklearn/tests/test_base.py\r\n+++ b/sklearn/tests/test_base.py\r\n@@ -442,3 +442,13 @@ def test_pickling_works_when_getstate_is_overwritten_in_the_child_class():\r\n     estimator_restored = pickle.loads(serialized)\r\n     assert_equal(estimator_restored.attribute_pickled, 5)\r\n     assert_equal(estimator_restored._attribute_not_pickled, None)\r\n+\r\n+def test_clone_with_estimator_class():\r\n+    from sklearn.preprocessing import StandardScaler\r\n+    from sklearn.base import clone\r\n+\r\n+    try:\r\n+        clone(StandardScaler(with_mean=StandardScaler))\r\n+        print(\"Test passed: clone works with estimator class as parameter.\")\r\n+    except Exception as e:\r\n+        print(\"Test failed:\", e)\r\n\\ No newline at end of file\r\n"}}
{"instance_id": "sphinx-doc__sphinx-8721", "model_name_or_path": "gpt-4o", "full_output": null, "model_patch": {"model_name_or_path": "sweagent_outputs", "instance_id": "sphinx-doc__sphinx-8721", "model_patch": "\r\ndiff --git a/tests/test_ext_viewcode.py b/tests/test_ext_viewcode.py\r\nindex 7986409..5923f57 100644\r\n--- a/tests/test_ext_viewcode.py\r\n+++ b/tests/test_ext_viewcode.py\r\n@@ -49,6 +49,13 @@ def test_viewcode(app, status, warning):\r\n             '<span>    &quot;&quot;&quot;</span></div>\\n') in result\r\n \r\n \r\n+@pytest.mark.sphinx(testroot='ext-viewcode')\r\n+def test_viewcode_no_epub_pages(app, status, warning):\r\n+    app.builder.build(['epub'])\r\n+\r\n+    # Check that no module pages are created for epub\r\n+    epub_dir = app.outdir / '_modules'\r\n+    assert not epub_dir.exists(), \"Module pages should not be created for epub when viewcode_enable_epub=False\"\r\n @pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\r\n def test_linkcode(app, status, warning):\r\n     app.builder.build(['objects'])\r\n"}}
